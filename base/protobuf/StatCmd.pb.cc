// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StatCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* TestStatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestStatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeToStatLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeToStatLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillMonsterNumStatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillMonsterNumStatCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayGetZenyCountCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayGetZenyCountCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatCurLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatCurLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWorldLevelCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldLevelCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetWear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetWear_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetWearUseCountStatCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetWearUseCountStatCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETradeListType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_StatCmd_2eproto() {
  protobuf_AddDesc_StatCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StatCmd.proto");
  GOOGLE_CHECK(file != NULL);
  TestStatCmd_descriptor_ = file->message_type(0);
  static const int TestStatCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestStatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestStatCmd, param_),
  };
  TestStatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestStatCmd_descriptor_,
      TestStatCmd::default_instance_,
      TestStatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestStatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestStatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestStatCmd));
  StatCmd_descriptor_ = file->message_type(1);
  static const int StatCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, subkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, subkey2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, isfloat_),
  };
  StatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatCmd_descriptor_,
      StatCmd::default_instance_,
      StatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatCmd));
  TradeToStatLogCmd_descriptor_ = file->message_type(2);
  static const int TradeToStatLogCmd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, sellerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, buyerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, pendingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, buyername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, elisttype_),
  };
  TradeToStatLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeToStatLogCmd_descriptor_,
      TradeToStatLogCmd::default_instance_,
      TradeToStatLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeToStatLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeToStatLogCmd));
  KillMonsterNumStatCmd_descriptor_ = file->message_type(3);
  static const int KillMonsterNumStatCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, killmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, professionid_),
  };
  KillMonsterNumStatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillMonsterNumStatCmd_descriptor_,
      KillMonsterNumStatCmd::default_instance_,
      KillMonsterNumStatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterNumStatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillMonsterNumStatCmd));
  DayGetZenyCountCmd_descriptor_ = file->message_type(4);
  static const int DayGetZenyCountCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, baselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, joblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, normal_zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, charge_zeny_),
  };
  DayGetZenyCountCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayGetZenyCountCmd_descriptor_,
      DayGetZenyCountCmd::default_instance_,
      DayGetZenyCountCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGetZenyCountCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayGetZenyCountCmd));
  StatCurLevel_descriptor_ = file->message_type(5);
  static const int StatCurLevel_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, last_offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, last_baselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, last_joblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, cur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, cur_baselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, cur_joblv_),
  };
  StatCurLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatCurLevel_descriptor_,
      StatCurLevel::default_instance_,
      StatCurLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatCurLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatCurLevel));
  ReqWorldLevelCmd_descriptor_ = file->message_type(6);
  static const int ReqWorldLevelCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldLevelCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldLevelCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldLevelCmd, zoneid_),
  };
  ReqWorldLevelCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWorldLevelCmd_descriptor_,
      ReqWorldLevelCmd::default_instance_,
      ReqWorldLevelCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldLevelCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldLevelCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWorldLevelCmd));
  PetWear_descriptor_ = file->message_type(7);
  static const int PetWear_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWear, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWear, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWear, counts_),
  };
  PetWear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetWear_descriptor_,
      PetWear::default_instance_,
      PetWear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetWear));
  PetWearUseCountStatCmd_descriptor_ = file->message_type(8);
  static const int PetWearUseCountStatCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearUseCountStatCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearUseCountStatCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearUseCountStatCmd, wears_),
  };
  PetWearUseCountStatCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetWearUseCountStatCmd_descriptor_,
      PetWearUseCountStatCmd::default_instance_,
      PetWearUseCountStatCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearUseCountStatCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearUseCountStatCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetWearUseCountStatCmd));
  StatParam_descriptor_ = file->enum_type(0);
  ETradeListType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StatCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestStatCmd_descriptor_, &TestStatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatCmd_descriptor_, &StatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeToStatLogCmd_descriptor_, &TradeToStatLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillMonsterNumStatCmd_descriptor_, &KillMonsterNumStatCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayGetZenyCountCmd_descriptor_, &DayGetZenyCountCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatCurLevel_descriptor_, &StatCurLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWorldLevelCmd_descriptor_, &ReqWorldLevelCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetWear_descriptor_, &PetWear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetWearUseCountStatCmd_descriptor_, &PetWearUseCountStatCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StatCmd_2eproto() {
  delete TestStatCmd::default_instance_;
  delete TestStatCmd_reflection_;
  delete StatCmd::default_instance_;
  delete StatCmd_reflection_;
  delete TradeToStatLogCmd::default_instance_;
  delete TradeToStatLogCmd_reflection_;
  delete KillMonsterNumStatCmd::default_instance_;
  delete KillMonsterNumStatCmd_reflection_;
  delete DayGetZenyCountCmd::default_instance_;
  delete DayGetZenyCountCmd_reflection_;
  delete StatCurLevel::default_instance_;
  delete StatCurLevel_reflection_;
  delete ReqWorldLevelCmd::default_instance_;
  delete ReqWorldLevelCmd_reflection_;
  delete PetWear::default_instance_;
  delete PetWear_reflection_;
  delete PetWearUseCountStatCmd::default_instance_;
  delete PetWearUseCountStatCmd_reflection_;
}

void protobuf_AddDesc_StatCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_RecordTrade_2eproto();
  ::Cmd::protobuf_AddDesc_RecordCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rStatCmd.proto\022\003Cmd\032\nxCmd.proto\032\017SceneI"
    "tem.proto\032\021RecordTrade.proto\032\017RecordCmd."
    "proto\032\021ProtoCommon.proto\"e\n\013TestStatCmd\022"
    "(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rSTAT_PROTOCM"
    "D\022,\n\005param\030\002 \001(\0162\016.Cmd.StatParam:\rTEST_S"
    "TAT_CMD\"\342\001\n\007StatCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\rSTAT_PROTOCMD\022\'\n\005param\030\002 \001(\0162\016.C"
    "md.StatParam:\010STAT_CMD\022\014\n\004type\030\003 \001(\r\022\013\n\003"
    "key\030\004 \001(\004\022\016\n\006subkey\030\005 \001(\004\022\022\n\007subkey2\030\006 \001"
    "(\004:\0010\022\r\n\005level\030\007 \001(\r\022\016\n\006value1\030\010 \001(\004\022\016\n\006"
    "value2\030\t \001(\004\022\026\n\007isfloat\030\013 \001(\010:\005false\"\215\003\n"
    "\021TradeToStatLogCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\rSTAT_PROTOCMD\0220\n\005param\030\002 \001(\0162\016.Cm"
    "d.StatParam:\021LOG_TRADE_TO_STAT\022\035\n\005eType\030"
    "\003 \002(\0162\016.Cmd.EOperType\022\021\n\006itemid\030\004 \001(\r:\0010"
    "\022\020\n\005price\030\005 \001(\r:\0010\022\020\n\005count\030\006 \001(\r:\0010\022\023\n\010"
    "sellerid\030\007 \001(\004:\0010\022\022\n\007buyerid\030\010 \001(\004:\0010\022\026\n"
    "\013pendingtime\030\t \001(\r:\0010\022\024\n\ttradetime\030\n \001(\r"
    ":\0010\022\023\n\010refinelv\030\013 \001(\r:\0010\022\037\n\010itemdata\030\014 \001"
    "(\0132\r.Cmd.ItemData\022\021\n\tbuyername\030\r \001(\t\022&\n\t"
    "elisttype\030\016 \002(\0162\023.Cmd.ETradeListType\"\332\001\n"
    "\025KillMonsterNumStatCmd\022(\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\rSTAT_PROTOCMD\0220\n\005param\030\002 \001(\0162"
    "\016.Cmd.StatParam:\021STAT_KILL_MONSTER\022\016\n\006us"
    "erid\030\003 \002(\004\022)\n\013killmonster\030\004 \003(\0132\024.Cmd.St"
    "atKillMonster\022\021\n\006zoneid\030\005 \001(\r:\0010\022\027\n\014prof"
    "essionid\030\006 \001(\r:\0010\"\365\001\n\022DayGetZenyCountCmd"
    "\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rSTAT_PROTOC"
    "MD\0226\n\005param\030\002 \001(\0162\016.Cmd.StatParam:\027STAT_"
    "DAY_GET_ZENY_COUNT\022\016\n\006userid\030\003 \002(\004\022\020\n\010us"
    "ername\030\004 \001(\t\022\016\n\006baselv\030\005 \001(\r\022\r\n\005joblv\030\006 "
    "\001(\r\022\022\n\nprofession\030\007 \001(\r\022\023\n\013normal_zeny\030\010"
    " \001(\004\022\023\n\013charge_zeny\030\t \001(\004\"\363\001\n\014StatCurLev"
    "el\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rSTAT_PROT"
    "OCMD\022-\n\005param\030\002 \001(\0162\016.Cmd.StatParam:\016STA"
    "T_CUR_LEVEL\022\016\n\006userid\030\003 \002(\004\022\030\n\020last_offl"
    "inetime\030\004 \001(\r\022\023\n\013last_baselv\030\005 \001(\r\022\022\n\nla"
    "st_joblv\030\006 \001(\r\022\020\n\010cur_time\030\007 \001(\r\022\022\n\ncur_"
    "baselv\030\010 \001(\r\022\021\n\tcur_joblv\030\t \001(\r\"|\n\020ReqWo"
    "rldLevelCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\r"
    "STAT_PROTOCMD\022.\n\005param\030\002 \001(\0162\016.Cmd.StatP"
    "aram:\017REQ_WORLD_LEVEL\022\016\n\006zoneid\030\003 \001(\r\"N\n"
    "\007PetWear\022\021\n\006charid\030\001 \001(\004:\0010\022 \n\005types\030\002 \003"
    "(\0162\021.Cmd.EQualityType\022\016\n\006counts\030\003 \003(\r\"\226\001"
    "\n\026PetWearUseCountStatCmd\022(\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\rSTAT_PROTOCMD\0225\n\005param\030\002 \001("
    "\0162\016.Cmd.StatParam:\026STAT_PET_WEAR_USECOUN"
    "T\022\033\n\005wears\030\003 \003(\0132\014.Cmd.PetWear*\274\001\n\tStatP"
    "aram\022\021\n\rTEST_STAT_CMD\020\001\022\014\n\010STAT_CMD\020\002\022\025\n"
    "\021LOG_TRADE_TO_STAT\020\003\022\025\n\021STAT_KILL_MONSTE"
    "R\020\004\022\033\n\027STAT_DAY_GET_ZENY_COUNT\020\005\022\022\n\016STAT"
    "_CUR_LEVEL\020\006\022\023\n\017REQ_WORLD_LEVEL\020\007\022\032\n\026STA"
    "T_PET_WEAR_USECOUNT\020\010*m\n\016ETradeListType\022"
    "\024\n\020ETRADE_ITEM_INFO\020\001\022\027\n\023ETRADE_PENDING_"
    "LIST\020\002\022\025\n\021ETRADE_SALED_LIST\020\003\022\025\n\021ETRADE_"
    "BUYED_LIST\020\004", 2212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StatCmd.proto", &protobuf_RegisterTypes);
  TestStatCmd::default_instance_ = new TestStatCmd();
  StatCmd::default_instance_ = new StatCmd();
  TradeToStatLogCmd::default_instance_ = new TradeToStatLogCmd();
  KillMonsterNumStatCmd::default_instance_ = new KillMonsterNumStatCmd();
  DayGetZenyCountCmd::default_instance_ = new DayGetZenyCountCmd();
  StatCurLevel::default_instance_ = new StatCurLevel();
  ReqWorldLevelCmd::default_instance_ = new ReqWorldLevelCmd();
  PetWear::default_instance_ = new PetWear();
  PetWearUseCountStatCmd::default_instance_ = new PetWearUseCountStatCmd();
  TestStatCmd::default_instance_->InitAsDefaultInstance();
  StatCmd::default_instance_->InitAsDefaultInstance();
  TradeToStatLogCmd::default_instance_->InitAsDefaultInstance();
  KillMonsterNumStatCmd::default_instance_->InitAsDefaultInstance();
  DayGetZenyCountCmd::default_instance_->InitAsDefaultInstance();
  StatCurLevel::default_instance_->InitAsDefaultInstance();
  ReqWorldLevelCmd::default_instance_->InitAsDefaultInstance();
  PetWear::default_instance_->InitAsDefaultInstance();
  PetWearUseCountStatCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StatCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StatCmd_2eproto {
  StaticDescriptorInitializer_StatCmd_2eproto() {
    protobuf_AddDesc_StatCmd_2eproto();
  }
} static_descriptor_initializer_StatCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* StatParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatParam_descriptor_;
}
bool StatParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETradeListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETradeListType_descriptor_;
}
bool ETradeListType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TestStatCmd::kCmdFieldNumber;
const int TestStatCmd::kParamFieldNumber;
#endif  // !_MSC_VER

TestStatCmd::TestStatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TestStatCmd)
}

void TestStatCmd::InitAsDefaultInstance() {
}

TestStatCmd::TestStatCmd(const TestStatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TestStatCmd)
}

void TestStatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestStatCmd::~TestStatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TestStatCmd)
  SharedDtor();
}

void TestStatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestStatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestStatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestStatCmd_descriptor_;
}

const TestStatCmd& TestStatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

TestStatCmd* TestStatCmd::default_instance_ = NULL;

TestStatCmd* TestStatCmd::New() const {
  return new TestStatCmd;
}

void TestStatCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 207;
    param_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestStatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TestStatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = TEST_STAT_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TestStatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TestStatCmd)
  return false;
#undef DO_
}

void TestStatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TestStatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = TEST_STAT_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TestStatCmd)
}

::google::protobuf::uint8* TestStatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TestStatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = TEST_STAT_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TestStatCmd)
  return target;
}

int TestStatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = TEST_STAT_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestStatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestStatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestStatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestStatCmd::MergeFrom(const TestStatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestStatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestStatCmd::CopyFrom(const TestStatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestStatCmd::IsInitialized() const {

  return true;
}

void TestStatCmd::Swap(TestStatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestStatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestStatCmd_descriptor_;
  metadata.reflection = TestStatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatCmd::kCmdFieldNumber;
const int StatCmd::kParamFieldNumber;
const int StatCmd::kTypeFieldNumber;
const int StatCmd::kKeyFieldNumber;
const int StatCmd::kSubkeyFieldNumber;
const int StatCmd::kSubkey2FieldNumber;
const int StatCmd::kLevelFieldNumber;
const int StatCmd::kValue1FieldNumber;
const int StatCmd::kValue2FieldNumber;
const int StatCmd::kIsfloatFieldNumber;
#endif  // !_MSC_VER

StatCmd::StatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StatCmd)
}

void StatCmd::InitAsDefaultInstance() {
}

StatCmd::StatCmd(const StatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StatCmd)
}

void StatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 2;
  type_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  subkey_ = GOOGLE_ULONGLONG(0);
  subkey2_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  value1_ = GOOGLE_ULONGLONG(0);
  value2_ = GOOGLE_ULONGLONG(0);
  isfloat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatCmd::~StatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StatCmd)
  SharedDtor();
}

void StatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatCmd_descriptor_;
}

const StatCmd& StatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

StatCmd* StatCmd::default_instance_ = NULL;

StatCmd* StatCmd::New() const {
  return new StatCmd;
}

void StatCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(key_, value1_);
    cmd_ = 207;
    param_ = 2;
  }
  ZR_(value2_, isfloat_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = STAT_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key;
        break;
      }

      // optional uint64 key = 4;
      case 4: {
        if (tag == 32) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subkey;
        break;
      }

      // optional uint64 subkey = 5;
      case 5: {
        if (tag == 40) {
         parse_subkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subkey_)));
          set_has_subkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_subkey2;
        break;
      }

      // optional uint64 subkey2 = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_subkey2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subkey2_)));
          set_has_subkey2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_value1;
        break;
      }

      // optional uint64 value1 = 8;
      case 8: {
        if (tag == 64) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_value2;
        break;
      }

      // optional uint64 value2 = 9;
      case 9: {
        if (tag == 72) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_isfloat;
        break;
      }

      // optional bool isfloat = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_isfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfloat_)));
          set_has_isfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StatCmd)
  return false;
#undef DO_
}

void StatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint64 key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->key(), output);
  }

  // optional uint64 subkey = 5;
  if (has_subkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->subkey(), output);
  }

  // optional uint64 subkey2 = 6 [default = 0];
  if (has_subkey2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->subkey2(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint64 value1 = 8;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->value1(), output);
  }

  // optional uint64 value2 = 9;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->value2(), output);
  }

  // optional bool isfloat = 11 [default = false];
  if (has_isfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isfloat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StatCmd)
}

::google::protobuf::uint8* StatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint64 key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->key(), target);
  }

  // optional uint64 subkey = 5;
  if (has_subkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->subkey(), target);
  }

  // optional uint64 subkey2 = 6 [default = 0];
  if (has_subkey2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->subkey2(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint64 value1 = 8;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->value1(), target);
  }

  // optional uint64 value2 = 9;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->value2(), target);
  }

  // optional bool isfloat = 11 [default = false];
  if (has_isfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isfloat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StatCmd)
  return target;
}

int StatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = STAT_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional uint64 subkey = 5;
    if (has_subkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subkey());
    }

    // optional uint64 subkey2 = 6 [default = 0];
    if (has_subkey2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subkey2());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 value1 = 8;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 value2 = 9;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value2());
    }

    // optional bool isfloat = 11 [default = false];
    if (has_isfloat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatCmd::MergeFrom(const StatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_subkey()) {
      set_subkey(from.subkey());
    }
    if (from.has_subkey2()) {
      set_subkey2(from.subkey2());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_isfloat()) {
      set_isfloat(from.isfloat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatCmd::CopyFrom(const StatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatCmd::IsInitialized() const {

  return true;
}

void StatCmd::Swap(StatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(subkey_, other->subkey_);
    std::swap(subkey2_, other->subkey2_);
    std::swap(level_, other->level_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(isfloat_, other->isfloat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatCmd_descriptor_;
  metadata.reflection = StatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeToStatLogCmd::kCmdFieldNumber;
const int TradeToStatLogCmd::kParamFieldNumber;
const int TradeToStatLogCmd::kETypeFieldNumber;
const int TradeToStatLogCmd::kItemidFieldNumber;
const int TradeToStatLogCmd::kPriceFieldNumber;
const int TradeToStatLogCmd::kCountFieldNumber;
const int TradeToStatLogCmd::kSelleridFieldNumber;
const int TradeToStatLogCmd::kBuyeridFieldNumber;
const int TradeToStatLogCmd::kPendingtimeFieldNumber;
const int TradeToStatLogCmd::kTradetimeFieldNumber;
const int TradeToStatLogCmd::kRefinelvFieldNumber;
const int TradeToStatLogCmd::kItemdataFieldNumber;
const int TradeToStatLogCmd::kBuyernameFieldNumber;
const int TradeToStatLogCmd::kElisttypeFieldNumber;
#endif  // !_MSC_VER

TradeToStatLogCmd::TradeToStatLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeToStatLogCmd)
}

void TradeToStatLogCmd::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

TradeToStatLogCmd::TradeToStatLogCmd(const TradeToStatLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeToStatLogCmd)
}

void TradeToStatLogCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 3;
  etype_ = 0;
  itemid_ = 0u;
  price_ = 0u;
  count_ = 0u;
  sellerid_ = GOOGLE_ULONGLONG(0);
  buyerid_ = GOOGLE_ULONGLONG(0);
  pendingtime_ = 0u;
  tradetime_ = 0u;
  refinelv_ = 0u;
  itemdata_ = NULL;
  buyername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elisttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeToStatLogCmd::~TradeToStatLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TradeToStatLogCmd)
  SharedDtor();
}

void TradeToStatLogCmd::SharedDtor() {
  if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyername_;
  }
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void TradeToStatLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeToStatLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeToStatLogCmd_descriptor_;
}

const TradeToStatLogCmd& TradeToStatLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

TradeToStatLogCmd* TradeToStatLogCmd::default_instance_ = NULL;

TradeToStatLogCmd* TradeToStatLogCmd::New() const {
  return new TradeToStatLogCmd;
}

void TradeToStatLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeToStatLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(etype_, buyerid_);
    cmd_ = 207;
    param_ = 3;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(pendingtime_, tradetime_);
    refinelv_ = 0u;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
    if (has_buyername()) {
      if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyername_->clear();
      }
    }
    elisttype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeToStatLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeToStatLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = LOG_TRADE_TO_STAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eType;
        break;
      }

      // required .Cmd.EOperType eType = 3;
      case 3: {
        if (tag == 24) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EOperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional uint32 price = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sellerid;
        break;
      }

      // optional uint64 sellerid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_sellerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sellerid_)));
          set_has_sellerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_buyerid;
        break;
      }

      // optional uint64 buyerid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_buyerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buyerid_)));
          set_has_buyerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pendingtime;
        break;
      }

      // optional uint32 pendingtime = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_pendingtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pendingtime_)));
          set_has_pendingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_tradetime;
        break;
      }

      // optional uint32 tradetime = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_tradetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradetime_)));
          set_has_tradetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_refinelv;
        break;
      }

      // optional uint32 refinelv = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 12;
      case 12: {
        if (tag == 98) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_buyername;
        break;
      }

      // optional string buyername = 13;
      case 13: {
        if (tag == 106) {
         parse_buyername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyername().data(), this->buyername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_elisttype;
        break;
      }

      // required .Cmd.ETradeListType elisttype = 14;
      case 14: {
        if (tag == 112) {
         parse_elisttype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETradeListType_IsValid(value)) {
            set_elisttype(static_cast< ::Cmd::ETradeListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeToStatLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeToStatLogCmd)
  return false;
#undef DO_
}

void TradeToStatLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeToStatLogCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = LOG_TRADE_TO_STAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.EOperType eType = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint32 price = 5 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->price(), output);
  }

  // optional uint32 count = 6 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional uint64 sellerid = 7 [default = 0];
  if (has_sellerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sellerid(), output);
  }

  // optional uint64 buyerid = 8 [default = 0];
  if (has_buyerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->buyerid(), output);
  }

  // optional uint32 pendingtime = 9 [default = 0];
  if (has_pendingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pendingtime(), output);
  }

  // optional uint32 tradetime = 10 [default = 0];
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tradetime(), output);
  }

  // optional uint32 refinelv = 11 [default = 0];
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->refinelv(), output);
  }

  // optional .Cmd.ItemData itemdata = 12;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->itemdata(), output);
  }

  // optional string buyername = 13;
  if (has_buyername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyername().data(), this->buyername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->buyername(), output);
  }

  // required .Cmd.ETradeListType elisttype = 14;
  if (has_elisttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->elisttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeToStatLogCmd)
}

::google::protobuf::uint8* TradeToStatLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeToStatLogCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = LOG_TRADE_TO_STAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.EOperType eType = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint32 price = 5 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->price(), target);
  }

  // optional uint32 count = 6 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional uint64 sellerid = 7 [default = 0];
  if (has_sellerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sellerid(), target);
  }

  // optional uint64 buyerid = 8 [default = 0];
  if (has_buyerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->buyerid(), target);
  }

  // optional uint32 pendingtime = 9 [default = 0];
  if (has_pendingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pendingtime(), target);
  }

  // optional uint32 tradetime = 10 [default = 0];
  if (has_tradetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tradetime(), target);
  }

  // optional uint32 refinelv = 11 [default = 0];
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->refinelv(), target);
  }

  // optional .Cmd.ItemData itemdata = 12;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->itemdata(), target);
  }

  // optional string buyername = 13;
  if (has_buyername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyername().data(), this->buyername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->buyername(), target);
  }

  // required .Cmd.ETradeListType elisttype = 14;
  if (has_elisttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->elisttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeToStatLogCmd)
  return target;
}

int TradeToStatLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = LOG_TRADE_TO_STAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.EOperType eType = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 itemid = 4 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 price = 5 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 count = 6 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 sellerid = 7 [default = 0];
    if (has_sellerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sellerid());
    }

    // optional uint64 buyerid = 8 [default = 0];
    if (has_buyerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buyerid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pendingtime = 9 [default = 0];
    if (has_pendingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pendingtime());
    }

    // optional uint32 tradetime = 10 [default = 0];
    if (has_tradetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradetime());
    }

    // optional uint32 refinelv = 11 [default = 0];
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

    // optional .Cmd.ItemData itemdata = 12;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional string buyername = 13;
    if (has_buyername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyername());
    }

    // required .Cmd.ETradeListType elisttype = 14;
    if (has_elisttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elisttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeToStatLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeToStatLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeToStatLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeToStatLogCmd::MergeFrom(const TradeToStatLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_sellerid()) {
      set_sellerid(from.sellerid());
    }
    if (from.has_buyerid()) {
      set_buyerid(from.buyerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pendingtime()) {
      set_pendingtime(from.pendingtime());
    }
    if (from.has_tradetime()) {
      set_tradetime(from.tradetime());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
    if (from.has_buyername()) {
      set_buyername(from.buyername());
    }
    if (from.has_elisttype()) {
      set_elisttype(from.elisttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeToStatLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeToStatLogCmd::CopyFrom(const TradeToStatLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeToStatLogCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002004) != 0x00002004) return false;

  return true;
}

void TradeToStatLogCmd::Swap(TradeToStatLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(count_, other->count_);
    std::swap(sellerid_, other->sellerid_);
    std::swap(buyerid_, other->buyerid_);
    std::swap(pendingtime_, other->pendingtime_);
    std::swap(tradetime_, other->tradetime_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(buyername_, other->buyername_);
    std::swap(elisttype_, other->elisttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeToStatLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeToStatLogCmd_descriptor_;
  metadata.reflection = TradeToStatLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillMonsterNumStatCmd::kCmdFieldNumber;
const int KillMonsterNumStatCmd::kParamFieldNumber;
const int KillMonsterNumStatCmd::kUseridFieldNumber;
const int KillMonsterNumStatCmd::kKillmonsterFieldNumber;
const int KillMonsterNumStatCmd::kZoneidFieldNumber;
const int KillMonsterNumStatCmd::kProfessionidFieldNumber;
#endif  // !_MSC_VER

KillMonsterNumStatCmd::KillMonsterNumStatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KillMonsterNumStatCmd)
}

void KillMonsterNumStatCmd::InitAsDefaultInstance() {
}

KillMonsterNumStatCmd::KillMonsterNumStatCmd(const KillMonsterNumStatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KillMonsterNumStatCmd)
}

void KillMonsterNumStatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 4;
  userid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  professionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillMonsterNumStatCmd::~KillMonsterNumStatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KillMonsterNumStatCmd)
  SharedDtor();
}

void KillMonsterNumStatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillMonsterNumStatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillMonsterNumStatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillMonsterNumStatCmd_descriptor_;
}

const KillMonsterNumStatCmd& KillMonsterNumStatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

KillMonsterNumStatCmd* KillMonsterNumStatCmd::default_instance_ = NULL;

KillMonsterNumStatCmd* KillMonsterNumStatCmd::New() const {
  return new KillMonsterNumStatCmd;
}

void KillMonsterNumStatCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KillMonsterNumStatCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(zoneid_, professionid_);
    cmd_ = 207;
    param_ = 4;
    userid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  killmonster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillMonsterNumStatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KillMonsterNumStatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = STAT_KILL_MONSTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required uint64 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_killmonster;
        break;
      }

      // repeated .Cmd.StatKillMonster killmonster = 4;
      case 4: {
        if (tag == 34) {
         parse_killmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killmonster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_killmonster;
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_professionid;
        break;
      }

      // optional uint32 professionid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_professionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KillMonsterNumStatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KillMonsterNumStatCmd)
  return false;
#undef DO_
}

void KillMonsterNumStatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KillMonsterNumStatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_KILL_MONSTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // repeated .Cmd.StatKillMonster killmonster = 4;
  for (int i = 0; i < this->killmonster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->killmonster(i), output);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 professionid = 6 [default = 0];
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->professionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KillMonsterNumStatCmd)
}

::google::protobuf::uint8* KillMonsterNumStatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KillMonsterNumStatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_KILL_MONSTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // repeated .Cmd.StatKillMonster killmonster = 4;
  for (int i = 0; i < this->killmonster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->killmonster(i), target);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 professionid = 6 [default = 0];
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->professionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KillMonsterNumStatCmd)
  return target;
}

int KillMonsterNumStatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = STAT_KILL_MONSTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 zoneid = 5 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 professionid = 6 [default = 0];
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->professionid());
    }

  }
  // repeated .Cmd.StatKillMonster killmonster = 4;
  total_size += 1 * this->killmonster_size();
  for (int i = 0; i < this->killmonster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killmonster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillMonsterNumStatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillMonsterNumStatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillMonsterNumStatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillMonsterNumStatCmd::MergeFrom(const KillMonsterNumStatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  killmonster_.MergeFrom(from.killmonster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillMonsterNumStatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillMonsterNumStatCmd::CopyFrom(const KillMonsterNumStatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillMonsterNumStatCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->killmonster())) return false;
  return true;
}

void KillMonsterNumStatCmd::Swap(KillMonsterNumStatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    killmonster_.Swap(&other->killmonster_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(professionid_, other->professionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillMonsterNumStatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillMonsterNumStatCmd_descriptor_;
  metadata.reflection = KillMonsterNumStatCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayGetZenyCountCmd::kCmdFieldNumber;
const int DayGetZenyCountCmd::kParamFieldNumber;
const int DayGetZenyCountCmd::kUseridFieldNumber;
const int DayGetZenyCountCmd::kUsernameFieldNumber;
const int DayGetZenyCountCmd::kBaselvFieldNumber;
const int DayGetZenyCountCmd::kJoblvFieldNumber;
const int DayGetZenyCountCmd::kProfessionFieldNumber;
const int DayGetZenyCountCmd::kNormalZenyFieldNumber;
const int DayGetZenyCountCmd::kChargeZenyFieldNumber;
#endif  // !_MSC_VER

DayGetZenyCountCmd::DayGetZenyCountCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DayGetZenyCountCmd)
}

void DayGetZenyCountCmd::InitAsDefaultInstance() {
}

DayGetZenyCountCmd::DayGetZenyCountCmd(const DayGetZenyCountCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DayGetZenyCountCmd)
}

void DayGetZenyCountCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 5;
  userid_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baselv_ = 0u;
  joblv_ = 0u;
  profession_ = 0u;
  normal_zeny_ = GOOGLE_ULONGLONG(0);
  charge_zeny_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayGetZenyCountCmd::~DayGetZenyCountCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DayGetZenyCountCmd)
  SharedDtor();
}

void DayGetZenyCountCmd::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void DayGetZenyCountCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayGetZenyCountCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayGetZenyCountCmd_descriptor_;
}

const DayGetZenyCountCmd& DayGetZenyCountCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

DayGetZenyCountCmd* DayGetZenyCountCmd::default_instance_ = NULL;

DayGetZenyCountCmd* DayGetZenyCountCmd::New() const {
  return new DayGetZenyCountCmd;
}

void DayGetZenyCountCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DayGetZenyCountCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(baselv_, normal_zeny_);
    cmd_ = 207;
    param_ = 5;
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    profession_ = 0u;
  }
  charge_zeny_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayGetZenyCountCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DayGetZenyCountCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = STAT_DAY_GET_ZENY_COUNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required uint64 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // optional string username = 4;
      case 4: {
        if (tag == 34) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_baselv;
        break;
      }

      // optional uint32 baselv = 5;
      case 5: {
        if (tag == 40) {
         parse_baselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselv_)));
          set_has_baselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_joblv;
        break;
      }

      // optional uint32 joblv = 6;
      case 6: {
        if (tag == 48) {
         parse_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblv_)));
          set_has_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 7;
      case 7: {
        if (tag == 56) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_normal_zeny;
        break;
      }

      // optional uint64 normal_zeny = 8;
      case 8: {
        if (tag == 64) {
         parse_normal_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &normal_zeny_)));
          set_has_normal_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_charge_zeny;
        break;
      }

      // optional uint64 charge_zeny = 9;
      case 9: {
        if (tag == 72) {
         parse_charge_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charge_zeny_)));
          set_has_charge_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DayGetZenyCountCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DayGetZenyCountCmd)
  return false;
#undef DO_
}

void DayGetZenyCountCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DayGetZenyCountCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_DAY_GET_ZENY_COUNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // optional uint32 baselv = 5;
  if (has_baselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->baselv(), output);
  }

  // optional uint32 joblv = 6;
  if (has_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->joblv(), output);
  }

  // optional uint32 profession = 7;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->profession(), output);
  }

  // optional uint64 normal_zeny = 8;
  if (has_normal_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->normal_zeny(), output);
  }

  // optional uint64 charge_zeny = 9;
  if (has_charge_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->charge_zeny(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DayGetZenyCountCmd)
}

::google::protobuf::uint8* DayGetZenyCountCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DayGetZenyCountCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_DAY_GET_ZENY_COUNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // optional uint32 baselv = 5;
  if (has_baselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->baselv(), target);
  }

  // optional uint32 joblv = 6;
  if (has_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->joblv(), target);
  }

  // optional uint32 profession = 7;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->profession(), target);
  }

  // optional uint64 normal_zeny = 8;
  if (has_normal_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->normal_zeny(), target);
  }

  // optional uint64 charge_zeny = 9;
  if (has_charge_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->charge_zeny(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DayGetZenyCountCmd)
  return target;
}

int DayGetZenyCountCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = STAT_DAY_GET_ZENY_COUNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 baselv = 5;
    if (has_baselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baselv());
    }

    // optional uint32 joblv = 6;
    if (has_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblv());
    }

    // optional uint32 profession = 7;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint64 normal_zeny = 8;
    if (has_normal_zeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->normal_zeny());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 charge_zeny = 9;
    if (has_charge_zeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charge_zeny());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayGetZenyCountCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayGetZenyCountCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayGetZenyCountCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayGetZenyCountCmd::MergeFrom(const DayGetZenyCountCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_baselv()) {
      set_baselv(from.baselv());
    }
    if (from.has_joblv()) {
      set_joblv(from.joblv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_normal_zeny()) {
      set_normal_zeny(from.normal_zeny());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charge_zeny()) {
      set_charge_zeny(from.charge_zeny());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayGetZenyCountCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayGetZenyCountCmd::CopyFrom(const DayGetZenyCountCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayGetZenyCountCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void DayGetZenyCountCmd::Swap(DayGetZenyCountCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(baselv_, other->baselv_);
    std::swap(joblv_, other->joblv_);
    std::swap(profession_, other->profession_);
    std::swap(normal_zeny_, other->normal_zeny_);
    std::swap(charge_zeny_, other->charge_zeny_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayGetZenyCountCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayGetZenyCountCmd_descriptor_;
  metadata.reflection = DayGetZenyCountCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatCurLevel::kCmdFieldNumber;
const int StatCurLevel::kParamFieldNumber;
const int StatCurLevel::kUseridFieldNumber;
const int StatCurLevel::kLastOfflinetimeFieldNumber;
const int StatCurLevel::kLastBaselvFieldNumber;
const int StatCurLevel::kLastJoblvFieldNumber;
const int StatCurLevel::kCurTimeFieldNumber;
const int StatCurLevel::kCurBaselvFieldNumber;
const int StatCurLevel::kCurJoblvFieldNumber;
#endif  // !_MSC_VER

StatCurLevel::StatCurLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StatCurLevel)
}

void StatCurLevel::InitAsDefaultInstance() {
}

StatCurLevel::StatCurLevel(const StatCurLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StatCurLevel)
}

void StatCurLevel::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 6;
  userid_ = GOOGLE_ULONGLONG(0);
  last_offlinetime_ = 0u;
  last_baselv_ = 0u;
  last_joblv_ = 0u;
  cur_time_ = 0u;
  cur_baselv_ = 0u;
  cur_joblv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatCurLevel::~StatCurLevel() {
  // @@protoc_insertion_point(destructor:Cmd.StatCurLevel)
  SharedDtor();
}

void StatCurLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatCurLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatCurLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatCurLevel_descriptor_;
}

const StatCurLevel& StatCurLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

StatCurLevel* StatCurLevel::default_instance_ = NULL;

StatCurLevel* StatCurLevel::New() const {
  return new StatCurLevel;
}

void StatCurLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatCurLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(userid_, cur_baselv_);
    cmd_ = 207;
    param_ = 6;
  }
  cur_joblv_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatCurLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StatCurLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = STAT_CUR_LEVEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required uint64 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_offlinetime;
        break;
      }

      // optional uint32 last_offlinetime = 4;
      case 4: {
        if (tag == 32) {
         parse_last_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_offlinetime_)));
          set_has_last_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_baselv;
        break;
      }

      // optional uint32 last_baselv = 5;
      case 5: {
        if (tag == 40) {
         parse_last_baselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_baselv_)));
          set_has_last_baselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last_joblv;
        break;
      }

      // optional uint32 last_joblv = 6;
      case 6: {
        if (tag == 48) {
         parse_last_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_joblv_)));
          set_has_last_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_time;
        break;
      }

      // optional uint32 cur_time = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_time_)));
          set_has_cur_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cur_baselv;
        break;
      }

      // optional uint32 cur_baselv = 8;
      case 8: {
        if (tag == 64) {
         parse_cur_baselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_baselv_)));
          set_has_cur_baselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cur_joblv;
        break;
      }

      // optional uint32 cur_joblv = 9;
      case 9: {
        if (tag == 72) {
         parse_cur_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_joblv_)));
          set_has_cur_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StatCurLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StatCurLevel)
  return false;
#undef DO_
}

void StatCurLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StatCurLevel)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_CUR_LEVEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional uint32 last_offlinetime = 4;
  if (has_last_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_offlinetime(), output);
  }

  // optional uint32 last_baselv = 5;
  if (has_last_baselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_baselv(), output);
  }

  // optional uint32 last_joblv = 6;
  if (has_last_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_joblv(), output);
  }

  // optional uint32 cur_time = 7;
  if (has_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_time(), output);
  }

  // optional uint32 cur_baselv = 8;
  if (has_cur_baselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cur_baselv(), output);
  }

  // optional uint32 cur_joblv = 9;
  if (has_cur_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cur_joblv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StatCurLevel)
}

::google::protobuf::uint8* StatCurLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StatCurLevel)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_CUR_LEVEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional uint32 last_offlinetime = 4;
  if (has_last_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_offlinetime(), target);
  }

  // optional uint32 last_baselv = 5;
  if (has_last_baselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_baselv(), target);
  }

  // optional uint32 last_joblv = 6;
  if (has_last_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_joblv(), target);
  }

  // optional uint32 cur_time = 7;
  if (has_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_time(), target);
  }

  // optional uint32 cur_baselv = 8;
  if (has_cur_baselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cur_baselv(), target);
  }

  // optional uint32 cur_joblv = 9;
  if (has_cur_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cur_joblv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StatCurLevel)
  return target;
}

int StatCurLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = STAT_CUR_LEVEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 last_offlinetime = 4;
    if (has_last_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_offlinetime());
    }

    // optional uint32 last_baselv = 5;
    if (has_last_baselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_baselv());
    }

    // optional uint32 last_joblv = 6;
    if (has_last_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_joblv());
    }

    // optional uint32 cur_time = 7;
    if (has_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_time());
    }

    // optional uint32 cur_baselv = 8;
    if (has_cur_baselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_baselv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 cur_joblv = 9;
    if (has_cur_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_joblv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatCurLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatCurLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatCurLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatCurLevel::MergeFrom(const StatCurLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_last_offlinetime()) {
      set_last_offlinetime(from.last_offlinetime());
    }
    if (from.has_last_baselv()) {
      set_last_baselv(from.last_baselv());
    }
    if (from.has_last_joblv()) {
      set_last_joblv(from.last_joblv());
    }
    if (from.has_cur_time()) {
      set_cur_time(from.cur_time());
    }
    if (from.has_cur_baselv()) {
      set_cur_baselv(from.cur_baselv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_joblv()) {
      set_cur_joblv(from.cur_joblv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatCurLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatCurLevel::CopyFrom(const StatCurLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatCurLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void StatCurLevel::Swap(StatCurLevel* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(last_offlinetime_, other->last_offlinetime_);
    std::swap(last_baselv_, other->last_baselv_);
    std::swap(last_joblv_, other->last_joblv_);
    std::swap(cur_time_, other->cur_time_);
    std::swap(cur_baselv_, other->cur_baselv_);
    std::swap(cur_joblv_, other->cur_joblv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatCurLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatCurLevel_descriptor_;
  metadata.reflection = StatCurLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWorldLevelCmd::kCmdFieldNumber;
const int ReqWorldLevelCmd::kParamFieldNumber;
const int ReqWorldLevelCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

ReqWorldLevelCmd::ReqWorldLevelCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqWorldLevelCmd)
}

void ReqWorldLevelCmd::InitAsDefaultInstance() {
}

ReqWorldLevelCmd::ReqWorldLevelCmd(const ReqWorldLevelCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqWorldLevelCmd)
}

void ReqWorldLevelCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 7;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWorldLevelCmd::~ReqWorldLevelCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqWorldLevelCmd)
  SharedDtor();
}

void ReqWorldLevelCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWorldLevelCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldLevelCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldLevelCmd_descriptor_;
}

const ReqWorldLevelCmd& ReqWorldLevelCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

ReqWorldLevelCmd* ReqWorldLevelCmd::default_instance_ = NULL;

ReqWorldLevelCmd* ReqWorldLevelCmd::New() const {
  return new ReqWorldLevelCmd;
}

void ReqWorldLevelCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 207;
    param_ = 7;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWorldLevelCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqWorldLevelCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = REQ_WORLD_LEVEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqWorldLevelCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqWorldLevelCmd)
  return false;
#undef DO_
}

void ReqWorldLevelCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqWorldLevelCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = REQ_WORLD_LEVEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqWorldLevelCmd)
}

::google::protobuf::uint8* ReqWorldLevelCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqWorldLevelCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = REQ_WORLD_LEVEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqWorldLevelCmd)
  return target;
}

int ReqWorldLevelCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = REQ_WORLD_LEVEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldLevelCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWorldLevelCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWorldLevelCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWorldLevelCmd::MergeFrom(const ReqWorldLevelCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWorldLevelCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldLevelCmd::CopyFrom(const ReqWorldLevelCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWorldLevelCmd::IsInitialized() const {

  return true;
}

void ReqWorldLevelCmd::Swap(ReqWorldLevelCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWorldLevelCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldLevelCmd_descriptor_;
  metadata.reflection = ReqWorldLevelCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetWear::kCharidFieldNumber;
const int PetWear::kTypesFieldNumber;
const int PetWear::kCountsFieldNumber;
#endif  // !_MSC_VER

PetWear::PetWear()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetWear)
}

void PetWear::InitAsDefaultInstance() {
}

PetWear::PetWear(const PetWear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetWear)
}

void PetWear::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetWear::~PetWear() {
  // @@protoc_insertion_point(destructor:Cmd.PetWear)
  SharedDtor();
}

void PetWear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetWear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetWear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetWear_descriptor_;
}

const PetWear& PetWear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

PetWear* PetWear::default_instance_ = NULL;

PetWear* PetWear::New() const {
  return new PetWear;
}

void PetWear::Clear() {
  charid_ = GOOGLE_ULONGLONG(0);
  types_.Clear();
  counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetWear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetWear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_types;
        break;
      }

      // repeated .Cmd.EQualityType types = 2;
      case 2: {
        if (tag == 16) {
         parse_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQualityType_IsValid(value)) {
            add_types(static_cast< ::Cmd::EQualityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Cmd::EQualityType_IsValid,
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_types;
        if (input->ExpectTag(24)) goto parse_counts;
        break;
      }

      // repeated uint32 counts = 3;
      case 3: {
        if (tag == 24) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_counts())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_counts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetWear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetWear)
  return false;
#undef DO_
}

void PetWear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetWear)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated .Cmd.EQualityType types = 2;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->types(i), output);
  }

  // repeated uint32 counts = 3;
  for (int i = 0; i < this->counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->counts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetWear)
}

::google::protobuf::uint8* PetWear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetWear)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated .Cmd.EQualityType types = 2;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->types(i), target);
  }

  // repeated uint32 counts = 3;
  for (int i = 0; i < this->counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->counts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetWear)
  return target;
}

int PetWear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.EQualityType types = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += 1 * this->types_size() + data_size;
  }

  // repeated uint32 counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->counts(i));
    }
    total_size += 1 * this->counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetWear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetWear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetWear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetWear::MergeFrom(const PetWear& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  counts_.MergeFrom(from.counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetWear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetWear::CopyFrom(const PetWear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetWear::IsInitialized() const {

  return true;
}

void PetWear::Swap(PetWear* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    types_.Swap(&other->types_);
    counts_.Swap(&other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetWear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetWear_descriptor_;
  metadata.reflection = PetWear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetWearUseCountStatCmd::kCmdFieldNumber;
const int PetWearUseCountStatCmd::kParamFieldNumber;
const int PetWearUseCountStatCmd::kWearsFieldNumber;
#endif  // !_MSC_VER

PetWearUseCountStatCmd::PetWearUseCountStatCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetWearUseCountStatCmd)
}

void PetWearUseCountStatCmd::InitAsDefaultInstance() {
}

PetWearUseCountStatCmd::PetWearUseCountStatCmd(const PetWearUseCountStatCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetWearUseCountStatCmd)
}

void PetWearUseCountStatCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 207;
  param_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetWearUseCountStatCmd::~PetWearUseCountStatCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetWearUseCountStatCmd)
  SharedDtor();
}

void PetWearUseCountStatCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetWearUseCountStatCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetWearUseCountStatCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetWearUseCountStatCmd_descriptor_;
}

const PetWearUseCountStatCmd& PetWearUseCountStatCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatCmd_2eproto();
  return *default_instance_;
}

PetWearUseCountStatCmd* PetWearUseCountStatCmd::default_instance_ = NULL;

PetWearUseCountStatCmd* PetWearUseCountStatCmd::New() const {
  return new PetWearUseCountStatCmd;
}

void PetWearUseCountStatCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 207;
    param_ = 8;
  }
  wears_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetWearUseCountStatCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetWearUseCountStatCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.StatParam param = 2 [default = STAT_PET_WEAR_USECOUNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::StatParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::StatParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wears;
        break;
      }

      // repeated .Cmd.PetWear wears = 3;
      case 3: {
        if (tag == 26) {
         parse_wears:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wears()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wears;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetWearUseCountStatCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetWearUseCountStatCmd)
  return false;
#undef DO_
}

void PetWearUseCountStatCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetWearUseCountStatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_PET_WEAR_USECOUNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.PetWear wears = 3;
  for (int i = 0; i < this->wears_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wears(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetWearUseCountStatCmd)
}

::google::protobuf::uint8* PetWearUseCountStatCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetWearUseCountStatCmd)
  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.StatParam param = 2 [default = STAT_PET_WEAR_USECOUNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.PetWear wears = 3;
  for (int i = 0; i < this->wears_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wears(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetWearUseCountStatCmd)
  return target;
}

int PetWearUseCountStatCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.StatParam param = 2 [default = STAT_PET_WEAR_USECOUNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.PetWear wears = 3;
  total_size += 1 * this->wears_size();
  for (int i = 0; i < this->wears_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wears(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetWearUseCountStatCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetWearUseCountStatCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetWearUseCountStatCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetWearUseCountStatCmd::MergeFrom(const PetWearUseCountStatCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  wears_.MergeFrom(from.wears_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetWearUseCountStatCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetWearUseCountStatCmd::CopyFrom(const PetWearUseCountStatCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetWearUseCountStatCmd::IsInitialized() const {

  return true;
}

void PetWearUseCountStatCmd::Swap(PetWearUseCountStatCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    wears_.Swap(&other->wears_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetWearUseCountStatCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetWearUseCountStatCmd_descriptor_;
  metadata.reflection = PetWearUseCountStatCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
