// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* MapItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMapItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMapItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PickupItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PickupItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarrierInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarrierInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandNpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GingerBreadNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GingerBreadNpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMapUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMapUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMapNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMapNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapTrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapTrap_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMapTrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMapTrap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapAct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapAct_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMapAct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMapAct_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitPointState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitPointState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapCmdEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapCmdEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcSearchRangeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcSearchRangeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserHandsCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserHandsCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpEffectCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpEffectCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserHandNpcCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserHandNpcCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GingerBreadNpcCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GingerBreadNpcCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoCityGateMapCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoCityGateMapCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGiveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EActType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneMap_2eproto() {
  protobuf_AddDesc_SceneMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneMap.proto");
  GOOGLE_CHECK(file != NULL);
  MapItem_descriptor_ = file->message_type(0);
  static const int MapItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, owners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, refinelv_),
  };
  MapItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapItem_descriptor_,
      MapItem::default_instance_,
      MapItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapItem));
  AddMapItem_descriptor_ = file->message_type(1);
  static const int AddMapItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapItem, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapItem, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapItem, items_),
  };
  AddMapItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMapItem_descriptor_,
      AddMapItem::default_instance_,
      AddMapItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMapItem));
  PickupItem_descriptor_ = file->message_type(2);
  static const int PickupItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickupItem, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickupItem, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickupItem, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickupItem, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickupItem, success_),
  };
  PickupItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PickupItem_descriptor_,
      PickupItem::default_instance_,
      PickupItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickupItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickupItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PickupItem));
  CarrierInfo_descriptor_ = file->message_type(3);
  static const int CarrierInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, assemble_),
  };
  CarrierInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarrierInfo_descriptor_,
      CarrierInfo::default_instance_,
      CarrierInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarrierInfo));
  LineData_descriptor_ = file->message_type(4);
  static const int LineData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineData, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineData, slaveid_),
  };
  LineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineData_descriptor_,
      LineData::default_instance_,
      LineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineData));
  HandNpcData_descriptor_ = file->message_type(5);
  static const int HandNpcData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, speffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, eye_),
  };
  HandNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandNpcData_descriptor_,
      HandNpcData::default_instance_,
      HandNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandNpcData));
  GingerBreadNpcData_descriptor_ = file->message_type(6);
  static const int GingerBreadNpcData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcData, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcData, giveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcData, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcData, type_),
  };
  GingerBreadNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GingerBreadNpcData_descriptor_,
      GingerBreadNpcData::default_instance_,
      GingerBreadNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GingerBreadNpcData));
  MapUser_descriptor_ = file->message_type(7);
  static const int MapUser_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, buffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, chatroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, handsmaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, speffectdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, guildicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, guildjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, handnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, motionactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, givenpcdatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, achievetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, cookstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, info_),
  };
  MapUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapUser_descriptor_,
      MapUser::default_instance_,
      MapUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapUser));
  AddMapUser_descriptor_ = file->message_type(8);
  static const int AddMapUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapUser, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapUser, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapUser, users_),
  };
  AddMapUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMapUser_descriptor_,
      AddMapUser::default_instance_,
      AddMapUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMapUser));
  MapNpc_descriptor_ = file->message_type(9);
  static const int MapNpc_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, behaviour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, waitaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, searchrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, buffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, motionactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, effectpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, effectindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, speffectdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, isbirth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, eat_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, fadein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, bosstype_),
  };
  MapNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapNpc_descriptor_,
      MapNpc::default_instance_,
      MapNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapNpc));
  AddMapNpc_descriptor_ = file->message_type(10);
  static const int AddMapNpc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapNpc, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapNpc, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapNpc, npcs_),
  };
  AddMapNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMapNpc_descriptor_,
      AddMapNpc::default_instance_,
      AddMapNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMapNpc));
  MapTrap_descriptor_ = file->message_type(11);
  static const int MapTrap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrap, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrap, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrap, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrap, masterid_),
  };
  MapTrap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapTrap_descriptor_,
      MapTrap::default_instance_,
      MapTrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTrap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapTrap));
  AddMapTrap_descriptor_ = file->message_type(12);
  static const int AddMapTrap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapTrap, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapTrap, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapTrap, traps_),
  };
  AddMapTrap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMapTrap_descriptor_,
      AddMapTrap::default_instance_,
      AddMapTrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapTrap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapTrap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMapTrap));
  MapAct_descriptor_ = file->message_type(13);
  static const int MapAct_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, actvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, pos_),
  };
  MapAct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapAct_descriptor_,
      MapAct::default_instance_,
      MapAct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapAct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapAct));
  AddMapAct_descriptor_ = file->message_type(14);
  static const int AddMapAct_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapAct, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapAct, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapAct, acts_),
  };
  AddMapAct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMapAct_descriptor_,
      AddMapAct::default_instance_,
      AddMapAct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapAct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMapAct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMapAct));
  ExitPointState_descriptor_ = file->message_type(15);
  static const int ExitPointState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPointState, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPointState, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPointState, exitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPointState, visible_),
  };
  ExitPointState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitPointState_descriptor_,
      ExitPointState::default_instance_,
      ExitPointState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPointState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPointState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitPointState));
  MapCmdEnd_descriptor_ = file->message_type(16);
  static const int MapCmdEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCmdEnd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCmdEnd, param_),
  };
  MapCmdEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapCmdEnd_descriptor_,
      MapCmdEnd::default_instance_,
      MapCmdEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCmdEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCmdEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapCmdEnd));
  NpcSearchRangeCmd_descriptor_ = file->message_type(17);
  static const int NpcSearchRangeCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSearchRangeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSearchRangeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSearchRangeCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSearchRangeCmd, range_),
  };
  NpcSearchRangeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcSearchRangeCmd_descriptor_,
      NpcSearchRangeCmd::default_instance_,
      NpcSearchRangeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSearchRangeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSearchRangeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcSearchRangeCmd));
  UserHandsCmd_descriptor_ = file->message_type(18);
  static const int UserHandsCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandsCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandsCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandsCmd, player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandsCmd, player2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandsCmd, isadd_),
  };
  UserHandsCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserHandsCmd_descriptor_,
      UserHandsCmd::default_instance_,
      UserHandsCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandsCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandsCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserHandsCmd));
  SpEffectCmd_descriptor_ = file->message_type(19);
  static const int SpEffectCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectCmd, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectCmd, isadd_),
  };
  SpEffectCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpEffectCmd_descriptor_,
      SpEffectCmd::default_instance_,
      SpEffectCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpEffectCmd));
  UserHandNpcCmd_descriptor_ = file->message_type(20);
  static const int UserHandNpcCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandNpcCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandNpcCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandNpcCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandNpcCmd, ishand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandNpcCmd, userid_),
  };
  UserHandNpcCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserHandNpcCmd_descriptor_,
      UserHandNpcCmd::default_instance_,
      UserHandNpcCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandNpcCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHandNpcCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserHandNpcCmd));
  GingerBreadNpcCmd_descriptor_ = file->message_type(21);
  static const int GingerBreadNpcCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, bornpos_),
  };
  GingerBreadNpcCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GingerBreadNpcCmd_descriptor_,
      GingerBreadNpcCmd::default_instance_,
      GingerBreadNpcCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GingerBreadNpcCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GingerBreadNpcCmd));
  GoCityGateMapCmd_descriptor_ = file->message_type(22);
  static const int GoCityGateMapCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCityGateMapCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCityGateMapCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCityGateMapCmd, flag_),
  };
  GoCityGateMapCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoCityGateMapCmd_descriptor_,
      GoCityGateMapCmd::default_instance_,
      GoCityGateMapCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCityGateMapCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCityGateMapCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoCityGateMapCmd));
  MapParam_descriptor_ = file->enum_type(0);
  EGiveType_descriptor_ = file->enum_type(1);
  EActType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapItem_descriptor_, &MapItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMapItem_descriptor_, &AddMapItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PickupItem_descriptor_, &PickupItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarrierInfo_descriptor_, &CarrierInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineData_descriptor_, &LineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandNpcData_descriptor_, &HandNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GingerBreadNpcData_descriptor_, &GingerBreadNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapUser_descriptor_, &MapUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMapUser_descriptor_, &AddMapUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapNpc_descriptor_, &MapNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMapNpc_descriptor_, &AddMapNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapTrap_descriptor_, &MapTrap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMapTrap_descriptor_, &AddMapTrap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapAct_descriptor_, &MapAct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMapAct_descriptor_, &AddMapAct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitPointState_descriptor_, &ExitPointState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapCmdEnd_descriptor_, &MapCmdEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcSearchRangeCmd_descriptor_, &NpcSearchRangeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserHandsCmd_descriptor_, &UserHandsCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpEffectCmd_descriptor_, &SpEffectCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserHandNpcCmd_descriptor_, &UserHandNpcCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GingerBreadNpcCmd_descriptor_, &GingerBreadNpcCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoCityGateMapCmd_descriptor_, &GoCityGateMapCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneMap_2eproto() {
  delete MapItem::default_instance_;
  delete MapItem_reflection_;
  delete AddMapItem::default_instance_;
  delete AddMapItem_reflection_;
  delete PickupItem::default_instance_;
  delete PickupItem_reflection_;
  delete CarrierInfo::default_instance_;
  delete CarrierInfo_reflection_;
  delete LineData::default_instance_;
  delete LineData_reflection_;
  delete HandNpcData::default_instance_;
  delete HandNpcData_reflection_;
  delete GingerBreadNpcData::default_instance_;
  delete GingerBreadNpcData_reflection_;
  delete MapUser::default_instance_;
  delete MapUser_reflection_;
  delete AddMapUser::default_instance_;
  delete AddMapUser_reflection_;
  delete MapNpc::default_instance_;
  delete MapNpc_reflection_;
  delete AddMapNpc::default_instance_;
  delete AddMapNpc_reflection_;
  delete MapTrap::default_instance_;
  delete MapTrap_reflection_;
  delete AddMapTrap::default_instance_;
  delete AddMapTrap_reflection_;
  delete MapAct::default_instance_;
  delete MapAct_reflection_;
  delete AddMapAct::default_instance_;
  delete AddMapAct_reflection_;
  delete ExitPointState::default_instance_;
  delete ExitPointState_reflection_;
  delete MapCmdEnd::default_instance_;
  delete MapCmdEnd_reflection_;
  delete NpcSearchRangeCmd::default_instance_;
  delete NpcSearchRangeCmd_reflection_;
  delete UserHandsCmd::default_instance_;
  delete UserHandsCmd_reflection_;
  delete SpEffectCmd::default_instance_;
  delete SpEffectCmd_reflection_;
  delete UserHandNpcCmd::default_instance_;
  delete UserHandNpcCmd_reflection_;
  delete GingerBreadNpcCmd::default_instance_;
  delete GingerBreadNpcCmd_reflection_;
  delete GoCityGateMapCmd::default_instance_;
  delete GoCityGateMapCmd_reflection_;
}

void protobuf_AddDesc_SceneMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::Cmd::protobuf_AddDesc_SceneChatRoom_2eproto();
  ::Cmd::protobuf_AddDesc_SceneFood_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SceneMap.proto\022\003Cmd\032\nxCmd.proto\032\021Proto"
    "Common.proto\032\017SceneUser.proto\032\020SceneUser"
    "2.proto\032\023SceneChatRoom.proto\032\017SceneFood."
    "proto\"\220\001\n\007MapItem\022\017\n\004guid\030\001 \001(\004:\0010\022\r\n\002id"
    "\030\002 \001(\r:\0010\022\017\n\004time\030\003 \001(\r:\0010\022\023\n\010sourceid\030\004"
    " \001(\004:\0010\022\032\n\003pos\030\005 \001(\0132\r.Cmd.ScenePos\022\016\n\006o"
    "wners\030\006 \003(\004\022\023\n\010refinelv\030\007 \001(\r:\0010\"\220\001\n\nAdd"
    "MapItem\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCEN"
    "E_USER_MAP_PROTOCMD\0221\n\005param\030\002 \001(\0162\r.Cmd"
    ".MapParam:\023MAPPARAM_ADDMAPITEM\022\033\n\005items\030"
    "\003 \003(\0132\014.Cmd.MapItem\"\267\001\n\nPickupItem\0222\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_MAP_PR"
    "OTOCMD\0221\n\005param\030\002 \001(\0162\r.Cmd.MapParam:\023MA"
    "PPARAM_PICKUPITEM\022\025\n\nplayerguid\030\003 \001(\004:\0010"
    "\022\023\n\010itemguid\030\004 \001(\004:\0010\022\026\n\007success\030\005 \001(\010:\005"
    "false\"l\n\013CarrierInfo\022\n\n\002id\030\001 \001(\r\022\020\n\010mast"
    "erid\030\002 \001(\004\022\r\n\005index\030\003 \001(\r\022\020\n\010progress\030\004 "
    "\001(\r\022\014\n\004line\030\005 \001(\r\022\020\n\010assemble\030\006 \001(\r\"-\n\010L"
    "ineData\022\020\n\010masterId\030\001 \001(\004\022\017\n\007slaveId\030\002 \001"
    "(\004\"\205\001\n\013HandNpcData\022\014\n\004body\030\001 \001(\r\022\014\n\004head"
    "\030\002 \001(\r\022\014\n\004hair\030\003 \001(\r\022\021\n\thaircolor\030\004 \001(\r\022"
    "\014\n\004guid\030\005 \001(\004\022\020\n\010speffect\030\006 \001(\r\022\014\n\004name\030"
    "\007 \001(\t\022\013\n\003eye\030\010 \001(\r\"s\n\022GingerBreadNpcData"
    "\022\r\n\005npcid\030\001 \001(\r\022\014\n\004guid\030\002 \001(\004\022\016\n\006giveid\030"
    "\003 \001(\004\022\022\n\nexpiretime\030\004 \001(\r\022\034\n\004type\030\005 \001(\0162"
    "\016.Cmd.EGiveType\"\304\005\n\007MapUser\022\017\n\004guid\030\001 \001("
    "\004:\0010\022\014\n\004name\030\002 \001(\t\022)\n\006gender\030\003 \001(\0162\014.Cmd"
    ".EGender:\013EGENDER_MIN\022\032\n\003pos\030\004 \001(\0132\r.Cmd"
    ".ScenePos\022\033\n\004dest\030\005 \001(\0132\r.Cmd.ScenePos\022\034"
    "\n\005attrs\030\006 \003(\0132\r.Cmd.UserAttr\022\034\n\005datas\030\007 "
    "\003(\0132\r.Cmd.UserData\022\036\n\005buffs\030\010 \003(\0132\017.Cmd."
    "BufferData\022\017\n\007skillid\030\t \001(\r\022\016\n\006teamid\030\n "
    "\001(\004\022\020\n\010teamname\030\013 \001(\t\022!\n\007carrier\030\014 \001(\0132\020"
    ".Cmd.CarrierInfo\022&\n\010chatroom\030\r \001(\0132\024.Cmd"
    ".ChatRoomSummary\022\023\n\013handsmaster\030\016 \001(\004\022\'\n"
    "\014speffectdata\030\017 \003(\0132\021.Cmd.SpEffectData\022\022"
    "\n\007guildid\030\020 \001(\004:\0010\022\021\n\tguildname\030\021 \001(\t\022\021\n"
    "\tguildicon\030\022 \001(\t\022\020\n\010guildjob\030\023 \001(\t\022!\n\007ha"
    "ndnpc\030\024 \001(\0132\020.Cmd.HandNpcData\022\026\n\016motiona"
    "ctionid\030\025 \001(\r\022\016\n\006seatid\030\026 \001(\r\022-\n\014givenpc"
    "datas\030\027 \003(\0132\027.Cmd.GingerBreadNpcData\022\024\n\014"
    "achievetitle\030\030 \001(\r\022$\n\tcookstate\030\031 \001(\0132\021."
    "Cmd.CookStateMsg\022\034\n\004info\030\032 \001(\0132\016.Cmd.Boo"
    "thInfo\"\220\001\n\nAddMapUser\0222\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\027SCENE_USER_MAP_PROTOCMD\0221\n\005par"
    "am\030\002 \001(\0162\r.Cmd.MapParam:\023MAPPARAM_ADDMAP"
    "USER\022\033\n\005users\030\003 \003(\0132\014.Cmd.MapUser\"\347\004\n\006Ma"
    "pNpc\022\r\n\002id\030\001 \001(\004:\0010\022\014\n\004name\030\002 \001(\t\022\020\n\005npc"
    "ID\030\003 \001(\r:\0010\022\021\n\tcharacter\030\005 \003(\r\022\032\n\003pos\030\006 "
    "\001(\0132\r.Cmd.ScenePos\022\033\n\004dest\030\007 \001(\0132\r.Cmd.S"
    "cenePos\022\013\n\003dir\030\010 \001(\r\022\034\n\005datas\030\t \003(\0132\r.Cm"
    "d.UserData\022\034\n\005attrs\030\n \003(\0132\r.Cmd.UserAttr"
    "\022\020\n\005owner\030\013 \001(\004:\0010\022\024\n\tbehaviour\030\014 \001(\r:\0010"
    "\022\023\n\010uniqueid\030\r \001(\r:\0010\022\022\n\nwaitaction\030\016 \001("
    "\t\022\021\n\006teamid\030\017 \001(\r:\0010\022\026\n\013searchrange\030\020 \001("
    "\r:\0010\022\036\n\005buffs\030\021 \003(\0132\017.Cmd.BufferData\022\031\n\016"
    "motionactionid\030\022 \001(\r:\0010\022\016\n\006effect\030\023 \001(\t\022"
    "\024\n\teffectpos\030\024 \001(\r:\0010\022\026\n\013effectindex\030\025 \001"
    "(\r:\0010\022\'\n\014speffectdata\030\026 \003(\0132\021.Cmd.SpEffe"
    "ctData\022\026\n\007isbirth\030\027 \001(\010:\005false\022\024\n\014eat_pr"
    "ogress\030\030 \001(\r\022\021\n\006fadein\030\031 \001(\r:\0010\022\022\n\007guild"
    "id\030\032 \001(\004:\0010\022\021\n\006search\030\033 \001(\r:\0010\022\023\n\010bossty"
    "pe\030\034 \001(\r:\0010\"\214\001\n\tAddMapNpc\0222\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\027SCENE_USER_MAP_PROTOCMD\0220\n"
    "\005param\030\002 \001(\0162\r.Cmd.MapParam:\022MAPPARAM_AD"
    "DMAPNPC\022\031\n\004npcs\030\003 \003(\0132\013.Cmd.MapNpc\"a\n\007Ma"
    "pTrap\022\n\n\002id\030\001 \001(\004\022\017\n\007skillID\030\002 \001(\r\022\032\n\003po"
    "s\030\003 \001(\0132\r.Cmd.ScenePos\022\013\n\003dir\030\004 \001(\r\022\020\n\010m"
    "asterid\030\005 \001(\004\"\220\001\n\nAddMapTrap\0222\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\027SCENE_USER_MAP_PROTOCMD"
    "\0221\n\005param\030\002 \001(\0162\r.Cmd.MapParam:\023MAPPARAM"
    "_ADDMAPTRAP\022\033\n\005traps\030\003 \003(\0132\014.Cmd.MapTrap"
    "\"\232\001\n\006MapAct\022\r\n\002id\030\001 \001(\004:\0010\022\020\n\005range\030\002 \001("
    "\r:\0010\022\023\n\010masterid\030\003 \001(\004:\0010\022)\n\004type\030\004 \001(\0162"
    "\r.Cmd.EActType:\014EACTTYPE_MIN\022\023\n\010actvalue"
    "\030\005 \001(\r:\0010\022\032\n\003pos\030\006 \001(\0132\r.Cmd.ScenePos\"\214\001"
    "\n\tAddMapAct\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027"
    "SCENE_USER_MAP_PROTOCMD\0220\n\005param\030\002 \001(\0162\r"
    ".Cmd.MapParam:\022MAPPARAM_ADDMAPACT\022\031\n\004act"
    "s\030\003 \003(\0132\013.Cmd.MapAct\"\236\001\n\016ExitPointState\022"
    "2\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_M"
    "AP_PROTOCMD\0227\n\005param\030\002 \001(\0162\r.Cmd.MapPara"
    "m:\031MAPPARAM_EXIT_POINT_STATE\022\016\n\006exitid\030\003"
    " \001(\r\022\017\n\007visible\030\004 \001(\r\"s\n\tMapCmdEnd\0222\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_MAP_PR"
    "OTOCMD\0222\n\005param\030\002 \001(\0162\r.Cmd.MapParam:\024MA"
    "PPARAM_MAP_CMD_END\"\241\001\n\021NpcSearchRangeCmd"
    "\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_"
    "MAP_PROTOCMD\0227\n\005param\030\002 \001(\0162\r.Cmd.MapPar"
    "am:\031MAPPARAM_NPC_SEARCH_RANGE\022\r\n\002id\030\003 \001("
    "\004:\0010\022\020\n\005range\030\004 \001(\r:\0010\"\257\001\n\014UserHandsCmd\022"
    "2\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_M"
    "AP_PROTOCMD\0221\n\005param\030\002 \001(\0162\r.Cmd.MapPara"
    "m:\023MAPPARAM_USER_HANDS\022\022\n\007player1\030\003 \001(\004:"
    "\0010\022\022\n\007player2\030\004 \001(\004:\0010\022\020\n\005isadd\030\005 \001(\r:\0011"
    "\"\277\001\n\013SpEffectCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\027SCENE_USER_MAP_PROTOCMD\0224\n\005param\030\002 "
    "\001(\0162\r.Cmd.MapParam:\026MAPPARAM_USER_SPEFFE"
    "CT\022\020\n\010senderid\030\003 \001(\004\022\037\n\004data\030\004 \001(\0132\021.Cmd"
    ".SpEffectData\022\023\n\005isadd\030\005 \001(\010:\004true\"\303\001\n\016U"
    "serHandNpcCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\027SCENE_USER_MAP_PROTOCMD\0224\n\005param\030\002 \001(\016"
    "2\r.Cmd.MapParam:\026MAPPARAM_USER_HAND_NPC\022"
    "\036\n\004data\030\003 \001(\0132\020.Cmd.HandNpcData\022\024\n\006ishan"
    "d\030\004 \001(\010:\004true\022\021\n\006userid\030\005 \001(\004:\0010\"\356\001\n\021Gin"
    "gerBreadNpcCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\027SCENE_USER_MAP_PROTOCMD\0226\n\005param\030\002 \001("
    "\0162\r.Cmd.MapParam:\030MAPPARAM_GINGERBREAD_N"
    "PC\022%\n\004data\030\003 \001(\0132\027.Cmd.GingerBreadNpcDat"
    "a\022\023\n\005isadd\030\004 \001(\010:\004true\022\021\n\006userid\030\005 \001(\004:\001"
    "0\022\036\n\007bornpos\030\006 \001(\0132\r.Cmd.ScenePos\"\213\001\n\020Go"
    "CityGateMapCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\027SCENE_USER_MAP_PROTOCMD\0222\n\005param\030\002 \001("
    "\0162\r.Cmd.MapParam:\024MAPPARAM_GO_CITYGATE\022\017"
    "\n\004flag\030\003 \001(\r:\0010*\377\002\n\010MapParam\022\027\n\023MAPPARAM"
    "_ADDMAPITEM\020\001\022\027\n\023MAPPARAM_PICKUPITEM\020\002\022\027"
    "\n\023MAPPARAM_ADDMAPUSER\020\003\022\026\n\022MAPPARAM_ADDM"
    "APNPC\020\004\022\027\n\023MAPPARAM_ADDMAPTRAP\020\005\022\026\n\022MAPP"
    "ARAM_ADDMAPACT\020\006\022\035\n\031MAPPARAM_EXIT_POINT_"
    "STATE\020\007\022\030\n\024MAPPARAM_MAP_CMD_END\020\010\022\035\n\031MAP"
    "PARAM_NPC_SEARCH_RANGE\020\t\022\027\n\023MAPPARAM_USE"
    "R_HANDS\020\n\022\032\n\026MAPPARAM_USER_SPEFFECT\020\013\022\032\n"
    "\026MAPPARAM_USER_HAND_NPC\020\014\022\034\n\030MAPPARAM_GI"
    "NGERBREAD_NPC\020\r\022\030\n\024MAPPARAM_GO_CITYGATE\020"
    "\016*7\n\tEGiveType\022\023\n\017EGiveType_Trade\020\001\022\025\n\021E"
    "GiveType_Lottery\020\002*\230\001\n\010EActType\022\020\n\014EACTT"
    "YPE_MIN\020\000\022\023\n\017EACTTYPE_PURIFY\020\001\022\021\n\rEACTTY"
    "PE_SEAL\020\002\022\022\n\016EACTTYPE_MUSIC\020\003\022\023\n\017EACTTYP"
    "E_EFFECT\020\004\022\027\n\023EACTTYPE_SCENEEVENT\020\005\022\020\n\014E"
    "ACTTYPE_MAX\020\006", 5173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneMap.proto", &protobuf_RegisterTypes);
  MapItem::default_instance_ = new MapItem();
  AddMapItem::default_instance_ = new AddMapItem();
  PickupItem::default_instance_ = new PickupItem();
  CarrierInfo::default_instance_ = new CarrierInfo();
  LineData::default_instance_ = new LineData();
  HandNpcData::default_instance_ = new HandNpcData();
  GingerBreadNpcData::default_instance_ = new GingerBreadNpcData();
  MapUser::default_instance_ = new MapUser();
  AddMapUser::default_instance_ = new AddMapUser();
  MapNpc::default_instance_ = new MapNpc();
  AddMapNpc::default_instance_ = new AddMapNpc();
  MapTrap::default_instance_ = new MapTrap();
  AddMapTrap::default_instance_ = new AddMapTrap();
  MapAct::default_instance_ = new MapAct();
  AddMapAct::default_instance_ = new AddMapAct();
  ExitPointState::default_instance_ = new ExitPointState();
  MapCmdEnd::default_instance_ = new MapCmdEnd();
  NpcSearchRangeCmd::default_instance_ = new NpcSearchRangeCmd();
  UserHandsCmd::default_instance_ = new UserHandsCmd();
  SpEffectCmd::default_instance_ = new SpEffectCmd();
  UserHandNpcCmd::default_instance_ = new UserHandNpcCmd();
  GingerBreadNpcCmd::default_instance_ = new GingerBreadNpcCmd();
  GoCityGateMapCmd::default_instance_ = new GoCityGateMapCmd();
  MapItem::default_instance_->InitAsDefaultInstance();
  AddMapItem::default_instance_->InitAsDefaultInstance();
  PickupItem::default_instance_->InitAsDefaultInstance();
  CarrierInfo::default_instance_->InitAsDefaultInstance();
  LineData::default_instance_->InitAsDefaultInstance();
  HandNpcData::default_instance_->InitAsDefaultInstance();
  GingerBreadNpcData::default_instance_->InitAsDefaultInstance();
  MapUser::default_instance_->InitAsDefaultInstance();
  AddMapUser::default_instance_->InitAsDefaultInstance();
  MapNpc::default_instance_->InitAsDefaultInstance();
  AddMapNpc::default_instance_->InitAsDefaultInstance();
  MapTrap::default_instance_->InitAsDefaultInstance();
  AddMapTrap::default_instance_->InitAsDefaultInstance();
  MapAct::default_instance_->InitAsDefaultInstance();
  AddMapAct::default_instance_->InitAsDefaultInstance();
  ExitPointState::default_instance_->InitAsDefaultInstance();
  MapCmdEnd::default_instance_->InitAsDefaultInstance();
  NpcSearchRangeCmd::default_instance_->InitAsDefaultInstance();
  UserHandsCmd::default_instance_->InitAsDefaultInstance();
  SpEffectCmd::default_instance_->InitAsDefaultInstance();
  UserHandNpcCmd::default_instance_->InitAsDefaultInstance();
  GingerBreadNpcCmd::default_instance_->InitAsDefaultInstance();
  GoCityGateMapCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneMap_2eproto {
  StaticDescriptorInitializer_SceneMap_2eproto() {
    protobuf_AddDesc_SceneMap_2eproto();
  }
} static_descriptor_initializer_SceneMap_2eproto_;
const ::google::protobuf::EnumDescriptor* MapParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapParam_descriptor_;
}
bool MapParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGiveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGiveType_descriptor_;
}
bool EGiveType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EActType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EActType_descriptor_;
}
bool EActType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MapItem::kGuidFieldNumber;
const int MapItem::kIdFieldNumber;
const int MapItem::kTimeFieldNumber;
const int MapItem::kSourceidFieldNumber;
const int MapItem::kPosFieldNumber;
const int MapItem::kOwnersFieldNumber;
const int MapItem::kRefinelvFieldNumber;
#endif  // !_MSC_VER

MapItem::MapItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapItem)
}

void MapItem::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

MapItem::MapItem(const MapItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapItem)
}

void MapItem::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  time_ = 0u;
  sourceid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  refinelv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapItem::~MapItem() {
  // @@protoc_insertion_point(destructor:Cmd.MapItem)
  SharedDtor();
}

void MapItem::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapItem_descriptor_;
}

const MapItem& MapItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

MapItem* MapItem::default_instance_ = NULL;

MapItem* MapItem::New() const {
  return new MapItem;
}

void MapItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(guid_, sourceid_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    refinelv_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  owners_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceid;
        break;
      }

      // optional uint64 sourceid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sourceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_owners;
        break;
      }

      // repeated uint64 owners = 6;
      case 6: {
        if (tag == 48) {
         parse_owners:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_owners())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_owners())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_owners;
        if (input->ExpectTag(56)) goto parse_refinelv;
        break;
      }

      // optional uint32 refinelv = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapItem)
  return false;
#undef DO_
}

void MapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapItem)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint64 sourceid = 4 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sourceid(), output);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // repeated uint64 owners = 6;
  for (int i = 0; i < this->owners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->owners(i), output);
  }

  // optional uint32 refinelv = 7 [default = 0];
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->refinelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapItem)
}

::google::protobuf::uint8* MapItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapItem)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint64 sourceid = 4 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sourceid(), target);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // repeated uint64 owners = 6;
  for (int i = 0; i < this->owners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->owners(i), target);
  }

  // optional uint32 refinelv = 7 [default = 0];
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->refinelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapItem)
  return target;
}

int MapItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 id = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 sourceid = 4 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sourceid());
    }

    // optional .Cmd.ScenePos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 refinelv = 7 [default = 0];
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

  }
  // repeated uint64 owners = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->owners_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->owners(i));
    }
    total_size += 1 * this->owners_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapItem::MergeFrom(const MapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  owners_.MergeFrom(from.owners_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapItem::CopyFrom(const MapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapItem::IsInitialized() const {

  return true;
}

void MapItem::Swap(MapItem* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(pos_, other->pos_);
    owners_.Swap(&other->owners_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapItem_descriptor_;
  metadata.reflection = MapItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMapItem::kCmdFieldNumber;
const int AddMapItem::kParamFieldNumber;
const int AddMapItem::kItemsFieldNumber;
#endif  // !_MSC_VER

AddMapItem::AddMapItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddMapItem)
}

void AddMapItem::InitAsDefaultInstance() {
}

AddMapItem::AddMapItem(const AddMapItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddMapItem)
}

void AddMapItem::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMapItem::~AddMapItem() {
  // @@protoc_insertion_point(destructor:Cmd.AddMapItem)
  SharedDtor();
}

void AddMapItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMapItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMapItem_descriptor_;
}

const AddMapItem& AddMapItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

AddMapItem* AddMapItem::default_instance_ = NULL;

AddMapItem* AddMapItem::New() const {
  return new AddMapItem;
}

void AddMapItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 12;
    param_ = 1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.MapItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddMapItem)
  return false;
#undef DO_
}

void AddMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddMapItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MapItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddMapItem)
}

::google::protobuf::uint8* AddMapItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddMapItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MapItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddMapItem)
  return target;
}

int AddMapItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MapItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMapItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMapItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMapItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMapItem::MergeFrom(const AddMapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMapItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMapItem::CopyFrom(const AddMapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMapItem::IsInitialized() const {

  return true;
}

void AddMapItem::Swap(AddMapItem* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMapItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMapItem_descriptor_;
  metadata.reflection = AddMapItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PickupItem::kCmdFieldNumber;
const int PickupItem::kParamFieldNumber;
const int PickupItem::kPlayerguidFieldNumber;
const int PickupItem::kItemguidFieldNumber;
const int PickupItem::kSuccessFieldNumber;
#endif  // !_MSC_VER

PickupItem::PickupItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PickupItem)
}

void PickupItem::InitAsDefaultInstance() {
}

PickupItem::PickupItem(const PickupItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PickupItem)
}

void PickupItem::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 2;
  playerguid_ = GOOGLE_ULONGLONG(0);
  itemguid_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PickupItem::~PickupItem() {
  // @@protoc_insertion_point(destructor:Cmd.PickupItem)
  SharedDtor();
}

void PickupItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PickupItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PickupItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PickupItem_descriptor_;
}

const PickupItem& PickupItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

PickupItem* PickupItem::default_instance_ = NULL;

PickupItem* PickupItem::New() const {
  return new PickupItem;
}

void PickupItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PickupItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(playerguid_, success_);
    cmd_ = 12;
    param_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PickupItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PickupItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_PICKUPITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerguid;
        break;
      }

      // optional uint64 playerguid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_playerguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemguid;
        break;
      }

      // optional uint64 itemguid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_itemguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemguid_)));
          set_has_itemguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_success;
        break;
      }

      // optional bool success = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PickupItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PickupItem)
  return false;
#undef DO_
}

void PickupItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PickupItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_PICKUPITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 playerguid = 3 [default = 0];
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerguid(), output);
  }

  // optional uint64 itemguid = 4 [default = 0];
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->itemguid(), output);
  }

  // optional bool success = 5 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PickupItem)
}

::google::protobuf::uint8* PickupItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PickupItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_PICKUPITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 playerguid = 3 [default = 0];
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerguid(), target);
  }

  // optional uint64 itemguid = 4 [default = 0];
  if (has_itemguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->itemguid(), target);
  }

  // optional bool success = 5 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PickupItem)
  return target;
}

int PickupItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_PICKUPITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 playerguid = 3 [default = 0];
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerguid());
    }

    // optional uint64 itemguid = 4 [default = 0];
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemguid());
    }

    // optional bool success = 5 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PickupItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PickupItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PickupItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PickupItem::MergeFrom(const PickupItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PickupItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickupItem::CopyFrom(const PickupItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickupItem::IsInitialized() const {

  return true;
}

void PickupItem::Swap(PickupItem* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(playerguid_, other->playerguid_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PickupItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PickupItem_descriptor_;
  metadata.reflection = PickupItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarrierInfo::kIdFieldNumber;
const int CarrierInfo::kMasteridFieldNumber;
const int CarrierInfo::kIndexFieldNumber;
const int CarrierInfo::kProgressFieldNumber;
const int CarrierInfo::kLineFieldNumber;
const int CarrierInfo::kAssembleFieldNumber;
#endif  // !_MSC_VER

CarrierInfo::CarrierInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CarrierInfo)
}

void CarrierInfo::InitAsDefaultInstance() {
}

CarrierInfo::CarrierInfo(const CarrierInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CarrierInfo)
}

void CarrierInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  masterid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  progress_ = 0u;
  line_ = 0u;
  assemble_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarrierInfo::~CarrierInfo() {
  // @@protoc_insertion_point(destructor:Cmd.CarrierInfo)
  SharedDtor();
}

void CarrierInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarrierInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarrierInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierInfo_descriptor_;
}

const CarrierInfo& CarrierInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

CarrierInfo* CarrierInfo::default_instance_ = NULL;

CarrierInfo* CarrierInfo::New() const {
  return new CarrierInfo;
}

void CarrierInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CarrierInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(masterid_, assemble_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarrierInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CarrierInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 2;
      case 2: {
        if (tag == 16) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 4;
      case 4: {
        if (tag == 32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_line;
        break;
      }

      // optional uint32 line = 5;
      case 5: {
        if (tag == 40) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_assemble;
        break;
      }

      // optional uint32 assemble = 6;
      case 6: {
        if (tag == 48) {
         parse_assemble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assemble_)));
          set_has_assemble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CarrierInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CarrierInfo)
  return false;
#undef DO_
}

void CarrierInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CarrierInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 masterid = 2;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->masterid(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 progress = 4;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  // optional uint32 line = 5;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line(), output);
  }

  // optional uint32 assemble = 6;
  if (has_assemble()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->assemble(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CarrierInfo)
}

::google::protobuf::uint8* CarrierInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CarrierInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 masterid = 2;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->masterid(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 progress = 4;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  // optional uint32 line = 5;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line(), target);
  }

  // optional uint32 assemble = 6;
  if (has_assemble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->assemble(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CarrierInfo)
  return target;
}

int CarrierInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 masterid = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 line = 5;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line());
    }

    // optional uint32 assemble = 6;
    if (has_assemble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assemble());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarrierInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarrierInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarrierInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarrierInfo::MergeFrom(const CarrierInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_assemble()) {
      set_assemble(from.assemble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarrierInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierInfo::CopyFrom(const CarrierInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierInfo::IsInitialized() const {

  return true;
}

void CarrierInfo::Swap(CarrierInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(masterid_, other->masterid_);
    std::swap(index_, other->index_);
    std::swap(progress_, other->progress_);
    std::swap(line_, other->line_);
    std::swap(assemble_, other->assemble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarrierInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarrierInfo_descriptor_;
  metadata.reflection = CarrierInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineData::kMasterIdFieldNumber;
const int LineData::kSlaveIdFieldNumber;
#endif  // !_MSC_VER

LineData::LineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LineData)
}

void LineData::InitAsDefaultInstance() {
}

LineData::LineData(const LineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LineData)
}

void LineData::SharedCtor() {
  _cached_size_ = 0;
  masterid_ = GOOGLE_ULONGLONG(0);
  slaveid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineData::~LineData() {
  // @@protoc_insertion_point(destructor:Cmd.LineData)
  SharedDtor();
}

void LineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineData_descriptor_;
}

const LineData& LineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

LineData* LineData::default_instance_ = NULL;

LineData* LineData::New() const {
  return new LineData;
}

void LineData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LineData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(masterid_, slaveid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 masterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slaveId;
        break;
      }

      // optional uint64 slaveId = 2;
      case 2: {
        if (tag == 16) {
         parse_slaveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slaveid_)));
          set_has_slaveid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LineData)
  return false;
#undef DO_
}

void LineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LineData)
  // optional uint64 masterId = 1;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->masterid(), output);
  }

  // optional uint64 slaveId = 2;
  if (has_slaveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->slaveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LineData)
}

::google::protobuf::uint8* LineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LineData)
  // optional uint64 masterId = 1;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->masterid(), target);
  }

  // optional uint64 slaveId = 2;
  if (has_slaveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->slaveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LineData)
  return target;
}

int LineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 masterId = 1;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint64 slaveId = 2;
    if (has_slaveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->slaveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineData::MergeFrom(const LineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_slaveid()) {
      set_slaveid(from.slaveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineData::CopyFrom(const LineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineData::IsInitialized() const {

  return true;
}

void LineData::Swap(LineData* other) {
  if (other != this) {
    std::swap(masterid_, other->masterid_);
    std::swap(slaveid_, other->slaveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineData_descriptor_;
  metadata.reflection = LineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandNpcData::kBodyFieldNumber;
const int HandNpcData::kHeadFieldNumber;
const int HandNpcData::kHairFieldNumber;
const int HandNpcData::kHaircolorFieldNumber;
const int HandNpcData::kGuidFieldNumber;
const int HandNpcData::kSpeffectFieldNumber;
const int HandNpcData::kNameFieldNumber;
const int HandNpcData::kEyeFieldNumber;
#endif  // !_MSC_VER

HandNpcData::HandNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HandNpcData)
}

void HandNpcData::InitAsDefaultInstance() {
}

HandNpcData::HandNpcData(const HandNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HandNpcData)
}

void HandNpcData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  body_ = 0u;
  head_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  guid_ = GOOGLE_ULONGLONG(0);
  speffect_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eye_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandNpcData::~HandNpcData() {
  // @@protoc_insertion_point(destructor:Cmd.HandNpcData)
  SharedDtor();
}

void HandNpcData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HandNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandNpcData_descriptor_;
}

const HandNpcData& HandNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

HandNpcData* HandNpcData::default_instance_ = NULL;

HandNpcData* HandNpcData::New() const {
  return new HandNpcData;
}

void HandNpcData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandNpcData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(body_, guid_);
    ZR_(speffect_, eye_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HandNpcData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 body = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_head;
        break;
      }

      // optional uint32 head = 2;
      case 2: {
        if (tag == 16) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 3;
      case 3: {
        if (tag == 24) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 4;
      case 4: {
        if (tag == 32) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 5;
      case 5: {
        if (tag == 40) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speffect;
        break;
      }

      // optional uint32 speffect = 6;
      case 6: {
        if (tag == 48) {
         parse_speffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speffect_)));
          set_has_speffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 8;
      case 8: {
        if (tag == 64) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HandNpcData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HandNpcData)
  return false;
#undef DO_
}

void HandNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HandNpcData)
  // optional uint32 body = 1;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->body(), output);
  }

  // optional uint32 head = 2;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head(), output);
  }

  // optional uint32 hair = 3;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hair(), output);
  }

  // optional uint32 haircolor = 4;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->haircolor(), output);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guid(), output);
  }

  // optional uint32 speffect = 6;
  if (has_speffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speffect(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional uint32 eye = 8;
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->eye(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HandNpcData)
}

::google::protobuf::uint8* HandNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HandNpcData)
  // optional uint32 body = 1;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->body(), target);
  }

  // optional uint32 head = 2;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head(), target);
  }

  // optional uint32 hair = 3;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hair(), target);
  }

  // optional uint32 haircolor = 4;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->haircolor(), target);
  }

  // optional uint64 guid = 5;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guid(), target);
  }

  // optional uint32 speffect = 6;
  if (has_speffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speffect(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional uint32 eye = 8;
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->eye(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HandNpcData)
  return target;
}

int HandNpcData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 body = 1;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 head = 2;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 hair = 3;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 4;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint64 guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 speffect = 6;
    if (has_speffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speffect());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 eye = 8;
    if (has_eye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandNpcData::MergeFrom(const HandNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_speffect()) {
      set_speffect(from.speffect());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandNpcData::CopyFrom(const HandNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandNpcData::IsInitialized() const {

  return true;
}

void HandNpcData::Swap(HandNpcData* other) {
  if (other != this) {
    std::swap(body_, other->body_);
    std::swap(head_, other->head_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(guid_, other->guid_);
    std::swap(speffect_, other->speffect_);
    std::swap(name_, other->name_);
    std::swap(eye_, other->eye_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandNpcData_descriptor_;
  metadata.reflection = HandNpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GingerBreadNpcData::kNpcidFieldNumber;
const int GingerBreadNpcData::kGuidFieldNumber;
const int GingerBreadNpcData::kGiveidFieldNumber;
const int GingerBreadNpcData::kExpiretimeFieldNumber;
const int GingerBreadNpcData::kTypeFieldNumber;
#endif  // !_MSC_VER

GingerBreadNpcData::GingerBreadNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GingerBreadNpcData)
}

void GingerBreadNpcData::InitAsDefaultInstance() {
}

GingerBreadNpcData::GingerBreadNpcData(const GingerBreadNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GingerBreadNpcData)
}

void GingerBreadNpcData::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  guid_ = GOOGLE_ULONGLONG(0);
  giveid_ = GOOGLE_ULONGLONG(0);
  expiretime_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GingerBreadNpcData::~GingerBreadNpcData() {
  // @@protoc_insertion_point(destructor:Cmd.GingerBreadNpcData)
  SharedDtor();
}

void GingerBreadNpcData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GingerBreadNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GingerBreadNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GingerBreadNpcData_descriptor_;
}

const GingerBreadNpcData& GingerBreadNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

GingerBreadNpcData* GingerBreadNpcData::default_instance_ = NULL;

GingerBreadNpcData* GingerBreadNpcData::New() const {
  return new GingerBreadNpcData;
}

void GingerBreadNpcData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GingerBreadNpcData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guid_, giveid_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GingerBreadNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GingerBreadNpcData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 2;
      case 2: {
        if (tag == 16) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_giveid;
        break;
      }

      // optional uint64 giveid = 3;
      case 3: {
        if (tag == 24) {
         parse_giveid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &giveid_)));
          set_has_giveid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 4;
      case 4: {
        if (tag == 32) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Cmd.EGiveType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGiveType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GingerBreadNpcData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GingerBreadNpcData)
  return false;
#undef DO_
}

void GingerBreadNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GingerBreadNpcData)
  // optional uint32 npcid = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // optional uint64 giveid = 3;
  if (has_giveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->giveid(), output);
  }

  // optional uint32 expiretime = 4;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expiretime(), output);
  }

  // optional .Cmd.EGiveType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GingerBreadNpcData)
}

::google::protobuf::uint8* GingerBreadNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GingerBreadNpcData)
  // optional uint32 npcid = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  // optional uint64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // optional uint64 giveid = 3;
  if (has_giveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->giveid(), target);
  }

  // optional uint32 expiretime = 4;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expiretime(), target);
  }

  // optional .Cmd.EGiveType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GingerBreadNpcData)
  return target;
}

int GingerBreadNpcData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npcid = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 giveid = 3;
    if (has_giveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->giveid());
    }

    // optional uint32 expiretime = 4;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

    // optional .Cmd.EGiveType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GingerBreadNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GingerBreadNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GingerBreadNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GingerBreadNpcData::MergeFrom(const GingerBreadNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_giveid()) {
      set_giveid(from.giveid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GingerBreadNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GingerBreadNpcData::CopyFrom(const GingerBreadNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GingerBreadNpcData::IsInitialized() const {

  return true;
}

void GingerBreadNpcData::Swap(GingerBreadNpcData* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(guid_, other->guid_);
    std::swap(giveid_, other->giveid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GingerBreadNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GingerBreadNpcData_descriptor_;
  metadata.reflection = GingerBreadNpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapUser::kGuidFieldNumber;
const int MapUser::kNameFieldNumber;
const int MapUser::kGenderFieldNumber;
const int MapUser::kPosFieldNumber;
const int MapUser::kDestFieldNumber;
const int MapUser::kAttrsFieldNumber;
const int MapUser::kDatasFieldNumber;
const int MapUser::kBuffsFieldNumber;
const int MapUser::kSkillidFieldNumber;
const int MapUser::kTeamidFieldNumber;
const int MapUser::kTeamnameFieldNumber;
const int MapUser::kCarrierFieldNumber;
const int MapUser::kChatroomFieldNumber;
const int MapUser::kHandsmasterFieldNumber;
const int MapUser::kSpeffectdataFieldNumber;
const int MapUser::kGuildidFieldNumber;
const int MapUser::kGuildnameFieldNumber;
const int MapUser::kGuildiconFieldNumber;
const int MapUser::kGuildjobFieldNumber;
const int MapUser::kHandnpcFieldNumber;
const int MapUser::kMotionactionidFieldNumber;
const int MapUser::kSeatidFieldNumber;
const int MapUser::kGivenpcdatasFieldNumber;
const int MapUser::kAchievetitleFieldNumber;
const int MapUser::kCookstateFieldNumber;
const int MapUser::kInfoFieldNumber;
#endif  // !_MSC_VER

MapUser::MapUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapUser)
}

void MapUser::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
  dest_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
  carrier_ = const_cast< ::Cmd::CarrierInfo*>(&::Cmd::CarrierInfo::default_instance());
  chatroom_ = const_cast< ::Cmd::ChatRoomSummary*>(&::Cmd::ChatRoomSummary::default_instance());
  handnpc_ = const_cast< ::Cmd::HandNpcData*>(&::Cmd::HandNpcData::default_instance());
  cookstate_ = const_cast< ::Cmd::CookStateMsg*>(&::Cmd::CookStateMsg::default_instance());
  info_ = const_cast< ::Cmd::BoothInfo*>(&::Cmd::BoothInfo::default_instance());
}

MapUser::MapUser(const MapUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapUser)
}

void MapUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  pos_ = NULL;
  dest_ = NULL;
  skillid_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_ = NULL;
  chatroom_ = NULL;
  handsmaster_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildjob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handnpc_ = NULL;
  motionactionid_ = 0u;
  seatid_ = 0u;
  achievetitle_ = 0u;
  cookstate_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapUser::~MapUser() {
  // @@protoc_insertion_point(destructor:Cmd.MapUser)
  SharedDtor();
}

void MapUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildicon_;
  }
  if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildjob_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete dest_;
    delete carrier_;
    delete chatroom_;
    delete handnpc_;
    delete cookstate_;
    delete info_;
  }
}

void MapUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapUser_descriptor_;
}

const MapUser& MapUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

MapUser* MapUser::default_instance_ = NULL;

MapUser* MapUser::New() const {
  return new MapUser;
}

void MapUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    gender_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    if (has_dest()) {
      if (dest_ != NULL) dest_->::Cmd::ScenePos::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    skillid_ = 0u;
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
    if (has_carrier()) {
      if (carrier_ != NULL) carrier_->::Cmd::CarrierInfo::Clear();
    }
    if (has_chatroom()) {
      if (chatroom_ != NULL) chatroom_->::Cmd::ChatRoomSummary::Clear();
    }
    handsmaster_ = GOOGLE_ULONGLONG(0);
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & 12517376) {
    ZR_(motionactionid_, seatid_);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_guildicon()) {
      if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildicon_->clear();
      }
    }
    if (has_guildjob()) {
      if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildjob_->clear();
      }
    }
    if (has_handnpc()) {
      if (handnpc_ != NULL) handnpc_->::Cmd::HandNpcData::Clear();
    }
    achievetitle_ = 0u;
  }
  if (_has_bits_[24 / 32] & 50331648) {
    if (has_cookstate()) {
      if (cookstate_ != NULL) cookstate_->::Cmd::CookStateMsg::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::BoothInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrs_.Clear();
  datas_.Clear();
  buffs_.Clear();
  speffectdata_.Clear();
  givenpcdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 3 [default = EGENDER_MIN];
      case 3: {
        if (tag == 24) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dest;
        break;
      }

      // optional .Cmd.ScenePos dest = 5;
      case 5: {
        if (tag == 42) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 6;
      case 6: {
        if (tag == 50) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attrs;
        if (input->ExpectTag(58)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 7;
      case 7: {
        if (tag == 58) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_datas;
        if (input->ExpectTag(66)) goto parse_buffs;
        break;
      }

      // repeated .Cmd.BufferData buffs = 8;
      case 8: {
        if (tag == 66) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_buffs;
        if (input->ExpectTag(72)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 9;
      case 9: {
        if (tag == 72) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 10;
      case 10: {
        if (tag == 80) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_teamname;
        break;
      }

      // optional string teamname = 11;
      case 11: {
        if (tag == 90) {
         parse_teamname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_carrier;
        break;
      }

      // optional .Cmd.CarrierInfo carrier = 12;
      case 12: {
        if (tag == 98) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carrier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_chatroom;
        break;
      }

      // optional .Cmd.ChatRoomSummary chatroom = 13;
      case 13: {
        if (tag == 106) {
         parse_chatroom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_handsmaster;
        break;
      }

      // optional uint64 handsmaster = 14;
      case 14: {
        if (tag == 112) {
         parse_handsmaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handsmaster_)));
          set_has_handsmaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_speffectdata;
        break;
      }

      // repeated .Cmd.SpEffectData speffectdata = 15;
      case 15: {
        if (tag == 122) {
         parse_speffectdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speffectdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_speffectdata;
        if (input->ExpectTag(128)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_guildname;
        break;
      }

      // optional string guildname = 17;
      case 17: {
        if (tag == 138) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_guildicon;
        break;
      }

      // optional string guildicon = 18;
      case 18: {
        if (tag == 146) {
         parse_guildicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildicon().data(), this->guildicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildicon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_guildjob;
        break;
      }

      // optional string guildjob = 19;
      case 19: {
        if (tag == 154) {
         parse_guildjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildjob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildjob().data(), this->guildjob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildjob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_handnpc;
        break;
      }

      // optional .Cmd.HandNpcData handnpc = 20;
      case 20: {
        if (tag == 162) {
         parse_handnpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handnpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_motionactionid;
        break;
      }

      // optional uint32 motionactionid = 21;
      case 21: {
        if (tag == 168) {
         parse_motionactionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motionactionid_)));
          set_has_motionactionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_seatid;
        break;
      }

      // optional uint32 seatid = 22;
      case 22: {
        if (tag == 176) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_givenpcdatas;
        break;
      }

      // repeated .Cmd.GingerBreadNpcData givenpcdatas = 23;
      case 23: {
        if (tag == 186) {
         parse_givenpcdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_givenpcdatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_givenpcdatas;
        if (input->ExpectTag(192)) goto parse_achievetitle;
        break;
      }

      // optional uint32 achievetitle = 24;
      case 24: {
        if (tag == 192) {
         parse_achievetitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievetitle_)));
          set_has_achievetitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_cookstate;
        break;
      }

      // optional .Cmd.CookStateMsg cookstate = 25;
      case 25: {
        if (tag == 202) {
         parse_cookstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cookstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_info;
        break;
      }

      // optional .Cmd.BoothInfo info = 26;
      case 26: {
        if (tag == 210) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapUser)
  return false;
#undef DO_
}

void MapUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapUser)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .Cmd.EGender gender = 3 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gender(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .Cmd.ScenePos dest = 5;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dest(), output);
  }

  // repeated .Cmd.UserAttr attrs = 6;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attrs(i), output);
  }

  // repeated .Cmd.UserData datas = 7;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->datas(i), output);
  }

  // repeated .Cmd.BufferData buffs = 8;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->buffs(i), output);
  }

  // optional uint32 skillid = 9;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skillid(), output);
  }

  // optional uint64 teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->teamid(), output);
  }

  // optional string teamname = 11;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->teamname(), output);
  }

  // optional .Cmd.CarrierInfo carrier = 12;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->carrier(), output);
  }

  // optional .Cmd.ChatRoomSummary chatroom = 13;
  if (has_chatroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->chatroom(), output);
  }

  // optional uint64 handsmaster = 14;
  if (has_handsmaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->handsmaster(), output);
  }

  // repeated .Cmd.SpEffectData speffectdata = 15;
  for (int i = 0; i < this->speffectdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->speffectdata(i), output);
  }

  // optional uint64 guildid = 16 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->guildid(), output);
  }

  // optional string guildname = 17;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->guildname(), output);
  }

  // optional string guildicon = 18;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildicon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->guildicon(), output);
  }

  // optional string guildjob = 19;
  if (has_guildjob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildjob().data(), this->guildjob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildjob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->guildjob(), output);
  }

  // optional .Cmd.HandNpcData handnpc = 20;
  if (has_handnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->handnpc(), output);
  }

  // optional uint32 motionactionid = 21;
  if (has_motionactionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->motionactionid(), output);
  }

  // optional uint32 seatid = 22;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->seatid(), output);
  }

  // repeated .Cmd.GingerBreadNpcData givenpcdatas = 23;
  for (int i = 0; i < this->givenpcdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->givenpcdatas(i), output);
  }

  // optional uint32 achievetitle = 24;
  if (has_achievetitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->achievetitle(), output);
  }

  // optional .Cmd.CookStateMsg cookstate = 25;
  if (has_cookstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->cookstate(), output);
  }

  // optional .Cmd.BoothInfo info = 26;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapUser)
}

::google::protobuf::uint8* MapUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapUser)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .Cmd.EGender gender = 3 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gender(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .Cmd.ScenePos dest = 5;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dest(), target);
  }

  // repeated .Cmd.UserAttr attrs = 6;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attrs(i), target);
  }

  // repeated .Cmd.UserData datas = 7;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->datas(i), target);
  }

  // repeated .Cmd.BufferData buffs = 8;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->buffs(i), target);
  }

  // optional uint32 skillid = 9;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skillid(), target);
  }

  // optional uint64 teamid = 10;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->teamid(), target);
  }

  // optional string teamname = 11;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->teamname(), target);
  }

  // optional .Cmd.CarrierInfo carrier = 12;
  if (has_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->carrier(), target);
  }

  // optional .Cmd.ChatRoomSummary chatroom = 13;
  if (has_chatroom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->chatroom(), target);
  }

  // optional uint64 handsmaster = 14;
  if (has_handsmaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->handsmaster(), target);
  }

  // repeated .Cmd.SpEffectData speffectdata = 15;
  for (int i = 0; i < this->speffectdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->speffectdata(i), target);
  }

  // optional uint64 guildid = 16 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->guildid(), target);
  }

  // optional string guildname = 17;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->guildname(), target);
  }

  // optional string guildicon = 18;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildicon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->guildicon(), target);
  }

  // optional string guildjob = 19;
  if (has_guildjob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildjob().data(), this->guildjob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildjob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->guildjob(), target);
  }

  // optional .Cmd.HandNpcData handnpc = 20;
  if (has_handnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->handnpc(), target);
  }

  // optional uint32 motionactionid = 21;
  if (has_motionactionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->motionactionid(), target);
  }

  // optional uint32 seatid = 22;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->seatid(), target);
  }

  // repeated .Cmd.GingerBreadNpcData givenpcdatas = 23;
  for (int i = 0; i < this->givenpcdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->givenpcdatas(i), target);
  }

  // optional uint32 achievetitle = 24;
  if (has_achievetitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->achievetitle(), target);
  }

  // optional .Cmd.CookStateMsg cookstate = 25;
  if (has_cookstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->cookstate(), target);
  }

  // optional .Cmd.BoothInfo info = 26;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapUser)
  return target;
}

int MapUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.EGender gender = 3 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Cmd.ScenePos dest = 5;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 skillid = 9;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint64 teamid = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional string teamname = 11;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional .Cmd.CarrierInfo carrier = 12;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carrier());
    }

    // optional .Cmd.ChatRoomSummary chatroom = 13;
    if (has_chatroom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatroom());
    }

    // optional uint64 handsmaster = 14;
    if (has_handsmaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handsmaster());
    }

    // optional uint64 guildid = 16 [default = 0];
    if (has_guildid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string guildname = 17;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string guildicon = 18;
    if (has_guildicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildicon());
    }

    // optional string guildjob = 19;
    if (has_guildjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildjob());
    }

    // optional .Cmd.HandNpcData handnpc = 20;
    if (has_handnpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handnpc());
    }

    // optional uint32 motionactionid = 21;
    if (has_motionactionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motionactionid());
    }

    // optional uint32 seatid = 22;
    if (has_seatid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seatid());
    }

    // optional uint32 achievetitle = 24;
    if (has_achievetitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievetitle());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Cmd.CookStateMsg cookstate = 25;
    if (has_cookstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cookstate());
    }

    // optional .Cmd.BoothInfo info = 26;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .Cmd.UserAttr attrs = 6;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.UserData datas = 7;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.BufferData buffs = 8;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  // repeated .Cmd.SpEffectData speffectdata = 15;
  total_size += 1 * this->speffectdata_size();
  for (int i = 0; i < this->speffectdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speffectdata(i));
  }

  // repeated .Cmd.GingerBreadNpcData givenpcdatas = 23;
  total_size += 2 * this->givenpcdatas_size();
  for (int i = 0; i < this->givenpcdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->givenpcdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapUser::MergeFrom(const MapUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  datas_.MergeFrom(from.datas_);
  buffs_.MergeFrom(from.buffs_);
  speffectdata_.MergeFrom(from.speffectdata_);
  givenpcdatas_.MergeFrom(from.givenpcdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_dest()) {
      mutable_dest()->::Cmd::ScenePos::MergeFrom(from.dest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_carrier()) {
      mutable_carrier()->::Cmd::CarrierInfo::MergeFrom(from.carrier());
    }
    if (from.has_chatroom()) {
      mutable_chatroom()->::Cmd::ChatRoomSummary::MergeFrom(from.chatroom());
    }
    if (from.has_handsmaster()) {
      set_handsmaster(from.handsmaster());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildicon()) {
      set_guildicon(from.guildicon());
    }
    if (from.has_guildjob()) {
      set_guildjob(from.guildjob());
    }
    if (from.has_handnpc()) {
      mutable_handnpc()->::Cmd::HandNpcData::MergeFrom(from.handnpc());
    }
    if (from.has_motionactionid()) {
      set_motionactionid(from.motionactionid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_achievetitle()) {
      set_achievetitle(from.achievetitle());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cookstate()) {
      mutable_cookstate()->::Cmd::CookStateMsg::MergeFrom(from.cookstate());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::BoothInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapUser::CopyFrom(const MapUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapUser::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void MapUser::Swap(MapUser* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(gender_, other->gender_);
    std::swap(pos_, other->pos_);
    std::swap(dest_, other->dest_);
    attrs_.Swap(&other->attrs_);
    datas_.Swap(&other->datas_);
    buffs_.Swap(&other->buffs_);
    std::swap(skillid_, other->skillid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamname_, other->teamname_);
    std::swap(carrier_, other->carrier_);
    std::swap(chatroom_, other->chatroom_);
    std::swap(handsmaster_, other->handsmaster_);
    speffectdata_.Swap(&other->speffectdata_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildicon_, other->guildicon_);
    std::swap(guildjob_, other->guildjob_);
    std::swap(handnpc_, other->handnpc_);
    std::swap(motionactionid_, other->motionactionid_);
    std::swap(seatid_, other->seatid_);
    givenpcdatas_.Swap(&other->givenpcdatas_);
    std::swap(achievetitle_, other->achievetitle_);
    std::swap(cookstate_, other->cookstate_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapUser_descriptor_;
  metadata.reflection = MapUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMapUser::kCmdFieldNumber;
const int AddMapUser::kParamFieldNumber;
const int AddMapUser::kUsersFieldNumber;
#endif  // !_MSC_VER

AddMapUser::AddMapUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddMapUser)
}

void AddMapUser::InitAsDefaultInstance() {
}

AddMapUser::AddMapUser(const AddMapUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddMapUser)
}

void AddMapUser::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMapUser::~AddMapUser() {
  // @@protoc_insertion_point(destructor:Cmd.AddMapUser)
  SharedDtor();
}

void AddMapUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMapUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMapUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMapUser_descriptor_;
}

const AddMapUser& AddMapUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

AddMapUser* AddMapUser::default_instance_ = NULL;

AddMapUser* AddMapUser::New() const {
  return new AddMapUser;
}

void AddMapUser::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 12;
    param_ = 3;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMapUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddMapUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPUSER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_users;
        break;
      }

      // repeated .Cmd.MapUser users = 3;
      case 3: {
        if (tag == 26) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddMapUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddMapUser)
  return false;
#undef DO_
}

void AddMapUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddMapUser)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPUSER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MapUser users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddMapUser)
}

::google::protobuf::uint8* AddMapUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddMapUser)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPUSER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MapUser users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddMapUser)
  return target;
}

int AddMapUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPUSER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MapUser users = 3;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMapUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMapUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMapUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMapUser::MergeFrom(const AddMapUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMapUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMapUser::CopyFrom(const AddMapUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMapUser::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void AddMapUser::Swap(AddMapUser* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMapUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMapUser_descriptor_;
  metadata.reflection = AddMapUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapNpc::kIdFieldNumber;
const int MapNpc::kNameFieldNumber;
const int MapNpc::kNpcIDFieldNumber;
const int MapNpc::kCharacterFieldNumber;
const int MapNpc::kPosFieldNumber;
const int MapNpc::kDestFieldNumber;
const int MapNpc::kDirFieldNumber;
const int MapNpc::kDatasFieldNumber;
const int MapNpc::kAttrsFieldNumber;
const int MapNpc::kOwnerFieldNumber;
const int MapNpc::kBehaviourFieldNumber;
const int MapNpc::kUniqueidFieldNumber;
const int MapNpc::kWaitactionFieldNumber;
const int MapNpc::kTeamidFieldNumber;
const int MapNpc::kSearchrangeFieldNumber;
const int MapNpc::kBuffsFieldNumber;
const int MapNpc::kMotionactionidFieldNumber;
const int MapNpc::kEffectFieldNumber;
const int MapNpc::kEffectposFieldNumber;
const int MapNpc::kEffectindexFieldNumber;
const int MapNpc::kSpeffectdataFieldNumber;
const int MapNpc::kIsbirthFieldNumber;
const int MapNpc::kEatProgressFieldNumber;
const int MapNpc::kFadeinFieldNumber;
const int MapNpc::kGuildidFieldNumber;
const int MapNpc::kSearchFieldNumber;
const int MapNpc::kBosstypeFieldNumber;
#endif  // !_MSC_VER

MapNpc::MapNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapNpc)
}

void MapNpc::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
  dest_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

MapNpc::MapNpc(const MapNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapNpc)
}

void MapNpc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npcid_ = 0u;
  pos_ = NULL;
  dest_ = NULL;
  dir_ = 0u;
  owner_ = GOOGLE_ULONGLONG(0);
  behaviour_ = 0u;
  uniqueid_ = 0u;
  waitaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_ = 0u;
  searchrange_ = 0u;
  motionactionid_ = 0u;
  effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effectpos_ = 0u;
  effectindex_ = 0u;
  isbirth_ = false;
  eat_progress_ = 0u;
  fadein_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  search_ = 0u;
  bosstype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapNpc::~MapNpc() {
  // @@protoc_insertion_point(destructor:Cmd.MapNpc)
  SharedDtor();
}

void MapNpc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete waitaction_;
  }
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effect_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete dest_;
  }
}

void MapNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapNpc_descriptor_;
}

const MapNpc& MapNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

MapNpc* MapNpc::default_instance_ = NULL;

MapNpc* MapNpc::New() const {
  return new MapNpc;
}

void MapNpc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapNpc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(npcid_, dir_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    if (has_dest()) {
      if (dest_ != NULL) dest_->::Cmd::ScenePos::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32256) {
    ZR_(owner_, uniqueid_);
    ZR_(teamid_, searchrange_);
    if (has_waitaction()) {
      if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        waitaction_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 15663104) {
    ZR_(motionactionid_, effectpos_);
    ZR_(effectindex_, fadein_);
    if (has_effect()) {
      if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effect_->clear();
      }
    }
  }
  ZR_(guildid_, bosstype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  character_.Clear();
  datas_.Clear();
  attrs_.Clear();
  buffs_.Clear();
  speffectdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcID;
        break;
      }

      // optional uint32 npcID = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_character;
        break;
      }

      // repeated uint32 character = 5;
      case 5: {
        if (tag == 40) {
         parse_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_character())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_character())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_character;
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 6;
      case 6: {
        if (tag == 50) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dest;
        break;
      }

      // optional .Cmd.ScenePos dest = 7;
      case 7: {
        if (tag == 58) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 8;
      case 8: {
        if (tag == 64) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 9;
      case 9: {
        if (tag == 74) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_datas;
        if (input->ExpectTag(82)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 10;
      case 10: {
        if (tag == 82) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_attrs;
        if (input->ExpectTag(88)) goto parse_owner;
        break;
      }

      // optional uint64 owner = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_behaviour;
        break;
      }

      // optional uint32 behaviour = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_behaviour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &behaviour_)));
          set_has_behaviour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_uniqueid;
        break;
      }

      // optional uint32 uniqueid = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_waitaction;
        break;
      }

      // optional string waitaction = 14;
      case 14: {
        if (tag == 114) {
         parse_waitaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waitaction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->waitaction().data(), this->waitaction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "waitaction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_searchrange;
        break;
      }

      // optional uint32 searchrange = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_searchrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &searchrange_)));
          set_has_searchrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_buffs;
        break;
      }

      // repeated .Cmd.BufferData buffs = 17;
      case 17: {
        if (tag == 138) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_buffs;
        if (input->ExpectTag(144)) goto parse_motionactionid;
        break;
      }

      // optional uint32 motionactionid = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_motionactionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motionactionid_)));
          set_has_motionactionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_effect;
        break;
      }

      // optional string effect = 19;
      case 19: {
        if (tag == 154) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_effectpos;
        break;
      }

      // optional uint32 effectpos = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_effectpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectpos_)));
          set_has_effectpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_effectindex;
        break;
      }

      // optional uint32 effectindex = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_effectindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectindex_)));
          set_has_effectindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_speffectdata;
        break;
      }

      // repeated .Cmd.SpEffectData speffectdata = 22;
      case 22: {
        if (tag == 178) {
         parse_speffectdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speffectdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_speffectdata;
        if (input->ExpectTag(184)) goto parse_isbirth;
        break;
      }

      // optional bool isbirth = 23 [default = false];
      case 23: {
        if (tag == 184) {
         parse_isbirth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbirth_)));
          set_has_isbirth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_eat_progress;
        break;
      }

      // optional uint32 eat_progress = 24;
      case 24: {
        if (tag == 192) {
         parse_eat_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eat_progress_)));
          set_has_eat_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_fadein;
        break;
      }

      // optional uint32 fadein = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_fadein:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fadein_)));
          set_has_fadein();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_search;
        break;
      }

      // optional uint32 search = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_)));
          set_has_search();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_bosstype;
        break;
      }

      // optional uint32 bosstype = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_bosstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapNpc)
  return false;
#undef DO_
}

void MapNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapNpc)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 npcID = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }

  // repeated uint32 character = 5;
  for (int i = 0; i < this->character_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->character(i), output);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos(), output);
  }

  // optional .Cmd.ScenePos dest = 7;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dest(), output);
  }

  // optional uint32 dir = 8;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dir(), output);
  }

  // repeated .Cmd.UserData datas = 9;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr attrs = 10;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attrs(i), output);
  }

  // optional uint64 owner = 11 [default = 0];
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->owner(), output);
  }

  // optional uint32 behaviour = 12 [default = 0];
  if (has_behaviour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->behaviour(), output);
  }

  // optional uint32 uniqueid = 13 [default = 0];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->uniqueid(), output);
  }

  // optional string waitaction = 14;
  if (has_waitaction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waitaction().data(), this->waitaction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waitaction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->waitaction(), output);
  }

  // optional uint32 teamid = 15 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->teamid(), output);
  }

  // optional uint32 searchrange = 16 [default = 0];
  if (has_searchrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->searchrange(), output);
  }

  // repeated .Cmd.BufferData buffs = 17;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->buffs(i), output);
  }

  // optional uint32 motionactionid = 18 [default = 0];
  if (has_motionactionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->motionactionid(), output);
  }

  // optional string effect = 19;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->effect(), output);
  }

  // optional uint32 effectpos = 20 [default = 0];
  if (has_effectpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->effectpos(), output);
  }

  // optional uint32 effectindex = 21 [default = 0];
  if (has_effectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->effectindex(), output);
  }

  // repeated .Cmd.SpEffectData speffectdata = 22;
  for (int i = 0; i < this->speffectdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->speffectdata(i), output);
  }

  // optional bool isbirth = 23 [default = false];
  if (has_isbirth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isbirth(), output);
  }

  // optional uint32 eat_progress = 24;
  if (has_eat_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->eat_progress(), output);
  }

  // optional uint32 fadein = 25 [default = 0];
  if (has_fadein()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->fadein(), output);
  }

  // optional uint64 guildid = 26 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->guildid(), output);
  }

  // optional uint32 search = 27 [default = 0];
  if (has_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->search(), output);
  }

  // optional uint32 bosstype = 28 [default = 0];
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->bosstype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapNpc)
}

::google::protobuf::uint8* MapNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapNpc)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 npcID = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }

  // repeated uint32 character = 5;
  for (int i = 0; i < this->character_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->character(i), target);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos(), target);
  }

  // optional .Cmd.ScenePos dest = 7;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dest(), target);
  }

  // optional uint32 dir = 8;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dir(), target);
  }

  // repeated .Cmd.UserData datas = 9;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr attrs = 10;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attrs(i), target);
  }

  // optional uint64 owner = 11 [default = 0];
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->owner(), target);
  }

  // optional uint32 behaviour = 12 [default = 0];
  if (has_behaviour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->behaviour(), target);
  }

  // optional uint32 uniqueid = 13 [default = 0];
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->uniqueid(), target);
  }

  // optional string waitaction = 14;
  if (has_waitaction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waitaction().data(), this->waitaction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waitaction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->waitaction(), target);
  }

  // optional uint32 teamid = 15 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->teamid(), target);
  }

  // optional uint32 searchrange = 16 [default = 0];
  if (has_searchrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->searchrange(), target);
  }

  // repeated .Cmd.BufferData buffs = 17;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->buffs(i), target);
  }

  // optional uint32 motionactionid = 18 [default = 0];
  if (has_motionactionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->motionactionid(), target);
  }

  // optional string effect = 19;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->effect(), target);
  }

  // optional uint32 effectpos = 20 [default = 0];
  if (has_effectpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->effectpos(), target);
  }

  // optional uint32 effectindex = 21 [default = 0];
  if (has_effectindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->effectindex(), target);
  }

  // repeated .Cmd.SpEffectData speffectdata = 22;
  for (int i = 0; i < this->speffectdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->speffectdata(i), target);
  }

  // optional bool isbirth = 23 [default = false];
  if (has_isbirth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isbirth(), target);
  }

  // optional uint32 eat_progress = 24;
  if (has_eat_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->eat_progress(), target);
  }

  // optional uint32 fadein = 25 [default = 0];
  if (has_fadein()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->fadein(), target);
  }

  // optional uint64 guildid = 26 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->guildid(), target);
  }

  // optional uint32 search = 27 [default = 0];
  if (has_search()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->search(), target);
  }

  // optional uint32 bosstype = 28 [default = 0];
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->bosstype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapNpc)
  return target;
}

int MapNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 npcID = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional .Cmd.ScenePos pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Cmd.ScenePos dest = 7;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

    // optional uint32 dir = 8;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint64 owner = 11 [default = 0];
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner());
    }

    // optional uint32 behaviour = 12 [default = 0];
    if (has_behaviour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->behaviour());
    }

    // optional uint32 uniqueid = 13 [default = 0];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueid());
    }

    // optional string waitaction = 14;
    if (has_waitaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->waitaction());
    }

    // optional uint32 teamid = 15 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 searchrange = 16 [default = 0];
    if (has_searchrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->searchrange());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 motionactionid = 18 [default = 0];
    if (has_motionactionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motionactionid());
    }

    // optional string effect = 19;
    if (has_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect());
    }

    // optional uint32 effectpos = 20 [default = 0];
    if (has_effectpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectpos());
    }

    // optional uint32 effectindex = 21 [default = 0];
    if (has_effectindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectindex());
    }

    // optional bool isbirth = 23 [default = false];
    if (has_isbirth()) {
      total_size += 2 + 1;
    }

    // optional uint32 eat_progress = 24;
    if (has_eat_progress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eat_progress());
    }

    // optional uint32 fadein = 25 [default = 0];
    if (has_fadein()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fadein());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 guildid = 26 [default = 0];
    if (has_guildid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 search = 27 [default = 0];
    if (has_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search());
    }

    // optional uint32 bosstype = 28 [default = 0];
    if (has_bosstype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosstype());
    }

  }
  // repeated uint32 character = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->character_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->character(i));
    }
    total_size += 1 * this->character_size() + data_size;
  }

  // repeated .Cmd.UserData datas = 9;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr attrs = 10;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.BufferData buffs = 17;
  total_size += 2 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  // repeated .Cmd.SpEffectData speffectdata = 22;
  total_size += 2 * this->speffectdata_size();
  for (int i = 0; i < this->speffectdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speffectdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapNpc::MergeFrom(const MapNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  character_.MergeFrom(from.character_);
  datas_.MergeFrom(from.datas_);
  attrs_.MergeFrom(from.attrs_);
  buffs_.MergeFrom(from.buffs_);
  speffectdata_.MergeFrom(from.speffectdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_dest()) {
      mutable_dest()->::Cmd::ScenePos::MergeFrom(from.dest());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_behaviour()) {
      set_behaviour(from.behaviour());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_waitaction()) {
      set_waitaction(from.waitaction());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_searchrange()) {
      set_searchrange(from.searchrange());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_motionactionid()) {
      set_motionactionid(from.motionactionid());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_effectpos()) {
      set_effectpos(from.effectpos());
    }
    if (from.has_effectindex()) {
      set_effectindex(from.effectindex());
    }
    if (from.has_isbirth()) {
      set_isbirth(from.isbirth());
    }
    if (from.has_eat_progress()) {
      set_eat_progress(from.eat_progress());
    }
    if (from.has_fadein()) {
      set_fadein(from.fadein());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_search()) {
      set_search(from.search());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapNpc::CopyFrom(const MapNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapNpc::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void MapNpc::Swap(MapNpc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(npcid_, other->npcid_);
    character_.Swap(&other->character_);
    std::swap(pos_, other->pos_);
    std::swap(dest_, other->dest_);
    std::swap(dir_, other->dir_);
    datas_.Swap(&other->datas_);
    attrs_.Swap(&other->attrs_);
    std::swap(owner_, other->owner_);
    std::swap(behaviour_, other->behaviour_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(waitaction_, other->waitaction_);
    std::swap(teamid_, other->teamid_);
    std::swap(searchrange_, other->searchrange_);
    buffs_.Swap(&other->buffs_);
    std::swap(motionactionid_, other->motionactionid_);
    std::swap(effect_, other->effect_);
    std::swap(effectpos_, other->effectpos_);
    std::swap(effectindex_, other->effectindex_);
    speffectdata_.Swap(&other->speffectdata_);
    std::swap(isbirth_, other->isbirth_);
    std::swap(eat_progress_, other->eat_progress_);
    std::swap(fadein_, other->fadein_);
    std::swap(guildid_, other->guildid_);
    std::swap(search_, other->search_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapNpc_descriptor_;
  metadata.reflection = MapNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMapNpc::kCmdFieldNumber;
const int AddMapNpc::kParamFieldNumber;
const int AddMapNpc::kNpcsFieldNumber;
#endif  // !_MSC_VER

AddMapNpc::AddMapNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddMapNpc)
}

void AddMapNpc::InitAsDefaultInstance() {
}

AddMapNpc::AddMapNpc(const AddMapNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddMapNpc)
}

void AddMapNpc::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMapNpc::~AddMapNpc() {
  // @@protoc_insertion_point(destructor:Cmd.AddMapNpc)
  SharedDtor();
}

void AddMapNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMapNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMapNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMapNpc_descriptor_;
}

const AddMapNpc& AddMapNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

AddMapNpc* AddMapNpc::default_instance_ = NULL;

AddMapNpc* AddMapNpc::New() const {
  return new AddMapNpc;
}

void AddMapNpc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 12;
    param_ = 4;
  }
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMapNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddMapNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPNPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcs;
        break;
      }

      // repeated .Cmd.MapNpc npcs = 3;
      case 3: {
        if (tag == 26) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddMapNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddMapNpc)
  return false;
#undef DO_
}

void AddMapNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddMapNpc)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPNPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MapNpc npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npcs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddMapNpc)
}

::google::protobuf::uint8* AddMapNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddMapNpc)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPNPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MapNpc npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npcs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddMapNpc)
  return target;
}

int AddMapNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPNPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MapNpc npcs = 3;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMapNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMapNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMapNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMapNpc::MergeFrom(const AddMapNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMapNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMapNpc::CopyFrom(const AddMapNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMapNpc::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->npcs())) return false;
  return true;
}

void AddMapNpc::Swap(AddMapNpc* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    npcs_.Swap(&other->npcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMapNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMapNpc_descriptor_;
  metadata.reflection = AddMapNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapTrap::kIdFieldNumber;
const int MapTrap::kSkillIDFieldNumber;
const int MapTrap::kPosFieldNumber;
const int MapTrap::kDirFieldNumber;
const int MapTrap::kMasteridFieldNumber;
#endif  // !_MSC_VER

MapTrap::MapTrap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapTrap)
}

void MapTrap::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

MapTrap::MapTrap(const MapTrap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapTrap)
}

void MapTrap::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  pos_ = NULL;
  dir_ = 0u;
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapTrap::~MapTrap() {
  // @@protoc_insertion_point(destructor:Cmd.MapTrap)
  SharedDtor();
}

void MapTrap::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MapTrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapTrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapTrap_descriptor_;
}

const MapTrap& MapTrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

MapTrap* MapTrap::default_instance_ = NULL;

MapTrap* MapTrap::New() const {
  return new MapTrap;
}

void MapTrap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapTrap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(skillid_, masterid_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapTrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapTrap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 2;
      case 2: {
        if (tag == 16) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 4;
      case 4: {
        if (tag == 32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 5;
      case 5: {
        if (tag == 40) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapTrap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapTrap)
  return false;
#undef DO_
}

void MapTrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapTrap)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional uint32 dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dir(), output);
  }

  // optional uint64 masterid = 5;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapTrap)
}

::google::protobuf::uint8* MapTrap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapTrap)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional uint32 dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dir(), target);
  }

  // optional uint64 masterid = 5;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapTrap)
  return target;
}

int MapTrap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint64 masterid = 5;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapTrap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapTrap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapTrap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapTrap::MergeFrom(const MapTrap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapTrap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapTrap::CopyFrom(const MapTrap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTrap::IsInitialized() const {

  return true;
}

void MapTrap::Swap(MapTrap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapTrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapTrap_descriptor_;
  metadata.reflection = MapTrap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMapTrap::kCmdFieldNumber;
const int AddMapTrap::kParamFieldNumber;
const int AddMapTrap::kTrapsFieldNumber;
#endif  // !_MSC_VER

AddMapTrap::AddMapTrap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddMapTrap)
}

void AddMapTrap::InitAsDefaultInstance() {
}

AddMapTrap::AddMapTrap(const AddMapTrap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddMapTrap)
}

void AddMapTrap::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMapTrap::~AddMapTrap() {
  // @@protoc_insertion_point(destructor:Cmd.AddMapTrap)
  SharedDtor();
}

void AddMapTrap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMapTrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMapTrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMapTrap_descriptor_;
}

const AddMapTrap& AddMapTrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

AddMapTrap* AddMapTrap::default_instance_ = NULL;

AddMapTrap* AddMapTrap::New() const {
  return new AddMapTrap;
}

void AddMapTrap::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 12;
    param_ = 5;
  }
  traps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMapTrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddMapTrap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPTRAP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_traps;
        break;
      }

      // repeated .Cmd.MapTrap traps = 3;
      case 3: {
        if (tag == 26) {
         parse_traps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_traps;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddMapTrap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddMapTrap)
  return false;
#undef DO_
}

void AddMapTrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddMapTrap)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPTRAP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MapTrap traps = 3;
  for (int i = 0; i < this->traps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->traps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddMapTrap)
}

::google::protobuf::uint8* AddMapTrap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddMapTrap)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPTRAP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MapTrap traps = 3;
  for (int i = 0; i < this->traps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->traps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddMapTrap)
  return target;
}

int AddMapTrap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPTRAP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MapTrap traps = 3;
  total_size += 1 * this->traps_size();
  for (int i = 0; i < this->traps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMapTrap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMapTrap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMapTrap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMapTrap::MergeFrom(const AddMapTrap& from) {
  GOOGLE_CHECK_NE(&from, this);
  traps_.MergeFrom(from.traps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMapTrap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMapTrap::CopyFrom(const AddMapTrap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMapTrap::IsInitialized() const {

  return true;
}

void AddMapTrap::Swap(AddMapTrap* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    traps_.Swap(&other->traps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMapTrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMapTrap_descriptor_;
  metadata.reflection = AddMapTrap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapAct::kIdFieldNumber;
const int MapAct::kRangeFieldNumber;
const int MapAct::kMasteridFieldNumber;
const int MapAct::kTypeFieldNumber;
const int MapAct::kActvalueFieldNumber;
const int MapAct::kPosFieldNumber;
#endif  // !_MSC_VER

MapAct::MapAct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapAct)
}

void MapAct::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

MapAct::MapAct(const MapAct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapAct)
}

void MapAct::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  range_ = 0u;
  masterid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  actvalue_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapAct::~MapAct() {
  // @@protoc_insertion_point(destructor:Cmd.MapAct)
  SharedDtor();
}

void MapAct::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MapAct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapAct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapAct_descriptor_;
}

const MapAct& MapAct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

MapAct* MapAct::default_instance_ = NULL;

MapAct* MapAct::New() const {
  return new MapAct;
}

void MapAct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapAct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, type_);
    actvalue_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapAct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapAct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_range;
        break;
      }

      // optional uint32 range = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EActType type = 4 [default = EACTTYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EActType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EActType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_actvalue;
        break;
      }

      // optional uint32 actvalue = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_actvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actvalue_)));
          set_has_actvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 6;
      case 6: {
        if (tag == 50) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapAct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapAct)
  return false;
#undef DO_
}

void MapAct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapAct)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 range = 2 [default = 0];
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional .Cmd.EActType type = 4 [default = EACTTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint32 actvalue = 5 [default = 0];
  if (has_actvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->actvalue(), output);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapAct)
}

::google::protobuf::uint8* MapAct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapAct)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 range = 2 [default = 0];
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional .Cmd.EActType type = 4 [default = EACTTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint32 actvalue = 5 [default = 0];
  if (has_actvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->actvalue(), target);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapAct)
  return target;
}

int MapAct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 range = 2 [default = 0];
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional .Cmd.EActType type = 4 [default = EACTTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 actvalue = 5 [default = 0];
    if (has_actvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actvalue());
    }

    // optional .Cmd.ScenePos pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapAct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapAct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapAct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapAct::MergeFrom(const MapAct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_actvalue()) {
      set_actvalue(from.actvalue());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapAct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapAct::CopyFrom(const MapAct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapAct::IsInitialized() const {

  return true;
}

void MapAct::Swap(MapAct* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(range_, other->range_);
    std::swap(masterid_, other->masterid_);
    std::swap(type_, other->type_);
    std::swap(actvalue_, other->actvalue_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapAct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapAct_descriptor_;
  metadata.reflection = MapAct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMapAct::kCmdFieldNumber;
const int AddMapAct::kParamFieldNumber;
const int AddMapAct::kActsFieldNumber;
#endif  // !_MSC_VER

AddMapAct::AddMapAct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddMapAct)
}

void AddMapAct::InitAsDefaultInstance() {
}

AddMapAct::AddMapAct(const AddMapAct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddMapAct)
}

void AddMapAct::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMapAct::~AddMapAct() {
  // @@protoc_insertion_point(destructor:Cmd.AddMapAct)
  SharedDtor();
}

void AddMapAct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMapAct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMapAct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMapAct_descriptor_;
}

const AddMapAct& AddMapAct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

AddMapAct* AddMapAct::default_instance_ = NULL;

AddMapAct* AddMapAct::New() const {
  return new AddMapAct;
}

void AddMapAct::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 12;
    param_ = 6;
  }
  acts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMapAct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddMapAct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPACT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_acts;
        break;
      }

      // repeated .Cmd.MapAct acts = 3;
      case 3: {
        if (tag == 26) {
         parse_acts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_acts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddMapAct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddMapAct)
  return false;
#undef DO_
}

void AddMapAct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddMapAct)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPACT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MapAct acts = 3;
  for (int i = 0; i < this->acts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->acts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddMapAct)
}

::google::protobuf::uint8* AddMapAct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddMapAct)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPACT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MapAct acts = 3;
  for (int i = 0; i < this->acts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->acts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddMapAct)
  return target;
}

int AddMapAct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPACT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MapAct acts = 3;
  total_size += 1 * this->acts_size();
  for (int i = 0; i < this->acts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMapAct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMapAct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMapAct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMapAct::MergeFrom(const AddMapAct& from) {
  GOOGLE_CHECK_NE(&from, this);
  acts_.MergeFrom(from.acts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMapAct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMapAct::CopyFrom(const AddMapAct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMapAct::IsInitialized() const {

  return true;
}

void AddMapAct::Swap(AddMapAct* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    acts_.Swap(&other->acts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMapAct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMapAct_descriptor_;
  metadata.reflection = AddMapAct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitPointState::kCmdFieldNumber;
const int ExitPointState::kParamFieldNumber;
const int ExitPointState::kExitidFieldNumber;
const int ExitPointState::kVisibleFieldNumber;
#endif  // !_MSC_VER

ExitPointState::ExitPointState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExitPointState)
}

void ExitPointState::InitAsDefaultInstance() {
}

ExitPointState::ExitPointState(const ExitPointState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExitPointState)
}

void ExitPointState::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 7;
  exitid_ = 0u;
  visible_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitPointState::~ExitPointState() {
  // @@protoc_insertion_point(destructor:Cmd.ExitPointState)
  SharedDtor();
}

void ExitPointState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitPointState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitPointState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitPointState_descriptor_;
}

const ExitPointState& ExitPointState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

ExitPointState* ExitPointState::default_instance_ = NULL;

ExitPointState* ExitPointState::New() const {
  return new ExitPointState;
}

void ExitPointState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitPointState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(exitid_, visible_);
    cmd_ = 12;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitPointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExitPointState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_EXIT_POINT_STATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exitid;
        break;
      }

      // optional uint32 exitid = 3;
      case 3: {
        if (tag == 24) {
         parse_exitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exitid_)));
          set_has_exitid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_visible;
        break;
      }

      // optional uint32 visible = 4;
      case 4: {
        if (tag == 32) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExitPointState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExitPointState)
  return false;
#undef DO_
}

void ExitPointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExitPointState)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_EXIT_POINT_STATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 exitid = 3;
  if (has_exitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exitid(), output);
  }

  // optional uint32 visible = 4;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExitPointState)
}

::google::protobuf::uint8* ExitPointState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExitPointState)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_EXIT_POINT_STATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 exitid = 3;
  if (has_exitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exitid(), target);
  }

  // optional uint32 visible = 4;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExitPointState)
  return target;
}

int ExitPointState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_EXIT_POINT_STATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 exitid = 3;
    if (has_exitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exitid());
    }

    // optional uint32 visible = 4;
    if (has_visible()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visible());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitPointState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitPointState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitPointState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitPointState::MergeFrom(const ExitPointState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_exitid()) {
      set_exitid(from.exitid());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitPointState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitPointState::CopyFrom(const ExitPointState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitPointState::IsInitialized() const {

  return true;
}

void ExitPointState::Swap(ExitPointState* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(exitid_, other->exitid_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitPointState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitPointState_descriptor_;
  metadata.reflection = ExitPointState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapCmdEnd::kCmdFieldNumber;
const int MapCmdEnd::kParamFieldNumber;
#endif  // !_MSC_VER

MapCmdEnd::MapCmdEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapCmdEnd)
}

void MapCmdEnd::InitAsDefaultInstance() {
}

MapCmdEnd::MapCmdEnd(const MapCmdEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapCmdEnd)
}

void MapCmdEnd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapCmdEnd::~MapCmdEnd() {
  // @@protoc_insertion_point(destructor:Cmd.MapCmdEnd)
  SharedDtor();
}

void MapCmdEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapCmdEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapCmdEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapCmdEnd_descriptor_;
}

const MapCmdEnd& MapCmdEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

MapCmdEnd* MapCmdEnd::default_instance_ = NULL;

MapCmdEnd* MapCmdEnd::New() const {
  return new MapCmdEnd;
}

void MapCmdEnd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 12;
    param_ = 8;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapCmdEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapCmdEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_MAP_CMD_END];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapCmdEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapCmdEnd)
  return false;
#undef DO_
}

void MapCmdEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapCmdEnd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_MAP_CMD_END];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapCmdEnd)
}

::google::protobuf::uint8* MapCmdEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapCmdEnd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_MAP_CMD_END];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapCmdEnd)
  return target;
}

int MapCmdEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_MAP_CMD_END];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapCmdEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapCmdEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapCmdEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapCmdEnd::MergeFrom(const MapCmdEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapCmdEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCmdEnd::CopyFrom(const MapCmdEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCmdEnd::IsInitialized() const {

  return true;
}

void MapCmdEnd::Swap(MapCmdEnd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapCmdEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapCmdEnd_descriptor_;
  metadata.reflection = MapCmdEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcSearchRangeCmd::kCmdFieldNumber;
const int NpcSearchRangeCmd::kParamFieldNumber;
const int NpcSearchRangeCmd::kIdFieldNumber;
const int NpcSearchRangeCmd::kRangeFieldNumber;
#endif  // !_MSC_VER

NpcSearchRangeCmd::NpcSearchRangeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NpcSearchRangeCmd)
}

void NpcSearchRangeCmd::InitAsDefaultInstance() {
}

NpcSearchRangeCmd::NpcSearchRangeCmd(const NpcSearchRangeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NpcSearchRangeCmd)
}

void NpcSearchRangeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 9;
  id_ = GOOGLE_ULONGLONG(0);
  range_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcSearchRangeCmd::~NpcSearchRangeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NpcSearchRangeCmd)
  SharedDtor();
}

void NpcSearchRangeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcSearchRangeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcSearchRangeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcSearchRangeCmd_descriptor_;
}

const NpcSearchRangeCmd& NpcSearchRangeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

NpcSearchRangeCmd* NpcSearchRangeCmd::default_instance_ = NULL;

NpcSearchRangeCmd* NpcSearchRangeCmd::New() const {
  return new NpcSearchRangeCmd;
}

void NpcSearchRangeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcSearchRangeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, range_);
    cmd_ = 12;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcSearchRangeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NpcSearchRangeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_NPC_SEARCH_RANGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_range;
        break;
      }

      // optional uint32 range = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NpcSearchRangeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NpcSearchRangeCmd)
  return false;
#undef DO_
}

void NpcSearchRangeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NpcSearchRangeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_NPC_SEARCH_RANGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint32 range = 4 [default = 0];
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NpcSearchRangeCmd)
}

::google::protobuf::uint8* NpcSearchRangeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NpcSearchRangeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_NPC_SEARCH_RANGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint32 range = 4 [default = 0];
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NpcSearchRangeCmd)
  return target;
}

int NpcSearchRangeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_NPC_SEARCH_RANGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 range = 4 [default = 0];
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcSearchRangeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcSearchRangeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcSearchRangeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcSearchRangeCmd::MergeFrom(const NpcSearchRangeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcSearchRangeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcSearchRangeCmd::CopyFrom(const NpcSearchRangeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcSearchRangeCmd::IsInitialized() const {

  return true;
}

void NpcSearchRangeCmd::Swap(NpcSearchRangeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcSearchRangeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcSearchRangeCmd_descriptor_;
  metadata.reflection = NpcSearchRangeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserHandsCmd::kCmdFieldNumber;
const int UserHandsCmd::kParamFieldNumber;
const int UserHandsCmd::kPlayer1FieldNumber;
const int UserHandsCmd::kPlayer2FieldNumber;
const int UserHandsCmd::kIsaddFieldNumber;
#endif  // !_MSC_VER

UserHandsCmd::UserHandsCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserHandsCmd)
}

void UserHandsCmd::InitAsDefaultInstance() {
}

UserHandsCmd::UserHandsCmd(const UserHandsCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserHandsCmd)
}

void UserHandsCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 10;
  player1_ = GOOGLE_ULONGLONG(0);
  player2_ = GOOGLE_ULONGLONG(0);
  isadd_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserHandsCmd::~UserHandsCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserHandsCmd)
  SharedDtor();
}

void UserHandsCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserHandsCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHandsCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHandsCmd_descriptor_;
}

const UserHandsCmd& UserHandsCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

UserHandsCmd* UserHandsCmd::default_instance_ = NULL;

UserHandsCmd* UserHandsCmd::New() const {
  return new UserHandsCmd;
}

void UserHandsCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserHandsCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player1_, player2_);
    cmd_ = 12;
    param_ = 10;
    isadd_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserHandsCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserHandsCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HANDS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player1;
        break;
      }

      // optional uint64 player1 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_player1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player1_)));
          set_has_player1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player2;
        break;
      }

      // optional uint64 player2 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_player2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player2_)));
          set_has_player2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isadd;
        break;
      }

      // optional uint32 isadd = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_isadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserHandsCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserHandsCmd)
  return false;
#undef DO_
}

void UserHandsCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserHandsCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HANDS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 player1 = 3 [default = 0];
  if (has_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player1(), output);
  }

  // optional uint64 player2 = 4 [default = 0];
  if (has_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player2(), output);
  }

  // optional uint32 isadd = 5 [default = 1];
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserHandsCmd)
}

::google::protobuf::uint8* UserHandsCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserHandsCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HANDS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 player1 = 3 [default = 0];
  if (has_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player1(), target);
  }

  // optional uint64 player2 = 4 [default = 0];
  if (has_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player2(), target);
  }

  // optional uint32 isadd = 5 [default = 1];
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserHandsCmd)
  return target;
}

int UserHandsCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HANDS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 player1 = 3 [default = 0];
    if (has_player1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player1());
    }

    // optional uint64 player2 = 4 [default = 0];
    if (has_player2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player2());
    }

    // optional uint32 isadd = 5 [default = 1];
    if (has_isadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isadd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHandsCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserHandsCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserHandsCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserHandsCmd::MergeFrom(const UserHandsCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_player1()) {
      set_player1(from.player1());
    }
    if (from.has_player2()) {
      set_player2(from.player2());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserHandsCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHandsCmd::CopyFrom(const UserHandsCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHandsCmd::IsInitialized() const {

  return true;
}

void UserHandsCmd::Swap(UserHandsCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(player1_, other->player1_);
    std::swap(player2_, other->player2_);
    std::swap(isadd_, other->isadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserHandsCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserHandsCmd_descriptor_;
  metadata.reflection = UserHandsCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpEffectCmd::kCmdFieldNumber;
const int SpEffectCmd::kParamFieldNumber;
const int SpEffectCmd::kSenderidFieldNumber;
const int SpEffectCmd::kDataFieldNumber;
const int SpEffectCmd::kIsaddFieldNumber;
#endif  // !_MSC_VER

SpEffectCmd::SpEffectCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SpEffectCmd)
}

void SpEffectCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::SpEffectData*>(&::Cmd::SpEffectData::default_instance());
}

SpEffectCmd::SpEffectCmd(const SpEffectCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SpEffectCmd)
}

void SpEffectCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 11;
  senderid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  isadd_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpEffectCmd::~SpEffectCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SpEffectCmd)
  SharedDtor();
}

void SpEffectCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void SpEffectCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpEffectCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpEffectCmd_descriptor_;
}

const SpEffectCmd& SpEffectCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

SpEffectCmd* SpEffectCmd::default_instance_ = NULL;

SpEffectCmd* SpEffectCmd::New() const {
  return new SpEffectCmd;
}

void SpEffectCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 12;
    param_ = 11;
    senderid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::SpEffectData::Clear();
    }
    isadd_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpEffectCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SpEffectCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_SPEFFECT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_senderid;
        break;
      }

      // optional uint64 senderid = 3;
      case 3: {
        if (tag == 24) {
         parse_senderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.SpEffectData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isadd;
        break;
      }

      // optional bool isadd = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_isadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SpEffectCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SpEffectCmd)
  return false;
#undef DO_
}

void SpEffectCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SpEffectCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_SPEFFECT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 senderid = 3;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->senderid(), output);
  }

  // optional .Cmd.SpEffectData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional bool isadd = 5 [default = true];
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SpEffectCmd)
}

::google::protobuf::uint8* SpEffectCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SpEffectCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_SPEFFECT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 senderid = 3;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->senderid(), target);
  }

  // optional .Cmd.SpEffectData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional bool isadd = 5 [default = true];
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SpEffectCmd)
  return target;
}

int SpEffectCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_SPEFFECT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 senderid = 3;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderid());
    }

    // optional .Cmd.SpEffectData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional bool isadd = 5 [default = true];
    if (has_isadd()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpEffectCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpEffectCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpEffectCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpEffectCmd::MergeFrom(const SpEffectCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::SpEffectData::MergeFrom(from.data());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpEffectCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpEffectCmd::CopyFrom(const SpEffectCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpEffectCmd::IsInitialized() const {

  return true;
}

void SpEffectCmd::Swap(SpEffectCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(senderid_, other->senderid_);
    std::swap(data_, other->data_);
    std::swap(isadd_, other->isadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpEffectCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpEffectCmd_descriptor_;
  metadata.reflection = SpEffectCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserHandNpcCmd::kCmdFieldNumber;
const int UserHandNpcCmd::kParamFieldNumber;
const int UserHandNpcCmd::kDataFieldNumber;
const int UserHandNpcCmd::kIshandFieldNumber;
const int UserHandNpcCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

UserHandNpcCmd::UserHandNpcCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserHandNpcCmd)
}

void UserHandNpcCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::HandNpcData*>(&::Cmd::HandNpcData::default_instance());
}

UserHandNpcCmd::UserHandNpcCmd(const UserHandNpcCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserHandNpcCmd)
}

void UserHandNpcCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 12;
  data_ = NULL;
  ishand_ = true;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserHandNpcCmd::~UserHandNpcCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserHandNpcCmd)
  SharedDtor();
}

void UserHandNpcCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UserHandNpcCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHandNpcCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHandNpcCmd_descriptor_;
}

const UserHandNpcCmd& UserHandNpcCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

UserHandNpcCmd* UserHandNpcCmd::default_instance_ = NULL;

UserHandNpcCmd* UserHandNpcCmd::New() const {
  return new UserHandNpcCmd;
}

void UserHandNpcCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 12;
    param_ = 12;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::HandNpcData::Clear();
    }
    ishand_ = true;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserHandNpcCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserHandNpcCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HAND_NPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.HandNpcData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ishand;
        break;
      }

      // optional bool ishand = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_ishand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishand_)));
          set_has_ishand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserHandNpcCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserHandNpcCmd)
  return false;
#undef DO_
}

void UserHandNpcCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserHandNpcCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HAND_NPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.HandNpcData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional bool ishand = 4 [default = true];
  if (has_ishand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ishand(), output);
  }

  // optional uint64 userid = 5 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserHandNpcCmd)
}

::google::protobuf::uint8* UserHandNpcCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserHandNpcCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HAND_NPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.HandNpcData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional bool ishand = 4 [default = true];
  if (has_ishand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ishand(), target);
  }

  // optional uint64 userid = 5 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserHandNpcCmd)
  return target;
}

int UserHandNpcCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HAND_NPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.HandNpcData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional bool ishand = 4 [default = true];
    if (has_ishand()) {
      total_size += 1 + 1;
    }

    // optional uint64 userid = 5 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHandNpcCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserHandNpcCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserHandNpcCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserHandNpcCmd::MergeFrom(const UserHandNpcCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::HandNpcData::MergeFrom(from.data());
    }
    if (from.has_ishand()) {
      set_ishand(from.ishand());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserHandNpcCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHandNpcCmd::CopyFrom(const UserHandNpcCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHandNpcCmd::IsInitialized() const {

  return true;
}

void UserHandNpcCmd::Swap(UserHandNpcCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(ishand_, other->ishand_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserHandNpcCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserHandNpcCmd_descriptor_;
  metadata.reflection = UserHandNpcCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GingerBreadNpcCmd::kCmdFieldNumber;
const int GingerBreadNpcCmd::kParamFieldNumber;
const int GingerBreadNpcCmd::kDataFieldNumber;
const int GingerBreadNpcCmd::kIsaddFieldNumber;
const int GingerBreadNpcCmd::kUseridFieldNumber;
const int GingerBreadNpcCmd::kBornposFieldNumber;
#endif  // !_MSC_VER

GingerBreadNpcCmd::GingerBreadNpcCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GingerBreadNpcCmd)
}

void GingerBreadNpcCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::GingerBreadNpcData*>(&::Cmd::GingerBreadNpcData::default_instance());
  bornpos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

GingerBreadNpcCmd::GingerBreadNpcCmd(const GingerBreadNpcCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GingerBreadNpcCmd)
}

void GingerBreadNpcCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 13;
  data_ = NULL;
  isadd_ = true;
  userid_ = GOOGLE_ULONGLONG(0);
  bornpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GingerBreadNpcCmd::~GingerBreadNpcCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GingerBreadNpcCmd)
  SharedDtor();
}

void GingerBreadNpcCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete bornpos_;
  }
}

void GingerBreadNpcCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GingerBreadNpcCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GingerBreadNpcCmd_descriptor_;
}

const GingerBreadNpcCmd& GingerBreadNpcCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

GingerBreadNpcCmd* GingerBreadNpcCmd::default_instance_ = NULL;

GingerBreadNpcCmd* GingerBreadNpcCmd::New() const {
  return new GingerBreadNpcCmd;
}

void GingerBreadNpcCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 12;
    param_ = 13;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::GingerBreadNpcData::Clear();
    }
    isadd_ = true;
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_bornpos()) {
      if (bornpos_ != NULL) bornpos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GingerBreadNpcCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GingerBreadNpcCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GINGERBREAD_NPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.GingerBreadNpcData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isadd;
        break;
      }

      // optional bool isadd = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_isadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bornpos;
        break;
      }

      // optional .Cmd.ScenePos bornpos = 6;
      case 6: {
        if (tag == 50) {
         parse_bornpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bornpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GingerBreadNpcCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GingerBreadNpcCmd)
  return false;
#undef DO_
}

void GingerBreadNpcCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GingerBreadNpcCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GINGERBREAD_NPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GingerBreadNpcData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional bool isadd = 4 [default = true];
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isadd(), output);
  }

  // optional uint64 userid = 5 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->userid(), output);
  }

  // optional .Cmd.ScenePos bornpos = 6;
  if (has_bornpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bornpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GingerBreadNpcCmd)
}

::google::protobuf::uint8* GingerBreadNpcCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GingerBreadNpcCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GINGERBREAD_NPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GingerBreadNpcData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional bool isadd = 4 [default = true];
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isadd(), target);
  }

  // optional uint64 userid = 5 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->userid(), target);
  }

  // optional .Cmd.ScenePos bornpos = 6;
  if (has_bornpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bornpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GingerBreadNpcCmd)
  return target;
}

int GingerBreadNpcCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GINGERBREAD_NPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GingerBreadNpcData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional bool isadd = 4 [default = true];
    if (has_isadd()) {
      total_size += 1 + 1;
    }

    // optional uint64 userid = 5 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional .Cmd.ScenePos bornpos = 6;
    if (has_bornpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bornpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GingerBreadNpcCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GingerBreadNpcCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GingerBreadNpcCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GingerBreadNpcCmd::MergeFrom(const GingerBreadNpcCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::GingerBreadNpcData::MergeFrom(from.data());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_bornpos()) {
      mutable_bornpos()->::Cmd::ScenePos::MergeFrom(from.bornpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GingerBreadNpcCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GingerBreadNpcCmd::CopyFrom(const GingerBreadNpcCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GingerBreadNpcCmd::IsInitialized() const {

  return true;
}

void GingerBreadNpcCmd::Swap(GingerBreadNpcCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(isadd_, other->isadd_);
    std::swap(userid_, other->userid_);
    std::swap(bornpos_, other->bornpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GingerBreadNpcCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GingerBreadNpcCmd_descriptor_;
  metadata.reflection = GingerBreadNpcCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoCityGateMapCmd::kCmdFieldNumber;
const int GoCityGateMapCmd::kParamFieldNumber;
const int GoCityGateMapCmd::kFlagFieldNumber;
#endif  // !_MSC_VER

GoCityGateMapCmd::GoCityGateMapCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoCityGateMapCmd)
}

void GoCityGateMapCmd::InitAsDefaultInstance() {
}

GoCityGateMapCmd::GoCityGateMapCmd(const GoCityGateMapCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoCityGateMapCmd)
}

void GoCityGateMapCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 12;
  param_ = 14;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoCityGateMapCmd::~GoCityGateMapCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoCityGateMapCmd)
  SharedDtor();
}

void GoCityGateMapCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoCityGateMapCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoCityGateMapCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoCityGateMapCmd_descriptor_;
}

const GoCityGateMapCmd& GoCityGateMapCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMap_2eproto();
  return *default_instance_;
}

GoCityGateMapCmd* GoCityGateMapCmd::default_instance_ = NULL;

GoCityGateMapCmd* GoCityGateMapCmd::New() const {
  return new GoCityGateMapCmd;
}

void GoCityGateMapCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 12;
    param_ = 14;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoCityGateMapCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoCityGateMapCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GO_CITYGATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MapParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MapParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoCityGateMapCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoCityGateMapCmd)
  return false;
#undef DO_
}

void GoCityGateMapCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoCityGateMapCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GO_CITYGATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 flag = 3 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoCityGateMapCmd)
}

::google::protobuf::uint8* GoCityGateMapCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoCityGateMapCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GO_CITYGATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 flag = 3 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoCityGateMapCmd)
  return target;
}

int GoCityGateMapCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GO_CITYGATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 flag = 3 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoCityGateMapCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoCityGateMapCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoCityGateMapCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoCityGateMapCmd::MergeFrom(const GoCityGateMapCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoCityGateMapCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoCityGateMapCmd::CopyFrom(const GoCityGateMapCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoCityGateMapCmd::IsInitialized() const {

  return true;
}

void GoCityGateMapCmd::Swap(GoCityGateMapCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoCityGateMapCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoCityGateMapCmd_descriptor_;
  metadata.reflection = GoCityGateMapCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
