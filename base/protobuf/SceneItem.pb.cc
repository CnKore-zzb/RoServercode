// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefineCompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefineCompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantExtra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantExtra_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EggEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EggEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EggData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EggData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoveLetterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoveLetterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CodeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SenderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemUse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemUse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageSort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageSort_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStrength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStrength_reflection_ = NULL;
const ::google::protobuf::Descriptor* Produce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Produce_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipRefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipRefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipDecompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipDecompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecomposeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecomposeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDecomposeResultItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDecomposeResultItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrowsePackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrowsePackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemShow64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemShow64_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipRepair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipRepair_reflection_ = NULL;
const ::google::protobuf::Descriptor* HintNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HintNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeComposePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeComposePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeRefineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeRefineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeItemBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeItemBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessEnchantItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessEnchantItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipExchangeItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipExchangeItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnOffStoreItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnOffStoreItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackSlotNtfItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackSlotNtfItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestoreEquipItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestoreEquipItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseCountItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseCountItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeCardItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeCardItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCountItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCountItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveLoveLetterCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveLoveLetterCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemDataShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemDataShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryRecoveryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryRecoveryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotterySubInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotterySubInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLotteryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLotteryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotaLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotaLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotaDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotaDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqQuotaLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqQuotaLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqQuotaDetailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqQuotaDetailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipPosData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipPosData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipPosDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipPosDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HighRefineMatComposeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HighRefineMatComposeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* HighRefineCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HighRefineCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* HighRefineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HighRefineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfHighRefineDataCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfHighRefineDataCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateHighRefineDataCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateHighRefineDataCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseCodItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseCodItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddJobLevelItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddJobLevelItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotterGivBuyCountCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotterGivBuyCountCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveWeddingDressCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveWeddingDressCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickStoreItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickStoreItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickSellItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickSellItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantTransItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantTransItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLotteryHeadItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLotteryHeadItemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryRateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryRateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryRateQueryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryRateQueryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipComposeItemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipComposeItemCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBindType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EExpireType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERideType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETragetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEnchantType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELetterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipOper_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EStrengthResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EStrengthType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EProduceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERefineResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDecomposeResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECardOper_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETradeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EExchangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EExchangeCardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELotteryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuotaType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneItem_2eproto() {
  protobuf_AddDesc_SceneItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneItem.proto");
  GOOGLE_CHECK(file != NULL);
  ItemInfo_descriptor_ = file->message_type(0);
  static const int ItemInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, expire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, maxcardslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, ishint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, source_npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, chargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, overtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, quota_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  RefineCompose_descriptor_ = file->message_type(1);
  static const int RefineCompose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineCompose, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineCompose, num_),
  };
  RefineCompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefineCompose_descriptor_,
      RefineCompose::default_instance_,
      RefineCompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineCompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineCompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefineCompose));
  EquipData_descriptor_ = file->message_type(2);
  static const int EquipData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, strengthlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, strengthcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, refinecompose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, cardslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, breakstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, breakendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, strengthlv2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, strengthlv2cost_),
  };
  EquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipData_descriptor_,
      EquipData::default_instance_,
      EquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipData));
  CardData_descriptor_ = file->message_type(3);
  static const int CardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, pos_),
  };
  CardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardData_descriptor_,
      CardData::default_instance_,
      CardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardData));
  EnchantAttr_descriptor_ = file->message_type(4);
  static const int EnchantAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantAttr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantAttr, value_),
  };
  EnchantAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantAttr_descriptor_,
      EnchantAttr::default_instance_,
      EnchantAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantAttr));
  EnchantExtra_descriptor_ = file->message_type(5);
  static const int EnchantExtra_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantExtra, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantExtra, buffid_),
  };
  EnchantExtra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantExtra_descriptor_,
      EnchantExtra::default_instance_,
      EnchantExtra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantExtra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantExtra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantExtra));
  EnchantData_descriptor_ = file->message_type(6);
  static const int EnchantData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantData, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantData, extras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantData, patch_),
  };
  EnchantData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantData_descriptor_,
      EnchantData::default_instance_,
      EnchantData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantData));
  RefineData_descriptor_ = file->message_type(7);
  static const int RefineData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineData, lastfail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineData, repaircount_),
  };
  RefineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefineData_descriptor_,
      RefineData::default_instance_,
      RefineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefineData));
  EggEquip_descriptor_ = file->message_type(8);
  static const int EggEquip_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, enchant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, previewenchant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, refine_),
  };
  EggEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EggEquip_descriptor_,
      EggEquip::default_instance_,
      EggEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EggEquip));
  PetEquipData_descriptor_ = file->message_type(9);
  static const int PetEquipData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipData, epos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipData, itemid_),
  };
  PetEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEquipData_descriptor_,
      PetEquipData::default_instance_,
      PetEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEquipData));
  EggData_descriptor_ = file->message_type(10);
  static const int EggData_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, friendexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, rewardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, friendlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, relivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, restoretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, time_happly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, time_excite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, time_happiness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, time_happly_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, time_excite_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, time_happiness_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, touch_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, feed_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, skillids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, unlock_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, unlock_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, skilloff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, exchange_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, defaultwears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, wears_),
  };
  EggData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EggData_descriptor_,
      EggData::default_instance_,
      EggData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EggData));
  LoveLetterData_descriptor_ = file->message_type(11);
  static const int LoveLetterData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterData, sendusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterData, bg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterData, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterData, content2_),
  };
  LoveLetterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoveLetterData_descriptor_,
      LoveLetterData::default_instance_,
      LoveLetterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoveLetterData));
  CodeData_descriptor_ = file->message_type(12);
  static const int CodeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeData, used_),
  };
  CodeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CodeData_descriptor_,
      CodeData::default_instance_,
      CodeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CodeData));
  WeddingData_descriptor_ = file->message_type(13);
  static const int WeddingData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, weddingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, photoidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, phototime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, myname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, partnername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, notified_),
  };
  WeddingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingData_descriptor_,
      WeddingData::default_instance_,
      WeddingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingData));
  SenderData_descriptor_ = file->message_type(14);
  static const int SenderData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderData, name_),
  };
  SenderData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderData_descriptor_,
      SenderData::default_instance_,
      SenderData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderData));
  ItemData_descriptor_ = file->message_type(15);
  static const int ItemData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, equiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, battlepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, enchant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, previewenchant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, refine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, egg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, letter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, wedding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, sender_),
  };
  ItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemData_descriptor_,
      ItemData::default_instance_,
      ItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemData));
  PackageItem_descriptor_ = file->message_type(16);
  static const int PackageItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageItem, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageItem, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageItem, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageItem, maxslot_),
  };
  PackageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageItem_descriptor_,
      PackageItem::default_instance_,
      PackageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageItem));
  PackageUpdate_descriptor_ = file->message_type(17);
  static const int PackageUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, updateitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, delitems_),
  };
  PackageUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageUpdate_descriptor_,
      PackageUpdate::default_instance_,
      PackageUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageUpdate));
  ItemUse_descriptor_ = file->message_type(18);
  static const int ItemUse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUse, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUse, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUse, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUse, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUse, count_),
  };
  ItemUse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemUse_descriptor_,
      ItemUse::default_instance_,
      ItemUse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemUse));
  SortInfo_descriptor_ = file->message_type(19);
  static const int SortInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortInfo, index_),
  };
  SortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortInfo_descriptor_,
      SortInfo::default_instance_,
      SortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortInfo));
  PackageSort_descriptor_ = file->message_type(20);
  static const int PackageSort_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSort, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSort, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSort, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSort, item_),
  };
  PackageSort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageSort_descriptor_,
      PackageSort::default_instance_,
      PackageSort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageSort));
  Equip_descriptor_ = file->message_type(21);
  static const int Equip_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, transfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, count_),
  };
  Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equip_descriptor_,
      Equip::default_instance_,
      Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equip));
  SItem_descriptor_ = file->message_type(22);
  static const int SItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, count_),
  };
  SItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItem_descriptor_,
      SItem::default_instance_,
      SItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItem));
  SellItem_descriptor_ = file->message_type(23);
  static const int SellItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItem, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItem, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItem, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItem, items_),
  };
  SellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellItem_descriptor_,
      SellItem::default_instance_,
      SellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellItem));
  EquipStrength_descriptor_ = file->message_type(24);
  static const int EquipStrength_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, destcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, cricount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, oldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, newlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, type_),
  };
  EquipStrength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStrength_descriptor_,
      EquipStrength::default_instance_,
      EquipStrength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStrength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStrength));
  Produce_descriptor_ = file->message_type(25);
  static const int Produce_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, qucikproduce_),
  };
  Produce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Produce_descriptor_,
      Produce::default_instance_,
      Produce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Produce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Produce));
  ProduceDone_descriptor_ = file->message_type(26);
  static const int ProduceDone_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, itemid_),
  };
  ProduceDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceDone_descriptor_,
      ProduceDone::default_instance_,
      ProduceDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceDone));
  EquipRefine_descriptor_ = file->message_type(27);
  static const int EquipRefine_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, composeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, saferefine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, itemguid_),
  };
  EquipRefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipRefine_descriptor_,
      EquipRefine::default_instance_,
      EquipRefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipRefine));
  EquipDecompose_descriptor_ = file->message_type(28);
  static const int EquipDecompose_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDecompose, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDecompose, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDecompose, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDecompose, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDecompose, items_),
  };
  EquipDecompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipDecompose_descriptor_,
      EquipDecompose::default_instance_,
      EquipDecompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDecompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDecompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipDecompose));
  DecomposeResult_descriptor_ = file->message_type(29);
  static const int DecomposeResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeResult, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeResult, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeResult, min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeResult, max_count_),
  };
  DecomposeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecomposeResult_descriptor_,
      DecomposeResult::default_instance_,
      DecomposeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecomposeResult));
  QueryDecomposeResultItemCmd_descriptor_ = file->message_type(30);
  static const int QueryDecomposeResultItemCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDecomposeResultItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDecomposeResultItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDecomposeResultItemCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDecomposeResultItemCmd, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDecomposeResultItemCmd, sell_price_),
  };
  QueryDecomposeResultItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDecomposeResultItemCmd_descriptor_,
      QueryDecomposeResultItemCmd::default_instance_,
      QueryDecomposeResultItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDecomposeResultItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDecomposeResultItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDecomposeResultItemCmd));
  QueryEquipData_descriptor_ = file->message_type(31);
  static const int QueryEquipData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEquipData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEquipData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEquipData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEquipData, data_),
  };
  QueryEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryEquipData_descriptor_,
      QueryEquipData::default_instance_,
      QueryEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryEquipData));
  BrowsePackage_descriptor_ = file->message_type(32);
  static const int BrowsePackage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowsePackage, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowsePackage, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowsePackage, type_),
  };
  BrowsePackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrowsePackage_descriptor_,
      BrowsePackage::default_instance_,
      BrowsePackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowsePackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowsePackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrowsePackage));
  EquipCard_descriptor_ = file->message_type(33);
  static const int EquipCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, cardguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, equipguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, pos_),
  };
  EquipCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipCard_descriptor_,
      EquipCard::default_instance_,
      EquipCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipCard));
  ItemShow_descriptor_ = file->message_type(34);
  static const int ItemShow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow, items_),
  };
  ItemShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemShow_descriptor_,
      ItemShow::default_instance_,
      ItemShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemShow));
  ItemShow64_descriptor_ = file->message_type(35);
  static const int ItemShow64_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow64, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow64, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow64, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow64, count_),
  };
  ItemShow64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemShow64_descriptor_,
      ItemShow64::default_instance_,
      ItemShow64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemShow64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemShow64));
  EquipRepair_descriptor_ = file->message_type(36);
  static const int EquipRepair_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRepair, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRepair, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRepair, targetguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRepair, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRepair, stuffguid_),
  };
  EquipRepair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipRepair_descriptor_,
      EquipRepair::default_instance_,
      EquipRepair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRepair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRepair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipRepair));
  HintNtf_descriptor_ = file->message_type(37);
  static const int HintNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintNtf, itemid_),
  };
  HintNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HintNtf_descriptor_,
      HintNtf::default_instance_,
      HintNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HintNtf));
  EnchantEquip_descriptor_ = file->message_type(38);
  static const int EnchantEquip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquip, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquip, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquip, guid_),
  };
  EnchantEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantEquip_descriptor_,
      EnchantEquip::default_instance_,
      EnchantEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantEquip));
  TradeComposePair_descriptor_ = file->message_type(39);
  static const int TradeComposePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeComposePair, compose_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeComposePair, count_),
  };
  TradeComposePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeComposePair_descriptor_,
      TradeComposePair::default_instance_,
      TradeComposePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeComposePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeComposePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeComposePair));
  TradeRefineData_descriptor_ = file->message_type(40);
  static const int TradeRefineData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeRefineData, composeinfos_),
  };
  TradeRefineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeRefineData_descriptor_,
      TradeRefineData::default_instance_,
      TradeRefineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeRefineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeRefineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeRefineData));
  TradeItemBaseInfo_descriptor_ = file->message_type(41);
  static const int TradeItemBaseInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, refine_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, overlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, is_expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, publicity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, up_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, down_rate_),
  };
  TradeItemBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeItemBaseInfo_descriptor_,
      TradeItemBaseInfo::default_instance_,
      TradeItemBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeItemBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeItemBaseInfo));
  ProcessEnchantItemCmd_descriptor_ = file->message_type(42);
  static const int ProcessEnchantItemCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnchantItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnchantItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnchantItemCmd, save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnchantItemCmd, itemid_),
  };
  ProcessEnchantItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessEnchantItemCmd_descriptor_,
      ProcessEnchantItemCmd::default_instance_,
      ProcessEnchantItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnchantItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnchantItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessEnchantItemCmd));
  EquipExchangeItemCmd_descriptor_ = file->message_type(43);
  static const int EquipExchangeItemCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExchangeItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExchangeItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExchangeItemCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExchangeItemCmd, type_),
  };
  EquipExchangeItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipExchangeItemCmd_descriptor_,
      EquipExchangeItemCmd::default_instance_,
      EquipExchangeItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExchangeItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExchangeItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipExchangeItemCmd));
  OnOffStoreItemCmd_descriptor_ = file->message_type(44);
  static const int OnOffStoreItemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnOffStoreItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnOffStoreItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnOffStoreItemCmd, open_),
  };
  OnOffStoreItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnOffStoreItemCmd_descriptor_,
      OnOffStoreItemCmd::default_instance_,
      OnOffStoreItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnOffStoreItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnOffStoreItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnOffStoreItemCmd));
  PackSlotNtfItemCmd_descriptor_ = file->message_type(45);
  static const int PackSlotNtfItemCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSlotNtfItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSlotNtfItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSlotNtfItemCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSlotNtfItemCmd, maxslot_),
  };
  PackSlotNtfItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackSlotNtfItemCmd_descriptor_,
      PackSlotNtfItemCmd::default_instance_,
      PackSlotNtfItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSlotNtfItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSlotNtfItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackSlotNtfItemCmd));
  RestoreEquipItemCmd_descriptor_ = file->message_type(46);
  static const int RestoreEquipItemCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, strengthlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, cardids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, enchant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, strengthlv2_),
  };
  RestoreEquipItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestoreEquipItemCmd_descriptor_,
      RestoreEquipItemCmd::default_instance_,
      RestoreEquipItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreEquipItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestoreEquipItemCmd));
  UseCountItemCmd_descriptor_ = file->message_type(47);
  static const int UseCountItemCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCountItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCountItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCountItemCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCountItemCmd, count_),
  };
  UseCountItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseCountItemCmd_descriptor_,
      UseCountItemCmd::default_instance_,
      UseCountItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCountItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCountItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseCountItemCmd));
  ExchangeCardItemCmd_descriptor_ = file->message_type(48);
  static const int ExchangeCardItemCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, anim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, items_),
  };
  ExchangeCardItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeCardItemCmd_descriptor_,
      ExchangeCardItemCmd::default_instance_,
      ExchangeCardItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCardItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeCardItemCmd));
  GetCountItemCmd_descriptor_ = file->message_type(49);
  static const int GetCountItemCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCountItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCountItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCountItemCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCountItemCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCountItemCmd, source_),
  };
  GetCountItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCountItemCmd_descriptor_,
      GetCountItemCmd::default_instance_,
      GetCountItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCountItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCountItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCountItemCmd));
  SaveLoveLetterCmd_descriptor_ = file->message_type(50);
  static const int SaveLoveLetterCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveLoveLetterCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveLoveLetterCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveLoveLetterCmd, dwid_),
  };
  SaveLoveLetterCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveLoveLetterCmd_descriptor_,
      SaveLoveLetterCmd::default_instance_,
      SaveLoveLetterCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveLoveLetterCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveLoveLetterCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveLoveLetterCmd));
  ItemDataShow_descriptor_ = file->message_type(51);
  static const int ItemDataShow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataShow, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataShow, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataShow, items_),
  };
  ItemDataShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemDataShow_descriptor_,
      ItemDataShow::default_instance_,
      ItemDataShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemDataShow));
  LotteryCmd_descriptor_ = file->message_type(52);
  static const int LotteryCmd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, skip_anim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, today_cnt_),
  };
  LotteryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryCmd_descriptor_,
      LotteryCmd::default_instance_,
      LotteryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryCmd));
  LotteryRecoveryCmd_descriptor_ = file->message_type(53);
  static const int LotteryRecoveryCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRecoveryCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRecoveryCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRecoveryCmd, guids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRecoveryCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRecoveryCmd, type_),
  };
  LotteryRecoveryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryRecoveryCmd_descriptor_,
      LotteryRecoveryCmd::default_instance_,
      LotteryRecoveryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRecoveryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRecoveryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryRecoveryCmd));
  LotterySubInfo_descriptor_ = file->message_type(54);
  static const int LotterySubInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, recover_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, cur_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, recover_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, female_itemid_),
  };
  LotterySubInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotterySubInfo_descriptor_,
      LotterySubInfo::default_instance_,
      LotterySubInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterySubInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotterySubInfo));
  LotteryInfo_descriptor_ = file->message_type(55);
  static const int LotteryInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, subinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, lotterybox_),
  };
  LotteryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryInfo_descriptor_,
      LotteryInfo::default_instance_,
      LotteryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryInfo));
  QueryLotteryInfo_descriptor_ = file->message_type(56);
  static const int QueryLotteryInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, today_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, max_cnt_),
  };
  QueryLotteryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLotteryInfo_descriptor_,
      QueryLotteryInfo::default_instance_,
      QueryLotteryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLotteryInfo));
  QuotaLog_descriptor_ = file->message_type(57);
  static const int QuotaLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLog, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLog, time_),
  };
  QuotaLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuotaLog_descriptor_,
      QuotaLog::default_instance_,
      QuotaLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuotaLog));
  QuotaDetail_descriptor_ = file->message_type(58);
  static const int QuotaDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaDetail, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaDetail, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaDetail, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaDetail, time_),
  };
  QuotaDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuotaDetail_descriptor_,
      QuotaDetail::default_instance_,
      QuotaDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuotaDetail));
  ReqQuotaLogCmd_descriptor_ = file->message_type(59);
  static const int ReqQuotaLogCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaLogCmd, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaLogCmd, log_),
  };
  ReqQuotaLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqQuotaLogCmd_descriptor_,
      ReqQuotaLogCmd::default_instance_,
      ReqQuotaLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqQuotaLogCmd));
  ReqQuotaDetailCmd_descriptor_ = file->message_type(60);
  static const int ReqQuotaDetailCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaDetailCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaDetailCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaDetailCmd, page_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaDetailCmd, detail_),
  };
  ReqQuotaDetailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqQuotaDetailCmd_descriptor_,
      ReqQuotaDetailCmd::default_instance_,
      ReqQuotaDetailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaDetailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuotaDetailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqQuotaDetailCmd));
  EquipPosData_descriptor_ = file->message_type(61);
  static const int EquipPosData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, offstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, offendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, protecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, protectalways_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, recordguid_),
  };
  EquipPosData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipPosData_descriptor_,
      EquipPosData::default_instance_,
      EquipPosData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipPosData));
  EquipPosDataUpdate_descriptor_ = file->message_type(62);
  static const int EquipPosDataUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosDataUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosDataUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosDataUpdate, datas_),
  };
  EquipPosDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipPosDataUpdate_descriptor_,
      EquipPosDataUpdate::default_instance_,
      EquipPosDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPosDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipPosDataUpdate));
  MatItemInfo_descriptor_ = file->message_type(63);
  static const int MatItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatItemInfo, num_),
  };
  MatItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatItemInfo_descriptor_,
      MatItemInfo::default_instance_,
      MatItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatItemInfo));
  HighRefineMatComposeCmd_descriptor_ = file->message_type(64);
  static const int HighRefineMatComposeCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, mainmaterial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, vicematerial_),
  };
  HighRefineMatComposeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HighRefineMatComposeCmd_descriptor_,
      HighRefineMatComposeCmd::default_instance_,
      HighRefineMatComposeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineMatComposeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HighRefineMatComposeCmd));
  HighRefineCmd_descriptor_ = file->message_type(65);
  static const int HighRefineCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineCmd, dataid_),
  };
  HighRefineCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HighRefineCmd_descriptor_,
      HighRefineCmd::default_instance_,
      HighRefineCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HighRefineCmd));
  HighRefineData_descriptor_ = file->message_type(66);
  static const int HighRefineData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineData, level_),
  };
  HighRefineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HighRefineData_descriptor_,
      HighRefineData::default_instance_,
      HighRefineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighRefineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HighRefineData));
  NtfHighRefineDataCmd_descriptor_ = file->message_type(67);
  static const int NtfHighRefineDataCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfHighRefineDataCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfHighRefineDataCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfHighRefineDataCmd, datas_),
  };
  NtfHighRefineDataCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfHighRefineDataCmd_descriptor_,
      NtfHighRefineDataCmd::default_instance_,
      NtfHighRefineDataCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfHighRefineDataCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfHighRefineDataCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfHighRefineDataCmd));
  UpdateHighRefineDataCmd_descriptor_ = file->message_type(68);
  static const int UpdateHighRefineDataCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHighRefineDataCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHighRefineDataCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHighRefineDataCmd, data_),
  };
  UpdateHighRefineDataCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateHighRefineDataCmd_descriptor_,
      UpdateHighRefineDataCmd::default_instance_,
      UpdateHighRefineDataCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHighRefineDataCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateHighRefineDataCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateHighRefineDataCmd));
  UseCodItemCmd_descriptor_ = file->message_type(69);
  static const int UseCodItemCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCodItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCodItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCodItemCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCodItemCmd, code_),
  };
  UseCodItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseCodItemCmd_descriptor_,
      UseCodItemCmd::default_instance_,
      UseCodItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCodItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseCodItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseCodItemCmd));
  AddJobLevelItemCmd_descriptor_ = file->message_type(70);
  static const int AddJobLevelItemCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddJobLevelItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddJobLevelItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddJobLevelItemCmd, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddJobLevelItemCmd, num_),
  };
  AddJobLevelItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddJobLevelItemCmd_descriptor_,
      AddJobLevelItemCmd::default_instance_,
      AddJobLevelItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddJobLevelItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddJobLevelItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddJobLevelItemCmd));
  LotterGivBuyCountCmd_descriptor_ = file->message_type(71);
  static const int LotterGivBuyCountCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterGivBuyCountCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterGivBuyCountCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterGivBuyCountCmd, got_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterGivBuyCountCmd, max_count_),
  };
  LotterGivBuyCountCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotterGivBuyCountCmd_descriptor_,
      LotterGivBuyCountCmd::default_instance_,
      LotterGivBuyCountCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterGivBuyCountCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotterGivBuyCountCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotterGivBuyCountCmd));
  GiveWeddingDressCmd_descriptor_ = file->message_type(72);
  static const int GiveWeddingDressCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveWeddingDressCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveWeddingDressCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveWeddingDressCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveWeddingDressCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveWeddingDressCmd, receiverid_),
  };
  GiveWeddingDressCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiveWeddingDressCmd_descriptor_,
      GiveWeddingDressCmd::default_instance_,
      GiveWeddingDressCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveWeddingDressCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveWeddingDressCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiveWeddingDressCmd));
  QuickStoreItemCmd_descriptor_ = file->message_type(73);
  static const int QuickStoreItemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickStoreItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickStoreItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickStoreItemCmd, items_),
  };
  QuickStoreItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickStoreItemCmd_descriptor_,
      QuickStoreItemCmd::default_instance_,
      QuickStoreItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickStoreItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickStoreItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickStoreItemCmd));
  QuickSellItemCmd_descriptor_ = file->message_type(74);
  static const int QuickSellItemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickSellItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickSellItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickSellItemCmd, items_),
  };
  QuickSellItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickSellItemCmd_descriptor_,
      QuickSellItemCmd::default_instance_,
      QuickSellItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickSellItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickSellItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickSellItemCmd));
  EnchantTransItemCmd_descriptor_ = file->message_type(75);
  static const int EnchantTransItemCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantTransItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantTransItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantTransItemCmd, from_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantTransItemCmd, to_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantTransItemCmd, success_),
  };
  EnchantTransItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantTransItemCmd_descriptor_,
      EnchantTransItemCmd::default_instance_,
      EnchantTransItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantTransItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantTransItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantTransItemCmd));
  QueryLotteryHeadItemCmd_descriptor_ = file->message_type(76);
  static const int QueryLotteryHeadItemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryHeadItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryHeadItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryHeadItemCmd, ids_),
  };
  QueryLotteryHeadItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLotteryHeadItemCmd_descriptor_,
      QueryLotteryHeadItemCmd::default_instance_,
      QueryLotteryHeadItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryHeadItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLotteryHeadItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLotteryHeadItemCmd));
  LotteryRateInfo_descriptor_ = file->message_type(77);
  static const int LotteryRateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateInfo, rate_),
  };
  LotteryRateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryRateInfo_descriptor_,
      LotteryRateInfo::default_instance_,
      LotteryRateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryRateInfo));
  LotteryRateQueryCmd_descriptor_ = file->message_type(78);
  static const int LotteryRateQueryCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateQueryCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateQueryCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateQueryCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateQueryCmd, infos_),
  };
  LotteryRateQueryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryRateQueryCmd_descriptor_,
      LotteryRateQueryCmd::default_instance_,
      LotteryRateQueryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateQueryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRateQueryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryRateQueryCmd));
  EquipComposeItemCmd_descriptor_ = file->message_type(79);
  static const int EquipComposeItemCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipComposeItemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipComposeItemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipComposeItemCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipComposeItemCmd, materialequips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipComposeItemCmd, retmsg_),
  };
  EquipComposeItemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipComposeItemCmd_descriptor_,
      EquipComposeItemCmd::default_instance_,
      EquipComposeItemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipComposeItemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipComposeItemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipComposeItemCmd));
  ItemParam_descriptor_ = file->enum_type(0);
  EPackType_descriptor_ = file->enum_type(1);
  EItemType_descriptor_ = file->enum_type(2);
  EEquipType_descriptor_ = file->enum_type(3);
  EBindType_descriptor_ = file->enum_type(4);
  EExpireType_descriptor_ = file->enum_type(5);
  ERideType_descriptor_ = file->enum_type(6);
  ETragetType_descriptor_ = file->enum_type(7);
  EEnchantType_descriptor_ = file->enum_type(8);
  ELetterType_descriptor_ = file->enum_type(9);
  EEquipOper_descriptor_ = file->enum_type(10);
  EEquipPos_descriptor_ = file->enum_type(11);
  EStrengthResult_descriptor_ = file->enum_type(12);
  EStrengthType_descriptor_ = file->enum_type(13);
  EProduceType_descriptor_ = file->enum_type(14);
  ERefineResult_descriptor_ = file->enum_type(15);
  EDecomposeResult_descriptor_ = file->enum_type(16);
  ECardOper_descriptor_ = file->enum_type(17);
  ETradeType_descriptor_ = file->enum_type(18);
  EExchangeType_descriptor_ = file->enum_type(19);
  EExchangeCardType_descriptor_ = file->enum_type(20);
  ELotteryType_descriptor_ = file->enum_type(21);
  EQuotaType_descriptor_ = file->enum_type(22);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefineCompose_descriptor_, &RefineCompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipData_descriptor_, &EquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardData_descriptor_, &CardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantAttr_descriptor_, &EnchantAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantExtra_descriptor_, &EnchantExtra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantData_descriptor_, &EnchantData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefineData_descriptor_, &RefineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EggEquip_descriptor_, &EggEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEquipData_descriptor_, &PetEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EggData_descriptor_, &EggData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoveLetterData_descriptor_, &LoveLetterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CodeData_descriptor_, &CodeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingData_descriptor_, &WeddingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderData_descriptor_, &SenderData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemData_descriptor_, &ItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageItem_descriptor_, &PackageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageUpdate_descriptor_, &PackageUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemUse_descriptor_, &ItemUse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortInfo_descriptor_, &SortInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageSort_descriptor_, &PackageSort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equip_descriptor_, &Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItem_descriptor_, &SItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellItem_descriptor_, &SellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStrength_descriptor_, &EquipStrength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Produce_descriptor_, &Produce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceDone_descriptor_, &ProduceDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipRefine_descriptor_, &EquipRefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipDecompose_descriptor_, &EquipDecompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecomposeResult_descriptor_, &DecomposeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDecomposeResultItemCmd_descriptor_, &QueryDecomposeResultItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryEquipData_descriptor_, &QueryEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrowsePackage_descriptor_, &BrowsePackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipCard_descriptor_, &EquipCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemShow_descriptor_, &ItemShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemShow64_descriptor_, &ItemShow64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipRepair_descriptor_, &EquipRepair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HintNtf_descriptor_, &HintNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantEquip_descriptor_, &EnchantEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeComposePair_descriptor_, &TradeComposePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeRefineData_descriptor_, &TradeRefineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeItemBaseInfo_descriptor_, &TradeItemBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessEnchantItemCmd_descriptor_, &ProcessEnchantItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipExchangeItemCmd_descriptor_, &EquipExchangeItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnOffStoreItemCmd_descriptor_, &OnOffStoreItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackSlotNtfItemCmd_descriptor_, &PackSlotNtfItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestoreEquipItemCmd_descriptor_, &RestoreEquipItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseCountItemCmd_descriptor_, &UseCountItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeCardItemCmd_descriptor_, &ExchangeCardItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCountItemCmd_descriptor_, &GetCountItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveLoveLetterCmd_descriptor_, &SaveLoveLetterCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemDataShow_descriptor_, &ItemDataShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryCmd_descriptor_, &LotteryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryRecoveryCmd_descriptor_, &LotteryRecoveryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotterySubInfo_descriptor_, &LotterySubInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryInfo_descriptor_, &LotteryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLotteryInfo_descriptor_, &QueryLotteryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuotaLog_descriptor_, &QuotaLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuotaDetail_descriptor_, &QuotaDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqQuotaLogCmd_descriptor_, &ReqQuotaLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqQuotaDetailCmd_descriptor_, &ReqQuotaDetailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipPosData_descriptor_, &EquipPosData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipPosDataUpdate_descriptor_, &EquipPosDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatItemInfo_descriptor_, &MatItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HighRefineMatComposeCmd_descriptor_, &HighRefineMatComposeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HighRefineCmd_descriptor_, &HighRefineCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HighRefineData_descriptor_, &HighRefineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfHighRefineDataCmd_descriptor_, &NtfHighRefineDataCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateHighRefineDataCmd_descriptor_, &UpdateHighRefineDataCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseCodItemCmd_descriptor_, &UseCodItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddJobLevelItemCmd_descriptor_, &AddJobLevelItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotterGivBuyCountCmd_descriptor_, &LotterGivBuyCountCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiveWeddingDressCmd_descriptor_, &GiveWeddingDressCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickStoreItemCmd_descriptor_, &QuickStoreItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickSellItemCmd_descriptor_, &QuickSellItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantTransItemCmd_descriptor_, &EnchantTransItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLotteryHeadItemCmd_descriptor_, &QueryLotteryHeadItemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryRateInfo_descriptor_, &LotteryRateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryRateQueryCmd_descriptor_, &LotteryRateQueryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipComposeItemCmd_descriptor_, &EquipComposeItemCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneItem_2eproto() {
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete RefineCompose::default_instance_;
  delete RefineCompose_reflection_;
  delete EquipData::default_instance_;
  delete EquipData_reflection_;
  delete CardData::default_instance_;
  delete CardData_reflection_;
  delete EnchantAttr::default_instance_;
  delete EnchantAttr_reflection_;
  delete EnchantExtra::default_instance_;
  delete EnchantExtra_reflection_;
  delete EnchantData::default_instance_;
  delete EnchantData_reflection_;
  delete RefineData::default_instance_;
  delete RefineData_reflection_;
  delete EggEquip::default_instance_;
  delete EggEquip_reflection_;
  delete PetEquipData::default_instance_;
  delete PetEquipData_reflection_;
  delete EggData::default_instance_;
  delete EggData_reflection_;
  delete LoveLetterData::default_instance_;
  delete LoveLetterData_reflection_;
  delete CodeData::default_instance_;
  delete CodeData_reflection_;
  delete WeddingData::default_instance_;
  delete WeddingData_reflection_;
  delete SenderData::default_instance_;
  delete SenderData_reflection_;
  delete ItemData::default_instance_;
  delete ItemData_reflection_;
  delete PackageItem::default_instance_;
  delete PackageItem_reflection_;
  delete PackageUpdate::default_instance_;
  delete PackageUpdate_reflection_;
  delete ItemUse::default_instance_;
  delete ItemUse_reflection_;
  delete SortInfo::default_instance_;
  delete SortInfo_reflection_;
  delete PackageSort::default_instance_;
  delete PackageSort_reflection_;
  delete Equip::default_instance_;
  delete Equip_reflection_;
  delete SItem::default_instance_;
  delete SItem_reflection_;
  delete SellItem::default_instance_;
  delete SellItem_reflection_;
  delete EquipStrength::default_instance_;
  delete EquipStrength_reflection_;
  delete Produce::default_instance_;
  delete Produce_reflection_;
  delete ProduceDone::default_instance_;
  delete ProduceDone_reflection_;
  delete EquipRefine::default_instance_;
  delete EquipRefine_reflection_;
  delete EquipDecompose::default_instance_;
  delete EquipDecompose_reflection_;
  delete DecomposeResult::default_instance_;
  delete DecomposeResult_reflection_;
  delete QueryDecomposeResultItemCmd::default_instance_;
  delete QueryDecomposeResultItemCmd_reflection_;
  delete QueryEquipData::default_instance_;
  delete QueryEquipData_reflection_;
  delete BrowsePackage::default_instance_;
  delete BrowsePackage_reflection_;
  delete EquipCard::default_instance_;
  delete EquipCard_reflection_;
  delete ItemShow::default_instance_;
  delete ItemShow_reflection_;
  delete ItemShow64::default_instance_;
  delete ItemShow64_reflection_;
  delete EquipRepair::default_instance_;
  delete EquipRepair_reflection_;
  delete HintNtf::default_instance_;
  delete HintNtf_reflection_;
  delete EnchantEquip::default_instance_;
  delete EnchantEquip_reflection_;
  delete TradeComposePair::default_instance_;
  delete TradeComposePair_reflection_;
  delete TradeRefineData::default_instance_;
  delete TradeRefineData_reflection_;
  delete TradeItemBaseInfo::default_instance_;
  delete TradeItemBaseInfo_reflection_;
  delete ProcessEnchantItemCmd::default_instance_;
  delete ProcessEnchantItemCmd_reflection_;
  delete EquipExchangeItemCmd::default_instance_;
  delete EquipExchangeItemCmd_reflection_;
  delete OnOffStoreItemCmd::default_instance_;
  delete OnOffStoreItemCmd_reflection_;
  delete PackSlotNtfItemCmd::default_instance_;
  delete PackSlotNtfItemCmd_reflection_;
  delete RestoreEquipItemCmd::default_instance_;
  delete RestoreEquipItemCmd_reflection_;
  delete UseCountItemCmd::default_instance_;
  delete UseCountItemCmd_reflection_;
  delete ExchangeCardItemCmd::default_instance_;
  delete ExchangeCardItemCmd_reflection_;
  delete GetCountItemCmd::default_instance_;
  delete GetCountItemCmd_reflection_;
  delete SaveLoveLetterCmd::default_instance_;
  delete SaveLoveLetterCmd_reflection_;
  delete ItemDataShow::default_instance_;
  delete ItemDataShow_reflection_;
  delete LotteryCmd::default_instance_;
  delete LotteryCmd_reflection_;
  delete LotteryRecoveryCmd::default_instance_;
  delete LotteryRecoveryCmd_reflection_;
  delete LotterySubInfo::default_instance_;
  delete LotterySubInfo_reflection_;
  delete LotteryInfo::default_instance_;
  delete LotteryInfo_reflection_;
  delete QueryLotteryInfo::default_instance_;
  delete QueryLotteryInfo_reflection_;
  delete QuotaLog::default_instance_;
  delete QuotaLog_reflection_;
  delete QuotaDetail::default_instance_;
  delete QuotaDetail_reflection_;
  delete ReqQuotaLogCmd::default_instance_;
  delete ReqQuotaLogCmd_reflection_;
  delete ReqQuotaDetailCmd::default_instance_;
  delete ReqQuotaDetailCmd_reflection_;
  delete EquipPosData::default_instance_;
  delete EquipPosData_reflection_;
  delete EquipPosDataUpdate::default_instance_;
  delete EquipPosDataUpdate_reflection_;
  delete MatItemInfo::default_instance_;
  delete MatItemInfo_reflection_;
  delete HighRefineMatComposeCmd::default_instance_;
  delete HighRefineMatComposeCmd_reflection_;
  delete HighRefineCmd::default_instance_;
  delete HighRefineCmd_reflection_;
  delete HighRefineData::default_instance_;
  delete HighRefineData_reflection_;
  delete NtfHighRefineDataCmd::default_instance_;
  delete NtfHighRefineDataCmd_reflection_;
  delete UpdateHighRefineDataCmd::default_instance_;
  delete UpdateHighRefineDataCmd_reflection_;
  delete UseCodItemCmd::default_instance_;
  delete UseCodItemCmd_reflection_;
  delete AddJobLevelItemCmd::default_instance_;
  delete AddJobLevelItemCmd_reflection_;
  delete LotterGivBuyCountCmd::default_instance_;
  delete LotterGivBuyCountCmd_reflection_;
  delete GiveWeddingDressCmd::default_instance_;
  delete GiveWeddingDressCmd_reflection_;
  delete QuickStoreItemCmd::default_instance_;
  delete QuickStoreItemCmd_reflection_;
  delete QuickSellItemCmd::default_instance_;
  delete QuickSellItemCmd_reflection_;
  delete EnchantTransItemCmd::default_instance_;
  delete EnchantTransItemCmd_reflection_;
  delete QueryLotteryHeadItemCmd::default_instance_;
  delete QueryLotteryHeadItemCmd_reflection_;
  delete LotteryRateInfo::default_instance_;
  delete LotteryRateInfo_reflection_;
  delete LotteryRateQueryCmd::default_instance_;
  delete LotteryRateQueryCmd_reflection_;
  delete EquipComposeItemCmd::default_instance_;
  delete EquipComposeItemCmd_reflection_;
}

void protobuf_AddDesc_SceneItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SceneItem.proto\022\003Cmd\032\nxCmd.proto\032\021Prot"
    "oCommon.proto\"\337\004\n\010ItemInfo\022\014\n\004guid\030\001 \001(\t"
    "\022\r\n\002id\030\002 \001(\r:\0010\022\020\n\005count\030\003 \001(\r:\0011\022\020\n\005ind"
    "ex\030\004 \001(\r:\0010\022\025\n\ncreatetime\030\005 \001(\r:\0010\022\r\n\002cd"
    "\030\006 \001(\004:\0010\022+\n\004type\030\007 \001(\0162\016.Cmd.EItemType:"
    "\rEITEMTYPE_MIN\022+\n\004bind\030\010 \001(\0162\016.Cmd.EBind"
    "Type:\rEBINDTYPE_MIN\0221\n\006expire\030\t \001(\0162\020.Cm"
    "d.EExpireType:\017EEXPIRETYPE_MIN\0224\n\007qualit"
    "y\030\n \001(\0162\021.Cmd.EQualityType:\020EQUALITYTYPE"
    "_MIN\0222\n\tequipType\030\013 \001(\0162\017.Cmd.EEquipType"
    ":\016EEQUIPTYPE_MIN\022,\n\006source\030\014 \001(\0162\014.Cmd.E"
    "Source:\016ESOURCE_NORMAL\022\024\n\005isnew\030\r \001(\010:\005f"
    "alse\022\026\n\013maxcardslot\030\016 \001(\r:\0010\022\025\n\006ishint\030\017"
    " \001(\010:\005false\022\027\n\010isactive\030\020 \001(\010:\005false\022\025\n\n"
    "source_npc\030\021 \001(\r:\0010\022\023\n\010refinelv\030\022 \001(\r:\0010"
    "\022\026\n\013chargemoney\030\023 \001(\r:\0010\022\023\n\010overtime\030\024 \001"
    "(\r:\0010\022\020\n\005quota\030\025 \001(\004:\0010\".\n\rRefineCompose"
    "\022\r\n\002id\030\001 \001(\r:\0010\022\016\n\003num\030\002 \001(\r:\0010\"\314\002\n\tEqui"
    "pData\022\025\n\nstrengthlv\030\001 \001(\r:\0010\022\023\n\010refinelv"
    "\030\002 \001(\r:\0010\022\027\n\014strengthCost\030\003 \001(\r:\0010\022)\n\rre"
    "fineCompose\030\004 \003(\0132\022.Cmd.RefineCompose\022\023\n"
    "\010cardslot\030\005 \001(\r:\0010\022\016\n\006buffid\030\006 \003(\r\022\025\n\006da"
    "mage\030\007 \001(\010:\005false\022\r\n\002lv\030\010 \001(\r:\0010\022\020\n\005colo"
    "r\030\t \001(\r:\0010\022\031\n\016breakstarttime\030\n \001(\r:\0010\022\027\n"
    "\014breakendtime\030\013 \001(\r:\0010\022\026\n\013strengthlv2\030\014 "
    "\001(\r:\0010\022&\n\017strengthlv2cost\030\r \003(\0132\r.Cmd.It"
    "emInfo\"7\n\010CardData\022\014\n\004guid\030\001 \001(\t\022\r\n\002id\030\002"
    " \001(\r:\0010\022\016\n\003pos\030\003 \001(\r:\0010\"L\n\013EnchantAttr\022+"
    "\n\004type\030\001 \001(\0162\016.Cmd.EAttrType:\rEATTRTYPE_"
    "MIN\022\020\n\005value\030\002 \001(\r:\0010\"6\n\014EnchantExtra\022\023\n"
    "\010configid\030\001 \001(\r:\0010\022\021\n\006buffid\030\002 \001(\r:\0010\"\223\001"
    "\n\013EnchantData\0221\n\004type\030\001 \001(\0162\021.Cmd.EEncha"
    "ntType:\020EENCHANTTYPE_MIN\022\037\n\005attrs\030\002 \003(\0132"
    "\020.Cmd.EnchantAttr\022!\n\006extras\030\003 \003(\0132\021.Cmd."
    "EnchantExtra\022\r\n\005patch\030\004 \003(\r\"=\n\nRefineDat"
    "a\022\027\n\010lastfail\030\001 \001(\010:\005false\022\026\n\013repaircoun"
    "t\030\002 \001(\r:\0010\"\320\001\n\010EggEquip\022\033\n\004base\030\001 \001(\0132\r."
    "Cmd.ItemInfo\022\034\n\004data\030\002 \001(\0132\016.Cmd.EquipDa"
    "ta\022\033\n\004card\030\003 \003(\0132\r.Cmd.CardData\022!\n\007encha"
    "nt\030\004 \001(\0132\020.Cmd.EnchantData\022(\n\016previewenc"
    "hant\030\005 \001(\0132\020.Cmd.EnchantData\022\037\n\006refine\030\007"
    " \001(\0132\017.Cmd.RefineData\"<\n\014PetEquipData\022\034\n"
    "\004epos\030\001 \001(\0162\016.Cmd.EEquipPos\022\016\n\006itemid\030\002 "
    "\001(\r\"\277\005\n\007EggData\022\016\n\003exp\030\001 \001(\004:\0010\022\024\n\tfrien"
    "dexp\030\002 \001(\004:\0010\022\024\n\trewardexp\030\003 \001(\004:\0010\022\r\n\002i"
    "d\030\004 \001(\r:\0010\022\r\n\002lv\030\005 \001(\r:\0010\022\023\n\010friendlv\030\006 "
    "\001(\r:\0010\022\017\n\004body\030\007 \001(\r:\0010\022\025\n\nrelivetime\030\010 "
    "\001(\r:\0010\022\r\n\002hp\030\t \001(\r:\0010\022\026\n\013restoretime\030\n \001"
    "(\r:\0010\022\026\n\013time_happly\030\013 \001(\r:\0010\022\026\n\013time_ex"
    "cite\030\014 \001(\r:\0010\022\031\n\016time_happiness\030\r \001(\r:\0010"
    "\022\033\n\020time_happly_gift\030\016 \001(\r:\0010\022\033\n\020time_ex"
    "cite_gift\030\017 \001(\r:\0010\022\036\n\023time_happiness_gif"
    "t\030\020 \001(\r:\0010\022\025\n\ntouch_tick\030\026 \001(\r:\0010\022\024\n\tfee"
    "d_tick\030\027 \001(\r:\0010\022\014\n\004name\030\021 \001(\t\022\013\n\003var\030\022 \001"
    "(\014\022\020\n\010skillids\030\023 \003(\r\022\035\n\006equips\030\024 \003(\0132\r.C"
    "md.EggEquip\022\014\n\004buff\030\025 \001(\014\022\024\n\014unlock_equi"
    "p\030\030 \003(\r\022\023\n\013unlock_body\030\031 \003(\r\022\022\n\007version\030"
    "\032 \001(\r:\0010\022\027\n\010skilloff\030\033 \001(\010:\005false\022\031\n\016exc"
    "hange_count\030\034 \001(\r:\0010\022\014\n\004guid\030\035 \001(\t\022\'\n\014de"
    "faultwears\030\036 \003(\0132\021.Cmd.PetEquipData\022 \n\005w"
    "ears\030\037 \003(\0132\021.Cmd.PetEquipData\"g\n\016LoveLet"
    "terData\022\024\n\014sendUserName\030\001 \001(\t\022\n\n\002bg\030\002 \001("
    "\t\022\020\n\010configID\030\003 \001(\r\022\017\n\007content\030\004 \001(\t\022\020\n\010"
    "content2\030\005 \001(\t\"-\n\010CodeData\022\014\n\004code\030\001 \001(\t"
    "\022\023\n\004used\030\002 \001(\010:\005false\"\202\002\n\013WeddingData\022\r\n"
    "\002id\030\001 \001(\004:\0010\022\021\n\006zoneid\030\002 \001(\r:\0010\022\022\n\007chari"
    "d1\030\003 \001(\004:\0010\022\022\n\007charid2\030\004 \001(\004:\0010\022\026\n\013weddi"
    "ngtime\030\005 \001(\r:\0010\022\023\n\010photoidx\030\006 \001(\r:\0010\022\024\n\t"
    "phototime\030\007 \001(\r:\0010\022\016\n\006myname\030\010 \001(\t\022\023\n\013pa"
    "rtnername\030\t \001(\t\022\024\n\tstarttime\030\n \001(\r:\0010\022\022\n"
    "\007endtime\030\013 \001(\r:\0010\022\027\n\010notified\030\014 \001(\010:\005fal"
    "se\"*\n\nSenderData\022\016\n\006charid\030\001 \001(\004\022\014\n\004name"
    "\030\002 \001(\t\"\242\003\n\010ItemData\022\033\n\004base\030\001 \001(\0132\r.Cmd."
    "ItemInfo\022\026\n\007equiped\030\002 \001(\010:\005false\022\026\n\013batt"
    "lepoint\030\003 \001(\r:\0010\022\035\n\005equip\030\004 \001(\0132\016.Cmd.Eq"
    "uipData\022\033\n\004card\030\005 \003(\0132\r.Cmd.CardData\022!\n\007"
    "enchant\030\006 \001(\0132\020.Cmd.EnchantData\022(\n\016previ"
    "ewenchant\030\007 \001(\0132\020.Cmd.EnchantData\022\037\n\006ref"
    "ine\030\010 \001(\0132\017.Cmd.RefineData\022\031\n\003egg\030\t \001(\0132"
    "\014.Cmd.EggData\022#\n\006letter\030\n \001(\0132\023.Cmd.Love"
    "LetterData\022\033\n\004code\030\013 \001(\0132\r.Cmd.CodeData\022"
    "!\n\007wedding\030\014 \001(\0132\020.Cmd.WeddingData\022\037\n\006se"
    "nder\030\r \001(\0132\017.Cmd.SenderData\"\326\001\n\013PackageI"
    "tem\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_US"
    "ER_ITEM_PROTOCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.It"
    "emParam:\025ITEMPARAM_PACKAGEITEM\022+\n\004type\030\003"
    " \001(\0162\016.Cmd.EPackType:\rEPACKTYPE_MIN\022\033\n\004d"
    "ata\030\004 \003(\0132\r.Cmd.ItemData\022\022\n\007maxslot\030\005 \001("
    "\r:\0010\"\356\001\n\rPackageUpdate\0223\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\030SCENE_USER_ITEM_PROTOCMD\0226\n\005p"
    "aram\030\002 \001(\0162\016.Cmd.ItemParam:\027ITEMPARAM_PA"
    "CKAGEUPDATE\022+\n\004type\030\003 \001(\0162\016.Cmd.EPackTyp"
    "e:\rEPACKTYPE_MIN\022\"\n\013updateItems\030\004 \003(\0132\r."
    "Cmd.ItemData\022\037\n\010delItems\030\005 \003(\0132\r.Cmd.Ite"
    "mData\"\242\001\n\007ItemUse\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\030SCENE_USER_ITEM_PROTOCMD\0220\n\005param\030"
    "\002 \001(\0162\016.Cmd.ItemParam:\021ITEMPARAM_ITEMUSE"
    "\022\020\n\010itemguid\030\003 \001(\t\022\017\n\007targets\030\004 \003(\004\022\r\n\005c"
    "ount\030\005 \001(\r\"*\n\010SortInfo\022\014\n\004guid\030\001 \001(\t\022\020\n\005"
    "index\030\002 \001(\r:\0010\"\302\001\n\013PackageSort\0223\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROTO"
    "CMD\0224\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\025ITEM"
    "PARAM_PACKAGESORT\022+\n\004type\030\003 \001(\0162\016.Cmd.EP"
    "ackType:\rEPACKTYPE_MIN\022\033\n\004item\030\004 \003(\0132\r.C"
    "md.SortInfo\"\200\002\n\005Equip\0223\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\030SCENE_USER_ITEM_PROTOCMD\022.\n\005pa"
    "ram\030\002 \001(\0162\016.Cmd.ItemParam:\017ITEMPARAM_EQU"
    "IP\022-\n\004oper\030\003 \001(\0162\017.Cmd.EEquipOper:\016EEQUI"
    "POPER_MIN\022*\n\003pos\030\004 \001(\0162\016.Cmd.EEquipPos:\r"
    "EEQUIPPOS_MIN\022\014\n\004guid\030\005 \001(\t\022\027\n\010transfer\030"
    "\006 \001(\010:\005false\022\020\n\005count\030\007 \001(\r:\0010\"\'\n\005SItem\022"
    "\014\n\004guid\030\001 \001(\t\022\020\n\005count\030\002 \001(\r:\0010\"\237\001\n\010Sell"
    "Item\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_U"
    "SER_ITEM_PROTOCMD\0221\n\005param\030\002 \001(\0162\016.Cmd.I"
    "temParam:\022ITEMPARAM_SELLITEM\022\020\n\005npcid\030\003 "
    "\001(\004:\0010\022\031\n\005items\030\004 \003(\0132\n.Cmd.SItem\"\333\002\n\rEq"
    "uipStrength\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030"
    "SCENE_USER_ITEM_PROTOCMD\0226\n\005param\030\002 \001(\0162"
    "\016.Cmd.ItemParam:\027ITEMPARAM_EQUIPSTRENGTH"
    "\022\014\n\004guid\030\003 \001(\t\022\024\n\tdestcount\030\004 \001(\r:\0010\022\020\n\005"
    "count\030\005 \001(\r:\0010\022\023\n\010cricount\030\006 \001(\r:\0010\022\020\n\005o"
    "ldlv\030\007 \001(\r:\0010\022\020\n\005newlv\030\010 \001(\r:\0010\0229\n\006resul"
    "t\030\t \001(\0162\024.Cmd.EStrengthResult:\023ESTRENGTH"
    "RESULT_MIN\0223\n\004type\030\n \001(\0162\022.Cmd.EStrength"
    "Type:\021ESTRENGTHTYPE_MIN\"\215\002\n\007Produce\0223\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_"
    "PROTOCMD\0220\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:"
    "\021ITEMPARAM_PRODUCE\0221\n\004type\030\003 \001(\0162\021.Cmd.E"
    "ProduceType:\020EPRODUCETYPE_MIN\022\024\n\tcompose"
    "id\030\004 \001(\r:\0010\022\020\n\005npcid\030\005 \001(\004:\0010\022\021\n\006itemid\030"
    "\006 \001(\r:\0010\022\020\n\005count\030\007 \001(\r:\0011\022\033\n\014qucikprodu"
    "ce\030\010 \001(\010:\005false\"\365\001\n\013ProduceDone\0223\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROT"
    "OCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\025ITE"
    "MPARAM_PRODUCEDONE\0221\n\004type\030\003 \001(\0162\021.Cmd.E"
    "ProduceType:\020EPRODUCETYPE_MIN\022\020\n\005npcid\030\004"
    " \001(\004:\0010\022\021\n\006charid\030\005 \001(\004:\0010\022\020\n\005delay\030\006 \001("
    "\r:\0010\022\021\n\006itemid\030\007 \001(\r:\0010\"\243\002\n\013EquipRefine\022"
    "3\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_I"
    "TEM_PROTOCMD\022/\n\005param\030\002 \001(\0162\016.Cmd.ItemPa"
    "ram:\020ITEMPARAM_REFINE\022\014\n\004guid\030\003 \001(\t\022\024\n\tc"
    "omposeid\030\004 \001(\r:\0010\022\023\n\010refinelv\030\005 \001(\r:\0010\0226"
    "\n\007eresult\030\006 \001(\0162\022.Cmd.ERefineResult:\021ERE"
    "FINERESULT_MIN\022\020\n\005npcid\030\007 \001(\004:\0010\022\031\n\nsafe"
    "refine\030\010 \001(\010:\005false\022\020\n\010itemguid\030\t \003(\t\"\342\001"
    "\n\016EquipDecompose\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\030SCENE_USER_ITEM_PROTOCMD\0222\n\005param\030\002"
    " \001(\0162\016.Cmd.ItemParam:\023ITEMPARAM_DECOMPOS"
    "E\022\014\n\004guid\030\003 \001(\t\022;\n\006result\030\004 \001(\0162\025.Cmd.ED"
    "ecomposeResult:\024EDECOMPOSERESULT_MIN\022\034\n\005"
    "items\030\005 \003(\0132\r.Cmd.ItemInfo\"k\n\017DecomposeR"
    "esult\022\033\n\004item\030\001 \001(\0132\r.Cmd.ItemInfo\022\017\n\004ra"
    "te\030\002 \001(\r:\0010\022\024\n\tmin_count\030\003 \001(\r:\0010\022\024\n\tmax"
    "_count\030\004 \001(\r:\0010\"\335\001\n\033QueryDecomposeResult"
    "ItemCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCEN"
    "E_USER_ITEM_PROTOCMD\022=\n\005param\030\002 \001(\0162\016.Cm"
    "d.ItemParam:\036ITEMPARAM_QUERYDECOMPOSERES"
    "ULT\022\014\n\004guid\030\003 \001(\t\022%\n\007results\030\004 \003(\0132\024.Cmd"
    ".DecomposeResult\022\025\n\nsell_price\030\005 \001(\r:\0010\""
    "\252\001\n\016QueryEquipData\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\030SCENE_USER_ITEM_PROTOCMD\0227\n\005param"
    "\030\002 \001(\0162\016.Cmd.ItemParam:\030ITEMPARAM_QUERYE"
    "QUIPDATA\022\014\n\004guid\030\003 \001(\t\022\034\n\004data\030\004 \001(\0132\016.C"
    "md.EquipData\"\246\001\n\rBrowsePackage\0223\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROTO"
    "CMD\0223\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\024ITEM"
    "PARAM_BROWSEPACK\022+\n\004type\030\003 \001(\0162\016.Cmd.EPa"
    "ckType:\rEPACKTYPE_MIN\"\326\001\n\tEquipCard\0223\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_"
    "PROTOCMD\0222\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:"
    "\023ITEMPARAM_EQUIPCARD\022+\n\004oper\030\003 \001(\0162\016.Cmd"
    ".ECardOper:\rECARDOPER_MIN\022\020\n\010cardguid\030\004 "
    "\001(\t\022\021\n\tequipguid\030\005 \001(\t\022\016\n\003pos\030\006 \001(\r:\0010\"\220"
    "\001\n\010ItemShow\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030"
    "SCENE_USER_ITEM_PROTOCMD\0221\n\005param\030\002 \001(\0162"
    "\016.Cmd.ItemParam:\022ITEMPARAM_ITEMSHOW\022\034\n\005i"
    "tems\030\003 \003(\0132\r.Cmd.ItemInfo\"\221\001\n\nItemShow64"
    "\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_"
    "ITEM_PROTOCMD\0223\n\005param\030\002 \001(\0162\016.Cmd.ItemP"
    "aram:\024ITEMPARAM_ITEMSHOW64\022\n\n\002id\030\003 \001(\r\022\r"
    "\n\005count\030\004 \001(\004\"\262\001\n\013EquipRepair\0223\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROTOC"
    "MD\022/\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\020ITEMP"
    "ARAM_REPAIR\022\022\n\ntargetguid\030\003 \001(\t\022\026\n\007succe"
    "ss\030\004 \001(\010:\005false\022\021\n\tstuffguid\030\005 \001(\t\"\203\001\n\007H"
    "intNtf\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE"
    "_USER_ITEM_PROTOCMD\0220\n\005param\030\002 \001(\0162\016.Cmd"
    ".ItemParam:\021ITEMPARAM_HINTNTF\022\021\n\006itemid\030"
    "\003 \001(\r:\0010\"\266\001\n\014EnchantEquip\0223\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\030SCENE_USER_ITEM_PROTOCMD\0220"
    "\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\021ITEMPARAM"
    "_ENCHANT\0221\n\004type\030\003 \001(\0162\021.Cmd.EEnchantTyp"
    "e:\020EENCHANTTYPE_MIN\022\014\n\004guid\030\004 \001(\t\"5\n\020Tra"
    "deComposePair\022\022\n\ncompose_id\030\001 \001(\r\022\r\n\005cou"
    "nt\030\002 \001(\r\">\n\017TradeRefineData\022+\n\014composeIn"
    "fos\030\001 \003(\0132\025.Cmd.TradeComposePair\"\357\002\n\021Tra"
    "deItemBaseInfo\022\016\n\006itemid\030\001 \001(\r\022\r\n\005price\030"
    "\002 \001(\r\022\r\n\005count\030\003 \001(\r\022\014\n\004guid\030\004 \001(\t\022\020\n\010or"
    "der_id\030\005 \001(\004\022\021\n\trefine_lv\030\006 \001(\r\022\017\n\007overl"
    "ap\030\010 \001(\010\022\022\n\nis_expired\030\t \001(\010\022 \n\titem_dat"
    "a\030\n \001(\0132\r.Cmd.ItemData\022\027\n\014publicity_id\030\013"
    " \001(\r:\0010\022\023\n\010end_time\030\014 \001(\r:\0010\022\013\n\003key\030\r \001("
    "\t\022\016\n\006charid\030\016 \001(\004\022\014\n\004name\030\017 \001(\t\022/\n\004type\030"
    "\020 \001(\0162\017.Cmd.ETradeType:\020ETRADETYPE_TRADE"
    "\022\022\n\007up_rate\030\021 \001(\r:\0010\022\024\n\tdown_rate\030\022 \001(\r:"
    "\0010\"\252\001\n\025ProcessEnchantItemCmd\0223\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROTOCM"
    "D\0227\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\030ITEMPA"
    "RAM_PROCESSENCHANT\022\023\n\004save\030\003 \001(\010:\005false\022"
    "\016\n\006itemid\030\004 \001(\t\"\306\001\n\024EquipExchangeItemCmd"
    "\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_"
    "ITEM_PROTOCMD\0226\n\005param\030\002 \001(\0162\016.Cmd.ItemP"
    "aram:\027ITEMPARAM_EQUIPEXCHANGE\022\014\n\004guid\030\003 "
    "\001(\t\0223\n\004type\030\004 \001(\0162\022.Cmd.EExchangeType:\021E"
    "EXCHANGETYPE_MIN\"\222\001\n\021OnOffStoreItemCmd\0223"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_IT"
    "EM_PROTOCMD\0223\n\005param\030\002 \001(\0162\016.Cmd.ItemPar"
    "am:\024ITEMPARAM_ONOFFSTORE\022\023\n\004open\030\003 \001(\010:\005"
    "false\"\300\001\n\022PackSlotNtfItemCmd\0223\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROTOCM"
    "D\0224\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\025ITEMPA"
    "RAM_PACKSLOTNTF\022+\n\004type\030\003 \001(\0162\016.Cmd.EPac"
    "kType:\rEPACKTYPE_MIN\022\022\n\007maxslot\030\004 \001(\r:\0010"
    "\"\212\002\n\023RestoreEquipItemCmd\0223\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\030SCENE_USER_ITEM_PROTOCMD\0225\n"
    "\005param\030\002 \001(\0162\016.Cmd.ItemParam:\026ITEMPARAM_"
    "RESTOREEQUIP\022\017\n\007equipid\030\003 \001(\t\022\031\n\nstrengt"
    "hlv\030\004 \001(\010:\005false\022\017\n\007cardids\030\005 \003(\t\022\026\n\007enc"
    "hant\030\006 \001(\010:\005false\022\026\n\007upgrade\030\007 \001(\010:\005fals"
    "e\022\032\n\013strengthlv2\030\010 \001(\010:\005false\"\233\001\n\017UseCou"
    "ntItemCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SC"
    "ENE_USER_ITEM_PROTOCMD\0221\n\005param\030\002 \001(\0162\016."
    "Cmd.ItemParam:\022ITEMPARAM_USECOUNT\022\016\n\006ite"
    "mid\030\003 \002(\r\022\020\n\005count\030\004 \001(\r:\0010\"\274\002\n\023Exchange"
    "CardItemCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030"
    "SCENE_USER_ITEM_PROTOCMD\0225\n\005param\030\002 \001(\0162"
    "\016.Cmd.ItemParam:\026ITEMPARAM_EXCHANGECARD\022"
    "<\n\004type\030\003 \001(\0162\026.Cmd.EExchangeCardType:\026E"
    "EXCHANGECARDTYPE_DRAW\022\020\n\005npcid\030\004 \001(\004:\0010\022"
    "\020\n\010material\030\005 \003(\t\022\021\n\006charid\030\006 \001(\004:\0010\022\021\n\006"
    "cardid\030\007 \001(\r:\0010\022\023\n\004anim\030\010 \001(\010:\005false\022\034\n\005"
    "items\030\t \003(\0132\r.Cmd.ItemInfo\"\306\001\n\017GetCountI"
    "temCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE"
    "_USER_ITEM_PROTOCMD\0221\n\005param\030\002 \001(\0162\016.Cmd"
    ".ItemParam:\022ITEMPARAM_GETCOUNT\022\016\n\006itemid"
    "\030\003 \001(\r\022\020\n\005count\030\004 \001(\r:\0010\022)\n\006source\030\005 \001(\016"
    "2\014.Cmd.ESource:\013ESOURCE_MIN\"\221\001\n\021SaveLove"
    "LetterCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SC"
    "ENE_USER_ITEM_PROTOCMD\0229\n\005param\030\002 \001(\0162\016."
    "Cmd.ItemParam:\032ITEMPARAM_SAVE_LOVE_LETTE"
    "R\022\014\n\004dwID\030\003 \001(\r\"\230\001\n\014ItemDataShow\0223\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PRO"
    "TOCMD\0225\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\026IT"
    "EMPARAM_ITEMDATASHOW\022\034\n\005items\030\003 \003(\0132\r.Cm"
    "d.ItemData\"\327\002\n\nLotteryCmd\0223\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\030SCENE_USER_ITEM_PROTOCMD\0220"
    "\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\021ITEMPARAM"
    "_LOTTERY\022\014\n\004year\030\003 \001(\r\022\r\n\005month\030\004 \001(\r\022\r\n"
    "\005npcid\030\005 \001(\004\022\030\n\tskip_anim\030\006 \001(\010:\005false\022\r"
    "\n\005price\030\007 \001(\r\022\016\n\006ticket\030\010 \001(\r\022\037\n\004type\030\t "
    "\001(\0162\021.Cmd.ELotteryType\022\r\n\005count\030\n \001(\r\022\034\n"
    "\005items\030\013 \003(\0132\r.Cmd.ItemInfo\022\016\n\006charid\030\014 "
    "\001(\004\022\014\n\004guid\030\r \001(\t\022\021\n\ttoday_cnt\030\016 \001(\r\"\303\001\n"
    "\022LotteryRecoveryCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\030SCENE_USER_ITEM_PROTOCMD\0229\n\005para"
    "m\030\002 \001(\0162\016.Cmd.ItemParam:\032ITEMPARAM_LOTTE"
    "RY_RECOVERY\022\r\n\005guids\030\003 \003(\t\022\r\n\005npcid\030\004 \001("
    "\004\022\037\n\004type\030\005 \001(\0162\021.Cmd.ELotteryType\"\262\001\n\016L"
    "otterySubInfo\022\016\n\006itemid\030\001 \001(\r\022\025\n\rrecover"
    "_price\030\002 \001(\r\022\014\n\004rate\030\003 \001(\r\022\016\n\006rarity\030\004 \001"
    "(\t\022\021\n\tcur_batch\030\005 \001(\010\022\n\n\002id\030\006 \001(\r\022\026\n\016rec"
    "over_itemid\030\007 \001(\r\022\r\n\005count\030\010 \001(\r\022\025\n\rfema"
    "le_itemid\030\t \001(\r\"\205\001\n\013LotteryInfo\022\014\n\004year\030"
    "\001 \001(\r\022\r\n\005month\030\002 \001(\r\022\r\n\005price\030\003 \001(\r\022\020\n\010d"
    "iscount\030\004 \001(\r\022$\n\007subInfo\030\005 \003(\0132\023.Cmd.Lot"
    "terySubInfo\022\022\n\nlotterybox\030\006 \001(\r\"\351\001\n\020Quer"
    "yLotteryInfo\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\030SCENE_USER_ITEM_PROTOCMD\022:\n\005param\030\002 \001(\016"
    "2\016.Cmd.ItemParam:\033ITEMPARAM_QUERY_LOTTER"
    "YINFO\022\037\n\005infos\030\003 \003(\0132\020.Cmd.LotteryInfo\022\037"
    "\n\004type\030\004 \001(\0162\021.Cmd.ELotteryType\022\021\n\ttoday"
    "_cnt\030\005 \001(\r\022\017\n\007max_cnt\030\006 \001(\r\"F\n\010QuotaLog\022"
    "\r\n\005value\030\001 \001(\004\022\035\n\004type\030\002 \001(\0162\017.Cmd.EQuot"
    "aType\022\014\n\004time\030\003 \001(\r\"M\n\013QuotaDetail\022\r\n\005va"
    "lue\030\001 \001(\004\022\014\n\004left\030\002 \001(\004\022\023\n\013expire_time\030\003"
    " \001(\r\022\014\n\004time\030\004 \001(\r\"\255\001\n\016ReqQuotaLogCmd\0223\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_ITE"
    "M_PROTOCMD\0226\n\005param\030\002 \001(\0162\016.Cmd.ItemPara"
    "m:\027ITEMPARAM_REQ_QUOTA_LOG\022\022\n\npage_index"
    "\030\003 \001(\r\022\032\n\003log\030\004 \003(\0132\r.Cmd.QuotaLog\"\271\001\n\021R"
    "eqQuotaDetailCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\030SCENE_USER_ITEM_PROTOCMD\0229\n\005param\030\002"
    " \001(\0162\016.Cmd.ItemParam:\032ITEMPARAM_REQ_QUOT"
    "A_DETAIL\022\022\n\npage_index\030\003 \001(\r\022 \n\006detail\030\004"
    " \003(\0132\020.Cmd.QuotaDetail\"\260\001\n\014EquipPosData\022"
    "*\n\003pos\030\001 \001(\0162\016.Cmd.EEquipPos:\rEEQUIPPOS_"
    "MIN\022\027\n\014offstarttime\030\002 \001(\r:\0010\022\025\n\noffendti"
    "me\030\003 \001(\r:\0010\022\026\n\013protecttime\030\004 \001(\r:\0010\022\030\n\rp"
    "rotectalways\030\005 \001(\r:\0010\022\022\n\nrecordguid\030\006 \001("
    "\t\"\251\001\n\022EquipPosDataUpdate\0223\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\030SCENE_USER_ITEM_PROTOCMD\022<\n"
    "\005param\030\002 \001(\0162\016.Cmd.ItemParam:\035ITEMPARAM_"
    "EQUIPPOSDATA_UPDATE\022 \n\005datas\030\003 \003(\0132\021.Cmd"
    ".EquipPosData\"*\n\013MatItemInfo\022\016\n\006itemid\030\001"
    " \001(\r\022\013\n\003num\030\002 \001(\r\"\375\001\n\027HighRefineMatCompo"
    "seCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_"
    "USER_ITEM_PROTOCMD\022>\n\005param\030\002 \001(\0162\016.Cmd."
    "ItemParam:\037ITEMPARAM_HIGHREFINE_MATCOMPO"
    "SE\022\016\n\006dataid\030\003 \001(\r\022\r\n\005npcid\030\004 \001(\004\022&\n\014mai"
    "nmaterial\030\005 \003(\0132\020.Cmd.MatItemInfo\022&\n\014vic"
    "ematerial\030\006 \003(\0132\020.Cmd.MatItemInfo\"\211\001\n\rHi"
    "ghRefineCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030"
    "SCENE_USER_ITEM_PROTOCMD\0223\n\005param\030\002 \001(\0162"
    "\016.Cmd.ItemParam:\024ITEMPARAM_HIGHREFINE\022\016\n"
    "\006dataid\030\003 \001(\r\"<\n\016HighRefineData\022\033\n\003pos\030\001"
    " \001(\0162\016.Cmd.EEquipPos\022\r\n\005level\030\002 \003(\r\"\256\001\n\024"
    "NtfHighRefineDataCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\030SCENE_USER_ITEM_PROTOCMD\022=\n\005par"
    "am\030\002 \001(\0162\016.Cmd.ItemParam:\036ITEMPARAM_NTF_"
    "HIGHTREFINE_DATA\022\"\n\005datas\030\003 \003(\0132\023.Cmd.Hi"
    "ghRefineData\"\263\001\n\027UpdateHighRefineDataCmd"
    "\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_"
    "ITEM_PROTOCMD\022@\n\005param\030\002 \001(\0162\016.Cmd.ItemP"
    "aram:!ITEMPARAM_UPDATE_HIGHTREFINE_DATA\022"
    "!\n\004data\030\003 \001(\0132\023.Cmd.HighRefineData\"\230\001\n\rU"
    "seCodItemCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\030SCENE_USER_ITEM_PROTOCMD\0226\n\005param\030\002 \001(\016"
    "2\016.Cmd.ItemParam:\027ITEMPARAM_USE_CODE_ITE"
    "M\022\014\n\004guid\030\003 \001(\t\022\014\n\004code\030\004 \001(\t\"\241\001\n\022AddJob"
    "LevelItemCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\030SCENE_USER_ITEM_PROTOCMD\0225\n\005param\030\002 \001(\016"
    "2\016.Cmd.ItemParam:\026ITEMPARAM_ADD_JOBLEVEL"
    "\022\017\n\004item\030\003 \001(\r:\0010\022\016\n\003num\030\004 \001(\r:\0010\"\262\001\n\024Lo"
    "tterGivBuyCountCmd\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\030SCENE_USER_ITEM_PROTOCMD\022\?\n\005param"
    "\030\002 \001(\0162\016.Cmd.ItemParam: ITEMPARAM_LOTTER"
    "Y_GIVE_BUY_COUNT\022\021\n\tgot_count\030\003 \001(\r\022\021\n\tm"
    "ax_count\030\004 \001(\r\"\272\001\n\023GiveWeddingDressCmd\0223"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_IT"
    "EM_PROTOCMD\022;\n\005param\030\002 \001(\0162\016.Cmd.ItemPar"
    "am:\034ITEMPARAM_GIVE_WEDDING_DRESS\022\014\n\004guid"
    "\030\003 \001(\t\022\017\n\007content\030\006 \001(\t\022\022\n\nreceiverid\030\010 "
    "\001(\004\"\240\001\n\021QuickStoreItemCmd\0223\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\030SCENE_USER_ITEM_PROTOCMD\0228"
    "\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\031ITEMPARAM"
    "_QUICK_STOREITEM\022\034\n\005items\030\003 \003(\0132\r.Cmd.It"
    "emInfo\"\233\001\n\020QuickSellItemCmd\0223\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\030SCENE_USER_ITEM_PROTOCMD"
    "\0227\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\030ITEMPAR"
    "AM_QUICK_SELLITEM\022\031\n\005items\030\003 \003(\0132\n.Cmd.S"
    "Item\"\276\001\n\023EnchantTransItemCmd\0223\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROTOCM"
    "D\0226\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\027ITEMPA"
    "RAM_ENCHANT_TRANS\022\021\n\tfrom_guid\030\003 \001(\t\022\017\n\007"
    "to_guid\030\004 \001(\t\022\026\n\007success\030\005 \001(\010:\005false\"\227\001"
    "\n\027QueryLotteryHeadItemCmd\0223\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\030SCENE_USER_ITEM_PROTOCMD\022:"
    "\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\033ITEMPARAM"
    "_QUERY_LOTTERYHEAD\022\013\n\003ids\030\003 \003(\r\"-\n\017Lotte"
    "ryRateInfo\022\014\n\004type\030\001 \001(\r\022\014\n\004rate\030\002 \001(\r\"\315"
    "\001\n\023LotteryRateQueryCmd\0223\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\030SCENE_USER_ITEM_PROTOCMD\022;\n\005p"
    "aram\030\002 \001(\0162\016.Cmd.ItemParam:\034ITEMPARAM_LO"
    "TTERY_RATE_QUERY\022\037\n\004type\030\003 \001(\0162\021.Cmd.ELo"
    "tteryType\022#\n\005infos\030\004 \003(\0132\024.Cmd.LotteryRa"
    "teInfo\"\273\001\n\023EquipComposeItemCmd\0223\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\030SCENE_USER_ITEM_PROTO"
    "CMD\0225\n\005param\030\002 \001(\0162\016.Cmd.ItemParam:\026ITEM"
    "PARAM_EQUIPCOMPOSE\022\r\n\002id\030\003 \001(\r:\0010\022\026\n\016mat"
    "erialequips\030\004 \003(\t\022\021\n\006retmsg\030\005 \001(\r:\0010*\233\013\n"
    "\tItemParam\022\031\n\025ITEMPARAM_PACKAGEITEM\020\001\022\033\n"
    "\027ITEMPARAM_PACKAGEUPDATE\020\002\022\025\n\021ITEMPARAM_"
    "ITEMUSE\020\003\022\031\n\025ITEMPARAM_PACKAGESORT\020\004\022\023\n\017"
    "ITEMPARAM_EQUIP\020\005\022\026\n\022ITEMPARAM_SELLITEM\020"
    "\006\022\033\n\027ITEMPARAM_EQUIPSTRENGTH\020\007\022\025\n\021ITEMPA"
    "RAM_PRODUCE\020\t\022\031\n\025ITEMPARAM_PRODUCEDONE\020\n"
    "\022\024\n\020ITEMPARAM_REFINE\020\013\022\027\n\023ITEMPARAM_DECO"
    "MPOSE\020\014\022\034\n\030ITEMPARAM_QUERYEQUIPDATA\020\r\022\030\n"
    "\024ITEMPARAM_BROWSEPACK\020\016\022\027\n\023ITEMPARAM_EQU"
    "IPCARD\020\017\022\026\n\022ITEMPARAM_ITEMSHOW\020\020\022\024\n\020ITEM"
    "PARAM_REPAIR\020\021\022\025\n\021ITEMPARAM_HINTNTF\020\022\022\025\n"
    "\021ITEMPARAM_ENCHANT\020\023\022\034\n\030ITEMPARAM_PROCES"
    "SENCHANT\020\024\022\033\n\027ITEMPARAM_EQUIPEXCHANGE\020\025\022"
    "\030\n\024ITEMPARAM_ONOFFSTORE\020\026\022\031\n\025ITEMPARAM_P"
    "ACKSLOTNTF\020\027\022\032\n\026ITEMPARAM_RESTOREEQUIP\020\030"
    "\022\026\n\022ITEMPARAM_USECOUNT\020\031\022\"\n\036ITEMPARAM_QU"
    "ERYDECOMPOSERESULT\020\033\022\032\n\026ITEMPARAM_EXCHAN"
    "GECARD\020\034\022\026\n\022ITEMPARAM_GETCOUNT\020\035\022\036\n\032ITEM"
    "PARAM_SAVE_LOVE_LETTER\020\036\022\032\n\026ITEMPARAM_IT"
    "EMDATASHOW\020\037\022\025\n\021ITEMPARAM_LOTTERY\020 \022\036\n\032I"
    "TEMPARAM_LOTTERY_RECOVERY\020!\022\037\n\033ITEMPARAM"
    "_QUERY_LOTTERYINFO\020\"\022\030\n\024ITEMPARAM_ITEMSH"
    "OW64\020#\022#\n\037ITEMPARAM_HIGHREFINE_MATCOMPOS"
    "E\020$\022\030\n\024ITEMPARAM_HIGHREFINE\020%\022\"\n\036ITEMPAR"
    "AM_NTF_HIGHTREFINE_DATA\020&\022%\n!ITEMPARAM_U"
    "PDATE_HIGHTREFINE_DATA\020\'\022\033\n\027ITEMPARAM_RE"
    "Q_QUOTA_LOG\020(\022\036\n\032ITEMPARAM_REQ_QUOTA_DET"
    "AIL\020)\022!\n\035ITEMPARAM_EQUIPPOSDATA_UPDATE\020*"
    "\022\033\n\027ITEMPARAM_USE_CODE_ITEM\020+\022\032\n\026ITEMPAR"
    "AM_ADD_JOBLEVEL\020,\022$\n ITEMPARAM_LOTTERY_G"
    "IVE_BUY_COUNT\020.\022 \n\034ITEMPARAM_GIVE_WEDDIN"
    "G_DRESS\020/\022\035\n\031ITEMPARAM_QUICK_STOREITEM\0200"
    "\022\034\n\030ITEMPARAM_QUICK_SELLITEM\0201\022\033\n\027ITEMPA"
    "RAM_ENCHANT_TRANS\0202\022\037\n\033ITEMPARAM_QUERY_L"
    "OTTERYHEAD\0203\022 \n\034ITEMPARAM_LOTTERY_RATE_Q"
    "UERY\0204\022\032\n\026ITEMPARAM_EQUIPCOMPOSE\0205*\277\002\n\tE"
    "PackType\022\021\n\rEPACKTYPE_MIN\020\000\022\022\n\016EPACKTYPE"
    "_MAIN\020\001\022\023\n\017EPACKTYPE_EQUIP\020\002\022\025\n\021EPACKTYP"
    "E_FASHION\020\003\022\032\n\026EPACKTYPE_FASHIONEQUIP\020\004\022"
    "\022\n\016EPACKTYPE_CARD\020\005\022\023\n\017EPACKTYPE_STORE\020\006"
    "\022\034\n\030EPACKTYPE_PERSONAL_STORE\020\007\022\027\n\023EPACKT"
    "YPE_TEMP_MAIN\020\010\022\024\n\020EPACKTYPE_BARROW\020\t\022\023\n"
    "\017EPACKTYPE_QUEST\020\n\022\022\n\016EPACKTYPE_FOOD\020\013\022\021"
    "\n\rEPACKTYPE_PET\020\014\022\021\n\rEPACKTYPE_MAX\020\r*\323\032\n"
    "\tEItemType\022\021\n\rEITEMTYPE_MIN\020\000\022\023\n\017EITEMTY"
    "PE_HONOR\020\n\022\027\n\023EITEMTYPE_STREASURE\020\024\022\026\n\022E"
    "ITEMTYPE_TREASURE\020\036\022\023\n\017EITEMTYPE_STUFF\020("
    "\022\030\n\024EITEMTYPE_STUFFNOCUT\020)\022\023\n\017EITEMTYPE_"
    "ARROW\020+\022\026\n\022EITEMTYPE_USESKILL\020,\022\027\n\023EITEM"
    "TYPE_GHOSTLAMP\020-\022\027\n\023EITEMTYPE_MULTITIME\020"
    ".\022\027\n\023EITEMTYPE_MONTHCARD\020/\022\030\n\024EITEMTYPE_"
    "QUEST_ONCE\0200\022\030\n\024EITEMTYPE_QUEST_TIME\0201\022\023"
    "\n\017EITEMTYPE_SHEET\0202\022\033\n\027EITEMTYPE_PET_WEA"
    "RSHEET\0203\022\034\n\030EITEMTYPE_PET_WEARUNLOCK\0204\022\025"
    "\n\021EITEMTYPE_CONSUME\020<\022\027\n\023EITEMTYPE_HAIRS"
    "TUFF\020=\022\027\n\023EITEMTYPE_CONSUME_2\020>\022\030\n\024EITEM"
    "TYPE_COLLECTION\020\?\022\023\n\017EITEMTYPE_RANGE\020@\022\026"
    "\n\022EITEMTYPE_FUNCTION\020A\022\026\n\022EITEMTYPE_ACTI"
    "VITY\020B\022\032\n\026EITEMTYPE_WEDDING_RING\020C\022\026\n\022EI"
    "TEMTYPE_MATERIAL\020F\022\024\n\020EITEMTYPE_LETTER\020G"
    "\022\027\n\023EITEMTYPE_GOLDAPPLE\020H\022\026\n\022EITEMTYPE_G"
    "ETSKILL\020I\022\030\n\024EITEMTYPE_PICKEFFECT\020J\022\024\n\020E"
    "ITEMTYPE_FRIEND\020K\022\032\n\026EITEMTYPE_PICKEFFEC"
    "T_1\020L\022\031\n\025EITEMTYPE_CARD_WEAPON\020Q\022\031\n\025EITE"
    "MTYPE_CARD_ASSIST\020R\022\031\n\025EITEMTYPE_CARD_AR"
    "MOUR\020S\022\027\n\023EITEMTYPE_CARD_ROBE\020T\022\030\n\024EITEM"
    "TYPE_CARD_SHOES\020U\022\034\n\030EITEMTYPE_CARD_ACCE"
    "SSORY\020V\022\027\n\023EITEMTYPE_CARD_HEAD\020W\022\023\n\017EITE"
    "MTYPE_MOUNT\020Z\022\024\n\020EITEMTYPE_BARROW\020[\022\021\n\rE"
    "ITEMTYPE_PET\020d\022\021\n\rEITEMTYPE_EGG\020e\022\027\n\023EIT"
    "EMTYPE_PET_EQUIP\020f\022\031\n\025EITEMTYPE_PET_CONS"
    "UME\020g\022\027\n\023EITEMTYPE_CARDPIECE\020n\022\030\n\024EITEMT"
    "YPE_EQUIPPIECE\020x\022\033\n\027EITEMTYPE_FASHION_PI"
    "ECE\020y\022\023\n\016EITEMTYPE_GOLD\020\202\001\022\025\n\020EITEMTYPE_"
    "SILVER\020\203\001\022\026\n\021EITEMTYPE_DIAMOND\020\204\001\022\025\n\020EIT"
    "EMTYPE_GARDEN\020\214\001\022\031\n\024EITEMTYPE_CONTRIBUTE"
    "\020\221\001\022\024\n\017EITEMTYPE_ASSET\020\222\001\022\031\n\024EITEMTYPE_F"
    "RIENDSHIP\020\223\001\022\033\n\026EITEMTYPE_MANUALSPOINT\020\217"
    "\001\022\023\n\016EITEMTYPE_MORA\020\220\001\022\026\n\021EITEMTYPE_PVPC"
    "OIN\020\215\001\022\024\n\017EITEMTYPE_QUOTA\020\225\001\022\026\n\021EITEMTYP"
    "E_BASEEXP\020\226\001\022\025\n\020EITEMTYPE_JOBEXP\020\227\001\022\025\n\020E"
    "ITEMTYPE_PURIFY\020\230\001\022\032\n\025EITEMTYPE_MANUALPO"
    "INT\020\231\001\022\026\n\021EITEMTYPE_LOTTERY\020\232\001\022\031\n\024EITEMT"
    "YPE_COOKER_EXP\020\233\001\022\031\n\024EITEMTYPE_GUILDHONO"
    "R\020\234\001\022\031\n\024EITEMTYPE_POLLY_COIN\020\235\001\022\030\n\023EITEM"
    "TYPE_QUESTITEM\020\240\001\022\035\n\030EITEMTYPE_QUESTITEM"
    "COUNT\020\245\001\022\033\n\026EITEMTYPE_WEDDING_CERT\020\246\001\022\035\n"
    "\030EITEMTYPE_WEDDING_INVITE\020\247\001\022\035\n\030EITEMTYP"
    "E_WEDDING_MANUAL\020\250\001\022\027\n\022EITEMTYPE_DEADCOI"
    "N\020\251\001\022\033\n\026EITEMTYPE_WEAPON_LANCE\020\252\001\022\033\n\026EIT"
    "EMTYPE_WEAPON_SWORD\020\264\001\022\032\n\025EITEMTYPE_WEAP"
    "ON_WAND\020\276\001\022\033\n\026EITEMTYPE_WEAPON_KNIFE\020\310\001\022"
    "\031\n\024EITEMTYPE_WEAPON_BOW\020\322\001\022\034\n\027EITEMTYPE_"
    "WEAPON_HAMMER\020\334\001\022\031\n\024EITEMTYPE_WEAPON_AXE"
    "\020\346\001\022\032\n\025EITEMTYPE_WEAPON_BOOK\020\360\001\022\034\n\027EITEM"
    "TYPE_WEAPON_DAGGER\020\372\001\022 \n\033EITEMTYPE_WEAPO"
    "N_INSTRUMEMT\020\204\002\022\032\n\025EITEMTYPE_WEAPON_WHIP"
    "\020\216\002\022\032\n\025EITEMTYPE_WEAPON_TUBE\020\230\002\022\032\n\025EITEM"
    "TYPE_WEAPON_FIST\020\242\002\022\035\n\030EITEMTYPE_ARTIFAC"
    "T_LANCE\020\302\003\022\035\n\030EITEMTYPE_ARTIFACT_SWORD\020\303"
    "\003\022\034\n\027EITEMTYPE_ARTIFACT_WAND\020\304\003\022\035\n\030EITEM"
    "TYPE_ARTIFACT_KNIFE\020\305\003\022\033\n\026EITEMTYPE_ARTI"
    "FACT_BOW\020\306\003\022\036\n\031EITEMTYPE_ARTIFACT_HAMMER"
    "\020\307\003\022\033\n\026EITEMTYPE_ARTIFACT_AXE\020\310\003\022\036\n\031EITE"
    "MTYPE_ARTIFACT_DAGGER\020\311\003\022\034\n\027EITEMTYPE_AR"
    "TIFACT_FIST\020\312\003\022\"\n\035EITEMTYPE_ARTIFACT_INS"
    "TRUMEMT\020\313\003\022\034\n\027EITEMTYPE_ARTIFACT_WHIP\020\314\003"
    "\022\034\n\027EITEMTYPE_ARTIFACT_BOOK\020\315\003\022\034\n\027EITEMT"
    "YPE_ARTIFACT_HEAD\020\345\003\022\034\n\027EITEMTYPE_ARTIFA"
    "CT_BACK\020\350\003\022\025\n\020EITEMTYPE_ARMOUR\020\364\003\022\035\n\030EIT"
    "EMTYPE_ARMOUR_FASHION\020\365\003\022\025\n\020EITEMTYPE_SH"
    "IELD\020\376\003\022\024\n\017EITEMTYPE_PEARL\020\377\003\022\024\n\017EITEMTY"
    "PE_EIKON\020\200\004\022\025\n\020EITEMTYPE_BRACER\020\201\004\022\027\n\022EI"
    "TEMTYPE_BRACELET\020\202\004\022\026\n\021EITEMTYPE_TROLLEY"
    "\020\203\004\022\023\n\016EITEMTYPE_ROBE\020\210\004\022\024\n\017EITEMTYPE_SH"
    "OES\020\222\004\022\030\n\023EITEMTYPE_ACCESSORY\020\234\004\022\030\n\023EITE"
    "MTYPE_FOOD_MEAT\020\331\004\022\030\n\023EITEMTYPE_FOOD_FIS"
    "H\020\332\004\022\035\n\030EITEMTYPE_FOOD_VEGETABLE\020\333\004\022\031\n\024E"
    "ITEMTYPE_FOOD_FRUIT\020\334\004\022\035\n\030EITEMTYPE_FOOD"
    "_SEASONING\020\335\004\022\023\n\016EITEMTYPE_FOOD\020\342\004\022\023\n\016EI"
    "TEMTYPE_HEAD\020\240\006\022\023\n\016EITEMTYPE_BACK\020\252\006\022\023\n\016"
    "EITEMTYPE_HAIR\020\264\006\022\030\n\023EITEMTYPE_HAIR_MALE"
    "\020\265\006\022\032\n\025EITEMTYPE_HAIR_FEMALE\020\266\006\022\027\n\022EITEM"
    "TYPE_EYE_MALE\020\267\006\022\031\n\024EITEMTYPE_EYE_FEMALE"
    "\020\270\006\022\023\n\016EITEMTYPE_FACE\020\276\006\022\023\n\016EITEMTYPE_TA"
    "IL\020\310\006\022\024\n\017EITEMTYPE_MOUTH\020\322\006\022\034\n\027EITEMTYPE"
    "_WATER_ELEMENT\020\351\007\022\027\n\022EITEMTYPE_PORTRAIT\020"
    "\260\t\022\024\n\017EITEMTYPE_FRAME\020\272\t\022\023\n\016EITEMTYPE_CO"
    "DE\020\240\037\022\027\n\022EITEMTYPE_KFC_CODE\020\350 \022\022\n\rEITEMT"
    "YPE_MAX\020\351 *\244\004\n\nEEquipType\022\022\n\016EEQUIPTYPE_"
    "MIN\020\000\022\025\n\021EEQUIPTYPE_WEAPON\020\001\022\025\n\021EEQUIPTY"
    "PE_SHIELD\020\003\022\025\n\021EEQUIPTYPE_ARMOUR\020\002\022\023\n\017EE"
    "QUIPTYPE_ROBE\020\004\022\024\n\020EEQUIPTYPE_SHOES\020\005\022\030\n"
    "\024EEQUIPTYPE_ACCESSORY\020\006\022\023\n\017EEQUIPTYPE_HE"
    "AD\020\010\022\023\n\017EEQUIPTYPE_BACK\020\t\022\023\n\017EEQUIPTYPE_"
    "FACE\020\n\022\023\n\017EEQUIPTYPE_TAIL\020\013\022\024\n\020EEQUIPTYP"
    "E_MOUNT\020\014\022\024\n\020EEQUIPTYPE_MOUTH\020\r\022\025\n\021EEQUI"
    "PTYPE_BARROW\020\016\022\024\n\020EEQUIPTYPE_PEARL\020\020\022\024\n\020"
    "EEQUIPTYPE_EIKON\020\021\022\027\n\023EEQUIPTYPE_BRACELE"
    "T\020\022\022\033\n\027EEQUIPTYPE_HANDBRACELET\020\023\022\026\n\022EEQU"
    "IPTYPE_TROLLEY\020\024\022\027\n\023EEQUIPTYPE_ARTIFACT\020"
    "\025\022\034\n\030EEQUIPTYPE_ARTIFACT_HEAD\020\026\022\034\n\030EEQUI"
    "PTYPE_ARTIFACT_BACK\020\027\022\022\n\016EEQUIPTYPE_MAX\020"
    "\030*[\n\tEBindType\022\021\n\rEBINDTYPE_MIN\020\000\022\022\n\016EBI"
    "NDTYPE_BIND\020\001\022\024\n\020EBINDTYPE_NOBIND\020\002\022\021\n\rE"
    "BINDTYPE_MAX\020\003*7\n\013EExpireType\022\023\n\017EEXPIRE"
    "TYPE_MIN\020\000\022\023\n\017EEXPIRETYPE_MAX\020\001*V\n\tERide"
    "Type\022\021\n\rERIDETYPE_MIN\020\000\022\020\n\014ERIDETYPE_ON\020"
    "\001\022\021\n\rERIDETYPE_OFF\020\002\022\021\n\rERIDETYPE_MAX\020\003*"
    "p\n\013ETragetType\022\022\n\016ETARGETTYPE_MY\020\000\022\024\n\020ET"
    "ARGETTYPE_USER\020\001\022\027\n\023ETARGETTYPE_MONSTER\020"
    "\002\022\036\n\032ETARGETTYPE_USERANDMONSTER\020\003*\206\001\n\014EE"
    "nchantType\022\024\n\020EENCHANTTYPE_MIN\020\000\022\030\n\024EENC"
    "HANTTYPE_PRIMARY\020\001\022\027\n\023EENCHANTTYPE_MEDIU"
    "M\020\002\022\027\n\023EENCHANTTYPE_SENIOR\020\003\022\024\n\020EENCHANT"
    "TYPE_MAX\020\004*\254\001\n\013ELetterType\022\024\n\020ELETTERTYP"
    "E_LOVE\020\001\022\035\n\031ELETTERTYPE_CONSTELLATION\020\002\022"
    "\031\n\025ELETTERTYPE_CHRISTMAS\020\003\022\026\n\022ELETTERTYP"
    "E_SPRING\020\004\022\027\n\023ELETTERTYPE_LOTTERY\020\005\022\034\n\030E"
    "LETTERTYPE_WEDDINGDRESS\020\006*\250\003\n\nEEquipOper"
    "\022\022\n\016EEQUIPOPER_MIN\020\000\022\021\n\rEEQUIPOPER_ON\020\001\022"
    "\022\n\016EEQUIPOPER_OFF\020\002\022\031\n\025EEQUIPOPER_PUTFAS"
    "HION\020\003\022\031\n\025EEQUIPOPER_OFFFASHION\020\004\022\027\n\023EEQ"
    "UIPOPER_PUTSTORE\020\005\022\027\n\023EEQUIPOPER_OFFSTOR"
    "E\020\006\022\025\n\021EEQUIPOPER_OFFALL\020\007\022\025\n\021EEQUIPOPER"
    "_OFFPOS\020\010\022\030\n\024EEQUIPOPER_PUTPSTORE\020\t\022\030\n\024E"
    "EQUIPOPER_OFFPSTORE\020\n\022\026\n\022EEQUIPOPER_OFFT"
    "EMP\020\013\022\030\n\024EEQUIPOPER_PUTBARROW\020\014\022\030\n\024EEQUI"
    "POPER_OFFBARROW\020\r\022\031\n\025EEQUIPOPER_DRESSUP_"
    "ON\020\016\022\032\n\026EEQUIPOPER_DRESSUP_OFF\020\017\022\022\n\016EEQU"
    "IPOPER_MAX\020\020*\262\003\n\tEEquipPos\022\021\n\rEEQUIPPOS_"
    "MIN\020\000\022\024\n\020EEQUIPPOS_WEAPON\020\007\022\024\n\020EEQUIPPOS"
    "_ARMOUR\020\002\022\024\n\020EEQUIPPOS_SHIELD\020\001\022\022\n\016EEQUI"
    "PPOS_ROBE\020\003\022\023\n\017EEQUIPPOS_SHOES\020\004\022\030\n\024EEQU"
    "IPPOS_ACCESSORY1\020\005\022\030\n\024EEQUIPPOS_ACCESSOR"
    "Y2\020\006\022\022\n\016EEQUIPPOS_HEAD\020\010\022\022\n\016EEQUIPPOS_BA"
    "CK\020\013\022\022\n\016EEQUIPPOS_FACE\020\t\022\022\n\016EEQUIPPOS_TA"
    "IL\020\014\022\023\n\017EEQUIPPOS_MOUNT\020\r\022\023\n\017EEQUIPPOS_M"
    "OUTH\020\n\022\024\n\020EEQUIPPOS_BARROW\020\016\022\026\n\022EEQUIPPO"
    "S_ARTIFACT\020\017\022\033\n\027EEQUIPPOS_ARTIFACT_HEAD\020"
    "\020\022\033\n\027EEQUIPPOS_ARTIFACT_BACK\020\021\022\021\n\rEEQUIP"
    "POS_MAX\020\022*\202\001\n\017EStrengthResult\022\027\n\023ESTRENG"
    "THRESULT_MIN\020\000\022\033\n\027ESTRENGTHRESULT_SUCCES"
    "S\020\001\022\036\n\032ESTRENGTHRESULT_NOMATERIAL\020\002\022\031\n\025E"
    "STRENGTHRESULT_MAXLV\020\003*p\n\rEStrengthType\022"
    "\025\n\021ESTRENGTHTYPE_MIN\020\000\022\030\n\024ESTRENGTHTYPE_"
    "NORMAL\020\001\022\027\n\023ESTRENGTHTYPE_GUILD\020\002\022\025\n\021EST"
    "RENGTHTYPE_MAX\020\003*\202\001\n\014EProduceType\022\024\n\020EPR"
    "ODUCETYPE_MIN\020\001\022\025\n\021EPRODUCETYPE_HEAD\020\002\022\026"
    "\n\022EPRODUCETYPE_EQUIP\020\003\022\027\n\023EPRODUCETYPE_T"
    "RADER\020\004\022\024\n\020EPRODUCETYPE_MAX\020\005*\316\001\n\rERefin"
    "eResult\022\025\n\021EREFINERESULT_MIN\020\000\022\031\n\025EREFIN"
    "ERESULT_SUCCESS\020\001\022\032\n\026EREFINERESULT_FAILS"
    "TAY\020\002\022\032\n\026EREFINERESULT_FAILBACK\020\003\022\035\n\031ERE"
    "FINERESULT_FAILSTAYDAM\020\004\022\035\n\031EREFINERESUL"
    "T_FAILBACKDAM\020\005\022\025\n\021EREFINERESULT_MAX\020\006*\352"
    "\001\n\020EDecomposeResult\022\030\n\024EDECOMPOSERESULT_"
    "MIN\020\000\022\031\n\025EDECOMPOSERESULT_FAIL\020\001\022\034\n\030EDEC"
    "OMPOSERESULT_SUCCESS\020\002\022 \n\034EDECOMPOSERESU"
    "LT_SUCCESS_BIG\020\003\022!\n\035EDECOMPOSERESULT_SUC"
    "CESS_SBIG\020\004\022$\n EDECOMPOSERESULT_SUCCESS_"
    "FANTASY\020\005\022\030\n\024EDECOMPOSERESULT_MAX\020\006*`\n\tE"
    "CardOper\022\021\n\rECARDOPER_MIN\020\000\022\025\n\021ECARDOPER"
    "_EQUIPON\020\001\022\026\n\022ECARDOPER_EQUIPOFF\020\002\022\021\n\rEC"
    "ARDOPER_MAX\020\003*L\n\nETradeType\022\022\n\016ETRADETYP"
    "E_ALL\020\000\022\024\n\020ETRADETYPE_TRADE\020\001\022\024\n\020ETRADET"
    "YPE_BOOTH\020\002*t\n\rEExchangeType\022\025\n\021EEXCHANG"
    "ETYPE_MIN\020\000\022\032\n\026EEXCHANGETYPE_EXCHANGE\020\001\022"
    "\031\n\025EEXCHANGETYPE_LEVELUP\020\002\022\025\n\021EEXCHANGET"
    "YPE_MAX\020\003*o\n\021EExchangeCardType\022\032\n\026EEXCHA"
    "NGECARDTYPE_DRAW\020\001\022\035\n\031EEXCHANGECARDTYPE_"
    "COMPOSE\020\002\022\037\n\033EEXCHANGECARDTYPE_DECOMPOSE"
    "\020\003*\267\001\n\014ELotteryType\022\024\n\020ELotteryType_Min\020"
    "\000\022\025\n\021ELotteryType_Head\020\001\022\026\n\022ELotteryType"
    "_Equip\020\002\022\025\n\021ELotteryType_Card\020\003\022\035\n\031ELott"
    "eryType_CatLitterBox\020\004\022\026\n\022ELotteryType_M"
    "agic\020\005\022\024\n\020ELotteryType_Max\020\006*\374\002\n\nEQuotaT"
    "ype\022\027\n\023EQuotaType_G_Charge\020\001\022\025\n\021EQuotaTy"
    "pe_C_Give\020\002\022\030\n\024EQuotaType_C_Auction\020\003\022\030\n"
    "\024EQuotaType_G_Auction\020\004\022\030\n\024EQuotaType_C_"
    "Lottery\020\005\022\031\n\025EQuotaType_C_GuildBox\020\006\022\035\n\031"
    "EQuotaType_C_WeddingDress\020\007\022\026\n\022EQuotaTyp"
    "e_L_Booth\020\010\022\026\n\022EQuotaType_U_Booth\020\t\022\026\n\022E"
    "QuotaType_C_Booth\020\n\022\033\n\027EQuotaType_L_Give"
    "_Trade\020\013\022\033\n\027EQuotaType_U_Give_Trade\020\014\022\033\n"
    "\027EQuotaType_C_Give_Trade\020\r\022\027\n\023EQuotaType"
    "_G_Reward\020\016", 23851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneItem.proto", &protobuf_RegisterTypes);
  ItemInfo::default_instance_ = new ItemInfo();
  RefineCompose::default_instance_ = new RefineCompose();
  EquipData::default_instance_ = new EquipData();
  CardData::default_instance_ = new CardData();
  EnchantAttr::default_instance_ = new EnchantAttr();
  EnchantExtra::default_instance_ = new EnchantExtra();
  EnchantData::default_instance_ = new EnchantData();
  RefineData::default_instance_ = new RefineData();
  EggEquip::default_instance_ = new EggEquip();
  PetEquipData::default_instance_ = new PetEquipData();
  EggData::default_instance_ = new EggData();
  LoveLetterData::default_instance_ = new LoveLetterData();
  CodeData::default_instance_ = new CodeData();
  WeddingData::default_instance_ = new WeddingData();
  SenderData::default_instance_ = new SenderData();
  ItemData::default_instance_ = new ItemData();
  PackageItem::default_instance_ = new PackageItem();
  PackageUpdate::default_instance_ = new PackageUpdate();
  ItemUse::default_instance_ = new ItemUse();
  SortInfo::default_instance_ = new SortInfo();
  PackageSort::default_instance_ = new PackageSort();
  Equip::default_instance_ = new Equip();
  SItem::default_instance_ = new SItem();
  SellItem::default_instance_ = new SellItem();
  EquipStrength::default_instance_ = new EquipStrength();
  Produce::default_instance_ = new Produce();
  ProduceDone::default_instance_ = new ProduceDone();
  EquipRefine::default_instance_ = new EquipRefine();
  EquipDecompose::default_instance_ = new EquipDecompose();
  DecomposeResult::default_instance_ = new DecomposeResult();
  QueryDecomposeResultItemCmd::default_instance_ = new QueryDecomposeResultItemCmd();
  QueryEquipData::default_instance_ = new QueryEquipData();
  BrowsePackage::default_instance_ = new BrowsePackage();
  EquipCard::default_instance_ = new EquipCard();
  ItemShow::default_instance_ = new ItemShow();
  ItemShow64::default_instance_ = new ItemShow64();
  EquipRepair::default_instance_ = new EquipRepair();
  HintNtf::default_instance_ = new HintNtf();
  EnchantEquip::default_instance_ = new EnchantEquip();
  TradeComposePair::default_instance_ = new TradeComposePair();
  TradeRefineData::default_instance_ = new TradeRefineData();
  TradeItemBaseInfo::default_instance_ = new TradeItemBaseInfo();
  ProcessEnchantItemCmd::default_instance_ = new ProcessEnchantItemCmd();
  EquipExchangeItemCmd::default_instance_ = new EquipExchangeItemCmd();
  OnOffStoreItemCmd::default_instance_ = new OnOffStoreItemCmd();
  PackSlotNtfItemCmd::default_instance_ = new PackSlotNtfItemCmd();
  RestoreEquipItemCmd::default_instance_ = new RestoreEquipItemCmd();
  UseCountItemCmd::default_instance_ = new UseCountItemCmd();
  ExchangeCardItemCmd::default_instance_ = new ExchangeCardItemCmd();
  GetCountItemCmd::default_instance_ = new GetCountItemCmd();
  SaveLoveLetterCmd::default_instance_ = new SaveLoveLetterCmd();
  ItemDataShow::default_instance_ = new ItemDataShow();
  LotteryCmd::default_instance_ = new LotteryCmd();
  LotteryRecoveryCmd::default_instance_ = new LotteryRecoveryCmd();
  LotterySubInfo::default_instance_ = new LotterySubInfo();
  LotteryInfo::default_instance_ = new LotteryInfo();
  QueryLotteryInfo::default_instance_ = new QueryLotteryInfo();
  QuotaLog::default_instance_ = new QuotaLog();
  QuotaDetail::default_instance_ = new QuotaDetail();
  ReqQuotaLogCmd::default_instance_ = new ReqQuotaLogCmd();
  ReqQuotaDetailCmd::default_instance_ = new ReqQuotaDetailCmd();
  EquipPosData::default_instance_ = new EquipPosData();
  EquipPosDataUpdate::default_instance_ = new EquipPosDataUpdate();
  MatItemInfo::default_instance_ = new MatItemInfo();
  HighRefineMatComposeCmd::default_instance_ = new HighRefineMatComposeCmd();
  HighRefineCmd::default_instance_ = new HighRefineCmd();
  HighRefineData::default_instance_ = new HighRefineData();
  NtfHighRefineDataCmd::default_instance_ = new NtfHighRefineDataCmd();
  UpdateHighRefineDataCmd::default_instance_ = new UpdateHighRefineDataCmd();
  UseCodItemCmd::default_instance_ = new UseCodItemCmd();
  AddJobLevelItemCmd::default_instance_ = new AddJobLevelItemCmd();
  LotterGivBuyCountCmd::default_instance_ = new LotterGivBuyCountCmd();
  GiveWeddingDressCmd::default_instance_ = new GiveWeddingDressCmd();
  QuickStoreItemCmd::default_instance_ = new QuickStoreItemCmd();
  QuickSellItemCmd::default_instance_ = new QuickSellItemCmd();
  EnchantTransItemCmd::default_instance_ = new EnchantTransItemCmd();
  QueryLotteryHeadItemCmd::default_instance_ = new QueryLotteryHeadItemCmd();
  LotteryRateInfo::default_instance_ = new LotteryRateInfo();
  LotteryRateQueryCmd::default_instance_ = new LotteryRateQueryCmd();
  EquipComposeItemCmd::default_instance_ = new EquipComposeItemCmd();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  RefineCompose::default_instance_->InitAsDefaultInstance();
  EquipData::default_instance_->InitAsDefaultInstance();
  CardData::default_instance_->InitAsDefaultInstance();
  EnchantAttr::default_instance_->InitAsDefaultInstance();
  EnchantExtra::default_instance_->InitAsDefaultInstance();
  EnchantData::default_instance_->InitAsDefaultInstance();
  RefineData::default_instance_->InitAsDefaultInstance();
  EggEquip::default_instance_->InitAsDefaultInstance();
  PetEquipData::default_instance_->InitAsDefaultInstance();
  EggData::default_instance_->InitAsDefaultInstance();
  LoveLetterData::default_instance_->InitAsDefaultInstance();
  CodeData::default_instance_->InitAsDefaultInstance();
  WeddingData::default_instance_->InitAsDefaultInstance();
  SenderData::default_instance_->InitAsDefaultInstance();
  ItemData::default_instance_->InitAsDefaultInstance();
  PackageItem::default_instance_->InitAsDefaultInstance();
  PackageUpdate::default_instance_->InitAsDefaultInstance();
  ItemUse::default_instance_->InitAsDefaultInstance();
  SortInfo::default_instance_->InitAsDefaultInstance();
  PackageSort::default_instance_->InitAsDefaultInstance();
  Equip::default_instance_->InitAsDefaultInstance();
  SItem::default_instance_->InitAsDefaultInstance();
  SellItem::default_instance_->InitAsDefaultInstance();
  EquipStrength::default_instance_->InitAsDefaultInstance();
  Produce::default_instance_->InitAsDefaultInstance();
  ProduceDone::default_instance_->InitAsDefaultInstance();
  EquipRefine::default_instance_->InitAsDefaultInstance();
  EquipDecompose::default_instance_->InitAsDefaultInstance();
  DecomposeResult::default_instance_->InitAsDefaultInstance();
  QueryDecomposeResultItemCmd::default_instance_->InitAsDefaultInstance();
  QueryEquipData::default_instance_->InitAsDefaultInstance();
  BrowsePackage::default_instance_->InitAsDefaultInstance();
  EquipCard::default_instance_->InitAsDefaultInstance();
  ItemShow::default_instance_->InitAsDefaultInstance();
  ItemShow64::default_instance_->InitAsDefaultInstance();
  EquipRepair::default_instance_->InitAsDefaultInstance();
  HintNtf::default_instance_->InitAsDefaultInstance();
  EnchantEquip::default_instance_->InitAsDefaultInstance();
  TradeComposePair::default_instance_->InitAsDefaultInstance();
  TradeRefineData::default_instance_->InitAsDefaultInstance();
  TradeItemBaseInfo::default_instance_->InitAsDefaultInstance();
  ProcessEnchantItemCmd::default_instance_->InitAsDefaultInstance();
  EquipExchangeItemCmd::default_instance_->InitAsDefaultInstance();
  OnOffStoreItemCmd::default_instance_->InitAsDefaultInstance();
  PackSlotNtfItemCmd::default_instance_->InitAsDefaultInstance();
  RestoreEquipItemCmd::default_instance_->InitAsDefaultInstance();
  UseCountItemCmd::default_instance_->InitAsDefaultInstance();
  ExchangeCardItemCmd::default_instance_->InitAsDefaultInstance();
  GetCountItemCmd::default_instance_->InitAsDefaultInstance();
  SaveLoveLetterCmd::default_instance_->InitAsDefaultInstance();
  ItemDataShow::default_instance_->InitAsDefaultInstance();
  LotteryCmd::default_instance_->InitAsDefaultInstance();
  LotteryRecoveryCmd::default_instance_->InitAsDefaultInstance();
  LotterySubInfo::default_instance_->InitAsDefaultInstance();
  LotteryInfo::default_instance_->InitAsDefaultInstance();
  QueryLotteryInfo::default_instance_->InitAsDefaultInstance();
  QuotaLog::default_instance_->InitAsDefaultInstance();
  QuotaDetail::default_instance_->InitAsDefaultInstance();
  ReqQuotaLogCmd::default_instance_->InitAsDefaultInstance();
  ReqQuotaDetailCmd::default_instance_->InitAsDefaultInstance();
  EquipPosData::default_instance_->InitAsDefaultInstance();
  EquipPosDataUpdate::default_instance_->InitAsDefaultInstance();
  MatItemInfo::default_instance_->InitAsDefaultInstance();
  HighRefineMatComposeCmd::default_instance_->InitAsDefaultInstance();
  HighRefineCmd::default_instance_->InitAsDefaultInstance();
  HighRefineData::default_instance_->InitAsDefaultInstance();
  NtfHighRefineDataCmd::default_instance_->InitAsDefaultInstance();
  UpdateHighRefineDataCmd::default_instance_->InitAsDefaultInstance();
  UseCodItemCmd::default_instance_->InitAsDefaultInstance();
  AddJobLevelItemCmd::default_instance_->InitAsDefaultInstance();
  LotterGivBuyCountCmd::default_instance_->InitAsDefaultInstance();
  GiveWeddingDressCmd::default_instance_->InitAsDefaultInstance();
  QuickStoreItemCmd::default_instance_->InitAsDefaultInstance();
  QuickSellItemCmd::default_instance_->InitAsDefaultInstance();
  EnchantTransItemCmd::default_instance_->InitAsDefaultInstance();
  QueryLotteryHeadItemCmd::default_instance_->InitAsDefaultInstance();
  LotteryRateInfo::default_instance_->InitAsDefaultInstance();
  LotteryRateQueryCmd::default_instance_->InitAsDefaultInstance();
  EquipComposeItemCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneItem_2eproto {
  StaticDescriptorInitializer_SceneItem_2eproto() {
    protobuf_AddDesc_SceneItem_2eproto();
  }
} static_descriptor_initializer_SceneItem_2eproto_;
const ::google::protobuf::EnumDescriptor* ItemParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemParam_descriptor_;
}
bool ItemParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPackType_descriptor_;
}
bool EPackType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemType_descriptor_;
}
bool EItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 90:
    case 91:
    case 100:
    case 101:
    case 102:
    case 103:
    case 110:
    case 120:
    case 121:
    case 130:
    case 131:
    case 132:
    case 140:
    case 141:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 160:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 180:
    case 190:
    case 200:
    case 210:
    case 220:
    case 230:
    case 240:
    case 250:
    case 260:
    case 270:
    case 280:
    case 290:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 485:
    case 488:
    case 500:
    case 501:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 520:
    case 530:
    case 540:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 610:
    case 800:
    case 810:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 830:
    case 840:
    case 850:
    case 1001:
    case 1200:
    case 1210:
    case 4000:
    case 4200:
    case 4201:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipType_descriptor_;
}
bool EEquipType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBindType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBindType_descriptor_;
}
bool EBindType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EExpireType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EExpireType_descriptor_;
}
bool EExpireType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERideType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERideType_descriptor_;
}
bool ERideType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETragetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETragetType_descriptor_;
}
bool ETragetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEnchantType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEnchantType_descriptor_;
}
bool EEnchantType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELetterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELetterType_descriptor_;
}
bool ELetterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipOper_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipOper_descriptor_;
}
bool EEquipOper_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipPos_descriptor_;
}
bool EEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStrengthResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStrengthResult_descriptor_;
}
bool EStrengthResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStrengthType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStrengthType_descriptor_;
}
bool EStrengthType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProduceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProduceType_descriptor_;
}
bool EProduceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERefineResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERefineResult_descriptor_;
}
bool ERefineResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDecomposeResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDecomposeResult_descriptor_;
}
bool EDecomposeResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECardOper_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECardOper_descriptor_;
}
bool ECardOper_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETradeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETradeType_descriptor_;
}
bool ETradeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EExchangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EExchangeType_descriptor_;
}
bool EExchangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EExchangeCardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EExchangeCardType_descriptor_;
}
bool EExchangeCardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELotteryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELotteryType_descriptor_;
}
bool ELotteryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuotaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuotaType_descriptor_;
}
bool EQuotaType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kGuidFieldNumber;
const int ItemInfo::kIdFieldNumber;
const int ItemInfo::kCountFieldNumber;
const int ItemInfo::kIndexFieldNumber;
const int ItemInfo::kCreatetimeFieldNumber;
const int ItemInfo::kCdFieldNumber;
const int ItemInfo::kTypeFieldNumber;
const int ItemInfo::kBindFieldNumber;
const int ItemInfo::kExpireFieldNumber;
const int ItemInfo::kQualityFieldNumber;
const int ItemInfo::kEquipTypeFieldNumber;
const int ItemInfo::kSourceFieldNumber;
const int ItemInfo::kIsnewFieldNumber;
const int ItemInfo::kMaxcardslotFieldNumber;
const int ItemInfo::kIshintFieldNumber;
const int ItemInfo::kIsactiveFieldNumber;
const int ItemInfo::kSourceNpcFieldNumber;
const int ItemInfo::kRefinelvFieldNumber;
const int ItemInfo::kChargemoneyFieldNumber;
const int ItemInfo::kOvertimeFieldNumber;
const int ItemInfo::kQuotaFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemInfo)
}

void ItemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  count_ = 1u;
  index_ = 0u;
  createtime_ = 0u;
  cd_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  bind_ = 0;
  expire_ = 0;
  quality_ = 0;
  equiptype_ = 0;
  source_ = 1;
  isnew_ = false;
  maxcardslot_ = 0u;
  ishint_ = false;
  isactive_ = false;
  source_npc_ = 0u;
  refinelv_ = 0u;
  chargemoney_ = 0u;
  overtime_ = 0u;
  quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(index_, bind_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    id_ = 0u;
    count_ = 1u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(expire_, equiptype_);
    ZR_(maxcardslot_, isactive_);
    source_ = 1;
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(source_npc_, quota_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cd;
        break;
      }

      // optional uint64 cd = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .Cmd.EItemType type = 7 [default = EITEMTYPE_MIN];
      case 7: {
        if (tag == 56) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EItemType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bind;
        break;
      }

      // optional .Cmd.EBindType bind = 8 [default = EBINDTYPE_MIN];
      case 8: {
        if (tag == 64) {
         parse_bind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBindType_IsValid(value)) {
            set_bind(static_cast< ::Cmd::EBindType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_expire;
        break;
      }

      // optional .Cmd.EExpireType expire = 9 [default = EEXPIRETYPE_MIN];
      case 9: {
        if (tag == 72) {
         parse_expire:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EExpireType_IsValid(value)) {
            set_expire(static_cast< ::Cmd::EExpireType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }

      // optional .Cmd.EQualityType quality = 10 [default = EQUALITYTYPE_MIN];
      case 10: {
        if (tag == 80) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQualityType_IsValid(value)) {
            set_quality(static_cast< ::Cmd::EQualityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_equipType;
        break;
      }

      // optional .Cmd.EEquipType equipType = 11 [default = EEQUIPTYPE_MIN];
      case 11: {
        if (tag == 88) {
         parse_equipType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipType_IsValid(value)) {
            set_equiptype(static_cast< ::Cmd::EEquipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 12 [default = ESOURCE_NORMAL];
      case 12: {
        if (tag == 96) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_isnew;
        break;
      }

      // optional bool isnew = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_isnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_maxcardslot;
        break;
      }

      // optional uint32 maxcardslot = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_maxcardslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcardslot_)));
          set_has_maxcardslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ishint;
        break;
      }

      // optional bool ishint = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_ishint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishint_)));
          set_has_ishint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_isactive;
        break;
      }

      // optional bool isactive = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_isactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_source_npc;
        break;
      }

      // optional uint32 source_npc = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_source_npc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_npc_)));
          set_has_source_npc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_refinelv;
        break;
      }

      // optional uint32 refinelv = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_chargemoney;
        break;
      }

      // optional uint32 chargemoney = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_chargemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chargemoney_)));
          set_has_chargemoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_overtime;
        break;
      }

      // optional uint32 overtime = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_overtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overtime_)));
          set_has_overtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemInfo)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 count = 3 [default = 1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 index = 4 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // optional uint32 createtime = 5 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->createtime(), output);
  }

  // optional uint64 cd = 6 [default = 0];
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cd(), output);
  }

  // optional .Cmd.EItemType type = 7 [default = EITEMTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional .Cmd.EBindType bind = 8 [default = EBINDTYPE_MIN];
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bind(), output);
  }

  // optional .Cmd.EExpireType expire = 9 [default = EEXPIRETYPE_MIN];
  if (has_expire()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->expire(), output);
  }

  // optional .Cmd.EQualityType quality = 10 [default = EQUALITYTYPE_MIN];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->quality(), output);
  }

  // optional .Cmd.EEquipType equipType = 11 [default = EEQUIPTYPE_MIN];
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->equiptype(), output);
  }

  // optional .Cmd.ESource source = 12 [default = ESOURCE_NORMAL];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->source(), output);
  }

  // optional bool isnew = 13 [default = false];
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isnew(), output);
  }

  // optional uint32 maxcardslot = 14 [default = 0];
  if (has_maxcardslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->maxcardslot(), output);
  }

  // optional bool ishint = 15 [default = false];
  if (has_ishint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ishint(), output);
  }

  // optional bool isactive = 16 [default = false];
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isactive(), output);
  }

  // optional uint32 source_npc = 17 [default = 0];
  if (has_source_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->source_npc(), output);
  }

  // optional uint32 refinelv = 18 [default = 0];
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->refinelv(), output);
  }

  // optional uint32 chargemoney = 19 [default = 0];
  if (has_chargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->chargemoney(), output);
  }

  // optional uint32 overtime = 20 [default = 0];
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->overtime(), output);
  }

  // optional uint64 quota = 21 [default = 0];
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemInfo)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 count = 3 [default = 1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 index = 4 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // optional uint32 createtime = 5 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->createtime(), target);
  }

  // optional uint64 cd = 6 [default = 0];
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cd(), target);
  }

  // optional .Cmd.EItemType type = 7 [default = EITEMTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional .Cmd.EBindType bind = 8 [default = EBINDTYPE_MIN];
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bind(), target);
  }

  // optional .Cmd.EExpireType expire = 9 [default = EEXPIRETYPE_MIN];
  if (has_expire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->expire(), target);
  }

  // optional .Cmd.EQualityType quality = 10 [default = EQUALITYTYPE_MIN];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->quality(), target);
  }

  // optional .Cmd.EEquipType equipType = 11 [default = EEQUIPTYPE_MIN];
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->equiptype(), target);
  }

  // optional .Cmd.ESource source = 12 [default = ESOURCE_NORMAL];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->source(), target);
  }

  // optional bool isnew = 13 [default = false];
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isnew(), target);
  }

  // optional uint32 maxcardslot = 14 [default = 0];
  if (has_maxcardslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->maxcardslot(), target);
  }

  // optional bool ishint = 15 [default = false];
  if (has_ishint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->ishint(), target);
  }

  // optional bool isactive = 16 [default = false];
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isactive(), target);
  }

  // optional uint32 source_npc = 17 [default = 0];
  if (has_source_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->source_npc(), target);
  }

  // optional uint32 refinelv = 18 [default = 0];
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->refinelv(), target);
  }

  // optional uint32 chargemoney = 19 [default = 0];
  if (has_chargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->chargemoney(), target);
  }

  // optional uint32 overtime = 20 [default = 0];
  if (has_overtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->overtime(), target);
  }

  // optional uint64 quota = 21 [default = 0];
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 id = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 3 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 index = 4 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 createtime = 5 [default = 0];
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint64 cd = 6 [default = 0];
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd());
    }

    // optional .Cmd.EItemType type = 7 [default = EITEMTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.EBindType bind = 8 [default = EBINDTYPE_MIN];
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bind());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EExpireType expire = 9 [default = EEXPIRETYPE_MIN];
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expire());
    }

    // optional .Cmd.EQualityType quality = 10 [default = EQUALITYTYPE_MIN];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional .Cmd.EEquipType equipType = 11 [default = EEQUIPTYPE_MIN];
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equiptype());
    }

    // optional .Cmd.ESource source = 12 [default = ESOURCE_NORMAL];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional bool isnew = 13 [default = false];
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // optional uint32 maxcardslot = 14 [default = 0];
    if (has_maxcardslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcardslot());
    }

    // optional bool ishint = 15 [default = false];
    if (has_ishint()) {
      total_size += 1 + 1;
    }

    // optional bool isactive = 16 [default = false];
    if (has_isactive()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 source_npc = 17 [default = 0];
    if (has_source_npc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_npc());
    }

    // optional uint32 refinelv = 18 [default = 0];
    if (has_refinelv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

    // optional uint32 chargemoney = 19 [default = 0];
    if (has_chargemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chargemoney());
    }

    // optional uint32 overtime = 20 [default = 0];
    if (has_overtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overtime());
    }

    // optional uint64 quota = 21 [default = 0];
    if (has_quota()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expire()) {
      set_expire(from.expire());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_maxcardslot()) {
      set_maxcardslot(from.maxcardslot());
    }
    if (from.has_ishint()) {
      set_ishint(from.ishint());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_source_npc()) {
      set_source_npc(from.source_npc());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_chargemoney()) {
      set_chargemoney(from.chargemoney());
    }
    if (from.has_overtime()) {
      set_overtime(from.overtime());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(index_, other->index_);
    std::swap(createtime_, other->createtime_);
    std::swap(cd_, other->cd_);
    std::swap(type_, other->type_);
    std::swap(bind_, other->bind_);
    std::swap(expire_, other->expire_);
    std::swap(quality_, other->quality_);
    std::swap(equiptype_, other->equiptype_);
    std::swap(source_, other->source_);
    std::swap(isnew_, other->isnew_);
    std::swap(maxcardslot_, other->maxcardslot_);
    std::swap(ishint_, other->ishint_);
    std::swap(isactive_, other->isactive_);
    std::swap(source_npc_, other->source_npc_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(chargemoney_, other->chargemoney_);
    std::swap(overtime_, other->overtime_);
    std::swap(quota_, other->quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefineCompose::kIdFieldNumber;
const int RefineCompose::kNumFieldNumber;
#endif  // !_MSC_VER

RefineCompose::RefineCompose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RefineCompose)
}

void RefineCompose::InitAsDefaultInstance() {
}

RefineCompose::RefineCompose(const RefineCompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RefineCompose)
}

void RefineCompose::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefineCompose::~RefineCompose() {
  // @@protoc_insertion_point(destructor:Cmd.RefineCompose)
  SharedDtor();
}

void RefineCompose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefineCompose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefineCompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefineCompose_descriptor_;
}

const RefineCompose& RefineCompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

RefineCompose* RefineCompose::default_instance_ = NULL;

RefineCompose* RefineCompose::New() const {
  return new RefineCompose;
}

void RefineCompose::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RefineCompose*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefineCompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RefineCompose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RefineCompose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RefineCompose)
  return false;
#undef DO_
}

void RefineCompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RefineCompose)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RefineCompose)
}

::google::protobuf::uint8* RefineCompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RefineCompose)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RefineCompose)
  return target;
}

int RefineCompose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefineCompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefineCompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefineCompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefineCompose::MergeFrom(const RefineCompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefineCompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefineCompose::CopyFrom(const RefineCompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefineCompose::IsInitialized() const {

  return true;
}

void RefineCompose::Swap(RefineCompose* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefineCompose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefineCompose_descriptor_;
  metadata.reflection = RefineCompose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipData::kStrengthlvFieldNumber;
const int EquipData::kRefinelvFieldNumber;
const int EquipData::kStrengthCostFieldNumber;
const int EquipData::kRefineComposeFieldNumber;
const int EquipData::kCardslotFieldNumber;
const int EquipData::kBuffidFieldNumber;
const int EquipData::kDamageFieldNumber;
const int EquipData::kLvFieldNumber;
const int EquipData::kColorFieldNumber;
const int EquipData::kBreakstarttimeFieldNumber;
const int EquipData::kBreakendtimeFieldNumber;
const int EquipData::kStrengthlv2FieldNumber;
const int EquipData::kStrengthlv2CostFieldNumber;
#endif  // !_MSC_VER

EquipData::EquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipData)
}

void EquipData::InitAsDefaultInstance() {
}

EquipData::EquipData(const EquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipData)
}

void EquipData::SharedCtor() {
  _cached_size_ = 0;
  strengthlv_ = 0u;
  refinelv_ = 0u;
  strengthcost_ = 0u;
  cardslot_ = 0u;
  damage_ = false;
  lv_ = 0u;
  color_ = 0u;
  breakstarttime_ = 0u;
  breakendtime_ = 0u;
  strengthlv2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipData::~EquipData() {
  // @@protoc_insertion_point(destructor:Cmd.EquipData)
  SharedDtor();
}

void EquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipData_descriptor_;
}

const EquipData& EquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipData* EquipData::default_instance_ = NULL;

EquipData* EquipData::New() const {
  return new EquipData;
}

void EquipData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 215) {
    ZR_(strengthlv_, refinelv_);
    ZR_(strengthcost_, cardslot_);
    ZR_(damage_, lv_);
  }
  ZR_(color_, strengthlv2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  refinecompose_.Clear();
  buffid_.Clear();
  strengthlv2cost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 strengthlv = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strengthlv_)));
          set_has_strengthlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_refinelv;
        break;
      }

      // optional uint32 refinelv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_strengthCost;
        break;
      }

      // optional uint32 strengthCost = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_strengthCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strengthcost_)));
          set_has_strengthcost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_refineCompose;
        break;
      }

      // repeated .Cmd.RefineCompose refineCompose = 4;
      case 4: {
        if (tag == 34) {
         parse_refineCompose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refinecompose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_refineCompose;
        if (input->ExpectTag(40)) goto parse_cardslot;
        break;
      }

      // optional uint32 cardslot = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_cardslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardslot_)));
          set_has_cardslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buffid;
        break;
      }

      // repeated uint32 buffid = 6;
      case 6: {
        if (tag == 48) {
         parse_buffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_buffid())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buffid;
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }

      // optional bool damage = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_color;
        break;
      }

      // optional uint32 color = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_breakstarttime;
        break;
      }

      // optional uint32 breakstarttime = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_breakstarttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakstarttime_)));
          set_has_breakstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_breakendtime;
        break;
      }

      // optional uint32 breakendtime = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_breakendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakendtime_)));
          set_has_breakendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_strengthlv2;
        break;
      }

      // optional uint32 strengthlv2 = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_strengthlv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strengthlv2_)));
          set_has_strengthlv2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_strengthlv2cost;
        break;
      }

      // repeated .Cmd.ItemInfo strengthlv2cost = 13;
      case 13: {
        if (tag == 106) {
         parse_strengthlv2cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strengthlv2cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_strengthlv2cost;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipData)
  return false;
#undef DO_
}

void EquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipData)
  // optional uint32 strengthlv = 1 [default = 0];
  if (has_strengthlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strengthlv(), output);
  }

  // optional uint32 refinelv = 2 [default = 0];
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refinelv(), output);
  }

  // optional uint32 strengthCost = 3 [default = 0];
  if (has_strengthcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->strengthcost(), output);
  }

  // repeated .Cmd.RefineCompose refineCompose = 4;
  for (int i = 0; i < this->refinecompose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->refinecompose(i), output);
  }

  // optional uint32 cardslot = 5 [default = 0];
  if (has_cardslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cardslot(), output);
  }

  // repeated uint32 buffid = 6;
  for (int i = 0; i < this->buffid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->buffid(i), output);
  }

  // optional bool damage = 7 [default = false];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->damage(), output);
  }

  // optional uint32 lv = 8 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lv(), output);
  }

  // optional uint32 color = 9 [default = 0];
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->color(), output);
  }

  // optional uint32 breakstarttime = 10 [default = 0];
  if (has_breakstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->breakstarttime(), output);
  }

  // optional uint32 breakendtime = 11 [default = 0];
  if (has_breakendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->breakendtime(), output);
  }

  // optional uint32 strengthlv2 = 12 [default = 0];
  if (has_strengthlv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->strengthlv2(), output);
  }

  // repeated .Cmd.ItemInfo strengthlv2cost = 13;
  for (int i = 0; i < this->strengthlv2cost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->strengthlv2cost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipData)
}

::google::protobuf::uint8* EquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipData)
  // optional uint32 strengthlv = 1 [default = 0];
  if (has_strengthlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strengthlv(), target);
  }

  // optional uint32 refinelv = 2 [default = 0];
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refinelv(), target);
  }

  // optional uint32 strengthCost = 3 [default = 0];
  if (has_strengthcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->strengthcost(), target);
  }

  // repeated .Cmd.RefineCompose refineCompose = 4;
  for (int i = 0; i < this->refinecompose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->refinecompose(i), target);
  }

  // optional uint32 cardslot = 5 [default = 0];
  if (has_cardslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cardslot(), target);
  }

  // repeated uint32 buffid = 6;
  for (int i = 0; i < this->buffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->buffid(i), target);
  }

  // optional bool damage = 7 [default = false];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->damage(), target);
  }

  // optional uint32 lv = 8 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lv(), target);
  }

  // optional uint32 color = 9 [default = 0];
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->color(), target);
  }

  // optional uint32 breakstarttime = 10 [default = 0];
  if (has_breakstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->breakstarttime(), target);
  }

  // optional uint32 breakendtime = 11 [default = 0];
  if (has_breakendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->breakendtime(), target);
  }

  // optional uint32 strengthlv2 = 12 [default = 0];
  if (has_strengthlv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->strengthlv2(), target);
  }

  // repeated .Cmd.ItemInfo strengthlv2cost = 13;
  for (int i = 0; i < this->strengthlv2cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->strengthlv2cost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipData)
  return target;
}

int EquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 strengthlv = 1 [default = 0];
    if (has_strengthlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strengthlv());
    }

    // optional uint32 refinelv = 2 [default = 0];
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

    // optional uint32 strengthCost = 3 [default = 0];
    if (has_strengthcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strengthcost());
    }

    // optional uint32 cardslot = 5 [default = 0];
    if (has_cardslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardslot());
    }

    // optional bool damage = 7 [default = false];
    if (has_damage()) {
      total_size += 1 + 1;
    }

    // optional uint32 lv = 8 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 color = 9 [default = 0];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 breakstarttime = 10 [default = 0];
    if (has_breakstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakstarttime());
    }

    // optional uint32 breakendtime = 11 [default = 0];
    if (has_breakendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakendtime());
    }

    // optional uint32 strengthlv2 = 12 [default = 0];
    if (has_strengthlv2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strengthlv2());
    }

  }
  // repeated .Cmd.RefineCompose refineCompose = 4;
  total_size += 1 * this->refinecompose_size();
  for (int i = 0; i < this->refinecompose_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refinecompose(i));
  }

  // repeated uint32 buffid = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffid(i));
    }
    total_size += 1 * this->buffid_size() + data_size;
  }

  // repeated .Cmd.ItemInfo strengthlv2cost = 13;
  total_size += 1 * this->strengthlv2cost_size();
  for (int i = 0; i < this->strengthlv2cost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strengthlv2cost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipData::MergeFrom(const EquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  refinecompose_.MergeFrom(from.refinecompose_);
  buffid_.MergeFrom(from.buffid_);
  strengthlv2cost_.MergeFrom(from.strengthlv2cost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strengthlv()) {
      set_strengthlv(from.strengthlv());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_strengthcost()) {
      set_strengthcost(from.strengthcost());
    }
    if (from.has_cardslot()) {
      set_cardslot(from.cardslot());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_breakstarttime()) {
      set_breakstarttime(from.breakstarttime());
    }
    if (from.has_breakendtime()) {
      set_breakendtime(from.breakendtime());
    }
    if (from.has_strengthlv2()) {
      set_strengthlv2(from.strengthlv2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipData::CopyFrom(const EquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipData::IsInitialized() const {

  return true;
}

void EquipData::Swap(EquipData* other) {
  if (other != this) {
    std::swap(strengthlv_, other->strengthlv_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(strengthcost_, other->strengthcost_);
    refinecompose_.Swap(&other->refinecompose_);
    std::swap(cardslot_, other->cardslot_);
    buffid_.Swap(&other->buffid_);
    std::swap(damage_, other->damage_);
    std::swap(lv_, other->lv_);
    std::swap(color_, other->color_);
    std::swap(breakstarttime_, other->breakstarttime_);
    std::swap(breakendtime_, other->breakendtime_);
    std::swap(strengthlv2_, other->strengthlv2_);
    strengthlv2cost_.Swap(&other->strengthlv2cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipData_descriptor_;
  metadata.reflection = EquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardData::kGuidFieldNumber;
const int CardData::kIdFieldNumber;
const int CardData::kPosFieldNumber;
#endif  // !_MSC_VER

CardData::CardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CardData)
}

void CardData::InitAsDefaultInstance() {
}

CardData::CardData(const CardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CardData)
}

void CardData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardData::~CardData() {
  // @@protoc_insertion_point(destructor:Cmd.CardData)
  SharedDtor();
}

void CardData::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void CardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardData_descriptor_;
}

const CardData& CardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

CardData* CardData::default_instance_ = NULL;

CardData* CardData::New() const {
  return new CardData;
}

void CardData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CardData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, pos_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CardData)
  return false;
#undef DO_
}

void CardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CardData)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 pos = 3 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CardData)
}

::google::protobuf::uint8* CardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CardData)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 pos = 3 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CardData)
  return target;
}

int CardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 id = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 pos = 3 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardData::MergeFrom(const CardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardData::CopyFrom(const CardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardData::IsInitialized() const {

  return true;
}

void CardData::Swap(CardData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardData_descriptor_;
  metadata.reflection = CardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantAttr::kTypeFieldNumber;
const int EnchantAttr::kValueFieldNumber;
#endif  // !_MSC_VER

EnchantAttr::EnchantAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnchantAttr)
}

void EnchantAttr::InitAsDefaultInstance() {
}

EnchantAttr::EnchantAttr(const EnchantAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnchantAttr)
}

void EnchantAttr::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantAttr::~EnchantAttr() {
  // @@protoc_insertion_point(destructor:Cmd.EnchantAttr)
  SharedDtor();
}

void EnchantAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnchantAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantAttr_descriptor_;
}

const EnchantAttr& EnchantAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EnchantAttr* EnchantAttr::default_instance_ = NULL;

EnchantAttr* EnchantAttr::New() const {
  return new EnchantAttr;
}

void EnchantAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnchantAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnchantAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnchantAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAttrType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAttrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnchantAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnchantAttr)
  return false;
#undef DO_
}

void EnchantAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnchantAttr)
  // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnchantAttr)
}

::google::protobuf::uint8* EnchantAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnchantAttr)
  // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnchantAttr)
  return target;
}

int EnchantAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnchantAttr::MergeFrom(const EnchantAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnchantAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnchantAttr::CopyFrom(const EnchantAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnchantAttr::IsInitialized() const {

  return true;
}

void EnchantAttr::Swap(EnchantAttr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnchantAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantAttr_descriptor_;
  metadata.reflection = EnchantAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantExtra::kConfigidFieldNumber;
const int EnchantExtra::kBuffidFieldNumber;
#endif  // !_MSC_VER

EnchantExtra::EnchantExtra()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnchantExtra)
}

void EnchantExtra::InitAsDefaultInstance() {
}

EnchantExtra::EnchantExtra(const EnchantExtra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnchantExtra)
}

void EnchantExtra::SharedCtor() {
  _cached_size_ = 0;
  configid_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantExtra::~EnchantExtra() {
  // @@protoc_insertion_point(destructor:Cmd.EnchantExtra)
  SharedDtor();
}

void EnchantExtra::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnchantExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantExtra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantExtra_descriptor_;
}

const EnchantExtra& EnchantExtra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EnchantExtra* EnchantExtra::default_instance_ = NULL;

EnchantExtra* EnchantExtra::New() const {
  return new EnchantExtra;
}

void EnchantExtra::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnchantExtra*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(configid_, buffid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnchantExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnchantExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 configid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buffid;
        break;
      }

      // optional uint32 buffid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_buffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnchantExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnchantExtra)
  return false;
#undef DO_
}

void EnchantExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnchantExtra)
  // optional uint32 configid = 1 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->configid(), output);
  }

  // optional uint32 buffid = 2 [default = 0];
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnchantExtra)
}

::google::protobuf::uint8* EnchantExtra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnchantExtra)
  // optional uint32 configid = 1 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->configid(), target);
  }

  // optional uint32 buffid = 2 [default = 0];
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnchantExtra)
  return target;
}

int EnchantExtra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 configid = 1 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint32 buffid = 2 [default = 0];
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantExtra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantExtra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantExtra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnchantExtra::MergeFrom(const EnchantExtra& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnchantExtra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnchantExtra::CopyFrom(const EnchantExtra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnchantExtra::IsInitialized() const {

  return true;
}

void EnchantExtra::Swap(EnchantExtra* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnchantExtra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantExtra_descriptor_;
  metadata.reflection = EnchantExtra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantData::kTypeFieldNumber;
const int EnchantData::kAttrsFieldNumber;
const int EnchantData::kExtrasFieldNumber;
const int EnchantData::kPatchFieldNumber;
#endif  // !_MSC_VER

EnchantData::EnchantData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnchantData)
}

void EnchantData::InitAsDefaultInstance() {
}

EnchantData::EnchantData(const EnchantData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnchantData)
}

void EnchantData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantData::~EnchantData() {
  // @@protoc_insertion_point(destructor:Cmd.EnchantData)
  SharedDtor();
}

void EnchantData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnchantData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantData_descriptor_;
}

const EnchantData& EnchantData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EnchantData* EnchantData::default_instance_ = NULL;

EnchantData* EnchantData::New() const {
  return new EnchantData;
}

void EnchantData::Clear() {
  type_ = 0;
  attrs_.Clear();
  extras_.Clear();
  patch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnchantData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnchantData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EEnchantType type = 1 [default = EENCHANTTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEnchantType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EEnchantType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.EnchantAttr attrs = 2;
      case 2: {
        if (tag == 18) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        if (input->ExpectTag(26)) goto parse_extras;
        break;
      }

      // repeated .Cmd.EnchantExtra extras = 3;
      case 3: {
        if (tag == 26) {
         parse_extras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extras()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extras;
        if (input->ExpectTag(32)) goto parse_patch;
        break;
      }

      // repeated uint32 patch = 4;
      case 4: {
        if (tag == 32) {
         parse_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_patch())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_patch())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_patch;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnchantData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnchantData)
  return false;
#undef DO_
}

void EnchantData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnchantData)
  // optional .Cmd.EEnchantType type = 1 [default = EENCHANTTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.EnchantAttr attrs = 2;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrs(i), output);
  }

  // repeated .Cmd.EnchantExtra extras = 3;
  for (int i = 0; i < this->extras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extras(i), output);
  }

  // repeated uint32 patch = 4;
  for (int i = 0; i < this->patch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->patch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnchantData)
}

::google::protobuf::uint8* EnchantData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnchantData)
  // optional .Cmd.EEnchantType type = 1 [default = EENCHANTTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.EnchantAttr attrs = 2;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrs(i), target);
  }

  // repeated .Cmd.EnchantExtra extras = 3;
  for (int i = 0; i < this->extras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extras(i), target);
  }

  // repeated uint32 patch = 4;
  for (int i = 0; i < this->patch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->patch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnchantData)
  return target;
}

int EnchantData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EEnchantType type = 1 [default = EENCHANTTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.EnchantAttr attrs = 2;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.EnchantExtra extras = 3;
  total_size += 1 * this->extras_size();
  for (int i = 0; i < this->extras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extras(i));
  }

  // repeated uint32 patch = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->patch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->patch(i));
    }
    total_size += 1 * this->patch_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnchantData::MergeFrom(const EnchantData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  extras_.MergeFrom(from.extras_);
  patch_.MergeFrom(from.patch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnchantData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnchantData::CopyFrom(const EnchantData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnchantData::IsInitialized() const {

  return true;
}

void EnchantData::Swap(EnchantData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    attrs_.Swap(&other->attrs_);
    extras_.Swap(&other->extras_);
    patch_.Swap(&other->patch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnchantData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantData_descriptor_;
  metadata.reflection = EnchantData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefineData::kLastfailFieldNumber;
const int RefineData::kRepaircountFieldNumber;
#endif  // !_MSC_VER

RefineData::RefineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RefineData)
}

void RefineData::InitAsDefaultInstance() {
}

RefineData::RefineData(const RefineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RefineData)
}

void RefineData::SharedCtor() {
  _cached_size_ = 0;
  lastfail_ = false;
  repaircount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefineData::~RefineData() {
  // @@protoc_insertion_point(destructor:Cmd.RefineData)
  SharedDtor();
}

void RefineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefineData_descriptor_;
}

const RefineData& RefineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

RefineData* RefineData::default_instance_ = NULL;

RefineData* RefineData::New() const {
  return new RefineData;
}

void RefineData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RefineData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lastfail_, repaircount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RefineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool lastfail = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastfail_)));
          set_has_lastfail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repaircount;
        break;
      }

      // optional uint32 repaircount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_repaircount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repaircount_)));
          set_has_repaircount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RefineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RefineData)
  return false;
#undef DO_
}

void RefineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RefineData)
  // optional bool lastfail = 1 [default = false];
  if (has_lastfail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->lastfail(), output);
  }

  // optional uint32 repaircount = 2 [default = 0];
  if (has_repaircount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->repaircount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RefineData)
}

::google::protobuf::uint8* RefineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RefineData)
  // optional bool lastfail = 1 [default = false];
  if (has_lastfail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->lastfail(), target);
  }

  // optional uint32 repaircount = 2 [default = 0];
  if (has_repaircount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->repaircount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RefineData)
  return target;
}

int RefineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool lastfail = 1 [default = false];
    if (has_lastfail()) {
      total_size += 1 + 1;
    }

    // optional uint32 repaircount = 2 [default = 0];
    if (has_repaircount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repaircount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefineData::MergeFrom(const RefineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastfail()) {
      set_lastfail(from.lastfail());
    }
    if (from.has_repaircount()) {
      set_repaircount(from.repaircount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefineData::CopyFrom(const RefineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefineData::IsInitialized() const {

  return true;
}

void RefineData::Swap(RefineData* other) {
  if (other != this) {
    std::swap(lastfail_, other->lastfail_);
    std::swap(repaircount_, other->repaircount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefineData_descriptor_;
  metadata.reflection = RefineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EggEquip::kBaseFieldNumber;
const int EggEquip::kDataFieldNumber;
const int EggEquip::kCardFieldNumber;
const int EggEquip::kEnchantFieldNumber;
const int EggEquip::kPreviewenchantFieldNumber;
const int EggEquip::kRefineFieldNumber;
#endif  // !_MSC_VER

EggEquip::EggEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EggEquip)
}

void EggEquip::InitAsDefaultInstance() {
  base_ = const_cast< ::Cmd::ItemInfo*>(&::Cmd::ItemInfo::default_instance());
  data_ = const_cast< ::Cmd::EquipData*>(&::Cmd::EquipData::default_instance());
  enchant_ = const_cast< ::Cmd::EnchantData*>(&::Cmd::EnchantData::default_instance());
  previewenchant_ = const_cast< ::Cmd::EnchantData*>(&::Cmd::EnchantData::default_instance());
  refine_ = const_cast< ::Cmd::RefineData*>(&::Cmd::RefineData::default_instance());
}

EggEquip::EggEquip(const EggEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EggEquip)
}

void EggEquip::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  data_ = NULL;
  enchant_ = NULL;
  previewenchant_ = NULL;
  refine_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EggEquip::~EggEquip() {
  // @@protoc_insertion_point(destructor:Cmd.EggEquip)
  SharedDtor();
}

void EggEquip::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete data_;
    delete enchant_;
    delete previewenchant_;
    delete refine_;
  }
}

void EggEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EggEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EggEquip_descriptor_;
}

const EggEquip& EggEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EggEquip* EggEquip::default_instance_ = NULL;

EggEquip* EggEquip::New() const {
  return new EggEquip;
}

void EggEquip::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_base()) {
      if (base_ != NULL) base_->::Cmd::ItemInfo::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::EquipData::Clear();
    }
    if (has_enchant()) {
      if (enchant_ != NULL) enchant_->::Cmd::EnchantData::Clear();
    }
    if (has_previewenchant()) {
      if (previewenchant_ != NULL) previewenchant_->::Cmd::EnchantData::Clear();
    }
    if (has_refine()) {
      if (refine_ != NULL) refine_->::Cmd::RefineData::Clear();
    }
  }
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EggEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EggEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ItemInfo base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .Cmd.EquipData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card;
        break;
      }

      // repeated .Cmd.CardData card = 3;
      case 3: {
        if (tag == 26) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card;
        if (input->ExpectTag(34)) goto parse_enchant;
        break;
      }

      // optional .Cmd.EnchantData enchant = 4;
      case 4: {
        if (tag == 34) {
         parse_enchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enchant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_previewenchant;
        break;
      }

      // optional .Cmd.EnchantData previewenchant = 5;
      case 5: {
        if (tag == 42) {
         parse_previewenchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previewenchant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_refine;
        break;
      }

      // optional .Cmd.RefineData refine = 7;
      case 7: {
        if (tag == 58) {
         parse_refine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EggEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EggEquip)
  return false;
#undef DO_
}

void EggEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EggEquip)
  // optional .Cmd.ItemInfo base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .Cmd.EquipData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // repeated .Cmd.CardData card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card(i), output);
  }

  // optional .Cmd.EnchantData enchant = 4;
  if (has_enchant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enchant(), output);
  }

  // optional .Cmd.EnchantData previewenchant = 5;
  if (has_previewenchant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->previewenchant(), output);
  }

  // optional .Cmd.RefineData refine = 7;
  if (has_refine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->refine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EggEquip)
}

::google::protobuf::uint8* EggEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EggEquip)
  // optional .Cmd.ItemInfo base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .Cmd.EquipData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // repeated .Cmd.CardData card = 3;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card(i), target);
  }

  // optional .Cmd.EnchantData enchant = 4;
  if (has_enchant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enchant(), target);
  }

  // optional .Cmd.EnchantData previewenchant = 5;
  if (has_previewenchant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->previewenchant(), target);
  }

  // optional .Cmd.RefineData refine = 7;
  if (has_refine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->refine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EggEquip)
  return target;
}

int EggEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ItemInfo base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .Cmd.EquipData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .Cmd.EnchantData enchant = 4;
    if (has_enchant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enchant());
    }

    // optional .Cmd.EnchantData previewenchant = 5;
    if (has_previewenchant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previewenchant());
    }

    // optional .Cmd.RefineData refine = 7;
    if (has_refine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refine());
    }

  }
  // repeated .Cmd.CardData card = 3;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EggEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EggEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EggEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EggEquip::MergeFrom(const EggEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::Cmd::ItemInfo::MergeFrom(from.base());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::EquipData::MergeFrom(from.data());
    }
    if (from.has_enchant()) {
      mutable_enchant()->::Cmd::EnchantData::MergeFrom(from.enchant());
    }
    if (from.has_previewenchant()) {
      mutable_previewenchant()->::Cmd::EnchantData::MergeFrom(from.previewenchant());
    }
    if (from.has_refine()) {
      mutable_refine()->::Cmd::RefineData::MergeFrom(from.refine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EggEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggEquip::CopyFrom(const EggEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggEquip::IsInitialized() const {

  return true;
}

void EggEquip::Swap(EggEquip* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(data_, other->data_);
    card_.Swap(&other->card_);
    std::swap(enchant_, other->enchant_);
    std::swap(previewenchant_, other->previewenchant_);
    std::swap(refine_, other->refine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EggEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EggEquip_descriptor_;
  metadata.reflection = EggEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEquipData::kEposFieldNumber;
const int PetEquipData::kItemidFieldNumber;
#endif  // !_MSC_VER

PetEquipData::PetEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetEquipData)
}

void PetEquipData::InitAsDefaultInstance() {
}

PetEquipData::PetEquipData(const PetEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetEquipData)
}

void PetEquipData::SharedCtor() {
  _cached_size_ = 0;
  epos_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEquipData::~PetEquipData() {
  // @@protoc_insertion_point(destructor:Cmd.PetEquipData)
  SharedDtor();
}

void PetEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEquipData_descriptor_;
}

const PetEquipData& PetEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

PetEquipData* PetEquipData::default_instance_ = NULL;

PetEquipData* PetEquipData::New() const {
  return new PetEquipData;
}

void PetEquipData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetEquipData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(epos_, itemid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetEquipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EEquipPos epos = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipPos_IsValid(value)) {
            set_epos(static_cast< ::Cmd::EEquipPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 2;
      case 2: {
        if (tag == 16) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetEquipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetEquipData)
  return false;
#undef DO_
}

void PetEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetEquipData)
  // optional .Cmd.EEquipPos epos = 1;
  if (has_epos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->epos(), output);
  }

  // optional uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetEquipData)
}

::google::protobuf::uint8* PetEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetEquipData)
  // optional .Cmd.EEquipPos epos = 1;
  if (has_epos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->epos(), target);
  }

  // optional uint32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetEquipData)
  return target;
}

int PetEquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EEquipPos epos = 1;
    if (has_epos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->epos());
    }

    // optional uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEquipData::MergeFrom(const PetEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epos()) {
      set_epos(from.epos());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEquipData::CopyFrom(const PetEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEquipData::IsInitialized() const {

  return true;
}

void PetEquipData::Swap(PetEquipData* other) {
  if (other != this) {
    std::swap(epos_, other->epos_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEquipData_descriptor_;
  metadata.reflection = PetEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EggData::kExpFieldNumber;
const int EggData::kFriendexpFieldNumber;
const int EggData::kRewardexpFieldNumber;
const int EggData::kIdFieldNumber;
const int EggData::kLvFieldNumber;
const int EggData::kFriendlvFieldNumber;
const int EggData::kBodyFieldNumber;
const int EggData::kRelivetimeFieldNumber;
const int EggData::kHpFieldNumber;
const int EggData::kRestoretimeFieldNumber;
const int EggData::kTimeHapplyFieldNumber;
const int EggData::kTimeExciteFieldNumber;
const int EggData::kTimeHappinessFieldNumber;
const int EggData::kTimeHapplyGiftFieldNumber;
const int EggData::kTimeExciteGiftFieldNumber;
const int EggData::kTimeHappinessGiftFieldNumber;
const int EggData::kTouchTickFieldNumber;
const int EggData::kFeedTickFieldNumber;
const int EggData::kNameFieldNumber;
const int EggData::kVarFieldNumber;
const int EggData::kSkillidsFieldNumber;
const int EggData::kEquipsFieldNumber;
const int EggData::kBuffFieldNumber;
const int EggData::kUnlockEquipFieldNumber;
const int EggData::kUnlockBodyFieldNumber;
const int EggData::kVersionFieldNumber;
const int EggData::kSkilloffFieldNumber;
const int EggData::kExchangeCountFieldNumber;
const int EggData::kGuidFieldNumber;
const int EggData::kDefaultwearsFieldNumber;
const int EggData::kWearsFieldNumber;
#endif  // !_MSC_VER

EggData::EggData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EggData)
}

void EggData::InitAsDefaultInstance() {
}

EggData::EggData(const EggData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EggData)
}

void EggData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  friendexp_ = GOOGLE_ULONGLONG(0);
  rewardexp_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  lv_ = 0u;
  friendlv_ = 0u;
  body_ = 0u;
  relivetime_ = 0u;
  hp_ = 0u;
  restoretime_ = 0u;
  time_happly_ = 0u;
  time_excite_ = 0u;
  time_happiness_ = 0u;
  time_happly_gift_ = 0u;
  time_excite_gift_ = 0u;
  time_happiness_gift_ = 0u;
  touch_tick_ = 0u;
  feed_tick_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  skilloff_ = false;
  exchange_count_ = 0u;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EggData::~EggData() {
  // @@protoc_insertion_point(destructor:Cmd.EggData)
  SharedDtor();
}

void EggData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_;
  }
  if (buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buff_;
  }
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EggData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EggData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EggData_descriptor_;
}

const EggData& EggData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EggData* EggData::default_instance_ = NULL;

EggData* EggData::New() const {
  return new EggData;
}

void EggData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EggData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(exp_, relivetime_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(hp_, time_happiness_gift_);
  }
  if (_has_bits_[16 / 32] & 5177344) {
    touch_tick_ = 0u;
    feed_tick_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_var()) {
      if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        var_->clear();
      }
    }
    if (has_buff()) {
      if (buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buff_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 503316480) {
    ZR_(skilloff_, exchange_count_);
    version_ = 0u;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skillids_.Clear();
  equips_.Clear();
  unlock_equip_.Clear();
  unlock_body_.Clear();
  defaultwears_.Clear();
  wears_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EggData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EggData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 exp = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friendexp;
        break;
      }

      // optional uint64 friendexp = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_friendexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendexp_)));
          set_has_friendexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rewardexp;
        break;
      }

      // optional uint64 rewardexp = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_rewardexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardexp_)));
          set_has_rewardexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_friendlv;
        break;
      }

      // optional uint32 friendlv = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_friendlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendlv_)));
          set_has_friendlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_body;
        break;
      }

      // optional uint32 body = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_relivetime;
        break;
      }

      // optional uint32 relivetime = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_relivetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_restoretime;
        break;
      }

      // optional uint32 restoretime = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_restoretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restoretime_)));
          set_has_restoretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_happly;
        break;
      }

      // optional uint32 time_happly = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_time_happly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_happly_)));
          set_has_time_happly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_time_excite;
        break;
      }

      // optional uint32 time_excite = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_time_excite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_excite_)));
          set_has_time_excite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_time_happiness;
        break;
      }

      // optional uint32 time_happiness = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_time_happiness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_happiness_)));
          set_has_time_happiness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_time_happly_gift;
        break;
      }

      // optional uint32 time_happly_gift = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_time_happly_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_happly_gift_)));
          set_has_time_happly_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_time_excite_gift;
        break;
      }

      // optional uint32 time_excite_gift = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_time_excite_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_excite_gift_)));
          set_has_time_excite_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_time_happiness_gift;
        break;
      }

      // optional uint32 time_happiness_gift = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_time_happiness_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_happiness_gift_)));
          set_has_time_happiness_gift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_name;
        break;
      }

      // optional string name = 17;
      case 17: {
        if (tag == 138) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_var;
        break;
      }

      // optional bytes var = 18;
      case 18: {
        if (tag == 146) {
         parse_var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_skillids;
        break;
      }

      // repeated uint32 skillids = 19;
      case 19: {
        if (tag == 152) {
         parse_skillids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_skillids())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_skillids;
        if (input->ExpectTag(162)) goto parse_equips;
        break;
      }

      // repeated .Cmd.EggEquip equips = 20;
      case 20: {
        if (tag == 162) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_equips;
        if (input->ExpectTag(170)) goto parse_buff;
        break;
      }

      // optional bytes buff = 21;
      case 21: {
        if (tag == 170) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_touch_tick;
        break;
      }

      // optional uint32 touch_tick = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_touch_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touch_tick_)));
          set_has_touch_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_feed_tick;
        break;
      }

      // optional uint32 feed_tick = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_feed_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feed_tick_)));
          set_has_feed_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_unlock_equip;
        break;
      }

      // repeated uint32 unlock_equip = 24;
      case 24: {
        if (tag == 192) {
         parse_unlock_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192, input, this->mutable_unlock_equip())));
        } else if (tag == 194) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_equip())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_unlock_equip;
        if (input->ExpectTag(200)) goto parse_unlock_body;
        break;
      }

      // repeated uint32 unlock_body = 25;
      case 25: {
        if (tag == 200) {
         parse_unlock_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable_unlock_body())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_body())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_unlock_body;
        if (input->ExpectTag(208)) goto parse_version;
        break;
      }

      // optional uint32 version = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_skilloff;
        break;
      }

      // optional bool skilloff = 27 [default = false];
      case 27: {
        if (tag == 216) {
         parse_skilloff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skilloff_)));
          set_has_skilloff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_exchange_count;
        break;
      }

      // optional uint32 exchange_count = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_exchange_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_count_)));
          set_has_exchange_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_guid;
        break;
      }

      // optional string guid = 29;
      case 29: {
        if (tag == 234) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_defaultwears;
        break;
      }

      // repeated .Cmd.PetEquipData defaultwears = 30;
      case 30: {
        if (tag == 242) {
         parse_defaultwears:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defaultwears()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_defaultwears;
        if (input->ExpectTag(250)) goto parse_wears;
        break;
      }

      // repeated .Cmd.PetEquipData wears = 31;
      case 31: {
        if (tag == 250) {
         parse_wears:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wears()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_wears;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EggData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EggData)
  return false;
#undef DO_
}

void EggData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EggData)
  // optional uint64 exp = 1 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->exp(), output);
  }

  // optional uint64 friendexp = 2 [default = 0];
  if (has_friendexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friendexp(), output);
  }

  // optional uint64 rewardexp = 3 [default = 0];
  if (has_rewardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rewardexp(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // optional uint32 lv = 5 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // optional uint32 friendlv = 6 [default = 0];
  if (has_friendlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->friendlv(), output);
  }

  // optional uint32 body = 7 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->body(), output);
  }

  // optional uint32 relivetime = 8 [default = 0];
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->relivetime(), output);
  }

  // optional uint32 hp = 9 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hp(), output);
  }

  // optional uint32 restoretime = 10 [default = 0];
  if (has_restoretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->restoretime(), output);
  }

  // optional uint32 time_happly = 11 [default = 0];
  if (has_time_happly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_happly(), output);
  }

  // optional uint32 time_excite = 12 [default = 0];
  if (has_time_excite()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time_excite(), output);
  }

  // optional uint32 time_happiness = 13 [default = 0];
  if (has_time_happiness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->time_happiness(), output);
  }

  // optional uint32 time_happly_gift = 14 [default = 0];
  if (has_time_happly_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->time_happly_gift(), output);
  }

  // optional uint32 time_excite_gift = 15 [default = 0];
  if (has_time_excite_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->time_excite_gift(), output);
  }

  // optional uint32 time_happiness_gift = 16 [default = 0];
  if (has_time_happiness_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->time_happiness_gift(), output);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->name(), output);
  }

  // optional bytes var = 18;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->var(), output);
  }

  // repeated uint32 skillids = 19;
  for (int i = 0; i < this->skillids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->skillids(i), output);
  }

  // repeated .Cmd.EggEquip equips = 20;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->equips(i), output);
  }

  // optional bytes buff = 21;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->buff(), output);
  }

  // optional uint32 touch_tick = 22 [default = 0];
  if (has_touch_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->touch_tick(), output);
  }

  // optional uint32 feed_tick = 23 [default = 0];
  if (has_feed_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->feed_tick(), output);
  }

  // repeated uint32 unlock_equip = 24;
  for (int i = 0; i < this->unlock_equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->unlock_equip(i), output);
  }

  // repeated uint32 unlock_body = 25;
  for (int i = 0; i < this->unlock_body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->unlock_body(i), output);
  }

  // optional uint32 version = 26 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->version(), output);
  }

  // optional bool skilloff = 27 [default = false];
  if (has_skilloff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->skilloff(), output);
  }

  // optional uint32 exchange_count = 28 [default = 0];
  if (has_exchange_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->exchange_count(), output);
  }

  // optional string guid = 29;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->guid(), output);
  }

  // repeated .Cmd.PetEquipData defaultwears = 30;
  for (int i = 0; i < this->defaultwears_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->defaultwears(i), output);
  }

  // repeated .Cmd.PetEquipData wears = 31;
  for (int i = 0; i < this->wears_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->wears(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EggData)
}

::google::protobuf::uint8* EggData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EggData)
  // optional uint64 exp = 1 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->exp(), target);
  }

  // optional uint64 friendexp = 2 [default = 0];
  if (has_friendexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friendexp(), target);
  }

  // optional uint64 rewardexp = 3 [default = 0];
  if (has_rewardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rewardexp(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // optional uint32 lv = 5 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // optional uint32 friendlv = 6 [default = 0];
  if (has_friendlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->friendlv(), target);
  }

  // optional uint32 body = 7 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->body(), target);
  }

  // optional uint32 relivetime = 8 [default = 0];
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->relivetime(), target);
  }

  // optional uint32 hp = 9 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hp(), target);
  }

  // optional uint32 restoretime = 10 [default = 0];
  if (has_restoretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->restoretime(), target);
  }

  // optional uint32 time_happly = 11 [default = 0];
  if (has_time_happly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_happly(), target);
  }

  // optional uint32 time_excite = 12 [default = 0];
  if (has_time_excite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time_excite(), target);
  }

  // optional uint32 time_happiness = 13 [default = 0];
  if (has_time_happiness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->time_happiness(), target);
  }

  // optional uint32 time_happly_gift = 14 [default = 0];
  if (has_time_happly_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->time_happly_gift(), target);
  }

  // optional uint32 time_excite_gift = 15 [default = 0];
  if (has_time_excite_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->time_excite_gift(), target);
  }

  // optional uint32 time_happiness_gift = 16 [default = 0];
  if (has_time_happiness_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->time_happiness_gift(), target);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  // optional bytes var = 18;
  if (has_var()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->var(), target);
  }

  // repeated uint32 skillids = 19;
  for (int i = 0; i < this->skillids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->skillids(i), target);
  }

  // repeated .Cmd.EggEquip equips = 20;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->equips(i), target);
  }

  // optional bytes buff = 21;
  if (has_buff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->buff(), target);
  }

  // optional uint32 touch_tick = 22 [default = 0];
  if (has_touch_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->touch_tick(), target);
  }

  // optional uint32 feed_tick = 23 [default = 0];
  if (has_feed_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->feed_tick(), target);
  }

  // repeated uint32 unlock_equip = 24;
  for (int i = 0; i < this->unlock_equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(24, this->unlock_equip(i), target);
  }

  // repeated uint32 unlock_body = 25;
  for (int i = 0; i < this->unlock_body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->unlock_body(i), target);
  }

  // optional uint32 version = 26 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->version(), target);
  }

  // optional bool skilloff = 27 [default = false];
  if (has_skilloff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->skilloff(), target);
  }

  // optional uint32 exchange_count = 28 [default = 0];
  if (has_exchange_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->exchange_count(), target);
  }

  // optional string guid = 29;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->guid(), target);
  }

  // repeated .Cmd.PetEquipData defaultwears = 30;
  for (int i = 0; i < this->defaultwears_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->defaultwears(i), target);
  }

  // repeated .Cmd.PetEquipData wears = 31;
  for (int i = 0; i < this->wears_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->wears(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EggData)
  return target;
}

int EggData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 exp = 1 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint64 friendexp = 2 [default = 0];
    if (has_friendexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendexp());
    }

    // optional uint64 rewardexp = 3 [default = 0];
    if (has_rewardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardexp());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 lv = 5 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 friendlv = 6 [default = 0];
    if (has_friendlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendlv());
    }

    // optional uint32 body = 7 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 relivetime = 8 [default = 0];
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hp = 9 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 restoretime = 10 [default = 0];
    if (has_restoretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restoretime());
    }

    // optional uint32 time_happly = 11 [default = 0];
    if (has_time_happly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_happly());
    }

    // optional uint32 time_excite = 12 [default = 0];
    if (has_time_excite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_excite());
    }

    // optional uint32 time_happiness = 13 [default = 0];
    if (has_time_happiness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_happiness());
    }

    // optional uint32 time_happly_gift = 14 [default = 0];
    if (has_time_happly_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_happly_gift());
    }

    // optional uint32 time_excite_gift = 15 [default = 0];
    if (has_time_excite_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_excite_gift());
    }

    // optional uint32 time_happiness_gift = 16 [default = 0];
    if (has_time_happiness_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_happiness_gift());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 touch_tick = 22 [default = 0];
    if (has_touch_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touch_tick());
    }

    // optional uint32 feed_tick = 23 [default = 0];
    if (has_feed_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feed_tick());
    }

    // optional string name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes var = 18;
    if (has_var()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->var());
    }

    // optional bytes buff = 21;
    if (has_buff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buff());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional uint32 version = 26 [default = 0];
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bool skilloff = 27 [default = false];
    if (has_skilloff()) {
      total_size += 2 + 1;
    }

    // optional uint32 exchange_count = 28 [default = 0];
    if (has_exchange_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_count());
    }

    // optional string guid = 29;
    if (has_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  // repeated uint32 skillids = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillids(i));
    }
    total_size += 2 * this->skillids_size() + data_size;
  }

  // repeated .Cmd.EggEquip equips = 20;
  total_size += 2 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated uint32 unlock_equip = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_equip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlock_equip(i));
    }
    total_size += 2 * this->unlock_equip_size() + data_size;
  }

  // repeated uint32 unlock_body = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_body_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlock_body(i));
    }
    total_size += 2 * this->unlock_body_size() + data_size;
  }

  // repeated .Cmd.PetEquipData defaultwears = 30;
  total_size += 2 * this->defaultwears_size();
  for (int i = 0; i < this->defaultwears_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defaultwears(i));
  }

  // repeated .Cmd.PetEquipData wears = 31;
  total_size += 2 * this->wears_size();
  for (int i = 0; i < this->wears_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wears(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EggData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EggData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EggData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EggData::MergeFrom(const EggData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillids_.MergeFrom(from.skillids_);
  equips_.MergeFrom(from.equips_);
  unlock_equip_.MergeFrom(from.unlock_equip_);
  unlock_body_.MergeFrom(from.unlock_body_);
  defaultwears_.MergeFrom(from.defaultwears_);
  wears_.MergeFrom(from.wears_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_friendexp()) {
      set_friendexp(from.friendexp());
    }
    if (from.has_rewardexp()) {
      set_rewardexp(from.rewardexp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_friendlv()) {
      set_friendlv(from.friendlv());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_restoretime()) {
      set_restoretime(from.restoretime());
    }
    if (from.has_time_happly()) {
      set_time_happly(from.time_happly());
    }
    if (from.has_time_excite()) {
      set_time_excite(from.time_excite());
    }
    if (from.has_time_happiness()) {
      set_time_happiness(from.time_happiness());
    }
    if (from.has_time_happly_gift()) {
      set_time_happly_gift(from.time_happly_gift());
    }
    if (from.has_time_excite_gift()) {
      set_time_excite_gift(from.time_excite_gift());
    }
    if (from.has_time_happiness_gift()) {
      set_time_happiness_gift(from.time_happiness_gift());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_touch_tick()) {
      set_touch_tick(from.touch_tick());
    }
    if (from.has_feed_tick()) {
      set_feed_tick(from.feed_tick());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_var()) {
      set_var(from.var());
    }
    if (from.has_buff()) {
      set_buff(from.buff());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_skilloff()) {
      set_skilloff(from.skilloff());
    }
    if (from.has_exchange_count()) {
      set_exchange_count(from.exchange_count());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EggData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggData::CopyFrom(const EggData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggData::IsInitialized() const {

  return true;
}

void EggData::Swap(EggData* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(friendexp_, other->friendexp_);
    std::swap(rewardexp_, other->rewardexp_);
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(friendlv_, other->friendlv_);
    std::swap(body_, other->body_);
    std::swap(relivetime_, other->relivetime_);
    std::swap(hp_, other->hp_);
    std::swap(restoretime_, other->restoretime_);
    std::swap(time_happly_, other->time_happly_);
    std::swap(time_excite_, other->time_excite_);
    std::swap(time_happiness_, other->time_happiness_);
    std::swap(time_happly_gift_, other->time_happly_gift_);
    std::swap(time_excite_gift_, other->time_excite_gift_);
    std::swap(time_happiness_gift_, other->time_happiness_gift_);
    std::swap(touch_tick_, other->touch_tick_);
    std::swap(feed_tick_, other->feed_tick_);
    std::swap(name_, other->name_);
    std::swap(var_, other->var_);
    skillids_.Swap(&other->skillids_);
    equips_.Swap(&other->equips_);
    std::swap(buff_, other->buff_);
    unlock_equip_.Swap(&other->unlock_equip_);
    unlock_body_.Swap(&other->unlock_body_);
    std::swap(version_, other->version_);
    std::swap(skilloff_, other->skilloff_);
    std::swap(exchange_count_, other->exchange_count_);
    std::swap(guid_, other->guid_);
    defaultwears_.Swap(&other->defaultwears_);
    wears_.Swap(&other->wears_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EggData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EggData_descriptor_;
  metadata.reflection = EggData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoveLetterData::kSendUserNameFieldNumber;
const int LoveLetterData::kBgFieldNumber;
const int LoveLetterData::kConfigIDFieldNumber;
const int LoveLetterData::kContentFieldNumber;
const int LoveLetterData::kContent2FieldNumber;
#endif  // !_MSC_VER

LoveLetterData::LoveLetterData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoveLetterData)
}

void LoveLetterData::InitAsDefaultInstance() {
}

LoveLetterData::LoveLetterData(const LoveLetterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoveLetterData)
}

void LoveLetterData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sendusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoveLetterData::~LoveLetterData() {
  // @@protoc_insertion_point(destructor:Cmd.LoveLetterData)
  SharedDtor();
}

void LoveLetterData::SharedDtor() {
  if (sendusername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendusername_;
  }
  if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bg_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content2_;
  }
  if (this != default_instance_) {
  }
}

void LoveLetterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoveLetterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoveLetterData_descriptor_;
}

const LoveLetterData& LoveLetterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LoveLetterData* LoveLetterData::default_instance_ = NULL;

LoveLetterData* LoveLetterData::New() const {
  return new LoveLetterData;
}

void LoveLetterData::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_sendusername()) {
      if (sendusername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendusername_->clear();
      }
    }
    if (has_bg()) {
      if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bg_->clear();
      }
    }
    configid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_content2()) {
      if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoveLetterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoveLetterData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sendUserName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendusername().data(), this->sendusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendusername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bg;
        break;
      }

      // optional string bg = 2;
      case 2: {
        if (tag == 18) {
         parse_bg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bg().data(), this->bg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configID;
        break;
      }

      // optional uint32 configID = 3;
      case 3: {
        if (tag == 24) {
         parse_configID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content2;
        break;
      }

      // optional string content2 = 5;
      case 5: {
        if (tag == 42) {
         parse_content2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content2().data(), this->content2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoveLetterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoveLetterData)
  return false;
#undef DO_
}

void LoveLetterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoveLetterData)
  // optional string sendUserName = 1;
  if (has_sendusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendusername().data(), this->sendusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendusername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sendusername(), output);
  }

  // optional string bg = 2;
  if (has_bg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bg().data(), this->bg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bg(), output);
  }

  // optional uint32 configID = 3;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->configid(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional string content2 = 5;
  if (has_content2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content2().data(), this->content2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoveLetterData)
}

::google::protobuf::uint8* LoveLetterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoveLetterData)
  // optional string sendUserName = 1;
  if (has_sendusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendusername().data(), this->sendusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendusername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendusername(), target);
  }

  // optional string bg = 2;
  if (has_bg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bg().data(), this->bg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bg(), target);
  }

  // optional uint32 configID = 3;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->configid(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional string content2 = 5;
  if (has_content2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content2().data(), this->content2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoveLetterData)
  return target;
}

int LoveLetterData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sendUserName = 1;
    if (has_sendusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendusername());
    }

    // optional string bg = 2;
    if (has_bg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bg());
    }

    // optional uint32 configID = 3;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string content2 = 5;
    if (has_content2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoveLetterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoveLetterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoveLetterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoveLetterData::MergeFrom(const LoveLetterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendusername()) {
      set_sendusername(from.sendusername());
    }
    if (from.has_bg()) {
      set_bg(from.bg());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_content2()) {
      set_content2(from.content2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoveLetterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoveLetterData::CopyFrom(const LoveLetterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoveLetterData::IsInitialized() const {

  return true;
}

void LoveLetterData::Swap(LoveLetterData* other) {
  if (other != this) {
    std::swap(sendusername_, other->sendusername_);
    std::swap(bg_, other->bg_);
    std::swap(configid_, other->configid_);
    std::swap(content_, other->content_);
    std::swap(content2_, other->content2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoveLetterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoveLetterData_descriptor_;
  metadata.reflection = LoveLetterData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CodeData::kCodeFieldNumber;
const int CodeData::kUsedFieldNumber;
#endif  // !_MSC_VER

CodeData::CodeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CodeData)
}

void CodeData::InitAsDefaultInstance() {
}

CodeData::CodeData(const CodeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CodeData)
}

void CodeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  used_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CodeData::~CodeData() {
  // @@protoc_insertion_point(destructor:Cmd.CodeData)
  SharedDtor();
}

void CodeData::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodeData_descriptor_;
}

const CodeData& CodeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

CodeData* CodeData::default_instance_ = NULL;

CodeData* CodeData::New() const {
  return new CodeData;
}

void CodeData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    used_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_used;
        break;
      }

      // optional bool used = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &used_)));
          set_has_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CodeData)
  return false;
#undef DO_
}

void CodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CodeData)
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional bool used = 2 [default = false];
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->used(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CodeData)
}

::google::protobuf::uint8* CodeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CodeData)
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional bool used = 2 [default = false];
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->used(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CodeData)
  return target;
}

int CodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional bool used = 2 [default = false];
    if (has_used()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CodeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CodeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CodeData::MergeFrom(const CodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_used()) {
      set_used(from.used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CodeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeData::CopyFrom(const CodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeData::IsInitialized() const {

  return true;
}

void CodeData::Swap(CodeData* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(used_, other->used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CodeData_descriptor_;
  metadata.reflection = CodeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingData::kIdFieldNumber;
const int WeddingData::kZoneidFieldNumber;
const int WeddingData::kCharid1FieldNumber;
const int WeddingData::kCharid2FieldNumber;
const int WeddingData::kWeddingtimeFieldNumber;
const int WeddingData::kPhotoidxFieldNumber;
const int WeddingData::kPhototimeFieldNumber;
const int WeddingData::kMynameFieldNumber;
const int WeddingData::kPartnernameFieldNumber;
const int WeddingData::kStarttimeFieldNumber;
const int WeddingData::kEndtimeFieldNumber;
const int WeddingData::kNotifiedFieldNumber;
#endif  // !_MSC_VER

WeddingData::WeddingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingData)
}

void WeddingData::InitAsDefaultInstance() {
}

WeddingData::WeddingData(const WeddingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingData)
}

void WeddingData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  charid1_ = GOOGLE_ULONGLONG(0);
  charid2_ = GOOGLE_ULONGLONG(0);
  weddingtime_ = 0u;
  photoidx_ = 0u;
  phototime_ = 0u;
  myname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = 0u;
  endtime_ = 0u;
  notified_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingData::~WeddingData() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingData)
  SharedDtor();
}

void WeddingData::SharedDtor() {
  if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myname_;
  }
  if (partnername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partnername_;
  }
  if (this != default_instance_) {
  }
}

void WeddingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingData_descriptor_;
}

const WeddingData& WeddingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

WeddingData* WeddingData::default_instance_ = NULL;

WeddingData* WeddingData::New() const {
  return new WeddingData;
}

void WeddingData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeddingData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, phototime_);
    if (has_myname()) {
      if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        myname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(starttime_, notified_);
    if (has_partnername()) {
      if (partnername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        partnername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid1;
        break;
      }

      // optional uint64 charid1 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid2;
        break;
      }

      // optional uint64 charid2 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weddingtime;
        break;
      }

      // optional uint32 weddingtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_weddingtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weddingtime_)));
          set_has_weddingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_photoidx;
        break;
      }

      // optional uint32 photoidx = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_photoidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoidx_)));
          set_has_photoidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_phototime;
        break;
      }

      // optional uint32 phototime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_phototime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phototime_)));
          set_has_phototime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_myname;
        break;
      }

      // optional string myname = 8;
      case 8: {
        if (tag == 66) {
         parse_myname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->myname().data(), this->myname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "myname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_partnername;
        break;
      }

      // optional string partnername = 9;
      case 9: {
        if (tag == 74) {
         parse_partnername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partnername().data(), this->partnername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "partnername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_notified;
        break;
      }

      // optional bool notified = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_notified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notified_)));
          set_has_notified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingData)
  return false;
#undef DO_
}

void WeddingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingData)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid1 = 3 [default = 0];
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid1(), output);
  }

  // optional uint64 charid2 = 4 [default = 0];
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid2(), output);
  }

  // optional uint32 weddingtime = 5 [default = 0];
  if (has_weddingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->weddingtime(), output);
  }

  // optional uint32 photoidx = 6 [default = 0];
  if (has_photoidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->photoidx(), output);
  }

  // optional uint32 phototime = 7 [default = 0];
  if (has_phototime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->phototime(), output);
  }

  // optional string myname = 8;
  if (has_myname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myname().data(), this->myname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "myname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->myname(), output);
  }

  // optional string partnername = 9;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partnername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->partnername(), output);
  }

  // optional uint32 starttime = 10 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->starttime(), output);
  }

  // optional uint32 endtime = 11 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->endtime(), output);
  }

  // optional bool notified = 12 [default = false];
  if (has_notified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->notified(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingData)
}

::google::protobuf::uint8* WeddingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingData)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid1 = 3 [default = 0];
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid1(), target);
  }

  // optional uint64 charid2 = 4 [default = 0];
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid2(), target);
  }

  // optional uint32 weddingtime = 5 [default = 0];
  if (has_weddingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->weddingtime(), target);
  }

  // optional uint32 photoidx = 6 [default = 0];
  if (has_photoidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->photoidx(), target);
  }

  // optional uint32 phototime = 7 [default = 0];
  if (has_phototime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->phototime(), target);
  }

  // optional string myname = 8;
  if (has_myname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myname().data(), this->myname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "myname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->myname(), target);
  }

  // optional string partnername = 9;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partnername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->partnername(), target);
  }

  // optional uint32 starttime = 10 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->starttime(), target);
  }

  // optional uint32 endtime = 11 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->endtime(), target);
  }

  // optional bool notified = 12 [default = false];
  if (has_notified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->notified(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingData)
  return target;
}

int WeddingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid1 = 3 [default = 0];
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid1());
    }

    // optional uint64 charid2 = 4 [default = 0];
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid2());
    }

    // optional uint32 weddingtime = 5 [default = 0];
    if (has_weddingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weddingtime());
    }

    // optional uint32 photoidx = 6 [default = 0];
    if (has_photoidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoidx());
    }

    // optional uint32 phototime = 7 [default = 0];
    if (has_phototime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phototime());
    }

    // optional string myname = 8;
    if (has_myname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string partnername = 9;
    if (has_partnername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnername());
    }

    // optional uint32 starttime = 10 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 11 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional bool notified = 12 [default = false];
    if (has_notified()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingData::MergeFrom(const WeddingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_weddingtime()) {
      set_weddingtime(from.weddingtime());
    }
    if (from.has_photoidx()) {
      set_photoidx(from.photoidx());
    }
    if (from.has_phototime()) {
      set_phototime(from.phototime());
    }
    if (from.has_myname()) {
      set_myname(from.myname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_partnername()) {
      set_partnername(from.partnername());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_notified()) {
      set_notified(from.notified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingData::CopyFrom(const WeddingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingData::IsInitialized() const {

  return true;
}

void WeddingData::Swap(WeddingData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid1_, other->charid1_);
    std::swap(charid2_, other->charid2_);
    std::swap(weddingtime_, other->weddingtime_);
    std::swap(photoidx_, other->photoidx_);
    std::swap(phototime_, other->phototime_);
    std::swap(myname_, other->myname_);
    std::swap(partnername_, other->partnername_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(notified_, other->notified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingData_descriptor_;
  metadata.reflection = WeddingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SenderData::kCharidFieldNumber;
const int SenderData::kNameFieldNumber;
#endif  // !_MSC_VER

SenderData::SenderData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SenderData)
}

void SenderData::InitAsDefaultInstance() {
}

SenderData::SenderData(const SenderData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SenderData)
}

void SenderData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderData::~SenderData() {
  // @@protoc_insertion_point(destructor:Cmd.SenderData)
  SharedDtor();
}

void SenderData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SenderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderData_descriptor_;
}

const SenderData& SenderData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

SenderData* SenderData::default_instance_ = NULL;

SenderData* SenderData::New() const {
  return new SenderData;
}

void SenderData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SenderData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SenderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SenderData)
  return false;
#undef DO_
}

void SenderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SenderData)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SenderData)
}

::google::protobuf::uint8* SenderData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SenderData)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SenderData)
  return target;
}

int SenderData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderData::MergeFrom(const SenderData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderData::CopyFrom(const SenderData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderData::IsInitialized() const {

  return true;
}

void SenderData::Swap(SenderData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderData_descriptor_;
  metadata.reflection = SenderData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemData::kBaseFieldNumber;
const int ItemData::kEquipedFieldNumber;
const int ItemData::kBattlepointFieldNumber;
const int ItemData::kEquipFieldNumber;
const int ItemData::kCardFieldNumber;
const int ItemData::kEnchantFieldNumber;
const int ItemData::kPreviewenchantFieldNumber;
const int ItemData::kRefineFieldNumber;
const int ItemData::kEggFieldNumber;
const int ItemData::kLetterFieldNumber;
const int ItemData::kCodeFieldNumber;
const int ItemData::kWeddingFieldNumber;
const int ItemData::kSenderFieldNumber;
#endif  // !_MSC_VER

ItemData::ItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemData)
}

void ItemData::InitAsDefaultInstance() {
  base_ = const_cast< ::Cmd::ItemInfo*>(&::Cmd::ItemInfo::default_instance());
  equip_ = const_cast< ::Cmd::EquipData*>(&::Cmd::EquipData::default_instance());
  enchant_ = const_cast< ::Cmd::EnchantData*>(&::Cmd::EnchantData::default_instance());
  previewenchant_ = const_cast< ::Cmd::EnchantData*>(&::Cmd::EnchantData::default_instance());
  refine_ = const_cast< ::Cmd::RefineData*>(&::Cmd::RefineData::default_instance());
  egg_ = const_cast< ::Cmd::EggData*>(&::Cmd::EggData::default_instance());
  letter_ = const_cast< ::Cmd::LoveLetterData*>(&::Cmd::LoveLetterData::default_instance());
  code_ = const_cast< ::Cmd::CodeData*>(&::Cmd::CodeData::default_instance());
  wedding_ = const_cast< ::Cmd::WeddingData*>(&::Cmd::WeddingData::default_instance());
  sender_ = const_cast< ::Cmd::SenderData*>(&::Cmd::SenderData::default_instance());
}

ItemData::ItemData(const ItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemData)
}

void ItemData::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  equiped_ = false;
  battlepoint_ = 0u;
  equip_ = NULL;
  enchant_ = NULL;
  previewenchant_ = NULL;
  refine_ = NULL;
  egg_ = NULL;
  letter_ = NULL;
  code_ = NULL;
  wedding_ = NULL;
  sender_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemData::~ItemData() {
  // @@protoc_insertion_point(destructor:Cmd.ItemData)
  SharedDtor();
}

void ItemData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete equip_;
    delete enchant_;
    delete previewenchant_;
    delete refine_;
    delete egg_;
    delete letter_;
    delete code_;
    delete wedding_;
    delete sender_;
  }
}

void ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemData_descriptor_;
}

const ItemData& ItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ItemData* ItemData::default_instance_ = NULL;

ItemData* ItemData::New() const {
  return new ItemData;
}

void ItemData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(equiped_, battlepoint_);
    if (has_base()) {
      if (base_ != NULL) base_->::Cmd::ItemInfo::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::Cmd::EquipData::Clear();
    }
    if (has_enchant()) {
      if (enchant_ != NULL) enchant_->::Cmd::EnchantData::Clear();
    }
    if (has_previewenchant()) {
      if (previewenchant_ != NULL) previewenchant_->::Cmd::EnchantData::Clear();
    }
    if (has_refine()) {
      if (refine_ != NULL) refine_->::Cmd::RefineData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_egg()) {
      if (egg_ != NULL) egg_->::Cmd::EggData::Clear();
    }
    if (has_letter()) {
      if (letter_ != NULL) letter_->::Cmd::LoveLetterData::Clear();
    }
    if (has_code()) {
      if (code_ != NULL) code_->::Cmd::CodeData::Clear();
    }
    if (has_wedding()) {
      if (wedding_ != NULL) wedding_->::Cmd::WeddingData::Clear();
    }
    if (has_sender()) {
      if (sender_ != NULL) sender_->::Cmd::SenderData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ItemInfo base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equiped;
        break;
      }

      // optional bool equiped = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_equiped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &equiped_)));
          set_has_equiped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battlepoint;
        break;
      }

      // optional uint32 battlepoint = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_battlepoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepoint_)));
          set_has_battlepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equip;
        break;
      }

      // optional .Cmd.EquipData equip = 4;
      case 4: {
        if (tag == 34) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_card;
        break;
      }

      // repeated .Cmd.CardData card = 5;
      case 5: {
        if (tag == 42) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_card;
        if (input->ExpectTag(50)) goto parse_enchant;
        break;
      }

      // optional .Cmd.EnchantData enchant = 6;
      case 6: {
        if (tag == 50) {
         parse_enchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enchant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_previewenchant;
        break;
      }

      // optional .Cmd.EnchantData previewenchant = 7;
      case 7: {
        if (tag == 58) {
         parse_previewenchant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previewenchant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_refine;
        break;
      }

      // optional .Cmd.RefineData refine = 8;
      case 8: {
        if (tag == 66) {
         parse_refine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_egg;
        break;
      }

      // optional .Cmd.EggData egg = 9;
      case 9: {
        if (tag == 74) {
         parse_egg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_letter;
        break;
      }

      // optional .Cmd.LoveLetterData letter = 10;
      case 10: {
        if (tag == 82) {
         parse_letter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_letter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_code;
        break;
      }

      // optional .Cmd.CodeData code = 11;
      case 11: {
        if (tag == 90) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_wedding;
        break;
      }

      // optional .Cmd.WeddingData wedding = 12;
      case 12: {
        if (tag == 98) {
         parse_wedding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wedding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sender;
        break;
      }

      // optional .Cmd.SenderData sender = 13;
      case 13: {
        if (tag == 106) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemData)
  return false;
#undef DO_
}

void ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemData)
  // optional .Cmd.ItemInfo base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional bool equiped = 2 [default = false];
  if (has_equiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->equiped(), output);
  }

  // optional uint32 battlepoint = 3 [default = 0];
  if (has_battlepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlepoint(), output);
  }

  // optional .Cmd.EquipData equip = 4;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip(), output);
  }

  // repeated .Cmd.CardData card = 5;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->card(i), output);
  }

  // optional .Cmd.EnchantData enchant = 6;
  if (has_enchant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->enchant(), output);
  }

  // optional .Cmd.EnchantData previewenchant = 7;
  if (has_previewenchant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->previewenchant(), output);
  }

  // optional .Cmd.RefineData refine = 8;
  if (has_refine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->refine(), output);
  }

  // optional .Cmd.EggData egg = 9;
  if (has_egg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->egg(), output);
  }

  // optional .Cmd.LoveLetterData letter = 10;
  if (has_letter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->letter(), output);
  }

  // optional .Cmd.CodeData code = 11;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->code(), output);
  }

  // optional .Cmd.WeddingData wedding = 12;
  if (has_wedding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->wedding(), output);
  }

  // optional .Cmd.SenderData sender = 13;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemData)
}

::google::protobuf::uint8* ItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemData)
  // optional .Cmd.ItemInfo base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional bool equiped = 2 [default = false];
  if (has_equiped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->equiped(), target);
  }

  // optional uint32 battlepoint = 3 [default = 0];
  if (has_battlepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlepoint(), target);
  }

  // optional .Cmd.EquipData equip = 4;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip(), target);
  }

  // repeated .Cmd.CardData card = 5;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->card(i), target);
  }

  // optional .Cmd.EnchantData enchant = 6;
  if (has_enchant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->enchant(), target);
  }

  // optional .Cmd.EnchantData previewenchant = 7;
  if (has_previewenchant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->previewenchant(), target);
  }

  // optional .Cmd.RefineData refine = 8;
  if (has_refine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->refine(), target);
  }

  // optional .Cmd.EggData egg = 9;
  if (has_egg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->egg(), target);
  }

  // optional .Cmd.LoveLetterData letter = 10;
  if (has_letter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->letter(), target);
  }

  // optional .Cmd.CodeData code = 11;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->code(), target);
  }

  // optional .Cmd.WeddingData wedding = 12;
  if (has_wedding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->wedding(), target);
  }

  // optional .Cmd.SenderData sender = 13;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemData)
  return target;
}

int ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ItemInfo base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional bool equiped = 2 [default = false];
    if (has_equiped()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlepoint = 3 [default = 0];
    if (has_battlepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepoint());
    }

    // optional .Cmd.EquipData equip = 4;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .Cmd.EnchantData enchant = 6;
    if (has_enchant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enchant());
    }

    // optional .Cmd.EnchantData previewenchant = 7;
    if (has_previewenchant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previewenchant());
    }

    // optional .Cmd.RefineData refine = 8;
    if (has_refine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refine());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EggData egg = 9;
    if (has_egg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->egg());
    }

    // optional .Cmd.LoveLetterData letter = 10;
    if (has_letter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->letter());
    }

    // optional .Cmd.CodeData code = 11;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->code());
    }

    // optional .Cmd.WeddingData wedding = 12;
    if (has_wedding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wedding());
    }

    // optional .Cmd.SenderData sender = 13;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

  }
  // repeated .Cmd.CardData card = 5;
  total_size += 1 * this->card_size();
  for (int i = 0; i < this->card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemData::MergeFrom(const ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::Cmd::ItemInfo::MergeFrom(from.base());
    }
    if (from.has_equiped()) {
      set_equiped(from.equiped());
    }
    if (from.has_battlepoint()) {
      set_battlepoint(from.battlepoint());
    }
    if (from.has_equip()) {
      mutable_equip()->::Cmd::EquipData::MergeFrom(from.equip());
    }
    if (from.has_enchant()) {
      mutable_enchant()->::Cmd::EnchantData::MergeFrom(from.enchant());
    }
    if (from.has_previewenchant()) {
      mutable_previewenchant()->::Cmd::EnchantData::MergeFrom(from.previewenchant());
    }
    if (from.has_refine()) {
      mutable_refine()->::Cmd::RefineData::MergeFrom(from.refine());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_egg()) {
      mutable_egg()->::Cmd::EggData::MergeFrom(from.egg());
    }
    if (from.has_letter()) {
      mutable_letter()->::Cmd::LoveLetterData::MergeFrom(from.letter());
    }
    if (from.has_code()) {
      mutable_code()->::Cmd::CodeData::MergeFrom(from.code());
    }
    if (from.has_wedding()) {
      mutable_wedding()->::Cmd::WeddingData::MergeFrom(from.wedding());
    }
    if (from.has_sender()) {
      mutable_sender()->::Cmd::SenderData::MergeFrom(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemData::CopyFrom(const ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {

  return true;
}

void ItemData::Swap(ItemData* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(equiped_, other->equiped_);
    std::swap(battlepoint_, other->battlepoint_);
    std::swap(equip_, other->equip_);
    card_.Swap(&other->card_);
    std::swap(enchant_, other->enchant_);
    std::swap(previewenchant_, other->previewenchant_);
    std::swap(refine_, other->refine_);
    std::swap(egg_, other->egg_);
    std::swap(letter_, other->letter_);
    std::swap(code_, other->code_);
    std::swap(wedding_, other->wedding_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemData_descriptor_;
  metadata.reflection = ItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageItem::kCmdFieldNumber;
const int PackageItem::kParamFieldNumber;
const int PackageItem::kTypeFieldNumber;
const int PackageItem::kDataFieldNumber;
const int PackageItem::kMaxslotFieldNumber;
#endif  // !_MSC_VER

PackageItem::PackageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PackageItem)
}

void PackageItem::InitAsDefaultInstance() {
}

PackageItem::PackageItem(const PackageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PackageItem)
}

void PackageItem::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 1;
  type_ = 0;
  maxslot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageItem::~PackageItem() {
  // @@protoc_insertion_point(destructor:Cmd.PackageItem)
  SharedDtor();
}

void PackageItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageItem_descriptor_;
}

const PackageItem& PackageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

PackageItem* PackageItem::default_instance_ = NULL;

PackageItem* PackageItem::New() const {
  return new PackageItem;
}

void PackageItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PackageItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(type_, maxslot_);
    cmd_ = 6;
    param_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PackageItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPackType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .Cmd.ItemData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(40)) goto parse_maxslot;
        break;
      }

      // optional uint32 maxslot = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxslot_)));
          set_has_maxslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PackageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PackageItem)
  return false;
#undef DO_
}

void PackageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PackageItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.ItemData data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional uint32 maxslot = 5 [default = 0];
  if (has_maxslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PackageItem)
}

::google::protobuf::uint8* PackageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PackageItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.ItemData data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional uint32 maxslot = 5 [default = 0];
  if (has_maxslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PackageItem)
  return target;
}

int PackageItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 maxslot = 5 [default = 0];
    if (has_maxslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxslot());
    }

  }
  // repeated .Cmd.ItemData data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageItem::MergeFrom(const PackageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_maxslot()) {
      set_maxslot(from.maxslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageItem::CopyFrom(const PackageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageItem::IsInitialized() const {

  return true;
}

void PackageItem::Swap(PackageItem* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(maxslot_, other->maxslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageItem_descriptor_;
  metadata.reflection = PackageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageUpdate::kCmdFieldNumber;
const int PackageUpdate::kParamFieldNumber;
const int PackageUpdate::kTypeFieldNumber;
const int PackageUpdate::kUpdateItemsFieldNumber;
const int PackageUpdate::kDelItemsFieldNumber;
#endif  // !_MSC_VER

PackageUpdate::PackageUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PackageUpdate)
}

void PackageUpdate::InitAsDefaultInstance() {
}

PackageUpdate::PackageUpdate(const PackageUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PackageUpdate)
}

void PackageUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 2;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageUpdate::~PackageUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.PackageUpdate)
  SharedDtor();
}

void PackageUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageUpdate_descriptor_;
}

const PackageUpdate& PackageUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

PackageUpdate* PackageUpdate::default_instance_ = NULL;

PackageUpdate* PackageUpdate::New() const {
  return new PackageUpdate;
}

void PackageUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 2;
    type_ = 0;
  }
  updateitems_.Clear();
  delitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PackageUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPackType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updateItems;
        break;
      }

      // repeated .Cmd.ItemData updateItems = 4;
      case 4: {
        if (tag == 34) {
         parse_updateItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updateitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updateItems;
        if (input->ExpectTag(42)) goto parse_delItems;
        break;
      }

      // repeated .Cmd.ItemData delItems = 5;
      case 5: {
        if (tag == 42) {
         parse_delItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PackageUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PackageUpdate)
  return false;
#undef DO_
}

void PackageUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PackageUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.ItemData updateItems = 4;
  for (int i = 0; i < this->updateitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updateitems(i), output);
  }

  // repeated .Cmd.ItemData delItems = 5;
  for (int i = 0; i < this->delitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->delitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PackageUpdate)
}

::google::protobuf::uint8* PackageUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PackageUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.ItemData updateItems = 4;
  for (int i = 0; i < this->updateitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updateitems(i), target);
  }

  // repeated .Cmd.ItemData delItems = 5;
  for (int i = 0; i < this->delitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->delitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PackageUpdate)
  return target;
}

int PackageUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.ItemData updateItems = 4;
  total_size += 1 * this->updateitems_size();
  for (int i = 0; i < this->updateitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updateitems(i));
  }

  // repeated .Cmd.ItemData delItems = 5;
  total_size += 1 * this->delitems_size();
  for (int i = 0; i < this->delitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageUpdate::MergeFrom(const PackageUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updateitems_.MergeFrom(from.updateitems_);
  delitems_.MergeFrom(from.delitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageUpdate::CopyFrom(const PackageUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageUpdate::IsInitialized() const {

  return true;
}

void PackageUpdate::Swap(PackageUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    updateitems_.Swap(&other->updateitems_);
    delitems_.Swap(&other->delitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageUpdate_descriptor_;
  metadata.reflection = PackageUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemUse::kCmdFieldNumber;
const int ItemUse::kParamFieldNumber;
const int ItemUse::kItemguidFieldNumber;
const int ItemUse::kTargetsFieldNumber;
const int ItemUse::kCountFieldNumber;
#endif  // !_MSC_VER

ItemUse::ItemUse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemUse)
}

void ItemUse::InitAsDefaultInstance() {
}

ItemUse::ItemUse(const ItemUse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemUse)
}

void ItemUse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 3;
  itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemUse::~ItemUse() {
  // @@protoc_insertion_point(destructor:Cmd.ItemUse)
  SharedDtor();
}

void ItemUse::SharedDtor() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (this != default_instance_) {
  }
}

void ItemUse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemUse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemUse_descriptor_;
}

const ItemUse& ItemUse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ItemUse* ItemUse::default_instance_ = NULL;

ItemUse* ItemUse::New() const {
  return new ItemUse;
}

void ItemUse::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    cmd_ = 6;
    param_ = 3;
    if (has_itemguid()) {
      if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemguid_->clear();
      }
    }
    count_ = 0u;
  }
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemUse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemUse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMUSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemguid;
        break;
      }

      // optional string itemguid = 3;
      case 3: {
        if (tag == 26) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid().data(), this->itemguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targets;
        break;
      }

      // repeated uint64 targets = 4;
      case 4: {
        if (tag == 32) {
         parse_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_targets())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_targets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targets;
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemUse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemUse)
  return false;
#undef DO_
}

void ItemUse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemUse)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMUSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->itemguid(), output);
  }

  // repeated uint64 targets = 4;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->targets(i), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemUse)
}

::google::protobuf::uint8* ItemUse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemUse)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMUSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemguid(), target);
  }

  // repeated uint64 targets = 4;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->targets(i), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemUse)
  return target;
}

int ItemUse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMUSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string itemguid = 3;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemguid());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated uint64 targets = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->targets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->targets(i));
    }
    total_size += 1 * this->targets_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemUse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemUse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemUse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemUse::MergeFrom(const ItemUse& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemUse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemUse::CopyFrom(const ItemUse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUse::IsInitialized() const {

  return true;
}

void ItemUse::Swap(ItemUse* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemguid_, other->itemguid_);
    targets_.Swap(&other->targets_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemUse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemUse_descriptor_;
  metadata.reflection = ItemUse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortInfo::kGuidFieldNumber;
const int SortInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

SortInfo::SortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SortInfo)
}

void SortInfo::InitAsDefaultInstance() {
}

SortInfo::SortInfo(const SortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SortInfo)
}

void SortInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortInfo::~SortInfo() {
  // @@protoc_insertion_point(destructor:Cmd.SortInfo)
  SharedDtor();
}

void SortInfo::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void SortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortInfo_descriptor_;
}

const SortInfo& SortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

SortInfo* SortInfo::default_instance_ = NULL;

SortInfo* SortInfo::New() const {
  return new SortInfo;
}

void SortInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SortInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SortInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SortInfo)
  return false;
#undef DO_
}

void SortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SortInfo)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 index = 2 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SortInfo)
}

::google::protobuf::uint8* SortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SortInfo)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 index = 2 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SortInfo)
  return target;
}

int SortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 index = 2 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortInfo::MergeFrom(const SortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortInfo::CopyFrom(const SortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortInfo::IsInitialized() const {

  return true;
}

void SortInfo::Swap(SortInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortInfo_descriptor_;
  metadata.reflection = SortInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageSort::kCmdFieldNumber;
const int PackageSort::kParamFieldNumber;
const int PackageSort::kTypeFieldNumber;
const int PackageSort::kItemFieldNumber;
#endif  // !_MSC_VER

PackageSort::PackageSort()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PackageSort)
}

void PackageSort::InitAsDefaultInstance() {
}

PackageSort::PackageSort(const PackageSort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PackageSort)
}

void PackageSort::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 4;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageSort::~PackageSort() {
  // @@protoc_insertion_point(destructor:Cmd.PackageSort)
  SharedDtor();
}

void PackageSort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageSort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageSort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageSort_descriptor_;
}

const PackageSort& PackageSort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

PackageSort* PackageSort::default_instance_ = NULL;

PackageSort* PackageSort::New() const {
  return new PackageSort;
}

void PackageSort::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 4;
    type_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageSort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PackageSort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGESORT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPackType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .Cmd.SortInfo item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PackageSort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PackageSort)
  return false;
#undef DO_
}

void PackageSort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PackageSort)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGESORT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.SortInfo item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PackageSort)
}

::google::protobuf::uint8* PackageSort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PackageSort)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGESORT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.SortInfo item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PackageSort)
  return target;
}

int PackageSort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGESORT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.SortInfo item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageSort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageSort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageSort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageSort::MergeFrom(const PackageSort& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageSort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageSort::CopyFrom(const PackageSort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageSort::IsInitialized() const {

  return true;
}

void PackageSort::Swap(PackageSort* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageSort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageSort_descriptor_;
  metadata.reflection = PackageSort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equip::kCmdFieldNumber;
const int Equip::kParamFieldNumber;
const int Equip::kOperFieldNumber;
const int Equip::kPosFieldNumber;
const int Equip::kGuidFieldNumber;
const int Equip::kTransferFieldNumber;
const int Equip::kCountFieldNumber;
#endif  // !_MSC_VER

Equip::Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Equip)
}

void Equip::InitAsDefaultInstance() {
}

Equip::Equip(const Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Equip)
}

void Equip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 5;
  oper_ = 0;
  pos_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_ = false;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equip::~Equip() {
  // @@protoc_insertion_point(destructor:Cmd.Equip)
  SharedDtor();
}

void Equip::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equip_descriptor_;
}

const Equip& Equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

Equip* Equip::default_instance_ = NULL;

Equip* Equip::New() const {
  return new Equip;
}

void Equip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Equip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(oper_, pos_);
    ZR_(transfer_, count_);
    cmd_ = 6;
    param_ = 5;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Equip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oper;
        break;
      }

      // optional .Cmd.EEquipOper oper = 3 [default = EEQUIPOPER_MIN];
      case 3: {
        if (tag == 24) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EEquipOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional .Cmd.EEquipPos pos = 4 [default = EEQUIPPOS_MIN];
      case 4: {
        if (tag == 32) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipPos_IsValid(value)) {
            set_pos(static_cast< ::Cmd::EEquipPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guid;
        break;
      }

      // optional string guid = 5;
      case 5: {
        if (tag == 42) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transfer;
        break;
      }

      // optional bool transfer = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_transfer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transfer_)));
          set_has_transfer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional uint32 count = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Equip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Equip)
  return false;
#undef DO_
}

void Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Equip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EEquipOper oper = 3 [default = EEQUIPOPER_MIN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->oper(), output);
  }

  // optional .Cmd.EEquipPos pos = 4 [default = EEQUIPPOS_MIN];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pos(), output);
  }

  // optional string guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guid(), output);
  }

  // optional bool transfer = 6 [default = false];
  if (has_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->transfer(), output);
  }

  // optional uint32 count = 7 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Equip)
}

::google::protobuf::uint8* Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Equip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EEquipOper oper = 3 [default = EEQUIPOPER_MIN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->oper(), target);
  }

  // optional .Cmd.EEquipPos pos = 4 [default = EEQUIPPOS_MIN];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pos(), target);
  }

  // optional string guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guid(), target);
  }

  // optional bool transfer = 6 [default = false];
  if (has_transfer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->transfer(), target);
  }

  // optional uint32 count = 7 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Equip)
  return target;
}

int Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EEquipOper oper = 3 [default = EEQUIPOPER_MIN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional .Cmd.EEquipPos pos = 4 [default = EEQUIPPOS_MIN];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

    // optional string guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional bool transfer = 6 [default = false];
    if (has_transfer()) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 7 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equip::MergeFrom(const Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_transfer()) {
      set_transfer(from.transfer());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip::CopyFrom(const Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {

  return true;
}

void Equip::Swap(Equip* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(oper_, other->oper_);
    std::swap(pos_, other->pos_);
    std::swap(guid_, other->guid_);
    std::swap(transfer_, other->transfer_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equip_descriptor_;
  metadata.reflection = Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItem::kGuidFieldNumber;
const int SItem::kCountFieldNumber;
#endif  // !_MSC_VER

SItem::SItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SItem)
}

void SItem::InitAsDefaultInstance() {
}

SItem::SItem(const SItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SItem)
}

void SItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItem::~SItem() {
  // @@protoc_insertion_point(destructor:Cmd.SItem)
  SharedDtor();
}

void SItem::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void SItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItem_descriptor_;
}

const SItem& SItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

SItem* SItem::default_instance_ = NULL;

SItem* SItem::New() const {
  return new SItem;
}

void SItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SItem)
  return false;
#undef DO_
}

void SItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SItem)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SItem)
}

::google::protobuf::uint8* SItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SItem)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SItem)
  return target;
}

int SItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItem::MergeFrom(const SItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItem::CopyFrom(const SItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItem::IsInitialized() const {

  return true;
}

void SItem::Swap(SItem* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItem_descriptor_;
  metadata.reflection = SItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellItem::kCmdFieldNumber;
const int SellItem::kParamFieldNumber;
const int SellItem::kNpcidFieldNumber;
const int SellItem::kItemsFieldNumber;
#endif  // !_MSC_VER

SellItem::SellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SellItem)
}

void SellItem::InitAsDefaultInstance() {
}

SellItem::SellItem(const SellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SellItem)
}

void SellItem::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 6;
  npcid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellItem::~SellItem() {
  // @@protoc_insertion_point(destructor:Cmd.SellItem)
  SharedDtor();
}

void SellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellItem_descriptor_;
}

const SellItem& SellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

SellItem* SellItem::default_instance_ = NULL;

SellItem* SellItem::New() const {
  return new SellItem;
}

void SellItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 6;
    npcid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SellItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SELLITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.SItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SellItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SellItem)
  return false;
#undef DO_
}

void SellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SellItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SELLITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcid(), output);
  }

  // repeated .Cmd.SItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SellItem)
}

::google::protobuf::uint8* SellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SellItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SELLITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcid(), target);
  }

  // repeated .Cmd.SItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SellItem)
  return target;
}

int SellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SELLITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

  }
  // repeated .Cmd.SItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellItem::MergeFrom(const SellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellItem::CopyFrom(const SellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellItem::IsInitialized() const {

  return true;
}

void SellItem::Swap(SellItem* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellItem_descriptor_;
  metadata.reflection = SellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStrength::kCmdFieldNumber;
const int EquipStrength::kParamFieldNumber;
const int EquipStrength::kGuidFieldNumber;
const int EquipStrength::kDestcountFieldNumber;
const int EquipStrength::kCountFieldNumber;
const int EquipStrength::kCricountFieldNumber;
const int EquipStrength::kOldlvFieldNumber;
const int EquipStrength::kNewlvFieldNumber;
const int EquipStrength::kResultFieldNumber;
const int EquipStrength::kTypeFieldNumber;
#endif  // !_MSC_VER

EquipStrength::EquipStrength()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipStrength)
}

void EquipStrength::InitAsDefaultInstance() {
}

EquipStrength::EquipStrength(const EquipStrength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipStrength)
}

void EquipStrength::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 7;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destcount_ = 0u;
  count_ = 0u;
  cricount_ = 0u;
  oldlv_ = 0u;
  newlv_ = 0u;
  result_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStrength::~EquipStrength() {
  // @@protoc_insertion_point(destructor:Cmd.EquipStrength)
  SharedDtor();
}

void EquipStrength::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EquipStrength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStrength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStrength_descriptor_;
}

const EquipStrength& EquipStrength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipStrength* EquipStrength::default_instance_ = NULL;

EquipStrength* EquipStrength::New() const {
  return new EquipStrength;
}

void EquipStrength::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipStrength*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(destcount_, newlv_);
    cmd_ = 6;
    param_ = 7;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  ZR_(result_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStrength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipStrength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPSTRENGTH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destcount;
        break;
      }

      // optional uint32 destcount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_destcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destcount_)));
          set_has_destcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cricount;
        break;
      }

      // optional uint32 cricount = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_cricount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cricount_)));
          set_has_cricount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_oldlv;
        break;
      }

      // optional uint32 oldlv = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_oldlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldlv_)));
          set_has_oldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_newlv;
        break;
      }

      // optional uint32 newlv = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_newlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newlv_)));
          set_has_newlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_result;
        break;
      }

      // optional .Cmd.EStrengthResult result = 9 [default = ESTRENGTHRESULT_MIN];
      case 9: {
        if (tag == 72) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EStrengthResult_IsValid(value)) {
            set_result(static_cast< ::Cmd::EStrengthResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional .Cmd.EStrengthType type = 10 [default = ESTRENGTHTYPE_MIN];
      case 10: {
        if (tag == 80) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EStrengthType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EStrengthType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipStrength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipStrength)
  return false;
#undef DO_
}

void EquipStrength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipStrength)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPSTRENGTH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional uint32 destcount = 4 [default = 0];
  if (has_destcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->destcount(), output);
  }

  // optional uint32 count = 5 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional uint32 cricount = 6 [default = 0];
  if (has_cricount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cricount(), output);
  }

  // optional uint32 oldlv = 7 [default = 0];
  if (has_oldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->oldlv(), output);
  }

  // optional uint32 newlv = 8 [default = 0];
  if (has_newlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->newlv(), output);
  }

  // optional .Cmd.EStrengthResult result = 9 [default = ESTRENGTHRESULT_MIN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->result(), output);
  }

  // optional .Cmd.EStrengthType type = 10 [default = ESTRENGTHTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipStrength)
}

::google::protobuf::uint8* EquipStrength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipStrength)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPSTRENGTH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional uint32 destcount = 4 [default = 0];
  if (has_destcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->destcount(), target);
  }

  // optional uint32 count = 5 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional uint32 cricount = 6 [default = 0];
  if (has_cricount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cricount(), target);
  }

  // optional uint32 oldlv = 7 [default = 0];
  if (has_oldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->oldlv(), target);
  }

  // optional uint32 newlv = 8 [default = 0];
  if (has_newlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->newlv(), target);
  }

  // optional .Cmd.EStrengthResult result = 9 [default = ESTRENGTHRESULT_MIN];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->result(), target);
  }

  // optional .Cmd.EStrengthType type = 10 [default = ESTRENGTHTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipStrength)
  return target;
}

int EquipStrength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPSTRENGTH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 destcount = 4 [default = 0];
    if (has_destcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destcount());
    }

    // optional uint32 count = 5 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 cricount = 6 [default = 0];
    if (has_cricount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cricount());
    }

    // optional uint32 oldlv = 7 [default = 0];
    if (has_oldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldlv());
    }

    // optional uint32 newlv = 8 [default = 0];
    if (has_newlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newlv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EStrengthResult result = 9 [default = ESTRENGTHRESULT_MIN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .Cmd.EStrengthType type = 10 [default = ESTRENGTHTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStrength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStrength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStrength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStrength::MergeFrom(const EquipStrength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_destcount()) {
      set_destcount(from.destcount());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_cricount()) {
      set_cricount(from.cricount());
    }
    if (from.has_oldlv()) {
      set_oldlv(from.oldlv());
    }
    if (from.has_newlv()) {
      set_newlv(from.newlv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStrength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStrength::CopyFrom(const EquipStrength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStrength::IsInitialized() const {

  return true;
}

void EquipStrength::Swap(EquipStrength* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(destcount_, other->destcount_);
    std::swap(count_, other->count_);
    std::swap(cricount_, other->cricount_);
    std::swap(oldlv_, other->oldlv_);
    std::swap(newlv_, other->newlv_);
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStrength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStrength_descriptor_;
  metadata.reflection = EquipStrength_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Produce::kCmdFieldNumber;
const int Produce::kParamFieldNumber;
const int Produce::kTypeFieldNumber;
const int Produce::kComposeidFieldNumber;
const int Produce::kNpcidFieldNumber;
const int Produce::kItemidFieldNumber;
const int Produce::kCountFieldNumber;
const int Produce::kQucikproduceFieldNumber;
#endif  // !_MSC_VER

Produce::Produce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Produce)
}

void Produce::InitAsDefaultInstance() {
}

Produce::Produce(const Produce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Produce)
}

void Produce::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 9;
  type_ = 1;
  composeid_ = 0u;
  npcid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  count_ = 1u;
  qucikproduce_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Produce::~Produce() {
  // @@protoc_insertion_point(destructor:Cmd.Produce)
  SharedDtor();
}

void Produce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Produce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Produce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Produce_descriptor_;
}

const Produce& Produce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

Produce* Produce::default_instance_ = NULL;

Produce* Produce::New() const {
  return new Produce;
}

void Produce::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Produce*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(composeid_, itemid_);
    cmd_ = 6;
    param_ = 9;
    type_ = 1;
    count_ = 1u;
    qucikproduce_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Produce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Produce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProduceType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EProduceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_composeid;
        break;
      }

      // optional uint32 composeid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_composeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &composeid_)));
          set_has_composeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional uint32 count = 7 [default = 1];
      case 7: {
        if (tag == 56) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_qucikproduce;
        break;
      }

      // optional bool qucikproduce = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_qucikproduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qucikproduce_)));
          set_has_qucikproduce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Produce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Produce)
  return false;
#undef DO_
}

void Produce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Produce)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 composeid = 4 [default = 0];
  if (has_composeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->composeid(), output);
  }

  // optional uint64 npcid = 5 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->npcid(), output);
  }

  // optional uint32 itemid = 6 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemid(), output);
  }

  // optional uint32 count = 7 [default = 1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // optional bool qucikproduce = 8 [default = false];
  if (has_qucikproduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->qucikproduce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Produce)
}

::google::protobuf::uint8* Produce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Produce)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 composeid = 4 [default = 0];
  if (has_composeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->composeid(), target);
  }

  // optional uint64 npcid = 5 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->npcid(), target);
  }

  // optional uint32 itemid = 6 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->itemid(), target);
  }

  // optional uint32 count = 7 [default = 1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // optional bool qucikproduce = 8 [default = false];
  if (has_qucikproduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->qucikproduce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Produce)
  return target;
}

int Produce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 composeid = 4 [default = 0];
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->composeid());
    }

    // optional uint64 npcid = 5 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint32 itemid = 6 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 7 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional bool qucikproduce = 8 [default = false];
    if (has_qucikproduce()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Produce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Produce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Produce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Produce::MergeFrom(const Produce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_composeid()) {
      set_composeid(from.composeid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_qucikproduce()) {
      set_qucikproduce(from.qucikproduce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Produce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Produce::CopyFrom(const Produce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Produce::IsInitialized() const {

  return true;
}

void Produce::Swap(Produce* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(composeid_, other->composeid_);
    std::swap(npcid_, other->npcid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(qucikproduce_, other->qucikproduce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Produce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Produce_descriptor_;
  metadata.reflection = Produce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceDone::kCmdFieldNumber;
const int ProduceDone::kParamFieldNumber;
const int ProduceDone::kTypeFieldNumber;
const int ProduceDone::kNpcidFieldNumber;
const int ProduceDone::kCharidFieldNumber;
const int ProduceDone::kDelayFieldNumber;
const int ProduceDone::kItemidFieldNumber;
#endif  // !_MSC_VER

ProduceDone::ProduceDone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProduceDone)
}

void ProduceDone::InitAsDefaultInstance() {
}

ProduceDone::ProduceDone(const ProduceDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProduceDone)
}

void ProduceDone::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 10;
  type_ = 1;
  npcid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  delay_ = 0u;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceDone::~ProduceDone() {
  // @@protoc_insertion_point(destructor:Cmd.ProduceDone)
  SharedDtor();
}

void ProduceDone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProduceDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceDone_descriptor_;
}

const ProduceDone& ProduceDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ProduceDone* ProduceDone::default_instance_ = NULL;

ProduceDone* ProduceDone::New() const {
  return new ProduceDone;
}

void ProduceDone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProduceDone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(delay_, itemid_);
    cmd_ = 6;
    param_ = 10;
    type_ = 1;
    npcid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProduceDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCEDONE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProduceType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EProduceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProduceDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProduceDone)
  return false;
#undef DO_
}

void ProduceDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProduceDone)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCEDONE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcid(), output);
  }

  // optional uint64 charid = 5 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint32 delay = 6 [default = 0];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay(), output);
  }

  // optional uint32 itemid = 7 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProduceDone)
}

::google::protobuf::uint8* ProduceDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProduceDone)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCEDONE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcid(), target);
  }

  // optional uint64 charid = 5 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint32 delay = 6 [default = 0];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay(), target);
  }

  // optional uint32 itemid = 7 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProduceDone)
  return target;
}

int ProduceDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCEDONE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 npcid = 4 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint64 charid = 5 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 delay = 6 [default = 0];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 itemid = 7 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceDone::MergeFrom(const ProduceDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceDone::CopyFrom(const ProduceDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceDone::IsInitialized() const {

  return true;
}

void ProduceDone::Swap(ProduceDone* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(npcid_, other->npcid_);
    std::swap(charid_, other->charid_);
    std::swap(delay_, other->delay_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceDone_descriptor_;
  metadata.reflection = ProduceDone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipRefine::kCmdFieldNumber;
const int EquipRefine::kParamFieldNumber;
const int EquipRefine::kGuidFieldNumber;
const int EquipRefine::kComposeidFieldNumber;
const int EquipRefine::kRefinelvFieldNumber;
const int EquipRefine::kEresultFieldNumber;
const int EquipRefine::kNpcidFieldNumber;
const int EquipRefine::kSaferefineFieldNumber;
const int EquipRefine::kItemguidFieldNumber;
#endif  // !_MSC_VER

EquipRefine::EquipRefine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipRefine)
}

void EquipRefine::InitAsDefaultInstance() {
}

EquipRefine::EquipRefine(const EquipRefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipRefine)
}

void EquipRefine::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 11;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  composeid_ = 0u;
  refinelv_ = 0u;
  eresult_ = 0;
  npcid_ = GOOGLE_ULONGLONG(0);
  saferefine_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRefine::~EquipRefine() {
  // @@protoc_insertion_point(destructor:Cmd.EquipRefine)
  SharedDtor();
}

void EquipRefine::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EquipRefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipRefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipRefine_descriptor_;
}

const EquipRefine& EquipRefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipRefine* EquipRefine::default_instance_ = NULL;

EquipRefine* EquipRefine::New() const {
  return new EquipRefine;
}

void EquipRefine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipRefine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(composeid_, saferefine_);
    cmd_ = 6;
    param_ = 11;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemguid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipRefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipRefine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REFINE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_composeid;
        break;
      }

      // optional uint32 composeid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_composeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &composeid_)));
          set_has_composeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_refinelv;
        break;
      }

      // optional uint32 refinelv = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_eresult;
        break;
      }

      // optional .Cmd.ERefineResult eresult = 6 [default = EREFINERESULT_MIN];
      case 6: {
        if (tag == 48) {
         parse_eresult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERefineResult_IsValid(value)) {
            set_eresult(static_cast< ::Cmd::ERefineResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_saferefine;
        break;
      }

      // optional bool saferefine = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_saferefine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &saferefine_)));
          set_has_saferefine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemguid;
        break;
      }

      // repeated string itemguid = 9;
      case 9: {
        if (tag == 74) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid(this->itemguid_size() - 1).data(),
            this->itemguid(this->itemguid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemguid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipRefine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipRefine)
  return false;
#undef DO_
}

void EquipRefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipRefine)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REFINE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional uint32 composeid = 4 [default = 0];
  if (has_composeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->composeid(), output);
  }

  // optional uint32 refinelv = 5 [default = 0];
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refinelv(), output);
  }

  // optional .Cmd.ERefineResult eresult = 6 [default = EREFINERESULT_MIN];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->eresult(), output);
  }

  // optional uint64 npcid = 7 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->npcid(), output);
  }

  // optional bool saferefine = 8 [default = false];
  if (has_saferefine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->saferefine(), output);
  }

  // repeated string itemguid = 9;
  for (int i = 0; i < this->itemguid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->itemguid(i).data(), this->itemguid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->itemguid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipRefine)
}

::google::protobuf::uint8* EquipRefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipRefine)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REFINE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional uint32 composeid = 4 [default = 0];
  if (has_composeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->composeid(), target);
  }

  // optional uint32 refinelv = 5 [default = 0];
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refinelv(), target);
  }

  // optional .Cmd.ERefineResult eresult = 6 [default = EREFINERESULT_MIN];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->eresult(), target);
  }

  // optional uint64 npcid = 7 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->npcid(), target);
  }

  // optional bool saferefine = 8 [default = false];
  if (has_saferefine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->saferefine(), target);
  }

  // repeated string itemguid = 9;
  for (int i = 0; i < this->itemguid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid(i).data(), this->itemguid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->itemguid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipRefine)
  return target;
}

int EquipRefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REFINE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 composeid = 4 [default = 0];
    if (has_composeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->composeid());
    }

    // optional uint32 refinelv = 5 [default = 0];
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

    // optional .Cmd.ERefineResult eresult = 6 [default = EREFINERESULT_MIN];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eresult());
    }

    // optional uint64 npcid = 7 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional bool saferefine = 8 [default = false];
    if (has_saferefine()) {
      total_size += 1 + 1;
    }

  }
  // repeated string itemguid = 9;
  total_size += 1 * this->itemguid_size();
  for (int i = 0; i < this->itemguid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->itemguid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipRefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipRefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipRefine::MergeFrom(const EquipRefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemguid_.MergeFrom(from.itemguid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_composeid()) {
      set_composeid(from.composeid());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_saferefine()) {
      set_saferefine(from.saferefine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipRefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipRefine::CopyFrom(const EquipRefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRefine::IsInitialized() const {

  return true;
}

void EquipRefine::Swap(EquipRefine* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(composeid_, other->composeid_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(eresult_, other->eresult_);
    std::swap(npcid_, other->npcid_);
    std::swap(saferefine_, other->saferefine_);
    itemguid_.Swap(&other->itemguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipRefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipRefine_descriptor_;
  metadata.reflection = EquipRefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipDecompose::kCmdFieldNumber;
const int EquipDecompose::kParamFieldNumber;
const int EquipDecompose::kGuidFieldNumber;
const int EquipDecompose::kResultFieldNumber;
const int EquipDecompose::kItemsFieldNumber;
#endif  // !_MSC_VER

EquipDecompose::EquipDecompose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipDecompose)
}

void EquipDecompose::InitAsDefaultInstance() {
}

EquipDecompose::EquipDecompose(const EquipDecompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipDecompose)
}

void EquipDecompose::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 12;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipDecompose::~EquipDecompose() {
  // @@protoc_insertion_point(destructor:Cmd.EquipDecompose)
  SharedDtor();
}

void EquipDecompose::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EquipDecompose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipDecompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipDecompose_descriptor_;
}

const EquipDecompose& EquipDecompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipDecompose* EquipDecompose::default_instance_ = NULL;

EquipDecompose* EquipDecompose::New() const {
  return new EquipDecompose;
}

void EquipDecompose::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 6;
    param_ = 12;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    result_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipDecompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipDecompose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_DECOMPOSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .Cmd.EDecomposeResult result = 4 [default = EDECOMPOSERESULT_MIN];
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDecomposeResult_IsValid(value)) {
            set_result(static_cast< ::Cmd::EDecomposeResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipDecompose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipDecompose)
  return false;
#undef DO_
}

void EquipDecompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipDecompose)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_DECOMPOSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional .Cmd.EDecomposeResult result = 4 [default = EDECOMPOSERESULT_MIN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipDecompose)
}

::google::protobuf::uint8* EquipDecompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipDecompose)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_DECOMPOSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional .Cmd.EDecomposeResult result = 4 [default = EDECOMPOSERESULT_MIN];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipDecompose)
  return target;
}

int EquipDecompose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_DECOMPOSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional .Cmd.EDecomposeResult result = 4 [default = EDECOMPOSERESULT_MIN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .Cmd.ItemInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipDecompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipDecompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipDecompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipDecompose::MergeFrom(const EquipDecompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipDecompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipDecompose::CopyFrom(const EquipDecompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipDecompose::IsInitialized() const {

  return true;
}

void EquipDecompose::Swap(EquipDecompose* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(result_, other->result_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipDecompose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipDecompose_descriptor_;
  metadata.reflection = EquipDecompose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecomposeResult::kItemFieldNumber;
const int DecomposeResult::kRateFieldNumber;
const int DecomposeResult::kMinCountFieldNumber;
const int DecomposeResult::kMaxCountFieldNumber;
#endif  // !_MSC_VER

DecomposeResult::DecomposeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DecomposeResult)
}

void DecomposeResult::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::ItemInfo*>(&::Cmd::ItemInfo::default_instance());
}

DecomposeResult::DecomposeResult(const DecomposeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DecomposeResult)
}

void DecomposeResult::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  rate_ = 0u;
  min_count_ = 0u;
  max_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecomposeResult::~DecomposeResult() {
  // @@protoc_insertion_point(destructor:Cmd.DecomposeResult)
  SharedDtor();
}

void DecomposeResult::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void DecomposeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecomposeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecomposeResult_descriptor_;
}

const DecomposeResult& DecomposeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

DecomposeResult* DecomposeResult::default_instance_ = NULL;

DecomposeResult* DecomposeResult::New() const {
  return new DecomposeResult;
}

void DecomposeResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DecomposeResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rate_, max_count_);
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::ItemInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecomposeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DecomposeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ItemInfo item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_count;
        break;
      }

      // optional uint32 min_count = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_min_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_count_)));
          set_has_min_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_count;
        break;
      }

      // optional uint32 max_count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DecomposeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DecomposeResult)
  return false;
#undef DO_
}

void DecomposeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DecomposeResult)
  // optional .Cmd.ItemInfo item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // optional uint32 rate = 2 [default = 0];
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  // optional uint32 min_count = 3 [default = 0];
  if (has_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_count(), output);
  }

  // optional uint32 max_count = 4 [default = 0];
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DecomposeResult)
}

::google::protobuf::uint8* DecomposeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DecomposeResult)
  // optional .Cmd.ItemInfo item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // optional uint32 rate = 2 [default = 0];
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  // optional uint32 min_count = 3 [default = 0];
  if (has_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_count(), target);
  }

  // optional uint32 max_count = 4 [default = 0];
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DecomposeResult)
  return target;
}

int DecomposeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ItemInfo item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional uint32 rate = 2 [default = 0];
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // optional uint32 min_count = 3 [default = 0];
    if (has_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_count());
    }

    // optional uint32 max_count = 4 [default = 0];
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecomposeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecomposeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecomposeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecomposeResult::MergeFrom(const DecomposeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::Cmd::ItemInfo::MergeFrom(from.item());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_min_count()) {
      set_min_count(from.min_count());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecomposeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecomposeResult::CopyFrom(const DecomposeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecomposeResult::IsInitialized() const {

  return true;
}

void DecomposeResult::Swap(DecomposeResult* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(rate_, other->rate_);
    std::swap(min_count_, other->min_count_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecomposeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecomposeResult_descriptor_;
  metadata.reflection = DecomposeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDecomposeResultItemCmd::kCmdFieldNumber;
const int QueryDecomposeResultItemCmd::kParamFieldNumber;
const int QueryDecomposeResultItemCmd::kGuidFieldNumber;
const int QueryDecomposeResultItemCmd::kResultsFieldNumber;
const int QueryDecomposeResultItemCmd::kSellPriceFieldNumber;
#endif  // !_MSC_VER

QueryDecomposeResultItemCmd::QueryDecomposeResultItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryDecomposeResultItemCmd)
}

void QueryDecomposeResultItemCmd::InitAsDefaultInstance() {
}

QueryDecomposeResultItemCmd::QueryDecomposeResultItemCmd(const QueryDecomposeResultItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryDecomposeResultItemCmd)
}

void QueryDecomposeResultItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 27;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sell_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDecomposeResultItemCmd::~QueryDecomposeResultItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryDecomposeResultItemCmd)
  SharedDtor();
}

void QueryDecomposeResultItemCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void QueryDecomposeResultItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDecomposeResultItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDecomposeResultItemCmd_descriptor_;
}

const QueryDecomposeResultItemCmd& QueryDecomposeResultItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QueryDecomposeResultItemCmd* QueryDecomposeResultItemCmd::default_instance_ = NULL;

QueryDecomposeResultItemCmd* QueryDecomposeResultItemCmd::New() const {
  return new QueryDecomposeResultItemCmd;
}

void QueryDecomposeResultItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    cmd_ = 6;
    param_ = 27;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    sell_price_ = 0u;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDecomposeResultItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryDecomposeResultItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYDECOMPOSERESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_results;
        break;
      }

      // repeated .Cmd.DecomposeResult results = 4;
      case 4: {
        if (tag == 34) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_results;
        if (input->ExpectTag(40)) goto parse_sell_price;
        break;
      }

      // optional uint32 sell_price = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_price_)));
          set_has_sell_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryDecomposeResultItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryDecomposeResultItemCmd)
  return false;
#undef DO_
}

void QueryDecomposeResultItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryDecomposeResultItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYDECOMPOSERESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // repeated .Cmd.DecomposeResult results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(i), output);
  }

  // optional uint32 sell_price = 5 [default = 0];
  if (has_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sell_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryDecomposeResultItemCmd)
}

::google::protobuf::uint8* QueryDecomposeResultItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryDecomposeResultItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYDECOMPOSERESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // repeated .Cmd.DecomposeResult results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->results(i), target);
  }

  // optional uint32 sell_price = 5 [default = 0];
  if (has_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sell_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryDecomposeResultItemCmd)
  return target;
}

int QueryDecomposeResultItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYDECOMPOSERESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 sell_price = 5 [default = 0];
    if (has_sell_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_price());
    }

  }
  // repeated .Cmd.DecomposeResult results = 4;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDecomposeResultItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDecomposeResultItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDecomposeResultItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDecomposeResultItemCmd::MergeFrom(const QueryDecomposeResultItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_sell_price()) {
      set_sell_price(from.sell_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDecomposeResultItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDecomposeResultItemCmd::CopyFrom(const QueryDecomposeResultItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDecomposeResultItemCmd::IsInitialized() const {

  return true;
}

void QueryDecomposeResultItemCmd::Swap(QueryDecomposeResultItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    results_.Swap(&other->results_);
    std::swap(sell_price_, other->sell_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDecomposeResultItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDecomposeResultItemCmd_descriptor_;
  metadata.reflection = QueryDecomposeResultItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryEquipData::kCmdFieldNumber;
const int QueryEquipData::kParamFieldNumber;
const int QueryEquipData::kGuidFieldNumber;
const int QueryEquipData::kDataFieldNumber;
#endif  // !_MSC_VER

QueryEquipData::QueryEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryEquipData)
}

void QueryEquipData::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::EquipData*>(&::Cmd::EquipData::default_instance());
}

QueryEquipData::QueryEquipData(const QueryEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryEquipData)
}

void QueryEquipData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 13;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryEquipData::~QueryEquipData() {
  // @@protoc_insertion_point(destructor:Cmd.QueryEquipData)
  SharedDtor();
}

void QueryEquipData::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void QueryEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryEquipData_descriptor_;
}

const QueryEquipData& QueryEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QueryEquipData* QueryEquipData::default_instance_ = NULL;

QueryEquipData* QueryEquipData::New() const {
  return new QueryEquipData;
}

void QueryEquipData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 6;
    param_ = 13;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::EquipData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryEquipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYEQUIPDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.EquipData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryEquipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryEquipData)
  return false;
#undef DO_
}

void QueryEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryEquipData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYEQUIPDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional .Cmd.EquipData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryEquipData)
}

::google::protobuf::uint8* QueryEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryEquipData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYEQUIPDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional .Cmd.EquipData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryEquipData)
  return target;
}

int QueryEquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYEQUIPDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional .Cmd.EquipData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryEquipData::MergeFrom(const QueryEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::EquipData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryEquipData::CopyFrom(const QueryEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEquipData::IsInitialized() const {

  return true;
}

void QueryEquipData::Swap(QueryEquipData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryEquipData_descriptor_;
  metadata.reflection = QueryEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrowsePackage::kCmdFieldNumber;
const int BrowsePackage::kParamFieldNumber;
const int BrowsePackage::kTypeFieldNumber;
#endif  // !_MSC_VER

BrowsePackage::BrowsePackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BrowsePackage)
}

void BrowsePackage::InitAsDefaultInstance() {
}

BrowsePackage::BrowsePackage(const BrowsePackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BrowsePackage)
}

void BrowsePackage::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 14;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrowsePackage::~BrowsePackage() {
  // @@protoc_insertion_point(destructor:Cmd.BrowsePackage)
  SharedDtor();
}

void BrowsePackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrowsePackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowsePackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowsePackage_descriptor_;
}

const BrowsePackage& BrowsePackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

BrowsePackage* BrowsePackage::default_instance_ = NULL;

BrowsePackage* BrowsePackage::New() const {
  return new BrowsePackage;
}

void BrowsePackage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 14;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrowsePackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BrowsePackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_BROWSEPACK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPackType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BrowsePackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BrowsePackage)
  return false;
#undef DO_
}

void BrowsePackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BrowsePackage)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_BROWSEPACK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BrowsePackage)
}

::google::protobuf::uint8* BrowsePackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BrowsePackage)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_BROWSEPACK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BrowsePackage)
  return target;
}

int BrowsePackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_BROWSEPACK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowsePackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrowsePackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrowsePackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrowsePackage::MergeFrom(const BrowsePackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrowsePackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowsePackage::CopyFrom(const BrowsePackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowsePackage::IsInitialized() const {

  return true;
}

void BrowsePackage::Swap(BrowsePackage* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrowsePackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrowsePackage_descriptor_;
  metadata.reflection = BrowsePackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipCard::kCmdFieldNumber;
const int EquipCard::kParamFieldNumber;
const int EquipCard::kOperFieldNumber;
const int EquipCard::kCardguidFieldNumber;
const int EquipCard::kEquipguidFieldNumber;
const int EquipCard::kPosFieldNumber;
#endif  // !_MSC_VER

EquipCard::EquipCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipCard)
}

void EquipCard::InitAsDefaultInstance() {
}

EquipCard::EquipCard(const EquipCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipCard)
}

void EquipCard::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 15;
  oper_ = 0;
  cardguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipCard::~EquipCard() {
  // @@protoc_insertion_point(destructor:Cmd.EquipCard)
  SharedDtor();
}

void EquipCard::SharedDtor() {
  if (cardguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardguid_;
  }
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipguid_;
  }
  if (this != default_instance_) {
  }
}

void EquipCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipCard_descriptor_;
}

const EquipCard& EquipCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipCard* EquipCard::default_instance_ = NULL;

EquipCard* EquipCard::New() const {
  return new EquipCard;
}

void EquipCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(oper_, pos_);
    cmd_ = 6;
    param_ = 15;
    if (has_cardguid()) {
      if (cardguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cardguid_->clear();
      }
    }
    if (has_equipguid()) {
      if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equipguid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oper;
        break;
      }

      // optional .Cmd.ECardOper oper = 3 [default = ECARDOPER_MIN];
      case 3: {
        if (tag == 24) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECardOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::ECardOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cardguid;
        break;
      }

      // optional string cardguid = 4;
      case 4: {
        if (tag == 34) {
         parse_cardguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardguid().data(), this->cardguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cardguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equipguid;
        break;
      }

      // optional string equipguid = 5;
      case 5: {
        if (tag == 42) {
         parse_equipguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->equipguid().data(), this->equipguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "equipguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipCard)
  return false;
#undef DO_
}

void EquipCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipCard)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ECardOper oper = 3 [default = ECARDOPER_MIN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->oper(), output);
  }

  // optional string cardguid = 4;
  if (has_cardguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardguid().data(), this->cardguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cardguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cardguid(), output);
  }

  // optional string equipguid = 5;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipguid().data(), this->equipguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->equipguid(), output);
  }

  // optional uint32 pos = 6 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipCard)
}

::google::protobuf::uint8* EquipCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipCard)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ECardOper oper = 3 [default = ECARDOPER_MIN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->oper(), target);
  }

  // optional string cardguid = 4;
  if (has_cardguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardguid().data(), this->cardguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cardguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cardguid(), target);
  }

  // optional string equipguid = 5;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipguid().data(), this->equipguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->equipguid(), target);
  }

  // optional uint32 pos = 6 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipCard)
  return target;
}

int EquipCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ECardOper oper = 3 [default = ECARDOPER_MIN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional string cardguid = 4;
    if (has_cardguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardguid());
    }

    // optional string equipguid = 5;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipguid());
    }

    // optional uint32 pos = 6 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipCard::MergeFrom(const EquipCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_cardguid()) {
      set_cardguid(from.cardguid());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipCard::CopyFrom(const EquipCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipCard::IsInitialized() const {

  return true;
}

void EquipCard::Swap(EquipCard* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(oper_, other->oper_);
    std::swap(cardguid_, other->cardguid_);
    std::swap(equipguid_, other->equipguid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipCard_descriptor_;
  metadata.reflection = EquipCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemShow::kCmdFieldNumber;
const int ItemShow::kParamFieldNumber;
const int ItemShow::kItemsFieldNumber;
#endif  // !_MSC_VER

ItemShow::ItemShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemShow)
}

void ItemShow::InitAsDefaultInstance() {
}

ItemShow::ItemShow(const ItemShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemShow)
}

void ItemShow::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 16;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemShow::~ItemShow() {
  // @@protoc_insertion_point(destructor:Cmd.ItemShow)
  SharedDtor();
}

void ItemShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemShow_descriptor_;
}

const ItemShow& ItemShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ItemShow* ItemShow::default_instance_ = NULL;

ItemShow* ItemShow::New() const {
  return new ItemShow;
}

void ItemShow::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 6;
    param_ = 16;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemShow)
  return false;
#undef DO_
}

void ItemShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemShow)
}

::google::protobuf::uint8* ItemShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemShow)
  return target;
}

int ItemShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ItemInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemShow::MergeFrom(const ItemShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemShow::CopyFrom(const ItemShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemShow::IsInitialized() const {

  return true;
}

void ItemShow::Swap(ItemShow* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemShow_descriptor_;
  metadata.reflection = ItemShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemShow64::kCmdFieldNumber;
const int ItemShow64::kParamFieldNumber;
const int ItemShow64::kIdFieldNumber;
const int ItemShow64::kCountFieldNumber;
#endif  // !_MSC_VER

ItemShow64::ItemShow64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemShow64)
}

void ItemShow64::InitAsDefaultInstance() {
}

ItemShow64::ItemShow64(const ItemShow64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemShow64)
}

void ItemShow64::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 35;
  id_ = 0u;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemShow64::~ItemShow64() {
  // @@protoc_insertion_point(destructor:Cmd.ItemShow64)
  SharedDtor();
}

void ItemShow64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemShow64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemShow64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemShow64_descriptor_;
}

const ItemShow64& ItemShow64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ItemShow64* ItemShow64::default_instance_ = NULL;

ItemShow64* ItemShow64::New() const {
  return new ItemShow64;
}

void ItemShow64::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemShow64*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(count_, id_);
    cmd_ = 6;
    param_ = 35;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemShow64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemShow64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW64];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint64 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemShow64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemShow64)
  return false;
#undef DO_
}

void ItemShow64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemShow64)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW64];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint64 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemShow64)
}

::google::protobuf::uint8* ItemShow64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemShow64)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW64];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint64 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemShow64)
  return target;
}

int ItemShow64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW64];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemShow64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemShow64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemShow64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemShow64::MergeFrom(const ItemShow64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemShow64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemShow64::CopyFrom(const ItemShow64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemShow64::IsInitialized() const {

  return true;
}

void ItemShow64::Swap(ItemShow64* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemShow64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemShow64_descriptor_;
  metadata.reflection = ItemShow64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipRepair::kCmdFieldNumber;
const int EquipRepair::kParamFieldNumber;
const int EquipRepair::kTargetguidFieldNumber;
const int EquipRepair::kSuccessFieldNumber;
const int EquipRepair::kStuffguidFieldNumber;
#endif  // !_MSC_VER

EquipRepair::EquipRepair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipRepair)
}

void EquipRepair::InitAsDefaultInstance() {
}

EquipRepair::EquipRepair(const EquipRepair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipRepair)
}

void EquipRepair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 17;
  targetguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  stuffguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRepair::~EquipRepair() {
  // @@protoc_insertion_point(destructor:Cmd.EquipRepair)
  SharedDtor();
}

void EquipRepair::SharedDtor() {
  if (targetguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetguid_;
  }
  if (stuffguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stuffguid_;
  }
  if (this != default_instance_) {
  }
}

void EquipRepair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipRepair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipRepair_descriptor_;
}

const EquipRepair& EquipRepair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipRepair* EquipRepair::default_instance_ = NULL;

EquipRepair* EquipRepair::New() const {
  return new EquipRepair;
}

void EquipRepair::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 6;
    param_ = 17;
    if (has_targetguid()) {
      if (targetguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetguid_->clear();
      }
    }
    success_ = false;
    if (has_stuffguid()) {
      if (stuffguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stuffguid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipRepair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipRepair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REPAIR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_targetguid;
        break;
      }

      // optional string targetguid = 3;
      case 3: {
        if (tag == 26) {
         parse_targetguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetguid().data(), this->targetguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stuffguid;
        break;
      }

      // optional string stuffguid = 5;
      case 5: {
        if (tag == 42) {
         parse_stuffguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stuffguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stuffguid().data(), this->stuffguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stuffguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipRepair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipRepair)
  return false;
#undef DO_
}

void EquipRepair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipRepair)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REPAIR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string targetguid = 3;
  if (has_targetguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetguid().data(), this->targetguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->targetguid(), output);
  }

  // optional bool success = 4 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional string stuffguid = 5;
  if (has_stuffguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stuffguid().data(), this->stuffguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stuffguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stuffguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipRepair)
}

::google::protobuf::uint8* EquipRepair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipRepair)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REPAIR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string targetguid = 3;
  if (has_targetguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetguid().data(), this->targetguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetguid(), target);
  }

  // optional bool success = 4 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional string stuffguid = 5;
  if (has_stuffguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stuffguid().data(), this->stuffguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stuffguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stuffguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipRepair)
  return target;
}

int EquipRepair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REPAIR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string targetguid = 3;
    if (has_targetguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetguid());
    }

    // optional bool success = 4 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string stuffguid = 5;
    if (has_stuffguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stuffguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRepair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipRepair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipRepair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipRepair::MergeFrom(const EquipRepair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_targetguid()) {
      set_targetguid(from.targetguid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_stuffguid()) {
      set_stuffguid(from.stuffguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipRepair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipRepair::CopyFrom(const EquipRepair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRepair::IsInitialized() const {

  return true;
}

void EquipRepair::Swap(EquipRepair* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(targetguid_, other->targetguid_);
    std::swap(success_, other->success_);
    std::swap(stuffguid_, other->stuffguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipRepair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipRepair_descriptor_;
  metadata.reflection = EquipRepair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HintNtf::kCmdFieldNumber;
const int HintNtf::kParamFieldNumber;
const int HintNtf::kItemidFieldNumber;
#endif  // !_MSC_VER

HintNtf::HintNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HintNtf)
}

void HintNtf::InitAsDefaultInstance() {
}

HintNtf::HintNtf(const HintNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HintNtf)
}

void HintNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 18;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HintNtf::~HintNtf() {
  // @@protoc_insertion_point(destructor:Cmd.HintNtf)
  SharedDtor();
}

void HintNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HintNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HintNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HintNtf_descriptor_;
}

const HintNtf& HintNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

HintNtf* HintNtf::default_instance_ = NULL;

HintNtf* HintNtf::New() const {
  return new HintNtf;
}

void HintNtf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 18;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HintNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HintNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HINTNTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HintNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HintNtf)
  return false;
#undef DO_
}

void HintNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HintNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HINTNTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 itemid = 3 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HintNtf)
}

::google::protobuf::uint8* HintNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HintNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HINTNTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 itemid = 3 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HintNtf)
  return target;
}

int HintNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HINTNTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 itemid = 3 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HintNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HintNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HintNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HintNtf::MergeFrom(const HintNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HintNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HintNtf::CopyFrom(const HintNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HintNtf::IsInitialized() const {

  return true;
}

void HintNtf::Swap(HintNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HintNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HintNtf_descriptor_;
  metadata.reflection = HintNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantEquip::kCmdFieldNumber;
const int EnchantEquip::kParamFieldNumber;
const int EnchantEquip::kTypeFieldNumber;
const int EnchantEquip::kGuidFieldNumber;
#endif  // !_MSC_VER

EnchantEquip::EnchantEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnchantEquip)
}

void EnchantEquip::InitAsDefaultInstance() {
}

EnchantEquip::EnchantEquip(const EnchantEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnchantEquip)
}

void EnchantEquip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 19;
  type_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantEquip::~EnchantEquip() {
  // @@protoc_insertion_point(destructor:Cmd.EnchantEquip)
  SharedDtor();
}

void EnchantEquip::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EnchantEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantEquip_descriptor_;
}

const EnchantEquip& EnchantEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EnchantEquip* EnchantEquip::default_instance_ = NULL;

EnchantEquip* EnchantEquip::New() const {
  return new EnchantEquip;
}

void EnchantEquip::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 6;
    param_ = 19;
    type_ = 0;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnchantEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnchantEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EEnchantType type = 3 [default = EENCHANTTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEnchantType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EEnchantType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        break;
      }

      // optional string guid = 4;
      case 4: {
        if (tag == 34) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnchantEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnchantEquip)
  return false;
#undef DO_
}

void EnchantEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnchantEquip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EEnchantType type = 3 [default = EENCHANTTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnchantEquip)
}

::google::protobuf::uint8* EnchantEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnchantEquip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EEnchantType type = 3 [default = EENCHANTTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnchantEquip)
  return target;
}

int EnchantEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EEnchantType type = 3 [default = EENCHANTTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnchantEquip::MergeFrom(const EnchantEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnchantEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnchantEquip::CopyFrom(const EnchantEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnchantEquip::IsInitialized() const {

  return true;
}

void EnchantEquip::Swap(EnchantEquip* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnchantEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantEquip_descriptor_;
  metadata.reflection = EnchantEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeComposePair::kComposeIdFieldNumber;
const int TradeComposePair::kCountFieldNumber;
#endif  // !_MSC_VER

TradeComposePair::TradeComposePair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeComposePair)
}

void TradeComposePair::InitAsDefaultInstance() {
}

TradeComposePair::TradeComposePair(const TradeComposePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeComposePair)
}

void TradeComposePair::SharedCtor() {
  _cached_size_ = 0;
  compose_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeComposePair::~TradeComposePair() {
  // @@protoc_insertion_point(destructor:Cmd.TradeComposePair)
  SharedDtor();
}

void TradeComposePair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeComposePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeComposePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeComposePair_descriptor_;
}

const TradeComposePair& TradeComposePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

TradeComposePair* TradeComposePair::default_instance_ = NULL;

TradeComposePair* TradeComposePair::New() const {
  return new TradeComposePair;
}

void TradeComposePair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeComposePair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(compose_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeComposePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeComposePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 compose_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compose_id_)));
          set_has_compose_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeComposePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeComposePair)
  return false;
#undef DO_
}

void TradeComposePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeComposePair)
  // optional uint32 compose_id = 1;
  if (has_compose_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->compose_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeComposePair)
}

::google::protobuf::uint8* TradeComposePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeComposePair)
  // optional uint32 compose_id = 1;
  if (has_compose_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->compose_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeComposePair)
  return target;
}

int TradeComposePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 compose_id = 1;
    if (has_compose_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compose_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeComposePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeComposePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeComposePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeComposePair::MergeFrom(const TradeComposePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compose_id()) {
      set_compose_id(from.compose_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeComposePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeComposePair::CopyFrom(const TradeComposePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeComposePair::IsInitialized() const {

  return true;
}

void TradeComposePair::Swap(TradeComposePair* other) {
  if (other != this) {
    std::swap(compose_id_, other->compose_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeComposePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeComposePair_descriptor_;
  metadata.reflection = TradeComposePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeRefineData::kComposeInfosFieldNumber;
#endif  // !_MSC_VER

TradeRefineData::TradeRefineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeRefineData)
}

void TradeRefineData::InitAsDefaultInstance() {
}

TradeRefineData::TradeRefineData(const TradeRefineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeRefineData)
}

void TradeRefineData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeRefineData::~TradeRefineData() {
  // @@protoc_insertion_point(destructor:Cmd.TradeRefineData)
  SharedDtor();
}

void TradeRefineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeRefineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeRefineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeRefineData_descriptor_;
}

const TradeRefineData& TradeRefineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

TradeRefineData* TradeRefineData::default_instance_ = NULL;

TradeRefineData* TradeRefineData::New() const {
  return new TradeRefineData;
}

void TradeRefineData::Clear() {
  composeinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeRefineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeRefineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.TradeComposePair composeInfos = 1;
      case 1: {
        if (tag == 10) {
         parse_composeInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_composeinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_composeInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeRefineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeRefineData)
  return false;
#undef DO_
}

void TradeRefineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeRefineData)
  // repeated .Cmd.TradeComposePair composeInfos = 1;
  for (int i = 0; i < this->composeinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->composeinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeRefineData)
}

::google::protobuf::uint8* TradeRefineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeRefineData)
  // repeated .Cmd.TradeComposePair composeInfos = 1;
  for (int i = 0; i < this->composeinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->composeinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeRefineData)
  return target;
}

int TradeRefineData::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.TradeComposePair composeInfos = 1;
  total_size += 1 * this->composeinfos_size();
  for (int i = 0; i < this->composeinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->composeinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeRefineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeRefineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeRefineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeRefineData::MergeFrom(const TradeRefineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  composeinfos_.MergeFrom(from.composeinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeRefineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeRefineData::CopyFrom(const TradeRefineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeRefineData::IsInitialized() const {

  return true;
}

void TradeRefineData::Swap(TradeRefineData* other) {
  if (other != this) {
    composeinfos_.Swap(&other->composeinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeRefineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeRefineData_descriptor_;
  metadata.reflection = TradeRefineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeItemBaseInfo::kItemidFieldNumber;
const int TradeItemBaseInfo::kPriceFieldNumber;
const int TradeItemBaseInfo::kCountFieldNumber;
const int TradeItemBaseInfo::kGuidFieldNumber;
const int TradeItemBaseInfo::kOrderIdFieldNumber;
const int TradeItemBaseInfo::kRefineLvFieldNumber;
const int TradeItemBaseInfo::kOverlapFieldNumber;
const int TradeItemBaseInfo::kIsExpiredFieldNumber;
const int TradeItemBaseInfo::kItemDataFieldNumber;
const int TradeItemBaseInfo::kPublicityIdFieldNumber;
const int TradeItemBaseInfo::kEndTimeFieldNumber;
const int TradeItemBaseInfo::kKeyFieldNumber;
const int TradeItemBaseInfo::kCharidFieldNumber;
const int TradeItemBaseInfo::kNameFieldNumber;
const int TradeItemBaseInfo::kTypeFieldNumber;
const int TradeItemBaseInfo::kUpRateFieldNumber;
const int TradeItemBaseInfo::kDownRateFieldNumber;
#endif  // !_MSC_VER

TradeItemBaseInfo::TradeItemBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradeItemBaseInfo)
}

void TradeItemBaseInfo::InitAsDefaultInstance() {
  item_data_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

TradeItemBaseInfo::TradeItemBaseInfo(const TradeItemBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradeItemBaseInfo)
}

void TradeItemBaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemid_ = 0u;
  price_ = 0u;
  count_ = 0u;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_ = GOOGLE_ULONGLONG(0);
  refine_lv_ = 0u;
  overlap_ = false;
  is_expired_ = false;
  item_data_ = NULL;
  publicity_id_ = 0u;
  end_time_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  up_rate_ = 0u;
  down_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeItemBaseInfo::~TradeItemBaseInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TradeItemBaseInfo)
  SharedDtor();
}

void TradeItemBaseInfo::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete item_data_;
  }
}

void TradeItemBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeItemBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeItemBaseInfo_descriptor_;
}

const TradeItemBaseInfo& TradeItemBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

TradeItemBaseInfo* TradeItemBaseInfo::default_instance_ = NULL;

TradeItemBaseInfo* TradeItemBaseInfo::New() const {
  return new TradeItemBaseInfo;
}

void TradeItemBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradeItemBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(itemid_, price_);
    ZR_(count_, is_expired_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(charid_, end_time_);
    if (has_item_data()) {
      if (item_data_ != NULL) item_data_->::Cmd::ItemData::Clear();
    }
    publicity_id_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
    up_rate_ = 0u;
  }
  down_rate_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeItemBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradeItemBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional uint32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        break;
      }

      // optional string guid = 4;
      case 4: {
        if (tag == 34) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_order_id;
        break;
      }

      // optional uint64 order_id = 5;
      case 5: {
        if (tag == 40) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_refine_lv;
        break;
      }

      // optional uint32 refine_lv = 6;
      case 6: {
        if (tag == 48) {
         parse_refine_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_lv_)));
          set_has_refine_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_overlap;
        break;
      }

      // optional bool overlap = 8;
      case 8: {
        if (tag == 64) {
         parse_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overlap_)));
          set_has_overlap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_expired;
        break;
      }

      // optional bool is_expired = 9;
      case 9: {
        if (tag == 72) {
         parse_is_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_expired_)));
          set_has_is_expired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_item_data;
        break;
      }

      // optional .Cmd.ItemData item_data = 10;
      case 10: {
        if (tag == 82) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_publicity_id;
        break;
      }

      // optional uint32 publicity_id = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_publicity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publicity_id_)));
          set_has_publicity_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_key;
        break;
      }

      // optional string key = 13;
      case 13: {
        if (tag == 106) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 14;
      case 14: {
        if (tag == 112) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_name;
        break;
      }

      // optional string name = 15;
      case 15: {
        if (tag == 122) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_type;
        break;
      }

      // optional .Cmd.ETradeType type = 16 [default = ETRADETYPE_TRADE];
      case 16: {
        if (tag == 128) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETradeType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETradeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_up_rate;
        break;
      }

      // optional uint32 up_rate = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_up_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_rate_)));
          set_has_up_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_down_rate;
        break;
      }

      // optional uint32 down_rate = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_down_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_rate_)));
          set_has_down_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradeItemBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradeItemBaseInfo)
  return false;
#undef DO_
}

void TradeItemBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradeItemBaseInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guid(), output);
  }

  // optional uint64 order_id = 5;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->order_id(), output);
  }

  // optional uint32 refine_lv = 6;
  if (has_refine_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->refine_lv(), output);
  }

  // optional bool overlap = 8;
  if (has_overlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->overlap(), output);
  }

  // optional bool is_expired = 9;
  if (has_is_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_expired(), output);
  }

  // optional .Cmd.ItemData item_data = 10;
  if (has_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item_data(), output);
  }

  // optional uint32 publicity_id = 11 [default = 0];
  if (has_publicity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->publicity_id(), output);
  }

  // optional uint32 end_time = 12 [default = 0];
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->end_time(), output);
  }

  // optional string key = 13;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->key(), output);
  }

  // optional uint64 charid = 14;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->charid(), output);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->name(), output);
  }

  // optional .Cmd.ETradeType type = 16 [default = ETRADETYPE_TRADE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->type(), output);
  }

  // optional uint32 up_rate = 17 [default = 0];
  if (has_up_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->up_rate(), output);
  }

  // optional uint32 down_rate = 18 [default = 0];
  if (has_down_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->down_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradeItemBaseInfo)
}

::google::protobuf::uint8* TradeItemBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradeItemBaseInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guid(), target);
  }

  // optional uint64 order_id = 5;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->order_id(), target);
  }

  // optional uint32 refine_lv = 6;
  if (has_refine_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->refine_lv(), target);
  }

  // optional bool overlap = 8;
  if (has_overlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->overlap(), target);
  }

  // optional bool is_expired = 9;
  if (has_is_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_expired(), target);
  }

  // optional .Cmd.ItemData item_data = 10;
  if (has_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item_data(), target);
  }

  // optional uint32 publicity_id = 11 [default = 0];
  if (has_publicity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->publicity_id(), target);
  }

  // optional uint32 end_time = 12 [default = 0];
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->end_time(), target);
  }

  // optional string key = 13;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->key(), target);
  }

  // optional uint64 charid = 14;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->charid(), target);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->name(), target);
  }

  // optional .Cmd.ETradeType type = 16 [default = ETRADETYPE_TRADE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->type(), target);
  }

  // optional uint32 up_rate = 17 [default = 0];
  if (has_up_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->up_rate(), target);
  }

  // optional uint32 down_rate = 18 [default = 0];
  if (has_down_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->down_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradeItemBaseInfo)
  return target;
}

int TradeItemBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint64 order_id = 5;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

    // optional uint32 refine_lv = 6;
    if (has_refine_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_lv());
    }

    // optional bool overlap = 8;
    if (has_overlap()) {
      total_size += 1 + 1;
    }

    // optional bool is_expired = 9;
    if (has_is_expired()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ItemData item_data = 10;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_data());
    }

    // optional uint32 publicity_id = 11 [default = 0];
    if (has_publicity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publicity_id());
    }

    // optional uint32 end_time = 12 [default = 0];
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // optional string key = 13;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint64 charid = 14;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 15;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.ETradeType type = 16 [default = ETRADETYPE_TRADE];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 up_rate = 17 [default = 0];
    if (has_up_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_rate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 down_rate = 18 [default = 0];
    if (has_down_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeItemBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeItemBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeItemBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeItemBaseInfo::MergeFrom(const TradeItemBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_refine_lv()) {
      set_refine_lv(from.refine_lv());
    }
    if (from.has_overlap()) {
      set_overlap(from.overlap());
    }
    if (from.has_is_expired()) {
      set_is_expired(from.is_expired());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item_data()) {
      mutable_item_data()->::Cmd::ItemData::MergeFrom(from.item_data());
    }
    if (from.has_publicity_id()) {
      set_publicity_id(from.publicity_id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_up_rate()) {
      set_up_rate(from.up_rate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_down_rate()) {
      set_down_rate(from.down_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeItemBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeItemBaseInfo::CopyFrom(const TradeItemBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeItemBaseInfo::IsInitialized() const {

  return true;
}

void TradeItemBaseInfo::Swap(TradeItemBaseInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(count_, other->count_);
    std::swap(guid_, other->guid_);
    std::swap(order_id_, other->order_id_);
    std::swap(refine_lv_, other->refine_lv_);
    std::swap(overlap_, other->overlap_);
    std::swap(is_expired_, other->is_expired_);
    std::swap(item_data_, other->item_data_);
    std::swap(publicity_id_, other->publicity_id_);
    std::swap(end_time_, other->end_time_);
    std::swap(key_, other->key_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(up_rate_, other->up_rate_);
    std::swap(down_rate_, other->down_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeItemBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeItemBaseInfo_descriptor_;
  metadata.reflection = TradeItemBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessEnchantItemCmd::kCmdFieldNumber;
const int ProcessEnchantItemCmd::kParamFieldNumber;
const int ProcessEnchantItemCmd::kSaveFieldNumber;
const int ProcessEnchantItemCmd::kItemidFieldNumber;
#endif  // !_MSC_VER

ProcessEnchantItemCmd::ProcessEnchantItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProcessEnchantItemCmd)
}

void ProcessEnchantItemCmd::InitAsDefaultInstance() {
}

ProcessEnchantItemCmd::ProcessEnchantItemCmd(const ProcessEnchantItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProcessEnchantItemCmd)
}

void ProcessEnchantItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 20;
  save_ = false;
  itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessEnchantItemCmd::~ProcessEnchantItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProcessEnchantItemCmd)
  SharedDtor();
}

void ProcessEnchantItemCmd::SharedDtor() {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemid_;
  }
  if (this != default_instance_) {
  }
}

void ProcessEnchantItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessEnchantItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessEnchantItemCmd_descriptor_;
}

const ProcessEnchantItemCmd& ProcessEnchantItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ProcessEnchantItemCmd* ProcessEnchantItemCmd::default_instance_ = NULL;

ProcessEnchantItemCmd* ProcessEnchantItemCmd::New() const {
  return new ProcessEnchantItemCmd;
}

void ProcessEnchantItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 6;
    param_ = 20;
    save_ = false;
    if (has_itemid()) {
      if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessEnchantItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProcessEnchantItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PROCESSENCHANT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_save;
        break;
      }

      // optional bool save = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_save:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_)));
          set_has_save();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemid;
        break;
      }

      // optional string itemid = 4;
      case 4: {
        if (tag == 34) {
         parse_itemid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemid().data(), this->itemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProcessEnchantItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProcessEnchantItemCmd)
  return false;
#undef DO_
}

void ProcessEnchantItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProcessEnchantItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PROCESSENCHANT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool save = 3 [default = false];
  if (has_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->save(), output);
  }

  // optional string itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProcessEnchantItemCmd)
}

::google::protobuf::uint8* ProcessEnchantItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProcessEnchantItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PROCESSENCHANT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool save = 3 [default = false];
  if (has_save()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->save(), target);
  }

  // optional string itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProcessEnchantItemCmd)
  return target;
}

int ProcessEnchantItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PROCESSENCHANT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool save = 3 [default = false];
    if (has_save()) {
      total_size += 1 + 1;
    }

    // optional string itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessEnchantItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessEnchantItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessEnchantItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessEnchantItemCmd::MergeFrom(const ProcessEnchantItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_save()) {
      set_save(from.save());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessEnchantItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessEnchantItemCmd::CopyFrom(const ProcessEnchantItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessEnchantItemCmd::IsInitialized() const {

  return true;
}

void ProcessEnchantItemCmd::Swap(ProcessEnchantItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(save_, other->save_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessEnchantItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessEnchantItemCmd_descriptor_;
  metadata.reflection = ProcessEnchantItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipExchangeItemCmd::kCmdFieldNumber;
const int EquipExchangeItemCmd::kParamFieldNumber;
const int EquipExchangeItemCmd::kGuidFieldNumber;
const int EquipExchangeItemCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

EquipExchangeItemCmd::EquipExchangeItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipExchangeItemCmd)
}

void EquipExchangeItemCmd::InitAsDefaultInstance() {
}

EquipExchangeItemCmd::EquipExchangeItemCmd(const EquipExchangeItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipExchangeItemCmd)
}

void EquipExchangeItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 21;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipExchangeItemCmd::~EquipExchangeItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EquipExchangeItemCmd)
  SharedDtor();
}

void EquipExchangeItemCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EquipExchangeItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipExchangeItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipExchangeItemCmd_descriptor_;
}

const EquipExchangeItemCmd& EquipExchangeItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipExchangeItemCmd* EquipExchangeItemCmd::default_instance_ = NULL;

EquipExchangeItemCmd* EquipExchangeItemCmd::New() const {
  return new EquipExchangeItemCmd;
}

void EquipExchangeItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 6;
    param_ = 21;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipExchangeItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipExchangeItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPEXCHANGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EExchangeType type = 4 [default = EEXCHANGETYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EExchangeType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EExchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipExchangeItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipExchangeItemCmd)
  return false;
#undef DO_
}

void EquipExchangeItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipExchangeItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPEXCHANGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional .Cmd.EExchangeType type = 4 [default = EEXCHANGETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipExchangeItemCmd)
}

::google::protobuf::uint8* EquipExchangeItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipExchangeItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPEXCHANGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional .Cmd.EExchangeType type = 4 [default = EEXCHANGETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipExchangeItemCmd)
  return target;
}

int EquipExchangeItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPEXCHANGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional .Cmd.EExchangeType type = 4 [default = EEXCHANGETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipExchangeItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipExchangeItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipExchangeItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipExchangeItemCmd::MergeFrom(const EquipExchangeItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipExchangeItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipExchangeItemCmd::CopyFrom(const EquipExchangeItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipExchangeItemCmd::IsInitialized() const {

  return true;
}

void EquipExchangeItemCmd::Swap(EquipExchangeItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipExchangeItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipExchangeItemCmd_descriptor_;
  metadata.reflection = EquipExchangeItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnOffStoreItemCmd::kCmdFieldNumber;
const int OnOffStoreItemCmd::kParamFieldNumber;
const int OnOffStoreItemCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

OnOffStoreItemCmd::OnOffStoreItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OnOffStoreItemCmd)
}

void OnOffStoreItemCmd::InitAsDefaultInstance() {
}

OnOffStoreItemCmd::OnOffStoreItemCmd(const OnOffStoreItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OnOffStoreItemCmd)
}

void OnOffStoreItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 22;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnOffStoreItemCmd::~OnOffStoreItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OnOffStoreItemCmd)
  SharedDtor();
}

void OnOffStoreItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnOffStoreItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnOffStoreItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnOffStoreItemCmd_descriptor_;
}

const OnOffStoreItemCmd& OnOffStoreItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

OnOffStoreItemCmd* OnOffStoreItemCmd::default_instance_ = NULL;

OnOffStoreItemCmd* OnOffStoreItemCmd::New() const {
  return new OnOffStoreItemCmd;
}

void OnOffStoreItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 22;
    open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnOffStoreItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OnOffStoreItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ONOFFSTORE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OnOffStoreItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OnOffStoreItemCmd)
  return false;
#undef DO_
}

void OnOffStoreItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OnOffStoreItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ONOFFSTORE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OnOffStoreItemCmd)
}

::google::protobuf::uint8* OnOffStoreItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OnOffStoreItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ONOFFSTORE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OnOffStoreItemCmd)
  return target;
}

int OnOffStoreItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ONOFFSTORE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnOffStoreItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnOffStoreItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnOffStoreItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnOffStoreItemCmd::MergeFrom(const OnOffStoreItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnOffStoreItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnOffStoreItemCmd::CopyFrom(const OnOffStoreItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnOffStoreItemCmd::IsInitialized() const {

  return true;
}

void OnOffStoreItemCmd::Swap(OnOffStoreItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnOffStoreItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnOffStoreItemCmd_descriptor_;
  metadata.reflection = OnOffStoreItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackSlotNtfItemCmd::kCmdFieldNumber;
const int PackSlotNtfItemCmd::kParamFieldNumber;
const int PackSlotNtfItemCmd::kTypeFieldNumber;
const int PackSlotNtfItemCmd::kMaxslotFieldNumber;
#endif  // !_MSC_VER

PackSlotNtfItemCmd::PackSlotNtfItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PackSlotNtfItemCmd)
}

void PackSlotNtfItemCmd::InitAsDefaultInstance() {
}

PackSlotNtfItemCmd::PackSlotNtfItemCmd(const PackSlotNtfItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PackSlotNtfItemCmd)
}

void PackSlotNtfItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 23;
  type_ = 0;
  maxslot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackSlotNtfItemCmd::~PackSlotNtfItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PackSlotNtfItemCmd)
  SharedDtor();
}

void PackSlotNtfItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackSlotNtfItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackSlotNtfItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackSlotNtfItemCmd_descriptor_;
}

const PackSlotNtfItemCmd& PackSlotNtfItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

PackSlotNtfItemCmd* PackSlotNtfItemCmd::default_instance_ = NULL;

PackSlotNtfItemCmd* PackSlotNtfItemCmd::New() const {
  return new PackSlotNtfItemCmd;
}

void PackSlotNtfItemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PackSlotNtfItemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, maxslot_);
    cmd_ = 6;
    param_ = 23;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackSlotNtfItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PackSlotNtfItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKSLOTNTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPackType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxslot;
        break;
      }

      // optional uint32 maxslot = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxslot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxslot_)));
          set_has_maxslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PackSlotNtfItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PackSlotNtfItemCmd)
  return false;
#undef DO_
}

void PackSlotNtfItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PackSlotNtfItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKSLOTNTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 maxslot = 4 [default = 0];
  if (has_maxslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PackSlotNtfItemCmd)
}

::google::protobuf::uint8* PackSlotNtfItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PackSlotNtfItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKSLOTNTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 maxslot = 4 [default = 0];
  if (has_maxslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PackSlotNtfItemCmd)
  return target;
}

int PackSlotNtfItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKSLOTNTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 maxslot = 4 [default = 0];
    if (has_maxslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackSlotNtfItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackSlotNtfItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackSlotNtfItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackSlotNtfItemCmd::MergeFrom(const PackSlotNtfItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_maxslot()) {
      set_maxslot(from.maxslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackSlotNtfItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackSlotNtfItemCmd::CopyFrom(const PackSlotNtfItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackSlotNtfItemCmd::IsInitialized() const {

  return true;
}

void PackSlotNtfItemCmd::Swap(PackSlotNtfItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(maxslot_, other->maxslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackSlotNtfItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackSlotNtfItemCmd_descriptor_;
  metadata.reflection = PackSlotNtfItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestoreEquipItemCmd::kCmdFieldNumber;
const int RestoreEquipItemCmd::kParamFieldNumber;
const int RestoreEquipItemCmd::kEquipidFieldNumber;
const int RestoreEquipItemCmd::kStrengthlvFieldNumber;
const int RestoreEquipItemCmd::kCardidsFieldNumber;
const int RestoreEquipItemCmd::kEnchantFieldNumber;
const int RestoreEquipItemCmd::kUpgradeFieldNumber;
const int RestoreEquipItemCmd::kStrengthlv2FieldNumber;
#endif  // !_MSC_VER

RestoreEquipItemCmd::RestoreEquipItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RestoreEquipItemCmd)
}

void RestoreEquipItemCmd::InitAsDefaultInstance() {
}

RestoreEquipItemCmd::RestoreEquipItemCmd(const RestoreEquipItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RestoreEquipItemCmd)
}

void RestoreEquipItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 24;
  equipid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strengthlv_ = false;
  enchant_ = false;
  upgrade_ = false;
  strengthlv2_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestoreEquipItemCmd::~RestoreEquipItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RestoreEquipItemCmd)
  SharedDtor();
}

void RestoreEquipItemCmd::SharedDtor() {
  if (equipid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipid_;
  }
  if (this != default_instance_) {
  }
}

void RestoreEquipItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreEquipItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestoreEquipItemCmd_descriptor_;
}

const RestoreEquipItemCmd& RestoreEquipItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

RestoreEquipItemCmd* RestoreEquipItemCmd::default_instance_ = NULL;

RestoreEquipItemCmd* RestoreEquipItemCmd::New() const {
  return new RestoreEquipItemCmd;
}

void RestoreEquipItemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RestoreEquipItemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(strengthlv_, strengthlv2_);
    cmd_ = 6;
    param_ = 24;
    if (has_equipid()) {
      if (equipid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        equipid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestoreEquipItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RestoreEquipItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_RESTOREEQUIP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equipid;
        break;
      }

      // optional string equipid = 3;
      case 3: {
        if (tag == 26) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->equipid().data(), this->equipid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "equipid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_strengthlv;
        break;
      }

      // optional bool strengthlv = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_strengthlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strengthlv_)));
          set_has_strengthlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cardids;
        break;
      }

      // repeated string cardids = 5;
      case 5: {
        if (tag == 42) {
         parse_cardids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cardids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardids(this->cardids_size() - 1).data(),
            this->cardids(this->cardids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cardids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cardids;
        if (input->ExpectTag(48)) goto parse_enchant;
        break;
      }

      // optional bool enchant = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_enchant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enchant_)));
          set_has_enchant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_upgrade;
        break;
      }

      // optional bool upgrade = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upgrade_)));
          set_has_upgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_strengthlv2;
        break;
      }

      // optional bool strengthlv2 = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_strengthlv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strengthlv2_)));
          set_has_strengthlv2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RestoreEquipItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RestoreEquipItemCmd)
  return false;
#undef DO_
}

void RestoreEquipItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RestoreEquipItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_RESTOREEQUIP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipid().data(), this->equipid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->equipid(), output);
  }

  // optional bool strengthlv = 4 [default = false];
  if (has_strengthlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->strengthlv(), output);
  }

  // repeated string cardids = 5;
  for (int i = 0; i < this->cardids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cardids(i).data(), this->cardids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cardids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cardids(i), output);
  }

  // optional bool enchant = 6 [default = false];
  if (has_enchant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enchant(), output);
  }

  // optional bool upgrade = 7 [default = false];
  if (has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->upgrade(), output);
  }

  // optional bool strengthlv2 = 8 [default = false];
  if (has_strengthlv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->strengthlv2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RestoreEquipItemCmd)
}

::google::protobuf::uint8* RestoreEquipItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RestoreEquipItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_RESTOREEQUIP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->equipid().data(), this->equipid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "equipid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->equipid(), target);
  }

  // optional bool strengthlv = 4 [default = false];
  if (has_strengthlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->strengthlv(), target);
  }

  // repeated string cardids = 5;
  for (int i = 0; i < this->cardids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardids(i).data(), this->cardids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cardids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->cardids(i), target);
  }

  // optional bool enchant = 6 [default = false];
  if (has_enchant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enchant(), target);
  }

  // optional bool upgrade = 7 [default = false];
  if (has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->upgrade(), target);
  }

  // optional bool strengthlv2 = 8 [default = false];
  if (has_strengthlv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->strengthlv2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RestoreEquipItemCmd)
  return target;
}

int RestoreEquipItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_RESTOREEQUIP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipid());
    }

    // optional bool strengthlv = 4 [default = false];
    if (has_strengthlv()) {
      total_size += 1 + 1;
    }

    // optional bool enchant = 6 [default = false];
    if (has_enchant()) {
      total_size += 1 + 1;
    }

    // optional bool upgrade = 7 [default = false];
    if (has_upgrade()) {
      total_size += 1 + 1;
    }

    // optional bool strengthlv2 = 8 [default = false];
    if (has_strengthlv2()) {
      total_size += 1 + 1;
    }

  }
  // repeated string cardids = 5;
  total_size += 1 * this->cardids_size();
  for (int i = 0; i < this->cardids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cardids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreEquipItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestoreEquipItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestoreEquipItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestoreEquipItemCmd::MergeFrom(const RestoreEquipItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardids_.MergeFrom(from.cardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_strengthlv()) {
      set_strengthlv(from.strengthlv());
    }
    if (from.has_enchant()) {
      set_enchant(from.enchant());
    }
    if (from.has_upgrade()) {
      set_upgrade(from.upgrade());
    }
    if (from.has_strengthlv2()) {
      set_strengthlv2(from.strengthlv2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestoreEquipItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreEquipItemCmd::CopyFrom(const RestoreEquipItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreEquipItemCmd::IsInitialized() const {

  return true;
}

void RestoreEquipItemCmd::Swap(RestoreEquipItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(equipid_, other->equipid_);
    std::swap(strengthlv_, other->strengthlv_);
    cardids_.Swap(&other->cardids_);
    std::swap(enchant_, other->enchant_);
    std::swap(upgrade_, other->upgrade_);
    std::swap(strengthlv2_, other->strengthlv2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestoreEquipItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestoreEquipItemCmd_descriptor_;
  metadata.reflection = RestoreEquipItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseCountItemCmd::kCmdFieldNumber;
const int UseCountItemCmd::kParamFieldNumber;
const int UseCountItemCmd::kItemidFieldNumber;
const int UseCountItemCmd::kCountFieldNumber;
#endif  // !_MSC_VER

UseCountItemCmd::UseCountItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseCountItemCmd)
}

void UseCountItemCmd::InitAsDefaultInstance() {
}

UseCountItemCmd::UseCountItemCmd(const UseCountItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseCountItemCmd)
}

void UseCountItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 25;
  itemid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseCountItemCmd::~UseCountItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UseCountItemCmd)
  SharedDtor();
}

void UseCountItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseCountItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseCountItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseCountItemCmd_descriptor_;
}

const UseCountItemCmd& UseCountItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

UseCountItemCmd* UseCountItemCmd::default_instance_ = NULL;

UseCountItemCmd* UseCountItemCmd::New() const {
  return new UseCountItemCmd;
}

void UseCountItemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseCountItemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(itemid_, count_);
    cmd_ = 6;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseCountItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseCountItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USECOUNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // required uint32 itemid = 3;
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseCountItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseCountItemCmd)
  return false;
#undef DO_
}

void UseCountItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseCountItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USECOUNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseCountItemCmd)
}

::google::protobuf::uint8* UseCountItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseCountItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USECOUNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseCountItemCmd)
  return target;
}

int UseCountItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USECOUNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 4 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseCountItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseCountItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseCountItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseCountItemCmd::MergeFrom(const UseCountItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseCountItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseCountItemCmd::CopyFrom(const UseCountItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseCountItemCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void UseCountItemCmd::Swap(UseCountItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseCountItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseCountItemCmd_descriptor_;
  metadata.reflection = UseCountItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeCardItemCmd::kCmdFieldNumber;
const int ExchangeCardItemCmd::kParamFieldNumber;
const int ExchangeCardItemCmd::kTypeFieldNumber;
const int ExchangeCardItemCmd::kNpcidFieldNumber;
const int ExchangeCardItemCmd::kMaterialFieldNumber;
const int ExchangeCardItemCmd::kCharidFieldNumber;
const int ExchangeCardItemCmd::kCardidFieldNumber;
const int ExchangeCardItemCmd::kAnimFieldNumber;
const int ExchangeCardItemCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

ExchangeCardItemCmd::ExchangeCardItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeCardItemCmd)
}

void ExchangeCardItemCmd::InitAsDefaultInstance() {
}

ExchangeCardItemCmd::ExchangeCardItemCmd(const ExchangeCardItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeCardItemCmd)
}

void ExchangeCardItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 28;
  type_ = 1;
  npcid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  cardid_ = 0u;
  anim_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeCardItemCmd::~ExchangeCardItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeCardItemCmd)
  SharedDtor();
}

void ExchangeCardItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeCardItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeCardItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeCardItemCmd_descriptor_;
}

const ExchangeCardItemCmd& ExchangeCardItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ExchangeCardItemCmd* ExchangeCardItemCmd::default_instance_ = NULL;

ExchangeCardItemCmd* ExchangeCardItemCmd::New() const {
  return new ExchangeCardItemCmd;
}

void ExchangeCardItemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExchangeCardItemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(cardid_, charid_);
    cmd_ = 6;
    param_ = 28;
    type_ = 1;
    npcid_ = GOOGLE_ULONGLONG(0);
    anim_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  material_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeCardItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeCardItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EXCHANGECARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EExchangeCardType type = 3 [default = EEXCHANGECARDTYPE_DRAW];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EExchangeCardType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EExchangeCardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_material;
        break;
      }

      // repeated string material = 5;
      case 5: {
        if (tag == 42) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->material(this->material_size() - 1).data(),
            this->material(this->material_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "material");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_material;
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cardid;
        break;
      }

      // optional uint32 cardid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_cardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_anim;
        break;
      }

      // optional bool anim = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_anim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anim_)));
          set_has_anim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 9;
      case 9: {
        if (tag == 74) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeCardItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeCardItemCmd)
  return false;
#undef DO_
}

void ExchangeCardItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeCardItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EXCHANGECARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EExchangeCardType type = 3 [default = EEXCHANGECARDTYPE_DRAW];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcid(), output);
  }

  // repeated string material = 5;
  for (int i = 0; i < this->material_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->material(i).data(), this->material(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "material");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->material(i), output);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional uint32 cardid = 7 [default = 0];
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cardid(), output);
  }

  // optional bool anim = 8 [default = false];
  if (has_anim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->anim(), output);
  }

  // repeated .Cmd.ItemInfo items = 9;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeCardItemCmd)
}

::google::protobuf::uint8* ExchangeCardItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeCardItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EXCHANGECARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EExchangeCardType type = 3 [default = EEXCHANGECARDTYPE_DRAW];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcid(), target);
  }

  // repeated string material = 5;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material(i).data(), this->material(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "material");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->material(i), target);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional uint32 cardid = 7 [default = 0];
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cardid(), target);
  }

  // optional bool anim = 8 [default = false];
  if (has_anim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->anim(), target);
  }

  // repeated .Cmd.ItemInfo items = 9;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeCardItemCmd)
  return target;
}

int ExchangeCardItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EXCHANGECARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EExchangeCardType type = 3 [default = EEXCHANGECARDTYPE_DRAW];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 npcid = 4 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint64 charid = 6 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 cardid = 7 [default = 0];
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

    // optional bool anim = 8 [default = false];
    if (has_anim()) {
      total_size += 1 + 1;
    }

  }
  // repeated string material = 5;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->material(i));
  }

  // repeated .Cmd.ItemInfo items = 9;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeCardItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeCardItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeCardItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeCardItemCmd::MergeFrom(const ExchangeCardItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_anim()) {
      set_anim(from.anim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeCardItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeCardItemCmd::CopyFrom(const ExchangeCardItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeCardItemCmd::IsInitialized() const {

  return true;
}

void ExchangeCardItemCmd::Swap(ExchangeCardItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(npcid_, other->npcid_);
    material_.Swap(&other->material_);
    std::swap(charid_, other->charid_);
    std::swap(cardid_, other->cardid_);
    std::swap(anim_, other->anim_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeCardItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeCardItemCmd_descriptor_;
  metadata.reflection = ExchangeCardItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCountItemCmd::kCmdFieldNumber;
const int GetCountItemCmd::kParamFieldNumber;
const int GetCountItemCmd::kItemidFieldNumber;
const int GetCountItemCmd::kCountFieldNumber;
const int GetCountItemCmd::kSourceFieldNumber;
#endif  // !_MSC_VER

GetCountItemCmd::GetCountItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetCountItemCmd)
}

void GetCountItemCmd::InitAsDefaultInstance() {
}

GetCountItemCmd::GetCountItemCmd(const GetCountItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetCountItemCmd)
}

void GetCountItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 29;
  itemid_ = 0u;
  count_ = 0u;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCountItemCmd::~GetCountItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetCountItemCmd)
  SharedDtor();
}

void GetCountItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCountItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCountItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCountItemCmd_descriptor_;
}

const GetCountItemCmd& GetCountItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

GetCountItemCmd* GetCountItemCmd::default_instance_ = NULL;

GetCountItemCmd* GetCountItemCmd::New() const {
  return new GetCountItemCmd;
}

void GetCountItemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetCountItemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(itemid_, source_);
    cmd_ = 6;
    param_ = 29;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCountItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetCountItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GETCOUNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3;
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 5 [default = ESOURCE_MIN];
      case 5: {
        if (tag == 40) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetCountItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetCountItemCmd)
  return false;
#undef DO_
}

void GetCountItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetCountItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GETCOUNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional .Cmd.ESource source = 5 [default = ESOURCE_MIN];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetCountItemCmd)
}

::google::protobuf::uint8* GetCountItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetCountItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GETCOUNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional .Cmd.ESource source = 5 [default = ESOURCE_MIN];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetCountItemCmd)
  return target;
}

int GetCountItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GETCOUNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 4 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .Cmd.ESource source = 5 [default = ESOURCE_MIN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCountItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCountItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCountItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCountItemCmd::MergeFrom(const GetCountItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCountItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCountItemCmd::CopyFrom(const GetCountItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCountItemCmd::IsInitialized() const {

  return true;
}

void GetCountItemCmd::Swap(GetCountItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCountItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCountItemCmd_descriptor_;
  metadata.reflection = GetCountItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveLoveLetterCmd::kCmdFieldNumber;
const int SaveLoveLetterCmd::kParamFieldNumber;
const int SaveLoveLetterCmd::kDwIDFieldNumber;
#endif  // !_MSC_VER

SaveLoveLetterCmd::SaveLoveLetterCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SaveLoveLetterCmd)
}

void SaveLoveLetterCmd::InitAsDefaultInstance() {
}

SaveLoveLetterCmd::SaveLoveLetterCmd(const SaveLoveLetterCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SaveLoveLetterCmd)
}

void SaveLoveLetterCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 30;
  dwid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveLoveLetterCmd::~SaveLoveLetterCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SaveLoveLetterCmd)
  SharedDtor();
}

void SaveLoveLetterCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveLoveLetterCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveLoveLetterCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveLoveLetterCmd_descriptor_;
}

const SaveLoveLetterCmd& SaveLoveLetterCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

SaveLoveLetterCmd* SaveLoveLetterCmd::default_instance_ = NULL;

SaveLoveLetterCmd* SaveLoveLetterCmd::New() const {
  return new SaveLoveLetterCmd;
}

void SaveLoveLetterCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 30;
    dwid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveLoveLetterCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SaveLoveLetterCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SAVE_LOVE_LETTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwID;
        break;
      }

      // optional uint32 dwID = 3;
      case 3: {
        if (tag == 24) {
         parse_dwID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwid_)));
          set_has_dwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SaveLoveLetterCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SaveLoveLetterCmd)
  return false;
#undef DO_
}

void SaveLoveLetterCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SaveLoveLetterCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SAVE_LOVE_LETTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dwID = 3;
  if (has_dwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dwid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SaveLoveLetterCmd)
}

::google::protobuf::uint8* SaveLoveLetterCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SaveLoveLetterCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SAVE_LOVE_LETTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dwID = 3;
  if (has_dwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dwid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SaveLoveLetterCmd)
  return target;
}

int SaveLoveLetterCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SAVE_LOVE_LETTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dwID = 3;
    if (has_dwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveLoveLetterCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveLoveLetterCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveLoveLetterCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveLoveLetterCmd::MergeFrom(const SaveLoveLetterCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dwid()) {
      set_dwid(from.dwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveLoveLetterCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveLoveLetterCmd::CopyFrom(const SaveLoveLetterCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveLoveLetterCmd::IsInitialized() const {

  return true;
}

void SaveLoveLetterCmd::Swap(SaveLoveLetterCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dwid_, other->dwid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveLoveLetterCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveLoveLetterCmd_descriptor_;
  metadata.reflection = SaveLoveLetterCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemDataShow::kCmdFieldNumber;
const int ItemDataShow::kParamFieldNumber;
const int ItemDataShow::kItemsFieldNumber;
#endif  // !_MSC_VER

ItemDataShow::ItemDataShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemDataShow)
}

void ItemDataShow::InitAsDefaultInstance() {
}

ItemDataShow::ItemDataShow(const ItemDataShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemDataShow)
}

void ItemDataShow::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 31;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemDataShow::~ItemDataShow() {
  // @@protoc_insertion_point(destructor:Cmd.ItemDataShow)
  SharedDtor();
}

void ItemDataShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemDataShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemDataShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemDataShow_descriptor_;
}

const ItemDataShow& ItemDataShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ItemDataShow* ItemDataShow::default_instance_ = NULL;

ItemDataShow* ItemDataShow::New() const {
  return new ItemDataShow;
}

void ItemDataShow::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 6;
    param_ = 31;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemDataShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemDataShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMDATASHOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemData items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemDataShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemDataShow)
  return false;
#undef DO_
}

void ItemDataShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemDataShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMDATASHOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemDataShow)
}

::google::protobuf::uint8* ItemDataShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemDataShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMDATASHOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemDataShow)
  return target;
}

int ItemDataShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMDATASHOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ItemData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemDataShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemDataShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemDataShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemDataShow::MergeFrom(const ItemDataShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemDataShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemDataShow::CopyFrom(const ItemDataShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDataShow::IsInitialized() const {

  return true;
}

void ItemDataShow::Swap(ItemDataShow* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemDataShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemDataShow_descriptor_;
  metadata.reflection = ItemDataShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryCmd::kCmdFieldNumber;
const int LotteryCmd::kParamFieldNumber;
const int LotteryCmd::kYearFieldNumber;
const int LotteryCmd::kMonthFieldNumber;
const int LotteryCmd::kNpcidFieldNumber;
const int LotteryCmd::kSkipAnimFieldNumber;
const int LotteryCmd::kPriceFieldNumber;
const int LotteryCmd::kTicketFieldNumber;
const int LotteryCmd::kTypeFieldNumber;
const int LotteryCmd::kCountFieldNumber;
const int LotteryCmd::kItemsFieldNumber;
const int LotteryCmd::kCharidFieldNumber;
const int LotteryCmd::kGuidFieldNumber;
const int LotteryCmd::kTodayCntFieldNumber;
#endif  // !_MSC_VER

LotteryCmd::LotteryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotteryCmd)
}

void LotteryCmd::InitAsDefaultInstance() {
}

LotteryCmd::LotteryCmd(const LotteryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotteryCmd)
}

void LotteryCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 32;
  year_ = 0u;
  month_ = 0u;
  npcid_ = GOOGLE_ULONGLONG(0);
  skip_anim_ = false;
  price_ = 0u;
  ticket_ = 0u;
  type_ = 0;
  count_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  today_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryCmd::~LotteryCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LotteryCmd)
  SharedDtor();
}

void LotteryCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void LotteryCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryCmd_descriptor_;
}

const LotteryCmd& LotteryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LotteryCmd* LotteryCmd::default_instance_ = NULL;

LotteryCmd* LotteryCmd::New() const {
  return new LotteryCmd;
}

void LotteryCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(year_, ticket_);
    cmd_ = 6;
    param_ = 32;
  }
  if (_has_bits_[8 / 32] & 15104) {
    ZR_(charid_, today_cnt_);
    type_ = 0;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotteryCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_year;
        break;
      }

      // optional uint32 year = 3;
      case 3: {
        if (tag == 24) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_month;
        break;
      }

      // optional uint32 month = 4;
      case 4: {
        if (tag == 32) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 5;
      case 5: {
        if (tag == 40) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skip_anim;
        break;
      }

      // optional bool skip_anim = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_skip_anim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_anim_)));
          set_has_skip_anim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price;
        break;
      }

      // optional uint32 price = 7;
      case 7: {
        if (tag == 56) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ticket;
        break;
      }

      // optional uint32 ticket = 8;
      case 8: {
        if (tag == 64) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .Cmd.ELotteryType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELotteryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELotteryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }

      // optional uint32 count = 10;
      case 10: {
        if (tag == 80) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 11;
      case 11: {
        if (tag == 90) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_items;
        if (input->ExpectTag(96)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 12;
      case 12: {
        if (tag == 96) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_guid;
        break;
      }

      // optional string guid = 13;
      case 13: {
        if (tag == 106) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_today_cnt;
        break;
      }

      // optional uint32 today_cnt = 14;
      case 14: {
        if (tag == 112) {
         parse_today_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_cnt_)));
          set_has_today_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotteryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotteryCmd)
  return false;
#undef DO_
}

void LotteryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotteryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 year = 3;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->year(), output);
  }

  // optional uint32 month = 4;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->month(), output);
  }

  // optional uint64 npcid = 5;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->npcid(), output);
  }

  // optional bool skip_anim = 6 [default = false];
  if (has_skip_anim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->skip_anim(), output);
  }

  // optional uint32 price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price(), output);
  }

  // optional uint32 ticket = 8;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ticket(), output);
  }

  // optional .Cmd.ELotteryType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint32 count = 10;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->count(), output);
  }

  // repeated .Cmd.ItemInfo items = 11;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->items(i), output);
  }

  // optional uint64 charid = 12;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->charid(), output);
  }

  // optional string guid = 13;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->guid(), output);
  }

  // optional uint32 today_cnt = 14;
  if (has_today_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->today_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotteryCmd)
}

::google::protobuf::uint8* LotteryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotteryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 year = 3;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->year(), target);
  }

  // optional uint32 month = 4;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->month(), target);
  }

  // optional uint64 npcid = 5;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->npcid(), target);
  }

  // optional bool skip_anim = 6 [default = false];
  if (has_skip_anim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->skip_anim(), target);
  }

  // optional uint32 price = 7;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price(), target);
  }

  // optional uint32 ticket = 8;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ticket(), target);
  }

  // optional .Cmd.ELotteryType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint32 count = 10;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->count(), target);
  }

  // repeated .Cmd.ItemInfo items = 11;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->items(i), target);
  }

  // optional uint64 charid = 12;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->charid(), target);
  }

  // optional string guid = 13;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->guid(), target);
  }

  // optional uint32 today_cnt = 14;
  if (has_today_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->today_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotteryCmd)
  return target;
}

int LotteryCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 year = 3;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 4;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint64 npcid = 5;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional bool skip_anim = 6 [default = false];
    if (has_skip_anim()) {
      total_size += 1 + 1;
    }

    // optional uint32 price = 7;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 ticket = 8;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ELotteryType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 count = 10;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 charid = 12;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string guid = 13;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 today_cnt = 14;
    if (has_today_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_cnt());
    }

  }
  // repeated .Cmd.ItemInfo items = 11;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryCmd::MergeFrom(const LotteryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_skip_anim()) {
      set_skip_anim(from.skip_anim());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_today_cnt()) {
      set_today_cnt(from.today_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryCmd::CopyFrom(const LotteryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryCmd::IsInitialized() const {

  return true;
}

void LotteryCmd::Swap(LotteryCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(npcid_, other->npcid_);
    std::swap(skip_anim_, other->skip_anim_);
    std::swap(price_, other->price_);
    std::swap(ticket_, other->ticket_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    items_.Swap(&other->items_);
    std::swap(charid_, other->charid_);
    std::swap(guid_, other->guid_);
    std::swap(today_cnt_, other->today_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryCmd_descriptor_;
  metadata.reflection = LotteryCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryRecoveryCmd::kCmdFieldNumber;
const int LotteryRecoveryCmd::kParamFieldNumber;
const int LotteryRecoveryCmd::kGuidsFieldNumber;
const int LotteryRecoveryCmd::kNpcidFieldNumber;
const int LotteryRecoveryCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

LotteryRecoveryCmd::LotteryRecoveryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotteryRecoveryCmd)
}

void LotteryRecoveryCmd::InitAsDefaultInstance() {
}

LotteryRecoveryCmd::LotteryRecoveryCmd(const LotteryRecoveryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotteryRecoveryCmd)
}

void LotteryRecoveryCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 33;
  npcid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryRecoveryCmd::~LotteryRecoveryCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LotteryRecoveryCmd)
  SharedDtor();
}

void LotteryRecoveryCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryRecoveryCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryRecoveryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryRecoveryCmd_descriptor_;
}

const LotteryRecoveryCmd& LotteryRecoveryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LotteryRecoveryCmd* LotteryRecoveryCmd::default_instance_ = NULL;

LotteryRecoveryCmd* LotteryRecoveryCmd::New() const {
  return new LotteryRecoveryCmd;
}

void LotteryRecoveryCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryRecoveryCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(npcid_, type_);
    cmd_ = 6;
    param_ = 33;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryRecoveryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotteryRecoveryCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RECOVERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guids;
        break;
      }

      // repeated string guids = 3;
      case 3: {
        if (tag == 26) {
         parse_guids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guids(this->guids_size() - 1).data(),
            this->guids(this->guids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guids;
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 4;
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Cmd.ELotteryType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELotteryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELotteryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotteryRecoveryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotteryRecoveryCmd)
  return false;
#undef DO_
}

void LotteryRecoveryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotteryRecoveryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RECOVERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated string guids = 3;
  for (int i = 0; i < this->guids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->guids(i).data(), this->guids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "guids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guids(i), output);
  }

  // optional uint64 npcid = 4;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcid(), output);
  }

  // optional .Cmd.ELotteryType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotteryRecoveryCmd)
}

::google::protobuf::uint8* LotteryRecoveryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotteryRecoveryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RECOVERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated string guids = 3;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guids(i).data(), this->guids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->guids(i), target);
  }

  // optional uint64 npcid = 4;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcid(), target);
  }

  // optional .Cmd.ELotteryType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotteryRecoveryCmd)
  return target;
}

int LotteryRecoveryCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RECOVERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcid = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional .Cmd.ELotteryType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string guids = 3;
  total_size += 1 * this->guids_size();
  for (int i = 0; i < this->guids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryRecoveryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryRecoveryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryRecoveryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryRecoveryCmd::MergeFrom(const LotteryRecoveryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  guids_.MergeFrom(from.guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryRecoveryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryRecoveryCmd::CopyFrom(const LotteryRecoveryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryRecoveryCmd::IsInitialized() const {

  return true;
}

void LotteryRecoveryCmd::Swap(LotteryRecoveryCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    guids_.Swap(&other->guids_);
    std::swap(npcid_, other->npcid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryRecoveryCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryRecoveryCmd_descriptor_;
  metadata.reflection = LotteryRecoveryCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotterySubInfo::kItemidFieldNumber;
const int LotterySubInfo::kRecoverPriceFieldNumber;
const int LotterySubInfo::kRateFieldNumber;
const int LotterySubInfo::kRarityFieldNumber;
const int LotterySubInfo::kCurBatchFieldNumber;
const int LotterySubInfo::kIdFieldNumber;
const int LotterySubInfo::kRecoverItemidFieldNumber;
const int LotterySubInfo::kCountFieldNumber;
const int LotterySubInfo::kFemaleItemidFieldNumber;
#endif  // !_MSC_VER

LotterySubInfo::LotterySubInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotterySubInfo)
}

void LotterySubInfo::InitAsDefaultInstance() {
}

LotterySubInfo::LotterySubInfo(const LotterySubInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotterySubInfo)
}

void LotterySubInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemid_ = 0u;
  recover_price_ = 0u;
  rate_ = 0u;
  rarity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_batch_ = false;
  id_ = 0u;
  recover_itemid_ = 0u;
  count_ = 0u;
  female_itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotterySubInfo::~LotterySubInfo() {
  // @@protoc_insertion_point(destructor:Cmd.LotterySubInfo)
  SharedDtor();
}

void LotterySubInfo::SharedDtor() {
  if (rarity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rarity_;
  }
  if (this != default_instance_) {
  }
}

void LotterySubInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotterySubInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotterySubInfo_descriptor_;
}

const LotterySubInfo& LotterySubInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LotterySubInfo* LotterySubInfo::default_instance_ = NULL;

LotterySubInfo* LotterySubInfo::New() const {
  return new LotterySubInfo;
}

void LotterySubInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotterySubInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(itemid_, recover_price_);
    ZR_(rate_, count_);
    if (has_rarity()) {
      if (rarity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rarity_->clear();
      }
    }
  }
  female_itemid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotterySubInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotterySubInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recover_price;
        break;
      }

      // optional uint32 recover_price = 2;
      case 2: {
        if (tag == 16) {
         parse_recover_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_price_)));
          set_has_recover_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rarity;
        break;
      }

      // optional string rarity = 4;
      case 4: {
        if (tag == 34) {
         parse_rarity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rarity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rarity().data(), this->rarity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rarity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_batch;
        break;
      }

      // optional bool cur_batch = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cur_batch_)));
          set_has_cur_batch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional uint32 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recover_itemid;
        break;
      }

      // optional uint32 recover_itemid = 7;
      case 7: {
        if (tag == 56) {
         parse_recover_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_itemid_)));
          set_has_recover_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_count;
        break;
      }

      // optional uint32 count = 8;
      case 8: {
        if (tag == 64) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_female_itemid;
        break;
      }

      // optional uint32 female_itemid = 9;
      case 9: {
        if (tag == 72) {
         parse_female_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &female_itemid_)));
          set_has_female_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotterySubInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotterySubInfo)
  return false;
#undef DO_
}

void LotterySubInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotterySubInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 recover_price = 2;
  if (has_recover_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recover_price(), output);
  }

  // optional uint32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rate(), output);
  }

  // optional string rarity = 4;
  if (has_rarity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rarity().data(), this->rarity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rarity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rarity(), output);
  }

  // optional bool cur_batch = 5;
  if (has_cur_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cur_batch(), output);
  }

  // optional uint32 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->id(), output);
  }

  // optional uint32 recover_itemid = 7;
  if (has_recover_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->recover_itemid(), output);
  }

  // optional uint32 count = 8;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->count(), output);
  }

  // optional uint32 female_itemid = 9;
  if (has_female_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->female_itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotterySubInfo)
}

::google::protobuf::uint8* LotterySubInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotterySubInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 recover_price = 2;
  if (has_recover_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recover_price(), target);
  }

  // optional uint32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rate(), target);
  }

  // optional string rarity = 4;
  if (has_rarity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rarity().data(), this->rarity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rarity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rarity(), target);
  }

  // optional bool cur_batch = 5;
  if (has_cur_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cur_batch(), target);
  }

  // optional uint32 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->id(), target);
  }

  // optional uint32 recover_itemid = 7;
  if (has_recover_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->recover_itemid(), target);
  }

  // optional uint32 count = 8;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->count(), target);
  }

  // optional uint32 female_itemid = 9;
  if (has_female_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->female_itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotterySubInfo)
  return target;
}

int LotterySubInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 recover_price = 2;
    if (has_recover_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover_price());
    }

    // optional uint32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // optional string rarity = 4;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rarity());
    }

    // optional bool cur_batch = 5;
    if (has_cur_batch()) {
      total_size += 1 + 1;
    }

    // optional uint32 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 recover_itemid = 7;
    if (has_recover_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover_itemid());
    }

    // optional uint32 count = 8;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 female_itemid = 9;
    if (has_female_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->female_itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotterySubInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotterySubInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotterySubInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotterySubInfo::MergeFrom(const LotterySubInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_recover_price()) {
      set_recover_price(from.recover_price());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_rarity()) {
      set_rarity(from.rarity());
    }
    if (from.has_cur_batch()) {
      set_cur_batch(from.cur_batch());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_recover_itemid()) {
      set_recover_itemid(from.recover_itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_female_itemid()) {
      set_female_itemid(from.female_itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotterySubInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotterySubInfo::CopyFrom(const LotterySubInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotterySubInfo::IsInitialized() const {

  return true;
}

void LotterySubInfo::Swap(LotterySubInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(recover_price_, other->recover_price_);
    std::swap(rate_, other->rate_);
    std::swap(rarity_, other->rarity_);
    std::swap(cur_batch_, other->cur_batch_);
    std::swap(id_, other->id_);
    std::swap(recover_itemid_, other->recover_itemid_);
    std::swap(count_, other->count_);
    std::swap(female_itemid_, other->female_itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotterySubInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotterySubInfo_descriptor_;
  metadata.reflection = LotterySubInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryInfo::kYearFieldNumber;
const int LotteryInfo::kMonthFieldNumber;
const int LotteryInfo::kPriceFieldNumber;
const int LotteryInfo::kDiscountFieldNumber;
const int LotteryInfo::kSubInfoFieldNumber;
const int LotteryInfo::kLotteryboxFieldNumber;
#endif  // !_MSC_VER

LotteryInfo::LotteryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotteryInfo)
}

void LotteryInfo::InitAsDefaultInstance() {
}

LotteryInfo::LotteryInfo(const LotteryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotteryInfo)
}

void LotteryInfo::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  price_ = 0u;
  discount_ = 0u;
  lotterybox_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryInfo::~LotteryInfo() {
  // @@protoc_insertion_point(destructor:Cmd.LotteryInfo)
  SharedDtor();
}

void LotteryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryInfo_descriptor_;
}

const LotteryInfo& LotteryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LotteryInfo* LotteryInfo::default_instance_ = NULL;

LotteryInfo* LotteryInfo::New() const {
  return new LotteryInfo;
}

void LotteryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(year_, discount_);
    lotterybox_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  subinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotteryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional uint32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_discount;
        break;
      }

      // optional uint32 discount = 4;
      case 4: {
        if (tag == 32) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_subInfo;
        break;
      }

      // repeated .Cmd.LotterySubInfo subInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_subInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_subInfo;
        if (input->ExpectTag(48)) goto parse_lotterybox;
        break;
      }

      // optional uint32 lotterybox = 6;
      case 6: {
        if (tag == 48) {
         parse_lotterybox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lotterybox_)));
          set_has_lotterybox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotteryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotteryInfo)
  return false;
#undef DO_
}

void LotteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotteryInfo)
  // optional uint32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // optional uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional uint32 discount = 4;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->discount(), output);
  }

  // repeated .Cmd.LotterySubInfo subInfo = 5;
  for (int i = 0; i < this->subinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subinfo(i), output);
  }

  // optional uint32 lotterybox = 6;
  if (has_lotterybox()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lotterybox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotteryInfo)
}

::google::protobuf::uint8* LotteryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotteryInfo)
  // optional uint32 year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // optional uint32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional uint32 discount = 4;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->discount(), target);
  }

  // repeated .Cmd.LotterySubInfo subInfo = 5;
  for (int i = 0; i < this->subinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subinfo(i), target);
  }

  // optional uint32 lotterybox = 6;
  if (has_lotterybox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lotterybox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotteryInfo)
  return target;
}

int LotteryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 discount = 4;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discount());
    }

    // optional uint32 lotterybox = 6;
    if (has_lotterybox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lotterybox());
    }

  }
  // repeated .Cmd.LotterySubInfo subInfo = 5;
  total_size += 1 * this->subinfo_size();
  for (int i = 0; i < this->subinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryInfo::MergeFrom(const LotteryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subinfo_.MergeFrom(from.subinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_lotterybox()) {
      set_lotterybox(from.lotterybox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryInfo::CopyFrom(const LotteryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryInfo::IsInitialized() const {

  return true;
}

void LotteryInfo::Swap(LotteryInfo* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(price_, other->price_);
    std::swap(discount_, other->discount_);
    subinfo_.Swap(&other->subinfo_);
    std::swap(lotterybox_, other->lotterybox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryInfo_descriptor_;
  metadata.reflection = LotteryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLotteryInfo::kCmdFieldNumber;
const int QueryLotteryInfo::kParamFieldNumber;
const int QueryLotteryInfo::kInfosFieldNumber;
const int QueryLotteryInfo::kTypeFieldNumber;
const int QueryLotteryInfo::kTodayCntFieldNumber;
const int QueryLotteryInfo::kMaxCntFieldNumber;
#endif  // !_MSC_VER

QueryLotteryInfo::QueryLotteryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryLotteryInfo)
}

void QueryLotteryInfo::InitAsDefaultInstance() {
}

QueryLotteryInfo::QueryLotteryInfo(const QueryLotteryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryLotteryInfo)
}

void QueryLotteryInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 34;
  type_ = 0;
  today_cnt_ = 0u;
  max_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLotteryInfo::~QueryLotteryInfo() {
  // @@protoc_insertion_point(destructor:Cmd.QueryLotteryInfo)
  SharedDtor();
}

void QueryLotteryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryLotteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLotteryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLotteryInfo_descriptor_;
}

const QueryLotteryInfo& QueryLotteryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QueryLotteryInfo* QueryLotteryInfo::default_instance_ = NULL;

QueryLotteryInfo* QueryLotteryInfo::New() const {
  return new QueryLotteryInfo;
}

void QueryLotteryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryLotteryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(type_, max_cnt_);
    cmd_ = 6;
    param_ = 34;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLotteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryLotteryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.LotteryInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.ELotteryType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELotteryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELotteryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_today_cnt;
        break;
      }

      // optional uint32 today_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_today_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_cnt_)));
          set_has_today_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_cnt;
        break;
      }

      // optional uint32 max_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_max_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cnt_)));
          set_has_max_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryLotteryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryLotteryInfo)
  return false;
#undef DO_
}

void QueryLotteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryLotteryInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.LotteryInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  // optional .Cmd.ELotteryType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint32 today_cnt = 5;
  if (has_today_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_cnt(), output);
  }

  // optional uint32 max_cnt = 6;
  if (has_max_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryLotteryInfo)
}

::google::protobuf::uint8* QueryLotteryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryLotteryInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.LotteryInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  // optional .Cmd.ELotteryType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint32 today_cnt = 5;
  if (has_today_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_cnt(), target);
  }

  // optional uint32 max_cnt = 6;
  if (has_max_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryLotteryInfo)
  return target;
}

int QueryLotteryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ELotteryType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 today_cnt = 5;
    if (has_today_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_cnt());
    }

    // optional uint32 max_cnt = 6;
    if (has_max_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_cnt());
    }

  }
  // repeated .Cmd.LotteryInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLotteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLotteryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLotteryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLotteryInfo::MergeFrom(const QueryLotteryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_today_cnt()) {
      set_today_cnt(from.today_cnt());
    }
    if (from.has_max_cnt()) {
      set_max_cnt(from.max_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLotteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLotteryInfo::CopyFrom(const QueryLotteryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLotteryInfo::IsInitialized() const {

  return true;
}

void QueryLotteryInfo::Swap(QueryLotteryInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    std::swap(type_, other->type_);
    std::swap(today_cnt_, other->today_cnt_);
    std::swap(max_cnt_, other->max_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLotteryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLotteryInfo_descriptor_;
  metadata.reflection = QueryLotteryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuotaLog::kValueFieldNumber;
const int QuotaLog::kTypeFieldNumber;
const int QuotaLog::kTimeFieldNumber;
#endif  // !_MSC_VER

QuotaLog::QuotaLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuotaLog)
}

void QuotaLog::InitAsDefaultInstance() {
}

QuotaLog::QuotaLog(const QuotaLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuotaLog)
}

void QuotaLog::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotaLog::~QuotaLog() {
  // @@protoc_insertion_point(destructor:Cmd.QuotaLog)
  SharedDtor();
}

void QuotaLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuotaLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotaLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotaLog_descriptor_;
}

const QuotaLog& QuotaLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QuotaLog* QuotaLog::default_instance_ = NULL;

QuotaLog* QuotaLog::New() const {
  return new QuotaLog;
}

void QuotaLog::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    value_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuotaLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuotaLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Cmd.EQuotaType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuotaType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQuotaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuotaLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuotaLog)
  return false;
#undef DO_
}

void QuotaLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuotaLog)
  // optional uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  // optional .Cmd.EQuotaType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuotaLog)
}

::google::protobuf::uint8* QuotaLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuotaLog)
  // optional uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  // optional .Cmd.EQuotaType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuotaLog)
  return target;
}

int QuotaLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional .Cmd.EQuotaType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotaLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuotaLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuotaLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuotaLog::MergeFrom(const QuotaLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuotaLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaLog::CopyFrom(const QuotaLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaLog::IsInitialized() const {

  return true;
}

void QuotaLog::Swap(QuotaLog* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuotaLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotaLog_descriptor_;
  metadata.reflection = QuotaLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuotaDetail::kValueFieldNumber;
const int QuotaDetail::kLeftFieldNumber;
const int QuotaDetail::kExpireTimeFieldNumber;
const int QuotaDetail::kTimeFieldNumber;
#endif  // !_MSC_VER

QuotaDetail::QuotaDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuotaDetail)
}

void QuotaDetail::InitAsDefaultInstance() {
}

QuotaDetail::QuotaDetail(const QuotaDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuotaDetail)
}

void QuotaDetail::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  left_ = GOOGLE_ULONGLONG(0);
  expire_time_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotaDetail::~QuotaDetail() {
  // @@protoc_insertion_point(destructor:Cmd.QuotaDetail)
  SharedDtor();
}

void QuotaDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuotaDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotaDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotaDetail_descriptor_;
}

const QuotaDetail& QuotaDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QuotaDetail* QuotaDetail::default_instance_ = NULL;

QuotaDetail* QuotaDetail::New() const {
  return new QuotaDetail;
}

void QuotaDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuotaDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuotaDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuotaDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left;
        break;
      }

      // optional uint64 left = 2;
      case 2: {
        if (tag == 16) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expire_time;
        break;
      }

      // optional uint32 expire_time = 3;
      case 3: {
        if (tag == 24) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuotaDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuotaDetail)
  return false;
#undef DO_
}

void QuotaDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuotaDetail)
  // optional uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  // optional uint64 left = 2;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->left(), output);
  }

  // optional uint32 expire_time = 3;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expire_time(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuotaDetail)
}

::google::protobuf::uint8* QuotaDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuotaDetail)
  // optional uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  // optional uint64 left = 2;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->left(), target);
  }

  // optional uint32 expire_time = 3;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expire_time(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuotaDetail)
  return target;
}

int QuotaDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional uint64 left = 2;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->left());
    }

    // optional uint32 expire_time = 3;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expire_time());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotaDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuotaDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuotaDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuotaDetail::MergeFrom(const QuotaDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuotaDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaDetail::CopyFrom(const QuotaDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaDetail::IsInitialized() const {

  return true;
}

void QuotaDetail::Swap(QuotaDetail* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(left_, other->left_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuotaDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotaDetail_descriptor_;
  metadata.reflection = QuotaDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqQuotaLogCmd::kCmdFieldNumber;
const int ReqQuotaLogCmd::kParamFieldNumber;
const int ReqQuotaLogCmd::kPageIndexFieldNumber;
const int ReqQuotaLogCmd::kLogFieldNumber;
#endif  // !_MSC_VER

ReqQuotaLogCmd::ReqQuotaLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqQuotaLogCmd)
}

void ReqQuotaLogCmd::InitAsDefaultInstance() {
}

ReqQuotaLogCmd::ReqQuotaLogCmd(const ReqQuotaLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqQuotaLogCmd)
}

void ReqQuotaLogCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 40;
  page_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqQuotaLogCmd::~ReqQuotaLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqQuotaLogCmd)
  SharedDtor();
}

void ReqQuotaLogCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqQuotaLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQuotaLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqQuotaLogCmd_descriptor_;
}

const ReqQuotaLogCmd& ReqQuotaLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ReqQuotaLogCmd* ReqQuotaLogCmd::default_instance_ = NULL;

ReqQuotaLogCmd* ReqQuotaLogCmd::New() const {
  return new ReqQuotaLogCmd;
}

void ReqQuotaLogCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 40;
    page_index_ = 0u;
  }
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqQuotaLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqQuotaLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_LOG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 3;
      case 3: {
        if (tag == 24) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_log;
        break;
      }

      // repeated .Cmd.QuotaLog log = 4;
      case 4: {
        if (tag == 34) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_log;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqQuotaLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqQuotaLogCmd)
  return false;
#undef DO_
}

void ReqQuotaLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqQuotaLogCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_LOG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 page_index = 3;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_index(), output);
  }

  // repeated .Cmd.QuotaLog log = 4;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqQuotaLogCmd)
}

::google::protobuf::uint8* ReqQuotaLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqQuotaLogCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_LOG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 page_index = 3;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page_index(), target);
  }

  // repeated .Cmd.QuotaLog log = 4;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqQuotaLogCmd)
  return target;
}

int ReqQuotaLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_LOG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 page_index = 3;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

  }
  // repeated .Cmd.QuotaLog log = 4;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQuotaLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqQuotaLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqQuotaLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqQuotaLogCmd::MergeFrom(const ReqQuotaLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqQuotaLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuotaLogCmd::CopyFrom(const ReqQuotaLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuotaLogCmd::IsInitialized() const {

  return true;
}

void ReqQuotaLogCmd::Swap(ReqQuotaLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(page_index_, other->page_index_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqQuotaLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqQuotaLogCmd_descriptor_;
  metadata.reflection = ReqQuotaLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqQuotaDetailCmd::kCmdFieldNumber;
const int ReqQuotaDetailCmd::kParamFieldNumber;
const int ReqQuotaDetailCmd::kPageIndexFieldNumber;
const int ReqQuotaDetailCmd::kDetailFieldNumber;
#endif  // !_MSC_VER

ReqQuotaDetailCmd::ReqQuotaDetailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqQuotaDetailCmd)
}

void ReqQuotaDetailCmd::InitAsDefaultInstance() {
}

ReqQuotaDetailCmd::ReqQuotaDetailCmd(const ReqQuotaDetailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqQuotaDetailCmd)
}

void ReqQuotaDetailCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 41;
  page_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqQuotaDetailCmd::~ReqQuotaDetailCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqQuotaDetailCmd)
  SharedDtor();
}

void ReqQuotaDetailCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqQuotaDetailCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQuotaDetailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqQuotaDetailCmd_descriptor_;
}

const ReqQuotaDetailCmd& ReqQuotaDetailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

ReqQuotaDetailCmd* ReqQuotaDetailCmd::default_instance_ = NULL;

ReqQuotaDetailCmd* ReqQuotaDetailCmd::New() const {
  return new ReqQuotaDetailCmd;
}

void ReqQuotaDetailCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 41;
    page_index_ = 0u;
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqQuotaDetailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqQuotaDetailCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_DETAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_index;
        break;
      }

      // optional uint32 page_index = 3;
      case 3: {
        if (tag == 24) {
         parse_page_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_index_)));
          set_has_page_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detail;
        break;
      }

      // repeated .Cmd.QuotaDetail detail = 4;
      case 4: {
        if (tag == 34) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detail;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqQuotaDetailCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqQuotaDetailCmd)
  return false;
#undef DO_
}

void ReqQuotaDetailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqQuotaDetailCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_DETAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 page_index = 3;
  if (has_page_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_index(), output);
  }

  // repeated .Cmd.QuotaDetail detail = 4;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqQuotaDetailCmd)
}

::google::protobuf::uint8* ReqQuotaDetailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqQuotaDetailCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_DETAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 page_index = 3;
  if (has_page_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page_index(), target);
  }

  // repeated .Cmd.QuotaDetail detail = 4;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqQuotaDetailCmd)
  return target;
}

int ReqQuotaDetailCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_DETAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 page_index = 3;
    if (has_page_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_index());
    }

  }
  // repeated .Cmd.QuotaDetail detail = 4;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQuotaDetailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqQuotaDetailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqQuotaDetailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqQuotaDetailCmd::MergeFrom(const ReqQuotaDetailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_page_index()) {
      set_page_index(from.page_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqQuotaDetailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuotaDetailCmd::CopyFrom(const ReqQuotaDetailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuotaDetailCmd::IsInitialized() const {

  return true;
}

void ReqQuotaDetailCmd::Swap(ReqQuotaDetailCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(page_index_, other->page_index_);
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqQuotaDetailCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqQuotaDetailCmd_descriptor_;
  metadata.reflection = ReqQuotaDetailCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipPosData::kPosFieldNumber;
const int EquipPosData::kOffstarttimeFieldNumber;
const int EquipPosData::kOffendtimeFieldNumber;
const int EquipPosData::kProtecttimeFieldNumber;
const int EquipPosData::kProtectalwaysFieldNumber;
const int EquipPosData::kRecordguidFieldNumber;
#endif  // !_MSC_VER

EquipPosData::EquipPosData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipPosData)
}

void EquipPosData::InitAsDefaultInstance() {
}

EquipPosData::EquipPosData(const EquipPosData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipPosData)
}

void EquipPosData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pos_ = 0;
  offstarttime_ = 0u;
  offendtime_ = 0u;
  protecttime_ = 0u;
  protectalways_ = 0u;
  recordguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipPosData::~EquipPosData() {
  // @@protoc_insertion_point(destructor:Cmd.EquipPosData)
  SharedDtor();
}

void EquipPosData::SharedDtor() {
  if (recordguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recordguid_;
  }
  if (this != default_instance_) {
  }
}

void EquipPosData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipPosData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPosData_descriptor_;
}

const EquipPosData& EquipPosData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipPosData* EquipPosData::default_instance_ = NULL;

EquipPosData* EquipPosData::New() const {
  return new EquipPosData;
}

void EquipPosData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipPosData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(pos_, protecttime_);
    protectalways_ = 0u;
    if (has_recordguid()) {
      if (recordguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recordguid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipPosData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipPosData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EEquipPos pos = 1 [default = EEQUIPPOS_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipPos_IsValid(value)) {
            set_pos(static_cast< ::Cmd::EEquipPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offstarttime;
        break;
      }

      // optional uint32 offstarttime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_offstarttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offstarttime_)));
          set_has_offstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offendtime;
        break;
      }

      // optional uint32 offendtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_offendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offendtime_)));
          set_has_offendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_protecttime;
        break;
      }

      // optional uint32 protecttime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_protecttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protecttime_)));
          set_has_protecttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_protectalways;
        break;
      }

      // optional uint32 protectalways = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_protectalways:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protectalways_)));
          set_has_protectalways();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recordguid;
        break;
      }

      // optional string recordguid = 6;
      case 6: {
        if (tag == 50) {
         parse_recordguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recordguid().data(), this->recordguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recordguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipPosData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipPosData)
  return false;
#undef DO_
}

void EquipPosData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipPosData)
  // optional .Cmd.EEquipPos pos = 1 [default = EEQUIPPOS_MIN];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }

  // optional uint32 offstarttime = 2 [default = 0];
  if (has_offstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offstarttime(), output);
  }

  // optional uint32 offendtime = 3 [default = 0];
  if (has_offendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offendtime(), output);
  }

  // optional uint32 protecttime = 4 [default = 0];
  if (has_protecttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protecttime(), output);
  }

  // optional uint32 protectalways = 5 [default = 0];
  if (has_protectalways()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->protectalways(), output);
  }

  // optional string recordguid = 6;
  if (has_recordguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recordguid().data(), this->recordguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recordguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->recordguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipPosData)
}

::google::protobuf::uint8* EquipPosData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipPosData)
  // optional .Cmd.EEquipPos pos = 1 [default = EEQUIPPOS_MIN];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }

  // optional uint32 offstarttime = 2 [default = 0];
  if (has_offstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offstarttime(), target);
  }

  // optional uint32 offendtime = 3 [default = 0];
  if (has_offendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offendtime(), target);
  }

  // optional uint32 protecttime = 4 [default = 0];
  if (has_protecttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protecttime(), target);
  }

  // optional uint32 protectalways = 5 [default = 0];
  if (has_protectalways()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->protectalways(), target);
  }

  // optional string recordguid = 6;
  if (has_recordguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recordguid().data(), this->recordguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recordguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->recordguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipPosData)
  return target;
}

int EquipPosData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EEquipPos pos = 1 [default = EEQUIPPOS_MIN];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

    // optional uint32 offstarttime = 2 [default = 0];
    if (has_offstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offstarttime());
    }

    // optional uint32 offendtime = 3 [default = 0];
    if (has_offendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offendtime());
    }

    // optional uint32 protecttime = 4 [default = 0];
    if (has_protecttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protecttime());
    }

    // optional uint32 protectalways = 5 [default = 0];
    if (has_protectalways()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protectalways());
    }

    // optional string recordguid = 6;
    if (has_recordguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipPosData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipPosData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipPosData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipPosData::MergeFrom(const EquipPosData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_offstarttime()) {
      set_offstarttime(from.offstarttime());
    }
    if (from.has_offendtime()) {
      set_offendtime(from.offendtime());
    }
    if (from.has_protecttime()) {
      set_protecttime(from.protecttime());
    }
    if (from.has_protectalways()) {
      set_protectalways(from.protectalways());
    }
    if (from.has_recordguid()) {
      set_recordguid(from.recordguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipPosData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipPosData::CopyFrom(const EquipPosData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipPosData::IsInitialized() const {

  return true;
}

void EquipPosData::Swap(EquipPosData* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(offstarttime_, other->offstarttime_);
    std::swap(offendtime_, other->offendtime_);
    std::swap(protecttime_, other->protecttime_);
    std::swap(protectalways_, other->protectalways_);
    std::swap(recordguid_, other->recordguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipPosData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipPosData_descriptor_;
  metadata.reflection = EquipPosData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipPosDataUpdate::kCmdFieldNumber;
const int EquipPosDataUpdate::kParamFieldNumber;
const int EquipPosDataUpdate::kDatasFieldNumber;
#endif  // !_MSC_VER

EquipPosDataUpdate::EquipPosDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipPosDataUpdate)
}

void EquipPosDataUpdate::InitAsDefaultInstance() {
}

EquipPosDataUpdate::EquipPosDataUpdate(const EquipPosDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipPosDataUpdate)
}

void EquipPosDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 42;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipPosDataUpdate::~EquipPosDataUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.EquipPosDataUpdate)
  SharedDtor();
}

void EquipPosDataUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipPosDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipPosDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPosDataUpdate_descriptor_;
}

const EquipPosDataUpdate& EquipPosDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipPosDataUpdate* EquipPosDataUpdate::default_instance_ = NULL;

EquipPosDataUpdate* EquipPosDataUpdate::New() const {
  return new EquipPosDataUpdate;
}

void EquipPosDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 6;
    param_ = 42;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipPosDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipPosDataUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPPOSDATA_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.EquipPosData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipPosDataUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipPosDataUpdate)
  return false;
#undef DO_
}

void EquipPosDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipPosDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPPOSDATA_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.EquipPosData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipPosDataUpdate)
}

::google::protobuf::uint8* EquipPosDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipPosDataUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPPOSDATA_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.EquipPosData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipPosDataUpdate)
  return target;
}

int EquipPosDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPPOSDATA_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.EquipPosData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipPosDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipPosDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipPosDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipPosDataUpdate::MergeFrom(const EquipPosDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipPosDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipPosDataUpdate::CopyFrom(const EquipPosDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipPosDataUpdate::IsInitialized() const {

  return true;
}

void EquipPosDataUpdate::Swap(EquipPosDataUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipPosDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipPosDataUpdate_descriptor_;
  metadata.reflection = EquipPosDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatItemInfo::kItemidFieldNumber;
const int MatItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

MatItemInfo::MatItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MatItemInfo)
}

void MatItemInfo::InitAsDefaultInstance() {
}

MatItemInfo::MatItemInfo(const MatItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MatItemInfo)
}

void MatItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatItemInfo::~MatItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.MatItemInfo)
  SharedDtor();
}

void MatItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatItemInfo_descriptor_;
}

const MatItemInfo& MatItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

MatItemInfo* MatItemInfo::default_instance_ = NULL;

MatItemInfo* MatItemInfo::New() const {
  return new MatItemInfo;
}

void MatItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MatItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MatItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MatItemInfo)
  return false;
#undef DO_
}

void MatItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MatItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MatItemInfo)
}

::google::protobuf::uint8* MatItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MatItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MatItemInfo)
  return target;
}

int MatItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatItemInfo::MergeFrom(const MatItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatItemInfo::CopyFrom(const MatItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatItemInfo::IsInitialized() const {

  return true;
}

void MatItemInfo::Swap(MatItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatItemInfo_descriptor_;
  metadata.reflection = MatItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HighRefineMatComposeCmd::kCmdFieldNumber;
const int HighRefineMatComposeCmd::kParamFieldNumber;
const int HighRefineMatComposeCmd::kDataidFieldNumber;
const int HighRefineMatComposeCmd::kNpcidFieldNumber;
const int HighRefineMatComposeCmd::kMainmaterialFieldNumber;
const int HighRefineMatComposeCmd::kVicematerialFieldNumber;
#endif  // !_MSC_VER

HighRefineMatComposeCmd::HighRefineMatComposeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HighRefineMatComposeCmd)
}

void HighRefineMatComposeCmd::InitAsDefaultInstance() {
}

HighRefineMatComposeCmd::HighRefineMatComposeCmd(const HighRefineMatComposeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HighRefineMatComposeCmd)
}

void HighRefineMatComposeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 36;
  dataid_ = 0u;
  npcid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HighRefineMatComposeCmd::~HighRefineMatComposeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HighRefineMatComposeCmd)
  SharedDtor();
}

void HighRefineMatComposeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HighRefineMatComposeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HighRefineMatComposeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HighRefineMatComposeCmd_descriptor_;
}

const HighRefineMatComposeCmd& HighRefineMatComposeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

HighRefineMatComposeCmd* HighRefineMatComposeCmd::default_instance_ = NULL;

HighRefineMatComposeCmd* HighRefineMatComposeCmd::New() const {
  return new HighRefineMatComposeCmd;
}

void HighRefineMatComposeCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 6;
    param_ = 36;
    dataid_ = 0u;
    npcid_ = GOOGLE_ULONGLONG(0);
  }
  mainmaterial_.Clear();
  vicematerial_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HighRefineMatComposeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HighRefineMatComposeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE_MATCOMPOSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dataid;
        break;
      }

      // optional uint32 dataid = 3;
      case 3: {
        if (tag == 24) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 4;
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mainmaterial;
        break;
      }

      // repeated .Cmd.MatItemInfo mainmaterial = 5;
      case 5: {
        if (tag == 42) {
         parse_mainmaterial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mainmaterial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mainmaterial;
        if (input->ExpectTag(50)) goto parse_vicematerial;
        break;
      }

      // repeated .Cmd.MatItemInfo vicematerial = 6;
      case 6: {
        if (tag == 50) {
         parse_vicematerial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vicematerial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vicematerial;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HighRefineMatComposeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HighRefineMatComposeCmd)
  return false;
#undef DO_
}

void HighRefineMatComposeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HighRefineMatComposeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE_MATCOMPOSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dataid = 3;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dataid(), output);
  }

  // optional uint64 npcid = 4;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcid(), output);
  }

  // repeated .Cmd.MatItemInfo mainmaterial = 5;
  for (int i = 0; i < this->mainmaterial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mainmaterial(i), output);
  }

  // repeated .Cmd.MatItemInfo vicematerial = 6;
  for (int i = 0; i < this->vicematerial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vicematerial(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HighRefineMatComposeCmd)
}

::google::protobuf::uint8* HighRefineMatComposeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HighRefineMatComposeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE_MATCOMPOSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dataid = 3;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dataid(), target);
  }

  // optional uint64 npcid = 4;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcid(), target);
  }

  // repeated .Cmd.MatItemInfo mainmaterial = 5;
  for (int i = 0; i < this->mainmaterial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mainmaterial(i), target);
  }

  // repeated .Cmd.MatItemInfo vicematerial = 6;
  for (int i = 0; i < this->vicematerial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vicematerial(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HighRefineMatComposeCmd)
  return target;
}

int HighRefineMatComposeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE_MATCOMPOSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dataid = 3;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataid());
    }

    // optional uint64 npcid = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

  }
  // repeated .Cmd.MatItemInfo mainmaterial = 5;
  total_size += 1 * this->mainmaterial_size();
  for (int i = 0; i < this->mainmaterial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mainmaterial(i));
  }

  // repeated .Cmd.MatItemInfo vicematerial = 6;
  total_size += 1 * this->vicematerial_size();
  for (int i = 0; i < this->vicematerial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vicematerial(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HighRefineMatComposeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HighRefineMatComposeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HighRefineMatComposeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HighRefineMatComposeCmd::MergeFrom(const HighRefineMatComposeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mainmaterial_.MergeFrom(from.mainmaterial_);
  vicematerial_.MergeFrom(from.vicematerial_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HighRefineMatComposeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighRefineMatComposeCmd::CopyFrom(const HighRefineMatComposeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighRefineMatComposeCmd::IsInitialized() const {

  return true;
}

void HighRefineMatComposeCmd::Swap(HighRefineMatComposeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dataid_, other->dataid_);
    std::swap(npcid_, other->npcid_);
    mainmaterial_.Swap(&other->mainmaterial_);
    vicematerial_.Swap(&other->vicematerial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HighRefineMatComposeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HighRefineMatComposeCmd_descriptor_;
  metadata.reflection = HighRefineMatComposeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HighRefineCmd::kCmdFieldNumber;
const int HighRefineCmd::kParamFieldNumber;
const int HighRefineCmd::kDataidFieldNumber;
#endif  // !_MSC_VER

HighRefineCmd::HighRefineCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HighRefineCmd)
}

void HighRefineCmd::InitAsDefaultInstance() {
}

HighRefineCmd::HighRefineCmd(const HighRefineCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HighRefineCmd)
}

void HighRefineCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 37;
  dataid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HighRefineCmd::~HighRefineCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HighRefineCmd)
  SharedDtor();
}

void HighRefineCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HighRefineCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HighRefineCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HighRefineCmd_descriptor_;
}

const HighRefineCmd& HighRefineCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

HighRefineCmd* HighRefineCmd::default_instance_ = NULL;

HighRefineCmd* HighRefineCmd::New() const {
  return new HighRefineCmd;
}

void HighRefineCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 37;
    dataid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HighRefineCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HighRefineCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dataid;
        break;
      }

      // optional uint32 dataid = 3;
      case 3: {
        if (tag == 24) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HighRefineCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HighRefineCmd)
  return false;
#undef DO_
}

void HighRefineCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HighRefineCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dataid = 3;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HighRefineCmd)
}

::google::protobuf::uint8* HighRefineCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HighRefineCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dataid = 3;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HighRefineCmd)
  return target;
}

int HighRefineCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dataid = 3;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HighRefineCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HighRefineCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HighRefineCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HighRefineCmd::MergeFrom(const HighRefineCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HighRefineCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighRefineCmd::CopyFrom(const HighRefineCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighRefineCmd::IsInitialized() const {

  return true;
}

void HighRefineCmd::Swap(HighRefineCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dataid_, other->dataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HighRefineCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HighRefineCmd_descriptor_;
  metadata.reflection = HighRefineCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HighRefineData::kPosFieldNumber;
const int HighRefineData::kLevelFieldNumber;
#endif  // !_MSC_VER

HighRefineData::HighRefineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HighRefineData)
}

void HighRefineData::InitAsDefaultInstance() {
}

HighRefineData::HighRefineData(const HighRefineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HighRefineData)
}

void HighRefineData::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HighRefineData::~HighRefineData() {
  // @@protoc_insertion_point(destructor:Cmd.HighRefineData)
  SharedDtor();
}

void HighRefineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HighRefineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HighRefineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HighRefineData_descriptor_;
}

const HighRefineData& HighRefineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

HighRefineData* HighRefineData::default_instance_ = NULL;

HighRefineData* HighRefineData::New() const {
  return new HighRefineData;
}

void HighRefineData::Clear() {
  pos_ = 0;
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HighRefineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HighRefineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EEquipPos pos = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipPos_IsValid(value)) {
            set_pos(static_cast< ::Cmd::EEquipPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // repeated uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_level())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HighRefineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HighRefineData)
  return false;
#undef DO_
}

void HighRefineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HighRefineData)
  // optional .Cmd.EEquipPos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }

  // repeated uint32 level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HighRefineData)
}

::google::protobuf::uint8* HighRefineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HighRefineData)
  // optional .Cmd.EEquipPos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }

  // repeated uint32 level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HighRefineData)
  return target;
}

int HighRefineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EEquipPos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

  }
  // repeated uint32 level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HighRefineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HighRefineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HighRefineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HighRefineData::MergeFrom(const HighRefineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HighRefineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighRefineData::CopyFrom(const HighRefineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighRefineData::IsInitialized() const {

  return true;
}

void HighRefineData::Swap(HighRefineData* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    level_.Swap(&other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HighRefineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HighRefineData_descriptor_;
  metadata.reflection = HighRefineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfHighRefineDataCmd::kCmdFieldNumber;
const int NtfHighRefineDataCmd::kParamFieldNumber;
const int NtfHighRefineDataCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

NtfHighRefineDataCmd::NtfHighRefineDataCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfHighRefineDataCmd)
}

void NtfHighRefineDataCmd::InitAsDefaultInstance() {
}

NtfHighRefineDataCmd::NtfHighRefineDataCmd(const NtfHighRefineDataCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfHighRefineDataCmd)
}

void NtfHighRefineDataCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 38;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfHighRefineDataCmd::~NtfHighRefineDataCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfHighRefineDataCmd)
  SharedDtor();
}

void NtfHighRefineDataCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfHighRefineDataCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfHighRefineDataCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfHighRefineDataCmd_descriptor_;
}

const NtfHighRefineDataCmd& NtfHighRefineDataCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

NtfHighRefineDataCmd* NtfHighRefineDataCmd::default_instance_ = NULL;

NtfHighRefineDataCmd* NtfHighRefineDataCmd::New() const {
  return new NtfHighRefineDataCmd;
}

void NtfHighRefineDataCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 6;
    param_ = 38;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfHighRefineDataCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfHighRefineDataCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_NTF_HIGHTREFINE_DATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.HighRefineData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfHighRefineDataCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfHighRefineDataCmd)
  return false;
#undef DO_
}

void NtfHighRefineDataCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfHighRefineDataCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_NTF_HIGHTREFINE_DATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.HighRefineData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfHighRefineDataCmd)
}

::google::protobuf::uint8* NtfHighRefineDataCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfHighRefineDataCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_NTF_HIGHTREFINE_DATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.HighRefineData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfHighRefineDataCmd)
  return target;
}

int NtfHighRefineDataCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_NTF_HIGHTREFINE_DATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.HighRefineData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfHighRefineDataCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfHighRefineDataCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfHighRefineDataCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfHighRefineDataCmd::MergeFrom(const NtfHighRefineDataCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfHighRefineDataCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfHighRefineDataCmd::CopyFrom(const NtfHighRefineDataCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfHighRefineDataCmd::IsInitialized() const {

  return true;
}

void NtfHighRefineDataCmd::Swap(NtfHighRefineDataCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfHighRefineDataCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfHighRefineDataCmd_descriptor_;
  metadata.reflection = NtfHighRefineDataCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateHighRefineDataCmd::kCmdFieldNumber;
const int UpdateHighRefineDataCmd::kParamFieldNumber;
const int UpdateHighRefineDataCmd::kDataFieldNumber;
#endif  // !_MSC_VER

UpdateHighRefineDataCmd::UpdateHighRefineDataCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateHighRefineDataCmd)
}

void UpdateHighRefineDataCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::HighRefineData*>(&::Cmd::HighRefineData::default_instance());
}

UpdateHighRefineDataCmd::UpdateHighRefineDataCmd(const UpdateHighRefineDataCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateHighRefineDataCmd)
}

void UpdateHighRefineDataCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 39;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateHighRefineDataCmd::~UpdateHighRefineDataCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateHighRefineDataCmd)
  SharedDtor();
}

void UpdateHighRefineDataCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UpdateHighRefineDataCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateHighRefineDataCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateHighRefineDataCmd_descriptor_;
}

const UpdateHighRefineDataCmd& UpdateHighRefineDataCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

UpdateHighRefineDataCmd* UpdateHighRefineDataCmd::default_instance_ = NULL;

UpdateHighRefineDataCmd* UpdateHighRefineDataCmd::New() const {
  return new UpdateHighRefineDataCmd;
}

void UpdateHighRefineDataCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 39;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::HighRefineData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateHighRefineDataCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateHighRefineDataCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_UPDATE_HIGHTREFINE_DATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.HighRefineData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateHighRefineDataCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateHighRefineDataCmd)
  return false;
#undef DO_
}

void UpdateHighRefineDataCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateHighRefineDataCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_UPDATE_HIGHTREFINE_DATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.HighRefineData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateHighRefineDataCmd)
}

::google::protobuf::uint8* UpdateHighRefineDataCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateHighRefineDataCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_UPDATE_HIGHTREFINE_DATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.HighRefineData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateHighRefineDataCmd)
  return target;
}

int UpdateHighRefineDataCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_UPDATE_HIGHTREFINE_DATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.HighRefineData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateHighRefineDataCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateHighRefineDataCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateHighRefineDataCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateHighRefineDataCmd::MergeFrom(const UpdateHighRefineDataCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::HighRefineData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateHighRefineDataCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateHighRefineDataCmd::CopyFrom(const UpdateHighRefineDataCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHighRefineDataCmd::IsInitialized() const {

  return true;
}

void UpdateHighRefineDataCmd::Swap(UpdateHighRefineDataCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateHighRefineDataCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateHighRefineDataCmd_descriptor_;
  metadata.reflection = UpdateHighRefineDataCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseCodItemCmd::kCmdFieldNumber;
const int UseCodItemCmd::kParamFieldNumber;
const int UseCodItemCmd::kGuidFieldNumber;
const int UseCodItemCmd::kCodeFieldNumber;
#endif  // !_MSC_VER

UseCodItemCmd::UseCodItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseCodItemCmd)
}

void UseCodItemCmd::InitAsDefaultInstance() {
}

UseCodItemCmd::UseCodItemCmd(const UseCodItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseCodItemCmd)
}

void UseCodItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 43;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseCodItemCmd::~UseCodItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UseCodItemCmd)
  SharedDtor();
}

void UseCodItemCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void UseCodItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseCodItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseCodItemCmd_descriptor_;
}

const UseCodItemCmd& UseCodItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

UseCodItemCmd* UseCodItemCmd::default_instance_ = NULL;

UseCodItemCmd* UseCodItemCmd::New() const {
  return new UseCodItemCmd;
}

void UseCodItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 6;
    param_ = 43;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseCodItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseCodItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USE_CODE_ITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }

      // optional string code = 4;
      case 4: {
        if (tag == 34) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseCodItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseCodItemCmd)
  return false;
#undef DO_
}

void UseCodItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseCodItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USE_CODE_ITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseCodItemCmd)
}

::google::protobuf::uint8* UseCodItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseCodItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USE_CODE_ITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseCodItemCmd)
  return target;
}

int UseCodItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USE_CODE_ITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseCodItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseCodItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseCodItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseCodItemCmd::MergeFrom(const UseCodItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseCodItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseCodItemCmd::CopyFrom(const UseCodItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseCodItemCmd::IsInitialized() const {

  return true;
}

void UseCodItemCmd::Swap(UseCodItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseCodItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseCodItemCmd_descriptor_;
  metadata.reflection = UseCodItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddJobLevelItemCmd::kCmdFieldNumber;
const int AddJobLevelItemCmd::kParamFieldNumber;
const int AddJobLevelItemCmd::kItemFieldNumber;
const int AddJobLevelItemCmd::kNumFieldNumber;
#endif  // !_MSC_VER

AddJobLevelItemCmd::AddJobLevelItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddJobLevelItemCmd)
}

void AddJobLevelItemCmd::InitAsDefaultInstance() {
}

AddJobLevelItemCmd::AddJobLevelItemCmd(const AddJobLevelItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddJobLevelItemCmd)
}

void AddJobLevelItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 44;
  item_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddJobLevelItemCmd::~AddJobLevelItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddJobLevelItemCmd)
  SharedDtor();
}

void AddJobLevelItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddJobLevelItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddJobLevelItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddJobLevelItemCmd_descriptor_;
}

const AddJobLevelItemCmd& AddJobLevelItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

AddJobLevelItemCmd* AddJobLevelItemCmd::default_instance_ = NULL;

AddJobLevelItemCmd* AddJobLevelItemCmd::New() const {
  return new AddJobLevelItemCmd;
}

void AddJobLevelItemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddJobLevelItemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(item_, num_);
    cmd_ = 6;
    param_ = 44;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddJobLevelItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddJobLevelItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ADD_JOBLEVEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // optional uint32 item = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddJobLevelItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddJobLevelItemCmd)
  return false;
#undef DO_
}

void AddJobLevelItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddJobLevelItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ADD_JOBLEVEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 item = 3 [default = 0];
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item(), output);
  }

  // optional uint32 num = 4 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddJobLevelItemCmd)
}

::google::protobuf::uint8* AddJobLevelItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddJobLevelItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ADD_JOBLEVEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 item = 3 [default = 0];
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item(), target);
  }

  // optional uint32 num = 4 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddJobLevelItemCmd)
  return target;
}

int AddJobLevelItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ADD_JOBLEVEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 item = 3 [default = 0];
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

    // optional uint32 num = 4 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddJobLevelItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddJobLevelItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddJobLevelItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddJobLevelItemCmd::MergeFrom(const AddJobLevelItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddJobLevelItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddJobLevelItemCmd::CopyFrom(const AddJobLevelItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddJobLevelItemCmd::IsInitialized() const {

  return true;
}

void AddJobLevelItemCmd::Swap(AddJobLevelItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddJobLevelItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddJobLevelItemCmd_descriptor_;
  metadata.reflection = AddJobLevelItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotterGivBuyCountCmd::kCmdFieldNumber;
const int LotterGivBuyCountCmd::kParamFieldNumber;
const int LotterGivBuyCountCmd::kGotCountFieldNumber;
const int LotterGivBuyCountCmd::kMaxCountFieldNumber;
#endif  // !_MSC_VER

LotterGivBuyCountCmd::LotterGivBuyCountCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotterGivBuyCountCmd)
}

void LotterGivBuyCountCmd::InitAsDefaultInstance() {
}

LotterGivBuyCountCmd::LotterGivBuyCountCmd(const LotterGivBuyCountCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotterGivBuyCountCmd)
}

void LotterGivBuyCountCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 46;
  got_count_ = 0u;
  max_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotterGivBuyCountCmd::~LotterGivBuyCountCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LotterGivBuyCountCmd)
  SharedDtor();
}

void LotterGivBuyCountCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotterGivBuyCountCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotterGivBuyCountCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotterGivBuyCountCmd_descriptor_;
}

const LotterGivBuyCountCmd& LotterGivBuyCountCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LotterGivBuyCountCmd* LotterGivBuyCountCmd::default_instance_ = NULL;

LotterGivBuyCountCmd* LotterGivBuyCountCmd::New() const {
  return new LotterGivBuyCountCmd;
}

void LotterGivBuyCountCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotterGivBuyCountCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(got_count_, max_count_);
    cmd_ = 6;
    param_ = 46;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotterGivBuyCountCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotterGivBuyCountCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_GIVE_BUY_COUNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_got_count;
        break;
      }

      // optional uint32 got_count = 3;
      case 3: {
        if (tag == 24) {
         parse_got_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_count_)));
          set_has_got_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_count;
        break;
      }

      // optional uint32 max_count = 4;
      case 4: {
        if (tag == 32) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotterGivBuyCountCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotterGivBuyCountCmd)
  return false;
#undef DO_
}

void LotterGivBuyCountCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotterGivBuyCountCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_GIVE_BUY_COUNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 got_count = 3;
  if (has_got_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->got_count(), output);
  }

  // optional uint32 max_count = 4;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotterGivBuyCountCmd)
}

::google::protobuf::uint8* LotterGivBuyCountCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotterGivBuyCountCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_GIVE_BUY_COUNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 got_count = 3;
  if (has_got_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->got_count(), target);
  }

  // optional uint32 max_count = 4;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotterGivBuyCountCmd)
  return target;
}

int LotterGivBuyCountCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_GIVE_BUY_COUNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 got_count = 3;
    if (has_got_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->got_count());
    }

    // optional uint32 max_count = 4;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotterGivBuyCountCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotterGivBuyCountCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotterGivBuyCountCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotterGivBuyCountCmd::MergeFrom(const LotterGivBuyCountCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_got_count()) {
      set_got_count(from.got_count());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotterGivBuyCountCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotterGivBuyCountCmd::CopyFrom(const LotterGivBuyCountCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotterGivBuyCountCmd::IsInitialized() const {

  return true;
}

void LotterGivBuyCountCmd::Swap(LotterGivBuyCountCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(got_count_, other->got_count_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotterGivBuyCountCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotterGivBuyCountCmd_descriptor_;
  metadata.reflection = LotterGivBuyCountCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiveWeddingDressCmd::kCmdFieldNumber;
const int GiveWeddingDressCmd::kParamFieldNumber;
const int GiveWeddingDressCmd::kGuidFieldNumber;
const int GiveWeddingDressCmd::kContentFieldNumber;
const int GiveWeddingDressCmd::kReceiveridFieldNumber;
#endif  // !_MSC_VER

GiveWeddingDressCmd::GiveWeddingDressCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GiveWeddingDressCmd)
}

void GiveWeddingDressCmd::InitAsDefaultInstance() {
}

GiveWeddingDressCmd::GiveWeddingDressCmd(const GiveWeddingDressCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GiveWeddingDressCmd)
}

void GiveWeddingDressCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 47;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiverid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveWeddingDressCmd::~GiveWeddingDressCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GiveWeddingDressCmd)
  SharedDtor();
}

void GiveWeddingDressCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GiveWeddingDressCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveWeddingDressCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveWeddingDressCmd_descriptor_;
}

const GiveWeddingDressCmd& GiveWeddingDressCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

GiveWeddingDressCmd* GiveWeddingDressCmd::default_instance_ = NULL;

GiveWeddingDressCmd* GiveWeddingDressCmd::New() const {
  return new GiveWeddingDressCmd;
}

void GiveWeddingDressCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 6;
    param_ = 47;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    receiverid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiveWeddingDressCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GiveWeddingDressCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GIVE_WEDDING_DRESS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_receiverid;
        break;
      }

      // optional uint64 receiverid = 8;
      case 8: {
        if (tag == 64) {
         parse_receiverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GiveWeddingDressCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GiveWeddingDressCmd)
  return false;
#undef DO_
}

void GiveWeddingDressCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GiveWeddingDressCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GIVE_WEDDING_DRESS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional uint64 receiverid = 8;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->receiverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GiveWeddingDressCmd)
}

::google::protobuf::uint8* GiveWeddingDressCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GiveWeddingDressCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GIVE_WEDDING_DRESS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional uint64 receiverid = 8;
  if (has_receiverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->receiverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GiveWeddingDressCmd)
  return target;
}

int GiveWeddingDressCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GIVE_WEDDING_DRESS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 receiverid = 8;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveWeddingDressCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiveWeddingDressCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiveWeddingDressCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiveWeddingDressCmd::MergeFrom(const GiveWeddingDressCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiveWeddingDressCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveWeddingDressCmd::CopyFrom(const GiveWeddingDressCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveWeddingDressCmd::IsInitialized() const {

  return true;
}

void GiveWeddingDressCmd::Swap(GiveWeddingDressCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(content_, other->content_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiveWeddingDressCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveWeddingDressCmd_descriptor_;
  metadata.reflection = GiveWeddingDressCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickStoreItemCmd::kCmdFieldNumber;
const int QuickStoreItemCmd::kParamFieldNumber;
const int QuickStoreItemCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

QuickStoreItemCmd::QuickStoreItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuickStoreItemCmd)
}

void QuickStoreItemCmd::InitAsDefaultInstance() {
}

QuickStoreItemCmd::QuickStoreItemCmd(const QuickStoreItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuickStoreItemCmd)
}

void QuickStoreItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 48;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickStoreItemCmd::~QuickStoreItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuickStoreItemCmd)
  SharedDtor();
}

void QuickStoreItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickStoreItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickStoreItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickStoreItemCmd_descriptor_;
}

const QuickStoreItemCmd& QuickStoreItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QuickStoreItemCmd* QuickStoreItemCmd::default_instance_ = NULL;

QuickStoreItemCmd* QuickStoreItemCmd::New() const {
  return new QuickStoreItemCmd;
}

void QuickStoreItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 6;
    param_ = 48;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickStoreItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuickStoreItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_STOREITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuickStoreItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuickStoreItemCmd)
  return false;
#undef DO_
}

void QuickStoreItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuickStoreItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_STOREITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuickStoreItemCmd)
}

::google::protobuf::uint8* QuickStoreItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuickStoreItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_STOREITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuickStoreItemCmd)
  return target;
}

int QuickStoreItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_STOREITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ItemInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickStoreItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickStoreItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickStoreItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickStoreItemCmd::MergeFrom(const QuickStoreItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickStoreItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickStoreItemCmd::CopyFrom(const QuickStoreItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickStoreItemCmd::IsInitialized() const {

  return true;
}

void QuickStoreItemCmd::Swap(QuickStoreItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickStoreItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickStoreItemCmd_descriptor_;
  metadata.reflection = QuickStoreItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickSellItemCmd::kCmdFieldNumber;
const int QuickSellItemCmd::kParamFieldNumber;
const int QuickSellItemCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

QuickSellItemCmd::QuickSellItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuickSellItemCmd)
}

void QuickSellItemCmd::InitAsDefaultInstance() {
}

QuickSellItemCmd::QuickSellItemCmd(const QuickSellItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuickSellItemCmd)
}

void QuickSellItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 49;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickSellItemCmd::~QuickSellItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuickSellItemCmd)
  SharedDtor();
}

void QuickSellItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickSellItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickSellItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickSellItemCmd_descriptor_;
}

const QuickSellItemCmd& QuickSellItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QuickSellItemCmd* QuickSellItemCmd::default_instance_ = NULL;

QuickSellItemCmd* QuickSellItemCmd::New() const {
  return new QuickSellItemCmd;
}

void QuickSellItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 6;
    param_ = 49;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickSellItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuickSellItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_SELLITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.SItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuickSellItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuickSellItemCmd)
  return false;
#undef DO_
}

void QuickSellItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuickSellItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_SELLITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuickSellItemCmd)
}

::google::protobuf::uint8* QuickSellItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuickSellItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_SELLITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuickSellItemCmd)
  return target;
}

int QuickSellItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_SELLITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickSellItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickSellItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickSellItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickSellItemCmd::MergeFrom(const QuickSellItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickSellItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickSellItemCmd::CopyFrom(const QuickSellItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickSellItemCmd::IsInitialized() const {

  return true;
}

void QuickSellItemCmd::Swap(QuickSellItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickSellItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickSellItemCmd_descriptor_;
  metadata.reflection = QuickSellItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantTransItemCmd::kCmdFieldNumber;
const int EnchantTransItemCmd::kParamFieldNumber;
const int EnchantTransItemCmd::kFromGuidFieldNumber;
const int EnchantTransItemCmd::kToGuidFieldNumber;
const int EnchantTransItemCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

EnchantTransItemCmd::EnchantTransItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnchantTransItemCmd)
}

void EnchantTransItemCmd::InitAsDefaultInstance() {
}

EnchantTransItemCmd::EnchantTransItemCmd(const EnchantTransItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnchantTransItemCmd)
}

void EnchantTransItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 50;
  from_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantTransItemCmd::~EnchantTransItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnchantTransItemCmd)
  SharedDtor();
}

void EnchantTransItemCmd::SharedDtor() {
  if (from_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_guid_;
  }
  if (to_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_guid_;
  }
  if (this != default_instance_) {
  }
}

void EnchantTransItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantTransItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantTransItemCmd_descriptor_;
}

const EnchantTransItemCmd& EnchantTransItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EnchantTransItemCmd* EnchantTransItemCmd::default_instance_ = NULL;

EnchantTransItemCmd* EnchantTransItemCmd::New() const {
  return new EnchantTransItemCmd;
}

void EnchantTransItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 6;
    param_ = 50;
    if (has_from_guid()) {
      if (from_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_guid_->clear();
      }
    }
    if (has_to_guid()) {
      if (to_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_guid_->clear();
      }
    }
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnchantTransItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnchantTransItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT_TRANS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_guid;
        break;
      }

      // optional string from_guid = 3;
      case 3: {
        if (tag == 26) {
         parse_from_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_guid().data(), this->from_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from_guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to_guid;
        break;
      }

      // optional string to_guid = 4;
      case 4: {
        if (tag == 34) {
         parse_to_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_guid().data(), this->to_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_success;
        break;
      }

      // optional bool success = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnchantTransItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnchantTransItemCmd)
  return false;
#undef DO_
}

void EnchantTransItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnchantTransItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT_TRANS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string from_guid = 3;
  if (has_from_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_guid().data(), this->from_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_guid(), output);
  }

  // optional string to_guid = 4;
  if (has_to_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_guid().data(), this->to_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_guid(), output);
  }

  // optional bool success = 5 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnchantTransItemCmd)
}

::google::protobuf::uint8* EnchantTransItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnchantTransItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT_TRANS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string from_guid = 3;
  if (has_from_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_guid().data(), this->from_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_guid(), target);
  }

  // optional string to_guid = 4;
  if (has_to_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_guid().data(), this->to_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_guid(), target);
  }

  // optional bool success = 5 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnchantTransItemCmd)
  return target;
}

int EnchantTransItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT_TRANS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string from_guid = 3;
    if (has_from_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_guid());
    }

    // optional string to_guid = 4;
    if (has_to_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_guid());
    }

    // optional bool success = 5 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantTransItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantTransItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantTransItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnchantTransItemCmd::MergeFrom(const EnchantTransItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_from_guid()) {
      set_from_guid(from.from_guid());
    }
    if (from.has_to_guid()) {
      set_to_guid(from.to_guid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnchantTransItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnchantTransItemCmd::CopyFrom(const EnchantTransItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnchantTransItemCmd::IsInitialized() const {

  return true;
}

void EnchantTransItemCmd::Swap(EnchantTransItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(from_guid_, other->from_guid_);
    std::swap(to_guid_, other->to_guid_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnchantTransItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantTransItemCmd_descriptor_;
  metadata.reflection = EnchantTransItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLotteryHeadItemCmd::kCmdFieldNumber;
const int QueryLotteryHeadItemCmd::kParamFieldNumber;
const int QueryLotteryHeadItemCmd::kIdsFieldNumber;
#endif  // !_MSC_VER

QueryLotteryHeadItemCmd::QueryLotteryHeadItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryLotteryHeadItemCmd)
}

void QueryLotteryHeadItemCmd::InitAsDefaultInstance() {
}

QueryLotteryHeadItemCmd::QueryLotteryHeadItemCmd(const QueryLotteryHeadItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryLotteryHeadItemCmd)
}

void QueryLotteryHeadItemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 51;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLotteryHeadItemCmd::~QueryLotteryHeadItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryLotteryHeadItemCmd)
  SharedDtor();
}

void QueryLotteryHeadItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryLotteryHeadItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLotteryHeadItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLotteryHeadItemCmd_descriptor_;
}

const QueryLotteryHeadItemCmd& QueryLotteryHeadItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

QueryLotteryHeadItemCmd* QueryLotteryHeadItemCmd::default_instance_ = NULL;

QueryLotteryHeadItemCmd* QueryLotteryHeadItemCmd::New() const {
  return new QueryLotteryHeadItemCmd;
}

void QueryLotteryHeadItemCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 6;
    param_ = 51;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLotteryHeadItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryLotteryHeadItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYHEAD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        break;
      }

      // repeated uint32 ids = 3;
      case 3: {
        if (tag == 24) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryLotteryHeadItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryLotteryHeadItemCmd)
  return false;
#undef DO_
}

void QueryLotteryHeadItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryLotteryHeadItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYHEAD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryLotteryHeadItemCmd)
}

::google::protobuf::uint8* QueryLotteryHeadItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryLotteryHeadItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYHEAD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryLotteryHeadItemCmd)
  return target;
}

int QueryLotteryHeadItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYHEAD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLotteryHeadItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLotteryHeadItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLotteryHeadItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLotteryHeadItemCmd::MergeFrom(const QueryLotteryHeadItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLotteryHeadItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLotteryHeadItemCmd::CopyFrom(const QueryLotteryHeadItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLotteryHeadItemCmd::IsInitialized() const {

  return true;
}

void QueryLotteryHeadItemCmd::Swap(QueryLotteryHeadItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLotteryHeadItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLotteryHeadItemCmd_descriptor_;
  metadata.reflection = QueryLotteryHeadItemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryRateInfo::kTypeFieldNumber;
const int LotteryRateInfo::kRateFieldNumber;
#endif  // !_MSC_VER

LotteryRateInfo::LotteryRateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotteryRateInfo)
}

void LotteryRateInfo::InitAsDefaultInstance() {
}

LotteryRateInfo::LotteryRateInfo(const LotteryRateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotteryRateInfo)
}

void LotteryRateInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryRateInfo::~LotteryRateInfo() {
  // @@protoc_insertion_point(destructor:Cmd.LotteryRateInfo)
  SharedDtor();
}

void LotteryRateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryRateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryRateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryRateInfo_descriptor_;
}

const LotteryRateInfo& LotteryRateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LotteryRateInfo* LotteryRateInfo::default_instance_ = NULL;

LotteryRateInfo* LotteryRateInfo::New() const {
  return new LotteryRateInfo;
}

void LotteryRateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryRateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryRateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotteryRateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotteryRateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotteryRateInfo)
  return false;
#undef DO_
}

void LotteryRateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotteryRateInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotteryRateInfo)
}

::google::protobuf::uint8* LotteryRateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotteryRateInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotteryRateInfo)
  return target;
}

int LotteryRateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryRateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryRateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryRateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryRateInfo::MergeFrom(const LotteryRateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryRateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryRateInfo::CopyFrom(const LotteryRateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryRateInfo::IsInitialized() const {

  return true;
}

void LotteryRateInfo::Swap(LotteryRateInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryRateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryRateInfo_descriptor_;
  metadata.reflection = LotteryRateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryRateQueryCmd::kCmdFieldNumber;
const int LotteryRateQueryCmd::kParamFieldNumber;
const int LotteryRateQueryCmd::kTypeFieldNumber;
const int LotteryRateQueryCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

LotteryRateQueryCmd::LotteryRateQueryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotteryRateQueryCmd)
}

void LotteryRateQueryCmd::InitAsDefaultInstance() {
}

LotteryRateQueryCmd::LotteryRateQueryCmd(const LotteryRateQueryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotteryRateQueryCmd)
}

void LotteryRateQueryCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 52;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryRateQueryCmd::~LotteryRateQueryCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LotteryRateQueryCmd)
  SharedDtor();
}

void LotteryRateQueryCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryRateQueryCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryRateQueryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryRateQueryCmd_descriptor_;
}

const LotteryRateQueryCmd& LotteryRateQueryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

LotteryRateQueryCmd* LotteryRateQueryCmd::default_instance_ = NULL;

LotteryRateQueryCmd* LotteryRateQueryCmd::New() const {
  return new LotteryRateQueryCmd;
}

void LotteryRateQueryCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 6;
    param_ = 52;
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryRateQueryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotteryRateQueryCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RATE_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ELotteryType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELotteryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELotteryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }

      // repeated .Cmd.LotteryRateInfo infos = 4;
      case 4: {
        if (tag == 34) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotteryRateQueryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotteryRateQueryCmd)
  return false;
#undef DO_
}

void LotteryRateQueryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotteryRateQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RATE_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ELotteryType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.LotteryRateInfo infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotteryRateQueryCmd)
}

::google::protobuf::uint8* LotteryRateQueryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotteryRateQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RATE_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ELotteryType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.LotteryRateInfo infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotteryRateQueryCmd)
  return target;
}

int LotteryRateQueryCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RATE_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ELotteryType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.LotteryRateInfo infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryRateQueryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryRateQueryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryRateQueryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryRateQueryCmd::MergeFrom(const LotteryRateQueryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryRateQueryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryRateQueryCmd::CopyFrom(const LotteryRateQueryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryRateQueryCmd::IsInitialized() const {

  return true;
}

void LotteryRateQueryCmd::Swap(LotteryRateQueryCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryRateQueryCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryRateQueryCmd_descriptor_;
  metadata.reflection = LotteryRateQueryCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipComposeItemCmd::kCmdFieldNumber;
const int EquipComposeItemCmd::kParamFieldNumber;
const int EquipComposeItemCmd::kIdFieldNumber;
const int EquipComposeItemCmd::kMaterialequipsFieldNumber;
const int EquipComposeItemCmd::kRetmsgFieldNumber;
#endif  // !_MSC_VER

EquipComposeItemCmd::EquipComposeItemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipComposeItemCmd)
}

void EquipComposeItemCmd::InitAsDefaultInstance() {
}

EquipComposeItemCmd::EquipComposeItemCmd(const EquipComposeItemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipComposeItemCmd)
}

void EquipComposeItemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 6;
  param_ = 53;
  id_ = 0u;
  retmsg_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipComposeItemCmd::~EquipComposeItemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EquipComposeItemCmd)
  SharedDtor();
}

void EquipComposeItemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipComposeItemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipComposeItemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipComposeItemCmd_descriptor_;
}

const EquipComposeItemCmd& EquipComposeItemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneItem_2eproto();
  return *default_instance_;
}

EquipComposeItemCmd* EquipComposeItemCmd::default_instance_ = NULL;

EquipComposeItemCmd* EquipComposeItemCmd::New() const {
  return new EquipComposeItemCmd;
}

void EquipComposeItemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipComposeItemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(id_, retmsg_);
    cmd_ = 6;
    param_ = 53;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  materialequips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipComposeItemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipComposeItemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCOMPOSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ItemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ItemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_materialequips;
        break;
      }

      // repeated string materialequips = 4;
      case 4: {
        if (tag == 34) {
         parse_materialequips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_materialequips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->materialequips(this->materialequips_size() - 1).data(),
            this->materialequips(this->materialequips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "materialequips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_materialequips;
        if (input->ExpectTag(40)) goto parse_retmsg;
        break;
      }

      // optional uint32 retmsg = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_retmsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retmsg_)));
          set_has_retmsg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipComposeItemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipComposeItemCmd)
  return false;
#undef DO_
}

void EquipComposeItemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipComposeItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCOMPOSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // repeated string materialequips = 4;
  for (int i = 0; i < this->materialequips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->materialequips(i).data(), this->materialequips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "materialequips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->materialequips(i), output);
  }

  // optional uint32 retmsg = 5 [default = 0];
  if (has_retmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->retmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipComposeItemCmd)
}

::google::protobuf::uint8* EquipComposeItemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipComposeItemCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCOMPOSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // repeated string materialequips = 4;
  for (int i = 0; i < this->materialequips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->materialequips(i).data(), this->materialequips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "materialequips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->materialequips(i), target);
  }

  // optional uint32 retmsg = 5 [default = 0];
  if (has_retmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->retmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipComposeItemCmd)
  return target;
}

int EquipComposeItemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCOMPOSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 retmsg = 5 [default = 0];
    if (has_retmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retmsg());
    }

  }
  // repeated string materialequips = 4;
  total_size += 1 * this->materialequips_size();
  for (int i = 0; i < this->materialequips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->materialequips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipComposeItemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipComposeItemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipComposeItemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipComposeItemCmd::MergeFrom(const EquipComposeItemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  materialequips_.MergeFrom(from.materialequips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipComposeItemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipComposeItemCmd::CopyFrom(const EquipComposeItemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipComposeItemCmd::IsInitialized() const {

  return true;
}

void EquipComposeItemCmd::Swap(EquipComposeItemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    materialequips_.Swap(&other->materialequips_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipComposeItemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipComposeItemCmd_descriptor_;
  metadata.reflection = EquipComposeItemCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
