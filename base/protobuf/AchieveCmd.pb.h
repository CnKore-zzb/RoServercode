// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AchieveCmd.proto

#ifndef PROTOBUF_AchieveCmd_2eproto__INCLUDED
#define PROTOBUF_AchieveCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AchieveCmd_2eproto();
void protobuf_AssignDesc_AchieveCmd_2eproto();
void protobuf_ShutdownFile_AchieveCmd_2eproto();

class MaxInfo;
class UserResume;
class AchieveQuest;
class AchieveItem;
class AchieveSubData;
class AchieveData;
class QueryUserResumeAchCmd;
class QueryAchieveDataAchCmd;
class NewAchieveNtfAchCmd;
class RewardGetAchCmd;

enum AchieveParam {
  ACHIEVEPARAM_QUERY_USERRESUME = 1,
  ACHIEVEPARAM_QUERY_ACHDATA = 2,
  ACHIEVEPARAM_NEW_ACHNTF = 3,
  ACHIEVEPARAM_REWARD_GET = 4
};
bool AchieveParam_IsValid(int value);
const AchieveParam AchieveParam_MIN = ACHIEVEPARAM_QUERY_USERRESUME;
const AchieveParam AchieveParam_MAX = ACHIEVEPARAM_REWARD_GET;
const int AchieveParam_ARRAYSIZE = AchieveParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* AchieveParam_descriptor();
inline const ::std::string& AchieveParam_Name(AchieveParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    AchieveParam_descriptor(), value);
}
inline bool AchieveParam_Parse(
    const ::std::string& name, AchieveParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AchieveParam>(
    AchieveParam_descriptor(), name, value);
}
enum EAchieveType {
  EACHIEVETYPE_MIN = 0,
  EACHIEVETYPE_USER = 1100000,
  EACHIEVETYPE_SOCIAL = 1200000,
  EACHIEVETYPE_ADVENTURE = 1300000,
  EACHIEVETYPE_BATTLE = 1400000,
  EACHIEVETYPE_DRAMA = 1450000,
  EACHIEVETYPE_ACTIVITY = 1500000,
  EACHIEVETYPE_OTHER = 1600000,
  EACHIEVETYPE_MAX = 1600001
};
bool EAchieveType_IsValid(int value);
const EAchieveType EAchieveType_MIN = EACHIEVETYPE_MIN;
const EAchieveType EAchieveType_MAX = EACHIEVETYPE_MAX;
const int EAchieveType_ARRAYSIZE = EAchieveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAchieveType_descriptor();
inline const ::std::string& EAchieveType_Name(EAchieveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAchieveType_descriptor(), value);
}
inline bool EAchieveType_Parse(
    const ::std::string& name, EAchieveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAchieveType>(
    EAchieveType_descriptor(), name, value);
}
enum EAchieveSubType {
  EACHIEVESUBTYPE_MIN = 0,
  EACHIEVESUBTYPE_LEVELUP = 1101000,
  EACHIEVESUBTYPE_ATTR = 1102000,
  EACHIEVESUBTYPE_PROFESSION = 1103000,
  EACHIEVESUBTYPE_FRIEND = 1201000,
  EACHIEVESUBTYPE_SOCIAL = 1202000,
  EACHIEVESUBTYPE_GUILD = 1203000,
  EACHIEVESUBTYPE_PET = 1204000,
  EACHIEVESUBTYPE_FOOD = 1205000,
  EACHIEVESUBTYPE_TUTOR = 1206000,
  EACHIEVESUBTYPE_WEDDING = 1207000,
  EACHIEVESUBTYPE_MAP = 1301000,
  EACHIEVESUBTYPE_SCENERY = 1302000,
  EACHIEVESUBTYPE_MONSTER_PHOTO = 1303000,
  EACHIEVESUBTYPE_NPC = 1304000,
  EACHIEVESUBTYPE_PORTRAIT = 1305000,
  EACHIEVESUBTYPE_TITLE = 1306000,
  EACHIEVESUBTYPE_MONSTER_KILL = 1401000,
  EACHIEVESUBTYPE_HELP = 1402000,
  EACHIEVESUBTYPE_CAT = 1403000,
  EACHIEVESUBTYPE_DEAD = 1404000,
  EACHIEVESUBTYPE_PVP = 1405000,
  EACHIEVESUBTYPE_CCRAST = 1451000,
  EACHIEVESUBTYPE_QUEST = 1452000,
  EACHIEVESUBTYPE_TOY = 1453000,
  EACHIEVESUBTYPE_TOYFACTORY = 1454000,
  EACHIEVESUBTYPE_TIANJIN = 1454100,
  EACHIEVESUBTYPE_YUNO = 1454200,
  EACHIEVESUBTYPE_DEADCITY = 1454300,
  EACHIEVESUBTYPE_DRAMA_OTHER = 1455000,
  EACHIEVESUBTYPE_BCAT = 1501000,
  EACHIEVESUBTYPE_LINK = 1502000,
  EACHIEVESUBTYPE_EQUIP = 1601000,
  EACHIEVESUBTYPE_DAILY = 1602000,
  EACHIEVESUBTYPE_CONSUME = 1603000,
  EACHIEVESUBTYPE_FUNC = 1604000,
  EACHIEVESUBTYPE_MAX = 4444001
};
bool EAchieveSubType_IsValid(int value);
const EAchieveSubType EAchieveSubType_MIN = EACHIEVESUBTYPE_MIN;
const EAchieveSubType EAchieveSubType_MAX = EACHIEVESUBTYPE_MAX;
const int EAchieveSubType_ARRAYSIZE = EAchieveSubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAchieveSubType_descriptor();
inline const ::std::string& EAchieveSubType_Name(EAchieveSubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAchieveSubType_descriptor(), value);
}
inline bool EAchieveSubType_Parse(
    const ::std::string& name, EAchieveSubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAchieveSubType>(
    EAchieveSubType_descriptor(), name, value);
}
// ===================================================================

class MaxInfo : public ::google::protobuf::Message {
 public:
  MaxInfo();
  virtual ~MaxInfo();

  MaxInfo(const MaxInfo& from);

  inline MaxInfo& operator=(const MaxInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxInfo& default_instance();

  void Swap(MaxInfo* other);

  // implements Message ----------------------------------------------

  MaxInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxInfo& from);
  void MergeFrom(const MaxInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 charid = 2 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.MaxInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static MaxInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserResume : public ::google::protobuf::Message {
 public:
  UserResume();
  virtual ~UserResume();

  UserResume(const UserResume& from);

  inline UserResume& operator=(const UserResume& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserResume& default_instance();

  void Swap(UserResume* other);

  // implements Message ----------------------------------------------

  UserResume* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserResume& from);
  void MergeFrom(const UserResume& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 createtime = 1 [default = 0];
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 1;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional uint32 logintime = 2 [default = 0];
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLogintimeFieldNumber = 2;
  inline ::google::protobuf::uint32 logintime() const;
  inline void set_logintime(::google::protobuf::uint32 value);

  // optional uint32 bepro_1_time = 3 [default = 0];
  inline bool has_bepro_1_time() const;
  inline void clear_bepro_1_time();
  static const int kBepro1TimeFieldNumber = 3;
  inline ::google::protobuf::uint32 bepro_1_time() const;
  inline void set_bepro_1_time(::google::protobuf::uint32 value);

  // optional uint32 bepro_2_time = 4 [default = 0];
  inline bool has_bepro_2_time() const;
  inline void clear_bepro_2_time();
  static const int kBepro2TimeFieldNumber = 4;
  inline ::google::protobuf::uint32 bepro_2_time() const;
  inline void set_bepro_2_time(::google::protobuf::uint32 value);

  // optional uint32 bepro_3_time = 5 [default = 0];
  inline bool has_bepro_3_time() const;
  inline void clear_bepro_3_time();
  static const int kBepro3TimeFieldNumber = 5;
  inline ::google::protobuf::uint32 bepro_3_time() const;
  inline void set_bepro_3_time(::google::protobuf::uint32 value);

  // optional uint64 walk_distance = 6 [default = 0];
  inline bool has_walk_distance() const;
  inline void clear_walk_distance();
  static const int kWalkDistanceFieldNumber = 6;
  inline ::google::protobuf::uint64 walk_distance() const;
  inline void set_walk_distance(::google::protobuf::uint64 value);

  // optional string max_team = 7;
  inline bool has_max_team() const;
  inline void clear_max_team();
  static const int kMaxTeamFieldNumber = 7;
  inline const ::std::string& max_team() const;
  inline void set_max_team(const ::std::string& value);
  inline void set_max_team(const char* value);
  inline void set_max_team(const char* value, size_t size);
  inline ::std::string* mutable_max_team();
  inline ::std::string* release_max_team();
  inline void set_allocated_max_team(::std::string* max_team);

  // optional string max_hand = 8;
  inline bool has_max_hand() const;
  inline void clear_max_hand();
  static const int kMaxHandFieldNumber = 8;
  inline const ::std::string& max_hand() const;
  inline void set_max_hand(const ::std::string& value);
  inline void set_max_hand(const char* value);
  inline void set_max_hand(const char* value, size_t size);
  inline ::std::string* mutable_max_hand();
  inline ::std::string* release_max_hand();
  inline void set_allocated_max_hand(::std::string* max_hand);

  // optional string max_wheel = 9;
  inline bool has_max_wheel() const;
  inline void clear_max_wheel();
  static const int kMaxWheelFieldNumber = 9;
  inline const ::std::string& max_wheel() const;
  inline void set_max_wheel(const ::std::string& value);
  inline void set_max_wheel(const char* value);
  inline void set_max_wheel(const char* value, size_t size);
  inline ::std::string* mutable_max_wheel();
  inline ::std::string* release_max_wheel();
  inline void set_allocated_max_wheel(::std::string* max_wheel);

  // optional string max_chat = 10;
  inline bool has_max_chat() const;
  inline void clear_max_chat();
  static const int kMaxChatFieldNumber = 10;
  inline const ::std::string& max_chat() const;
  inline void set_max_chat(const ::std::string& value);
  inline void set_max_chat(const char* value);
  inline void set_max_chat(const char* value, size_t size);
  inline ::std::string* mutable_max_chat();
  inline ::std::string* release_max_chat();
  inline void set_allocated_max_chat(::std::string* max_chat);

  // repeated string max_teams = 11;
  inline int max_teams_size() const;
  inline void clear_max_teams();
  static const int kMaxTeamsFieldNumber = 11;
  inline const ::std::string& max_teams(int index) const;
  inline ::std::string* mutable_max_teams(int index);
  inline void set_max_teams(int index, const ::std::string& value);
  inline void set_max_teams(int index, const char* value);
  inline void set_max_teams(int index, const char* value, size_t size);
  inline ::std::string* add_max_teams();
  inline void add_max_teams(const ::std::string& value);
  inline void add_max_teams(const char* value);
  inline void add_max_teams(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& max_teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_max_teams();

  // repeated string max_hands = 12;
  inline int max_hands_size() const;
  inline void clear_max_hands();
  static const int kMaxHandsFieldNumber = 12;
  inline const ::std::string& max_hands(int index) const;
  inline ::std::string* mutable_max_hands(int index);
  inline void set_max_hands(int index, const ::std::string& value);
  inline void set_max_hands(int index, const char* value);
  inline void set_max_hands(int index, const char* value, size_t size);
  inline ::std::string* add_max_hands();
  inline void add_max_hands(const ::std::string& value);
  inline void add_max_hands(const char* value);
  inline void add_max_hands(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& max_hands() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_max_hands();

  // repeated string max_wheels = 13;
  inline int max_wheels_size() const;
  inline void clear_max_wheels();
  static const int kMaxWheelsFieldNumber = 13;
  inline const ::std::string& max_wheels(int index) const;
  inline ::std::string* mutable_max_wheels(int index);
  inline void set_max_wheels(int index, const ::std::string& value);
  inline void set_max_wheels(int index, const char* value);
  inline void set_max_wheels(int index, const char* value, size_t size);
  inline ::std::string* add_max_wheels();
  inline void add_max_wheels(const ::std::string& value);
  inline void add_max_wheels(const char* value);
  inline void add_max_wheels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& max_wheels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_max_wheels();

  // repeated string max_chats = 14;
  inline int max_chats_size() const;
  inline void clear_max_chats();
  static const int kMaxChatsFieldNumber = 14;
  inline const ::std::string& max_chats(int index) const;
  inline ::std::string* mutable_max_chats(int index);
  inline void set_max_chats(int index, const ::std::string& value);
  inline void set_max_chats(int index, const char* value);
  inline void set_max_chats(int index, const char* value, size_t size);
  inline ::std::string* add_max_chats();
  inline void add_max_chats(const ::std::string& value);
  inline void add_max_chats(const char* value);
  inline void add_max_chats(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& max_chats() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_max_chats();

  // repeated string max_music = 15;
  inline int max_music_size() const;
  inline void clear_max_music();
  static const int kMaxMusicFieldNumber = 15;
  inline const ::std::string& max_music(int index) const;
  inline ::std::string* mutable_max_music(int index);
  inline void set_max_music(int index, const ::std::string& value);
  inline void set_max_music(int index, const char* value);
  inline void set_max_music(int index, const char* value, size_t size);
  inline ::std::string* add_max_music();
  inline void add_max_music(const ::std::string& value);
  inline void add_max_music(const char* value);
  inline void add_max_music(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& max_music() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_max_music();

  // repeated string max_save = 16;
  inline int max_save_size() const;
  inline void clear_max_save();
  static const int kMaxSaveFieldNumber = 16;
  inline const ::std::string& max_save(int index) const;
  inline ::std::string* mutable_max_save(int index);
  inline void set_max_save(int index, const ::std::string& value);
  inline void set_max_save(int index, const char* value);
  inline void set_max_save(int index, const char* value, size_t size);
  inline ::std::string* add_max_save();
  inline void add_max_save(const ::std::string& value);
  inline void add_max_save(const char* value);
  inline void add_max_save(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& max_save() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_max_save();

  // repeated string max_besave = 17;
  inline int max_besave_size() const;
  inline void clear_max_besave();
  static const int kMaxBesaveFieldNumber = 17;
  inline const ::std::string& max_besave(int index) const;
  inline ::std::string* mutable_max_besave(int index);
  inline void set_max_besave(int index, const ::std::string& value);
  inline void set_max_besave(int index, const char* value);
  inline void set_max_besave(int index, const char* value, size_t size);
  inline ::std::string* add_max_besave();
  inline void add_max_besave(const ::std::string& value);
  inline void add_max_besave(const char* value);
  inline void add_max_besave(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& max_besave() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_max_besave();

  // @@protoc_insertion_point(class_scope:Cmd.UserResume)
 private:
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_bepro_1_time();
  inline void clear_has_bepro_1_time();
  inline void set_has_bepro_2_time();
  inline void clear_has_bepro_2_time();
  inline void set_has_bepro_3_time();
  inline void clear_has_bepro_3_time();
  inline void set_has_walk_distance();
  inline void clear_has_walk_distance();
  inline void set_has_max_team();
  inline void clear_has_max_team();
  inline void set_has_max_hand();
  inline void clear_has_max_hand();
  inline void set_has_max_wheel();
  inline void clear_has_max_wheel();
  inline void set_has_max_chat();
  inline void clear_has_max_chat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 logintime_;
  ::google::protobuf::uint32 bepro_1_time_;
  ::google::protobuf::uint32 bepro_2_time_;
  ::google::protobuf::uint64 walk_distance_;
  ::std::string* max_team_;
  ::std::string* max_hand_;
  ::std::string* max_wheel_;
  ::std::string* max_chat_;
  ::google::protobuf::RepeatedPtrField< ::std::string> max_teams_;
  ::google::protobuf::RepeatedPtrField< ::std::string> max_hands_;
  ::google::protobuf::RepeatedPtrField< ::std::string> max_wheels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> max_chats_;
  ::google::protobuf::RepeatedPtrField< ::std::string> max_music_;
  ::google::protobuf::RepeatedPtrField< ::std::string> max_save_;
  ::google::protobuf::RepeatedPtrField< ::std::string> max_besave_;
  ::google::protobuf::uint32 bepro_3_time_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static UserResume* default_instance_;
};
// -------------------------------------------------------------------

class AchieveQuest : public ::google::protobuf::Message {
 public:
  AchieveQuest();
  virtual ~AchieveQuest();

  AchieveQuest(const AchieveQuest& from);

  inline AchieveQuest& operator=(const AchieveQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveQuest& default_instance();

  void Swap(AchieveQuest* other);

  // implements Message ----------------------------------------------

  AchieveQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveQuest& from);
  void MergeFrom(const AchieveQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Cmd.AchieveQuest pre = 3;
  inline int pre_size() const;
  inline void clear_pre();
  static const int kPreFieldNumber = 3;
  inline const ::Cmd::AchieveQuest& pre(int index) const;
  inline ::Cmd::AchieveQuest* mutable_pre(int index);
  inline ::Cmd::AchieveQuest* add_pre();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >&
      pre() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >*
      mutable_pre();

  // @@protoc_insertion_point(class_scope:Cmd.AchieveQuest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest > pre_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static AchieveQuest* default_instance_;
};
// -------------------------------------------------------------------

class AchieveItem : public ::google::protobuf::Message {
 public:
  AchieveItem();
  virtual ~AchieveItem();

  AchieveItem(const AchieveItem& from);

  inline AchieveItem& operator=(const AchieveItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveItem& default_instance();

  void Swap(AchieveItem* other);

  // implements Message ----------------------------------------------

  AchieveItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveItem& from);
  void MergeFrom(const AchieveItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 process = 2 [default = 0];
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 2;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // optional uint32 finishtime = 3 [default = 0];
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // repeated uint64 params = 4;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 4;
  inline ::google::protobuf::uint64 params(int index) const;
  inline void set_params(int index, ::google::protobuf::uint64 value);
  inline void add_params(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_params();

  // repeated .Cmd.AchieveQuest quests = 6;
  inline int quests_size() const;
  inline void clear_quests();
  static const int kQuestsFieldNumber = 6;
  inline const ::Cmd::AchieveQuest& quests(int index) const;
  inline ::Cmd::AchieveQuest* mutable_quests(int index);
  inline ::Cmd::AchieveQuest* add_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >&
      quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >*
      mutable_quests();

  // optional bool reward_get = 5 [default = false];
  inline bool has_reward_get() const;
  inline void clear_reward_get();
  static const int kRewardGetFieldNumber = 5;
  inline bool reward_get() const;
  inline void set_reward_get(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.AchieveItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();
  inline void set_has_reward_get();
  inline void clear_has_reward_get();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 process_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > params_;
  ::google::protobuf::uint32 finishtime_;
  bool reward_get_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest > quests_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static AchieveItem* default_instance_;
};
// -------------------------------------------------------------------

class AchieveSubData : public ::google::protobuf::Message {
 public:
  AchieveSubData();
  virtual ~AchieveSubData();

  AchieveSubData(const AchieveSubData& from);

  inline AchieveSubData& operator=(const AchieveSubData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveSubData& default_instance();

  void Swap(AchieveSubData* other);

  // implements Message ----------------------------------------------

  AchieveSubData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveSubData& from);
  void MergeFrom(const AchieveSubData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EAchieveSubType type = 1 [default = EACHIEVESUBTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EAchieveSubType type() const;
  inline void set_type(::Cmd::EAchieveSubType value);

  // repeated .Cmd.AchieveItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Cmd::AchieveItem& items(int index) const;
  inline ::Cmd::AchieveItem* mutable_items(int index);
  inline ::Cmd::AchieveItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.AchieveSubData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem > items_;
  int type_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static AchieveSubData* default_instance_;
};
// -------------------------------------------------------------------

class AchieveData : public ::google::protobuf::Message {
 public:
  AchieveData();
  virtual ~AchieveData();

  AchieveData(const AchieveData& from);

  inline AchieveData& operator=(const AchieveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveData& default_instance();

  void Swap(AchieveData* other);

  // implements Message ----------------------------------------------

  AchieveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveData& from);
  void MergeFrom(const AchieveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EAchieveType type = 1 [default = EACHIEVETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EAchieveType type() const;
  inline void set_type(::Cmd::EAchieveType value);

  // repeated .Cmd.AchieveSubData datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::AchieveSubData& datas(int index) const;
  inline ::Cmd::AchieveSubData* mutable_datas(int index);
  inline ::Cmd::AchieveSubData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveSubData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveSubData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.AchieveData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveSubData > datas_;
  int type_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static AchieveData* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserResumeAchCmd : public ::google::protobuf::Message {
 public:
  QueryUserResumeAchCmd();
  virtual ~QueryUserResumeAchCmd();

  QueryUserResumeAchCmd(const QueryUserResumeAchCmd& from);

  inline QueryUserResumeAchCmd& operator=(const QueryUserResumeAchCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserResumeAchCmd& default_instance();

  void Swap(QueryUserResumeAchCmd* other);

  // implements Message ----------------------------------------------

  QueryUserResumeAchCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserResumeAchCmd& from);
  void MergeFrom(const QueryUserResumeAchCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_USERRESUME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AchieveParam param() const;
  inline void set_param(::Cmd::AchieveParam value);

  // optional .Cmd.UserResume data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::UserResume& data() const;
  inline ::Cmd::UserResume* mutable_data();
  inline ::Cmd::UserResume* release_data();
  inline void set_allocated_data(::Cmd::UserResume* data);

  // @@protoc_insertion_point(class_scope:Cmd.QueryUserResumeAchCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::UserResume* data_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryUserResumeAchCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryAchieveDataAchCmd : public ::google::protobuf::Message {
 public:
  QueryAchieveDataAchCmd();
  virtual ~QueryAchieveDataAchCmd();

  QueryAchieveDataAchCmd(const QueryAchieveDataAchCmd& from);

  inline QueryAchieveDataAchCmd& operator=(const QueryAchieveDataAchCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAchieveDataAchCmd& default_instance();

  void Swap(QueryAchieveDataAchCmd* other);

  // implements Message ----------------------------------------------

  QueryAchieveDataAchCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAchieveDataAchCmd& from);
  void MergeFrom(const QueryAchieveDataAchCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_ACHDATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AchieveParam param() const;
  inline void set_param(::Cmd::AchieveParam value);

  // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EAchieveType type() const;
  inline void set_type(::Cmd::EAchieveType value);

  // repeated .Cmd.AchieveItem items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::Cmd::AchieveItem& items(int index) const;
  inline ::Cmd::AchieveItem* mutable_items(int index);
  inline ::Cmd::AchieveItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.QueryAchieveDataAchCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem > items_;
  int type_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryAchieveDataAchCmd* default_instance_;
};
// -------------------------------------------------------------------

class NewAchieveNtfAchCmd : public ::google::protobuf::Message {
 public:
  NewAchieveNtfAchCmd();
  virtual ~NewAchieveNtfAchCmd();

  NewAchieveNtfAchCmd(const NewAchieveNtfAchCmd& from);

  inline NewAchieveNtfAchCmd& operator=(const NewAchieveNtfAchCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewAchieveNtfAchCmd& default_instance();

  void Swap(NewAchieveNtfAchCmd* other);

  // implements Message ----------------------------------------------

  NewAchieveNtfAchCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewAchieveNtfAchCmd& from);
  void MergeFrom(const NewAchieveNtfAchCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_NEW_ACHNTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AchieveParam param() const;
  inline void set_param(::Cmd::AchieveParam value);

  // optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EAchieveType type() const;
  inline void set_type(::Cmd::EAchieveType value);

  // repeated .Cmd.AchieveItem items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::Cmd::AchieveItem& items(int index) const;
  inline ::Cmd::AchieveItem* mutable_items(int index);
  inline ::Cmd::AchieveItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.NewAchieveNtfAchCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem > items_;
  int type_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static NewAchieveNtfAchCmd* default_instance_;
};
// -------------------------------------------------------------------

class RewardGetAchCmd : public ::google::protobuf::Message {
 public:
  RewardGetAchCmd();
  virtual ~RewardGetAchCmd();

  RewardGetAchCmd(const RewardGetAchCmd& from);

  inline RewardGetAchCmd& operator=(const RewardGetAchCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardGetAchCmd& default_instance();

  void Swap(RewardGetAchCmd* other);

  // implements Message ----------------------------------------------

  RewardGetAchCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardGetAchCmd& from);
  void MergeFrom(const RewardGetAchCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_REWARD_GET];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AchieveParam param() const;
  inline void set_param(::Cmd::AchieveParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RewardGetAchCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_AchieveCmd_2eproto();
  friend void protobuf_AssignDesc_AchieveCmd_2eproto();
  friend void protobuf_ShutdownFile_AchieveCmd_2eproto();

  void InitAsDefaultInstance();
  static RewardGetAchCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// MaxInfo

// optional uint32 type = 1 [default = 0];
inline bool MaxInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 MaxInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.MaxInfo.type)
  return type_;
}
inline void MaxInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MaxInfo.type)
}

// optional uint64 charid = 2 [default = 0];
inline bool MaxInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaxInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaxInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaxInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MaxInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MaxInfo.charid)
  return charid_;
}
inline void MaxInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MaxInfo.charid)
}

// optional string name = 3;
inline bool MaxInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaxInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaxInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaxInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MaxInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.MaxInfo.name)
  return *name_;
}
inline void MaxInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MaxInfo.name)
}
inline void MaxInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MaxInfo.name)
}
inline void MaxInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MaxInfo.name)
}
inline ::std::string* MaxInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MaxInfo.name)
  return name_;
}
inline ::std::string* MaxInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MaxInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MaxInfo.name)
}

// -------------------------------------------------------------------

// UserResume

// optional uint32 createtime = 1 [default = 0];
inline bool UserResume::has_createtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserResume::set_has_createtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserResume::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserResume::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 UserResume::createtime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.createtime)
  return createtime_;
}
inline void UserResume::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserResume.createtime)
}

// optional uint32 logintime = 2 [default = 0];
inline bool UserResume::has_logintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserResume::set_has_logintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserResume::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserResume::clear_logintime() {
  logintime_ = 0u;
  clear_has_logintime();
}
inline ::google::protobuf::uint32 UserResume::logintime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.logintime)
  return logintime_;
}
inline void UserResume::set_logintime(::google::protobuf::uint32 value) {
  set_has_logintime();
  logintime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserResume.logintime)
}

// optional uint32 bepro_1_time = 3 [default = 0];
inline bool UserResume::has_bepro_1_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserResume::set_has_bepro_1_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserResume::clear_has_bepro_1_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserResume::clear_bepro_1_time() {
  bepro_1_time_ = 0u;
  clear_has_bepro_1_time();
}
inline ::google::protobuf::uint32 UserResume::bepro_1_time() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.bepro_1_time)
  return bepro_1_time_;
}
inline void UserResume::set_bepro_1_time(::google::protobuf::uint32 value) {
  set_has_bepro_1_time();
  bepro_1_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserResume.bepro_1_time)
}

// optional uint32 bepro_2_time = 4 [default = 0];
inline bool UserResume::has_bepro_2_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserResume::set_has_bepro_2_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserResume::clear_has_bepro_2_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserResume::clear_bepro_2_time() {
  bepro_2_time_ = 0u;
  clear_has_bepro_2_time();
}
inline ::google::protobuf::uint32 UserResume::bepro_2_time() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.bepro_2_time)
  return bepro_2_time_;
}
inline void UserResume::set_bepro_2_time(::google::protobuf::uint32 value) {
  set_has_bepro_2_time();
  bepro_2_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserResume.bepro_2_time)
}

// optional uint32 bepro_3_time = 5 [default = 0];
inline bool UserResume::has_bepro_3_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserResume::set_has_bepro_3_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserResume::clear_has_bepro_3_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserResume::clear_bepro_3_time() {
  bepro_3_time_ = 0u;
  clear_has_bepro_3_time();
}
inline ::google::protobuf::uint32 UserResume::bepro_3_time() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.bepro_3_time)
  return bepro_3_time_;
}
inline void UserResume::set_bepro_3_time(::google::protobuf::uint32 value) {
  set_has_bepro_3_time();
  bepro_3_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserResume.bepro_3_time)
}

// optional uint64 walk_distance = 6 [default = 0];
inline bool UserResume::has_walk_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserResume::set_has_walk_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserResume::clear_has_walk_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserResume::clear_walk_distance() {
  walk_distance_ = GOOGLE_ULONGLONG(0);
  clear_has_walk_distance();
}
inline ::google::protobuf::uint64 UserResume::walk_distance() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.walk_distance)
  return walk_distance_;
}
inline void UserResume::set_walk_distance(::google::protobuf::uint64 value) {
  set_has_walk_distance();
  walk_distance_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserResume.walk_distance)
}

// optional string max_team = 7;
inline bool UserResume::has_max_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserResume::set_has_max_team() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserResume::clear_has_max_team() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserResume::clear_max_team() {
  if (max_team_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_team_->clear();
  }
  clear_has_max_team();
}
inline const ::std::string& UserResume::max_team() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_team)
  return *max_team_;
}
inline void UserResume::set_max_team(const ::std::string& value) {
  set_has_max_team();
  if (max_team_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_team_ = new ::std::string;
  }
  max_team_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_team)
}
inline void UserResume::set_max_team(const char* value) {
  set_has_max_team();
  if (max_team_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_team_ = new ::std::string;
  }
  max_team_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_team)
}
inline void UserResume::set_max_team(const char* value, size_t size) {
  set_has_max_team();
  if (max_team_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_team_ = new ::std::string;
  }
  max_team_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_team)
}
inline ::std::string* UserResume::mutable_max_team() {
  set_has_max_team();
  if (max_team_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_team_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_team)
  return max_team_;
}
inline ::std::string* UserResume::release_max_team() {
  clear_has_max_team();
  if (max_team_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = max_team_;
    max_team_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserResume::set_allocated_max_team(::std::string* max_team) {
  if (max_team_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_team_;
  }
  if (max_team) {
    set_has_max_team();
    max_team_ = max_team;
  } else {
    clear_has_max_team();
    max_team_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserResume.max_team)
}

// optional string max_hand = 8;
inline bool UserResume::has_max_hand() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserResume::set_has_max_hand() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserResume::clear_has_max_hand() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserResume::clear_max_hand() {
  if (max_hand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_hand_->clear();
  }
  clear_has_max_hand();
}
inline const ::std::string& UserResume::max_hand() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_hand)
  return *max_hand_;
}
inline void UserResume::set_max_hand(const ::std::string& value) {
  set_has_max_hand();
  if (max_hand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_hand_ = new ::std::string;
  }
  max_hand_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_hand)
}
inline void UserResume::set_max_hand(const char* value) {
  set_has_max_hand();
  if (max_hand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_hand_ = new ::std::string;
  }
  max_hand_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_hand)
}
inline void UserResume::set_max_hand(const char* value, size_t size) {
  set_has_max_hand();
  if (max_hand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_hand_ = new ::std::string;
  }
  max_hand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_hand)
}
inline ::std::string* UserResume::mutable_max_hand() {
  set_has_max_hand();
  if (max_hand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_hand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_hand)
  return max_hand_;
}
inline ::std::string* UserResume::release_max_hand() {
  clear_has_max_hand();
  if (max_hand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = max_hand_;
    max_hand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserResume::set_allocated_max_hand(::std::string* max_hand) {
  if (max_hand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_hand_;
  }
  if (max_hand) {
    set_has_max_hand();
    max_hand_ = max_hand;
  } else {
    clear_has_max_hand();
    max_hand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserResume.max_hand)
}

// optional string max_wheel = 9;
inline bool UserResume::has_max_wheel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserResume::set_has_max_wheel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserResume::clear_has_max_wheel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserResume::clear_max_wheel() {
  if (max_wheel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_wheel_->clear();
  }
  clear_has_max_wheel();
}
inline const ::std::string& UserResume::max_wheel() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_wheel)
  return *max_wheel_;
}
inline void UserResume::set_max_wheel(const ::std::string& value) {
  set_has_max_wheel();
  if (max_wheel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_wheel_ = new ::std::string;
  }
  max_wheel_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_wheel)
}
inline void UserResume::set_max_wheel(const char* value) {
  set_has_max_wheel();
  if (max_wheel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_wheel_ = new ::std::string;
  }
  max_wheel_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_wheel)
}
inline void UserResume::set_max_wheel(const char* value, size_t size) {
  set_has_max_wheel();
  if (max_wheel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_wheel_ = new ::std::string;
  }
  max_wheel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_wheel)
}
inline ::std::string* UserResume::mutable_max_wheel() {
  set_has_max_wheel();
  if (max_wheel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_wheel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_wheel)
  return max_wheel_;
}
inline ::std::string* UserResume::release_max_wheel() {
  clear_has_max_wheel();
  if (max_wheel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = max_wheel_;
    max_wheel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserResume::set_allocated_max_wheel(::std::string* max_wheel) {
  if (max_wheel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_wheel_;
  }
  if (max_wheel) {
    set_has_max_wheel();
    max_wheel_ = max_wheel;
  } else {
    clear_has_max_wheel();
    max_wheel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserResume.max_wheel)
}

// optional string max_chat = 10;
inline bool UserResume::has_max_chat() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserResume::set_has_max_chat() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserResume::clear_has_max_chat() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserResume::clear_max_chat() {
  if (max_chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_chat_->clear();
  }
  clear_has_max_chat();
}
inline const ::std::string& UserResume::max_chat() const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_chat)
  return *max_chat_;
}
inline void UserResume::set_max_chat(const ::std::string& value) {
  set_has_max_chat();
  if (max_chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_chat_ = new ::std::string;
  }
  max_chat_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_chat)
}
inline void UserResume::set_max_chat(const char* value) {
  set_has_max_chat();
  if (max_chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_chat_ = new ::std::string;
  }
  max_chat_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_chat)
}
inline void UserResume::set_max_chat(const char* value, size_t size) {
  set_has_max_chat();
  if (max_chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_chat_ = new ::std::string;
  }
  max_chat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_chat)
}
inline ::std::string* UserResume::mutable_max_chat() {
  set_has_max_chat();
  if (max_chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    max_chat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_chat)
  return max_chat_;
}
inline ::std::string* UserResume::release_max_chat() {
  clear_has_max_chat();
  if (max_chat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = max_chat_;
    max_chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserResume::set_allocated_max_chat(::std::string* max_chat) {
  if (max_chat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_chat_;
  }
  if (max_chat) {
    set_has_max_chat();
    max_chat_ = max_chat;
  } else {
    clear_has_max_chat();
    max_chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserResume.max_chat)
}

// repeated string max_teams = 11;
inline int UserResume::max_teams_size() const {
  return max_teams_.size();
}
inline void UserResume::clear_max_teams() {
  max_teams_.Clear();
}
inline const ::std::string& UserResume::max_teams(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_teams)
  return max_teams_.Get(index);
}
inline ::std::string* UserResume::mutable_max_teams(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_teams)
  return max_teams_.Mutable(index);
}
inline void UserResume::set_max_teams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_teams)
  max_teams_.Mutable(index)->assign(value);
}
inline void UserResume::set_max_teams(int index, const char* value) {
  max_teams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_teams)
}
inline void UserResume::set_max_teams(int index, const char* value, size_t size) {
  max_teams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_teams)
}
inline ::std::string* UserResume::add_max_teams() {
  return max_teams_.Add();
}
inline void UserResume::add_max_teams(const ::std::string& value) {
  max_teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.UserResume.max_teams)
}
inline void UserResume::add_max_teams(const char* value) {
  max_teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.UserResume.max_teams)
}
inline void UserResume::add_max_teams(const char* value, size_t size) {
  max_teams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.UserResume.max_teams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserResume::max_teams() const {
  // @@protoc_insertion_point(field_list:Cmd.UserResume.max_teams)
  return max_teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserResume::mutable_max_teams() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserResume.max_teams)
  return &max_teams_;
}

// repeated string max_hands = 12;
inline int UserResume::max_hands_size() const {
  return max_hands_.size();
}
inline void UserResume::clear_max_hands() {
  max_hands_.Clear();
}
inline const ::std::string& UserResume::max_hands(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_hands)
  return max_hands_.Get(index);
}
inline ::std::string* UserResume::mutable_max_hands(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_hands)
  return max_hands_.Mutable(index);
}
inline void UserResume::set_max_hands(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_hands)
  max_hands_.Mutable(index)->assign(value);
}
inline void UserResume::set_max_hands(int index, const char* value) {
  max_hands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_hands)
}
inline void UserResume::set_max_hands(int index, const char* value, size_t size) {
  max_hands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_hands)
}
inline ::std::string* UserResume::add_max_hands() {
  return max_hands_.Add();
}
inline void UserResume::add_max_hands(const ::std::string& value) {
  max_hands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.UserResume.max_hands)
}
inline void UserResume::add_max_hands(const char* value) {
  max_hands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.UserResume.max_hands)
}
inline void UserResume::add_max_hands(const char* value, size_t size) {
  max_hands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.UserResume.max_hands)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserResume::max_hands() const {
  // @@protoc_insertion_point(field_list:Cmd.UserResume.max_hands)
  return max_hands_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserResume::mutable_max_hands() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserResume.max_hands)
  return &max_hands_;
}

// repeated string max_wheels = 13;
inline int UserResume::max_wheels_size() const {
  return max_wheels_.size();
}
inline void UserResume::clear_max_wheels() {
  max_wheels_.Clear();
}
inline const ::std::string& UserResume::max_wheels(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_wheels)
  return max_wheels_.Get(index);
}
inline ::std::string* UserResume::mutable_max_wheels(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_wheels)
  return max_wheels_.Mutable(index);
}
inline void UserResume::set_max_wheels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_wheels)
  max_wheels_.Mutable(index)->assign(value);
}
inline void UserResume::set_max_wheels(int index, const char* value) {
  max_wheels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_wheels)
}
inline void UserResume::set_max_wheels(int index, const char* value, size_t size) {
  max_wheels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_wheels)
}
inline ::std::string* UserResume::add_max_wheels() {
  return max_wheels_.Add();
}
inline void UserResume::add_max_wheels(const ::std::string& value) {
  max_wheels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.UserResume.max_wheels)
}
inline void UserResume::add_max_wheels(const char* value) {
  max_wheels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.UserResume.max_wheels)
}
inline void UserResume::add_max_wheels(const char* value, size_t size) {
  max_wheels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.UserResume.max_wheels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserResume::max_wheels() const {
  // @@protoc_insertion_point(field_list:Cmd.UserResume.max_wheels)
  return max_wheels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserResume::mutable_max_wheels() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserResume.max_wheels)
  return &max_wheels_;
}

// repeated string max_chats = 14;
inline int UserResume::max_chats_size() const {
  return max_chats_.size();
}
inline void UserResume::clear_max_chats() {
  max_chats_.Clear();
}
inline const ::std::string& UserResume::max_chats(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_chats)
  return max_chats_.Get(index);
}
inline ::std::string* UserResume::mutable_max_chats(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_chats)
  return max_chats_.Mutable(index);
}
inline void UserResume::set_max_chats(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_chats)
  max_chats_.Mutable(index)->assign(value);
}
inline void UserResume::set_max_chats(int index, const char* value) {
  max_chats_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_chats)
}
inline void UserResume::set_max_chats(int index, const char* value, size_t size) {
  max_chats_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_chats)
}
inline ::std::string* UserResume::add_max_chats() {
  return max_chats_.Add();
}
inline void UserResume::add_max_chats(const ::std::string& value) {
  max_chats_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.UserResume.max_chats)
}
inline void UserResume::add_max_chats(const char* value) {
  max_chats_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.UserResume.max_chats)
}
inline void UserResume::add_max_chats(const char* value, size_t size) {
  max_chats_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.UserResume.max_chats)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserResume::max_chats() const {
  // @@protoc_insertion_point(field_list:Cmd.UserResume.max_chats)
  return max_chats_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserResume::mutable_max_chats() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserResume.max_chats)
  return &max_chats_;
}

// repeated string max_music = 15;
inline int UserResume::max_music_size() const {
  return max_music_.size();
}
inline void UserResume::clear_max_music() {
  max_music_.Clear();
}
inline const ::std::string& UserResume::max_music(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_music)
  return max_music_.Get(index);
}
inline ::std::string* UserResume::mutable_max_music(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_music)
  return max_music_.Mutable(index);
}
inline void UserResume::set_max_music(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_music)
  max_music_.Mutable(index)->assign(value);
}
inline void UserResume::set_max_music(int index, const char* value) {
  max_music_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_music)
}
inline void UserResume::set_max_music(int index, const char* value, size_t size) {
  max_music_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_music)
}
inline ::std::string* UserResume::add_max_music() {
  return max_music_.Add();
}
inline void UserResume::add_max_music(const ::std::string& value) {
  max_music_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.UserResume.max_music)
}
inline void UserResume::add_max_music(const char* value) {
  max_music_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.UserResume.max_music)
}
inline void UserResume::add_max_music(const char* value, size_t size) {
  max_music_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.UserResume.max_music)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserResume::max_music() const {
  // @@protoc_insertion_point(field_list:Cmd.UserResume.max_music)
  return max_music_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserResume::mutable_max_music() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserResume.max_music)
  return &max_music_;
}

// repeated string max_save = 16;
inline int UserResume::max_save_size() const {
  return max_save_.size();
}
inline void UserResume::clear_max_save() {
  max_save_.Clear();
}
inline const ::std::string& UserResume::max_save(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_save)
  return max_save_.Get(index);
}
inline ::std::string* UserResume::mutable_max_save(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_save)
  return max_save_.Mutable(index);
}
inline void UserResume::set_max_save(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_save)
  max_save_.Mutable(index)->assign(value);
}
inline void UserResume::set_max_save(int index, const char* value) {
  max_save_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_save)
}
inline void UserResume::set_max_save(int index, const char* value, size_t size) {
  max_save_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_save)
}
inline ::std::string* UserResume::add_max_save() {
  return max_save_.Add();
}
inline void UserResume::add_max_save(const ::std::string& value) {
  max_save_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.UserResume.max_save)
}
inline void UserResume::add_max_save(const char* value) {
  max_save_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.UserResume.max_save)
}
inline void UserResume::add_max_save(const char* value, size_t size) {
  max_save_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.UserResume.max_save)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserResume::max_save() const {
  // @@protoc_insertion_point(field_list:Cmd.UserResume.max_save)
  return max_save_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserResume::mutable_max_save() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserResume.max_save)
  return &max_save_;
}

// repeated string max_besave = 17;
inline int UserResume::max_besave_size() const {
  return max_besave_.size();
}
inline void UserResume::clear_max_besave() {
  max_besave_.Clear();
}
inline const ::std::string& UserResume::max_besave(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserResume.max_besave)
  return max_besave_.Get(index);
}
inline ::std::string* UserResume::mutable_max_besave(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserResume.max_besave)
  return max_besave_.Mutable(index);
}
inline void UserResume::set_max_besave(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.UserResume.max_besave)
  max_besave_.Mutable(index)->assign(value);
}
inline void UserResume::set_max_besave(int index, const char* value) {
  max_besave_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserResume.max_besave)
}
inline void UserResume::set_max_besave(int index, const char* value, size_t size) {
  max_besave_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserResume.max_besave)
}
inline ::std::string* UserResume::add_max_besave() {
  return max_besave_.Add();
}
inline void UserResume::add_max_besave(const ::std::string& value) {
  max_besave_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.UserResume.max_besave)
}
inline void UserResume::add_max_besave(const char* value) {
  max_besave_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.UserResume.max_besave)
}
inline void UserResume::add_max_besave(const char* value, size_t size) {
  max_besave_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.UserResume.max_besave)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserResume::max_besave() const {
  // @@protoc_insertion_point(field_list:Cmd.UserResume.max_besave)
  return max_besave_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserResume::mutable_max_besave() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserResume.max_besave)
  return &max_besave_;
}

// -------------------------------------------------------------------

// AchieveQuest

// optional uint32 id = 1 [default = 0];
inline bool AchieveQuest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchieveQuest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchieveQuest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchieveQuest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AchieveQuest::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveQuest.id)
  return id_;
}
inline void AchieveQuest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveQuest.id)
}

// optional string name = 2;
inline bool AchieveQuest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchieveQuest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchieveQuest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchieveQuest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AchieveQuest::name() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveQuest.name)
  return *name_;
}
inline void AchieveQuest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AchieveQuest.name)
}
inline void AchieveQuest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AchieveQuest.name)
}
inline void AchieveQuest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AchieveQuest.name)
}
inline ::std::string* AchieveQuest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AchieveQuest.name)
  return name_;
}
inline ::std::string* AchieveQuest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AchieveQuest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AchieveQuest.name)
}

// repeated .Cmd.AchieveQuest pre = 3;
inline int AchieveQuest::pre_size() const {
  return pre_.size();
}
inline void AchieveQuest::clear_pre() {
  pre_.Clear();
}
inline const ::Cmd::AchieveQuest& AchieveQuest::pre(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveQuest.pre)
  return pre_.Get(index);
}
inline ::Cmd::AchieveQuest* AchieveQuest::mutable_pre(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AchieveQuest.pre)
  return pre_.Mutable(index);
}
inline ::Cmd::AchieveQuest* AchieveQuest::add_pre() {
  // @@protoc_insertion_point(field_add:Cmd.AchieveQuest.pre)
  return pre_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >&
AchieveQuest::pre() const {
  // @@protoc_insertion_point(field_list:Cmd.AchieveQuest.pre)
  return pre_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >*
AchieveQuest::mutable_pre() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AchieveQuest.pre)
  return &pre_;
}

// -------------------------------------------------------------------

// AchieveItem

// optional uint32 id = 1 [default = 0];
inline bool AchieveItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchieveItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchieveItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchieveItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AchieveItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveItem.id)
  return id_;
}
inline void AchieveItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveItem.id)
}

// optional uint32 process = 2 [default = 0];
inline bool AchieveItem::has_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchieveItem::set_has_process() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchieveItem::clear_has_process() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchieveItem::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 AchieveItem::process() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveItem.process)
  return process_;
}
inline void AchieveItem::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveItem.process)
}

// optional uint32 finishtime = 3 [default = 0];
inline bool AchieveItem::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchieveItem::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchieveItem::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchieveItem::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 AchieveItem::finishtime() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveItem.finishtime)
  return finishtime_;
}
inline void AchieveItem::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveItem.finishtime)
}

// repeated uint64 params = 4;
inline int AchieveItem::params_size() const {
  return params_.size();
}
inline void AchieveItem::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::uint64 AchieveItem::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveItem.params)
  return params_.Get(index);
}
inline void AchieveItem::set_params(int index, ::google::protobuf::uint64 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.AchieveItem.params)
}
inline void AchieveItem::add_params(::google::protobuf::uint64 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.AchieveItem.params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AchieveItem::params() const {
  // @@protoc_insertion_point(field_list:Cmd.AchieveItem.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AchieveItem::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AchieveItem.params)
  return &params_;
}

// repeated .Cmd.AchieveQuest quests = 6;
inline int AchieveItem::quests_size() const {
  return quests_.size();
}
inline void AchieveItem::clear_quests() {
  quests_.Clear();
}
inline const ::Cmd::AchieveQuest& AchieveItem::quests(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveItem.quests)
  return quests_.Get(index);
}
inline ::Cmd::AchieveQuest* AchieveItem::mutable_quests(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AchieveItem.quests)
  return quests_.Mutable(index);
}
inline ::Cmd::AchieveQuest* AchieveItem::add_quests() {
  // @@protoc_insertion_point(field_add:Cmd.AchieveItem.quests)
  return quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >&
AchieveItem::quests() const {
  // @@protoc_insertion_point(field_list:Cmd.AchieveItem.quests)
  return quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveQuest >*
AchieveItem::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AchieveItem.quests)
  return &quests_;
}

// optional bool reward_get = 5 [default = false];
inline bool AchieveItem::has_reward_get() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AchieveItem::set_has_reward_get() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AchieveItem::clear_has_reward_get() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AchieveItem::clear_reward_get() {
  reward_get_ = false;
  clear_has_reward_get();
}
inline bool AchieveItem::reward_get() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveItem.reward_get)
  return reward_get_;
}
inline void AchieveItem::set_reward_get(bool value) {
  set_has_reward_get();
  reward_get_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveItem.reward_get)
}

// -------------------------------------------------------------------

// AchieveSubData

// optional .Cmd.EAchieveSubType type = 1 [default = EACHIEVESUBTYPE_MIN];
inline bool AchieveSubData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchieveSubData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchieveSubData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchieveSubData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EAchieveSubType AchieveSubData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveSubData.type)
  return static_cast< ::Cmd::EAchieveSubType >(type_);
}
inline void AchieveSubData::set_type(::Cmd::EAchieveSubType value) {
  assert(::Cmd::EAchieveSubType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveSubData.type)
}

// repeated .Cmd.AchieveItem items = 2;
inline int AchieveSubData::items_size() const {
  return items_.size();
}
inline void AchieveSubData::clear_items() {
  items_.Clear();
}
inline const ::Cmd::AchieveItem& AchieveSubData::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveSubData.items)
  return items_.Get(index);
}
inline ::Cmd::AchieveItem* AchieveSubData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AchieveSubData.items)
  return items_.Mutable(index);
}
inline ::Cmd::AchieveItem* AchieveSubData::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.AchieveSubData.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >&
AchieveSubData::items() const {
  // @@protoc_insertion_point(field_list:Cmd.AchieveSubData.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >*
AchieveSubData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AchieveSubData.items)
  return &items_;
}

// -------------------------------------------------------------------

// AchieveData

// optional .Cmd.EAchieveType type = 1 [default = EACHIEVETYPE_MIN];
inline bool AchieveData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchieveData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchieveData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchieveData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EAchieveType AchieveData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveData.type)
  return static_cast< ::Cmd::EAchieveType >(type_);
}
inline void AchieveData::set_type(::Cmd::EAchieveType value) {
  assert(::Cmd::EAchieveType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveData.type)
}

// repeated .Cmd.AchieveSubData datas = 2;
inline int AchieveData::datas_size() const {
  return datas_.size();
}
inline void AchieveData::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::AchieveSubData& AchieveData::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveData.datas)
  return datas_.Get(index);
}
inline ::Cmd::AchieveSubData* AchieveData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AchieveData.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::AchieveSubData* AchieveData::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.AchieveData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveSubData >&
AchieveData::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.AchieveData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveSubData >*
AchieveData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AchieveData.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// QueryUserResumeAchCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
inline bool QueryUserResumeAchCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserResumeAchCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserResumeAchCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserResumeAchCmd::clear_cmd() {
  cmd_ = 17;
  clear_has_cmd();
}
inline ::Cmd::Command QueryUserResumeAchCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserResumeAchCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryUserResumeAchCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserResumeAchCmd.cmd)
}

// optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_USERRESUME];
inline bool QueryUserResumeAchCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserResumeAchCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserResumeAchCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserResumeAchCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::AchieveParam QueryUserResumeAchCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserResumeAchCmd.param)
  return static_cast< ::Cmd::AchieveParam >(param_);
}
inline void QueryUserResumeAchCmd::set_param(::Cmd::AchieveParam value) {
  assert(::Cmd::AchieveParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserResumeAchCmd.param)
}

// optional .Cmd.UserResume data = 3;
inline bool QueryUserResumeAchCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryUserResumeAchCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryUserResumeAchCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryUserResumeAchCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::UserResume::Clear();
  clear_has_data();
}
inline const ::Cmd::UserResume& QueryUserResumeAchCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserResumeAchCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::UserResume* QueryUserResumeAchCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::UserResume;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserResumeAchCmd.data)
  return data_;
}
inline ::Cmd::UserResume* QueryUserResumeAchCmd::release_data() {
  clear_has_data();
  ::Cmd::UserResume* temp = data_;
  data_ = NULL;
  return temp;
}
inline void QueryUserResumeAchCmd::set_allocated_data(::Cmd::UserResume* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryUserResumeAchCmd.data)
}

// -------------------------------------------------------------------

// QueryAchieveDataAchCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
inline bool QueryAchieveDataAchCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryAchieveDataAchCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryAchieveDataAchCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryAchieveDataAchCmd::clear_cmd() {
  cmd_ = 17;
  clear_has_cmd();
}
inline ::Cmd::Command QueryAchieveDataAchCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryAchieveDataAchCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryAchieveDataAchCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryAchieveDataAchCmd.cmd)
}

// optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_QUERY_ACHDATA];
inline bool QueryAchieveDataAchCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryAchieveDataAchCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryAchieveDataAchCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryAchieveDataAchCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::AchieveParam QueryAchieveDataAchCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryAchieveDataAchCmd.param)
  return static_cast< ::Cmd::AchieveParam >(param_);
}
inline void QueryAchieveDataAchCmd::set_param(::Cmd::AchieveParam value) {
  assert(::Cmd::AchieveParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryAchieveDataAchCmd.param)
}

// optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
inline bool QueryAchieveDataAchCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryAchieveDataAchCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryAchieveDataAchCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryAchieveDataAchCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EAchieveType QueryAchieveDataAchCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryAchieveDataAchCmd.type)
  return static_cast< ::Cmd::EAchieveType >(type_);
}
inline void QueryAchieveDataAchCmd::set_type(::Cmd::EAchieveType value) {
  assert(::Cmd::EAchieveType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryAchieveDataAchCmd.type)
}

// repeated .Cmd.AchieveItem items = 4;
inline int QueryAchieveDataAchCmd::items_size() const {
  return items_.size();
}
inline void QueryAchieveDataAchCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::AchieveItem& QueryAchieveDataAchCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryAchieveDataAchCmd.items)
  return items_.Get(index);
}
inline ::Cmd::AchieveItem* QueryAchieveDataAchCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryAchieveDataAchCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::AchieveItem* QueryAchieveDataAchCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QueryAchieveDataAchCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >&
QueryAchieveDataAchCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryAchieveDataAchCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >*
QueryAchieveDataAchCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryAchieveDataAchCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// NewAchieveNtfAchCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
inline bool NewAchieveNtfAchCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewAchieveNtfAchCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewAchieveNtfAchCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewAchieveNtfAchCmd::clear_cmd() {
  cmd_ = 17;
  clear_has_cmd();
}
inline ::Cmd::Command NewAchieveNtfAchCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewAchieveNtfAchCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewAchieveNtfAchCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewAchieveNtfAchCmd.cmd)
}

// optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_NEW_ACHNTF];
inline bool NewAchieveNtfAchCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewAchieveNtfAchCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewAchieveNtfAchCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewAchieveNtfAchCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::AchieveParam NewAchieveNtfAchCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewAchieveNtfAchCmd.param)
  return static_cast< ::Cmd::AchieveParam >(param_);
}
inline void NewAchieveNtfAchCmd::set_param(::Cmd::AchieveParam value) {
  assert(::Cmd::AchieveParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewAchieveNtfAchCmd.param)
}

// optional .Cmd.EAchieveType type = 3 [default = EACHIEVETYPE_MIN];
inline bool NewAchieveNtfAchCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewAchieveNtfAchCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewAchieveNtfAchCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewAchieveNtfAchCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EAchieveType NewAchieveNtfAchCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.NewAchieveNtfAchCmd.type)
  return static_cast< ::Cmd::EAchieveType >(type_);
}
inline void NewAchieveNtfAchCmd::set_type(::Cmd::EAchieveType value) {
  assert(::Cmd::EAchieveType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewAchieveNtfAchCmd.type)
}

// repeated .Cmd.AchieveItem items = 4;
inline int NewAchieveNtfAchCmd::items_size() const {
  return items_.size();
}
inline void NewAchieveNtfAchCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::AchieveItem& NewAchieveNtfAchCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NewAchieveNtfAchCmd.items)
  return items_.Get(index);
}
inline ::Cmd::AchieveItem* NewAchieveNtfAchCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NewAchieveNtfAchCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::AchieveItem* NewAchieveNtfAchCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.NewAchieveNtfAchCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >&
NewAchieveNtfAchCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.NewAchieveNtfAchCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveItem >*
NewAchieveNtfAchCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NewAchieveNtfAchCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// RewardGetAchCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ACHIEVE_PROTOCMD];
inline bool RewardGetAchCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardGetAchCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardGetAchCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardGetAchCmd::clear_cmd() {
  cmd_ = 17;
  clear_has_cmd();
}
inline ::Cmd::Command RewardGetAchCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardGetAchCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RewardGetAchCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardGetAchCmd.cmd)
}

// optional .Cmd.AchieveParam param = 2 [default = ACHIEVEPARAM_REWARD_GET];
inline bool RewardGetAchCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardGetAchCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardGetAchCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardGetAchCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::AchieveParam RewardGetAchCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardGetAchCmd.param)
  return static_cast< ::Cmd::AchieveParam >(param_);
}
inline void RewardGetAchCmd::set_param(::Cmd::AchieveParam value) {
  assert(::Cmd::AchieveParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardGetAchCmd.param)
}

// optional uint32 id = 3 [default = 0];
inline bool RewardGetAchCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardGetAchCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardGetAchCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardGetAchCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RewardGetAchCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardGetAchCmd.id)
  return id_;
}
inline void RewardGetAchCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardGetAchCmd.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::AchieveParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::AchieveParam>() {
  return ::Cmd::AchieveParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAchieveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAchieveType>() {
  return ::Cmd::EAchieveType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAchieveSubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAchieveSubType>() {
  return ::Cmd::EAchieveSubType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AchieveCmd_2eproto__INCLUDED
