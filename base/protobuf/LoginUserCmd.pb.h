// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginUserCmd.proto

#ifndef PROTOBUF_LoginUserCmd_2eproto__INCLUDED
#define PROTOBUF_LoginUserCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
#include "ErrorUserCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginUserCmd_2eproto();
void protobuf_AssignDesc_LoginUserCmd_2eproto();
void protobuf_ShutdownFile_LoginUserCmd_2eproto();

class RegResultUserCmd;
class CreateCharUserCmd;
class SnapShotUserCmd;
class ExtraData;
class SelectRoleUserCmd;
class LoginResultUserCmd;
class DeleteCharUserCmd;
class HeartBeatUserCmd;
class ServerTimeUserCmd;
class GMDeleteCharUserCmd;
class ClientInfoUserCmd;
class ReqLoginUserCmd;
class ReqLoginParamUserCmd;
class KickParamUserCmd;
class CancelDeleteCharUserCmd;
class ClientFrameUserCmd;
class SafeDeviceUserCmd;
class ConfirmAuthorizeUserCmd;
class SyncAuthorizeGateCmd;
class RealAuthorizeUserCmd;
class RealAuthorizeServerCmd;

enum LoginCmdParam {
  ACCPASS_REG_USER_CMD = 1,
  GATE_IP_USER_CMD = 2,
  REG_GATE_USER_CMD = 3,
  REG_RESULT_USER_CMD = 4,
  CREATE_CHAR_USER_CMD = 5,
  SNAPSHOT_USER_CMD = 6,
  SELECT_ROLE_USER_CMD = 7,
  LOGIN_RESULT_USER_CMD = 8,
  DELETE_CHAR_USER_CMD = 9,
  HEART_BEAT_USER_CMD = 10,
  SERVERTIME_USER_CMD = 11,
  GM_DELETE_CHAR_USER_CMD = 12,
  CLIENT_INFO_USER_CMD = 13,
  REQ_LOGIN_USER_CMD = 14,
  REQ_LOGIN_PARAM_USER_CMD = 15,
  KICK_PARAM_USER_CMD = 16,
  CANCEL_DELETE_CHAR_USER_CMD = 17,
  CLIENT_FRAME_USER_CMD = 18,
  SAFE_DEVICE_USER_CMD = 19,
  CONFIRM_AUTHORIZE_USER_CMD = 20,
  SYNC_AUTHORIZE_GATE_CMD = 21,
  REAL_AUTHORIZE_USER_CMD = 22,
  REAL_AUTHORIZE_SEERVER_CMD = 23
};
bool LoginCmdParam_IsValid(int value);
const LoginCmdParam LoginCmdParam_MIN = ACCPASS_REG_USER_CMD;
const LoginCmdParam LoginCmdParam_MAX = REAL_AUTHORIZE_SEERVER_CMD;
const int LoginCmdParam_ARRAYSIZE = LoginCmdParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginCmdParam_descriptor();
inline const ::std::string& LoginCmdParam_Name(LoginCmdParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginCmdParam_descriptor(), value);
}
inline bool LoginCmdParam_Parse(
    const ::std::string& name, LoginCmdParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginCmdParam>(
    LoginCmdParam_descriptor(), name, value);
}
// ===================================================================

class RegResultUserCmd : public ::google::protobuf::Message {
 public:
  RegResultUserCmd();
  virtual ~RegResultUserCmd();

  RegResultUserCmd(const RegResultUserCmd& from);

  inline RegResultUserCmd& operator=(const RegResultUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegResultUserCmd& default_instance();

  void Swap(RegResultUserCmd* other);

  // implements Message ----------------------------------------------

  RegResultUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegResultUserCmd& from);
  void MergeFrom(const RegResultUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = REG_RESULT_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // required uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .Cmd.RegErrRet ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::Cmd::RegErrRet ret() const;
  inline void set_ret(::Cmd::RegErrRet value);

  // @@protoc_insertion_point(class_scope:Cmd.RegResultUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  int ret_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static RegResultUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CreateCharUserCmd : public ::google::protobuf::Message {
 public:
  CreateCharUserCmd();
  virtual ~CreateCharUserCmd();

  CreateCharUserCmd(const CreateCharUserCmd& from);

  inline CreateCharUserCmd& operator=(const CreateCharUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCharUserCmd& default_instance();

  void Swap(CreateCharUserCmd* other);

  // implements Message ----------------------------------------------

  CreateCharUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateCharUserCmd& from);
  void MergeFrom(const CreateCharUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = CREATE_CHAR_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 role_sex = 5;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 5;
  inline ::google::protobuf::uint32 role_sex() const;
  inline void set_role_sex(::google::protobuf::uint32 value);

  // optional uint32 profession = 6;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 6;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint32 hair = 7;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 7;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 8;
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 8;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 clothcolor = 9;
  inline bool has_clothcolor() const;
  inline void clear_clothcolor();
  static const int kClothcolorFieldNumber = 9;
  inline ::google::protobuf::uint32 clothcolor() const;
  inline void set_clothcolor(::google::protobuf::uint32 value);

  // optional uint64 accid = 10;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 10;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint32 sequence = 11;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 11;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string version = 12;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 12;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:Cmd.CreateCharUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_clothcolor();
  inline void clear_has_clothcolor();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* name_;
  ::google::protobuf::uint32 role_sex_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::uint32 clothcolor_;
  ::google::protobuf::uint32 sequence_;
  ::std::string* version_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static CreateCharUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class SnapShotUserCmd : public ::google::protobuf::Message {
 public:
  SnapShotUserCmd();
  virtual ~SnapShotUserCmd();

  SnapShotUserCmd(const SnapShotUserCmd& from);

  inline SnapShotUserCmd& operator=(const SnapShotUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapShotUserCmd& default_instance();

  void Swap(SnapShotUserCmd* other);

  // implements Message ----------------------------------------------

  SnapShotUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapShotUserCmd& from);
  void MergeFrom(const SnapShotUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = SNAPSHOT_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // repeated .Cmd.SnapShotDataPB data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::SnapShotDataPB& data(int index) const;
  inline ::Cmd::SnapShotDataPB* mutable_data(int index);
  inline ::Cmd::SnapShotDataPB* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SnapShotDataPB >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SnapShotDataPB >*
      mutable_data();

  // optional uint64 lastselect = 4;
  inline bool has_lastselect() const;
  inline void clear_lastselect();
  static const int kLastselectFieldNumber = 4;
  inline ::google::protobuf::uint64 lastselect() const;
  inline void set_lastselect(::google::protobuf::uint64 value);

  // optional bool deletechar = 5;
  inline bool has_deletechar() const;
  inline void clear_deletechar();
  static const int kDeletecharFieldNumber = 5;
  inline bool deletechar() const;
  inline void set_deletechar(bool value);

  // optional uint32 deletecdtime = 6;
  inline bool has_deletecdtime() const;
  inline void clear_deletecdtime();
  static const int kDeletecdtimeFieldNumber = 6;
  inline ::google::protobuf::uint32 deletecdtime() const;
  inline void set_deletecdtime(::google::protobuf::uint32 value);

  // optional uint64 maincharid = 7;
  inline bool has_maincharid() const;
  inline void clear_maincharid();
  static const int kMaincharidFieldNumber = 7;
  inline ::google::protobuf::uint64 maincharid() const;
  inline void set_maincharid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.SnapShotUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_lastselect();
  inline void clear_has_lastselect();
  inline void set_has_deletechar();
  inline void clear_has_deletechar();
  inline void set_has_deletecdtime();
  inline void clear_has_deletecdtime();
  inline void set_has_maincharid();
  inline void clear_has_maincharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SnapShotDataPB > data_;
  ::google::protobuf::uint64 lastselect_;
  bool deletechar_;
  ::google::protobuf::uint32 deletecdtime_;
  ::google::protobuf::uint64 maincharid_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static SnapShotUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ExtraData : public ::google::protobuf::Message {
 public:
  ExtraData();
  virtual ~ExtraData();

  ExtraData(const ExtraData& from);

  inline ExtraData& operator=(const ExtraData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraData& default_instance();

  void Swap(ExtraData* other);

  // implements Message ----------------------------------------------

  ExtraData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraData& from);
  void MergeFrom(const ExtraData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string phone = 1;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 1;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional bool safedevice = 2;
  inline bool has_safedevice() const;
  inline void clear_safedevice();
  static const int kSafedeviceFieldNumber = 2;
  inline bool safedevice() const;
  inline void set_safedevice(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ExtraData)
 private:
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_safedevice();
  inline void clear_has_safedevice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* phone_;
  bool safedevice_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static ExtraData* default_instance_;
};
// -------------------------------------------------------------------

class SelectRoleUserCmd : public ::google::protobuf::Message {
 public:
  SelectRoleUserCmd();
  virtual ~SelectRoleUserCmd();

  SelectRoleUserCmd(const SelectRoleUserCmd& from);

  inline SelectRoleUserCmd& operator=(const SelectRoleUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectRoleUserCmd& default_instance();

  void Swap(SelectRoleUserCmd* other);

  // implements Message ----------------------------------------------

  SelectRoleUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectRoleUserCmd& from);
  void MergeFrom(const SelectRoleUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = SELECT_ROLE_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // required uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 zoneID = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneIDFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint64 accid = 5;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 5;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string deviceid = 6;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 6;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional .Cmd.ExtraData extraData = 9;
  inline bool has_extradata() const;
  inline void clear_extradata();
  static const int kExtraDataFieldNumber = 9;
  inline const ::Cmd::ExtraData& extradata() const;
  inline ::Cmd::ExtraData* mutable_extradata();
  inline ::Cmd::ExtraData* release_extradata();
  inline void set_allocated_extradata(::Cmd::ExtraData* extradata);

  // optional bool ignorepwd = 10;
  inline bool has_ignorepwd() const;
  inline void clear_ignorepwd();
  static const int kIgnorepwdFieldNumber = 10;
  inline bool ignorepwd() const;
  inline void set_ignorepwd(bool value);

  // optional string password = 11;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 11;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint32 resettime = 12;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResettimeFieldNumber = 12;
  inline ::google::protobuf::uint32 resettime() const;
  inline void set_resettime(::google::protobuf::uint32 value);

  // optional uint32 language = 13;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 13;
  inline ::google::protobuf::uint32 language() const;
  inline void set_language(::google::protobuf::uint32 value);

  // optional bool realauthorized = 14;
  inline bool has_realauthorized() const;
  inline void clear_realauthorized();
  static const int kRealauthorizedFieldNumber = 14;
  inline bool realauthorized() const;
  inline void set_realauthorized(bool value);

  // optional uint32 maxbaselv = 15;
  inline bool has_maxbaselv() const;
  inline void clear_maxbaselv();
  static const int kMaxbaselvFieldNumber = 15;
  inline ::google::protobuf::uint32 maxbaselv() const;
  inline void set_maxbaselv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SelectRoleUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_extradata();
  inline void clear_has_extradata();
  inline void set_has_ignorepwd();
  inline void clear_has_ignorepwd();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_realauthorized();
  inline void clear_has_realauthorized();
  inline void set_has_maxbaselv();
  inline void clear_has_maxbaselv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 accid_;
  ::std::string* deviceid_;
  ::std::string* name_;
  ::std::string* version_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 resettime_;
  ::Cmd::ExtraData* extradata_;
  ::std::string* password_;
  bool ignorepwd_;
  bool realauthorized_;
  ::google::protobuf::uint32 language_;
  ::google::protobuf::uint32 maxbaselv_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static SelectRoleUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class LoginResultUserCmd : public ::google::protobuf::Message {
 public:
  LoginResultUserCmd();
  virtual ~LoginResultUserCmd();

  LoginResultUserCmd(const LoginResultUserCmd& from);

  inline LoginResultUserCmd& operator=(const LoginResultUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResultUserCmd& default_instance();

  void Swap(LoginResultUserCmd* other);

  // implements Message ----------------------------------------------

  LoginResultUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResultUserCmd& from);
  void MergeFrom(const LoginResultUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = LOGIN_RESULT_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // required uint32 ret = 3 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LoginResultUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 ret_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static LoginResultUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCharUserCmd : public ::google::protobuf::Message {
 public:
  DeleteCharUserCmd();
  virtual ~DeleteCharUserCmd();

  DeleteCharUserCmd(const DeleteCharUserCmd& from);

  inline DeleteCharUserCmd& operator=(const DeleteCharUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCharUserCmd& default_instance();

  void Swap(DeleteCharUserCmd* other);

  // implements Message ----------------------------------------------

  DeleteCharUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCharUserCmd& from);
  void MergeFrom(const DeleteCharUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = DELETE_CHAR_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 accid = 4;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:Cmd.DeleteCharUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 accid_;
  ::std::string* version_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static DeleteCharUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatUserCmd : public ::google::protobuf::Message {
 public:
  HeartBeatUserCmd();
  virtual ~HeartBeatUserCmd();

  HeartBeatUserCmd(const HeartBeatUserCmd& from);

  inline HeartBeatUserCmd& operator=(const HeartBeatUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatUserCmd& default_instance();

  void Swap(HeartBeatUserCmd* other);

  // implements Message ----------------------------------------------

  HeartBeatUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatUserCmd& from);
  void MergeFrom(const HeartBeatUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = HEART_BEAT_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.HeartBeatUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 time_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ServerTimeUserCmd : public ::google::protobuf::Message {
 public:
  ServerTimeUserCmd();
  virtual ~ServerTimeUserCmd();

  ServerTimeUserCmd(const ServerTimeUserCmd& from);

  inline ServerTimeUserCmd& operator=(const ServerTimeUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerTimeUserCmd& default_instance();

  void Swap(ServerTimeUserCmd* other);

  // implements Message ----------------------------------------------

  ServerTimeUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerTimeUserCmd& from);
  void MergeFrom(const ServerTimeUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = SERVERTIME_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ServerTimeUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 time_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static ServerTimeUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GMDeleteCharUserCmd : public ::google::protobuf::Message {
 public:
  GMDeleteCharUserCmd();
  virtual ~GMDeleteCharUserCmd();

  GMDeleteCharUserCmd(const GMDeleteCharUserCmd& from);

  inline GMDeleteCharUserCmd& operator=(const GMDeleteCharUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMDeleteCharUserCmd& default_instance();

  void Swap(GMDeleteCharUserCmd* other);

  // implements Message ----------------------------------------------

  GMDeleteCharUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMDeleteCharUserCmd& from);
  void MergeFrom(const GMDeleteCharUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = GM_DELETE_CHAR_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 accid = 3 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GMDeleteCharUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static GMDeleteCharUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ClientInfoUserCmd : public ::google::protobuf::Message {
 public:
  ClientInfoUserCmd();
  virtual ~ClientInfoUserCmd();

  ClientInfoUserCmd(const ClientInfoUserCmd& from);

  inline ClientInfoUserCmd& operator=(const ClientInfoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientInfoUserCmd& default_instance();

  void Swap(ClientInfoUserCmd* other);

  // implements Message ----------------------------------------------

  ClientInfoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientInfoUserCmd& from);
  void MergeFrom(const ClientInfoUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_INFO_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 delay = 4 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 4;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ClientInfoUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* ip_;
  ::google::protobuf::uint32 delay_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static ClientInfoUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqLoginUserCmd : public ::google::protobuf::Message {
 public:
  ReqLoginUserCmd();
  virtual ~ReqLoginUserCmd();

  ReqLoginUserCmd(const ReqLoginUserCmd& from);

  inline ReqLoginUserCmd& operator=(const ReqLoginUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLoginUserCmd& default_instance();

  void Swap(ReqLoginUserCmd* other);

  // implements Message ----------------------------------------------

  ReqLoginUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLoginUserCmd& from);
  void MergeFrom(const ReqLoginUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 accid = 3 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string sha1 = 4;
  inline bool has_sha1() const;
  inline void clear_sha1();
  static const int kSha1FieldNumber = 4;
  inline const ::std::string& sha1() const;
  inline void set_sha1(const ::std::string& value);
  inline void set_sha1(const char* value);
  inline void set_sha1(const char* value, size_t size);
  inline ::std::string* mutable_sha1();
  inline ::std::string* release_sha1();
  inline void set_allocated_sha1(::std::string* sha1);

  // optional uint32 zoneid = 5 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 6 [default = 0];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional string version = 7;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 7;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string domain = 8;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 8;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional string ip = 9;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 9;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string device = 10;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 10;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // optional string phone = 11;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 11;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional string safe_device = 12;
  inline bool has_safe_device() const;
  inline void clear_safe_device();
  static const int kSafeDeviceFieldNumber = 12;
  inline const ::std::string& safe_device() const;
  inline void set_safe_device(const ::std::string& value);
  inline void set_safe_device(const char* value);
  inline void set_safe_device(const char* value, size_t size);
  inline ::std::string* mutable_safe_device();
  inline ::std::string* release_safe_device();
  inline void set_allocated_safe_device(::std::string* safe_device);

  // optional uint32 language = 13;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 13;
  inline ::google::protobuf::uint32 language() const;
  inline void set_language(::google::protobuf::uint32 value);

  // optional uint32 site = 14;
  inline bool has_site() const;
  inline void clear_site();
  static const int kSiteFieldNumber = 14;
  inline ::google::protobuf::uint32 site() const;
  inline void set_site(::google::protobuf::uint32 value);

  // optional string authorize = 15;
  inline bool has_authorize() const;
  inline void clear_authorize();
  static const int kAuthorizeFieldNumber = 15;
  inline const ::std::string& authorize() const;
  inline void set_authorize(const ::std::string& value);
  inline void set_authorize(const char* value);
  inline void set_authorize(const char* value, size_t size);
  inline ::std::string* mutable_authorize();
  inline ::std::string* release_authorize();
  inline void set_allocated_authorize(::std::string* authorize);

  // @@protoc_insertion_point(class_scope:Cmd.ReqLoginUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_sha1();
  inline void clear_has_sha1();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_safe_device();
  inline void clear_has_safe_device();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_site();
  inline void clear_has_site();
  inline void set_has_authorize();
  inline void clear_has_authorize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 accid_;
  ::std::string* sha1_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 timestamp_;
  ::std::string* version_;
  ::std::string* domain_;
  ::std::string* ip_;
  ::std::string* device_;
  ::std::string* phone_;
  ::std::string* safe_device_;
  ::google::protobuf::uint32 language_;
  ::google::protobuf::uint32 site_;
  ::std::string* authorize_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqLoginUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqLoginParamUserCmd : public ::google::protobuf::Message {
 public:
  ReqLoginParamUserCmd();
  virtual ~ReqLoginParamUserCmd();

  ReqLoginParamUserCmd(const ReqLoginParamUserCmd& from);

  inline ReqLoginParamUserCmd& operator=(const ReqLoginParamUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLoginParamUserCmd& default_instance();

  void Swap(ReqLoginParamUserCmd* other);

  // implements Message ----------------------------------------------

  ReqLoginParamUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLoginParamUserCmd& from);
  void MergeFrom(const ReqLoginParamUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_PARAM_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 accid = 3 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string sha1 = 4;
  inline bool has_sha1() const;
  inline void clear_sha1();
  static const int kSha1FieldNumber = 4;
  inline const ::std::string& sha1() const;
  inline void set_sha1(const ::std::string& value);
  inline void set_sha1(const char* value);
  inline void set_sha1(const char* value, size_t size);
  inline ::std::string* mutable_sha1();
  inline ::std::string* release_sha1();
  inline void set_allocated_sha1(::std::string* sha1);

  // optional uint32 timestamp = 5 [default = 0];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional string phone = 6;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 6;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional uint32 version = 7 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 7;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqLoginParamUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_sha1();
  inline void clear_has_sha1();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 accid_;
  ::std::string* sha1_;
  ::std::string* phone_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqLoginParamUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class KickParamUserCmd : public ::google::protobuf::Message {
 public:
  KickParamUserCmd();
  virtual ~KickParamUserCmd();

  KickParamUserCmd(const KickParamUserCmd& from);

  inline KickParamUserCmd& operator=(const KickParamUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickParamUserCmd& default_instance();

  void Swap(KickParamUserCmd* other);

  // implements Message ----------------------------------------------

  KickParamUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickParamUserCmd& from);
  void MergeFrom(const KickParamUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = KICK_PARAM_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 accid = 4 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.KickParamUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_accid();
  inline void clear_has_accid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 accid_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static KickParamUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CancelDeleteCharUserCmd : public ::google::protobuf::Message {
 public:
  CancelDeleteCharUserCmd();
  virtual ~CancelDeleteCharUserCmd();

  CancelDeleteCharUserCmd(const CancelDeleteCharUserCmd& from);

  inline CancelDeleteCharUserCmd& operator=(const CancelDeleteCharUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelDeleteCharUserCmd& default_instance();

  void Swap(CancelDeleteCharUserCmd* other);

  // implements Message ----------------------------------------------

  CancelDeleteCharUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelDeleteCharUserCmd& from);
  void MergeFrom(const CancelDeleteCharUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = CANCEL_DELETE_CHAR_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 accid = 4;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.CancelDeleteCharUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accid();
  inline void clear_has_accid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 accid_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static CancelDeleteCharUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ClientFrameUserCmd : public ::google::protobuf::Message {
 public:
  ClientFrameUserCmd();
  virtual ~ClientFrameUserCmd();

  ClientFrameUserCmd(const ClientFrameUserCmd& from);

  inline ClientFrameUserCmd& operator=(const ClientFrameUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientFrameUserCmd& default_instance();

  void Swap(ClientFrameUserCmd* other);

  // implements Message ----------------------------------------------

  ClientFrameUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientFrameUserCmd& from);
  void MergeFrom(const ClientFrameUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_FRAME_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional uint32 frame = 3;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 3;
  inline ::google::protobuf::uint32 frame() const;
  inline void set_frame(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ClientFrameUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_frame();
  inline void clear_has_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 frame_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static ClientFrameUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class SafeDeviceUserCmd : public ::google::protobuf::Message {
 public:
  SafeDeviceUserCmd();
  virtual ~SafeDeviceUserCmd();

  SafeDeviceUserCmd(const SafeDeviceUserCmd& from);

  inline SafeDeviceUserCmd& operator=(const SafeDeviceUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeDeviceUserCmd& default_instance();

  void Swap(SafeDeviceUserCmd* other);

  // implements Message ----------------------------------------------

  SafeDeviceUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SafeDeviceUserCmd& from);
  void MergeFrom(const SafeDeviceUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = SAFE_DEVICE_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional bool safe = 3;
  inline bool has_safe() const;
  inline void clear_safe();
  static const int kSafeFieldNumber = 3;
  inline bool safe() const;
  inline void set_safe(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.SafeDeviceUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_safe();
  inline void clear_has_safe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool safe_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static SafeDeviceUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ConfirmAuthorizeUserCmd : public ::google::protobuf::Message {
 public:
  ConfirmAuthorizeUserCmd();
  virtual ~ConfirmAuthorizeUserCmd();

  ConfirmAuthorizeUserCmd(const ConfirmAuthorizeUserCmd& from);

  inline ConfirmAuthorizeUserCmd& operator=(const ConfirmAuthorizeUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmAuthorizeUserCmd& default_instance();

  void Swap(ConfirmAuthorizeUserCmd* other);

  // implements Message ----------------------------------------------

  ConfirmAuthorizeUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfirmAuthorizeUserCmd& from);
  void MergeFrom(const ConfirmAuthorizeUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = CONFIRM_AUTHORIZE_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 resettime = 5;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResettimeFieldNumber = 5;
  inline ::google::protobuf::uint32 resettime() const;
  inline void set_resettime(::google::protobuf::uint32 value);

  // optional bool hasset = 6;
  inline bool has_hasset() const;
  inline void clear_hasset();
  static const int kHassetFieldNumber = 6;
  inline bool hasset() const;
  inline void set_hasset(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ConfirmAuthorizeUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_hasset();
  inline void clear_has_hasset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* password_;
  ::google::protobuf::uint32 resettime_;
  bool success_;
  bool hasset_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static ConfirmAuthorizeUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class SyncAuthorizeGateCmd : public ::google::protobuf::Message {
 public:
  SyncAuthorizeGateCmd();
  virtual ~SyncAuthorizeGateCmd();

  SyncAuthorizeGateCmd(const SyncAuthorizeGateCmd& from);

  inline SyncAuthorizeGateCmd& operator=(const SyncAuthorizeGateCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncAuthorizeGateCmd& default_instance();

  void Swap(SyncAuthorizeGateCmd* other);

  // implements Message ----------------------------------------------

  SyncAuthorizeGateCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncAuthorizeGateCmd& from);
  void MergeFrom(const SyncAuthorizeGateCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = SYNC_AUTHORIZE_GATE_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional bool ignorepwd = 3;
  inline bool has_ignorepwd() const;
  inline void clear_ignorepwd();
  static const int kIgnorepwdFieldNumber = 3;
  inline bool ignorepwd() const;
  inline void set_ignorepwd(bool value);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional uint64 accid = 6;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 6;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint32 resettime = 7;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResettimeFieldNumber = 7;
  inline ::google::protobuf::uint32 resettime() const;
  inline void set_resettime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SyncAuthorizeGateCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_ignorepwd();
  inline void clear_has_ignorepwd();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* password_;
  ::std::string* version_;
  bool ignorepwd_;
  ::google::protobuf::uint32 resettime_;
  ::google::protobuf::uint64 accid_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static SyncAuthorizeGateCmd* default_instance_;
};
// -------------------------------------------------------------------

class RealAuthorizeUserCmd : public ::google::protobuf::Message {
 public:
  RealAuthorizeUserCmd();
  virtual ~RealAuthorizeUserCmd();

  RealAuthorizeUserCmd(const RealAuthorizeUserCmd& from);

  inline RealAuthorizeUserCmd& operator=(const RealAuthorizeUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RealAuthorizeUserCmd& default_instance();

  void Swap(RealAuthorizeUserCmd* other);

  // implements Message ----------------------------------------------

  RealAuthorizeUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealAuthorizeUserCmd& from);
  void MergeFrom(const RealAuthorizeUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional string authoriz_state = 3;
  inline bool has_authoriz_state() const;
  inline void clear_authoriz_state();
  static const int kAuthorizStateFieldNumber = 3;
  inline const ::std::string& authoriz_state() const;
  inline void set_authoriz_state(const ::std::string& value);
  inline void set_authoriz_state(const char* value);
  inline void set_authoriz_state(const char* value, size_t size);
  inline ::std::string* mutable_authoriz_state();
  inline ::std::string* release_authoriz_state();
  inline void set_allocated_authoriz_state(::std::string* authoriz_state);

  // optional bool authorized = 4;
  inline bool has_authorized() const;
  inline void clear_authorized();
  static const int kAuthorizedFieldNumber = 4;
  inline bool authorized() const;
  inline void set_authorized(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.RealAuthorizeUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_authoriz_state();
  inline void clear_has_authoriz_state();
  inline void set_has_authorized();
  inline void clear_has_authorized();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* authoriz_state_;
  bool authorized_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static RealAuthorizeUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class RealAuthorizeServerCmd : public ::google::protobuf::Message {
 public:
  RealAuthorizeServerCmd();
  virtual ~RealAuthorizeServerCmd();

  RealAuthorizeServerCmd(const RealAuthorizeServerCmd& from);

  inline RealAuthorizeServerCmd& operator=(const RealAuthorizeServerCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RealAuthorizeServerCmd& default_instance();

  void Swap(RealAuthorizeServerCmd* other);

  // implements Message ----------------------------------------------

  RealAuthorizeServerCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealAuthorizeServerCmd& from);
  void MergeFrom(const RealAuthorizeServerCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_SEERVER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::LoginCmdParam param() const;
  inline void set_param(::Cmd::LoginCmdParam value);

  // optional bool authorized = 3;
  inline bool has_authorized() const;
  inline void clear_authorized();
  static const int kAuthorizedFieldNumber = 3;
  inline bool authorized() const;
  inline void set_authorized(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.RealAuthorizeServerCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_authorized();
  inline void clear_has_authorized();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool authorized_;
  friend void  protobuf_AddDesc_LoginUserCmd_2eproto();
  friend void protobuf_AssignDesc_LoginUserCmd_2eproto();
  friend void protobuf_ShutdownFile_LoginUserCmd_2eproto();

  void InitAsDefaultInstance();
  static RealAuthorizeServerCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// RegResultUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool RegResultUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegResultUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegResultUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegResultUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command RegResultUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RegResultUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RegResultUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegResultUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = REG_RESULT_USER_CMD];
inline bool RegResultUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegResultUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegResultUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegResultUserCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam RegResultUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RegResultUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void RegResultUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegResultUserCmd.param)
}

// required uint32 id = 3 [default = 0];
inline bool RegResultUserCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegResultUserCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegResultUserCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegResultUserCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RegResultUserCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.RegResultUserCmd.id)
  return id_;
}
inline void RegResultUserCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegResultUserCmd.id)
}

// required .Cmd.RegErrRet ret = 4;
inline bool RegResultUserCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegResultUserCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegResultUserCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegResultUserCmd::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::RegErrRet RegResultUserCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.RegResultUserCmd.ret)
  return static_cast< ::Cmd::RegErrRet >(ret_);
}
inline void RegResultUserCmd::set_ret(::Cmd::RegErrRet value) {
  assert(::Cmd::RegErrRet_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RegResultUserCmd.ret)
}

// -------------------------------------------------------------------

// CreateCharUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool CreateCharUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCharUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCharUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCharUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command CreateCharUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CreateCharUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = CREATE_CHAR_USER_CMD];
inline bool CreateCharUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCharUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCharUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCharUserCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam CreateCharUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void CreateCharUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.param)
}

// optional string name = 4;
inline bool CreateCharUserCmd::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateCharUserCmd::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateCharUserCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateCharUserCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateCharUserCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.name)
  return *name_;
}
inline void CreateCharUserCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.name)
}
inline void CreateCharUserCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateCharUserCmd.name)
}
inline void CreateCharUserCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateCharUserCmd.name)
}
inline ::std::string* CreateCharUserCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateCharUserCmd.name)
  return name_;
}
inline ::std::string* CreateCharUserCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateCharUserCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateCharUserCmd.name)
}

// optional uint32 role_sex = 5;
inline bool CreateCharUserCmd::has_role_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateCharUserCmd::set_has_role_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateCharUserCmd::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateCharUserCmd::clear_role_sex() {
  role_sex_ = 0u;
  clear_has_role_sex();
}
inline ::google::protobuf::uint32 CreateCharUserCmd::role_sex() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.role_sex)
  return role_sex_;
}
inline void CreateCharUserCmd::set_role_sex(::google::protobuf::uint32 value) {
  set_has_role_sex();
  role_sex_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.role_sex)
}

// optional uint32 profession = 6;
inline bool CreateCharUserCmd::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateCharUserCmd::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateCharUserCmd::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateCharUserCmd::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 CreateCharUserCmd::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.profession)
  return profession_;
}
inline void CreateCharUserCmd::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.profession)
}

// optional uint32 hair = 7;
inline bool CreateCharUserCmd::has_hair() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateCharUserCmd::set_has_hair() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateCharUserCmd::clear_has_hair() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateCharUserCmd::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 CreateCharUserCmd::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.hair)
  return hair_;
}
inline void CreateCharUserCmd::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.hair)
}

// optional uint32 haircolor = 8;
inline bool CreateCharUserCmd::has_haircolor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateCharUserCmd::set_has_haircolor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateCharUserCmd::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateCharUserCmd::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 CreateCharUserCmd::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.haircolor)
  return haircolor_;
}
inline void CreateCharUserCmd::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.haircolor)
}

// optional uint32 clothcolor = 9;
inline bool CreateCharUserCmd::has_clothcolor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateCharUserCmd::set_has_clothcolor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateCharUserCmd::clear_has_clothcolor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateCharUserCmd::clear_clothcolor() {
  clothcolor_ = 0u;
  clear_has_clothcolor();
}
inline ::google::protobuf::uint32 CreateCharUserCmd::clothcolor() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.clothcolor)
  return clothcolor_;
}
inline void CreateCharUserCmd::set_clothcolor(::google::protobuf::uint32 value) {
  set_has_clothcolor();
  clothcolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.clothcolor)
}

// optional uint64 accid = 10;
inline bool CreateCharUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateCharUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateCharUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateCharUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 CreateCharUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.accid)
  return accid_;
}
inline void CreateCharUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.accid)
}

// optional uint32 sequence = 11;
inline bool CreateCharUserCmd::has_sequence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreateCharUserCmd::set_has_sequence() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreateCharUserCmd::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreateCharUserCmd::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 CreateCharUserCmd::sequence() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.sequence)
  return sequence_;
}
inline void CreateCharUserCmd::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.sequence)
}

// optional string version = 12;
inline bool CreateCharUserCmd::has_version() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreateCharUserCmd::set_has_version() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreateCharUserCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreateCharUserCmd::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CreateCharUserCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateCharUserCmd.version)
  return *version_;
}
inline void CreateCharUserCmd::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateCharUserCmd.version)
}
inline void CreateCharUserCmd::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateCharUserCmd.version)
}
inline void CreateCharUserCmd::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateCharUserCmd.version)
}
inline ::std::string* CreateCharUserCmd::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateCharUserCmd.version)
  return version_;
}
inline ::std::string* CreateCharUserCmd::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateCharUserCmd::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateCharUserCmd.version)
}

// -------------------------------------------------------------------

// SnapShotUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool SnapShotUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapShotUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapShotUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapShotUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command SnapShotUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SnapShotUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = SNAPSHOT_USER_CMD];
inline bool SnapShotUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapShotUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapShotUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapShotUserCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam SnapShotUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void SnapShotUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotUserCmd.param)
}

// repeated .Cmd.SnapShotDataPB data = 3;
inline int SnapShotUserCmd::data_size() const {
  return data_.size();
}
inline void SnapShotUserCmd::clear_data() {
  data_.Clear();
}
inline const ::Cmd::SnapShotDataPB& SnapShotUserCmd::data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotUserCmd.data)
  return data_.Get(index);
}
inline ::Cmd::SnapShotDataPB* SnapShotUserCmd::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SnapShotUserCmd.data)
  return data_.Mutable(index);
}
inline ::Cmd::SnapShotDataPB* SnapShotUserCmd::add_data() {
  // @@protoc_insertion_point(field_add:Cmd.SnapShotUserCmd.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SnapShotDataPB >&
SnapShotUserCmd::data() const {
  // @@protoc_insertion_point(field_list:Cmd.SnapShotUserCmd.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SnapShotDataPB >*
SnapShotUserCmd::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SnapShotUserCmd.data)
  return &data_;
}

// optional uint64 lastselect = 4;
inline bool SnapShotUserCmd::has_lastselect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnapShotUserCmd::set_has_lastselect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnapShotUserCmd::clear_has_lastselect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnapShotUserCmd::clear_lastselect() {
  lastselect_ = GOOGLE_ULONGLONG(0);
  clear_has_lastselect();
}
inline ::google::protobuf::uint64 SnapShotUserCmd::lastselect() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotUserCmd.lastselect)
  return lastselect_;
}
inline void SnapShotUserCmd::set_lastselect(::google::protobuf::uint64 value) {
  set_has_lastselect();
  lastselect_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotUserCmd.lastselect)
}

// optional bool deletechar = 5;
inline bool SnapShotUserCmd::has_deletechar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SnapShotUserCmd::set_has_deletechar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SnapShotUserCmd::clear_has_deletechar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SnapShotUserCmd::clear_deletechar() {
  deletechar_ = false;
  clear_has_deletechar();
}
inline bool SnapShotUserCmd::deletechar() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotUserCmd.deletechar)
  return deletechar_;
}
inline void SnapShotUserCmd::set_deletechar(bool value) {
  set_has_deletechar();
  deletechar_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotUserCmd.deletechar)
}

// optional uint32 deletecdtime = 6;
inline bool SnapShotUserCmd::has_deletecdtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SnapShotUserCmd::set_has_deletecdtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SnapShotUserCmd::clear_has_deletecdtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SnapShotUserCmd::clear_deletecdtime() {
  deletecdtime_ = 0u;
  clear_has_deletecdtime();
}
inline ::google::protobuf::uint32 SnapShotUserCmd::deletecdtime() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotUserCmd.deletecdtime)
  return deletecdtime_;
}
inline void SnapShotUserCmd::set_deletecdtime(::google::protobuf::uint32 value) {
  set_has_deletecdtime();
  deletecdtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotUserCmd.deletecdtime)
}

// optional uint64 maincharid = 7;
inline bool SnapShotUserCmd::has_maincharid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SnapShotUserCmd::set_has_maincharid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SnapShotUserCmd::clear_has_maincharid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SnapShotUserCmd::clear_maincharid() {
  maincharid_ = GOOGLE_ULONGLONG(0);
  clear_has_maincharid();
}
inline ::google::protobuf::uint64 SnapShotUserCmd::maincharid() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotUserCmd.maincharid)
  return maincharid_;
}
inline void SnapShotUserCmd::set_maincharid(::google::protobuf::uint64 value) {
  set_has_maincharid();
  maincharid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotUserCmd.maincharid)
}

// -------------------------------------------------------------------

// ExtraData

// optional string phone = 1;
inline bool ExtraData::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraData::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraData::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraData::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& ExtraData::phone() const {
  // @@protoc_insertion_point(field_get:Cmd.ExtraData.phone)
  return *phone_;
}
inline void ExtraData::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ExtraData.phone)
}
inline void ExtraData::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ExtraData.phone)
}
inline void ExtraData::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ExtraData.phone)
}
inline ::std::string* ExtraData::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ExtraData.phone)
  return phone_;
}
inline ::std::string* ExtraData::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtraData::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ExtraData.phone)
}

// optional bool safedevice = 2;
inline bool ExtraData::has_safedevice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraData::set_has_safedevice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraData::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraData::clear_safedevice() {
  safedevice_ = false;
  clear_has_safedevice();
}
inline bool ExtraData::safedevice() const {
  // @@protoc_insertion_point(field_get:Cmd.ExtraData.safedevice)
  return safedevice_;
}
inline void ExtraData::set_safedevice(bool value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExtraData.safedevice)
}

// -------------------------------------------------------------------

// SelectRoleUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool SelectRoleUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectRoleUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectRoleUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectRoleUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command SelectRoleUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SelectRoleUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = SELECT_ROLE_USER_CMD];
inline bool SelectRoleUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectRoleUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectRoleUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectRoleUserCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam SelectRoleUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void SelectRoleUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.param)
}

// required uint64 id = 3;
inline bool SelectRoleUserCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectRoleUserCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectRoleUserCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectRoleUserCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SelectRoleUserCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.id)
  return id_;
}
inline void SelectRoleUserCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.id)
}

// optional uint32 zoneID = 4;
inline bool SelectRoleUserCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelectRoleUserCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelectRoleUserCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelectRoleUserCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 SelectRoleUserCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.zoneID)
  return zoneid_;
}
inline void SelectRoleUserCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.zoneID)
}

// optional uint64 accid = 5;
inline bool SelectRoleUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelectRoleUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelectRoleUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelectRoleUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 SelectRoleUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.accid)
  return accid_;
}
inline void SelectRoleUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.accid)
}

// optional string deviceid = 6;
inline bool SelectRoleUserCmd::has_deviceid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SelectRoleUserCmd::set_has_deviceid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SelectRoleUserCmd::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SelectRoleUserCmd::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& SelectRoleUserCmd::deviceid() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.deviceid)
  return *deviceid_;
}
inline void SelectRoleUserCmd::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.deviceid)
}
inline void SelectRoleUserCmd::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SelectRoleUserCmd.deviceid)
}
inline void SelectRoleUserCmd::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SelectRoleUserCmd.deviceid)
}
inline ::std::string* SelectRoleUserCmd::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SelectRoleUserCmd.deviceid)
  return deviceid_;
}
inline ::std::string* SelectRoleUserCmd::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SelectRoleUserCmd::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SelectRoleUserCmd.deviceid)
}

// optional string name = 7;
inline bool SelectRoleUserCmd::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SelectRoleUserCmd::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SelectRoleUserCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SelectRoleUserCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SelectRoleUserCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.name)
  return *name_;
}
inline void SelectRoleUserCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.name)
}
inline void SelectRoleUserCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SelectRoleUserCmd.name)
}
inline void SelectRoleUserCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SelectRoleUserCmd.name)
}
inline ::std::string* SelectRoleUserCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SelectRoleUserCmd.name)
  return name_;
}
inline ::std::string* SelectRoleUserCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SelectRoleUserCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SelectRoleUserCmd.name)
}

// optional string version = 8;
inline bool SelectRoleUserCmd::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SelectRoleUserCmd::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SelectRoleUserCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SelectRoleUserCmd::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& SelectRoleUserCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.version)
  return *version_;
}
inline void SelectRoleUserCmd::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.version)
}
inline void SelectRoleUserCmd::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SelectRoleUserCmd.version)
}
inline void SelectRoleUserCmd::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SelectRoleUserCmd.version)
}
inline ::std::string* SelectRoleUserCmd::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SelectRoleUserCmd.version)
  return version_;
}
inline ::std::string* SelectRoleUserCmd::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SelectRoleUserCmd::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SelectRoleUserCmd.version)
}

// optional .Cmd.ExtraData extraData = 9;
inline bool SelectRoleUserCmd::has_extradata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SelectRoleUserCmd::set_has_extradata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SelectRoleUserCmd::clear_has_extradata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SelectRoleUserCmd::clear_extradata() {
  if (extradata_ != NULL) extradata_->::Cmd::ExtraData::Clear();
  clear_has_extradata();
}
inline const ::Cmd::ExtraData& SelectRoleUserCmd::extradata() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.extraData)
  return extradata_ != NULL ? *extradata_ : *default_instance_->extradata_;
}
inline ::Cmd::ExtraData* SelectRoleUserCmd::mutable_extradata() {
  set_has_extradata();
  if (extradata_ == NULL) extradata_ = new ::Cmd::ExtraData;
  // @@protoc_insertion_point(field_mutable:Cmd.SelectRoleUserCmd.extraData)
  return extradata_;
}
inline ::Cmd::ExtraData* SelectRoleUserCmd::release_extradata() {
  clear_has_extradata();
  ::Cmd::ExtraData* temp = extradata_;
  extradata_ = NULL;
  return temp;
}
inline void SelectRoleUserCmd::set_allocated_extradata(::Cmd::ExtraData* extradata) {
  delete extradata_;
  extradata_ = extradata;
  if (extradata) {
    set_has_extradata();
  } else {
    clear_has_extradata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SelectRoleUserCmd.extraData)
}

// optional bool ignorepwd = 10;
inline bool SelectRoleUserCmd::has_ignorepwd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SelectRoleUserCmd::set_has_ignorepwd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SelectRoleUserCmd::clear_has_ignorepwd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SelectRoleUserCmd::clear_ignorepwd() {
  ignorepwd_ = false;
  clear_has_ignorepwd();
}
inline bool SelectRoleUserCmd::ignorepwd() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.ignorepwd)
  return ignorepwd_;
}
inline void SelectRoleUserCmd::set_ignorepwd(bool value) {
  set_has_ignorepwd();
  ignorepwd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.ignorepwd)
}

// optional string password = 11;
inline bool SelectRoleUserCmd::has_password() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SelectRoleUserCmd::set_has_password() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SelectRoleUserCmd::clear_has_password() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SelectRoleUserCmd::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SelectRoleUserCmd::password() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.password)
  return *password_;
}
inline void SelectRoleUserCmd::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.password)
}
inline void SelectRoleUserCmd::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SelectRoleUserCmd.password)
}
inline void SelectRoleUserCmd::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SelectRoleUserCmd.password)
}
inline ::std::string* SelectRoleUserCmd::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SelectRoleUserCmd.password)
  return password_;
}
inline ::std::string* SelectRoleUserCmd::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SelectRoleUserCmd::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SelectRoleUserCmd.password)
}

// optional uint32 resettime = 12;
inline bool SelectRoleUserCmd::has_resettime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SelectRoleUserCmd::set_has_resettime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SelectRoleUserCmd::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SelectRoleUserCmd::clear_resettime() {
  resettime_ = 0u;
  clear_has_resettime();
}
inline ::google::protobuf::uint32 SelectRoleUserCmd::resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.resettime)
  return resettime_;
}
inline void SelectRoleUserCmd::set_resettime(::google::protobuf::uint32 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.resettime)
}

// optional uint32 language = 13;
inline bool SelectRoleUserCmd::has_language() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SelectRoleUserCmd::set_has_language() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SelectRoleUserCmd::clear_has_language() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SelectRoleUserCmd::clear_language() {
  language_ = 0u;
  clear_has_language();
}
inline ::google::protobuf::uint32 SelectRoleUserCmd::language() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.language)
  return language_;
}
inline void SelectRoleUserCmd::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.language)
}

// optional bool realauthorized = 14;
inline bool SelectRoleUserCmd::has_realauthorized() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SelectRoleUserCmd::set_has_realauthorized() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SelectRoleUserCmd::clear_has_realauthorized() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SelectRoleUserCmd::clear_realauthorized() {
  realauthorized_ = false;
  clear_has_realauthorized();
}
inline bool SelectRoleUserCmd::realauthorized() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.realauthorized)
  return realauthorized_;
}
inline void SelectRoleUserCmd::set_realauthorized(bool value) {
  set_has_realauthorized();
  realauthorized_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.realauthorized)
}

// optional uint32 maxbaselv = 15;
inline bool SelectRoleUserCmd::has_maxbaselv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SelectRoleUserCmd::set_has_maxbaselv() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SelectRoleUserCmd::clear_has_maxbaselv() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SelectRoleUserCmd::clear_maxbaselv() {
  maxbaselv_ = 0u;
  clear_has_maxbaselv();
}
inline ::google::protobuf::uint32 SelectRoleUserCmd::maxbaselv() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectRoleUserCmd.maxbaselv)
  return maxbaselv_;
}
inline void SelectRoleUserCmd::set_maxbaselv(::google::protobuf::uint32 value) {
  set_has_maxbaselv();
  maxbaselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectRoleUserCmd.maxbaselv)
}

// -------------------------------------------------------------------

// LoginResultUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool LoginResultUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResultUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResultUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResultUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command LoginResultUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginResultUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LoginResultUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginResultUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = LOGIN_RESULT_USER_CMD];
inline bool LoginResultUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResultUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResultUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResultUserCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam LoginResultUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginResultUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void LoginResultUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginResultUserCmd.param)
}

// required uint32 ret = 3 [default = 0];
inline bool LoginResultUserCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResultUserCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResultUserCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResultUserCmd::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 LoginResultUserCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.LoginResultUserCmd.ret)
  return ret_;
}
inline void LoginResultUserCmd::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoginResultUserCmd.ret)
}

// -------------------------------------------------------------------

// DeleteCharUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool DeleteCharUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCharUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCharUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCharUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command DeleteCharUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DeleteCharUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = DELETE_CHAR_USER_CMD];
inline bool DeleteCharUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteCharUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteCharUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteCharUserCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam DeleteCharUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void DeleteCharUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharUserCmd.param)
}

// optional uint64 id = 3;
inline bool DeleteCharUserCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteCharUserCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeleteCharUserCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeleteCharUserCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 DeleteCharUserCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharUserCmd.id)
  return id_;
}
inline void DeleteCharUserCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharUserCmd.id)
}

// optional uint64 accid = 4;
inline bool DeleteCharUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeleteCharUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeleteCharUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeleteCharUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 DeleteCharUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharUserCmd.accid)
  return accid_;
}
inline void DeleteCharUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharUserCmd.accid)
}

// optional string version = 5;
inline bool DeleteCharUserCmd::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeleteCharUserCmd::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeleteCharUserCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeleteCharUserCmd::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& DeleteCharUserCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteCharUserCmd.version)
  return *version_;
}
inline void DeleteCharUserCmd::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DeleteCharUserCmd.version)
}
inline void DeleteCharUserCmd::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DeleteCharUserCmd.version)
}
inline void DeleteCharUserCmd::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DeleteCharUserCmd.version)
}
inline ::std::string* DeleteCharUserCmd::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DeleteCharUserCmd.version)
  return version_;
}
inline ::std::string* DeleteCharUserCmd::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteCharUserCmd::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DeleteCharUserCmd.version)
}

// -------------------------------------------------------------------

// HeartBeatUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool HeartBeatUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command HeartBeatUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HeartBeatUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HeartBeatUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HeartBeatUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = HEART_BEAT_USER_CMD];
inline bool HeartBeatUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatUserCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam HeartBeatUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HeartBeatUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void HeartBeatUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HeartBeatUserCmd.param)
}

// optional uint64 time = 3 [default = 0];
inline bool HeartBeatUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartBeatUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartBeatUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartBeatUserCmd::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 HeartBeatUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.HeartBeatUserCmd.time)
  return time_;
}
inline void HeartBeatUserCmd::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HeartBeatUserCmd.time)
}

// -------------------------------------------------------------------

// ServerTimeUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool ServerTimeUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerTimeUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerTimeUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerTimeUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command ServerTimeUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTimeUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ServerTimeUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTimeUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = SERVERTIME_USER_CMD];
inline bool ServerTimeUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerTimeUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerTimeUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerTimeUserCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam ServerTimeUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTimeUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void ServerTimeUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTimeUserCmd.param)
}

// optional uint64 time = 3 [default = 0];
inline bool ServerTimeUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerTimeUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerTimeUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerTimeUserCmd::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 ServerTimeUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTimeUserCmd.time)
  return time_;
}
inline void ServerTimeUserCmd::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTimeUserCmd.time)
}

// -------------------------------------------------------------------

// GMDeleteCharUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool GMDeleteCharUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMDeleteCharUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMDeleteCharUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMDeleteCharUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command GMDeleteCharUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GMDeleteCharUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GMDeleteCharUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GMDeleteCharUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = GM_DELETE_CHAR_USER_CMD];
inline bool GMDeleteCharUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMDeleteCharUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMDeleteCharUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMDeleteCharUserCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam GMDeleteCharUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GMDeleteCharUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void GMDeleteCharUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GMDeleteCharUserCmd.param)
}

// optional uint64 accid = 3 [default = 0];
inline bool GMDeleteCharUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMDeleteCharUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMDeleteCharUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMDeleteCharUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 GMDeleteCharUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.GMDeleteCharUserCmd.accid)
  return accid_;
}
inline void GMDeleteCharUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GMDeleteCharUserCmd.accid)
}

// optional uint32 zoneid = 4 [default = 0];
inline bool GMDeleteCharUserCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMDeleteCharUserCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMDeleteCharUserCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMDeleteCharUserCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 GMDeleteCharUserCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.GMDeleteCharUserCmd.zoneid)
  return zoneid_;
}
inline void GMDeleteCharUserCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GMDeleteCharUserCmd.zoneid)
}

// -------------------------------------------------------------------

// ClientInfoUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool ClientInfoUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientInfoUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientInfoUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientInfoUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command ClientInfoUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientInfoUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ClientInfoUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientInfoUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_INFO_USER_CMD];
inline bool ClientInfoUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientInfoUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientInfoUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientInfoUserCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam ClientInfoUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientInfoUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void ClientInfoUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientInfoUserCmd.param)
}

// optional string ip = 3;
inline bool ClientInfoUserCmd::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientInfoUserCmd::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientInfoUserCmd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientInfoUserCmd::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ClientInfoUserCmd::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientInfoUserCmd.ip)
  return *ip_;
}
inline void ClientInfoUserCmd::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ClientInfoUserCmd.ip)
}
inline void ClientInfoUserCmd::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ClientInfoUserCmd.ip)
}
inline void ClientInfoUserCmd::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ClientInfoUserCmd.ip)
}
inline ::std::string* ClientInfoUserCmd::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ClientInfoUserCmd.ip)
  return ip_;
}
inline ::std::string* ClientInfoUserCmd::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientInfoUserCmd::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ClientInfoUserCmd.ip)
}

// optional uint32 delay = 4 [default = 0];
inline bool ClientInfoUserCmd::has_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientInfoUserCmd::set_has_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientInfoUserCmd::clear_has_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientInfoUserCmd::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 ClientInfoUserCmd::delay() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientInfoUserCmd.delay)
  return delay_;
}
inline void ClientInfoUserCmd::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientInfoUserCmd.delay)
}

// -------------------------------------------------------------------

// ReqLoginUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool ReqLoginUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLoginUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLoginUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLoginUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command ReqLoginUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqLoginUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_USER_CMD];
inline bool ReqLoginUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLoginUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLoginUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLoginUserCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam ReqLoginUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void ReqLoginUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.param)
}

// optional uint64 accid = 3 [default = 0];
inline bool ReqLoginUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqLoginUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqLoginUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqLoginUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 ReqLoginUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.accid)
  return accid_;
}
inline void ReqLoginUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.accid)
}

// optional string sha1 = 4;
inline bool ReqLoginUserCmd::has_sha1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqLoginUserCmd::set_has_sha1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqLoginUserCmd::clear_has_sha1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqLoginUserCmd::clear_sha1() {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_->clear();
  }
  clear_has_sha1();
}
inline const ::std::string& ReqLoginUserCmd::sha1() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.sha1)
  return *sha1_;
}
inline void ReqLoginUserCmd::set_sha1(const ::std::string& value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.sha1)
}
inline void ReqLoginUserCmd::set_sha1(const char* value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.sha1)
}
inline void ReqLoginUserCmd::set_sha1(const char* value, size_t size) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.sha1)
}
inline ::std::string* ReqLoginUserCmd::mutable_sha1() {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.sha1)
  return sha1_;
}
inline ::std::string* ReqLoginUserCmd::release_sha1() {
  clear_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sha1_;
    sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_sha1(::std::string* sha1) {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha1_;
  }
  if (sha1) {
    set_has_sha1();
    sha1_ = sha1;
  } else {
    clear_has_sha1();
    sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.sha1)
}

// optional uint32 zoneid = 5 [default = 0];
inline bool ReqLoginUserCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqLoginUserCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqLoginUserCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqLoginUserCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ReqLoginUserCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.zoneid)
  return zoneid_;
}
inline void ReqLoginUserCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.zoneid)
}

// optional uint32 timestamp = 6 [default = 0];
inline bool ReqLoginUserCmd::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqLoginUserCmd::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqLoginUserCmd::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqLoginUserCmd::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 ReqLoginUserCmd::timestamp() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.timestamp)
  return timestamp_;
}
inline void ReqLoginUserCmd::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.timestamp)
}

// optional string version = 7;
inline bool ReqLoginUserCmd::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqLoginUserCmd::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqLoginUserCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqLoginUserCmd::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ReqLoginUserCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.version)
  return *version_;
}
inline void ReqLoginUserCmd::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.version)
}
inline void ReqLoginUserCmd::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.version)
}
inline void ReqLoginUserCmd::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.version)
}
inline ::std::string* ReqLoginUserCmd::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.version)
  return version_;
}
inline ::std::string* ReqLoginUserCmd::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.version)
}

// optional string domain = 8;
inline bool ReqLoginUserCmd::has_domain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqLoginUserCmd::set_has_domain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqLoginUserCmd::clear_has_domain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqLoginUserCmd::clear_domain() {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& ReqLoginUserCmd::domain() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.domain)
  return *domain_;
}
inline void ReqLoginUserCmd::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.domain)
}
inline void ReqLoginUserCmd::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.domain)
}
inline void ReqLoginUserCmd::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.domain)
}
inline ::std::string* ReqLoginUserCmd::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    domain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.domain)
  return domain_;
}
inline ::std::string* ReqLoginUserCmd::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.domain)
}

// optional string ip = 9;
inline bool ReqLoginUserCmd::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqLoginUserCmd::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqLoginUserCmd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqLoginUserCmd::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ReqLoginUserCmd::ip() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.ip)
  return *ip_;
}
inline void ReqLoginUserCmd::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.ip)
}
inline void ReqLoginUserCmd::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.ip)
}
inline void ReqLoginUserCmd::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.ip)
}
inline ::std::string* ReqLoginUserCmd::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.ip)
  return ip_;
}
inline ::std::string* ReqLoginUserCmd::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.ip)
}

// optional string device = 10;
inline bool ReqLoginUserCmd::has_device() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqLoginUserCmd::set_has_device() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqLoginUserCmd::clear_has_device() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqLoginUserCmd::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& ReqLoginUserCmd::device() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.device)
  return *device_;
}
inline void ReqLoginUserCmd::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.device)
}
inline void ReqLoginUserCmd::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.device)
}
inline void ReqLoginUserCmd::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.device)
}
inline ::std::string* ReqLoginUserCmd::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.device)
  return device_;
}
inline ::std::string* ReqLoginUserCmd::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.device)
}

// optional string phone = 11;
inline bool ReqLoginUserCmd::has_phone() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqLoginUserCmd::set_has_phone() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqLoginUserCmd::clear_has_phone() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqLoginUserCmd::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& ReqLoginUserCmd::phone() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.phone)
  return *phone_;
}
inline void ReqLoginUserCmd::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.phone)
}
inline void ReqLoginUserCmd::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.phone)
}
inline void ReqLoginUserCmd::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.phone)
}
inline ::std::string* ReqLoginUserCmd::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.phone)
  return phone_;
}
inline ::std::string* ReqLoginUserCmd::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.phone)
}

// optional string safe_device = 12;
inline bool ReqLoginUserCmd::has_safe_device() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReqLoginUserCmd::set_has_safe_device() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReqLoginUserCmd::clear_has_safe_device() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReqLoginUserCmd::clear_safe_device() {
  if (safe_device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safe_device_->clear();
  }
  clear_has_safe_device();
}
inline const ::std::string& ReqLoginUserCmd::safe_device() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.safe_device)
  return *safe_device_;
}
inline void ReqLoginUserCmd::set_safe_device(const ::std::string& value) {
  set_has_safe_device();
  if (safe_device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safe_device_ = new ::std::string;
  }
  safe_device_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.safe_device)
}
inline void ReqLoginUserCmd::set_safe_device(const char* value) {
  set_has_safe_device();
  if (safe_device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safe_device_ = new ::std::string;
  }
  safe_device_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.safe_device)
}
inline void ReqLoginUserCmd::set_safe_device(const char* value, size_t size) {
  set_has_safe_device();
  if (safe_device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safe_device_ = new ::std::string;
  }
  safe_device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.safe_device)
}
inline ::std::string* ReqLoginUserCmd::mutable_safe_device() {
  set_has_safe_device();
  if (safe_device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safe_device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.safe_device)
  return safe_device_;
}
inline ::std::string* ReqLoginUserCmd::release_safe_device() {
  clear_has_safe_device();
  if (safe_device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = safe_device_;
    safe_device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_safe_device(::std::string* safe_device) {
  if (safe_device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete safe_device_;
  }
  if (safe_device) {
    set_has_safe_device();
    safe_device_ = safe_device;
  } else {
    clear_has_safe_device();
    safe_device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.safe_device)
}

// optional uint32 language = 13;
inline bool ReqLoginUserCmd::has_language() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReqLoginUserCmd::set_has_language() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReqLoginUserCmd::clear_has_language() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReqLoginUserCmd::clear_language() {
  language_ = 0u;
  clear_has_language();
}
inline ::google::protobuf::uint32 ReqLoginUserCmd::language() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.language)
  return language_;
}
inline void ReqLoginUserCmd::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.language)
}

// optional uint32 site = 14;
inline bool ReqLoginUserCmd::has_site() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReqLoginUserCmd::set_has_site() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReqLoginUserCmd::clear_has_site() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReqLoginUserCmd::clear_site() {
  site_ = 0u;
  clear_has_site();
}
inline ::google::protobuf::uint32 ReqLoginUserCmd::site() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.site)
  return site_;
}
inline void ReqLoginUserCmd::set_site(::google::protobuf::uint32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.site)
}

// optional string authorize = 15;
inline bool ReqLoginUserCmd::has_authorize() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReqLoginUserCmd::set_has_authorize() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReqLoginUserCmd::clear_has_authorize() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReqLoginUserCmd::clear_authorize() {
  if (authorize_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorize_->clear();
  }
  clear_has_authorize();
}
inline const ::std::string& ReqLoginUserCmd::authorize() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginUserCmd.authorize)
  return *authorize_;
}
inline void ReqLoginUserCmd::set_authorize(const ::std::string& value) {
  set_has_authorize();
  if (authorize_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorize_ = new ::std::string;
  }
  authorize_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginUserCmd.authorize)
}
inline void ReqLoginUserCmd::set_authorize(const char* value) {
  set_has_authorize();
  if (authorize_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorize_ = new ::std::string;
  }
  authorize_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginUserCmd.authorize)
}
inline void ReqLoginUserCmd::set_authorize(const char* value, size_t size) {
  set_has_authorize();
  if (authorize_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorize_ = new ::std::string;
  }
  authorize_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginUserCmd.authorize)
}
inline ::std::string* ReqLoginUserCmd::mutable_authorize() {
  set_has_authorize();
  if (authorize_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorize_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginUserCmd.authorize)
  return authorize_;
}
inline ::std::string* ReqLoginUserCmd::release_authorize() {
  clear_has_authorize();
  if (authorize_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authorize_;
    authorize_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginUserCmd::set_allocated_authorize(::std::string* authorize) {
  if (authorize_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authorize_;
  }
  if (authorize) {
    set_has_authorize();
    authorize_ = authorize;
  } else {
    clear_has_authorize();
    authorize_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginUserCmd.authorize)
}

// -------------------------------------------------------------------

// ReqLoginParamUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool ReqLoginParamUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLoginParamUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLoginParamUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLoginParamUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command ReqLoginParamUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginParamUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqLoginParamUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginParamUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = REQ_LOGIN_PARAM_USER_CMD];
inline bool ReqLoginParamUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLoginParamUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLoginParamUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLoginParamUserCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam ReqLoginParamUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginParamUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void ReqLoginParamUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginParamUserCmd.param)
}

// optional uint64 accid = 3 [default = 0];
inline bool ReqLoginParamUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqLoginParamUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqLoginParamUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqLoginParamUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 ReqLoginParamUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginParamUserCmd.accid)
  return accid_;
}
inline void ReqLoginParamUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginParamUserCmd.accid)
}

// optional string sha1 = 4;
inline bool ReqLoginParamUserCmd::has_sha1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqLoginParamUserCmd::set_has_sha1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqLoginParamUserCmd::clear_has_sha1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqLoginParamUserCmd::clear_sha1() {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_->clear();
  }
  clear_has_sha1();
}
inline const ::std::string& ReqLoginParamUserCmd::sha1() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginParamUserCmd.sha1)
  return *sha1_;
}
inline void ReqLoginParamUserCmd::set_sha1(const ::std::string& value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginParamUserCmd.sha1)
}
inline void ReqLoginParamUserCmd::set_sha1(const char* value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginParamUserCmd.sha1)
}
inline void ReqLoginParamUserCmd::set_sha1(const char* value, size_t size) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginParamUserCmd.sha1)
}
inline ::std::string* ReqLoginParamUserCmd::mutable_sha1() {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginParamUserCmd.sha1)
  return sha1_;
}
inline ::std::string* ReqLoginParamUserCmd::release_sha1() {
  clear_has_sha1();
  if (sha1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sha1_;
    sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginParamUserCmd::set_allocated_sha1(::std::string* sha1) {
  if (sha1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha1_;
  }
  if (sha1) {
    set_has_sha1();
    sha1_ = sha1;
  } else {
    clear_has_sha1();
    sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginParamUserCmd.sha1)
}

// optional uint32 timestamp = 5 [default = 0];
inline bool ReqLoginParamUserCmd::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqLoginParamUserCmd::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqLoginParamUserCmd::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqLoginParamUserCmd::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 ReqLoginParamUserCmd::timestamp() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginParamUserCmd.timestamp)
  return timestamp_;
}
inline void ReqLoginParamUserCmd::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginParamUserCmd.timestamp)
}

// optional string phone = 6;
inline bool ReqLoginParamUserCmd::has_phone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqLoginParamUserCmd::set_has_phone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqLoginParamUserCmd::clear_has_phone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqLoginParamUserCmd::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& ReqLoginParamUserCmd::phone() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginParamUserCmd.phone)
  return *phone_;
}
inline void ReqLoginParamUserCmd::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginParamUserCmd.phone)
}
inline void ReqLoginParamUserCmd::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqLoginParamUserCmd.phone)
}
inline void ReqLoginParamUserCmd::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqLoginParamUserCmd.phone)
}
inline ::std::string* ReqLoginParamUserCmd::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqLoginParamUserCmd.phone)
  return phone_;
}
inline ::std::string* ReqLoginParamUserCmd::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqLoginParamUserCmd::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqLoginParamUserCmd.phone)
}

// optional uint32 version = 7 [default = 0];
inline bool ReqLoginParamUserCmd::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqLoginParamUserCmd::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqLoginParamUserCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqLoginParamUserCmd::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ReqLoginParamUserCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqLoginParamUserCmd.version)
  return version_;
}
inline void ReqLoginParamUserCmd::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqLoginParamUserCmd.version)
}

// -------------------------------------------------------------------

// KickParamUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool KickParamUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickParamUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickParamUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickParamUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command KickParamUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KickParamUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KickParamUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickParamUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = KICK_PARAM_USER_CMD];
inline bool KickParamUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickParamUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickParamUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickParamUserCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam KickParamUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KickParamUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void KickParamUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickParamUserCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool KickParamUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickParamUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickParamUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickParamUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 KickParamUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickParamUserCmd.charid)
  return charid_;
}
inline void KickParamUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickParamUserCmd.charid)
}

// optional uint64 accid = 4 [default = 0];
inline bool KickParamUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickParamUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickParamUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickParamUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 KickParamUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickParamUserCmd.accid)
  return accid_;
}
inline void KickParamUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickParamUserCmd.accid)
}

// -------------------------------------------------------------------

// CancelDeleteCharUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool CancelDeleteCharUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancelDeleteCharUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancelDeleteCharUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancelDeleteCharUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command CancelDeleteCharUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelDeleteCharUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CancelDeleteCharUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelDeleteCharUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = CANCEL_DELETE_CHAR_USER_CMD];
inline bool CancelDeleteCharUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CancelDeleteCharUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CancelDeleteCharUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CancelDeleteCharUserCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam CancelDeleteCharUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelDeleteCharUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void CancelDeleteCharUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelDeleteCharUserCmd.param)
}

// optional uint64 id = 3;
inline bool CancelDeleteCharUserCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CancelDeleteCharUserCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CancelDeleteCharUserCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CancelDeleteCharUserCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CancelDeleteCharUserCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelDeleteCharUserCmd.id)
  return id_;
}
inline void CancelDeleteCharUserCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelDeleteCharUserCmd.id)
}

// optional uint64 accid = 4;
inline bool CancelDeleteCharUserCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CancelDeleteCharUserCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CancelDeleteCharUserCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CancelDeleteCharUserCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 CancelDeleteCharUserCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelDeleteCharUserCmd.accid)
  return accid_;
}
inline void CancelDeleteCharUserCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelDeleteCharUserCmd.accid)
}

// -------------------------------------------------------------------

// ClientFrameUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool ClientFrameUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientFrameUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientFrameUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientFrameUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command ClientFrameUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientFrameUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ClientFrameUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientFrameUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = CLIENT_FRAME_USER_CMD];
inline bool ClientFrameUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientFrameUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientFrameUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientFrameUserCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam ClientFrameUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientFrameUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void ClientFrameUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientFrameUserCmd.param)
}

// optional uint32 frame = 3;
inline bool ClientFrameUserCmd::has_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientFrameUserCmd::set_has_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientFrameUserCmd::clear_has_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientFrameUserCmd::clear_frame() {
  frame_ = 0u;
  clear_has_frame();
}
inline ::google::protobuf::uint32 ClientFrameUserCmd::frame() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientFrameUserCmd.frame)
  return frame_;
}
inline void ClientFrameUserCmd::set_frame(::google::protobuf::uint32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientFrameUserCmd.frame)
}

// -------------------------------------------------------------------

// SafeDeviceUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool SafeDeviceUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeDeviceUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeDeviceUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeDeviceUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command SafeDeviceUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SafeDeviceUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SafeDeviceUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SafeDeviceUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = SAFE_DEVICE_USER_CMD];
inline bool SafeDeviceUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeDeviceUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeDeviceUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeDeviceUserCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam SafeDeviceUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SafeDeviceUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void SafeDeviceUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SafeDeviceUserCmd.param)
}

// optional bool safe = 3;
inline bool SafeDeviceUserCmd::has_safe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SafeDeviceUserCmd::set_has_safe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SafeDeviceUserCmd::clear_has_safe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SafeDeviceUserCmd::clear_safe() {
  safe_ = false;
  clear_has_safe();
}
inline bool SafeDeviceUserCmd::safe() const {
  // @@protoc_insertion_point(field_get:Cmd.SafeDeviceUserCmd.safe)
  return safe_;
}
inline void SafeDeviceUserCmd::set_safe(bool value) {
  set_has_safe();
  safe_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SafeDeviceUserCmd.safe)
}

// -------------------------------------------------------------------

// ConfirmAuthorizeUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool ConfirmAuthorizeUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfirmAuthorizeUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfirmAuthorizeUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfirmAuthorizeUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command ConfirmAuthorizeUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmAuthorizeUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ConfirmAuthorizeUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmAuthorizeUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = CONFIRM_AUTHORIZE_USER_CMD];
inline bool ConfirmAuthorizeUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfirmAuthorizeUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfirmAuthorizeUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfirmAuthorizeUserCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam ConfirmAuthorizeUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmAuthorizeUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void ConfirmAuthorizeUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmAuthorizeUserCmd.param)
}

// optional string password = 3;
inline bool ConfirmAuthorizeUserCmd::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfirmAuthorizeUserCmd::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfirmAuthorizeUserCmd::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfirmAuthorizeUserCmd::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& ConfirmAuthorizeUserCmd::password() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmAuthorizeUserCmd.password)
  return *password_;
}
inline void ConfirmAuthorizeUserCmd::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ConfirmAuthorizeUserCmd.password)
}
inline void ConfirmAuthorizeUserCmd::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ConfirmAuthorizeUserCmd.password)
}
inline void ConfirmAuthorizeUserCmd::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ConfirmAuthorizeUserCmd.password)
}
inline ::std::string* ConfirmAuthorizeUserCmd::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ConfirmAuthorizeUserCmd.password)
  return password_;
}
inline ::std::string* ConfirmAuthorizeUserCmd::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfirmAuthorizeUserCmd::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ConfirmAuthorizeUserCmd.password)
}

// optional bool success = 4;
inline bool ConfirmAuthorizeUserCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfirmAuthorizeUserCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfirmAuthorizeUserCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfirmAuthorizeUserCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool ConfirmAuthorizeUserCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmAuthorizeUserCmd.success)
  return success_;
}
inline void ConfirmAuthorizeUserCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmAuthorizeUserCmd.success)
}

// optional uint32 resettime = 5;
inline bool ConfirmAuthorizeUserCmd::has_resettime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfirmAuthorizeUserCmd::set_has_resettime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfirmAuthorizeUserCmd::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfirmAuthorizeUserCmd::clear_resettime() {
  resettime_ = 0u;
  clear_has_resettime();
}
inline ::google::protobuf::uint32 ConfirmAuthorizeUserCmd::resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmAuthorizeUserCmd.resettime)
  return resettime_;
}
inline void ConfirmAuthorizeUserCmd::set_resettime(::google::protobuf::uint32 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmAuthorizeUserCmd.resettime)
}

// optional bool hasset = 6;
inline bool ConfirmAuthorizeUserCmd::has_hasset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfirmAuthorizeUserCmd::set_has_hasset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfirmAuthorizeUserCmd::clear_has_hasset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfirmAuthorizeUserCmd::clear_hasset() {
  hasset_ = false;
  clear_has_hasset();
}
inline bool ConfirmAuthorizeUserCmd::hasset() const {
  // @@protoc_insertion_point(field_get:Cmd.ConfirmAuthorizeUserCmd.hasset)
  return hasset_;
}
inline void ConfirmAuthorizeUserCmd::set_hasset(bool value) {
  set_has_hasset();
  hasset_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ConfirmAuthorizeUserCmd.hasset)
}

// -------------------------------------------------------------------

// SyncAuthorizeGateCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool SyncAuthorizeGateCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncAuthorizeGateCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncAuthorizeGateCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncAuthorizeGateCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command SyncAuthorizeGateCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncAuthorizeGateCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SyncAuthorizeGateCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncAuthorizeGateCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = SYNC_AUTHORIZE_GATE_CMD];
inline bool SyncAuthorizeGateCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncAuthorizeGateCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncAuthorizeGateCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncAuthorizeGateCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam SyncAuthorizeGateCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncAuthorizeGateCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void SyncAuthorizeGateCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncAuthorizeGateCmd.param)
}

// optional bool ignorepwd = 3;
inline bool SyncAuthorizeGateCmd::has_ignorepwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncAuthorizeGateCmd::set_has_ignorepwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncAuthorizeGateCmd::clear_has_ignorepwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncAuthorizeGateCmd::clear_ignorepwd() {
  ignorepwd_ = false;
  clear_has_ignorepwd();
}
inline bool SyncAuthorizeGateCmd::ignorepwd() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncAuthorizeGateCmd.ignorepwd)
  return ignorepwd_;
}
inline void SyncAuthorizeGateCmd::set_ignorepwd(bool value) {
  set_has_ignorepwd();
  ignorepwd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncAuthorizeGateCmd.ignorepwd)
}

// optional string password = 4;
inline bool SyncAuthorizeGateCmd::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncAuthorizeGateCmd::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncAuthorizeGateCmd::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncAuthorizeGateCmd::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SyncAuthorizeGateCmd::password() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncAuthorizeGateCmd.password)
  return *password_;
}
inline void SyncAuthorizeGateCmd::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SyncAuthorizeGateCmd.password)
}
inline void SyncAuthorizeGateCmd::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SyncAuthorizeGateCmd.password)
}
inline void SyncAuthorizeGateCmd::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SyncAuthorizeGateCmd.password)
}
inline ::std::string* SyncAuthorizeGateCmd::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SyncAuthorizeGateCmd.password)
  return password_;
}
inline ::std::string* SyncAuthorizeGateCmd::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SyncAuthorizeGateCmd::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SyncAuthorizeGateCmd.password)
}

// optional string version = 5;
inline bool SyncAuthorizeGateCmd::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncAuthorizeGateCmd::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncAuthorizeGateCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncAuthorizeGateCmd::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& SyncAuthorizeGateCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncAuthorizeGateCmd.version)
  return *version_;
}
inline void SyncAuthorizeGateCmd::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SyncAuthorizeGateCmd.version)
}
inline void SyncAuthorizeGateCmd::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SyncAuthorizeGateCmd.version)
}
inline void SyncAuthorizeGateCmd::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SyncAuthorizeGateCmd.version)
}
inline ::std::string* SyncAuthorizeGateCmd::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SyncAuthorizeGateCmd.version)
  return version_;
}
inline ::std::string* SyncAuthorizeGateCmd::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SyncAuthorizeGateCmd::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SyncAuthorizeGateCmd.version)
}

// optional uint64 accid = 6;
inline bool SyncAuthorizeGateCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncAuthorizeGateCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncAuthorizeGateCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncAuthorizeGateCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 SyncAuthorizeGateCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncAuthorizeGateCmd.accid)
  return accid_;
}
inline void SyncAuthorizeGateCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncAuthorizeGateCmd.accid)
}

// optional uint32 resettime = 7;
inline bool SyncAuthorizeGateCmd::has_resettime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SyncAuthorizeGateCmd::set_has_resettime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SyncAuthorizeGateCmd::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SyncAuthorizeGateCmd::clear_resettime() {
  resettime_ = 0u;
  clear_has_resettime();
}
inline ::google::protobuf::uint32 SyncAuthorizeGateCmd::resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.SyncAuthorizeGateCmd.resettime)
  return resettime_;
}
inline void SyncAuthorizeGateCmd::set_resettime(::google::protobuf::uint32 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SyncAuthorizeGateCmd.resettime)
}

// -------------------------------------------------------------------

// RealAuthorizeUserCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool RealAuthorizeUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealAuthorizeUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealAuthorizeUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealAuthorizeUserCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command RealAuthorizeUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RealAuthorizeUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RealAuthorizeUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RealAuthorizeUserCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_USER_CMD];
inline bool RealAuthorizeUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RealAuthorizeUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RealAuthorizeUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RealAuthorizeUserCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam RealAuthorizeUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RealAuthorizeUserCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void RealAuthorizeUserCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RealAuthorizeUserCmd.param)
}

// optional string authoriz_state = 3;
inline bool RealAuthorizeUserCmd::has_authoriz_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RealAuthorizeUserCmd::set_has_authoriz_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RealAuthorizeUserCmd::clear_has_authoriz_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RealAuthorizeUserCmd::clear_authoriz_state() {
  if (authoriz_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoriz_state_->clear();
  }
  clear_has_authoriz_state();
}
inline const ::std::string& RealAuthorizeUserCmd::authoriz_state() const {
  // @@protoc_insertion_point(field_get:Cmd.RealAuthorizeUserCmd.authoriz_state)
  return *authoriz_state_;
}
inline void RealAuthorizeUserCmd::set_authoriz_state(const ::std::string& value) {
  set_has_authoriz_state();
  if (authoriz_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoriz_state_ = new ::std::string;
  }
  authoriz_state_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RealAuthorizeUserCmd.authoriz_state)
}
inline void RealAuthorizeUserCmd::set_authoriz_state(const char* value) {
  set_has_authoriz_state();
  if (authoriz_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoriz_state_ = new ::std::string;
  }
  authoriz_state_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RealAuthorizeUserCmd.authoriz_state)
}
inline void RealAuthorizeUserCmd::set_authoriz_state(const char* value, size_t size) {
  set_has_authoriz_state();
  if (authoriz_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoriz_state_ = new ::std::string;
  }
  authoriz_state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RealAuthorizeUserCmd.authoriz_state)
}
inline ::std::string* RealAuthorizeUserCmd::mutable_authoriz_state() {
  set_has_authoriz_state();
  if (authoriz_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoriz_state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RealAuthorizeUserCmd.authoriz_state)
  return authoriz_state_;
}
inline ::std::string* RealAuthorizeUserCmd::release_authoriz_state() {
  clear_has_authoriz_state();
  if (authoriz_state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoriz_state_;
    authoriz_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RealAuthorizeUserCmd::set_allocated_authoriz_state(::std::string* authoriz_state) {
  if (authoriz_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoriz_state_;
  }
  if (authoriz_state) {
    set_has_authoriz_state();
    authoriz_state_ = authoriz_state;
  } else {
    clear_has_authoriz_state();
    authoriz_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RealAuthorizeUserCmd.authoriz_state)
}

// optional bool authorized = 4;
inline bool RealAuthorizeUserCmd::has_authorized() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RealAuthorizeUserCmd::set_has_authorized() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RealAuthorizeUserCmd::clear_has_authorized() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RealAuthorizeUserCmd::clear_authorized() {
  authorized_ = false;
  clear_has_authorized();
}
inline bool RealAuthorizeUserCmd::authorized() const {
  // @@protoc_insertion_point(field_get:Cmd.RealAuthorizeUserCmd.authorized)
  return authorized_;
}
inline void RealAuthorizeUserCmd::set_authorized(bool value) {
  set_has_authorized();
  authorized_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RealAuthorizeUserCmd.authorized)
}

// -------------------------------------------------------------------

// RealAuthorizeServerCmd

// optional .Cmd.Command cmd = 1 [default = LOGIN_USER_PROTOCMD];
inline bool RealAuthorizeServerCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealAuthorizeServerCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealAuthorizeServerCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealAuthorizeServerCmd::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::Command RealAuthorizeServerCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RealAuthorizeServerCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RealAuthorizeServerCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RealAuthorizeServerCmd.cmd)
}

// optional .Cmd.LoginCmdParam param = 2 [default = REAL_AUTHORIZE_SEERVER_CMD];
inline bool RealAuthorizeServerCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RealAuthorizeServerCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RealAuthorizeServerCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RealAuthorizeServerCmd::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::LoginCmdParam RealAuthorizeServerCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RealAuthorizeServerCmd.param)
  return static_cast< ::Cmd::LoginCmdParam >(param_);
}
inline void RealAuthorizeServerCmd::set_param(::Cmd::LoginCmdParam value) {
  assert(::Cmd::LoginCmdParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RealAuthorizeServerCmd.param)
}

// optional bool authorized = 3;
inline bool RealAuthorizeServerCmd::has_authorized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RealAuthorizeServerCmd::set_has_authorized() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RealAuthorizeServerCmd::clear_has_authorized() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RealAuthorizeServerCmd::clear_authorized() {
  authorized_ = false;
  clear_has_authorized();
}
inline bool RealAuthorizeServerCmd::authorized() const {
  // @@protoc_insertion_point(field_get:Cmd.RealAuthorizeServerCmd.authorized)
  return authorized_;
}
inline void RealAuthorizeServerCmd::set_authorized(bool value) {
  set_has_authorized();
  authorized_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RealAuthorizeServerCmd.authorized)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::LoginCmdParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::LoginCmdParam>() {
  return ::Cmd::LoginCmdParam_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginUserCmd_2eproto__INCLUDED
