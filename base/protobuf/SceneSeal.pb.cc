// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneSeal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneSeal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* SealItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginSeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginSeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndSeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndSeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealUserLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealUserLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealQueryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealQueryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealAcceptCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealAcceptCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SealParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESealType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFinishType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneSeal_2eproto() {
  protobuf_AddDesc_SceneSeal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneSeal.proto");
  GOOGLE_CHECK(file != NULL);
  SealItem_descriptor_ = file->message_type(0);
  static const int SealItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, ownseal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, sealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, issealing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, etype_),
  };
  SealItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SealItem_descriptor_,
      SealItem::default_instance_,
      SealItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SealItem));
  SealData_descriptor_ = file->message_type(1);
  static const int SealData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealData, items_),
  };
  SealData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SealData_descriptor_,
      SealData::default_instance_,
      SealData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SealData));
  QuerySeal_descriptor_ = file->message_type(2);
  static const int QuerySeal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySeal, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySeal, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySeal, datas_),
  };
  QuerySeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySeal_descriptor_,
      QuerySeal::default_instance_,
      QuerySeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySeal));
  UpdateSeal_descriptor_ = file->message_type(3);
  static const int UpdateSeal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSeal, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSeal, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSeal, newdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSeal, deldata_),
  };
  UpdateSeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSeal_descriptor_,
      UpdateSeal::default_instance_,
      UpdateSeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSeal));
  SealTimer_descriptor_ = file->message_type(4);
  static const int SealTimer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, curvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, maxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, stoptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, maxtime_),
  };
  SealTimer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SealTimer_descriptor_,
      SealTimer::default_instance_,
      SealTimer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealTimer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SealTimer));
  BeginSeal_descriptor_ = file->message_type(5);
  static const int BeginSeal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginSeal, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginSeal, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginSeal, sealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginSeal, etype_),
  };
  BeginSeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginSeal_descriptor_,
      BeginSeal::default_instance_,
      BeginSeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginSeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginSeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginSeal));
  EndSeal_descriptor_ = file->message_type(6);
  static const int EndSeal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSeal, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSeal, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSeal, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSeal, sealid_),
  };
  EndSeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndSeal_descriptor_,
      EndSeal::default_instance_,
      EndSeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndSeal));
  SealUserLeave_descriptor_ = file->message_type(7);
  static const int SealUserLeave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealUserLeave, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealUserLeave, param_),
  };
  SealUserLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SealUserLeave_descriptor_,
      SealUserLeave::default_instance_,
      SealUserLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealUserLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealUserLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SealUserLeave));
  SealQueryList_descriptor_ = file->message_type(8);
  static const int SealQueryList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealQueryList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealQueryList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealQueryList, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealQueryList, donetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealQueryList, maxtimes_),
  };
  SealQueryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SealQueryList_descriptor_,
      SealQueryList::default_instance_,
      SealQueryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealQueryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealQueryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SealQueryList));
  SealAcceptCmd_descriptor_ = file->message_type(9);
  static const int SealAcceptCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealAcceptCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealAcceptCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealAcceptCmd, seal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealAcceptCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealAcceptCmd, abandon_),
  };
  SealAcceptCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SealAcceptCmd_descriptor_,
      SealAcceptCmd::default_instance_,
      SealAcceptCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealAcceptCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealAcceptCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SealAcceptCmd));
  SealParam_descriptor_ = file->enum_type(0);
  ESealType_descriptor_ = file->enum_type(1);
  EFinishType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneSeal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SealItem_descriptor_, &SealItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SealData_descriptor_, &SealData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySeal_descriptor_, &QuerySeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSeal_descriptor_, &UpdateSeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SealTimer_descriptor_, &SealTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginSeal_descriptor_, &BeginSeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndSeal_descriptor_, &EndSeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SealUserLeave_descriptor_, &SealUserLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SealQueryList_descriptor_, &SealQueryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SealAcceptCmd_descriptor_, &SealAcceptCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneSeal_2eproto() {
  delete SealItem::default_instance_;
  delete SealItem_reflection_;
  delete SealData::default_instance_;
  delete SealData_reflection_;
  delete QuerySeal::default_instance_;
  delete QuerySeal_reflection_;
  delete UpdateSeal::default_instance_;
  delete UpdateSeal_reflection_;
  delete SealTimer::default_instance_;
  delete SealTimer_reflection_;
  delete BeginSeal::default_instance_;
  delete BeginSeal_reflection_;
  delete EndSeal::default_instance_;
  delete EndSeal_reflection_;
  delete SealUserLeave::default_instance_;
  delete SealUserLeave_reflection_;
  delete SealQueryList::default_instance_;
  delete SealQueryList_reflection_;
  delete SealAcceptCmd::default_instance_;
  delete SealAcceptCmd_reflection_;
}

void protobuf_AddDesc_SceneSeal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SceneSeal.proto\022\003Cmd\032\nxCmd.proto\032\021Prot"
    "oCommon.proto\"\307\001\n\010SealItem\022\021\n\006config\030\001 \001"
    "(\r:\0010\022\026\n\013refreshtime\030\002 \001(\r:\0010\022\026\n\007ownseal"
    "\030\003 \001(\010:\005false\022\032\n\003pos\030\004 \001(\0132\r.Cmd.ScenePo"
    "s\022\021\n\006sealid\030\005 \001(\004:\0010\022\030\n\tissealing\030\006 \001(\010:"
    "\005false\022/\n\005etype\030\007 \001(\0162\016.Cmd.ESealType:\020E"
    "SEALTYPE_NORMAL\":\n\010SealData\022\020\n\005mapid\030\001 \001"
    "(\r:\0010\022\034\n\005items\030\002 \003(\0132\r.Cmd.SealItem\"\222\001\n\t"
    "QuerySeal\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SC"
    "ENE_USER_SEAL_PROTOCMD\0222\n\005param\030\002 \001(\0162\016."
    "Cmd.SealParam:\023SEALPARAM_QUERYSEAL\022\034\n\005da"
    "tas\030\003 \003(\0132\r.Cmd.SealData\"\266\001\n\nUpdateSeal\022"
    "3\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_S"
    "EAL_PROTOCMD\0223\n\005param\030\002 \001(\0162\016.Cmd.SealPa"
    "ram:\024SEALPARAM_UPDATESEAL\022\036\n\007newdata\030\003 \003"
    "(\0132\r.Cmd.SealData\022\036\n\007deldata\030\004 \003(\0132\r.Cmd"
    ".SealData\"\331\001\n\tSealTimer\0223\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\030SCENE_USER_SEAL_PROTOCMD\0222\n\005"
    "param\030\002 \001(\0162\016.Cmd.SealParam:\023SEALPARAM_S"
    "EALTIMER\022\020\n\005speed\030\003 \001(\005:\0010\022\023\n\010curvalue\030\004"
    " \001(\r:\0010\022\023\n\010maxvalue\030\005 \001(\r:\0010\022\023\n\010stoptime"
    "\030\006 \001(\r:\0010\022\022\n\007maxtime\030\007 \001(\r:\0010\"\274\001\n\tBeginS"
    "eal\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_US"
    "ER_SEAL_PROTOCMD\0222\n\005param\030\002 \001(\0162\016.Cmd.Se"
    "alParam:\023SEALPARAM_BEGINSEAL\022\021\n\006sealid\030\003"
    " \001(\004:\0010\0223\n\005etype\030\004 \001(\0162\020.Cmd.EFinishType"
    ":\022EFINISHTYPE_NORMAL\"\233\001\n\007EndSeal\0223\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_SEAL_PRO"
    "TOCMD\0220\n\005param\030\002 \001(\0162\016.Cmd.SealParam:\021SE"
    "ALPARAM_ENDSEAL\022\026\n\007success\030\003 \001(\010:\005false\022"
    "\021\n\006sealid\030\004 \001(\r:\0010\"x\n\rSealUserLeave\0223\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_SEAL_"
    "PROTOCMD\0222\n\005param\030\002 \001(\0162\016.Cmd.SealParam:"
    "\023SEALPARAM_USERLEAVE\"\265\001\n\rSealQueryList\0223"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_SE"
    "AL_PROTOCMD\0222\n\005param\030\002 \001(\0162\016.Cmd.SealPar"
    "am:\023SEALPARAM_QUERYLIST\022\020\n\010configid\030\003 \003("
    "\r\022\024\n\tdonetimes\030\004 \001(\r:\0010\022\023\n\010maxtimes\030\005 \001("
    "\r:\0010\"\276\001\n\rSealAcceptCmd\0223\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\030SCENE_USER_SEAL_PROTOCMD\0223\n\005p"
    "aram\030\002 \001(\0162\016.Cmd.SealParam:\024SEALPARAM_AC"
    "CEPTSEAL\022\017\n\004seal\030\003 \001(\r:\0010\022\032\n\003pos\030\004 \001(\0132\r"
    ".Cmd.ScenePos\022\026\n\007abandon\030\005 \001(\010:\005false*\323\001"
    "\n\tSealParam\022\027\n\023SEALPARAM_QUERYSEAL\020\001\022\030\n\024"
    "SEALPARAM_UPDATESEAL\020\002\022\027\n\023SEALPARAM_SEAL"
    "TIMER\020\003\022\027\n\023SEALPARAM_BEGINSEAL\020\004\022\025\n\021SEAL"
    "PARAM_ENDSEAL\020\005\022\027\n\023SEALPARAM_USERLEAVE\020\006"
    "\022\027\n\023SEALPARAM_QUERYLIST\020\007\022\030\n\024SEALPARAM_A"
    "CCEPTSEAL\020\010*w\n\tESealType\022\021\n\rESEALTYPE_MI"
    "N\020\000\022\024\n\020ESEALTYPE_NORMAL\020\001\022\026\n\022ESEALTYPE_P"
    "ERSONAL\020\002\022\026\n\022ESEALTYPE_ACTIVITY\020\003\022\021\n\rESE"
    "ALTYPE_MAX\020\004*Q\n\013EFinishType\022\023\n\017EFINISHTY"
    "PE_MIN\020\000\022\026\n\022EFINISHTYPE_NORMAL\020\001\022\025\n\021EFIN"
    "ISHTYPE_QUICK\020\002", 2135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneSeal.proto", &protobuf_RegisterTypes);
  SealItem::default_instance_ = new SealItem();
  SealData::default_instance_ = new SealData();
  QuerySeal::default_instance_ = new QuerySeal();
  UpdateSeal::default_instance_ = new UpdateSeal();
  SealTimer::default_instance_ = new SealTimer();
  BeginSeal::default_instance_ = new BeginSeal();
  EndSeal::default_instance_ = new EndSeal();
  SealUserLeave::default_instance_ = new SealUserLeave();
  SealQueryList::default_instance_ = new SealQueryList();
  SealAcceptCmd::default_instance_ = new SealAcceptCmd();
  SealItem::default_instance_->InitAsDefaultInstance();
  SealData::default_instance_->InitAsDefaultInstance();
  QuerySeal::default_instance_->InitAsDefaultInstance();
  UpdateSeal::default_instance_->InitAsDefaultInstance();
  SealTimer::default_instance_->InitAsDefaultInstance();
  BeginSeal::default_instance_->InitAsDefaultInstance();
  EndSeal::default_instance_->InitAsDefaultInstance();
  SealUserLeave::default_instance_->InitAsDefaultInstance();
  SealQueryList::default_instance_->InitAsDefaultInstance();
  SealAcceptCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneSeal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneSeal_2eproto {
  StaticDescriptorInitializer_SceneSeal_2eproto() {
    protobuf_AddDesc_SceneSeal_2eproto();
  }
} static_descriptor_initializer_SceneSeal_2eproto_;
const ::google::protobuf::EnumDescriptor* SealParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealParam_descriptor_;
}
bool SealParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESealType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESealType_descriptor_;
}
bool ESealType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFinishType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFinishType_descriptor_;
}
bool EFinishType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SealItem::kConfigFieldNumber;
const int SealItem::kRefreshtimeFieldNumber;
const int SealItem::kOwnsealFieldNumber;
const int SealItem::kPosFieldNumber;
const int SealItem::kSealidFieldNumber;
const int SealItem::kIssealingFieldNumber;
const int SealItem::kEtypeFieldNumber;
#endif  // !_MSC_VER

SealItem::SealItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SealItem)
}

void SealItem::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

SealItem::SealItem(const SealItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SealItem)
}

void SealItem::SharedCtor() {
  _cached_size_ = 0;
  config_ = 0u;
  refreshtime_ = 0u;
  ownseal_ = false;
  pos_ = NULL;
  sealid_ = GOOGLE_ULONGLONG(0);
  issealing_ = false;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SealItem::~SealItem() {
  // @@protoc_insertion_point(destructor:Cmd.SealItem)
  SharedDtor();
}

void SealItem::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void SealItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealItem_descriptor_;
}

const SealItem& SealItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

SealItem* SealItem::default_instance_ = NULL;

SealItem* SealItem::New() const {
  return new SealItem;
}

void SealItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SealItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(config_, refreshtime_);
    ZR_(sealid_, issealing_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    etype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SealItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SealItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_refreshtime;
        break;
      }

      // optional uint32 refreshtime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_refreshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ownseal;
        break;
      }

      // optional bool ownseal = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_ownseal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ownseal_)));
          set_has_ownseal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sealid;
        break;
      }

      // optional uint64 sealid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_sealid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sealid_)));
          set_has_sealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_issealing;
        break;
      }

      // optional bool issealing = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_issealing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issealing_)));
          set_has_issealing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_etype;
        break;
      }

      // optional .Cmd.ESealType etype = 7 [default = ESEALTYPE_NORMAL];
      case 7: {
        if (tag == 56) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESealType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::ESealType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SealItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SealItem)
  return false;
#undef DO_
}

void SealItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SealItem)
  // optional uint32 config = 1 [default = 0];
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config(), output);
  }

  // optional uint32 refreshtime = 2 [default = 0];
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refreshtime(), output);
  }

  // optional bool ownseal = 3 [default = false];
  if (has_ownseal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ownseal(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional uint64 sealid = 5 [default = 0];
  if (has_sealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sealid(), output);
  }

  // optional bool issealing = 6 [default = false];
  if (has_issealing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issealing(), output);
  }

  // optional .Cmd.ESealType etype = 7 [default = ESEALTYPE_NORMAL];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SealItem)
}

::google::protobuf::uint8* SealItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SealItem)
  // optional uint32 config = 1 [default = 0];
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config(), target);
  }

  // optional uint32 refreshtime = 2 [default = 0];
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refreshtime(), target);
  }

  // optional bool ownseal = 3 [default = false];
  if (has_ownseal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ownseal(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional uint64 sealid = 5 [default = 0];
  if (has_sealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sealid(), target);
  }

  // optional bool issealing = 6 [default = false];
  if (has_issealing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issealing(), target);
  }

  // optional .Cmd.ESealType etype = 7 [default = ESEALTYPE_NORMAL];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SealItem)
  return target;
}

int SealItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 config = 1 [default = 0];
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config());
    }

    // optional uint32 refreshtime = 2 [default = 0];
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtime());
    }

    // optional bool ownseal = 3 [default = false];
    if (has_ownseal()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 sealid = 5 [default = 0];
    if (has_sealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sealid());
    }

    // optional bool issealing = 6 [default = false];
    if (has_issealing()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.ESealType etype = 7 [default = ESEALTYPE_NORMAL];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SealItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SealItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SealItem::MergeFrom(const SealItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_ownseal()) {
      set_ownseal(from.ownseal());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_sealid()) {
      set_sealid(from.sealid());
    }
    if (from.has_issealing()) {
      set_issealing(from.issealing());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SealItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealItem::CopyFrom(const SealItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealItem::IsInitialized() const {

  return true;
}

void SealItem::Swap(SealItem* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(ownseal_, other->ownseal_);
    std::swap(pos_, other->pos_);
    std::swap(sealid_, other->sealid_);
    std::swap(issealing_, other->issealing_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SealItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealItem_descriptor_;
  metadata.reflection = SealItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SealData::kMapidFieldNumber;
const int SealData::kItemsFieldNumber;
#endif  // !_MSC_VER

SealData::SealData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SealData)
}

void SealData::InitAsDefaultInstance() {
}

SealData::SealData(const SealData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SealData)
}

void SealData::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SealData::~SealData() {
  // @@protoc_insertion_point(destructor:Cmd.SealData)
  SharedDtor();
}

void SealData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SealData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealData_descriptor_;
}

const SealData& SealData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

SealData* SealData::default_instance_ = NULL;

SealData* SealData::New() const {
  return new SealData;
}

void SealData::Clear() {
  mapid_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SealData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SealData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Cmd.SealItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SealData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SealData)
  return false;
#undef DO_
}

void SealData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SealData)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // repeated .Cmd.SealItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SealData)
}

::google::protobuf::uint8* SealData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SealData)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // repeated .Cmd.SealItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SealData)
  return target;
}

int SealData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  // repeated .Cmd.SealItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SealData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SealData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SealData::MergeFrom(const SealData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SealData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealData::CopyFrom(const SealData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealData::IsInitialized() const {

  return true;
}

void SealData::Swap(SealData* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SealData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealData_descriptor_;
  metadata.reflection = SealData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySeal::kCmdFieldNumber;
const int QuerySeal::kParamFieldNumber;
const int QuerySeal::kDatasFieldNumber;
#endif  // !_MSC_VER

QuerySeal::QuerySeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuerySeal)
}

void QuerySeal::InitAsDefaultInstance() {
}

QuerySeal::QuerySeal(const QuerySeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuerySeal)
}

void QuerySeal::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySeal::~QuerySeal() {
  // @@protoc_insertion_point(destructor:Cmd.QuerySeal)
  SharedDtor();
}

void QuerySeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuerySeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySeal_descriptor_;
}

const QuerySeal& QuerySeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

QuerySeal* QuerySeal::default_instance_ = NULL;

QuerySeal* QuerySeal::New() const {
  return new QuerySeal;
}

void QuerySeal::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 21;
    param_ = 1;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuerySeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYSEAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.SealData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuerySeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuerySeal)
  return false;
#undef DO_
}

void QuerySeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuerySeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYSEAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SealData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuerySeal)
}

::google::protobuf::uint8* QuerySeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuerySeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYSEAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SealData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuerySeal)
  return target;
}

int QuerySeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYSEAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SealData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySeal::MergeFrom(const QuerySeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySeal::CopyFrom(const QuerySeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySeal::IsInitialized() const {

  return true;
}

void QuerySeal::Swap(QuerySeal* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySeal_descriptor_;
  metadata.reflection = QuerySeal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSeal::kCmdFieldNumber;
const int UpdateSeal::kParamFieldNumber;
const int UpdateSeal::kNewdataFieldNumber;
const int UpdateSeal::kDeldataFieldNumber;
#endif  // !_MSC_VER

UpdateSeal::UpdateSeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateSeal)
}

void UpdateSeal::InitAsDefaultInstance() {
}

UpdateSeal::UpdateSeal(const UpdateSeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateSeal)
}

void UpdateSeal::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSeal::~UpdateSeal() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateSeal)
  SharedDtor();
}

void UpdateSeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateSeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSeal_descriptor_;
}

const UpdateSeal& UpdateSeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

UpdateSeal* UpdateSeal::default_instance_ = NULL;

UpdateSeal* UpdateSeal::New() const {
  return new UpdateSeal;
}

void UpdateSeal::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 21;
    param_ = 2;
  }
  newdata_.Clear();
  deldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateSeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_UPDATESEAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newdata;
        break;
      }

      // repeated .Cmd.SealData newdata = 3;
      case 3: {
        if (tag == 26) {
         parse_newdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newdata;
        if (input->ExpectTag(34)) goto parse_deldata;
        break;
      }

      // repeated .Cmd.SealData deldata = 4;
      case 4: {
        if (tag == 34) {
         parse_deldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deldata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateSeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateSeal)
  return false;
#undef DO_
}

void UpdateSeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateSeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_UPDATESEAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SealData newdata = 3;
  for (int i = 0; i < this->newdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newdata(i), output);
  }

  // repeated .Cmd.SealData deldata = 4;
  for (int i = 0; i < this->deldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateSeal)
}

::google::protobuf::uint8* UpdateSeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateSeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_UPDATESEAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SealData newdata = 3;
  for (int i = 0; i < this->newdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newdata(i), target);
  }

  // repeated .Cmd.SealData deldata = 4;
  for (int i = 0; i < this->deldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->deldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateSeal)
  return target;
}

int UpdateSeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_UPDATESEAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SealData newdata = 3;
  total_size += 1 * this->newdata_size();
  for (int i = 0; i < this->newdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newdata(i));
  }

  // repeated .Cmd.SealData deldata = 4;
  total_size += 1 * this->deldata_size();
  for (int i = 0; i < this->deldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSeal::MergeFrom(const UpdateSeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  newdata_.MergeFrom(from.newdata_);
  deldata_.MergeFrom(from.deldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSeal::CopyFrom(const UpdateSeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSeal::IsInitialized() const {

  return true;
}

void UpdateSeal::Swap(UpdateSeal* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    newdata_.Swap(&other->newdata_);
    deldata_.Swap(&other->deldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSeal_descriptor_;
  metadata.reflection = UpdateSeal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SealTimer::kCmdFieldNumber;
const int SealTimer::kParamFieldNumber;
const int SealTimer::kSpeedFieldNumber;
const int SealTimer::kCurvalueFieldNumber;
const int SealTimer::kMaxvalueFieldNumber;
const int SealTimer::kStoptimeFieldNumber;
const int SealTimer::kMaxtimeFieldNumber;
#endif  // !_MSC_VER

SealTimer::SealTimer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SealTimer)
}

void SealTimer::InitAsDefaultInstance() {
}

SealTimer::SealTimer(const SealTimer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SealTimer)
}

void SealTimer::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 3;
  speed_ = 0;
  curvalue_ = 0u;
  maxvalue_ = 0u;
  stoptime_ = 0u;
  maxtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SealTimer::~SealTimer() {
  // @@protoc_insertion_point(destructor:Cmd.SealTimer)
  SharedDtor();
}

void SealTimer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SealTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealTimer_descriptor_;
}

const SealTimer& SealTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

SealTimer* SealTimer::default_instance_ = NULL;

SealTimer* SealTimer::New() const {
  return new SealTimer;
}

void SealTimer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SealTimer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(speed_, maxtime_);
    cmd_ = 21;
    param_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SealTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SealTimer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_SEALTIMER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_speed;
        break;
      }

      // optional int32 speed = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curvalue;
        break;
      }

      // optional uint32 curvalue = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_curvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curvalue_)));
          set_has_curvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxvalue;
        break;
      }

      // optional uint32 maxvalue = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxvalue_)));
          set_has_maxvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stoptime;
        break;
      }

      // optional uint32 stoptime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_stoptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxtime;
        break;
      }

      // optional uint32 maxtime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_maxtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtime_)));
          set_has_maxtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SealTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SealTimer)
  return false;
#undef DO_
}

void SealTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SealTimer)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_SEALTIMER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional int32 speed = 3 [default = 0];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speed(), output);
  }

  // optional uint32 curvalue = 4 [default = 0];
  if (has_curvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curvalue(), output);
  }

  // optional uint32 maxvalue = 5 [default = 0];
  if (has_maxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxvalue(), output);
  }

  // optional uint32 stoptime = 6 [default = 0];
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stoptime(), output);
  }

  // optional uint32 maxtime = 7 [default = 0];
  if (has_maxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SealTimer)
}

::google::protobuf::uint8* SealTimer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SealTimer)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_SEALTIMER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional int32 speed = 3 [default = 0];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speed(), target);
  }

  // optional uint32 curvalue = 4 [default = 0];
  if (has_curvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curvalue(), target);
  }

  // optional uint32 maxvalue = 5 [default = 0];
  if (has_maxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxvalue(), target);
  }

  // optional uint32 stoptime = 6 [default = 0];
  if (has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stoptime(), target);
  }

  // optional uint32 maxtime = 7 [default = 0];
  if (has_maxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SealTimer)
  return target;
}

int SealTimer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_SEALTIMER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional int32 speed = 3 [default = 0];
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional uint32 curvalue = 4 [default = 0];
    if (has_curvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curvalue());
    }

    // optional uint32 maxvalue = 5 [default = 0];
    if (has_maxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxvalue());
    }

    // optional uint32 stoptime = 6 [default = 0];
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // optional uint32 maxtime = 7 [default = 0];
    if (has_maxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealTimer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SealTimer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SealTimer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SealTimer::MergeFrom(const SealTimer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_curvalue()) {
      set_curvalue(from.curvalue());
    }
    if (from.has_maxvalue()) {
      set_maxvalue(from.maxvalue());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_maxtime()) {
      set_maxtime(from.maxtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SealTimer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealTimer::CopyFrom(const SealTimer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealTimer::IsInitialized() const {

  return true;
}

void SealTimer::Swap(SealTimer* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(speed_, other->speed_);
    std::swap(curvalue_, other->curvalue_);
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(maxtime_, other->maxtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SealTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealTimer_descriptor_;
  metadata.reflection = SealTimer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginSeal::kCmdFieldNumber;
const int BeginSeal::kParamFieldNumber;
const int BeginSeal::kSealidFieldNumber;
const int BeginSeal::kEtypeFieldNumber;
#endif  // !_MSC_VER

BeginSeal::BeginSeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BeginSeal)
}

void BeginSeal::InitAsDefaultInstance() {
}

BeginSeal::BeginSeal(const BeginSeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BeginSeal)
}

void BeginSeal::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 4;
  sealid_ = GOOGLE_ULONGLONG(0);
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginSeal::~BeginSeal() {
  // @@protoc_insertion_point(destructor:Cmd.BeginSeal)
  SharedDtor();
}

void BeginSeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginSeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginSeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginSeal_descriptor_;
}

const BeginSeal& BeginSeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

BeginSeal* BeginSeal::default_instance_ = NULL;

BeginSeal* BeginSeal::New() const {
  return new BeginSeal;
}

void BeginSeal::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 21;
    param_ = 4;
    sealid_ = GOOGLE_ULONGLONG(0);
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginSeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BeginSeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_BEGINSEAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sealid;
        break;
      }

      // optional uint64 sealid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sealid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sealid_)));
          set_has_sealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.EFinishType etype = 4 [default = EFINISHTYPE_NORMAL];
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFinishType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EFinishType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BeginSeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BeginSeal)
  return false;
#undef DO_
}

void BeginSeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BeginSeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_BEGINSEAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 sealid = 3 [default = 0];
  if (has_sealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sealid(), output);
  }

  // optional .Cmd.EFinishType etype = 4 [default = EFINISHTYPE_NORMAL];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BeginSeal)
}

::google::protobuf::uint8* BeginSeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BeginSeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_BEGINSEAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 sealid = 3 [default = 0];
  if (has_sealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sealid(), target);
  }

  // optional .Cmd.EFinishType etype = 4 [default = EFINISHTYPE_NORMAL];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BeginSeal)
  return target;
}

int BeginSeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_BEGINSEAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 sealid = 3 [default = 0];
    if (has_sealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sealid());
    }

    // optional .Cmd.EFinishType etype = 4 [default = EFINISHTYPE_NORMAL];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginSeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginSeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginSeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginSeal::MergeFrom(const BeginSeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_sealid()) {
      set_sealid(from.sealid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginSeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginSeal::CopyFrom(const BeginSeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginSeal::IsInitialized() const {

  return true;
}

void BeginSeal::Swap(BeginSeal* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(sealid_, other->sealid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginSeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginSeal_descriptor_;
  metadata.reflection = BeginSeal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndSeal::kCmdFieldNumber;
const int EndSeal::kParamFieldNumber;
const int EndSeal::kSuccessFieldNumber;
const int EndSeal::kSealidFieldNumber;
#endif  // !_MSC_VER

EndSeal::EndSeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EndSeal)
}

void EndSeal::InitAsDefaultInstance() {
}

EndSeal::EndSeal(const EndSeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EndSeal)
}

void EndSeal::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 5;
  success_ = false;
  sealid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndSeal::~EndSeal() {
  // @@protoc_insertion_point(destructor:Cmd.EndSeal)
  SharedDtor();
}

void EndSeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndSeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndSeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndSeal_descriptor_;
}

const EndSeal& EndSeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

EndSeal* EndSeal::default_instance_ = NULL;

EndSeal* EndSeal::New() const {
  return new EndSeal;
}

void EndSeal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EndSeal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(success_, sealid_);
    cmd_ = 21;
    param_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndSeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EndSeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ENDSEAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional bool success = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sealid;
        break;
      }

      // optional uint32 sealid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sealid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sealid_)));
          set_has_sealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EndSeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EndSeal)
  return false;
#undef DO_
}

void EndSeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EndSeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ENDSEAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool success = 3 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional uint32 sealid = 4 [default = 0];
  if (has_sealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sealid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EndSeal)
}

::google::protobuf::uint8* EndSeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EndSeal)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ENDSEAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool success = 3 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional uint32 sealid = 4 [default = 0];
  if (has_sealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sealid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EndSeal)
  return target;
}

int EndSeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ENDSEAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool success = 3 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint32 sealid = 4 [default = 0];
    if (has_sealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sealid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndSeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndSeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndSeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndSeal::MergeFrom(const EndSeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_sealid()) {
      set_sealid(from.sealid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndSeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndSeal::CopyFrom(const EndSeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndSeal::IsInitialized() const {

  return true;
}

void EndSeal::Swap(EndSeal* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(success_, other->success_);
    std::swap(sealid_, other->sealid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndSeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndSeal_descriptor_;
  metadata.reflection = EndSeal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SealUserLeave::kCmdFieldNumber;
const int SealUserLeave::kParamFieldNumber;
#endif  // !_MSC_VER

SealUserLeave::SealUserLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SealUserLeave)
}

void SealUserLeave::InitAsDefaultInstance() {
}

SealUserLeave::SealUserLeave(const SealUserLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SealUserLeave)
}

void SealUserLeave::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SealUserLeave::~SealUserLeave() {
  // @@protoc_insertion_point(destructor:Cmd.SealUserLeave)
  SharedDtor();
}

void SealUserLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SealUserLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealUserLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealUserLeave_descriptor_;
}

const SealUserLeave& SealUserLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

SealUserLeave* SealUserLeave::default_instance_ = NULL;

SealUserLeave* SealUserLeave::New() const {
  return new SealUserLeave;
}

void SealUserLeave::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 21;
    param_ = 6;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SealUserLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SealUserLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_USERLEAVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SealUserLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SealUserLeave)
  return false;
#undef DO_
}

void SealUserLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SealUserLeave)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_USERLEAVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SealUserLeave)
}

::google::protobuf::uint8* SealUserLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SealUserLeave)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_USERLEAVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SealUserLeave)
  return target;
}

int SealUserLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_USERLEAVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealUserLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SealUserLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SealUserLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SealUserLeave::MergeFrom(const SealUserLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SealUserLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealUserLeave::CopyFrom(const SealUserLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealUserLeave::IsInitialized() const {

  return true;
}

void SealUserLeave::Swap(SealUserLeave* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SealUserLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealUserLeave_descriptor_;
  metadata.reflection = SealUserLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SealQueryList::kCmdFieldNumber;
const int SealQueryList::kParamFieldNumber;
const int SealQueryList::kConfigidFieldNumber;
const int SealQueryList::kDonetimesFieldNumber;
const int SealQueryList::kMaxtimesFieldNumber;
#endif  // !_MSC_VER

SealQueryList::SealQueryList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SealQueryList)
}

void SealQueryList::InitAsDefaultInstance() {
}

SealQueryList::SealQueryList(const SealQueryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SealQueryList)
}

void SealQueryList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 7;
  donetimes_ = 0u;
  maxtimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SealQueryList::~SealQueryList() {
  // @@protoc_insertion_point(destructor:Cmd.SealQueryList)
  SharedDtor();
}

void SealQueryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SealQueryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealQueryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealQueryList_descriptor_;
}

const SealQueryList& SealQueryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

SealQueryList* SealQueryList::default_instance_ = NULL;

SealQueryList* SealQueryList::New() const {
  return new SealQueryList;
}

void SealQueryList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SealQueryList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(donetimes_, maxtimes_);
    cmd_ = 21;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  configid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SealQueryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SealQueryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configid;
        break;
      }

      // repeated uint32 configid = 3;
      case 3: {
        if (tag == 24) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_configid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_configid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configid;
        if (input->ExpectTag(32)) goto parse_donetimes;
        break;
      }

      // optional uint32 donetimes = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_donetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donetimes_)));
          set_has_donetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxtimes;
        break;
      }

      // optional uint32 maxtimes = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtimes_)));
          set_has_maxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SealQueryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SealQueryList)
  return false;
#undef DO_
}

void SealQueryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SealQueryList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 configid = 3;
  for (int i = 0; i < this->configid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->configid(i), output);
  }

  // optional uint32 donetimes = 4 [default = 0];
  if (has_donetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->donetimes(), output);
  }

  // optional uint32 maxtimes = 5 [default = 0];
  if (has_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SealQueryList)
}

::google::protobuf::uint8* SealQueryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SealQueryList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 configid = 3;
  for (int i = 0; i < this->configid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->configid(i), target);
  }

  // optional uint32 donetimes = 4 [default = 0];
  if (has_donetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->donetimes(), target);
  }

  // optional uint32 maxtimes = 5 [default = 0];
  if (has_maxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SealQueryList)
  return target;
}

int SealQueryList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 donetimes = 4 [default = 0];
    if (has_donetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donetimes());
    }

    // optional uint32 maxtimes = 5 [default = 0];
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtimes());
    }

  }
  // repeated uint32 configid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->configid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->configid(i));
    }
    total_size += 1 * this->configid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealQueryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SealQueryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SealQueryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SealQueryList::MergeFrom(const SealQueryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  configid_.MergeFrom(from.configid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_donetimes()) {
      set_donetimes(from.donetimes());
    }
    if (from.has_maxtimes()) {
      set_maxtimes(from.maxtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SealQueryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealQueryList::CopyFrom(const SealQueryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealQueryList::IsInitialized() const {

  return true;
}

void SealQueryList::Swap(SealQueryList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    configid_.Swap(&other->configid_);
    std::swap(donetimes_, other->donetimes_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SealQueryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealQueryList_descriptor_;
  metadata.reflection = SealQueryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SealAcceptCmd::kCmdFieldNumber;
const int SealAcceptCmd::kParamFieldNumber;
const int SealAcceptCmd::kSealFieldNumber;
const int SealAcceptCmd::kPosFieldNumber;
const int SealAcceptCmd::kAbandonFieldNumber;
#endif  // !_MSC_VER

SealAcceptCmd::SealAcceptCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SealAcceptCmd)
}

void SealAcceptCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

SealAcceptCmd::SealAcceptCmd(const SealAcceptCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SealAcceptCmd)
}

void SealAcceptCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 21;
  param_ = 8;
  seal_ = 0u;
  pos_ = NULL;
  abandon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SealAcceptCmd::~SealAcceptCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SealAcceptCmd)
  SharedDtor();
}

void SealAcceptCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void SealAcceptCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealAcceptCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealAcceptCmd_descriptor_;
}

const SealAcceptCmd& SealAcceptCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSeal_2eproto();
  return *default_instance_;
}

SealAcceptCmd* SealAcceptCmd::default_instance_ = NULL;

SealAcceptCmd* SealAcceptCmd::New() const {
  return new SealAcceptCmd;
}

void SealAcceptCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SealAcceptCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(seal_, abandon_);
    cmd_ = 21;
    param_ = 8;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SealAcceptCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SealAcceptCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ACCEPTSEAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SealParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SealParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seal;
        break;
      }

      // optional uint32 seal = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_seal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seal_)));
          set_has_seal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_abandon;
        break;
      }

      // optional bool abandon = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_abandon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abandon_)));
          set_has_abandon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SealAcceptCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SealAcceptCmd)
  return false;
#undef DO_
}

void SealAcceptCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SealAcceptCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ACCEPTSEAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 seal = 3 [default = 0];
  if (has_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seal(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional bool abandon = 5 [default = false];
  if (has_abandon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->abandon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SealAcceptCmd)
}

::google::protobuf::uint8* SealAcceptCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SealAcceptCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ACCEPTSEAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 seal = 3 [default = 0];
  if (has_seal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seal(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional bool abandon = 5 [default = false];
  if (has_abandon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->abandon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SealAcceptCmd)
  return target;
}

int SealAcceptCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ACCEPTSEAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 seal = 3 [default = 0];
    if (has_seal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seal());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional bool abandon = 5 [default = false];
    if (has_abandon()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealAcceptCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SealAcceptCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SealAcceptCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SealAcceptCmd::MergeFrom(const SealAcceptCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_seal()) {
      set_seal(from.seal());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_abandon()) {
      set_abandon(from.abandon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SealAcceptCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealAcceptCmd::CopyFrom(const SealAcceptCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealAcceptCmd::IsInitialized() const {

  return true;
}

void SealAcceptCmd::Swap(SealAcceptCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(seal_, other->seal_);
    std::swap(pos_, other->pos_);
    std::swap(abandon_, other->abandon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SealAcceptCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealAcceptCmd_descriptor_;
  metadata.reflection = SealAcceptCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
