// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Redis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Redis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* RedisItemTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisItemTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisTest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ERedisParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Redis_2eproto() {
  protobuf_AddDesc_Redis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Redis.proto");
  GOOGLE_CHECK(file != NULL);
  RedisItemTest_descriptor_ = file->message_type(0);
  static const int RedisItemTest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisItemTest, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisItemTest, str_),
  };
  RedisItemTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisItemTest_descriptor_,
      RedisItemTest::default_instance_,
      RedisItemTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisItemTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisItemTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisItemTest));
  RedisTest_descriptor_ = file->message_type(1);
  static const int RedisTest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, strs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, items_),
  };
  RedisTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisTest_descriptor_,
      RedisTest::default_instance_,
      RedisTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisTest));
  ERedisParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Redis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisItemTest_descriptor_, &RedisItemTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisTest_descriptor_, &RedisTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Redis_2eproto() {
  delete RedisItemTest::default_instance_;
  delete RedisItemTest_reflection_;
  delete RedisTest::default_instance_;
  delete RedisTest_reflection_;
}

void protobuf_AddDesc_Redis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Redis.proto\022\003Cmd\",\n\rRedisItemTest\022\016\n\003n"
    "um\030\001 \001(\r:\0010\022\013\n\003str\030\002 \001(\t\"\217\001\n\tRedisTest\022\021"
    "\n\006number\030\001 \001(\r:\0010\022\013\n\003str\030\002 \001(\t\022\017\n\007number"
    "s\030\003 \003(\r\022\014\n\004strs\030\004 \003(\t\022 \n\004item\030\005 \001(\0132\022.Cm"
    "d.RedisItemTest\022!\n\005items\030\006 \003(\0132\022.Cmd.Red"
    "isItemTest*#\n\013ERedisParam\022\024\n\020EREDISPARAM"
    "_TEST\020\001", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Redis.proto", &protobuf_RegisterTypes);
  RedisItemTest::default_instance_ = new RedisItemTest();
  RedisTest::default_instance_ = new RedisTest();
  RedisItemTest::default_instance_->InitAsDefaultInstance();
  RedisTest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Redis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Redis_2eproto {
  StaticDescriptorInitializer_Redis_2eproto() {
    protobuf_AddDesc_Redis_2eproto();
  }
} static_descriptor_initializer_Redis_2eproto_;
const ::google::protobuf::EnumDescriptor* ERedisParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERedisParam_descriptor_;
}
bool ERedisParam_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RedisItemTest::kNumFieldNumber;
const int RedisItemTest::kStrFieldNumber;
#endif  // !_MSC_VER

RedisItemTest::RedisItemTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RedisItemTest)
}

void RedisItemTest::InitAsDefaultInstance() {
}

RedisItemTest::RedisItemTest(const RedisItemTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RedisItemTest)
}

void RedisItemTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisItemTest::~RedisItemTest() {
  // @@protoc_insertion_point(destructor:Cmd.RedisItemTest)
  SharedDtor();
}

void RedisItemTest::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void RedisItemTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisItemTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisItemTest_descriptor_;
}

const RedisItemTest& RedisItemTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Redis_2eproto();
  return *default_instance_;
}

RedisItemTest* RedisItemTest::default_instance_ = NULL;

RedisItemTest* RedisItemTest::New() const {
  return new RedisItemTest;
}

void RedisItemTest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    num_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisItemTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RedisItemTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional string str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RedisItemTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RedisItemTest)
  return false;
#undef DO_
}

void RedisItemTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RedisItemTest)
  // optional uint32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RedisItemTest)
}

::google::protobuf::uint8* RedisItemTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RedisItemTest)
  // optional uint32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RedisItemTest)
  return target;
}

int RedisItemTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisItemTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisItemTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisItemTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisItemTest::MergeFrom(const RedisItemTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisItemTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisItemTest::CopyFrom(const RedisItemTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisItemTest::IsInitialized() const {

  return true;
}

void RedisItemTest::Swap(RedisItemTest* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisItemTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisItemTest_descriptor_;
  metadata.reflection = RedisItemTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedisTest::kNumberFieldNumber;
const int RedisTest::kStrFieldNumber;
const int RedisTest::kNumbersFieldNumber;
const int RedisTest::kStrsFieldNumber;
const int RedisTest::kItemFieldNumber;
const int RedisTest::kItemsFieldNumber;
#endif  // !_MSC_VER

RedisTest::RedisTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RedisTest)
}

void RedisTest::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::RedisItemTest*>(&::Cmd::RedisItemTest::default_instance());
}

RedisTest::RedisTest(const RedisTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RedisTest)
}

void RedisTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisTest::~RedisTest() {
  // @@protoc_insertion_point(destructor:Cmd.RedisTest)
  SharedDtor();
}

void RedisTest::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
    delete item_;
  }
}

void RedisTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisTest_descriptor_;
}

const RedisTest& RedisTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Redis_2eproto();
  return *default_instance_;
}

RedisTest* RedisTest::default_instance_ = NULL;

RedisTest* RedisTest::New() const {
  return new RedisTest;
}

void RedisTest::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    number_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::RedisItemTest::Clear();
    }
  }
  numbers_.Clear();
  strs_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RedisTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional string str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_numbers;
        break;
      }

      // repeated uint32 numbers = 3;
      case 3: {
        if (tag == 24) {
         parse_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_numbers())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_numbers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_numbers;
        if (input->ExpectTag(34)) goto parse_strs;
        break;
      }

      // repeated string strs = 4;
      case 4: {
        if (tag == 34) {
         parse_strs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strs(this->strs_size() - 1).data(),
            this->strs(this->strs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_strs;
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // optional .Cmd.RedisItemTest item = 5;
      case 5: {
        if (tag == 42) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .Cmd.RedisItemTest items = 6;
      case 6: {
        if (tag == 50) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RedisTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RedisTest)
  return false;
#undef DO_
}

void RedisTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RedisTest)
  // optional uint32 number = 1 [default = 0];
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  // repeated uint32 numbers = 3;
  for (int i = 0; i < this->numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->numbers(i), output);
  }

  // repeated string strs = 4;
  for (int i = 0; i < this->strs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->strs(i).data(), this->strs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "strs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strs(i), output);
  }

  // optional .Cmd.RedisItemTest item = 5;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(), output);
  }

  // repeated .Cmd.RedisItemTest items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RedisTest)
}

::google::protobuf::uint8* RedisTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RedisTest)
  // optional uint32 number = 1 [default = 0];
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  // repeated uint32 numbers = 3;
  for (int i = 0; i < this->numbers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->numbers(i), target);
  }

  // repeated string strs = 4;
  for (int i = 0; i < this->strs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strs(i).data(), this->strs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->strs(i), target);
  }

  // optional .Cmd.RedisItemTest item = 5;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(), target);
  }

  // repeated .Cmd.RedisItemTest items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RedisTest)
  return target;
}

int RedisTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1 [default = 0];
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional .Cmd.RedisItemTest item = 5;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  // repeated uint32 numbers = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->numbers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->numbers(i));
    }
    total_size += 1 * this->numbers_size() + data_size;
  }

  // repeated string strs = 4;
  total_size += 1 * this->strs_size();
  for (int i = 0; i < this->strs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strs(i));
  }

  // repeated .Cmd.RedisItemTest items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisTest::MergeFrom(const RedisTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  numbers_.MergeFrom(from.numbers_);
  strs_.MergeFrom(from.strs_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::RedisItemTest::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisTest::CopyFrom(const RedisTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisTest::IsInitialized() const {

  return true;
}

void RedisTest::Swap(RedisTest* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(str_, other->str_);
    numbers_.Swap(&other->numbers_);
    strs_.Swap(&other->strs_);
    std::swap(item_, other->item_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisTest_descriptor_;
  metadata.reflection = RedisTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
