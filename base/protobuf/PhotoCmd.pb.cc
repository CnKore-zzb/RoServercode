// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhotoCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PhotoCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* PhotoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoQueryListCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoQueryListCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoOptCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoOptCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoUpdateNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoUpdateNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameActionPhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameActionPhotoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFramePhotoListPhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFramePhotoListPhotoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserPhotoListPhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserPhotoListPhotoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFrameShowPhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFrameShowPhotoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FramePhotoUpdatePhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FramePhotoUpdatePhotoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoMd5_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoMd5_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMd5ListPhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMd5ListPhotoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMd5PhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMd5PhotoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMd5PhotoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMd5PhotoCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PhotoParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPhotoOptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFrameAction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PhotoCmd_2eproto() {
  protobuf_AddDesc_PhotoCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PhotoCmd.proto");
  GOOGLE_CHECK(file != NULL);
  PhotoItem_descriptor_ = file->message_type(0);
  static const int PhotoItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, anglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, isupload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, charid_),
  };
  PhotoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoItem_descriptor_,
      PhotoItem::default_instance_,
      PhotoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoItem));
  PhotoQueryListCmd_descriptor_ = file->message_type(1);
  static const int PhotoQueryListCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoQueryListCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoQueryListCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoQueryListCmd, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoQueryListCmd, size_),
  };
  PhotoQueryListCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoQueryListCmd_descriptor_,
      PhotoQueryListCmd::default_instance_,
      PhotoQueryListCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoQueryListCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoQueryListCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoQueryListCmd));
  PhotoOptCmd_descriptor_ = file->message_type(2);
  static const int PhotoOptCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, opttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, anglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, mapid_),
  };
  PhotoOptCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoOptCmd_descriptor_,
      PhotoOptCmd::default_instance_,
      PhotoOptCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoOptCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoOptCmd));
  PhotoUpdateNtf_descriptor_ = file->message_type(3);
  static const int PhotoUpdateNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateNtf, opttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateNtf, photo_),
  };
  PhotoUpdateNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoUpdateNtf_descriptor_,
      PhotoUpdateNtf::default_instance_,
      PhotoUpdateNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoUpdateNtf));
  FrameActionPhotoCmd_descriptor_ = file->message_type(4);
  static const int FrameActionPhotoCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionPhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionPhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionPhotoCmd, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionPhotoCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionPhotoCmd, photos_),
  };
  FrameActionPhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameActionPhotoCmd_descriptor_,
      FrameActionPhotoCmd::default_instance_,
      FrameActionPhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionPhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionPhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameActionPhotoCmd));
  QueryFramePhotoListPhotoCmd_descriptor_ = file->message_type(5);
  static const int QueryFramePhotoListPhotoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFramePhotoListPhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFramePhotoListPhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFramePhotoListPhotoCmd, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFramePhotoListPhotoCmd, photos_),
  };
  QueryFramePhotoListPhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFramePhotoListPhotoCmd_descriptor_,
      QueryFramePhotoListPhotoCmd::default_instance_,
      QueryFramePhotoListPhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFramePhotoListPhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFramePhotoListPhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFramePhotoListPhotoCmd));
  QueryUserPhotoListPhotoCmd_descriptor_ = file->message_type(6);
  static const int QueryUserPhotoListPhotoCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListPhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListPhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListPhotoCmd, frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListPhotoCmd, maxphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListPhotoCmd, maxframe_),
  };
  QueryUserPhotoListPhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserPhotoListPhotoCmd_descriptor_,
      QueryUserPhotoListPhotoCmd::default_instance_,
      QueryUserPhotoListPhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListPhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListPhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserPhotoListPhotoCmd));
  FrameShow_descriptor_ = file->message_type(7);
  static const int FrameShow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShow, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShow, photo_),
  };
  FrameShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameShow_descriptor_,
      FrameShow::default_instance_,
      FrameShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameShow));
  UpdateFrameShowPhotoCmd_descriptor_ = file->message_type(8);
  static const int UpdateFrameShowPhotoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFrameShowPhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFrameShowPhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFrameShowPhotoCmd, shows_),
  };
  UpdateFrameShowPhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFrameShowPhotoCmd_descriptor_,
      UpdateFrameShowPhotoCmd::default_instance_,
      UpdateFrameShowPhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFrameShowPhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFrameShowPhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFrameShowPhotoCmd));
  FramePhotoUpdatePhotoCmd_descriptor_ = file->message_type(9);
  static const int FramePhotoUpdatePhotoCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePhotoUpdatePhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePhotoUpdatePhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePhotoUpdatePhotoCmd, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePhotoUpdatePhotoCmd, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePhotoUpdatePhotoCmd, del_),
  };
  FramePhotoUpdatePhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FramePhotoUpdatePhotoCmd_descriptor_,
      FramePhotoUpdatePhotoCmd::default_instance_,
      FramePhotoUpdatePhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePhotoUpdatePhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePhotoUpdatePhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FramePhotoUpdatePhotoCmd));
  PhotoMd5_descriptor_ = file->message_type(10);
  static const int PhotoMd5_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMd5, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMd5, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMd5, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMd5, md5_),
  };
  PhotoMd5_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoMd5_descriptor_,
      PhotoMd5::default_instance_,
      PhotoMd5_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMd5, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMd5, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoMd5));
  QueryMd5ListPhotoCmd_descriptor_ = file->message_type(11);
  static const int QueryMd5ListPhotoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMd5ListPhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMd5ListPhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMd5ListPhotoCmd, item_),
  };
  QueryMd5ListPhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryMd5ListPhotoCmd_descriptor_,
      QueryMd5ListPhotoCmd::default_instance_,
      QueryMd5ListPhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMd5ListPhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMd5ListPhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryMd5ListPhotoCmd));
  AddMd5PhotoCmd_descriptor_ = file->message_type(12);
  static const int AddMd5PhotoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMd5PhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMd5PhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMd5PhotoCmd, md5_),
  };
  AddMd5PhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMd5PhotoCmd_descriptor_,
      AddMd5PhotoCmd::default_instance_,
      AddMd5PhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMd5PhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMd5PhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMd5PhotoCmd));
  RemoveMd5PhotoCmd_descriptor_ = file->message_type(13);
  static const int RemoveMd5PhotoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMd5PhotoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMd5PhotoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMd5PhotoCmd, md5_),
  };
  RemoveMd5PhotoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMd5PhotoCmd_descriptor_,
      RemoveMd5PhotoCmd::default_instance_,
      RemoveMd5PhotoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMd5PhotoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMd5PhotoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMd5PhotoCmd));
  PhotoParam_descriptor_ = file->enum_type(0);
  EPhotoOptType_descriptor_ = file->enum_type(1);
  EFrameAction_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PhotoCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoItem_descriptor_, &PhotoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoQueryListCmd_descriptor_, &PhotoQueryListCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoOptCmd_descriptor_, &PhotoOptCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoUpdateNtf_descriptor_, &PhotoUpdateNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameActionPhotoCmd_descriptor_, &FrameActionPhotoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFramePhotoListPhotoCmd_descriptor_, &QueryFramePhotoListPhotoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserPhotoListPhotoCmd_descriptor_, &QueryUserPhotoListPhotoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameShow_descriptor_, &FrameShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFrameShowPhotoCmd_descriptor_, &UpdateFrameShowPhotoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FramePhotoUpdatePhotoCmd_descriptor_, &FramePhotoUpdatePhotoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoMd5_descriptor_, &PhotoMd5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryMd5ListPhotoCmd_descriptor_, &QueryMd5ListPhotoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMd5PhotoCmd_descriptor_, &AddMd5PhotoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMd5PhotoCmd_descriptor_, &RemoveMd5PhotoCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PhotoCmd_2eproto() {
  delete PhotoItem::default_instance_;
  delete PhotoItem_reflection_;
  delete PhotoQueryListCmd::default_instance_;
  delete PhotoQueryListCmd_reflection_;
  delete PhotoOptCmd::default_instance_;
  delete PhotoOptCmd_reflection_;
  delete PhotoUpdateNtf::default_instance_;
  delete PhotoUpdateNtf_reflection_;
  delete FrameActionPhotoCmd::default_instance_;
  delete FrameActionPhotoCmd_reflection_;
  delete QueryFramePhotoListPhotoCmd::default_instance_;
  delete QueryFramePhotoListPhotoCmd_reflection_;
  delete QueryUserPhotoListPhotoCmd::default_instance_;
  delete QueryUserPhotoListPhotoCmd_reflection_;
  delete FrameShow::default_instance_;
  delete FrameShow_reflection_;
  delete UpdateFrameShowPhotoCmd::default_instance_;
  delete UpdateFrameShowPhotoCmd_reflection_;
  delete FramePhotoUpdatePhotoCmd::default_instance_;
  delete FramePhotoUpdatePhotoCmd_reflection_;
  delete PhotoMd5::default_instance_;
  delete PhotoMd5_reflection_;
  delete QueryMd5ListPhotoCmd::default_instance_;
  delete QueryMd5ListPhotoCmd_reflection_;
  delete AddMd5PhotoCmd::default_instance_;
  delete AddMd5PhotoCmd_reflection_;
  delete RemoveMd5PhotoCmd::default_instance_;
  delete RemoveMd5PhotoCmd_reflection_;
}

void protobuf_AddDesc_PhotoCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_GuildCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PhotoCmd.proto\022\003Cmd\032\nxCmd.proto\032\016Guild"
    "Cmd.proto\032\021ProtoCommon.proto\"\177\n\tPhotoIte"
    "m\022\020\n\005index\030\001 \001(\r:\0010\022\020\n\005mapid\030\002 \001(\r:\0010\022\017\n"
    "\004time\030\003 \001(\r:\0010\022\021\n\006anglez\030\004 \001(\r:\0010\022\027\n\010isu"
    "pload\030\005 \001(\010:\005false\022\021\n\006charid\030\006 \001(\004:\0010\"\267\001"
    "\n\021PhotoQueryListCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\031SCENE_USER_PHOTO_PROTOCMD\022;\n\005par"
    "am\030\002 \001(\0162\017.Cmd.PhotoParam:\033PHOTOPARAM_QU"
    "ERY_PHOTO_LIST\022\036\n\006photos\030\003 \003(\0132\016.Cmd.Pho"
    "toItem\022\017\n\004size\030\004 \001(\r:\0010\"\350\001\n\013PhotoOptCmd\022"
    "4\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_P"
    "HOTO_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.Photo"
    "Param:\024PHOTOPARAM_PHOTO_OPT\0226\n\007opttype\030\003"
    " \001(\0162\022.Cmd.EPhotoOptType:\021EPHOTOOPTTYPE_"
    "MIN\022\020\n\005index\030\004 \001(\r:\0010\022\021\n\006anglez\030\005 \001(\r:\0010"
    "\022\020\n\005mapid\030\006 \001(\r:\0010\"\326\001\n\016PhotoUpdateNtf\0224\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_PHO"
    "TO_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.PhotoPa"
    "ram:\027PHOTOPARAM_PHOTO_UPDATE\0226\n\007opttype\030"
    "\003 \001(\0162\022.Cmd.EPhotoOptType:\021EPHOTOOPTTYPE"
    "_MIN\022\035\n\005photo\030\004 \001(\0132\016.Cmd.PhotoItem\"\356\001\n\023"
    "FrameActionPhotoCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\031SCENE_USER_PHOTO_PROTOCMD\0227\n\005par"
    "am\030\002 \001(\0162\017.Cmd.PhotoParam:\027PHOTOPARAM_FR"
    "AME_ACTION\022\022\n\007frameid\030\003 \001(\r:\0010\0223\n\006action"
    "\030\004 \001(\0162\021.Cmd.EFrameAction:\020EFRAMEACTION_"
    "MIN\022\037\n\006photos\030\005 \003(\0132\017.Cmd.GuildPhoto\"\311\001\n"
    "\033QueryFramePhotoListPhotoCmd\0224\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\031SCENE_USER_PHOTO_PROTOC"
    "MD\022\?\n\005param\030\002 \001(\0162\017.Cmd.PhotoParam:\037PHOT"
    "OPARAM_QUERY_FRAMEPHOTOLIST\022\022\n\007frameid\030\003"
    " \001(\r:\0010\022\037\n\006photos\030\004 \003(\0132\017.Cmd.GuildPhoto"
    "\"\335\001\n\032QueryUserPhotoListPhotoCmd\0224\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\031SCENE_USER_PHOTO_PRO"
    "TOCMD\022>\n\005param\030\002 \001(\0162\017.Cmd.PhotoParam:\036P"
    "HOTOPARAM_QUERY_USERPHOTOLIST\022\037\n\006frames\030"
    "\003 \003(\0132\017.Cmd.PhotoFrame\022\023\n\010maxphoto\030\004 \001(\r"
    ":\0010\022\023\n\010maxframe\030\005 \001(\r:\0010\"\?\n\tFrameShow\022\022\n"
    "\007frameid\030\001 \001(\r:\0010\022\036\n\005photo\030\002 \001(\0132\017.Cmd.G"
    "uildPhoto\"\253\001\n\027UpdateFrameShowPhotoCmd\0224\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_PHO"
    "TO_PROTOCMD\022;\n\005param\030\002 \001(\0162\017.Cmd.PhotoPa"
    "ram:\033PHOTOPARAM_UPDATE_FRAMESHOW\022\035\n\005show"
    "s\030\003 \003(\0132\016.Cmd.FrameShow\"\341\001\n\030FramePhotoUp"
    "datePhotoCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\031SCENE_USER_PHOTO_PROTOCMD\022<\n\005param\030\002 \001("
    "\0162\017.Cmd.PhotoParam:\034PHOTOPARAM_UPDATE_FR"
    "AMEPHOTO\022\022\n\007frameid\030\003 \001(\r:\0010\022\037\n\006update\030\004"
    " \001(\0132\017.Cmd.GuildPhoto\022\034\n\003del\030\005 \001(\0132\017.Cmd"
    ".GuildPhoto\"h\n\010PhotoMd5\022\023\n\010sourceid\030\001 \001("
    "\r:\0010\022\017\n\004time\030\002 \001(\r:\0010\022)\n\006source\030\003 \001(\0162\014."
    "Cmd.ESource:\013ESOURCE_MIN\022\013\n\003md5\030\004 \001(\t\"\243\001"
    "\n\024QueryMd5ListPhotoCmd\0224\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\031SCENE_USER_PHOTO_PROTOCMD\0228\n\005"
    "param\030\002 \001(\0162\017.Cmd.PhotoParam:\030PHOTOPARAM"
    "_QUERY_MD5LIST\022\033\n\004item\030\003 \003(\0132\r.Cmd.Photo"
    "Md5\"\226\001\n\016AddMd5PhotoCmd\0224\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\031SCENE_USER_PHOTO_PROTOCMD\0222\n\005"
    "param\030\002 \001(\0162\017.Cmd.PhotoParam:\022PHOTOPARAM"
    "_ADD_MD5\022\032\n\003md5\030\003 \001(\0132\r.Cmd.PhotoMd5\"\234\001\n"
    "\021RemoveMd5PhotoCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\031SCENE_USER_PHOTO_PROTOCMD\0225\n\005para"
    "m\030\002 \001(\0162\017.Cmd.PhotoParam:\025PHOTOPARAM_REM"
    "OVE_MD5\022\032\n\003md5\030\003 \001(\0132\r.Cmd.PhotoMd5*\336\002\n\n"
    "PhotoParam\022\037\n\033PHOTOPARAM_QUERY_PHOTO_LIS"
    "T\020\001\022\030\n\024PHOTOPARAM_PHOTO_OPT\020\002\022\033\n\027PHOTOPA"
    "RAM_PHOTO_UPDATE\020\003\022\033\n\027PHOTOPARAM_FRAME_A"
    "CTION\020\004\022#\n\037PHOTOPARAM_QUERY_FRAMEPHOTOLI"
    "ST\020\005\022\"\n\036PHOTOPARAM_QUERY_USERPHOTOLIST\020\006"
    "\022\037\n\033PHOTOPARAM_UPDATE_FRAMESHOW\020\007\022 \n\034PHO"
    "TOPARAM_UPDATE_FRAMEPHOTO\020\010\022\034\n\030PHOTOPARA"
    "M_QUERY_MD5LIST\020\t\022\026\n\022PHOTOPARAM_ADD_MD5\020"
    "\n\022\031\n\025PHOTOPARAM_REMOVE_MD5\020\013*\243\001\n\rEPhotoO"
    "ptType\022\025\n\021EPHOTOOPTTYPE_MIN\020\000\022\025\n\021EPHOTOO"
    "PTTYPE_ADD\020\001\022\030\n\024EPHOTOOPTTYPE_UPLOAD\020\002\022\030"
    "\n\024EPHOTOOPTTYPE_REMOVE\020\003\022\031\n\025EPHOTOOPTTYP"
    "E_REPLACE\020\004\022\025\n\021EPHOTOOPTTYPE_MAX\020\005*l\n\014EF"
    "rameAction\022\024\n\020EFRAMEACTION_MIN\020\000\022\027\n\023EFRA"
    "MEACTION_UPLOAD\020\001\022\027\n\023EFRAMEACTION_REMOVE"
    "\020\002\022\024\n\020EFRAMEACTION_MAX\020\003", 3184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PhotoCmd.proto", &protobuf_RegisterTypes);
  PhotoItem::default_instance_ = new PhotoItem();
  PhotoQueryListCmd::default_instance_ = new PhotoQueryListCmd();
  PhotoOptCmd::default_instance_ = new PhotoOptCmd();
  PhotoUpdateNtf::default_instance_ = new PhotoUpdateNtf();
  FrameActionPhotoCmd::default_instance_ = new FrameActionPhotoCmd();
  QueryFramePhotoListPhotoCmd::default_instance_ = new QueryFramePhotoListPhotoCmd();
  QueryUserPhotoListPhotoCmd::default_instance_ = new QueryUserPhotoListPhotoCmd();
  FrameShow::default_instance_ = new FrameShow();
  UpdateFrameShowPhotoCmd::default_instance_ = new UpdateFrameShowPhotoCmd();
  FramePhotoUpdatePhotoCmd::default_instance_ = new FramePhotoUpdatePhotoCmd();
  PhotoMd5::default_instance_ = new PhotoMd5();
  QueryMd5ListPhotoCmd::default_instance_ = new QueryMd5ListPhotoCmd();
  AddMd5PhotoCmd::default_instance_ = new AddMd5PhotoCmd();
  RemoveMd5PhotoCmd::default_instance_ = new RemoveMd5PhotoCmd();
  PhotoItem::default_instance_->InitAsDefaultInstance();
  PhotoQueryListCmd::default_instance_->InitAsDefaultInstance();
  PhotoOptCmd::default_instance_->InitAsDefaultInstance();
  PhotoUpdateNtf::default_instance_->InitAsDefaultInstance();
  FrameActionPhotoCmd::default_instance_->InitAsDefaultInstance();
  QueryFramePhotoListPhotoCmd::default_instance_->InitAsDefaultInstance();
  QueryUserPhotoListPhotoCmd::default_instance_->InitAsDefaultInstance();
  FrameShow::default_instance_->InitAsDefaultInstance();
  UpdateFrameShowPhotoCmd::default_instance_->InitAsDefaultInstance();
  FramePhotoUpdatePhotoCmd::default_instance_->InitAsDefaultInstance();
  PhotoMd5::default_instance_->InitAsDefaultInstance();
  QueryMd5ListPhotoCmd::default_instance_->InitAsDefaultInstance();
  AddMd5PhotoCmd::default_instance_->InitAsDefaultInstance();
  RemoveMd5PhotoCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PhotoCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PhotoCmd_2eproto {
  StaticDescriptorInitializer_PhotoCmd_2eproto() {
    protobuf_AddDesc_PhotoCmd_2eproto();
  }
} static_descriptor_initializer_PhotoCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* PhotoParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoParam_descriptor_;
}
bool PhotoParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPhotoOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPhotoOptType_descriptor_;
}
bool EPhotoOptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFrameAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFrameAction_descriptor_;
}
bool EFrameAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoItem::kIndexFieldNumber;
const int PhotoItem::kMapidFieldNumber;
const int PhotoItem::kTimeFieldNumber;
const int PhotoItem::kAnglezFieldNumber;
const int PhotoItem::kIsuploadFieldNumber;
const int PhotoItem::kCharidFieldNumber;
#endif  // !_MSC_VER

PhotoItem::PhotoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoItem)
}

void PhotoItem::InitAsDefaultInstance() {
}

PhotoItem::PhotoItem(const PhotoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoItem)
}

void PhotoItem::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  mapid_ = 0u;
  time_ = 0u;
  anglez_ = 0u;
  isupload_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoItem::~PhotoItem() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoItem)
  SharedDtor();
}

void PhotoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoItem_descriptor_;
}

const PhotoItem& PhotoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

PhotoItem* PhotoItem::default_instance_ = NULL;

PhotoItem* PhotoItem::New() const {
  return new PhotoItem;
}

void PhotoItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhotoItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(index_, isupload_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_anglez;
        break;
      }

      // optional uint32 anglez = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_anglez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isupload;
        break;
      }

      // optional bool isupload = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_isupload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isupload_)));
          set_has_isupload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoItem)
  return false;
#undef DO_
}

void PhotoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoItem)
  // optional uint32 index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 mapid = 2 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 anglez = 4 [default = 0];
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->anglez(), output);
  }

  // optional bool isupload = 5 [default = false];
  if (has_isupload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isupload(), output);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoItem)
}

::google::protobuf::uint8* PhotoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoItem)
  // optional uint32 index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 mapid = 2 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 anglez = 4 [default = 0];
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->anglez(), target);
  }

  // optional bool isupload = 5 [default = false];
  if (has_isupload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isupload(), target);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoItem)
  return target;
}

int PhotoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 mapid = 2 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 anglez = 4 [default = 0];
    if (has_anglez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anglez());
    }

    // optional bool isupload = 5 [default = false];
    if (has_isupload()) {
      total_size += 1 + 1;
    }

    // optional uint64 charid = 6 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoItem::MergeFrom(const PhotoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
    if (from.has_isupload()) {
      set_isupload(from.isupload());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoItem::CopyFrom(const PhotoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoItem::IsInitialized() const {

  return true;
}

void PhotoItem::Swap(PhotoItem* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(mapid_, other->mapid_);
    std::swap(time_, other->time_);
    std::swap(anglez_, other->anglez_);
    std::swap(isupload_, other->isupload_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoItem_descriptor_;
  metadata.reflection = PhotoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoQueryListCmd::kCmdFieldNumber;
const int PhotoQueryListCmd::kParamFieldNumber;
const int PhotoQueryListCmd::kPhotosFieldNumber;
const int PhotoQueryListCmd::kSizeFieldNumber;
#endif  // !_MSC_VER

PhotoQueryListCmd::PhotoQueryListCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoQueryListCmd)
}

void PhotoQueryListCmd::InitAsDefaultInstance() {
}

PhotoQueryListCmd::PhotoQueryListCmd(const PhotoQueryListCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoQueryListCmd)
}

void PhotoQueryListCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 1;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoQueryListCmd::~PhotoQueryListCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoQueryListCmd)
  SharedDtor();
}

void PhotoQueryListCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoQueryListCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoQueryListCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoQueryListCmd_descriptor_;
}

const PhotoQueryListCmd& PhotoQueryListCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

PhotoQueryListCmd* PhotoQueryListCmd::default_instance_ = NULL;

PhotoQueryListCmd* PhotoQueryListCmd::New() const {
  return new PhotoQueryListCmd;
}

void PhotoQueryListCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 30;
    param_ = 1;
    size_ = 0u;
  }
  photos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoQueryListCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoQueryListCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_PHOTO_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        break;
      }

      // repeated .Cmd.PhotoItem photos = 3;
      case 3: {
        if (tag == 26) {
         parse_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint32 size = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoQueryListCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoQueryListCmd)
  return false;
#undef DO_
}

void PhotoQueryListCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoQueryListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_PHOTO_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.PhotoItem photos = 3;
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->photos(i), output);
  }

  // optional uint32 size = 4 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoQueryListCmd)
}

::google::protobuf::uint8* PhotoQueryListCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoQueryListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_PHOTO_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.PhotoItem photos = 3;
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->photos(i), target);
  }

  // optional uint32 size = 4 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoQueryListCmd)
  return target;
}

int PhotoQueryListCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_PHOTO_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 size = 4 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  // repeated .Cmd.PhotoItem photos = 3;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoQueryListCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoQueryListCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoQueryListCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoQueryListCmd::MergeFrom(const PhotoQueryListCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoQueryListCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoQueryListCmd::CopyFrom(const PhotoQueryListCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoQueryListCmd::IsInitialized() const {

  return true;
}

void PhotoQueryListCmd::Swap(PhotoQueryListCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    photos_.Swap(&other->photos_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoQueryListCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoQueryListCmd_descriptor_;
  metadata.reflection = PhotoQueryListCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoOptCmd::kCmdFieldNumber;
const int PhotoOptCmd::kParamFieldNumber;
const int PhotoOptCmd::kOpttypeFieldNumber;
const int PhotoOptCmd::kIndexFieldNumber;
const int PhotoOptCmd::kAnglezFieldNumber;
const int PhotoOptCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

PhotoOptCmd::PhotoOptCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoOptCmd)
}

void PhotoOptCmd::InitAsDefaultInstance() {
}

PhotoOptCmd::PhotoOptCmd(const PhotoOptCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoOptCmd)
}

void PhotoOptCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 2;
  opttype_ = 0;
  index_ = 0u;
  anglez_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoOptCmd::~PhotoOptCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoOptCmd)
  SharedDtor();
}

void PhotoOptCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoOptCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoOptCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoOptCmd_descriptor_;
}

const PhotoOptCmd& PhotoOptCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

PhotoOptCmd* PhotoOptCmd::default_instance_ = NULL;

PhotoOptCmd* PhotoOptCmd::New() const {
  return new PhotoOptCmd;
}

void PhotoOptCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhotoOptCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(opttype_, mapid_);
    cmd_ = 30;
    param_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoOptCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoOptCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_OPT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opttype;
        break;
      }

      // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_opttype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPhotoOptType_IsValid(value)) {
            set_opttype(static_cast< ::Cmd::EPhotoOptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_anglez;
        break;
      }

      // optional uint32 anglez = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_anglez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoOptCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoOptCmd)
  return false;
#undef DO_
}

void PhotoOptCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoOptCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_OPT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
  if (has_opttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opttype(), output);
  }

  // optional uint32 index = 4 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // optional uint32 anglez = 5 [default = 0];
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->anglez(), output);
  }

  // optional uint32 mapid = 6 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoOptCmd)
}

::google::protobuf::uint8* PhotoOptCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoOptCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_OPT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
  if (has_opttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opttype(), target);
  }

  // optional uint32 index = 4 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // optional uint32 anglez = 5 [default = 0];
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->anglez(), target);
  }

  // optional uint32 mapid = 6 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoOptCmd)
  return target;
}

int PhotoOptCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_OPT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opttype());
    }

    // optional uint32 index = 4 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 anglez = 5 [default = 0];
    if (has_anglez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anglez());
    }

    // optional uint32 mapid = 6 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoOptCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoOptCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoOptCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoOptCmd::MergeFrom(const PhotoOptCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_opttype()) {
      set_opttype(from.opttype());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoOptCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoOptCmd::CopyFrom(const PhotoOptCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoOptCmd::IsInitialized() const {

  return true;
}

void PhotoOptCmd::Swap(PhotoOptCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(opttype_, other->opttype_);
    std::swap(index_, other->index_);
    std::swap(anglez_, other->anglez_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoOptCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoOptCmd_descriptor_;
  metadata.reflection = PhotoOptCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoUpdateNtf::kCmdFieldNumber;
const int PhotoUpdateNtf::kParamFieldNumber;
const int PhotoUpdateNtf::kOpttypeFieldNumber;
const int PhotoUpdateNtf::kPhotoFieldNumber;
#endif  // !_MSC_VER

PhotoUpdateNtf::PhotoUpdateNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoUpdateNtf)
}

void PhotoUpdateNtf::InitAsDefaultInstance() {
  photo_ = const_cast< ::Cmd::PhotoItem*>(&::Cmd::PhotoItem::default_instance());
}

PhotoUpdateNtf::PhotoUpdateNtf(const PhotoUpdateNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoUpdateNtf)
}

void PhotoUpdateNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 3;
  opttype_ = 0;
  photo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoUpdateNtf::~PhotoUpdateNtf() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoUpdateNtf)
  SharedDtor();
}

void PhotoUpdateNtf::SharedDtor() {
  if (this != default_instance_) {
    delete photo_;
  }
}

void PhotoUpdateNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoUpdateNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoUpdateNtf_descriptor_;
}

const PhotoUpdateNtf& PhotoUpdateNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

PhotoUpdateNtf* PhotoUpdateNtf::default_instance_ = NULL;

PhotoUpdateNtf* PhotoUpdateNtf::New() const {
  return new PhotoUpdateNtf;
}

void PhotoUpdateNtf::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 30;
    param_ = 3;
    opttype_ = 0;
    if (has_photo()) {
      if (photo_ != NULL) photo_->::Cmd::PhotoItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoUpdateNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoUpdateNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opttype;
        break;
      }

      // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_opttype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPhotoOptType_IsValid(value)) {
            set_opttype(static_cast< ::Cmd::EPhotoOptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_photo;
        break;
      }

      // optional .Cmd.PhotoItem photo = 4;
      case 4: {
        if (tag == 34) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoUpdateNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoUpdateNtf)
  return false;
#undef DO_
}

void PhotoUpdateNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoUpdateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
  if (has_opttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opttype(), output);
  }

  // optional .Cmd.PhotoItem photo = 4;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->photo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoUpdateNtf)
}

::google::protobuf::uint8* PhotoUpdateNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoUpdateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
  if (has_opttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opttype(), target);
  }

  // optional .Cmd.PhotoItem photo = 4;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->photo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoUpdateNtf)
  return target;
}

int PhotoUpdateNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
    if (has_opttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opttype());
    }

    // optional .Cmd.PhotoItem photo = 4;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoUpdateNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoUpdateNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoUpdateNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoUpdateNtf::MergeFrom(const PhotoUpdateNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_opttype()) {
      set_opttype(from.opttype());
    }
    if (from.has_photo()) {
      mutable_photo()->::Cmd::PhotoItem::MergeFrom(from.photo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoUpdateNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoUpdateNtf::CopyFrom(const PhotoUpdateNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoUpdateNtf::IsInitialized() const {

  return true;
}

void PhotoUpdateNtf::Swap(PhotoUpdateNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(opttype_, other->opttype_);
    std::swap(photo_, other->photo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoUpdateNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoUpdateNtf_descriptor_;
  metadata.reflection = PhotoUpdateNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameActionPhotoCmd::kCmdFieldNumber;
const int FrameActionPhotoCmd::kParamFieldNumber;
const int FrameActionPhotoCmd::kFrameidFieldNumber;
const int FrameActionPhotoCmd::kActionFieldNumber;
const int FrameActionPhotoCmd::kPhotosFieldNumber;
#endif  // !_MSC_VER

FrameActionPhotoCmd::FrameActionPhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FrameActionPhotoCmd)
}

void FrameActionPhotoCmd::InitAsDefaultInstance() {
}

FrameActionPhotoCmd::FrameActionPhotoCmd(const FrameActionPhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FrameActionPhotoCmd)
}

void FrameActionPhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 4;
  frameid_ = 0u;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameActionPhotoCmd::~FrameActionPhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FrameActionPhotoCmd)
  SharedDtor();
}

void FrameActionPhotoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameActionPhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameActionPhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameActionPhotoCmd_descriptor_;
}

const FrameActionPhotoCmd& FrameActionPhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

FrameActionPhotoCmd* FrameActionPhotoCmd::default_instance_ = NULL;

FrameActionPhotoCmd* FrameActionPhotoCmd::New() const {
  return new FrameActionPhotoCmd;
}

void FrameActionPhotoCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrameActionPhotoCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(frameid_, action_);
    cmd_ = 30;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  photos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameActionPhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FrameActionPhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_FRAME_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frameid;
        break;
      }

      // optional uint32 frameid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .Cmd.EFrameAction action = 4 [default = EFRAMEACTION_MIN];
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFrameAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EFrameAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_photos;
        break;
      }

      // repeated .Cmd.GuildPhoto photos = 5;
      case 5: {
        if (tag == 42) {
         parse_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_photos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FrameActionPhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FrameActionPhotoCmd)
  return false;
#undef DO_
}

void FrameActionPhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FrameActionPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_FRAME_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 frameid = 3 [default = 0];
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frameid(), output);
  }

  // optional .Cmd.EFrameAction action = 4 [default = EFRAMEACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // repeated .Cmd.GuildPhoto photos = 5;
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->photos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FrameActionPhotoCmd)
}

::google::protobuf::uint8* FrameActionPhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FrameActionPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_FRAME_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 frameid = 3 [default = 0];
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frameid(), target);
  }

  // optional .Cmd.EFrameAction action = 4 [default = EFRAMEACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // repeated .Cmd.GuildPhoto photos = 5;
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->photos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FrameActionPhotoCmd)
  return target;
}

int FrameActionPhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_FRAME_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 frameid = 3 [default = 0];
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

    // optional .Cmd.EFrameAction action = 4 [default = EFRAMEACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  // repeated .Cmd.GuildPhoto photos = 5;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameActionPhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameActionPhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameActionPhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameActionPhotoCmd::MergeFrom(const FrameActionPhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameActionPhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameActionPhotoCmd::CopyFrom(const FrameActionPhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameActionPhotoCmd::IsInitialized() const {

  return true;
}

void FrameActionPhotoCmd::Swap(FrameActionPhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(frameid_, other->frameid_);
    std::swap(action_, other->action_);
    photos_.Swap(&other->photos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameActionPhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameActionPhotoCmd_descriptor_;
  metadata.reflection = FrameActionPhotoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFramePhotoListPhotoCmd::kCmdFieldNumber;
const int QueryFramePhotoListPhotoCmd::kParamFieldNumber;
const int QueryFramePhotoListPhotoCmd::kFrameidFieldNumber;
const int QueryFramePhotoListPhotoCmd::kPhotosFieldNumber;
#endif  // !_MSC_VER

QueryFramePhotoListPhotoCmd::QueryFramePhotoListPhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryFramePhotoListPhotoCmd)
}

void QueryFramePhotoListPhotoCmd::InitAsDefaultInstance() {
}

QueryFramePhotoListPhotoCmd::QueryFramePhotoListPhotoCmd(const QueryFramePhotoListPhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryFramePhotoListPhotoCmd)
}

void QueryFramePhotoListPhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 5;
  frameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFramePhotoListPhotoCmd::~QueryFramePhotoListPhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryFramePhotoListPhotoCmd)
  SharedDtor();
}

void QueryFramePhotoListPhotoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFramePhotoListPhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFramePhotoListPhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFramePhotoListPhotoCmd_descriptor_;
}

const QueryFramePhotoListPhotoCmd& QueryFramePhotoListPhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

QueryFramePhotoListPhotoCmd* QueryFramePhotoListPhotoCmd::default_instance_ = NULL;

QueryFramePhotoListPhotoCmd* QueryFramePhotoListPhotoCmd::New() const {
  return new QueryFramePhotoListPhotoCmd;
}

void QueryFramePhotoListPhotoCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 30;
    param_ = 5;
    frameid_ = 0u;
  }
  photos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFramePhotoListPhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryFramePhotoListPhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_FRAMEPHOTOLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frameid;
        break;
      }

      // optional uint32 frameid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_photos;
        break;
      }

      // repeated .Cmd.GuildPhoto photos = 4;
      case 4: {
        if (tag == 34) {
         parse_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_photos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryFramePhotoListPhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryFramePhotoListPhotoCmd)
  return false;
#undef DO_
}

void QueryFramePhotoListPhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryFramePhotoListPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_FRAMEPHOTOLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 frameid = 3 [default = 0];
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frameid(), output);
  }

  // repeated .Cmd.GuildPhoto photos = 4;
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->photos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryFramePhotoListPhotoCmd)
}

::google::protobuf::uint8* QueryFramePhotoListPhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryFramePhotoListPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_FRAMEPHOTOLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 frameid = 3 [default = 0];
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frameid(), target);
  }

  // repeated .Cmd.GuildPhoto photos = 4;
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->photos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryFramePhotoListPhotoCmd)
  return target;
}

int QueryFramePhotoListPhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_FRAMEPHOTOLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 frameid = 3 [default = 0];
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

  }
  // repeated .Cmd.GuildPhoto photos = 4;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFramePhotoListPhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFramePhotoListPhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFramePhotoListPhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFramePhotoListPhotoCmd::MergeFrom(const QueryFramePhotoListPhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFramePhotoListPhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFramePhotoListPhotoCmd::CopyFrom(const QueryFramePhotoListPhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFramePhotoListPhotoCmd::IsInitialized() const {

  return true;
}

void QueryFramePhotoListPhotoCmd::Swap(QueryFramePhotoListPhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(frameid_, other->frameid_);
    photos_.Swap(&other->photos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFramePhotoListPhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFramePhotoListPhotoCmd_descriptor_;
  metadata.reflection = QueryFramePhotoListPhotoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserPhotoListPhotoCmd::kCmdFieldNumber;
const int QueryUserPhotoListPhotoCmd::kParamFieldNumber;
const int QueryUserPhotoListPhotoCmd::kFramesFieldNumber;
const int QueryUserPhotoListPhotoCmd::kMaxphotoFieldNumber;
const int QueryUserPhotoListPhotoCmd::kMaxframeFieldNumber;
#endif  // !_MSC_VER

QueryUserPhotoListPhotoCmd::QueryUserPhotoListPhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserPhotoListPhotoCmd)
}

void QueryUserPhotoListPhotoCmd::InitAsDefaultInstance() {
}

QueryUserPhotoListPhotoCmd::QueryUserPhotoListPhotoCmd(const QueryUserPhotoListPhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserPhotoListPhotoCmd)
}

void QueryUserPhotoListPhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 6;
  maxphoto_ = 0u;
  maxframe_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserPhotoListPhotoCmd::~QueryUserPhotoListPhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserPhotoListPhotoCmd)
  SharedDtor();
}

void QueryUserPhotoListPhotoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUserPhotoListPhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserPhotoListPhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserPhotoListPhotoCmd_descriptor_;
}

const QueryUserPhotoListPhotoCmd& QueryUserPhotoListPhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

QueryUserPhotoListPhotoCmd* QueryUserPhotoListPhotoCmd::default_instance_ = NULL;

QueryUserPhotoListPhotoCmd* QueryUserPhotoListPhotoCmd::New() const {
  return new QueryUserPhotoListPhotoCmd;
}

void QueryUserPhotoListPhotoCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryUserPhotoListPhotoCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(maxphoto_, maxframe_);
    cmd_ = 30;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserPhotoListPhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserPhotoListPhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_USERPHOTOLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frames;
        break;
      }

      // repeated .Cmd.PhotoFrame frames = 3;
      case 3: {
        if (tag == 26) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frames;
        if (input->ExpectTag(32)) goto parse_maxphoto;
        break;
      }

      // optional uint32 maxphoto = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxphoto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxphoto_)));
          set_has_maxphoto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxframe;
        break;
      }

      // optional uint32 maxframe = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxframe_)));
          set_has_maxframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserPhotoListPhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserPhotoListPhotoCmd)
  return false;
#undef DO_
}

void QueryUserPhotoListPhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserPhotoListPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_USERPHOTOLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.PhotoFrame frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frames(i), output);
  }

  // optional uint32 maxphoto = 4 [default = 0];
  if (has_maxphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxphoto(), output);
  }

  // optional uint32 maxframe = 5 [default = 0];
  if (has_maxframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxframe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserPhotoListPhotoCmd)
}

::google::protobuf::uint8* QueryUserPhotoListPhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserPhotoListPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_USERPHOTOLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.PhotoFrame frames = 3;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frames(i), target);
  }

  // optional uint32 maxphoto = 4 [default = 0];
  if (has_maxphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxphoto(), target);
  }

  // optional uint32 maxframe = 5 [default = 0];
  if (has_maxframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxframe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserPhotoListPhotoCmd)
  return target;
}

int QueryUserPhotoListPhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_USERPHOTOLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 maxphoto = 4 [default = 0];
    if (has_maxphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxphoto());
    }

    // optional uint32 maxframe = 5 [default = 0];
    if (has_maxframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxframe());
    }

  }
  // repeated .Cmd.PhotoFrame frames = 3;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserPhotoListPhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserPhotoListPhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserPhotoListPhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserPhotoListPhotoCmd::MergeFrom(const QueryUserPhotoListPhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_maxphoto()) {
      set_maxphoto(from.maxphoto());
    }
    if (from.has_maxframe()) {
      set_maxframe(from.maxframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserPhotoListPhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserPhotoListPhotoCmd::CopyFrom(const QueryUserPhotoListPhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserPhotoListPhotoCmd::IsInitialized() const {

  return true;
}

void QueryUserPhotoListPhotoCmd::Swap(QueryUserPhotoListPhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    frames_.Swap(&other->frames_);
    std::swap(maxphoto_, other->maxphoto_);
    std::swap(maxframe_, other->maxframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserPhotoListPhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserPhotoListPhotoCmd_descriptor_;
  metadata.reflection = QueryUserPhotoListPhotoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameShow::kFrameidFieldNumber;
const int FrameShow::kPhotoFieldNumber;
#endif  // !_MSC_VER

FrameShow::FrameShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FrameShow)
}

void FrameShow::InitAsDefaultInstance() {
  photo_ = const_cast< ::Cmd::GuildPhoto*>(&::Cmd::GuildPhoto::default_instance());
}

FrameShow::FrameShow(const FrameShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FrameShow)
}

void FrameShow::SharedCtor() {
  _cached_size_ = 0;
  frameid_ = 0u;
  photo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameShow::~FrameShow() {
  // @@protoc_insertion_point(destructor:Cmd.FrameShow)
  SharedDtor();
}

void FrameShow::SharedDtor() {
  if (this != default_instance_) {
    delete photo_;
  }
}

void FrameShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameShow_descriptor_;
}

const FrameShow& FrameShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

FrameShow* FrameShow::default_instance_ = NULL;

FrameShow* FrameShow::New() const {
  return new FrameShow;
}

void FrameShow::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    frameid_ = 0u;
    if (has_photo()) {
      if (photo_ != NULL) photo_->::Cmd::GuildPhoto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FrameShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frameid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photo;
        break;
      }

      // optional .Cmd.GuildPhoto photo = 2;
      case 2: {
        if (tag == 18) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FrameShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FrameShow)
  return false;
#undef DO_
}

void FrameShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FrameShow)
  // optional uint32 frameid = 1 [default = 0];
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frameid(), output);
  }

  // optional .Cmd.GuildPhoto photo = 2;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->photo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FrameShow)
}

::google::protobuf::uint8* FrameShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FrameShow)
  // optional uint32 frameid = 1 [default = 0];
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frameid(), target);
  }

  // optional .Cmd.GuildPhoto photo = 2;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->photo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FrameShow)
  return target;
}

int FrameShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 frameid = 1 [default = 0];
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

    // optional .Cmd.GuildPhoto photo = 2;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameShow::MergeFrom(const FrameShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_photo()) {
      mutable_photo()->::Cmd::GuildPhoto::MergeFrom(from.photo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameShow::CopyFrom(const FrameShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameShow::IsInitialized() const {

  return true;
}

void FrameShow::Swap(FrameShow* other) {
  if (other != this) {
    std::swap(frameid_, other->frameid_);
    std::swap(photo_, other->photo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameShow_descriptor_;
  metadata.reflection = FrameShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFrameShowPhotoCmd::kCmdFieldNumber;
const int UpdateFrameShowPhotoCmd::kParamFieldNumber;
const int UpdateFrameShowPhotoCmd::kShowsFieldNumber;
#endif  // !_MSC_VER

UpdateFrameShowPhotoCmd::UpdateFrameShowPhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateFrameShowPhotoCmd)
}

void UpdateFrameShowPhotoCmd::InitAsDefaultInstance() {
}

UpdateFrameShowPhotoCmd::UpdateFrameShowPhotoCmd(const UpdateFrameShowPhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateFrameShowPhotoCmd)
}

void UpdateFrameShowPhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 7;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFrameShowPhotoCmd::~UpdateFrameShowPhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateFrameShowPhotoCmd)
  SharedDtor();
}

void UpdateFrameShowPhotoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFrameShowPhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFrameShowPhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFrameShowPhotoCmd_descriptor_;
}

const UpdateFrameShowPhotoCmd& UpdateFrameShowPhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

UpdateFrameShowPhotoCmd* UpdateFrameShowPhotoCmd::default_instance_ = NULL;

UpdateFrameShowPhotoCmd* UpdateFrameShowPhotoCmd::New() const {
  return new UpdateFrameShowPhotoCmd;
}

void UpdateFrameShowPhotoCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 30;
    param_ = 7;
  }
  shows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFrameShowPhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateFrameShowPhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMESHOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shows;
        break;
      }

      // repeated .Cmd.FrameShow shows = 3;
      case 3: {
        if (tag == 26) {
         parse_shows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateFrameShowPhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateFrameShowPhotoCmd)
  return false;
#undef DO_
}

void UpdateFrameShowPhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateFrameShowPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMESHOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.FrameShow shows = 3;
  for (int i = 0; i < this->shows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateFrameShowPhotoCmd)
}

::google::protobuf::uint8* UpdateFrameShowPhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateFrameShowPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMESHOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.FrameShow shows = 3;
  for (int i = 0; i < this->shows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateFrameShowPhotoCmd)
  return target;
}

int UpdateFrameShowPhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMESHOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.FrameShow shows = 3;
  total_size += 1 * this->shows_size();
  for (int i = 0; i < this->shows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFrameShowPhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFrameShowPhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFrameShowPhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFrameShowPhotoCmd::MergeFrom(const UpdateFrameShowPhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  shows_.MergeFrom(from.shows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFrameShowPhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFrameShowPhotoCmd::CopyFrom(const UpdateFrameShowPhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFrameShowPhotoCmd::IsInitialized() const {

  return true;
}

void UpdateFrameShowPhotoCmd::Swap(UpdateFrameShowPhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    shows_.Swap(&other->shows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFrameShowPhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFrameShowPhotoCmd_descriptor_;
  metadata.reflection = UpdateFrameShowPhotoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FramePhotoUpdatePhotoCmd::kCmdFieldNumber;
const int FramePhotoUpdatePhotoCmd::kParamFieldNumber;
const int FramePhotoUpdatePhotoCmd::kFrameidFieldNumber;
const int FramePhotoUpdatePhotoCmd::kUpdateFieldNumber;
const int FramePhotoUpdatePhotoCmd::kDelFieldNumber;
#endif  // !_MSC_VER

FramePhotoUpdatePhotoCmd::FramePhotoUpdatePhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FramePhotoUpdatePhotoCmd)
}

void FramePhotoUpdatePhotoCmd::InitAsDefaultInstance() {
  update_ = const_cast< ::Cmd::GuildPhoto*>(&::Cmd::GuildPhoto::default_instance());
  del_ = const_cast< ::Cmd::GuildPhoto*>(&::Cmd::GuildPhoto::default_instance());
}

FramePhotoUpdatePhotoCmd::FramePhotoUpdatePhotoCmd(const FramePhotoUpdatePhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FramePhotoUpdatePhotoCmd)
}

void FramePhotoUpdatePhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 8;
  frameid_ = 0u;
  update_ = NULL;
  del_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FramePhotoUpdatePhotoCmd::~FramePhotoUpdatePhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FramePhotoUpdatePhotoCmd)
  SharedDtor();
}

void FramePhotoUpdatePhotoCmd::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
    delete del_;
  }
}

void FramePhotoUpdatePhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FramePhotoUpdatePhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FramePhotoUpdatePhotoCmd_descriptor_;
}

const FramePhotoUpdatePhotoCmd& FramePhotoUpdatePhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

FramePhotoUpdatePhotoCmd* FramePhotoUpdatePhotoCmd::default_instance_ = NULL;

FramePhotoUpdatePhotoCmd* FramePhotoUpdatePhotoCmd::New() const {
  return new FramePhotoUpdatePhotoCmd;
}

void FramePhotoUpdatePhotoCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 30;
    param_ = 8;
    frameid_ = 0u;
    if (has_update()) {
      if (update_ != NULL) update_->::Cmd::GuildPhoto::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::Cmd::GuildPhoto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FramePhotoUpdatePhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FramePhotoUpdatePhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMEPHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frameid;
        break;
      }

      // optional uint32 frameid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_update;
        break;
      }

      // optional .Cmd.GuildPhoto update = 4;
      case 4: {
        if (tag == 34) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_del;
        break;
      }

      // optional .Cmd.GuildPhoto del = 5;
      case 5: {
        if (tag == 42) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FramePhotoUpdatePhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FramePhotoUpdatePhotoCmd)
  return false;
#undef DO_
}

void FramePhotoUpdatePhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FramePhotoUpdatePhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMEPHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 frameid = 3 [default = 0];
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frameid(), output);
  }

  // optional .Cmd.GuildPhoto update = 4;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->update(), output);
  }

  // optional .Cmd.GuildPhoto del = 5;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FramePhotoUpdatePhotoCmd)
}

::google::protobuf::uint8* FramePhotoUpdatePhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FramePhotoUpdatePhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMEPHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 frameid = 3 [default = 0];
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frameid(), target);
  }

  // optional .Cmd.GuildPhoto update = 4;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->update(), target);
  }

  // optional .Cmd.GuildPhoto del = 5;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FramePhotoUpdatePhotoCmd)
  return target;
}

int FramePhotoUpdatePhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMEPHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 frameid = 3 [default = 0];
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

    // optional .Cmd.GuildPhoto update = 4;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

    // optional .Cmd.GuildPhoto del = 5;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FramePhotoUpdatePhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FramePhotoUpdatePhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FramePhotoUpdatePhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FramePhotoUpdatePhotoCmd::MergeFrom(const FramePhotoUpdatePhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_update()) {
      mutable_update()->::Cmd::GuildPhoto::MergeFrom(from.update());
    }
    if (from.has_del()) {
      mutable_del()->::Cmd::GuildPhoto::MergeFrom(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FramePhotoUpdatePhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FramePhotoUpdatePhotoCmd::CopyFrom(const FramePhotoUpdatePhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FramePhotoUpdatePhotoCmd::IsInitialized() const {

  return true;
}

void FramePhotoUpdatePhotoCmd::Swap(FramePhotoUpdatePhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(frameid_, other->frameid_);
    std::swap(update_, other->update_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FramePhotoUpdatePhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FramePhotoUpdatePhotoCmd_descriptor_;
  metadata.reflection = FramePhotoUpdatePhotoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoMd5::kSourceidFieldNumber;
const int PhotoMd5::kTimeFieldNumber;
const int PhotoMd5::kSourceFieldNumber;
const int PhotoMd5::kMd5FieldNumber;
#endif  // !_MSC_VER

PhotoMd5::PhotoMd5()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoMd5)
}

void PhotoMd5::InitAsDefaultInstance() {
}

PhotoMd5::PhotoMd5(const PhotoMd5& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoMd5)
}

void PhotoMd5::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sourceid_ = 0u;
  time_ = 0u;
  source_ = 0;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoMd5::~PhotoMd5() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoMd5)
  SharedDtor();
}

void PhotoMd5::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void PhotoMd5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoMd5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoMd5_descriptor_;
}

const PhotoMd5& PhotoMd5::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

PhotoMd5* PhotoMd5::default_instance_ = NULL;

PhotoMd5* PhotoMd5::New() const {
  return new PhotoMd5;
}

void PhotoMd5::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhotoMd5*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sourceid_, time_);
    source_ = 0;
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoMd5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoMd5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourceid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
      case 3: {
        if (tag == 24) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_md5;
        break;
      }

      // optional string md5 = 4;
      case 4: {
        if (tag == 34) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoMd5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoMd5)
  return false;
#undef DO_
}

void PhotoMd5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoMd5)
  // optional uint32 sourceid = 1 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceid(), output);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  // optional string md5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoMd5)
}

::google::protobuf::uint8* PhotoMd5::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoMd5)
  // optional uint32 sourceid = 1 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceid(), target);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }

  // optional string md5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoMd5)
  return target;
}

int PhotoMd5::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sourceid = 1 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional uint32 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional string md5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoMd5::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoMd5* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoMd5*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoMd5::MergeFrom(const PhotoMd5& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoMd5::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoMd5::CopyFrom(const PhotoMd5& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoMd5::IsInitialized() const {

  return true;
}

void PhotoMd5::Swap(PhotoMd5* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(time_, other->time_);
    std::swap(source_, other->source_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoMd5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoMd5_descriptor_;
  metadata.reflection = PhotoMd5_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMd5ListPhotoCmd::kCmdFieldNumber;
const int QueryMd5ListPhotoCmd::kParamFieldNumber;
const int QueryMd5ListPhotoCmd::kItemFieldNumber;
#endif  // !_MSC_VER

QueryMd5ListPhotoCmd::QueryMd5ListPhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryMd5ListPhotoCmd)
}

void QueryMd5ListPhotoCmd::InitAsDefaultInstance() {
}

QueryMd5ListPhotoCmd::QueryMd5ListPhotoCmd(const QueryMd5ListPhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryMd5ListPhotoCmd)
}

void QueryMd5ListPhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMd5ListPhotoCmd::~QueryMd5ListPhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryMd5ListPhotoCmd)
  SharedDtor();
}

void QueryMd5ListPhotoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryMd5ListPhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMd5ListPhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMd5ListPhotoCmd_descriptor_;
}

const QueryMd5ListPhotoCmd& QueryMd5ListPhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

QueryMd5ListPhotoCmd* QueryMd5ListPhotoCmd::default_instance_ = NULL;

QueryMd5ListPhotoCmd* QueryMd5ListPhotoCmd::New() const {
  return new QueryMd5ListPhotoCmd;
}

void QueryMd5ListPhotoCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 30;
    param_ = 9;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryMd5ListPhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryMd5ListPhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_MD5LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .Cmd.PhotoMd5 item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryMd5ListPhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryMd5ListPhotoCmd)
  return false;
#undef DO_
}

void QueryMd5ListPhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryMd5ListPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_MD5LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.PhotoMd5 item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryMd5ListPhotoCmd)
}

::google::protobuf::uint8* QueryMd5ListPhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryMd5ListPhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_MD5LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.PhotoMd5 item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryMd5ListPhotoCmd)
  return target;
}

int QueryMd5ListPhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_MD5LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.PhotoMd5 item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMd5ListPhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryMd5ListPhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryMd5ListPhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryMd5ListPhotoCmd::MergeFrom(const QueryMd5ListPhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryMd5ListPhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMd5ListPhotoCmd::CopyFrom(const QueryMd5ListPhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMd5ListPhotoCmd::IsInitialized() const {

  return true;
}

void QueryMd5ListPhotoCmd::Swap(QueryMd5ListPhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryMd5ListPhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMd5ListPhotoCmd_descriptor_;
  metadata.reflection = QueryMd5ListPhotoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMd5PhotoCmd::kCmdFieldNumber;
const int AddMd5PhotoCmd::kParamFieldNumber;
const int AddMd5PhotoCmd::kMd5FieldNumber;
#endif  // !_MSC_VER

AddMd5PhotoCmd::AddMd5PhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddMd5PhotoCmd)
}

void AddMd5PhotoCmd::InitAsDefaultInstance() {
  md5_ = const_cast< ::Cmd::PhotoMd5*>(&::Cmd::PhotoMd5::default_instance());
}

AddMd5PhotoCmd::AddMd5PhotoCmd(const AddMd5PhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddMd5PhotoCmd)
}

void AddMd5PhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 10;
  md5_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMd5PhotoCmd::~AddMd5PhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddMd5PhotoCmd)
  SharedDtor();
}

void AddMd5PhotoCmd::SharedDtor() {
  if (this != default_instance_) {
    delete md5_;
  }
}

void AddMd5PhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMd5PhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMd5PhotoCmd_descriptor_;
}

const AddMd5PhotoCmd& AddMd5PhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

AddMd5PhotoCmd* AddMd5PhotoCmd::default_instance_ = NULL;

AddMd5PhotoCmd* AddMd5PhotoCmd::New() const {
  return new AddMd5PhotoCmd;
}

void AddMd5PhotoCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 30;
    param_ = 10;
    if (has_md5()) {
      if (md5_ != NULL) md5_->::Cmd::PhotoMd5::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMd5PhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddMd5PhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_ADD_MD5];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_md5;
        break;
      }

      // optional .Cmd.PhotoMd5 md5 = 3;
      case 3: {
        if (tag == 26) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddMd5PhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddMd5PhotoCmd)
  return false;
#undef DO_
}

void AddMd5PhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddMd5PhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_ADD_MD5];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.PhotoMd5 md5 = 3;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddMd5PhotoCmd)
}

::google::protobuf::uint8* AddMd5PhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddMd5PhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_ADD_MD5];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.PhotoMd5 md5 = 3;
  if (has_md5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddMd5PhotoCmd)
  return target;
}

int AddMd5PhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_ADD_MD5];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.PhotoMd5 md5 = 3;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMd5PhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMd5PhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMd5PhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMd5PhotoCmd::MergeFrom(const AddMd5PhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_md5()) {
      mutable_md5()->::Cmd::PhotoMd5::MergeFrom(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMd5PhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMd5PhotoCmd::CopyFrom(const AddMd5PhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMd5PhotoCmd::IsInitialized() const {

  return true;
}

void AddMd5PhotoCmd::Swap(AddMd5PhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMd5PhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMd5PhotoCmd_descriptor_;
  metadata.reflection = AddMd5PhotoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMd5PhotoCmd::kCmdFieldNumber;
const int RemoveMd5PhotoCmd::kParamFieldNumber;
const int RemoveMd5PhotoCmd::kMd5FieldNumber;
#endif  // !_MSC_VER

RemoveMd5PhotoCmd::RemoveMd5PhotoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RemoveMd5PhotoCmd)
}

void RemoveMd5PhotoCmd::InitAsDefaultInstance() {
  md5_ = const_cast< ::Cmd::PhotoMd5*>(&::Cmd::PhotoMd5::default_instance());
}

RemoveMd5PhotoCmd::RemoveMd5PhotoCmd(const RemoveMd5PhotoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RemoveMd5PhotoCmd)
}

void RemoveMd5PhotoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 30;
  param_ = 11;
  md5_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMd5PhotoCmd::~RemoveMd5PhotoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RemoveMd5PhotoCmd)
  SharedDtor();
}

void RemoveMd5PhotoCmd::SharedDtor() {
  if (this != default_instance_) {
    delete md5_;
  }
}

void RemoveMd5PhotoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMd5PhotoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMd5PhotoCmd_descriptor_;
}

const RemoveMd5PhotoCmd& RemoveMd5PhotoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PhotoCmd_2eproto();
  return *default_instance_;
}

RemoveMd5PhotoCmd* RemoveMd5PhotoCmd::default_instance_ = NULL;

RemoveMd5PhotoCmd* RemoveMd5PhotoCmd::New() const {
  return new RemoveMd5PhotoCmd;
}

void RemoveMd5PhotoCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 30;
    param_ = 11;
    if (has_md5()) {
      if (md5_ != NULL) md5_->::Cmd::PhotoMd5::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMd5PhotoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RemoveMd5PhotoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_REMOVE_MD5];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PhotoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PhotoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_md5;
        break;
      }

      // optional .Cmd.PhotoMd5 md5 = 3;
      case 3: {
        if (tag == 26) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RemoveMd5PhotoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RemoveMd5PhotoCmd)
  return false;
#undef DO_
}

void RemoveMd5PhotoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RemoveMd5PhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_REMOVE_MD5];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.PhotoMd5 md5 = 3;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RemoveMd5PhotoCmd)
}

::google::protobuf::uint8* RemoveMd5PhotoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RemoveMd5PhotoCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_REMOVE_MD5];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.PhotoMd5 md5 = 3;
  if (has_md5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RemoveMd5PhotoCmd)
  return target;
}

int RemoveMd5PhotoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_REMOVE_MD5];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.PhotoMd5 md5 = 3;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMd5PhotoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMd5PhotoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMd5PhotoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMd5PhotoCmd::MergeFrom(const RemoveMd5PhotoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_md5()) {
      mutable_md5()->::Cmd::PhotoMd5::MergeFrom(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMd5PhotoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMd5PhotoCmd::CopyFrom(const RemoveMd5PhotoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMd5PhotoCmd::IsInitialized() const {

  return true;
}

void RemoveMd5PhotoCmd::Swap(RemoveMd5PhotoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMd5PhotoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMd5PhotoCmd_descriptor_;
  metadata.reflection = RemoveMd5PhotoCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
