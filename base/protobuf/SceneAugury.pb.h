// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneAugury.proto

#ifndef PROTOBUF_SceneAugury_2eproto__INCLUDED
#define PROTOBUF_SceneAugury_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneAugury_2eproto();
void protobuf_AssignDesc_SceneAugury_2eproto();
void protobuf_ShutdownFile_SceneAugury_2eproto();

class AuguryInvite;
class AuguryInviteReply;
class AuguryChat;
class AuguryTitle;
class AuguryAnswer;
class AuguryQuit;

enum AuguryParam {
  AUGURYPARAM_INVITE = 1,
  AUGURYPARAM_INVITE_REPLY = 2,
  AUGURYPARAM_CHAT = 3,
  AUGURYPARAM_TITLE = 4,
  AUGURYPARAM_ANSWER = 5,
  AUGURYPARAM_QUIT = 6
};
bool AuguryParam_IsValid(int value);
const AuguryParam AuguryParam_MIN = AUGURYPARAM_INVITE;
const AuguryParam AuguryParam_MAX = AUGURYPARAM_QUIT;
const int AuguryParam_ARRAYSIZE = AuguryParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuguryParam_descriptor();
inline const ::std::string& AuguryParam_Name(AuguryParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuguryParam_descriptor(), value);
}
inline bool AuguryParam_Parse(
    const ::std::string& name, AuguryParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuguryParam>(
    AuguryParam_descriptor(), name, value);
}
enum EAuguryType {
  EAUGURYTYPE_LOVE_SEASON = 1,
  EAUGURYTYPE_STAR_GUIDE = 2,
  EAUGURYTYPE_ADVENTURE = 3,
  EAUGURYTYPE_VALENTINE = 4,
  EAUGURYTYPE_ACTIVITY = 5
};
bool EAuguryType_IsValid(int value);
const EAuguryType EAuguryType_MIN = EAUGURYTYPE_LOVE_SEASON;
const EAuguryType EAuguryType_MAX = EAUGURYTYPE_ACTIVITY;
const int EAuguryType_ARRAYSIZE = EAuguryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAuguryType_descriptor();
inline const ::std::string& EAuguryType_Name(EAuguryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAuguryType_descriptor(), value);
}
inline bool EAuguryType_Parse(
    const ::std::string& name, EAuguryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAuguryType>(
    EAuguryType_descriptor(), name, value);
}
enum EReplyType {
  EReplyType_Agree = 1,
  EReplyType_Refuse = 2
};
bool EReplyType_IsValid(int value);
const EReplyType EReplyType_MIN = EReplyType_Agree;
const EReplyType EReplyType_MAX = EReplyType_Refuse;
const int EReplyType_ARRAYSIZE = EReplyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EReplyType_descriptor();
inline const ::std::string& EReplyType_Name(EReplyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EReplyType_descriptor(), value);
}
inline bool EReplyType_Parse(
    const ::std::string& name, EReplyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EReplyType>(
    EReplyType_descriptor(), name, value);
}
// ===================================================================

class AuguryInvite : public ::google::protobuf::Message {
 public:
  AuguryInvite();
  virtual ~AuguryInvite();

  AuguryInvite(const AuguryInvite& from);

  inline AuguryInvite& operator=(const AuguryInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuguryInvite& default_instance();

  void Swap(AuguryInvite* other);

  // implements Message ----------------------------------------------

  AuguryInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuguryInvite& from);
  void MergeFrom(const AuguryInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuguryParam param() const;
  inline void set_param(::Cmd::AuguryParam value);

  // optional uint64 inviterid = 3;
  inline bool has_inviterid() const;
  inline void clear_inviterid();
  static const int kInviteridFieldNumber = 3;
  inline ::google::protobuf::uint64 inviterid() const;
  inline void set_inviterid(::google::protobuf::uint64 value);

  // optional string invitername = 4;
  inline bool has_invitername() const;
  inline void clear_invitername();
  static const int kInviternameFieldNumber = 4;
  inline const ::std::string& invitername() const;
  inline void set_invitername(const ::std::string& value);
  inline void set_invitername(const char* value);
  inline void set_invitername(const char* value, size_t size);
  inline ::std::string* mutable_invitername();
  inline ::std::string* release_invitername();
  inline void set_allocated_invitername(::std::string* invitername);

  // optional uint64 npcguid = 5;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 5;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // optional .Cmd.EAuguryType type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::Cmd::EAuguryType type() const;
  inline void set_type(::Cmd::EAuguryType value);

  // optional bool isextra = 7;
  inline bool has_isextra() const;
  inline void clear_isextra();
  static const int kIsextraFieldNumber = 7;
  inline bool isextra() const;
  inline void set_isextra(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.AuguryInvite)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_inviterid();
  inline void clear_has_inviterid();
  inline void set_has_invitername();
  inline void clear_has_invitername();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isextra();
  inline void clear_has_isextra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 inviterid_;
  ::std::string* invitername_;
  ::google::protobuf::uint64 npcguid_;
  int type_;
  bool isextra_;
  friend void  protobuf_AddDesc_SceneAugury_2eproto();
  friend void protobuf_AssignDesc_SceneAugury_2eproto();
  friend void protobuf_ShutdownFile_SceneAugury_2eproto();

  void InitAsDefaultInstance();
  static AuguryInvite* default_instance_;
};
// -------------------------------------------------------------------

class AuguryInviteReply : public ::google::protobuf::Message {
 public:
  AuguryInviteReply();
  virtual ~AuguryInviteReply();

  AuguryInviteReply(const AuguryInviteReply& from);

  inline AuguryInviteReply& operator=(const AuguryInviteReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuguryInviteReply& default_instance();

  void Swap(AuguryInviteReply* other);

  // implements Message ----------------------------------------------

  AuguryInviteReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuguryInviteReply& from);
  void MergeFrom(const AuguryInviteReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE_REPLY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuguryParam param() const;
  inline void set_param(::Cmd::AuguryParam value);

  // optional .Cmd.EReplyType type = 3 [default = EReplyType_Refuse];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EReplyType type() const;
  inline void set_type(::Cmd::EReplyType value);

  // optional uint64 inviterid = 4;
  inline bool has_inviterid() const;
  inline void clear_inviterid();
  static const int kInviteridFieldNumber = 4;
  inline ::google::protobuf::uint64 inviterid() const;
  inline void set_inviterid(::google::protobuf::uint64 value);

  // optional uint64 npcguid = 5;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 5;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // optional .Cmd.EAuguryType augurytype = 6;
  inline bool has_augurytype() const;
  inline void clear_augurytype();
  static const int kAugurytypeFieldNumber = 6;
  inline ::Cmd::EAuguryType augurytype() const;
  inline void set_augurytype(::Cmd::EAuguryType value);

  // optional bool isextra = 7;
  inline bool has_isextra() const;
  inline void clear_isextra();
  static const int kIsextraFieldNumber = 7;
  inline bool isextra() const;
  inline void set_isextra(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.AuguryInviteReply)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_inviterid();
  inline void clear_has_inviterid();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();
  inline void set_has_augurytype();
  inline void clear_has_augurytype();
  inline void set_has_isextra();
  inline void clear_has_isextra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 inviterid_;
  int type_;
  int augurytype_;
  ::google::protobuf::uint64 npcguid_;
  bool isextra_;
  friend void  protobuf_AddDesc_SceneAugury_2eproto();
  friend void protobuf_AssignDesc_SceneAugury_2eproto();
  friend void protobuf_ShutdownFile_SceneAugury_2eproto();

  void InitAsDefaultInstance();
  static AuguryInviteReply* default_instance_;
};
// -------------------------------------------------------------------

class AuguryChat : public ::google::protobuf::Message {
 public:
  AuguryChat();
  virtual ~AuguryChat();

  AuguryChat(const AuguryChat& from);

  inline AuguryChat& operator=(const AuguryChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuguryChat& default_instance();

  void Swap(AuguryChat* other);

  // implements Message ----------------------------------------------

  AuguryChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuguryChat& from);
  void MergeFrom(const AuguryChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_CHAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuguryParam param() const;
  inline void set_param(::Cmd::AuguryParam value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string sender = 4;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 4;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // @@protoc_insertion_point(class_scope:Cmd.AuguryChat)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sender();
  inline void clear_has_sender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* content_;
  ::std::string* sender_;
  friend void  protobuf_AddDesc_SceneAugury_2eproto();
  friend void protobuf_AssignDesc_SceneAugury_2eproto();
  friend void protobuf_ShutdownFile_SceneAugury_2eproto();

  void InitAsDefaultInstance();
  static AuguryChat* default_instance_;
};
// -------------------------------------------------------------------

class AuguryTitle : public ::google::protobuf::Message {
 public:
  AuguryTitle();
  virtual ~AuguryTitle();

  AuguryTitle(const AuguryTitle& from);

  inline AuguryTitle& operator=(const AuguryTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuguryTitle& default_instance();

  void Swap(AuguryTitle* other);

  // implements Message ----------------------------------------------

  AuguryTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuguryTitle& from);
  void MergeFrom(const AuguryTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_TITLE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuguryParam param() const;
  inline void set_param(::Cmd::AuguryParam value);

  // optional uint32 titleid = 3;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 3;
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // optional .Cmd.EAuguryType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EAuguryType type() const;
  inline void set_type(::Cmd::EAuguryType value);

  // optional uint32 subtableid = 5;
  inline bool has_subtableid() const;
  inline void clear_subtableid();
  static const int kSubtableidFieldNumber = 5;
  inline ::google::protobuf::uint32 subtableid() const;
  inline void set_subtableid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AuguryTitle)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subtableid();
  inline void clear_has_subtableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 titleid_;
  int type_;
  ::google::protobuf::uint32 subtableid_;
  friend void  protobuf_AddDesc_SceneAugury_2eproto();
  friend void protobuf_AssignDesc_SceneAugury_2eproto();
  friend void protobuf_ShutdownFile_SceneAugury_2eproto();

  void InitAsDefaultInstance();
  static AuguryTitle* default_instance_;
};
// -------------------------------------------------------------------

class AuguryAnswer : public ::google::protobuf::Message {
 public:
  AuguryAnswer();
  virtual ~AuguryAnswer();

  AuguryAnswer(const AuguryAnswer& from);

  inline AuguryAnswer& operator=(const AuguryAnswer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuguryAnswer& default_instance();

  void Swap(AuguryAnswer* other);

  // implements Message ----------------------------------------------

  AuguryAnswer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuguryAnswer& from);
  void MergeFrom(const AuguryAnswer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_ANSWER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuguryParam param() const;
  inline void set_param(::Cmd::AuguryParam value);

  // optional uint32 titleid = 3;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 3;
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // optional uint32 answer = 4;
  inline bool has_answer() const;
  inline void clear_answer();
  static const int kAnswerFieldNumber = 4;
  inline ::google::protobuf::uint32 answer() const;
  inline void set_answer(::google::protobuf::uint32 value);

  // optional uint64 answerid = 5;
  inline bool has_answerid() const;
  inline void clear_answerid();
  static const int kAnsweridFieldNumber = 5;
  inline ::google::protobuf::uint64 answerid() const;
  inline void set_answerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.AuguryAnswer)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_answer();
  inline void clear_has_answer();
  inline void set_has_answerid();
  inline void clear_has_answerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 titleid_;
  ::google::protobuf::uint32 answer_;
  ::google::protobuf::uint64 answerid_;
  friend void  protobuf_AddDesc_SceneAugury_2eproto();
  friend void protobuf_AssignDesc_SceneAugury_2eproto();
  friend void protobuf_ShutdownFile_SceneAugury_2eproto();

  void InitAsDefaultInstance();
  static AuguryAnswer* default_instance_;
};
// -------------------------------------------------------------------

class AuguryQuit : public ::google::protobuf::Message {
 public:
  AuguryQuit();
  virtual ~AuguryQuit();

  AuguryQuit(const AuguryQuit& from);

  inline AuguryQuit& operator=(const AuguryQuit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuguryQuit& default_instance();

  void Swap(AuguryQuit* other);

  // implements Message ----------------------------------------------

  AuguryQuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuguryQuit& from);
  void MergeFrom(const AuguryQuit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_QUIT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuguryParam param() const;
  inline void set_param(::Cmd::AuguryParam value);

  // @@protoc_insertion_point(class_scope:Cmd.AuguryQuit)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneAugury_2eproto();
  friend void protobuf_AssignDesc_SceneAugury_2eproto();
  friend void protobuf_ShutdownFile_SceneAugury_2eproto();

  void InitAsDefaultInstance();
  static AuguryQuit* default_instance_;
};
// ===================================================================


// ===================================================================

// AuguryInvite

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
inline bool AuguryInvite::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuguryInvite::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuguryInvite::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuguryInvite::clear_cmd() {
  cmd_ = 27;
  clear_has_cmd();
}
inline ::Cmd::Command AuguryInvite::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInvite.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AuguryInvite::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInvite.cmd)
}

// optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE];
inline bool AuguryInvite::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuguryInvite::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuguryInvite::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuguryInvite::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::AuguryParam AuguryInvite::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInvite.param)
  return static_cast< ::Cmd::AuguryParam >(param_);
}
inline void AuguryInvite::set_param(::Cmd::AuguryParam value) {
  assert(::Cmd::AuguryParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInvite.param)
}

// optional uint64 inviterid = 3;
inline bool AuguryInvite::has_inviterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuguryInvite::set_has_inviterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuguryInvite::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuguryInvite::clear_inviterid() {
  inviterid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviterid();
}
inline ::google::protobuf::uint64 AuguryInvite::inviterid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInvite.inviterid)
  return inviterid_;
}
inline void AuguryInvite::set_inviterid(::google::protobuf::uint64 value) {
  set_has_inviterid();
  inviterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInvite.inviterid)
}

// optional string invitername = 4;
inline bool AuguryInvite::has_invitername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuguryInvite::set_has_invitername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuguryInvite::clear_has_invitername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuguryInvite::clear_invitername() {
  if (invitername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitername_->clear();
  }
  clear_has_invitername();
}
inline const ::std::string& AuguryInvite::invitername() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInvite.invitername)
  return *invitername_;
}
inline void AuguryInvite::set_invitername(const ::std::string& value) {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitername_ = new ::std::string;
  }
  invitername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AuguryInvite.invitername)
}
inline void AuguryInvite::set_invitername(const char* value) {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitername_ = new ::std::string;
  }
  invitername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AuguryInvite.invitername)
}
inline void AuguryInvite::set_invitername(const char* value, size_t size) {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitername_ = new ::std::string;
  }
  invitername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AuguryInvite.invitername)
}
inline ::std::string* AuguryInvite::mutable_invitername() {
  set_has_invitername();
  if (invitername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AuguryInvite.invitername)
  return invitername_;
}
inline ::std::string* AuguryInvite::release_invitername() {
  clear_has_invitername();
  if (invitername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = invitername_;
    invitername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuguryInvite::set_allocated_invitername(::std::string* invitername) {
  if (invitername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitername_;
  }
  if (invitername) {
    set_has_invitername();
    invitername_ = invitername;
  } else {
    clear_has_invitername();
    invitername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuguryInvite.invitername)
}

// optional uint64 npcguid = 5;
inline bool AuguryInvite::has_npcguid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuguryInvite::set_has_npcguid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuguryInvite::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuguryInvite::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 AuguryInvite::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInvite.npcguid)
  return npcguid_;
}
inline void AuguryInvite::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInvite.npcguid)
}

// optional .Cmd.EAuguryType type = 6;
inline bool AuguryInvite::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuguryInvite::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuguryInvite::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuguryInvite::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EAuguryType AuguryInvite::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInvite.type)
  return static_cast< ::Cmd::EAuguryType >(type_);
}
inline void AuguryInvite::set_type(::Cmd::EAuguryType value) {
  assert(::Cmd::EAuguryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInvite.type)
}

// optional bool isextra = 7;
inline bool AuguryInvite::has_isextra() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuguryInvite::set_has_isextra() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuguryInvite::clear_has_isextra() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuguryInvite::clear_isextra() {
  isextra_ = false;
  clear_has_isextra();
}
inline bool AuguryInvite::isextra() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInvite.isextra)
  return isextra_;
}
inline void AuguryInvite::set_isextra(bool value) {
  set_has_isextra();
  isextra_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInvite.isextra)
}

// -------------------------------------------------------------------

// AuguryInviteReply

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
inline bool AuguryInviteReply::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuguryInviteReply::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuguryInviteReply::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuguryInviteReply::clear_cmd() {
  cmd_ = 27;
  clear_has_cmd();
}
inline ::Cmd::Command AuguryInviteReply::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInviteReply.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AuguryInviteReply::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInviteReply.cmd)
}

// optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE_REPLY];
inline bool AuguryInviteReply::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuguryInviteReply::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuguryInviteReply::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuguryInviteReply::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::AuguryParam AuguryInviteReply::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInviteReply.param)
  return static_cast< ::Cmd::AuguryParam >(param_);
}
inline void AuguryInviteReply::set_param(::Cmd::AuguryParam value) {
  assert(::Cmd::AuguryParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInviteReply.param)
}

// optional .Cmd.EReplyType type = 3 [default = EReplyType_Refuse];
inline bool AuguryInviteReply::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuguryInviteReply::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuguryInviteReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuguryInviteReply::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::Cmd::EReplyType AuguryInviteReply::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInviteReply.type)
  return static_cast< ::Cmd::EReplyType >(type_);
}
inline void AuguryInviteReply::set_type(::Cmd::EReplyType value) {
  assert(::Cmd::EReplyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInviteReply.type)
}

// optional uint64 inviterid = 4;
inline bool AuguryInviteReply::has_inviterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuguryInviteReply::set_has_inviterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuguryInviteReply::clear_has_inviterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuguryInviteReply::clear_inviterid() {
  inviterid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviterid();
}
inline ::google::protobuf::uint64 AuguryInviteReply::inviterid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInviteReply.inviterid)
  return inviterid_;
}
inline void AuguryInviteReply::set_inviterid(::google::protobuf::uint64 value) {
  set_has_inviterid();
  inviterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInviteReply.inviterid)
}

// optional uint64 npcguid = 5;
inline bool AuguryInviteReply::has_npcguid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuguryInviteReply::set_has_npcguid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuguryInviteReply::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuguryInviteReply::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 AuguryInviteReply::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInviteReply.npcguid)
  return npcguid_;
}
inline void AuguryInviteReply::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInviteReply.npcguid)
}

// optional .Cmd.EAuguryType augurytype = 6;
inline bool AuguryInviteReply::has_augurytype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuguryInviteReply::set_has_augurytype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuguryInviteReply::clear_has_augurytype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuguryInviteReply::clear_augurytype() {
  augurytype_ = 1;
  clear_has_augurytype();
}
inline ::Cmd::EAuguryType AuguryInviteReply::augurytype() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInviteReply.augurytype)
  return static_cast< ::Cmd::EAuguryType >(augurytype_);
}
inline void AuguryInviteReply::set_augurytype(::Cmd::EAuguryType value) {
  assert(::Cmd::EAuguryType_IsValid(value));
  set_has_augurytype();
  augurytype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInviteReply.augurytype)
}

// optional bool isextra = 7;
inline bool AuguryInviteReply::has_isextra() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuguryInviteReply::set_has_isextra() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuguryInviteReply::clear_has_isextra() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuguryInviteReply::clear_isextra() {
  isextra_ = false;
  clear_has_isextra();
}
inline bool AuguryInviteReply::isextra() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryInviteReply.isextra)
  return isextra_;
}
inline void AuguryInviteReply::set_isextra(bool value) {
  set_has_isextra();
  isextra_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryInviteReply.isextra)
}

// -------------------------------------------------------------------

// AuguryChat

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
inline bool AuguryChat::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuguryChat::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuguryChat::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuguryChat::clear_cmd() {
  cmd_ = 27;
  clear_has_cmd();
}
inline ::Cmd::Command AuguryChat::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryChat.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AuguryChat::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryChat.cmd)
}

// optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_CHAT];
inline bool AuguryChat::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuguryChat::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuguryChat::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuguryChat::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::AuguryParam AuguryChat::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryChat.param)
  return static_cast< ::Cmd::AuguryParam >(param_);
}
inline void AuguryChat::set_param(::Cmd::AuguryParam value) {
  assert(::Cmd::AuguryParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryChat.param)
}

// optional string content = 3;
inline bool AuguryChat::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuguryChat::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuguryChat::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuguryChat::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& AuguryChat::content() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryChat.content)
  return *content_;
}
inline void AuguryChat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AuguryChat.content)
}
inline void AuguryChat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AuguryChat.content)
}
inline void AuguryChat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AuguryChat.content)
}
inline ::std::string* AuguryChat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AuguryChat.content)
  return content_;
}
inline ::std::string* AuguryChat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuguryChat::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuguryChat.content)
}

// optional string sender = 4;
inline bool AuguryChat::has_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuguryChat::set_has_sender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuguryChat::clear_has_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuguryChat::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& AuguryChat::sender() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryChat.sender)
  return *sender_;
}
inline void AuguryChat::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.AuguryChat.sender)
}
inline void AuguryChat::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.AuguryChat.sender)
}
inline void AuguryChat::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.AuguryChat.sender)
}
inline ::std::string* AuguryChat::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.AuguryChat.sender)
  return sender_;
}
inline ::std::string* AuguryChat::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuguryChat::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AuguryChat.sender)
}

// -------------------------------------------------------------------

// AuguryTitle

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
inline bool AuguryTitle::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuguryTitle::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuguryTitle::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuguryTitle::clear_cmd() {
  cmd_ = 27;
  clear_has_cmd();
}
inline ::Cmd::Command AuguryTitle::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryTitle.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AuguryTitle::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryTitle.cmd)
}

// optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_TITLE];
inline bool AuguryTitle::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuguryTitle::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuguryTitle::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuguryTitle::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::AuguryParam AuguryTitle::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryTitle.param)
  return static_cast< ::Cmd::AuguryParam >(param_);
}
inline void AuguryTitle::set_param(::Cmd::AuguryParam value) {
  assert(::Cmd::AuguryParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryTitle.param)
}

// optional uint32 titleid = 3;
inline bool AuguryTitle::has_titleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuguryTitle::set_has_titleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuguryTitle::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuguryTitle::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 AuguryTitle::titleid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryTitle.titleid)
  return titleid_;
}
inline void AuguryTitle::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryTitle.titleid)
}

// optional .Cmd.EAuguryType type = 4;
inline bool AuguryTitle::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuguryTitle::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuguryTitle::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuguryTitle::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EAuguryType AuguryTitle::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryTitle.type)
  return static_cast< ::Cmd::EAuguryType >(type_);
}
inline void AuguryTitle::set_type(::Cmd::EAuguryType value) {
  assert(::Cmd::EAuguryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryTitle.type)
}

// optional uint32 subtableid = 5;
inline bool AuguryTitle::has_subtableid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuguryTitle::set_has_subtableid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuguryTitle::clear_has_subtableid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuguryTitle::clear_subtableid() {
  subtableid_ = 0u;
  clear_has_subtableid();
}
inline ::google::protobuf::uint32 AuguryTitle::subtableid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryTitle.subtableid)
  return subtableid_;
}
inline void AuguryTitle::set_subtableid(::google::protobuf::uint32 value) {
  set_has_subtableid();
  subtableid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryTitle.subtableid)
}

// -------------------------------------------------------------------

// AuguryAnswer

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
inline bool AuguryAnswer::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuguryAnswer::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuguryAnswer::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuguryAnswer::clear_cmd() {
  cmd_ = 27;
  clear_has_cmd();
}
inline ::Cmd::Command AuguryAnswer::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryAnswer.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AuguryAnswer::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryAnswer.cmd)
}

// optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_ANSWER];
inline bool AuguryAnswer::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuguryAnswer::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuguryAnswer::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuguryAnswer::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::AuguryParam AuguryAnswer::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryAnswer.param)
  return static_cast< ::Cmd::AuguryParam >(param_);
}
inline void AuguryAnswer::set_param(::Cmd::AuguryParam value) {
  assert(::Cmd::AuguryParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryAnswer.param)
}

// optional uint32 titleid = 3;
inline bool AuguryAnswer::has_titleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuguryAnswer::set_has_titleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuguryAnswer::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuguryAnswer::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 AuguryAnswer::titleid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryAnswer.titleid)
  return titleid_;
}
inline void AuguryAnswer::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryAnswer.titleid)
}

// optional uint32 answer = 4;
inline bool AuguryAnswer::has_answer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuguryAnswer::set_has_answer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuguryAnswer::clear_has_answer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuguryAnswer::clear_answer() {
  answer_ = 0u;
  clear_has_answer();
}
inline ::google::protobuf::uint32 AuguryAnswer::answer() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryAnswer.answer)
  return answer_;
}
inline void AuguryAnswer::set_answer(::google::protobuf::uint32 value) {
  set_has_answer();
  answer_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryAnswer.answer)
}

// optional uint64 answerid = 5;
inline bool AuguryAnswer::has_answerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuguryAnswer::set_has_answerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuguryAnswer::clear_has_answerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuguryAnswer::clear_answerid() {
  answerid_ = GOOGLE_ULONGLONG(0);
  clear_has_answerid();
}
inline ::google::protobuf::uint64 AuguryAnswer::answerid() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryAnswer.answerid)
  return answerid_;
}
inline void AuguryAnswer::set_answerid(::google::protobuf::uint64 value) {
  set_has_answerid();
  answerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryAnswer.answerid)
}

// -------------------------------------------------------------------

// AuguryQuit

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
inline bool AuguryQuit::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuguryQuit::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuguryQuit::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuguryQuit::clear_cmd() {
  cmd_ = 27;
  clear_has_cmd();
}
inline ::Cmd::Command AuguryQuit::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryQuit.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AuguryQuit::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryQuit.cmd)
}

// optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_QUIT];
inline bool AuguryQuit::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuguryQuit::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuguryQuit::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuguryQuit::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::AuguryParam AuguryQuit::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AuguryQuit.param)
  return static_cast< ::Cmd::AuguryParam >(param_);
}
inline void AuguryQuit::set_param(::Cmd::AuguryParam value) {
  assert(::Cmd::AuguryParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AuguryQuit.param)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::AuguryParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::AuguryParam>() {
  return ::Cmd::AuguryParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAuguryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAuguryType>() {
  return ::Cmd::EAuguryType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EReplyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EReplyType>() {
  return ::Cmd::EReplyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneAugury_2eproto__INCLUDED
