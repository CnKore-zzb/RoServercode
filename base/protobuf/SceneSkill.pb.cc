// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneSkill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneSkill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* SkillConsume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConsume_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillShortcut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillShortcut_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelupSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelupSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillValidShortcut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillValidShortcut_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillValidPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillValidPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpSkillInfoSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpSkillInfoSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectRuneSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectRuneSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarkSkillNpcSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkSkillNpcSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerSkillNpcSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerSkillNpcSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillOptionSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillOptionSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynamicSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynamicSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDynamicSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDynamicSkillCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncDestPosSkillCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncDestPosSkillCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESkillShortcut_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELevelupType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETrigSkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESkillOption_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneSkill_2eproto() {
  protobuf_AddDesc_SceneSkill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneSkill.proto");
  GOOGLE_CHECK(file != NULL);
  SkillConsume_descriptor_ = file->message_type(0);
  static const int SkillConsume_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConsume, curvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConsume, maxvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConsume, nexttime_),
  };
  SkillConsume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConsume_descriptor_,
      SkillConsume::default_instance_,
      SkillConsume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConsume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConsume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConsume));
  SkillShortcut_descriptor_ = file->message_type(1);
  static const int SkillShortcut_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcut, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcut, pos_),
  };
  SkillShortcut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillShortcut_descriptor_,
      SkillShortcut::default_instance_,
      SkillShortcut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillShortcut));
  SkillItem_descriptor_ = file->message_type(2);
  static const int SkillItem_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, learn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, autopos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, extendpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, runespecid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, replaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, selectswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, extralv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, notreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, shortcuts_),
  };
  SkillItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillItem_descriptor_,
      SkillItem::default_instance_,
      SkillItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillItem));
  SkillData_descriptor_ = file->message_type(3);
  static const int SkillData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, usedpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, primarypoint_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
  SkillPos_descriptor_ = file->message_type(4);
  static const int SkillPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPos, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPos, sourceid_),
  };
  SkillPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPos_descriptor_,
      SkillPos::default_instance_,
      SkillPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPos));
  ReqSkillData_descriptor_ = file->message_type(5);
  static const int ReqSkillData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSkillData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSkillData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSkillData, data_),
  };
  ReqSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSkillData_descriptor_,
      ReqSkillData::default_instance_,
      ReqSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSkillData));
  SkillUpdate_descriptor_ = file->message_type(6);
  static const int SkillUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpdate, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpdate, del_),
  };
  SkillUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillUpdate_descriptor_,
      SkillUpdate::default_instance_,
      SkillUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillUpdate));
  LevelupSkill_descriptor_ = file->message_type(7);
  static const int LevelupSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupSkill, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupSkill, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupSkill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupSkill, skillids_),
  };
  LevelupSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelupSkill_descriptor_,
      LevelupSkill::default_instance_,
      LevelupSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelupSkill));
  EquipSkill_descriptor_ = file->message_type(8);
  static const int EquipSkill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, efrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, eto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, beingid_),
  };
  EquipSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSkill_descriptor_,
      EquipSkill::default_instance_,
      EquipSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSkill));
  ResetSkill_descriptor_ = file->message_type(9);
  static const int ResetSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkill, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkill, param_),
  };
  ResetSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetSkill_descriptor_,
      ResetSkill::default_instance_,
      ResetSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetSkill));
  SkillValidShortcut_descriptor_ = file->message_type(10);
  static const int SkillValidShortcut_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidShortcut, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidShortcut, pos_),
  };
  SkillValidShortcut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillValidShortcut_descriptor_,
      SkillValidShortcut::default_instance_,
      SkillValidShortcut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidShortcut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidShortcut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillValidShortcut));
  SkillValidPos_descriptor_ = file->message_type(11);
  static const int SkillValidPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPos, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPos, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPos, shortcuts_),
  };
  SkillValidPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillValidPos_descriptor_,
      SkillValidPos::default_instance_,
      SkillValidPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillValidPos));
  ChangeSkillCmd_descriptor_ = file->message_type(12);
  static const int ChangeSkillCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, key_),
  };
  ChangeSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSkillCmd_descriptor_,
      ChangeSkillCmd::default_instance_,
      ChangeSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSkillCmd));
  SkillCost_descriptor_ = file->message_type(13);
  static const int SkillCost_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCost, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCost, changenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCost, changeper_),
  };
  SkillCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCost_descriptor_,
      SkillCost::default_instance_,
      SkillCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCost));
  SpecSkillInfo_descriptor_ = file->message_type(14);
  static const int SpecSkillInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, changerange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, changenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, changeready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, neednoitem_),
  };
  SpecSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecSkillInfo_descriptor_,
      SpecSkillInfo::default_instance_,
      SpecSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecSkillInfo));
  UpSkillInfoSkillCmd_descriptor_ = file->message_type(15);
  static const int UpSkillInfoSkillCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillInfoSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillInfoSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillInfoSkillCmd, specinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillInfoSkillCmd, allskillinfo_),
  };
  UpSkillInfoSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpSkillInfoSkillCmd_descriptor_,
      UpSkillInfoSkillCmd::default_instance_,
      UpSkillInfoSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillInfoSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSkillInfoSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpSkillInfoSkillCmd));
  SelectRuneSkillCmd_descriptor_ = file->message_type(16);
  static const int SelectRuneSkillCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, runespecid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, selectswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, beingid_),
  };
  SelectRuneSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectRuneSkillCmd_descriptor_,
      SelectRuneSkillCmd::default_instance_,
      SelectRuneSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRuneSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectRuneSkillCmd));
  MarkSkillNpcSkillCmd_descriptor_ = file->message_type(17);
  static const int MarkSkillNpcSkillCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkSkillNpcSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkSkillNpcSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkSkillNpcSkillCmd, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkSkillNpcSkillCmd, skillid_),
  };
  MarkSkillNpcSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarkSkillNpcSkillCmd_descriptor_,
      MarkSkillNpcSkillCmd::default_instance_,
      MarkSkillNpcSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkSkillNpcSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkSkillNpcSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarkSkillNpcSkillCmd));
  TriggerSkillNpcSkillCmd_descriptor_ = file->message_type(18);
  static const int TriggerSkillNpcSkillCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerSkillNpcSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerSkillNpcSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerSkillNpcSkillCmd, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerSkillNpcSkillCmd, etype_),
  };
  TriggerSkillNpcSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerSkillNpcSkillCmd_descriptor_,
      TriggerSkillNpcSkillCmd::default_instance_,
      TriggerSkillNpcSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerSkillNpcSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerSkillNpcSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerSkillNpcSkillCmd));
  SkillOption_descriptor_ = file->message_type(19);
  static const int SkillOption_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOption, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOption, value_),
  };
  SkillOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillOption_descriptor_,
      SkillOption::default_instance_,
      SkillOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillOption));
  SkillOptionSkillCmd_descriptor_ = file->message_type(20);
  static const int SkillOptionSkillCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOptionSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOptionSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOptionSkillCmd, set_opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOptionSkillCmd, all_opts_),
  };
  SkillOptionSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillOptionSkillCmd_descriptor_,
      SkillOptionSkillCmd::default_instance_,
      SkillOptionSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOptionSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillOptionSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillOptionSkillCmd));
  DynamicSkillCmd_descriptor_ = file->message_type(21);
  static const int DynamicSkillCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSkillCmd, skills_),
  };
  DynamicSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynamicSkillCmd_descriptor_,
      DynamicSkillCmd::default_instance_,
      DynamicSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynamicSkillCmd));
  UpdateDynamicSkillCmd_descriptor_ = file->message_type(22);
  static const int UpdateDynamicSkillCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDynamicSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDynamicSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDynamicSkillCmd, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDynamicSkillCmd, del_),
  };
  UpdateDynamicSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDynamicSkillCmd_descriptor_,
      UpdateDynamicSkillCmd::default_instance_,
      UpdateDynamicSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDynamicSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDynamicSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDynamicSkillCmd));
  SyncDestPosSkillCmd_descriptor_ = file->message_type(23);
  static const int SyncDestPosSkillCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDestPosSkillCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDestPosSkillCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDestPosSkillCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDestPosSkillCmd, pos_),
  };
  SyncDestPosSkillCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncDestPosSkillCmd_descriptor_,
      SyncDestPosSkillCmd::default_instance_,
      SyncDestPosSkillCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDestPosSkillCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDestPosSkillCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncDestPosSkillCmd));
  SkillParam_descriptor_ = file->enum_type(0);
  ESkillShortcut_descriptor_ = file->enum_type(1);
  ELevelupType_descriptor_ = file->enum_type(2);
  ETrigSkillType_descriptor_ = file->enum_type(3);
  ESkillOption_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneSkill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConsume_descriptor_, &SkillConsume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillShortcut_descriptor_, &SkillShortcut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillItem_descriptor_, &SkillItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPos_descriptor_, &SkillPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSkillData_descriptor_, &ReqSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillUpdate_descriptor_, &SkillUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelupSkill_descriptor_, &LevelupSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSkill_descriptor_, &EquipSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetSkill_descriptor_, &ResetSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillValidShortcut_descriptor_, &SkillValidShortcut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillValidPos_descriptor_, &SkillValidPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSkillCmd_descriptor_, &ChangeSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCost_descriptor_, &SkillCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecSkillInfo_descriptor_, &SpecSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpSkillInfoSkillCmd_descriptor_, &UpSkillInfoSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectRuneSkillCmd_descriptor_, &SelectRuneSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarkSkillNpcSkillCmd_descriptor_, &MarkSkillNpcSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerSkillNpcSkillCmd_descriptor_, &TriggerSkillNpcSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillOption_descriptor_, &SkillOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillOptionSkillCmd_descriptor_, &SkillOptionSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynamicSkillCmd_descriptor_, &DynamicSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDynamicSkillCmd_descriptor_, &UpdateDynamicSkillCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncDestPosSkillCmd_descriptor_, &SyncDestPosSkillCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneSkill_2eproto() {
  delete SkillConsume::default_instance_;
  delete SkillConsume_reflection_;
  delete SkillShortcut::default_instance_;
  delete SkillShortcut_reflection_;
  delete SkillItem::default_instance_;
  delete SkillItem_reflection_;
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
  delete SkillPos::default_instance_;
  delete SkillPos_reflection_;
  delete ReqSkillData::default_instance_;
  delete ReqSkillData_reflection_;
  delete SkillUpdate::default_instance_;
  delete SkillUpdate_reflection_;
  delete LevelupSkill::default_instance_;
  delete LevelupSkill_reflection_;
  delete EquipSkill::default_instance_;
  delete EquipSkill_reflection_;
  delete ResetSkill::default_instance_;
  delete ResetSkill_reflection_;
  delete SkillValidShortcut::default_instance_;
  delete SkillValidShortcut_reflection_;
  delete SkillValidPos::default_instance_;
  delete SkillValidPos_reflection_;
  delete ChangeSkillCmd::default_instance_;
  delete ChangeSkillCmd_reflection_;
  delete SkillCost::default_instance_;
  delete SkillCost_reflection_;
  delete SpecSkillInfo::default_instance_;
  delete SpecSkillInfo_reflection_;
  delete UpSkillInfoSkillCmd::default_instance_;
  delete UpSkillInfoSkillCmd_reflection_;
  delete SelectRuneSkillCmd::default_instance_;
  delete SelectRuneSkillCmd_reflection_;
  delete MarkSkillNpcSkillCmd::default_instance_;
  delete MarkSkillNpcSkillCmd_reflection_;
  delete TriggerSkillNpcSkillCmd::default_instance_;
  delete TriggerSkillNpcSkillCmd_reflection_;
  delete SkillOption::default_instance_;
  delete SkillOption_reflection_;
  delete SkillOptionSkillCmd::default_instance_;
  delete SkillOptionSkillCmd_reflection_;
  delete DynamicSkillCmd::default_instance_;
  delete DynamicSkillCmd_reflection_;
  delete UpdateDynamicSkillCmd::default_instance_;
  delete UpdateDynamicSkillCmd_reflection_;
  delete SyncDestPosSkillCmd::default_instance_;
  delete SyncDestPosSkillCmd_reflection_;
}

void protobuf_AddDesc_SceneSkill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SceneSkill.proto\022\003Cmd\032\nxCmd.proto\032\021Pro"
    "toCommon.proto\032\017SceneUser.proto\"M\n\014Skill"
    "Consume\022\023\n\010curvalue\030\001 \001(\r:\0010\022\023\n\010maxvalue"
    "\030\002 \001(\r:\0010\022\023\n\010nexttime\030\003 \001(\r:\0010\"V\n\rSkillS"
    "hortcut\0225\n\004type\030\001 \001(\0162\023.Cmd.ESkillShortc"
    "ut:\022ESKILLSHORTCUT_MIN\022\016\n\003pos\030\002 \001(\r:\0010\"\363"
    "\003\n\tSkillItem\022\r\n\002id\030\001 \001(\r:\0010\022\016\n\003pos\030\002 \001(\r"
    ":\0010\022\r\n\002cd\030\003 \001(\r:\0010\022\025\n\006active\030\004 \001(\010:\005fals"
    "e\022\024\n\005learn\030\005 \001(\010:\005false\022)\n\006source\030\006 \001(\0162"
    "\014.Cmd.ESource:\013ESOURCE_MIN\0225\n\nprofession"
    "\030\007 \001(\0162\020.Cmd.EProfession:\017EPROFESSION_MI"
    "N\022\"\n\007consume\030\010 \001(\0132\021.Cmd.SkillConsume\022\023\n"
    "\010sourceid\030\t \001(\r:\0010\022\025\n\006shadow\030\n \001(\010:\005fals"
    "e\022\022\n\007autopos\030\013 \001(\r:\0010\022\024\n\textendpos\030\014 \001(\r"
    ":\0010\022\025\n\nrunespecid\030\r \001(\r:\0010\022\024\n\treplaceid\030"
    "\016 \001(\r:\0010\022\032\n\014selectswitch\030\017 \001(\010:\004true\022\022\n\007"
    "extralv\030\020 \001(\r:\0010\022\022\n\007ownerid\030\021 \001(\004:\0010\022\027\n\010"
    "notreset\030\022 \001(\010:\005false\022%\n\tshortcuts\030\023 \003(\013"
    "2\022.Cmd.SkillShortcut\"\220\001\n\tSkillData\022\024\n\tus"
    "edpoint\030\001 \001(\r:\0010\0225\n\nprofession\030\002 \001(\0162\020.C"
    "md.EProfession:\017EPROFESSION_MIN\022\035\n\005items"
    "\030\003 \003(\0132\016.Cmd.SkillItem\022\027\n\014primarypoint\030\004"
    " \001(\r:\0010\">\n\010SkillPos\022\r\n\002id\030\001 \001(\r:\0010\022\016\n\003po"
    "s\030\002 \001(\r:\0010\022\023\n\010sourceid\030\003 \001(\r:\0010\"\230\001\n\014ReqS"
    "killData\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCE"
    "NE_USER_SKILL_PROTOCMD\0224\n\005param\030\002 \001(\0162\017."
    "Cmd.SkillParam:\024SKILLPARAM_SKILLITEM\022\034\n\004"
    "data\030\003 \003(\0132\016.Cmd.SkillData\"\270\001\n\013SkillUpda"
    "te\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USE"
    "R_SKILL_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.Sk"
    "illParam:\026SKILLPARAM_SKILLUPDATE\022\036\n\006upda"
    "te\030\003 \003(\0132\016.Cmd.SkillData\022\033\n\003del\030\004 \003(\0132\016."
    "Cmd.SkillData\"\302\001\n\014LevelupSkill\0224\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\031SCENE_USER_SKILL_PROT"
    "OCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.SkillParam:\027SK"
    "ILLPARAM_LEVELUPSKILL\0221\n\004type\030\003 \001(\0162\021.Cm"
    "d.ELevelupType:\020ELEVELUPTYPE_MIN\022\020\n\010skil"
    "lids\030\004 \003(\r\"\264\002\n\nEquipSkill\0224\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\031SCENE_USER_SKILL_PROTOCMD\022"
    "5\n\005param\030\002 \001(\0162\017.Cmd.SkillParam:\025SKILLPA"
    "RAM_EQUIPSKILL\022\022\n\007skillid\030\003 \001(\r:\0010\022\016\n\003po"
    "s\030\004 \001(\r:\0010\022\023\n\010sourceid\030\005 \001(\r:\0010\0226\n\005efrom"
    "\030\006 \001(\0162\023.Cmd.ESkillShortcut:\022ESKILLSHORT"
    "CUT_MIN\0224\n\003eto\030\007 \001(\0162\023.Cmd.ESkillShortcu"
    "t:\022ESKILLSHORTCUT_MIN\022\022\n\007beingid\030\010 \001(\r:\001"
    "0\"y\n\nResetSkill\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\031SCENE_USER_SKILL_PROTOCMD\0225\n\005param\030\002"
    " \001(\0162\017.Cmd.SkillParam:\025SKILLPARAM_RESETS"
    "KILL\"X\n\022SkillValidShortcut\0225\n\004type\030\001 \001(\016"
    "2\023.Cmd.ESkillShortcut:\022ESKILLSHORTCUT_MI"
    "N\022\013\n\003pos\030\002 \003(\r\"\253\001\n\rSkillValidPos\0224\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_SKILL_PR"
    "OTOCMD\0228\n\005param\030\002 \001(\0162\017.Cmd.SkillParam:\030"
    "SKILLPARAM_SKILLVALIDPOS\022*\n\tshortcuts\030\003 "
    "\003(\0132\027.Cmd.SkillValidShortcut\"\272\001\n\016ChangeS"
    "killCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCEN"
    "E_USER_SKILL_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.C"
    "md.SkillParam:\027SKILLPARAM_CHANGE_SKILL\022\017"
    "\n\007skillid\030\003 \001(\r\022\014\n\004type\030\004 \001(\t\022\r\n\005isadd\030\005"
    " \001(\r\022\013\n\003key\030\006 \001(\r\"G\n\tSkillCost\022\016\n\006itemid"
    "\030\001 \002(\r\022\024\n\tchangenum\030\002 \001(\005:\0010\022\024\n\tchangepe"
    "r\030\003 \001(\005:\0010\"\270\001\n\rSpecSkillInfo\022\n\n\002id\030\001 \002(\r"
    "\022\034\n\005attrs\030\002 \003(\0132\r.Cmd.UserAttr\022\034\n\004cost\030\003"
    " \003(\0132\016.Cmd.SkillCost\022\026\n\013changerange\030\004 \001("
    "\005:\0010\022\024\n\tchangenum\030\005 \001(\005:\0010\022\026\n\013changeread"
    "y\030\006 \001(\005:\0010\022\031\n\nneednoitem\030\007 \001(\010:\005false\"\327\001"
    "\n\023UpSkillInfoSkillCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\031SCENE_USER_SKILL_PROTOCMD\022:\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.SkillParam:\032SKILLPARAM_"
    "SPEC_SKILL_INFO\022$\n\010specinfo\030\003 \003(\0132\022.Cmd."
    "SpecSkillInfo\022(\n\014allskillInfo\030\004 \001(\0132\022.Cm"
    "d.SpecSkillInfo\"\332\001\n\022SelectRuneSkillCmd\0224"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_SK"
    "ILL_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.SkillP"
    "aram:\026SKILLPARAM_SELECT_RUNE\022\017\n\007skillid\030"
    "\003 \002(\r\022\025\n\nrunespecid\030\004 \001(\r:\0010\022\032\n\014selectsw"
    "itch\030\005 \001(\010:\004true\022\022\n\007beingid\030\006 \001(\r:\0010\"\250\001\n"
    "\024MarkSkillNpcSkillCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\031SCENE_USER_SKILL_PROTOCMD\0228\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.SkillParam:\030SKILLPARAM_"
    "MARK_SKILLNPC\022\017\n\007npcguid\030\003 \002(\004\022\017\n\007skilli"
    "d\030\004 \002(\r\"\321\001\n\027TriggerSkillNpcSkillCmd\0224\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_SKILL"
    "_PROTOCMD\022:\n\005param\030\002 \001(\0162\017.Cmd.SkillPara"
    "m:\032SKILLPARAM_TRGGER_SKILLNPC\022\017\n\007npcguid"
    "\030\003 \002(\004\0223\n\005etype\030\004 \001(\0162\023.Cmd.ETrigSkillTy"
    "pe:\017ETRIGTSKILL_MIN\"\?\n\013SkillOption\022\036\n\003op"
    "t\030\001 \002(\0162\021.Cmd.ESkillOption\022\020\n\005value\030\002 \001("
    "\r:\0010\"\313\001\n\023SkillOptionSkillCmd\0224\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\031SCENE_USER_SKILL_PROTOC"
    "MD\0227\n\005param\030\002 \001(\0162\017.Cmd.SkillParam:\027SKIL"
    "LPARAM_SKILLOPTIONS\022!\n\007set_opt\030\003 \001(\0132\020.C"
    "md.SkillOption\022\"\n\010all_opts\030\004 \003(\0132\020.Cmd.S"
    "killOption\"\246\001\n\017DynamicSkillCmd\0224\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\031SCENE_USER_SKILL_PROT"
    "OCMD\022=\n\005param\030\002 \001(\0162\017.Cmd.SkillParam:\035SK"
    "ILLPARAM_DYNAMIC_SKILL_INFO\022\036\n\006skills\030\003 "
    "\003(\0132\016.Cmd.SkillItem\"\313\001\n\025UpdateDynamicSki"
    "llCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SCENE_"
    "USER_SKILL_PROTOCMD\022\?\n\005param\030\002 \001(\0162\017.Cmd"
    ".SkillParam:\037SKILLPARAM_DYNAMIC_SKILL_UP"
    "DATE\022\036\n\006update\030\003 \003(\0132\016.Cmd.SkillItem\022\033\n\003"
    "del\030\004 \003(\0132\016.Cmd.SkillItem\"\265\001\n\023SyncDestPo"
    "sSkillCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\031SC"
    "ENE_USER_SKILL_PROTOCMD\0228\n\005param\030\002 \001(\0162\017"
    ".Cmd.SkillParam:\030SKILLPARAM_SYNC_DEST_PO"
    "S\022\022\n\007skillid\030\003 \001(\r:\0010\022\032\n\003pos\030\004 \001(\0132\r.Cmd"
    ".ScenePos*\315\003\n\nSkillParam\022\030\n\024SKILLPARAM_S"
    "KILLITEM\020\001\022\032\n\026SKILLPARAM_SKILLUPDATE\020\002\022\033"
    "\n\027SKILLPARAM_LEVELUPSKILL\020\003\022\031\n\025SKILLPARA"
    "M_EQUIPSKILL\020\004\022\031\n\025SKILLPARAM_RESETSKILL\020"
    "\005\022\034\n\030SKILLPARAM_SKILLVALIDPOS\020\006\022\033\n\027SKILL"
    "PARAM_CHANGE_SKILL\020\007\022\036\n\032SKILLPARAM_SPEC_"
    "SKILL_INFO\020\010\022\032\n\026SKILLPARAM_SELECT_RUNE\020\t"
    "\022\034\n\030SKILLPARAM_MARK_SKILLNPC\020\n\022\036\n\032SKILLP"
    "ARAM_TRGGER_SKILLNPC\020\013\022\033\n\027SKILLPARAM_SKI"
    "LLOPTIONS\020\014\022!\n\035SKILLPARAM_DYNAMIC_SKILL_"
    "INFO\020\r\022#\n\037SKILLPARAM_DYNAMIC_SKILL_UPDAT"
    "E\020\016\022\034\n\030SKILLPARAM_SYNC_DEST_POS\020\017*\347\001\n\016ES"
    "killShortcut\022\026\n\022ESKILLSHORTCUT_MIN\020\000\022\031\n\025"
    "ESKILLSHORTCUT_NORMAL\020\001\022\027\n\023ESKILLSHORTCU"
    "T_AUTO\020\002\022\031\n\025ESKILLSHORTCUT_EXTEND\020\003\022\034\n\030E"
    "SKILLSHORTCUT_BEINGAUTO\020\004\022\033\n\027ESKILLSHORT"
    "CUT_EXTEND_2\020\005\022\033\n\027ESKILLSHORTCUT_EXTEND_"
    "3\020\006\022\026\n\022ESKILLSHORTCUT_MAX\020\007*d\n\014ELevelupT"
    "ype\022\024\n\020ELEVELUPTYPE_MIN\020\000\022\023\n\017ELEVELUPTYP"
    "E_MT\020\001\022\023\n\017ELEVELUPTYPE_AT\020\002\022\024\n\020ELEVELUPT"
    "YPE_MAX\020\003*=\n\016ETrigSkillType\022\023\n\017ETRIGTSKI"
    "LL_MIN\020\000\022\026\n\022ETRIGTSKILL_BTRANS\020\001*\246\001\n\014ESk"
    "illOption\022\032\n\026ESKILLOPTION_AUTOQUEUE\020\001\022\034\n"
    "\030ESKILLOPTION_SUMMONBEING\020\002\022\035\n\031ESKILLOPT"
    "ION_AUTO_ARCHERY\020\003\022\034\n\030ESKILLOPTION_FISTS"
    "_MAGIC\020\004\022\037\n\033ESKILLOPTION_SUMMON_ELEMENT\020"
    "\005", 5321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneSkill.proto", &protobuf_RegisterTypes);
  SkillConsume::default_instance_ = new SkillConsume();
  SkillShortcut::default_instance_ = new SkillShortcut();
  SkillItem::default_instance_ = new SkillItem();
  SkillData::default_instance_ = new SkillData();
  SkillPos::default_instance_ = new SkillPos();
  ReqSkillData::default_instance_ = new ReqSkillData();
  SkillUpdate::default_instance_ = new SkillUpdate();
  LevelupSkill::default_instance_ = new LevelupSkill();
  EquipSkill::default_instance_ = new EquipSkill();
  ResetSkill::default_instance_ = new ResetSkill();
  SkillValidShortcut::default_instance_ = new SkillValidShortcut();
  SkillValidPos::default_instance_ = new SkillValidPos();
  ChangeSkillCmd::default_instance_ = new ChangeSkillCmd();
  SkillCost::default_instance_ = new SkillCost();
  SpecSkillInfo::default_instance_ = new SpecSkillInfo();
  UpSkillInfoSkillCmd::default_instance_ = new UpSkillInfoSkillCmd();
  SelectRuneSkillCmd::default_instance_ = new SelectRuneSkillCmd();
  MarkSkillNpcSkillCmd::default_instance_ = new MarkSkillNpcSkillCmd();
  TriggerSkillNpcSkillCmd::default_instance_ = new TriggerSkillNpcSkillCmd();
  SkillOption::default_instance_ = new SkillOption();
  SkillOptionSkillCmd::default_instance_ = new SkillOptionSkillCmd();
  DynamicSkillCmd::default_instance_ = new DynamicSkillCmd();
  UpdateDynamicSkillCmd::default_instance_ = new UpdateDynamicSkillCmd();
  SyncDestPosSkillCmd::default_instance_ = new SyncDestPosSkillCmd();
  SkillConsume::default_instance_->InitAsDefaultInstance();
  SkillShortcut::default_instance_->InitAsDefaultInstance();
  SkillItem::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  SkillPos::default_instance_->InitAsDefaultInstance();
  ReqSkillData::default_instance_->InitAsDefaultInstance();
  SkillUpdate::default_instance_->InitAsDefaultInstance();
  LevelupSkill::default_instance_->InitAsDefaultInstance();
  EquipSkill::default_instance_->InitAsDefaultInstance();
  ResetSkill::default_instance_->InitAsDefaultInstance();
  SkillValidShortcut::default_instance_->InitAsDefaultInstance();
  SkillValidPos::default_instance_->InitAsDefaultInstance();
  ChangeSkillCmd::default_instance_->InitAsDefaultInstance();
  SkillCost::default_instance_->InitAsDefaultInstance();
  SpecSkillInfo::default_instance_->InitAsDefaultInstance();
  UpSkillInfoSkillCmd::default_instance_->InitAsDefaultInstance();
  SelectRuneSkillCmd::default_instance_->InitAsDefaultInstance();
  MarkSkillNpcSkillCmd::default_instance_->InitAsDefaultInstance();
  TriggerSkillNpcSkillCmd::default_instance_->InitAsDefaultInstance();
  SkillOption::default_instance_->InitAsDefaultInstance();
  SkillOptionSkillCmd::default_instance_->InitAsDefaultInstance();
  DynamicSkillCmd::default_instance_->InitAsDefaultInstance();
  UpdateDynamicSkillCmd::default_instance_->InitAsDefaultInstance();
  SyncDestPosSkillCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneSkill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneSkill_2eproto {
  StaticDescriptorInitializer_SceneSkill_2eproto() {
    protobuf_AddDesc_SceneSkill_2eproto();
  }
} static_descriptor_initializer_SceneSkill_2eproto_;
const ::google::protobuf::EnumDescriptor* SkillParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillParam_descriptor_;
}
bool SkillParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESkillShortcut_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESkillShortcut_descriptor_;
}
bool ESkillShortcut_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELevelupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELevelupType_descriptor_;
}
bool ELevelupType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETrigSkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETrigSkillType_descriptor_;
}
bool ETrigSkillType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESkillOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESkillOption_descriptor_;
}
bool ESkillOption_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConsume::kCurvalueFieldNumber;
const int SkillConsume::kMaxvalueFieldNumber;
const int SkillConsume::kNexttimeFieldNumber;
#endif  // !_MSC_VER

SkillConsume::SkillConsume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillConsume)
}

void SkillConsume::InitAsDefaultInstance() {
}

SkillConsume::SkillConsume(const SkillConsume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillConsume)
}

void SkillConsume::SharedCtor() {
  _cached_size_ = 0;
  curvalue_ = 0u;
  maxvalue_ = 0u;
  nexttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConsume::~SkillConsume() {
  // @@protoc_insertion_point(destructor:Cmd.SkillConsume)
  SharedDtor();
}

void SkillConsume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConsume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConsume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConsume_descriptor_;
}

const SkillConsume& SkillConsume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillConsume* SkillConsume::default_instance_ = NULL;

SkillConsume* SkillConsume::New() const {
  return new SkillConsume;
}

void SkillConsume::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillConsume*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curvalue_, nexttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConsume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillConsume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curvalue = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curvalue_)));
          set_has_curvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxvalue;
        break;
      }

      // optional uint32 maxvalue = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_maxvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxvalue_)));
          set_has_maxvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nexttime;
        break;
      }

      // optional uint32 nexttime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_nexttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillConsume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillConsume)
  return false;
#undef DO_
}

void SkillConsume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillConsume)
  // optional uint32 curvalue = 1 [default = 0];
  if (has_curvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curvalue(), output);
  }

  // optional uint32 maxvalue = 2 [default = 0];
  if (has_maxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxvalue(), output);
  }

  // optional uint32 nexttime = 3 [default = 0];
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nexttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillConsume)
}

::google::protobuf::uint8* SkillConsume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillConsume)
  // optional uint32 curvalue = 1 [default = 0];
  if (has_curvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curvalue(), target);
  }

  // optional uint32 maxvalue = 2 [default = 0];
  if (has_maxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxvalue(), target);
  }

  // optional uint32 nexttime = 3 [default = 0];
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nexttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillConsume)
  return target;
}

int SkillConsume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curvalue = 1 [default = 0];
    if (has_curvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curvalue());
    }

    // optional uint32 maxvalue = 2 [default = 0];
    if (has_maxvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxvalue());
    }

    // optional uint32 nexttime = 3 [default = 0];
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConsume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConsume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConsume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConsume::MergeFrom(const SkillConsume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curvalue()) {
      set_curvalue(from.curvalue());
    }
    if (from.has_maxvalue()) {
      set_maxvalue(from.maxvalue());
    }
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConsume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConsume::CopyFrom(const SkillConsume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConsume::IsInitialized() const {

  return true;
}

void SkillConsume::Swap(SkillConsume* other) {
  if (other != this) {
    std::swap(curvalue_, other->curvalue_);
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(nexttime_, other->nexttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConsume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConsume_descriptor_;
  metadata.reflection = SkillConsume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillShortcut::kTypeFieldNumber;
const int SkillShortcut::kPosFieldNumber;
#endif  // !_MSC_VER

SkillShortcut::SkillShortcut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillShortcut)
}

void SkillShortcut::InitAsDefaultInstance() {
}

SkillShortcut::SkillShortcut(const SkillShortcut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillShortcut)
}

void SkillShortcut::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillShortcut::~SkillShortcut() {
  // @@protoc_insertion_point(destructor:Cmd.SkillShortcut)
  SharedDtor();
}

void SkillShortcut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillShortcut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillShortcut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillShortcut_descriptor_;
}

const SkillShortcut& SkillShortcut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillShortcut* SkillShortcut::default_instance_ = NULL;

SkillShortcut* SkillShortcut::New() const {
  return new SkillShortcut;
}

void SkillShortcut::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillShortcut*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillShortcut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillShortcut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESkillShortcut_IsValid(value)) {
            set_type(static_cast< ::Cmd::ESkillShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillShortcut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillShortcut)
  return false;
#undef DO_
}

void SkillShortcut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillShortcut)
  // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 pos = 2 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillShortcut)
}

::google::protobuf::uint8* SkillShortcut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillShortcut)
  // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 pos = 2 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillShortcut)
  return target;
}

int SkillShortcut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 pos = 2 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillShortcut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillShortcut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillShortcut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillShortcut::MergeFrom(const SkillShortcut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillShortcut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillShortcut::CopyFrom(const SkillShortcut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillShortcut::IsInitialized() const {

  return true;
}

void SkillShortcut::Swap(SkillShortcut* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillShortcut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillShortcut_descriptor_;
  metadata.reflection = SkillShortcut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillItem::kIdFieldNumber;
const int SkillItem::kPosFieldNumber;
const int SkillItem::kCdFieldNumber;
const int SkillItem::kActiveFieldNumber;
const int SkillItem::kLearnFieldNumber;
const int SkillItem::kSourceFieldNumber;
const int SkillItem::kProfessionFieldNumber;
const int SkillItem::kConsumeFieldNumber;
const int SkillItem::kSourceidFieldNumber;
const int SkillItem::kShadowFieldNumber;
const int SkillItem::kAutoposFieldNumber;
const int SkillItem::kExtendposFieldNumber;
const int SkillItem::kRunespecidFieldNumber;
const int SkillItem::kReplaceidFieldNumber;
const int SkillItem::kSelectswitchFieldNumber;
const int SkillItem::kExtralvFieldNumber;
const int SkillItem::kOwneridFieldNumber;
const int SkillItem::kNotresetFieldNumber;
const int SkillItem::kShortcutsFieldNumber;
#endif  // !_MSC_VER

SkillItem::SkillItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillItem)
}

void SkillItem::InitAsDefaultInstance() {
  consume_ = const_cast< ::Cmd::SkillConsume*>(&::Cmd::SkillConsume::default_instance());
}

SkillItem::SkillItem(const SkillItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillItem)
}

void SkillItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = 0u;
  cd_ = 0u;
  active_ = false;
  learn_ = false;
  source_ = 0;
  profession_ = 0;
  consume_ = NULL;
  sourceid_ = 0u;
  shadow_ = false;
  autopos_ = 0u;
  extendpos_ = 0u;
  runespecid_ = 0u;
  replaceid_ = 0u;
  selectswitch_ = true;
  extralv_ = 0u;
  ownerid_ = GOOGLE_ULONGLONG(0);
  notreset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillItem::~SkillItem() {
  // @@protoc_insertion_point(destructor:Cmd.SkillItem)
  SharedDtor();
}

void SkillItem::SharedDtor() {
  if (this != default_instance_) {
    delete consume_;
  }
}

void SkillItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillItem_descriptor_;
}

const SkillItem& SkillItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillItem* SkillItem::default_instance_ = NULL;

SkillItem* SkillItem::New() const {
  return new SkillItem;
}

void SkillItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, source_);
    ZR_(profession_, learn_);
    if (has_consume()) {
      if (consume_ != NULL) consume_->::Cmd::SkillConsume::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(sourceid_, extralv_);
    shadow_ = false;
    selectswitch_ = true;
  }
  if (_has_bits_[16 / 32] & 196608) {
    ownerid_ = GOOGLE_ULONGLONG(0);
    notreset_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  shortcuts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional uint32 cd = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_learn;
        break;
      }

      // optional bool learn = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_learn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &learn_)));
          set_has_learn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
      case 6: {
        if (tag == 48) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
      case 7: {
        if (tag == 56) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_consume;
        break;
      }

      // optional .Cmd.SkillConsume consume = 8;
      case 8: {
        if (tag == 66) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sourceid;
        break;
      }

      // optional uint32 sourceid = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_sourceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_shadow;
        break;
      }

      // optional bool shadow = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_shadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shadow_)));
          set_has_shadow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_autopos;
        break;
      }

      // optional uint32 autopos = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_autopos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autopos_)));
          set_has_autopos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_extendpos;
        break;
      }

      // optional uint32 extendpos = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_extendpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extendpos_)));
          set_has_extendpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_runespecid;
        break;
      }

      // optional uint32 runespecid = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_runespecid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runespecid_)));
          set_has_runespecid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_replaceid;
        break;
      }

      // optional uint32 replaceid = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_replaceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replaceid_)));
          set_has_replaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_selectswitch;
        break;
      }

      // optional bool selectswitch = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_selectswitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selectswitch_)));
          set_has_selectswitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_extralv;
        break;
      }

      // optional uint32 extralv = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_extralv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extralv_)));
          set_has_extralv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_notreset;
        break;
      }

      // optional bool notreset = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_notreset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notreset_)));
          set_has_notreset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_shortcuts;
        break;
      }

      // repeated .Cmd.SkillShortcut shortcuts = 19;
      case 19: {
        if (tag == 154) {
         parse_shortcuts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shortcuts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_shortcuts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillItem)
  return false;
#undef DO_
}

void SkillItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 pos = 2 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 cd = 3 [default = 0];
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cd(), output);
  }

  // optional bool active = 4 [default = false];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  // optional bool learn = 5 [default = false];
  if (has_learn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->learn(), output);
  }

  // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->source(), output);
  }

  // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->profession(), output);
  }

  // optional .Cmd.SkillConsume consume = 8;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->consume(), output);
  }

  // optional uint32 sourceid = 9 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sourceid(), output);
  }

  // optional bool shadow = 10 [default = false];
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->shadow(), output);
  }

  // optional uint32 autopos = 11 [default = 0];
  if (has_autopos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->autopos(), output);
  }

  // optional uint32 extendpos = 12 [default = 0];
  if (has_extendpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->extendpos(), output);
  }

  // optional uint32 runespecid = 13 [default = 0];
  if (has_runespecid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->runespecid(), output);
  }

  // optional uint32 replaceid = 14 [default = 0];
  if (has_replaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->replaceid(), output);
  }

  // optional bool selectswitch = 15 [default = true];
  if (has_selectswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->selectswitch(), output);
  }

  // optional uint32 extralv = 16 [default = 0];
  if (has_extralv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->extralv(), output);
  }

  // optional uint64 ownerid = 17 [default = 0];
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->ownerid(), output);
  }

  // optional bool notreset = 18 [default = false];
  if (has_notreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->notreset(), output);
  }

  // repeated .Cmd.SkillShortcut shortcuts = 19;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->shortcuts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillItem)
}

::google::protobuf::uint8* SkillItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 pos = 2 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 cd = 3 [default = 0];
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cd(), target);
  }

  // optional bool active = 4 [default = false];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  // optional bool learn = 5 [default = false];
  if (has_learn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->learn(), target);
  }

  // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->source(), target);
  }

  // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->profession(), target);
  }

  // optional .Cmd.SkillConsume consume = 8;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->consume(), target);
  }

  // optional uint32 sourceid = 9 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sourceid(), target);
  }

  // optional bool shadow = 10 [default = false];
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->shadow(), target);
  }

  // optional uint32 autopos = 11 [default = 0];
  if (has_autopos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->autopos(), target);
  }

  // optional uint32 extendpos = 12 [default = 0];
  if (has_extendpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->extendpos(), target);
  }

  // optional uint32 runespecid = 13 [default = 0];
  if (has_runespecid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->runespecid(), target);
  }

  // optional uint32 replaceid = 14 [default = 0];
  if (has_replaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->replaceid(), target);
  }

  // optional bool selectswitch = 15 [default = true];
  if (has_selectswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->selectswitch(), target);
  }

  // optional uint32 extralv = 16 [default = 0];
  if (has_extralv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->extralv(), target);
  }

  // optional uint64 ownerid = 17 [default = 0];
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->ownerid(), target);
  }

  // optional bool notreset = 18 [default = false];
  if (has_notreset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->notreset(), target);
  }

  // repeated .Cmd.SkillShortcut shortcuts = 19;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->shortcuts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillItem)
  return target;
}

int SkillItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 pos = 2 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 cd = 3 [default = 0];
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // optional bool active = 4 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool learn = 5 [default = false];
    if (has_learn()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.ESource source = 6 [default = ESOURCE_MIN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .Cmd.EProfession profession = 7 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional .Cmd.SkillConsume consume = 8;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consume());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sourceid = 9 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional bool shadow = 10 [default = false];
    if (has_shadow()) {
      total_size += 1 + 1;
    }

    // optional uint32 autopos = 11 [default = 0];
    if (has_autopos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autopos());
    }

    // optional uint32 extendpos = 12 [default = 0];
    if (has_extendpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extendpos());
    }

    // optional uint32 runespecid = 13 [default = 0];
    if (has_runespecid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runespecid());
    }

    // optional uint32 replaceid = 14 [default = 0];
    if (has_replaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replaceid());
    }

    // optional bool selectswitch = 15 [default = true];
    if (has_selectswitch()) {
      total_size += 1 + 1;
    }

    // optional uint32 extralv = 16 [default = 0];
    if (has_extralv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extralv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 ownerid = 17 [default = 0];
    if (has_ownerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional bool notreset = 18 [default = false];
    if (has_notreset()) {
      total_size += 2 + 1;
    }

  }
  // repeated .Cmd.SkillShortcut shortcuts = 19;
  total_size += 2 * this->shortcuts_size();
  for (int i = 0; i < this->shortcuts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shortcuts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillItem::MergeFrom(const SkillItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  shortcuts_.MergeFrom(from.shortcuts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_learn()) {
      set_learn(from.learn());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_consume()) {
      mutable_consume()->::Cmd::SkillConsume::MergeFrom(from.consume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_shadow()) {
      set_shadow(from.shadow());
    }
    if (from.has_autopos()) {
      set_autopos(from.autopos());
    }
    if (from.has_extendpos()) {
      set_extendpos(from.extendpos());
    }
    if (from.has_runespecid()) {
      set_runespecid(from.runespecid());
    }
    if (from.has_replaceid()) {
      set_replaceid(from.replaceid());
    }
    if (from.has_selectswitch()) {
      set_selectswitch(from.selectswitch());
    }
    if (from.has_extralv()) {
      set_extralv(from.extralv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_notreset()) {
      set_notreset(from.notreset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillItem::CopyFrom(const SkillItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillItem::IsInitialized() const {

  return true;
}

void SkillItem::Swap(SkillItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(cd_, other->cd_);
    std::swap(active_, other->active_);
    std::swap(learn_, other->learn_);
    std::swap(source_, other->source_);
    std::swap(profession_, other->profession_);
    std::swap(consume_, other->consume_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(shadow_, other->shadow_);
    std::swap(autopos_, other->autopos_);
    std::swap(extendpos_, other->extendpos_);
    std::swap(runespecid_, other->runespecid_);
    std::swap(replaceid_, other->replaceid_);
    std::swap(selectswitch_, other->selectswitch_);
    std::swap(extralv_, other->extralv_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(notreset_, other->notreset_);
    shortcuts_.Swap(&other->shortcuts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillItem_descriptor_;
  metadata.reflection = SkillItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kUsedpointFieldNumber;
const int SkillData::kProfessionFieldNumber;
const int SkillData::kItemsFieldNumber;
const int SkillData::kPrimarypointFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillData)
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillData)
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  usedpoint_ = 0u;
  profession_ = 0;
  primarypoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  // @@protoc_insertion_point(destructor:Cmd.SkillData)
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(usedpoint_, profession_);
    primarypoint_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 usedpoint = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedpoint_)));
          set_has_usedpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 2 [default = EPROFESSION_MIN];
      case 2: {
        if (tag == 16) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.SkillItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(32)) goto parse_primarypoint;
        break;
      }

      // optional uint32 primarypoint = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_primarypoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primarypoint_)));
          set_has_primarypoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillData)
  return false;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillData)
  // optional uint32 usedpoint = 1 [default = 0];
  if (has_usedpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usedpoint(), output);
  }

  // optional .Cmd.EProfession profession = 2 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->profession(), output);
  }

  // repeated .Cmd.SkillItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional uint32 primarypoint = 4 [default = 0];
  if (has_primarypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->primarypoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillData)
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillData)
  // optional uint32 usedpoint = 1 [default = 0];
  if (has_usedpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usedpoint(), target);
  }

  // optional .Cmd.EProfession profession = 2 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->profession(), target);
  }

  // repeated .Cmd.SkillItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional uint32 primarypoint = 4 [default = 0];
  if (has_primarypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->primarypoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillData)
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 usedpoint = 1 [default = 0];
    if (has_usedpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedpoint());
    }

    // optional .Cmd.EProfession profession = 2 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional uint32 primarypoint = 4 [default = 0];
    if (has_primarypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->primarypoint());
    }

  }
  // repeated .Cmd.SkillItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usedpoint()) {
      set_usedpoint(from.usedpoint());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_primarypoint()) {
      set_primarypoint(from.primarypoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(usedpoint_, other->usedpoint_);
    std::swap(profession_, other->profession_);
    items_.Swap(&other->items_);
    std::swap(primarypoint_, other->primarypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPos::kIdFieldNumber;
const int SkillPos::kPosFieldNumber;
const int SkillPos::kSourceidFieldNumber;
#endif  // !_MSC_VER

SkillPos::SkillPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillPos)
}

void SkillPos::InitAsDefaultInstance() {
}

SkillPos::SkillPos(const SkillPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillPos)
}

void SkillPos::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = 0u;
  sourceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPos::~SkillPos() {
  // @@protoc_insertion_point(destructor:Cmd.SkillPos)
  SharedDtor();
}

void SkillPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPos_descriptor_;
}

const SkillPos& SkillPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillPos* SkillPos::default_instance_ = NULL;

SkillPos* SkillPos::New() const {
  return new SkillPos;
}

void SkillPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, sourceid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sourceid;
        break;
      }

      // optional uint32 sourceid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sourceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillPos)
  return false;
#undef DO_
}

void SkillPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillPos)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 pos = 2 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 sourceid = 3 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillPos)
}

::google::protobuf::uint8* SkillPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillPos)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 pos = 2 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 sourceid = 3 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillPos)
  return target;
}

int SkillPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 pos = 2 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 sourceid = 3 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPos::MergeFrom(const SkillPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPos::CopyFrom(const SkillPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPos::IsInitialized() const {

  return true;
}

void SkillPos::Swap(SkillPos* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPos_descriptor_;
  metadata.reflection = SkillPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSkillData::kCmdFieldNumber;
const int ReqSkillData::kParamFieldNumber;
const int ReqSkillData::kDataFieldNumber;
#endif  // !_MSC_VER

ReqSkillData::ReqSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqSkillData)
}

void ReqSkillData::InitAsDefaultInstance() {
}

ReqSkillData::ReqSkillData(const ReqSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqSkillData)
}

void ReqSkillData::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSkillData::~ReqSkillData() {
  // @@protoc_insertion_point(destructor:Cmd.ReqSkillData)
  SharedDtor();
}

void ReqSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSkillData_descriptor_;
}

const ReqSkillData& ReqSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

ReqSkillData* ReqSkillData::default_instance_ = NULL;

ReqSkillData* ReqSkillData::New() const {
  return new ReqSkillData;
}

void ReqSkillData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 7;
    param_ = 1;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqSkillData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Cmd.SkillData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqSkillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqSkillData)
  return false;
#undef DO_
}

void ReqSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqSkillData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SkillData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqSkillData)
}

::google::protobuf::uint8* ReqSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqSkillData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SkillData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqSkillData)
  return target;
}

int ReqSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SkillData data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSkillData::MergeFrom(const ReqSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSkillData::CopyFrom(const ReqSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSkillData::IsInitialized() const {

  return true;
}

void ReqSkillData::Swap(ReqSkillData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSkillData_descriptor_;
  metadata.reflection = ReqSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillUpdate::kCmdFieldNumber;
const int SkillUpdate::kParamFieldNumber;
const int SkillUpdate::kUpdateFieldNumber;
const int SkillUpdate::kDelFieldNumber;
#endif  // !_MSC_VER

SkillUpdate::SkillUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillUpdate)
}

void SkillUpdate::InitAsDefaultInstance() {
}

SkillUpdate::SkillUpdate(const SkillUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillUpdate)
}

void SkillUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillUpdate::~SkillUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.SkillUpdate)
  SharedDtor();
}

void SkillUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillUpdate_descriptor_;
}

const SkillUpdate& SkillUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillUpdate* SkillUpdate::default_instance_ = NULL;

SkillUpdate* SkillUpdate::New() const {
  return new SkillUpdate;
}

void SkillUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 7;
    param_ = 2;
  }
  update_.Clear();
  del_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update;
        break;
      }

      // repeated .Cmd.SkillData update = 3;
      case 3: {
        if (tag == 26) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update;
        if (input->ExpectTag(34)) goto parse_del;
        break;
      }

      // repeated .Cmd.SkillData del = 4;
      case 4: {
        if (tag == 34) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_del;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillUpdate)
  return false;
#undef DO_
}

void SkillUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SkillData update = 3;
  for (int i = 0; i < this->update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->update(i), output);
  }

  // repeated .Cmd.SkillData del = 4;
  for (int i = 0; i < this->del_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->del(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillUpdate)
}

::google::protobuf::uint8* SkillUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SkillData update = 3;
  for (int i = 0; i < this->update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->update(i), target);
  }

  // repeated .Cmd.SkillData del = 4;
  for (int i = 0; i < this->del_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->del(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillUpdate)
  return target;
}

int SkillUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SkillData update = 3;
  total_size += 1 * this->update_size();
  for (int i = 0; i < this->update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update(i));
  }

  // repeated .Cmd.SkillData del = 4;
  total_size += 1 * this->del_size();
  for (int i = 0; i < this->del_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillUpdate::MergeFrom(const SkillUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_.MergeFrom(from.update_);
  del_.MergeFrom(from.del_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUpdate::CopyFrom(const SkillUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUpdate::IsInitialized() const {

  return true;
}

void SkillUpdate::Swap(SkillUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    update_.Swap(&other->update_);
    del_.Swap(&other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillUpdate_descriptor_;
  metadata.reflection = SkillUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelupSkill::kCmdFieldNumber;
const int LevelupSkill::kParamFieldNumber;
const int LevelupSkill::kTypeFieldNumber;
const int LevelupSkill::kSkillidsFieldNumber;
#endif  // !_MSC_VER

LevelupSkill::LevelupSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LevelupSkill)
}

void LevelupSkill::InitAsDefaultInstance() {
}

LevelupSkill::LevelupSkill(const LevelupSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LevelupSkill)
}

void LevelupSkill::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 3;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelupSkill::~LevelupSkill() {
  // @@protoc_insertion_point(destructor:Cmd.LevelupSkill)
  SharedDtor();
}

void LevelupSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelupSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelupSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelupSkill_descriptor_;
}

const LevelupSkill& LevelupSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

LevelupSkill* LevelupSkill::default_instance_ = NULL;

LevelupSkill* LevelupSkill::New() const {
  return new LevelupSkill;
}

void LevelupSkill::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 7;
    param_ = 3;
    type_ = 0;
  }
  skillids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelupSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LevelupSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_LEVELUPSKILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ELevelupType type = 3 [default = ELEVELUPTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELevelupType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELevelupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillids;
        break;
      }

      // repeated uint32 skillids = 4;
      case 4: {
        if (tag == 32) {
         parse_skillids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_skillids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LevelupSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LevelupSkill)
  return false;
#undef DO_
}

void LevelupSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LevelupSkill)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_LEVELUPSKILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ELevelupType type = 3 [default = ELEVELUPTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated uint32 skillids = 4;
  for (int i = 0; i < this->skillids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->skillids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LevelupSkill)
}

::google::protobuf::uint8* LevelupSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LevelupSkill)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_LEVELUPSKILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ELevelupType type = 3 [default = ELEVELUPTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated uint32 skillids = 4;
  for (int i = 0; i < this->skillids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->skillids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LevelupSkill)
  return target;
}

int LevelupSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_LEVELUPSKILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ELevelupType type = 3 [default = ELEVELUPTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 skillids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillids(i));
    }
    total_size += 1 * this->skillids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelupSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelupSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelupSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelupSkill::MergeFrom(const LevelupSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillids_.MergeFrom(from.skillids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelupSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelupSkill::CopyFrom(const LevelupSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelupSkill::IsInitialized() const {

  return true;
}

void LevelupSkill::Swap(LevelupSkill* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    skillids_.Swap(&other->skillids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelupSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelupSkill_descriptor_;
  metadata.reflection = LevelupSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSkill::kCmdFieldNumber;
const int EquipSkill::kParamFieldNumber;
const int EquipSkill::kSkillidFieldNumber;
const int EquipSkill::kPosFieldNumber;
const int EquipSkill::kSourceidFieldNumber;
const int EquipSkill::kEfromFieldNumber;
const int EquipSkill::kEtoFieldNumber;
const int EquipSkill::kBeingidFieldNumber;
#endif  // !_MSC_VER

EquipSkill::EquipSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipSkill)
}

void EquipSkill::InitAsDefaultInstance() {
}

EquipSkill::EquipSkill(const EquipSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipSkill)
}

void EquipSkill::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 4;
  skillid_ = 0u;
  pos_ = 0u;
  sourceid_ = 0u;
  efrom_ = 0;
  eto_ = 0;
  beingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSkill::~EquipSkill() {
  // @@protoc_insertion_point(destructor:Cmd.EquipSkill)
  SharedDtor();
}

void EquipSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSkill_descriptor_;
}

const EquipSkill& EquipSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

EquipSkill* EquipSkill::default_instance_ = NULL;

EquipSkill* EquipSkill::New() const {
  return new EquipSkill;
}

void EquipSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(skillid_, beingid_);
    cmd_ = 7;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_EQUIPSKILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sourceid;
        break;
      }

      // optional uint32 sourceid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_sourceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_efrom;
        break;
      }

      // optional .Cmd.ESkillShortcut efrom = 6 [default = ESKILLSHORTCUT_MIN];
      case 6: {
        if (tag == 48) {
         parse_efrom:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESkillShortcut_IsValid(value)) {
            set_efrom(static_cast< ::Cmd::ESkillShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_eto;
        break;
      }

      // optional .Cmd.ESkillShortcut eto = 7 [default = ESKILLSHORTCUT_MIN];
      case 7: {
        if (tag == 56) {
         parse_eto:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESkillShortcut_IsValid(value)) {
            set_eto(static_cast< ::Cmd::ESkillShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_beingid;
        break;
      }

      // optional uint32 beingid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_beingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beingid_)));
          set_has_beingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipSkill)
  return false;
#undef DO_
}

void EquipSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipSkill)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_EQUIPSKILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 skillid = 3 [default = 0];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional uint32 pos = 4 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }

  // optional uint32 sourceid = 5 [default = 0];
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sourceid(), output);
  }

  // optional .Cmd.ESkillShortcut efrom = 6 [default = ESKILLSHORTCUT_MIN];
  if (has_efrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->efrom(), output);
  }

  // optional .Cmd.ESkillShortcut eto = 7 [default = ESKILLSHORTCUT_MIN];
  if (has_eto()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->eto(), output);
  }

  // optional uint32 beingid = 8 [default = 0];
  if (has_beingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->beingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipSkill)
}

::google::protobuf::uint8* EquipSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipSkill)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_EQUIPSKILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 skillid = 3 [default = 0];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional uint32 pos = 4 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos(), target);
  }

  // optional uint32 sourceid = 5 [default = 0];
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sourceid(), target);
  }

  // optional .Cmd.ESkillShortcut efrom = 6 [default = ESKILLSHORTCUT_MIN];
  if (has_efrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->efrom(), target);
  }

  // optional .Cmd.ESkillShortcut eto = 7 [default = ESKILLSHORTCUT_MIN];
  if (has_eto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->eto(), target);
  }

  // optional uint32 beingid = 8 [default = 0];
  if (has_beingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->beingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipSkill)
  return target;
}

int EquipSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_EQUIPSKILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 skillid = 3 [default = 0];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 pos = 4 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 sourceid = 5 [default = 0];
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional .Cmd.ESkillShortcut efrom = 6 [default = ESKILLSHORTCUT_MIN];
    if (has_efrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->efrom());
    }

    // optional .Cmd.ESkillShortcut eto = 7 [default = ESKILLSHORTCUT_MIN];
    if (has_eto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eto());
    }

    // optional uint32 beingid = 8 [default = 0];
    if (has_beingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSkill::MergeFrom(const EquipSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_efrom()) {
      set_efrom(from.efrom());
    }
    if (from.has_eto()) {
      set_eto(from.eto());
    }
    if (from.has_beingid()) {
      set_beingid(from.beingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSkill::CopyFrom(const EquipSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSkill::IsInitialized() const {

  return true;
}

void EquipSkill::Swap(EquipSkill* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(efrom_, other->efrom_);
    std::swap(eto_, other->eto_);
    std::swap(beingid_, other->beingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSkill_descriptor_;
  metadata.reflection = EquipSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetSkill::kCmdFieldNumber;
const int ResetSkill::kParamFieldNumber;
#endif  // !_MSC_VER

ResetSkill::ResetSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ResetSkill)
}

void ResetSkill::InitAsDefaultInstance() {
}

ResetSkill::ResetSkill(const ResetSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ResetSkill)
}

void ResetSkill::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetSkill::~ResetSkill() {
  // @@protoc_insertion_point(destructor:Cmd.ResetSkill)
  SharedDtor();
}

void ResetSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetSkill_descriptor_;
}

const ResetSkill& ResetSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

ResetSkill* ResetSkill::default_instance_ = NULL;

ResetSkill* ResetSkill::New() const {
  return new ResetSkill;
}

void ResetSkill::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 7;
    param_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ResetSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_RESETSKILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ResetSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ResetSkill)
  return false;
#undef DO_
}

void ResetSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ResetSkill)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_RESETSKILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ResetSkill)
}

::google::protobuf::uint8* ResetSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ResetSkill)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_RESETSKILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ResetSkill)
  return target;
}

int ResetSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_RESETSKILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetSkill::MergeFrom(const ResetSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetSkill::CopyFrom(const ResetSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetSkill::IsInitialized() const {

  return true;
}

void ResetSkill::Swap(ResetSkill* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetSkill_descriptor_;
  metadata.reflection = ResetSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillValidShortcut::kTypeFieldNumber;
const int SkillValidShortcut::kPosFieldNumber;
#endif  // !_MSC_VER

SkillValidShortcut::SkillValidShortcut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillValidShortcut)
}

void SkillValidShortcut::InitAsDefaultInstance() {
}

SkillValidShortcut::SkillValidShortcut(const SkillValidShortcut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillValidShortcut)
}

void SkillValidShortcut::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillValidShortcut::~SkillValidShortcut() {
  // @@protoc_insertion_point(destructor:Cmd.SkillValidShortcut)
  SharedDtor();
}

void SkillValidShortcut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillValidShortcut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillValidShortcut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillValidShortcut_descriptor_;
}

const SkillValidShortcut& SkillValidShortcut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillValidShortcut* SkillValidShortcut::default_instance_ = NULL;

SkillValidShortcut* SkillValidShortcut::New() const {
  return new SkillValidShortcut;
}

void SkillValidShortcut::Clear() {
  type_ = 0;
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillValidShortcut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillValidShortcut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESkillShortcut_IsValid(value)) {
            set_type(static_cast< ::Cmd::ESkillShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // repeated uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillValidShortcut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillValidShortcut)
  return false;
#undef DO_
}

void SkillValidShortcut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillValidShortcut)
  // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillValidShortcut)
}

::google::protobuf::uint8* SkillValidShortcut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillValidShortcut)
  // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillValidShortcut)
  return target;
}

int SkillValidShortcut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillValidShortcut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillValidShortcut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillValidShortcut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillValidShortcut::MergeFrom(const SkillValidShortcut& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillValidShortcut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillValidShortcut::CopyFrom(const SkillValidShortcut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillValidShortcut::IsInitialized() const {

  return true;
}

void SkillValidShortcut::Swap(SkillValidShortcut* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillValidShortcut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillValidShortcut_descriptor_;
  metadata.reflection = SkillValidShortcut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillValidPos::kCmdFieldNumber;
const int SkillValidPos::kParamFieldNumber;
const int SkillValidPos::kShortcutsFieldNumber;
#endif  // !_MSC_VER

SkillValidPos::SkillValidPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillValidPos)
}

void SkillValidPos::InitAsDefaultInstance() {
}

SkillValidPos::SkillValidPos(const SkillValidPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillValidPos)
}

void SkillValidPos::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillValidPos::~SkillValidPos() {
  // @@protoc_insertion_point(destructor:Cmd.SkillValidPos)
  SharedDtor();
}

void SkillValidPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillValidPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillValidPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillValidPos_descriptor_;
}

const SkillValidPos& SkillValidPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillValidPos* SkillValidPos::default_instance_ = NULL;

SkillValidPos* SkillValidPos::New() const {
  return new SkillValidPos;
}

void SkillValidPos::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 7;
    param_ = 6;
  }
  shortcuts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillValidPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillValidPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLVALIDPOS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shortcuts;
        break;
      }

      // repeated .Cmd.SkillValidShortcut shortcuts = 3;
      case 3: {
        if (tag == 26) {
         parse_shortcuts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shortcuts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shortcuts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillValidPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillValidPos)
  return false;
#undef DO_
}

void SkillValidPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillValidPos)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLVALIDPOS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SkillValidShortcut shortcuts = 3;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shortcuts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillValidPos)
}

::google::protobuf::uint8* SkillValidPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillValidPos)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLVALIDPOS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SkillValidShortcut shortcuts = 3;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shortcuts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillValidPos)
  return target;
}

int SkillValidPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLVALIDPOS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SkillValidShortcut shortcuts = 3;
  total_size += 1 * this->shortcuts_size();
  for (int i = 0; i < this->shortcuts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shortcuts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillValidPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillValidPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillValidPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillValidPos::MergeFrom(const SkillValidPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  shortcuts_.MergeFrom(from.shortcuts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillValidPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillValidPos::CopyFrom(const SkillValidPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillValidPos::IsInitialized() const {

  return true;
}

void SkillValidPos::Swap(SkillValidPos* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    shortcuts_.Swap(&other->shortcuts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillValidPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillValidPos_descriptor_;
  metadata.reflection = SkillValidPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSkillCmd::kCmdFieldNumber;
const int ChangeSkillCmd::kParamFieldNumber;
const int ChangeSkillCmd::kSkillidFieldNumber;
const int ChangeSkillCmd::kTypeFieldNumber;
const int ChangeSkillCmd::kIsaddFieldNumber;
const int ChangeSkillCmd::kKeyFieldNumber;
#endif  // !_MSC_VER

ChangeSkillCmd::ChangeSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeSkillCmd)
}

void ChangeSkillCmd::InitAsDefaultInstance() {
}

ChangeSkillCmd::ChangeSkillCmd(const ChangeSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeSkillCmd)
}

void ChangeSkillCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 7;
  skillid_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isadd_ = 0u;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSkillCmd::~ChangeSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeSkillCmd)
  SharedDtor();
}

void ChangeSkillCmd::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void ChangeSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSkillCmd_descriptor_;
}

const ChangeSkillCmd& ChangeSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

ChangeSkillCmd* ChangeSkillCmd::default_instance_ = NULL;

ChangeSkillCmd* ChangeSkillCmd::New() const {
  return new ChangeSkillCmd;
}

void ChangeSkillCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeSkillCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(skillid_, key_);
    cmd_ = 7;
    param_ = 7;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_CHANGE_SKILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // optional string type = 4;
      case 4: {
        if (tag == 34) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isadd;
        break;
      }

      // optional uint32 isadd = 5;
      case 5: {
        if (tag == 40) {
         parse_isadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_key;
        break;
      }

      // optional uint32 key = 6;
      case 6: {
        if (tag == 48) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeSkillCmd)
  return false;
#undef DO_
}

void ChangeSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_CHANGE_SKILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // optional uint32 isadd = 5;
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isadd(), output);
  }

  // optional uint32 key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeSkillCmd)
}

::google::protobuf::uint8* ChangeSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_CHANGE_SKILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // optional uint32 isadd = 5;
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isadd(), target);
  }

  // optional uint32 key = 6;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeSkillCmd)
  return target;
}

int ChangeSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_CHANGE_SKILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 isadd = 5;
    if (has_isadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isadd());
    }

    // optional uint32 key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSkillCmd::MergeFrom(const ChangeSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSkillCmd::CopyFrom(const ChangeSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSkillCmd::IsInitialized() const {

  return true;
}

void ChangeSkillCmd::Swap(ChangeSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(skillid_, other->skillid_);
    std::swap(type_, other->type_);
    std::swap(isadd_, other->isadd_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSkillCmd_descriptor_;
  metadata.reflection = ChangeSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCost::kItemidFieldNumber;
const int SkillCost::kChangenumFieldNumber;
const int SkillCost::kChangeperFieldNumber;
#endif  // !_MSC_VER

SkillCost::SkillCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillCost)
}

void SkillCost::InitAsDefaultInstance() {
}

SkillCost::SkillCost(const SkillCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillCost)
}

void SkillCost::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  changenum_ = 0;
  changeper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCost::~SkillCost() {
  // @@protoc_insertion_point(destructor:Cmd.SkillCost)
  SharedDtor();
}

void SkillCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCost_descriptor_;
}

const SkillCost& SkillCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillCost* SkillCost::default_instance_ = NULL;

SkillCost* SkillCost::New() const {
  return new SkillCost;
}

void SkillCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, changeper_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_changenum;
        break;
      }

      // optional int32 changenum = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_changenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changenum_)));
          set_has_changenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_changeper;
        break;
      }

      // optional int32 changeper = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_changeper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeper_)));
          set_has_changeper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillCost)
  return false;
#undef DO_
}

void SkillCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillCost)
  // required uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional int32 changenum = 2 [default = 0];
  if (has_changenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->changenum(), output);
  }

  // optional int32 changeper = 3 [default = 0];
  if (has_changeper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->changeper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillCost)
}

::google::protobuf::uint8* SkillCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillCost)
  // required uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 changenum = 2 [default = 0];
  if (has_changenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->changenum(), target);
  }

  // optional int32 changeper = 3 [default = 0];
  if (has_changeper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->changeper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillCost)
  return target;
}

int SkillCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional int32 changenum = 2 [default = 0];
    if (has_changenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changenum());
    }

    // optional int32 changeper = 3 [default = 0];
    if (has_changeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCost::MergeFrom(const SkillCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_changenum()) {
      set_changenum(from.changenum());
    }
    if (from.has_changeper()) {
      set_changeper(from.changeper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCost::CopyFrom(const SkillCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillCost::Swap(SkillCost* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(changenum_, other->changenum_);
    std::swap(changeper_, other->changeper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCost_descriptor_;
  metadata.reflection = SkillCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecSkillInfo::kIdFieldNumber;
const int SpecSkillInfo::kAttrsFieldNumber;
const int SpecSkillInfo::kCostFieldNumber;
const int SpecSkillInfo::kChangerangeFieldNumber;
const int SpecSkillInfo::kChangenumFieldNumber;
const int SpecSkillInfo::kChangereadyFieldNumber;
const int SpecSkillInfo::kNeednoitemFieldNumber;
#endif  // !_MSC_VER

SpecSkillInfo::SpecSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SpecSkillInfo)
}

void SpecSkillInfo::InitAsDefaultInstance() {
}

SpecSkillInfo::SpecSkillInfo(const SpecSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SpecSkillInfo)
}

void SpecSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  changerange_ = 0;
  changenum_ = 0;
  changeready_ = 0;
  neednoitem_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecSkillInfo::~SpecSkillInfo() {
  // @@protoc_insertion_point(destructor:Cmd.SpecSkillInfo)
  SharedDtor();
}

void SpecSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecSkillInfo_descriptor_;
}

const SpecSkillInfo& SpecSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SpecSkillInfo* SpecSkillInfo::default_instance_ = NULL;

SpecSkillInfo* SpecSkillInfo::New() const {
  return new SpecSkillInfo;
}

void SpecSkillInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecSkillInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 121) {
    ZR_(id_, changerange_);
    ZR_(changenum_, neednoitem_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrs_.Clear();
  cost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SpecSkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 2;
      case 2: {
        if (tag == 18) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        if (input->ExpectTag(26)) goto parse_cost;
        break;
      }

      // repeated .Cmd.SkillCost cost = 3;
      case 3: {
        if (tag == 26) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cost;
        if (input->ExpectTag(32)) goto parse_changerange;
        break;
      }

      // optional int32 changerange = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_changerange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changerange_)));
          set_has_changerange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_changenum;
        break;
      }

      // optional int32 changenum = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_changenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changenum_)));
          set_has_changenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_changeready;
        break;
      }

      // optional int32 changeready = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_changeready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeready_)));
          set_has_changeready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_neednoitem;
        break;
      }

      // optional bool neednoitem = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_neednoitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &neednoitem_)));
          set_has_neednoitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SpecSkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SpecSkillInfo)
  return false;
#undef DO_
}

void SpecSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SpecSkillInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .Cmd.UserAttr attrs = 2;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrs(i), output);
  }

  // repeated .Cmd.SkillCost cost = 3;
  for (int i = 0; i < this->cost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cost(i), output);
  }

  // optional int32 changerange = 4 [default = 0];
  if (has_changerange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->changerange(), output);
  }

  // optional int32 changenum = 5 [default = 0];
  if (has_changenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->changenum(), output);
  }

  // optional int32 changeready = 6 [default = 0];
  if (has_changeready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->changeready(), output);
  }

  // optional bool neednoitem = 7 [default = false];
  if (has_neednoitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->neednoitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SpecSkillInfo)
}

::google::protobuf::uint8* SpecSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SpecSkillInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .Cmd.UserAttr attrs = 2;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrs(i), target);
  }

  // repeated .Cmd.SkillCost cost = 3;
  for (int i = 0; i < this->cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cost(i), target);
  }

  // optional int32 changerange = 4 [default = 0];
  if (has_changerange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->changerange(), target);
  }

  // optional int32 changenum = 5 [default = 0];
  if (has_changenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->changenum(), target);
  }

  // optional int32 changeready = 6 [default = 0];
  if (has_changeready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->changeready(), target);
  }

  // optional bool neednoitem = 7 [default = false];
  if (has_neednoitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->neednoitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SpecSkillInfo)
  return target;
}

int SpecSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int32 changerange = 4 [default = 0];
    if (has_changerange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changerange());
    }

    // optional int32 changenum = 5 [default = 0];
    if (has_changenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changenum());
    }

    // optional int32 changeready = 6 [default = 0];
    if (has_changeready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeready());
    }

    // optional bool neednoitem = 7 [default = false];
    if (has_neednoitem()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.UserAttr attrs = 2;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.SkillCost cost = 3;
  total_size += 1 * this->cost_size();
  for (int i = 0; i < this->cost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecSkillInfo::MergeFrom(const SpecSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  cost_.MergeFrom(from.cost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_changerange()) {
      set_changerange(from.changerange());
    }
    if (from.has_changenum()) {
      set_changenum(from.changenum());
    }
    if (from.has_changeready()) {
      set_changeready(from.changeready());
    }
    if (from.has_neednoitem()) {
      set_neednoitem(from.neednoitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecSkillInfo::CopyFrom(const SpecSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cost())) return false;
  return true;
}

void SpecSkillInfo::Swap(SpecSkillInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    attrs_.Swap(&other->attrs_);
    cost_.Swap(&other->cost_);
    std::swap(changerange_, other->changerange_);
    std::swap(changenum_, other->changenum_);
    std::swap(changeready_, other->changeready_);
    std::swap(neednoitem_, other->neednoitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecSkillInfo_descriptor_;
  metadata.reflection = SpecSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpSkillInfoSkillCmd::kCmdFieldNumber;
const int UpSkillInfoSkillCmd::kParamFieldNumber;
const int UpSkillInfoSkillCmd::kSpecinfoFieldNumber;
const int UpSkillInfoSkillCmd::kAllskillInfoFieldNumber;
#endif  // !_MSC_VER

UpSkillInfoSkillCmd::UpSkillInfoSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpSkillInfoSkillCmd)
}

void UpSkillInfoSkillCmd::InitAsDefaultInstance() {
  allskillinfo_ = const_cast< ::Cmd::SpecSkillInfo*>(&::Cmd::SpecSkillInfo::default_instance());
}

UpSkillInfoSkillCmd::UpSkillInfoSkillCmd(const UpSkillInfoSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpSkillInfoSkillCmd)
}

void UpSkillInfoSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 8;
  allskillinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpSkillInfoSkillCmd::~UpSkillInfoSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpSkillInfoSkillCmd)
  SharedDtor();
}

void UpSkillInfoSkillCmd::SharedDtor() {
  if (this != default_instance_) {
    delete allskillinfo_;
  }
}

void UpSkillInfoSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpSkillInfoSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpSkillInfoSkillCmd_descriptor_;
}

const UpSkillInfoSkillCmd& UpSkillInfoSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

UpSkillInfoSkillCmd* UpSkillInfoSkillCmd::default_instance_ = NULL;

UpSkillInfoSkillCmd* UpSkillInfoSkillCmd::New() const {
  return new UpSkillInfoSkillCmd;
}

void UpSkillInfoSkillCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 7;
    param_ = 8;
    if (has_allskillinfo()) {
      if (allskillinfo_ != NULL) allskillinfo_->::Cmd::SpecSkillInfo::Clear();
    }
  }
  specinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpSkillInfoSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpSkillInfoSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SPEC_SKILL_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_specinfo;
        break;
      }

      // repeated .Cmd.SpecSkillInfo specinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_specinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_specinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_specinfo;
        if (input->ExpectTag(34)) goto parse_allskillInfo;
        break;
      }

      // optional .Cmd.SpecSkillInfo allskillInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_allskillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allskillinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpSkillInfoSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpSkillInfoSkillCmd)
  return false;
#undef DO_
}

void UpSkillInfoSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpSkillInfoSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SPEC_SKILL_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SpecSkillInfo specinfo = 3;
  for (int i = 0; i < this->specinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->specinfo(i), output);
  }

  // optional .Cmd.SpecSkillInfo allskillInfo = 4;
  if (has_allskillinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->allskillinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpSkillInfoSkillCmd)
}

::google::protobuf::uint8* UpSkillInfoSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpSkillInfoSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SPEC_SKILL_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SpecSkillInfo specinfo = 3;
  for (int i = 0; i < this->specinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->specinfo(i), target);
  }

  // optional .Cmd.SpecSkillInfo allskillInfo = 4;
  if (has_allskillinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->allskillinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpSkillInfoSkillCmd)
  return target;
}

int UpSkillInfoSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SPEC_SKILL_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SpecSkillInfo allskillInfo = 4;
    if (has_allskillinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allskillinfo());
    }

  }
  // repeated .Cmd.SpecSkillInfo specinfo = 3;
  total_size += 1 * this->specinfo_size();
  for (int i = 0; i < this->specinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->specinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpSkillInfoSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpSkillInfoSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpSkillInfoSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpSkillInfoSkillCmd::MergeFrom(const UpSkillInfoSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  specinfo_.MergeFrom(from.specinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_allskillinfo()) {
      mutable_allskillinfo()->::Cmd::SpecSkillInfo::MergeFrom(from.allskillinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpSkillInfoSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpSkillInfoSkillCmd::CopyFrom(const UpSkillInfoSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpSkillInfoSkillCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->specinfo())) return false;
  if (has_allskillinfo()) {
    if (!this->allskillinfo().IsInitialized()) return false;
  }
  return true;
}

void UpSkillInfoSkillCmd::Swap(UpSkillInfoSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    specinfo_.Swap(&other->specinfo_);
    std::swap(allskillinfo_, other->allskillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpSkillInfoSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpSkillInfoSkillCmd_descriptor_;
  metadata.reflection = UpSkillInfoSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectRuneSkillCmd::kCmdFieldNumber;
const int SelectRuneSkillCmd::kParamFieldNumber;
const int SelectRuneSkillCmd::kSkillidFieldNumber;
const int SelectRuneSkillCmd::kRunespecidFieldNumber;
const int SelectRuneSkillCmd::kSelectswitchFieldNumber;
const int SelectRuneSkillCmd::kBeingidFieldNumber;
#endif  // !_MSC_VER

SelectRuneSkillCmd::SelectRuneSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SelectRuneSkillCmd)
}

void SelectRuneSkillCmd::InitAsDefaultInstance() {
}

SelectRuneSkillCmd::SelectRuneSkillCmd(const SelectRuneSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SelectRuneSkillCmd)
}

void SelectRuneSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 9;
  skillid_ = 0u;
  runespecid_ = 0u;
  selectswitch_ = true;
  beingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectRuneSkillCmd::~SelectRuneSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SelectRuneSkillCmd)
  SharedDtor();
}

void SelectRuneSkillCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectRuneSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectRuneSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectRuneSkillCmd_descriptor_;
}

const SelectRuneSkillCmd& SelectRuneSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SelectRuneSkillCmd* SelectRuneSkillCmd::default_instance_ = NULL;

SelectRuneSkillCmd* SelectRuneSkillCmd::New() const {
  return new SelectRuneSkillCmd;
}

void SelectRuneSkillCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SelectRuneSkillCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(skillid_, runespecid_);
    cmd_ = 7;
    param_ = 9;
    selectswitch_ = true;
    beingid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectRuneSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SelectRuneSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SELECT_RUNE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // required uint32 skillid = 3;
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_runespecid;
        break;
      }

      // optional uint32 runespecid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_runespecid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runespecid_)));
          set_has_runespecid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_selectswitch;
        break;
      }

      // optional bool selectswitch = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_selectswitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selectswitch_)));
          set_has_selectswitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_beingid;
        break;
      }

      // optional uint32 beingid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_beingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beingid_)));
          set_has_beingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SelectRuneSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SelectRuneSkillCmd)
  return false;
#undef DO_
}

void SelectRuneSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SelectRuneSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SELECT_RUNE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional uint32 runespecid = 4 [default = 0];
  if (has_runespecid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->runespecid(), output);
  }

  // optional bool selectswitch = 5 [default = true];
  if (has_selectswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->selectswitch(), output);
  }

  // optional uint32 beingid = 6 [default = 0];
  if (has_beingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->beingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SelectRuneSkillCmd)
}

::google::protobuf::uint8* SelectRuneSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SelectRuneSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SELECT_RUNE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional uint32 runespecid = 4 [default = 0];
  if (has_runespecid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->runespecid(), target);
  }

  // optional bool selectswitch = 5 [default = true];
  if (has_selectswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->selectswitch(), target);
  }

  // optional uint32 beingid = 6 [default = 0];
  if (has_beingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->beingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SelectRuneSkillCmd)
  return target;
}

int SelectRuneSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SELECT_RUNE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 runespecid = 4 [default = 0];
    if (has_runespecid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runespecid());
    }

    // optional bool selectswitch = 5 [default = true];
    if (has_selectswitch()) {
      total_size += 1 + 1;
    }

    // optional uint32 beingid = 6 [default = 0];
    if (has_beingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectRuneSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectRuneSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectRuneSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectRuneSkillCmd::MergeFrom(const SelectRuneSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_runespecid()) {
      set_runespecid(from.runespecid());
    }
    if (from.has_selectswitch()) {
      set_selectswitch(from.selectswitch());
    }
    if (from.has_beingid()) {
      set_beingid(from.beingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectRuneSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRuneSkillCmd::CopyFrom(const SelectRuneSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRuneSkillCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void SelectRuneSkillCmd::Swap(SelectRuneSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(skillid_, other->skillid_);
    std::swap(runespecid_, other->runespecid_);
    std::swap(selectswitch_, other->selectswitch_);
    std::swap(beingid_, other->beingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectRuneSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectRuneSkillCmd_descriptor_;
  metadata.reflection = SelectRuneSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarkSkillNpcSkillCmd::kCmdFieldNumber;
const int MarkSkillNpcSkillCmd::kParamFieldNumber;
const int MarkSkillNpcSkillCmd::kNpcguidFieldNumber;
const int MarkSkillNpcSkillCmd::kSkillidFieldNumber;
#endif  // !_MSC_VER

MarkSkillNpcSkillCmd::MarkSkillNpcSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MarkSkillNpcSkillCmd)
}

void MarkSkillNpcSkillCmd::InitAsDefaultInstance() {
}

MarkSkillNpcSkillCmd::MarkSkillNpcSkillCmd(const MarkSkillNpcSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MarkSkillNpcSkillCmd)
}

void MarkSkillNpcSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 10;
  npcguid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkSkillNpcSkillCmd::~MarkSkillNpcSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MarkSkillNpcSkillCmd)
  SharedDtor();
}

void MarkSkillNpcSkillCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarkSkillNpcSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkSkillNpcSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkSkillNpcSkillCmd_descriptor_;
}

const MarkSkillNpcSkillCmd& MarkSkillNpcSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

MarkSkillNpcSkillCmd* MarkSkillNpcSkillCmd::default_instance_ = NULL;

MarkSkillNpcSkillCmd* MarkSkillNpcSkillCmd::New() const {
  return new MarkSkillNpcSkillCmd;
}

void MarkSkillNpcSkillCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarkSkillNpcSkillCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, skillid_);
    cmd_ = 7;
    param_ = 10;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarkSkillNpcSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MarkSkillNpcSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_MARK_SKILLNPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // required uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillid;
        break;
      }

      // required uint32 skillid = 4;
      case 4: {
        if (tag == 32) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MarkSkillNpcSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MarkSkillNpcSkillCmd)
  return false;
#undef DO_
}

void MarkSkillNpcSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MarkSkillNpcSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_MARK_SKILLNPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // required uint32 skillid = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MarkSkillNpcSkillCmd)
}

::google::protobuf::uint8* MarkSkillNpcSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MarkSkillNpcSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_MARK_SKILLNPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // required uint32 skillid = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MarkSkillNpcSkillCmd)
  return target;
}

int MarkSkillNpcSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_MARK_SKILLNPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // required uint32 skillid = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkSkillNpcSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarkSkillNpcSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarkSkillNpcSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarkSkillNpcSkillCmd::MergeFrom(const MarkSkillNpcSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarkSkillNpcSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkSkillNpcSkillCmd::CopyFrom(const MarkSkillNpcSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkSkillNpcSkillCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void MarkSkillNpcSkillCmd::Swap(MarkSkillNpcSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarkSkillNpcSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkSkillNpcSkillCmd_descriptor_;
  metadata.reflection = MarkSkillNpcSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerSkillNpcSkillCmd::kCmdFieldNumber;
const int TriggerSkillNpcSkillCmd::kParamFieldNumber;
const int TriggerSkillNpcSkillCmd::kNpcguidFieldNumber;
const int TriggerSkillNpcSkillCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

TriggerSkillNpcSkillCmd::TriggerSkillNpcSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TriggerSkillNpcSkillCmd)
}

void TriggerSkillNpcSkillCmd::InitAsDefaultInstance() {
}

TriggerSkillNpcSkillCmd::TriggerSkillNpcSkillCmd(const TriggerSkillNpcSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TriggerSkillNpcSkillCmd)
}

void TriggerSkillNpcSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 11;
  npcguid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerSkillNpcSkillCmd::~TriggerSkillNpcSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TriggerSkillNpcSkillCmd)
  SharedDtor();
}

void TriggerSkillNpcSkillCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TriggerSkillNpcSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerSkillNpcSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerSkillNpcSkillCmd_descriptor_;
}

const TriggerSkillNpcSkillCmd& TriggerSkillNpcSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

TriggerSkillNpcSkillCmd* TriggerSkillNpcSkillCmd::default_instance_ = NULL;

TriggerSkillNpcSkillCmd* TriggerSkillNpcSkillCmd::New() const {
  return new TriggerSkillNpcSkillCmd;
}

void TriggerSkillNpcSkillCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TriggerSkillNpcSkillCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, etype_);
    cmd_ = 7;
    param_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerSkillNpcSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TriggerSkillNpcSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_TRGGER_SKILLNPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // required uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.ETrigSkillType etype = 4 [default = ETRIGTSKILL_MIN];
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETrigSkillType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::ETrigSkillType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TriggerSkillNpcSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TriggerSkillNpcSkillCmd)
  return false;
#undef DO_
}

void TriggerSkillNpcSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TriggerSkillNpcSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_TRGGER_SKILLNPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // optional .Cmd.ETrigSkillType etype = 4 [default = ETRIGTSKILL_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TriggerSkillNpcSkillCmd)
}

::google::protobuf::uint8* TriggerSkillNpcSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TriggerSkillNpcSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_TRGGER_SKILLNPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // optional .Cmd.ETrigSkillType etype = 4 [default = ETRIGTSKILL_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TriggerSkillNpcSkillCmd)
  return target;
}

int TriggerSkillNpcSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_TRGGER_SKILLNPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional .Cmd.ETrigSkillType etype = 4 [default = ETRIGTSKILL_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerSkillNpcSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerSkillNpcSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerSkillNpcSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerSkillNpcSkillCmd::MergeFrom(const TriggerSkillNpcSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerSkillNpcSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerSkillNpcSkillCmd::CopyFrom(const TriggerSkillNpcSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerSkillNpcSkillCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void TriggerSkillNpcSkillCmd::Swap(TriggerSkillNpcSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerSkillNpcSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerSkillNpcSkillCmd_descriptor_;
  metadata.reflection = TriggerSkillNpcSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillOption::kOptFieldNumber;
const int SkillOption::kValueFieldNumber;
#endif  // !_MSC_VER

SkillOption::SkillOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillOption)
}

void SkillOption::InitAsDefaultInstance() {
}

SkillOption::SkillOption(const SkillOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillOption)
}

void SkillOption::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 1;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillOption::~SkillOption() {
  // @@protoc_insertion_point(destructor:Cmd.SkillOption)
  SharedDtor();
}

void SkillOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillOption_descriptor_;
}

const SkillOption& SkillOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillOption* SkillOption::default_instance_ = NULL;

SkillOption* SkillOption::New() const {
  return new SkillOption;
}

void SkillOption::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    opt_ = 1;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cmd.ESkillOption opt = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESkillOption_IsValid(value)) {
            set_opt(static_cast< ::Cmd::ESkillOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillOption)
  return false;
#undef DO_
}

void SkillOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillOption)
  // required .Cmd.ESkillOption opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opt(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillOption)
}

::google::protobuf::uint8* SkillOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillOption)
  // required .Cmd.ESkillOption opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opt(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillOption)
  return target;
}

int SkillOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cmd.ESkillOption opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillOption::MergeFrom(const SkillOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillOption::CopyFrom(const SkillOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillOption::Swap(SkillOption* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillOption_descriptor_;
  metadata.reflection = SkillOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillOptionSkillCmd::kCmdFieldNumber;
const int SkillOptionSkillCmd::kParamFieldNumber;
const int SkillOptionSkillCmd::kSetOptFieldNumber;
const int SkillOptionSkillCmd::kAllOptsFieldNumber;
#endif  // !_MSC_VER

SkillOptionSkillCmd::SkillOptionSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillOptionSkillCmd)
}

void SkillOptionSkillCmd::InitAsDefaultInstance() {
  set_opt_ = const_cast< ::Cmd::SkillOption*>(&::Cmd::SkillOption::default_instance());
}

SkillOptionSkillCmd::SkillOptionSkillCmd(const SkillOptionSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillOptionSkillCmd)
}

void SkillOptionSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 12;
  set_opt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillOptionSkillCmd::~SkillOptionSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SkillOptionSkillCmd)
  SharedDtor();
}

void SkillOptionSkillCmd::SharedDtor() {
  if (this != default_instance_) {
    delete set_opt_;
  }
}

void SkillOptionSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillOptionSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillOptionSkillCmd_descriptor_;
}

const SkillOptionSkillCmd& SkillOptionSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SkillOptionSkillCmd* SkillOptionSkillCmd::default_instance_ = NULL;

SkillOptionSkillCmd* SkillOptionSkillCmd::New() const {
  return new SkillOptionSkillCmd;
}

void SkillOptionSkillCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 7;
    param_ = 12;
    if (has_set_opt()) {
      if (set_opt_ != NULL) set_opt_->::Cmd::SkillOption::Clear();
    }
  }
  all_opts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillOptionSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillOptionSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLOPTIONS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_set_opt;
        break;
      }

      // optional .Cmd.SkillOption set_opt = 3;
      case 3: {
        if (tag == 26) {
         parse_set_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_opt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_all_opts;
        break;
      }

      // repeated .Cmd.SkillOption all_opts = 4;
      case 4: {
        if (tag == 34) {
         parse_all_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_opts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_all_opts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillOptionSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillOptionSkillCmd)
  return false;
#undef DO_
}

void SkillOptionSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillOptionSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLOPTIONS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SkillOption set_opt = 3;
  if (has_set_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->set_opt(), output);
  }

  // repeated .Cmd.SkillOption all_opts = 4;
  for (int i = 0; i < this->all_opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->all_opts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillOptionSkillCmd)
}

::google::protobuf::uint8* SkillOptionSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillOptionSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLOPTIONS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SkillOption set_opt = 3;
  if (has_set_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->set_opt(), target);
  }

  // repeated .Cmd.SkillOption all_opts = 4;
  for (int i = 0; i < this->all_opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->all_opts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillOptionSkillCmd)
  return target;
}

int SkillOptionSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SKILLOPTIONS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SkillOption set_opt = 3;
    if (has_set_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_opt());
    }

  }
  // repeated .Cmd.SkillOption all_opts = 4;
  total_size += 1 * this->all_opts_size();
  for (int i = 0; i < this->all_opts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_opts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillOptionSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillOptionSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillOptionSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillOptionSkillCmd::MergeFrom(const SkillOptionSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_opts_.MergeFrom(from.all_opts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_set_opt()) {
      mutable_set_opt()->::Cmd::SkillOption::MergeFrom(from.set_opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillOptionSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillOptionSkillCmd::CopyFrom(const SkillOptionSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillOptionSkillCmd::IsInitialized() const {

  if (has_set_opt()) {
    if (!this->set_opt().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->all_opts())) return false;
  return true;
}

void SkillOptionSkillCmd::Swap(SkillOptionSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(set_opt_, other->set_opt_);
    all_opts_.Swap(&other->all_opts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillOptionSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillOptionSkillCmd_descriptor_;
  metadata.reflection = SkillOptionSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynamicSkillCmd::kCmdFieldNumber;
const int DynamicSkillCmd::kParamFieldNumber;
const int DynamicSkillCmd::kSkillsFieldNumber;
#endif  // !_MSC_VER

DynamicSkillCmd::DynamicSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DynamicSkillCmd)
}

void DynamicSkillCmd::InitAsDefaultInstance() {
}

DynamicSkillCmd::DynamicSkillCmd(const DynamicSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DynamicSkillCmd)
}

void DynamicSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 13;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicSkillCmd::~DynamicSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DynamicSkillCmd)
  SharedDtor();
}

void DynamicSkillCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DynamicSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynamicSkillCmd_descriptor_;
}

const DynamicSkillCmd& DynamicSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

DynamicSkillCmd* DynamicSkillCmd::default_instance_ = NULL;

DynamicSkillCmd* DynamicSkillCmd::New() const {
  return new DynamicSkillCmd;
}

void DynamicSkillCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 7;
    param_ = 13;
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynamicSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DynamicSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skills;
        break;
      }

      // repeated .Cmd.SkillItem skills = 3;
      case 3: {
        if (tag == 26) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DynamicSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DynamicSkillCmd)
  return false;
#undef DO_
}

void DynamicSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DynamicSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SkillItem skills = 3;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DynamicSkillCmd)
}

::google::protobuf::uint8* DynamicSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DynamicSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SkillItem skills = 3;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DynamicSkillCmd)
  return target;
}

int DynamicSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SkillItem skills = 3;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynamicSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynamicSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynamicSkillCmd::MergeFrom(const DynamicSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynamicSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicSkillCmd::CopyFrom(const DynamicSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicSkillCmd::IsInitialized() const {

  return true;
}

void DynamicSkillCmd::Swap(DynamicSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynamicSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynamicSkillCmd_descriptor_;
  metadata.reflection = DynamicSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDynamicSkillCmd::kCmdFieldNumber;
const int UpdateDynamicSkillCmd::kParamFieldNumber;
const int UpdateDynamicSkillCmd::kUpdateFieldNumber;
const int UpdateDynamicSkillCmd::kDelFieldNumber;
#endif  // !_MSC_VER

UpdateDynamicSkillCmd::UpdateDynamicSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateDynamicSkillCmd)
}

void UpdateDynamicSkillCmd::InitAsDefaultInstance() {
}

UpdateDynamicSkillCmd::UpdateDynamicSkillCmd(const UpdateDynamicSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateDynamicSkillCmd)
}

void UpdateDynamicSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 14;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDynamicSkillCmd::~UpdateDynamicSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateDynamicSkillCmd)
  SharedDtor();
}

void UpdateDynamicSkillCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDynamicSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDynamicSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDynamicSkillCmd_descriptor_;
}

const UpdateDynamicSkillCmd& UpdateDynamicSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

UpdateDynamicSkillCmd* UpdateDynamicSkillCmd::default_instance_ = NULL;

UpdateDynamicSkillCmd* UpdateDynamicSkillCmd::New() const {
  return new UpdateDynamicSkillCmd;
}

void UpdateDynamicSkillCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 7;
    param_ = 14;
  }
  update_.Clear();
  del_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDynamicSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateDynamicSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update;
        break;
      }

      // repeated .Cmd.SkillItem update = 3;
      case 3: {
        if (tag == 26) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update;
        if (input->ExpectTag(34)) goto parse_del;
        break;
      }

      // repeated .Cmd.SkillItem del = 4;
      case 4: {
        if (tag == 34) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_del;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateDynamicSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateDynamicSkillCmd)
  return false;
#undef DO_
}

void UpdateDynamicSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateDynamicSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SkillItem update = 3;
  for (int i = 0; i < this->update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->update(i), output);
  }

  // repeated .Cmd.SkillItem del = 4;
  for (int i = 0; i < this->del_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->del(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateDynamicSkillCmd)
}

::google::protobuf::uint8* UpdateDynamicSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateDynamicSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SkillItem update = 3;
  for (int i = 0; i < this->update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->update(i), target);
  }

  // repeated .Cmd.SkillItem del = 4;
  for (int i = 0; i < this->del_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->del(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateDynamicSkillCmd)
  return target;
}

int UpdateDynamicSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_DYNAMIC_SKILL_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SkillItem update = 3;
  total_size += 1 * this->update_size();
  for (int i = 0; i < this->update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update(i));
  }

  // repeated .Cmd.SkillItem del = 4;
  total_size += 1 * this->del_size();
  for (int i = 0; i < this->del_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDynamicSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDynamicSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDynamicSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDynamicSkillCmd::MergeFrom(const UpdateDynamicSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_.MergeFrom(from.update_);
  del_.MergeFrom(from.del_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDynamicSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDynamicSkillCmd::CopyFrom(const UpdateDynamicSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDynamicSkillCmd::IsInitialized() const {

  return true;
}

void UpdateDynamicSkillCmd::Swap(UpdateDynamicSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    update_.Swap(&other->update_);
    del_.Swap(&other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDynamicSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDynamicSkillCmd_descriptor_;
  metadata.reflection = UpdateDynamicSkillCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncDestPosSkillCmd::kCmdFieldNumber;
const int SyncDestPosSkillCmd::kParamFieldNumber;
const int SyncDestPosSkillCmd::kSkillidFieldNumber;
const int SyncDestPosSkillCmd::kPosFieldNumber;
#endif  // !_MSC_VER

SyncDestPosSkillCmd::SyncDestPosSkillCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncDestPosSkillCmd)
}

void SyncDestPosSkillCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

SyncDestPosSkillCmd::SyncDestPosSkillCmd(const SyncDestPosSkillCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncDestPosSkillCmd)
}

void SyncDestPosSkillCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 7;
  param_ = 15;
  skillid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncDestPosSkillCmd::~SyncDestPosSkillCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncDestPosSkillCmd)
  SharedDtor();
}

void SyncDestPosSkillCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void SyncDestPosSkillCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncDestPosSkillCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncDestPosSkillCmd_descriptor_;
}

const SyncDestPosSkillCmd& SyncDestPosSkillCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneSkill_2eproto();
  return *default_instance_;
}

SyncDestPosSkillCmd* SyncDestPosSkillCmd::default_instance_ = NULL;

SyncDestPosSkillCmd* SyncDestPosSkillCmd::New() const {
  return new SyncDestPosSkillCmd;
}

void SyncDestPosSkillCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 7;
    param_ = 15;
    skillid_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncDestPosSkillCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncDestPosSkillCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SYNC_DEST_POS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SkillParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SkillParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncDestPosSkillCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncDestPosSkillCmd)
  return false;
#undef DO_
}

void SyncDestPosSkillCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncDestPosSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SYNC_DEST_POS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 skillid = 3 [default = 0];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncDestPosSkillCmd)
}

::google::protobuf::uint8* SyncDestPosSkillCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncDestPosSkillCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SYNC_DEST_POS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 skillid = 3 [default = 0];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncDestPosSkillCmd)
  return target;
}

int SyncDestPosSkillCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SKILL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SkillParam param = 2 [default = SKILLPARAM_SYNC_DEST_POS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 skillid = 3 [default = 0];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncDestPosSkillCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncDestPosSkillCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncDestPosSkillCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncDestPosSkillCmd::MergeFrom(const SyncDestPosSkillCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncDestPosSkillCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncDestPosSkillCmd::CopyFrom(const SyncDestPosSkillCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDestPosSkillCmd::IsInitialized() const {

  return true;
}

void SyncDestPosSkillCmd::Swap(SyncDestPosSkillCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncDestPosSkillCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncDestPosSkillCmd_descriptor_;
  metadata.reflection = SyncDestPosSkillCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
