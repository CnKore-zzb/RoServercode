// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tutor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Tutor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* TutorTaskItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorTaskItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineTutorReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineTutorReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorTaskUpdateNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorTaskUpdateNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorTaskQueryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorTaskQueryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorTaskTeacherRewardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorTaskTeacherRewardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorGrowRewardUpdateNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorGrowRewardUpdateNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorGetGrowRewardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorGetGrowRewardCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TutorParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Tutor_2eproto() {
  protobuf_AddDesc_Tutor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Tutor.proto");
  GOOGLE_CHECK(file != NULL);
  TutorTaskItem_descriptor_ = file->message_type(0);
  static const int TutorTaskItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskItem, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskItem, reward_),
  };
  TutorTaskItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorTaskItem_descriptor_,
      TutorTaskItem::default_instance_,
      TutorTaskItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorTaskItem));
  TutorRewardItem_descriptor_ = file->message_type(1);
  static const int TutorRewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorRewardItem, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorRewardItem, time_),
  };
  TutorRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorRewardItem_descriptor_,
      TutorRewardItem::default_instance_,
      TutorRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorRewardItem));
  TutorReward_descriptor_ = file->message_type(2);
  static const int TutorReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorReward, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorReward, item_),
  };
  TutorReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorReward_descriptor_,
      TutorReward::default_instance_,
      TutorReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorReward));
  OfflineTutorReward_descriptor_ = file->message_type(3);
  static const int OfflineTutorReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineTutorReward, teacherrewards_),
  };
  OfflineTutorReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineTutorReward_descriptor_,
      OfflineTutorReward::default_instance_,
      OfflineTutorReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineTutorReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineTutorReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineTutorReward));
  TutorTaskUpdateNtf_descriptor_ = file->message_type(4);
  static const int TutorTaskUpdateNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskUpdateNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskUpdateNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskUpdateNtf, items_),
  };
  TutorTaskUpdateNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorTaskUpdateNtf_descriptor_,
      TutorTaskUpdateNtf::default_instance_,
      TutorTaskUpdateNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskUpdateNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskUpdateNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorTaskUpdateNtf));
  TutorTaskQueryCmd_descriptor_ = file->message_type(5);
  static const int TutorTaskQueryCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, finishtaskids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, refresh_),
  };
  TutorTaskQueryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorTaskQueryCmd_descriptor_,
      TutorTaskQueryCmd::default_instance_,
      TutorTaskQueryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskQueryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorTaskQueryCmd));
  TutorTaskTeacherRewardCmd_descriptor_ = file->message_type(6);
  static const int TutorTaskTeacherRewardCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskTeacherRewardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskTeacherRewardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskTeacherRewardCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskTeacherRewardCmd, taskid_),
  };
  TutorTaskTeacherRewardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorTaskTeacherRewardCmd_descriptor_,
      TutorTaskTeacherRewardCmd::default_instance_,
      TutorTaskTeacherRewardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskTeacherRewardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorTaskTeacherRewardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorTaskTeacherRewardCmd));
  TutorGrowRewardUpdateNtf_descriptor_ = file->message_type(7);
  static const int TutorGrowRewardUpdateNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGrowRewardUpdateNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGrowRewardUpdateNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGrowRewardUpdateNtf, growrewards_),
  };
  TutorGrowRewardUpdateNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorGrowRewardUpdateNtf_descriptor_,
      TutorGrowRewardUpdateNtf::default_instance_,
      TutorGrowRewardUpdateNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGrowRewardUpdateNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGrowRewardUpdateNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorGrowRewardUpdateNtf));
  TutorGetGrowRewardCmd_descriptor_ = file->message_type(8);
  static const int TutorGetGrowRewardCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGetGrowRewardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGetGrowRewardCmd, param_),
  };
  TutorGetGrowRewardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorGetGrowRewardCmd_descriptor_,
      TutorGetGrowRewardCmd::default_instance_,
      TutorGetGrowRewardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGetGrowRewardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorGetGrowRewardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorGetGrowRewardCmd));
  TutorParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Tutor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorTaskItem_descriptor_, &TutorTaskItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorRewardItem_descriptor_, &TutorRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorReward_descriptor_, &TutorReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineTutorReward_descriptor_, &OfflineTutorReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorTaskUpdateNtf_descriptor_, &TutorTaskUpdateNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorTaskQueryCmd_descriptor_, &TutorTaskQueryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorTaskTeacherRewardCmd_descriptor_, &TutorTaskTeacherRewardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorGrowRewardUpdateNtf_descriptor_, &TutorGrowRewardUpdateNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorGetGrowRewardCmd_descriptor_, &TutorGetGrowRewardCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Tutor_2eproto() {
  delete TutorTaskItem::default_instance_;
  delete TutorTaskItem_reflection_;
  delete TutorRewardItem::default_instance_;
  delete TutorRewardItem_reflection_;
  delete TutorReward::default_instance_;
  delete TutorReward_reflection_;
  delete OfflineTutorReward::default_instance_;
  delete OfflineTutorReward_reflection_;
  delete TutorTaskUpdateNtf::default_instance_;
  delete TutorTaskUpdateNtf_reflection_;
  delete TutorTaskQueryCmd::default_instance_;
  delete TutorTaskQueryCmd_reflection_;
  delete TutorTaskTeacherRewardCmd::default_instance_;
  delete TutorTaskTeacherRewardCmd_reflection_;
  delete TutorGrowRewardUpdateNtf::default_instance_;
  delete TutorGrowRewardUpdateNtf_reflection_;
  delete TutorGetGrowRewardCmd::default_instance_;
  delete TutorGetGrowRewardCmd_reflection_;
}

void protobuf_AddDesc_Tutor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Tutor.proto\022\003Cmd\032\nxCmd.proto\"J\n\rTutorT"
    "askItem\022\r\n\002id\030\001 \001(\r:\0010\022\023\n\010progress\030\002 \001(\r"
    ":\0010\022\025\n\006reward\030\003 \001(\010:\005false\"/\n\017TutorRewar"
    "dItem\022\016\n\006taskid\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"b\n\013T"
    "utorReward\022\021\n\006charid\030\001 \001(\004:\0010\022\014\n\004name\030\002 "
    "\001(\t\022\016\n\006reward\030\003 \003(\r\022\"\n\004item\030\004 \003(\0132\024.Cmd."
    "TutorRewardItem\">\n\022OfflineTutorReward\022(\n"
    "\016teacherrewards\030\001 \003(\0132\020.Cmd.TutorReward\""
    "\251\001\n\022TutorTaskUpdateNtf\0224\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\031SCENE_USER_TUTOR_PROTOCMD\022:\n\005"
    "param\030\002 \001(\0162\017.Cmd.TutorParam:\032TUTORPARAM"
    "_TASK_UPDATE_NTF\022!\n\005items\030\003 \003(\0132\022.Cmd.Tu"
    "torTaskItem\"\345\001\n\021TutorTaskQueryCmd\0224\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_TUTOR_P"
    "ROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.TutorParam:"
    "\025TUTORPARAM_TASK_QUERY\022\021\n\006charid\030\003 \001(\004:\001"
    "0\022!\n\005items\030\004 \003(\0132\022.Cmd.TutorTaskItem\022\025\n\r"
    "finishtaskids\030\005 \003(\r\022\026\n\007refresh\030\006 \001(\010:\005fa"
    "lse\"\267\001\n\031TutorTaskTeacherRewardCmd\0224\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\031SCENE_USER_TUTOR_P"
    "ROTOCMD\022>\n\005param\030\002 \001(\0162\017.Cmd.TutorParam:"
    "\036TUTORPARAM_TASK_TEACHER_REWARD\022\021\n\006chari"
    "d\030\003 \001(\004:\0010\022\021\n\006taskid\030\004 \001(\r:\0010\"\244\001\n\030TutorG"
    "rowRewardUpdateNtf\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\031SCENE_USER_TUTOR_PROTOCMD\022=\n\005para"
    "m\030\002 \001(\0162\017.Cmd.TutorParam:\035TUTORPARAM_GRO"
    "W_REWARD_UPDATE\022\023\n\013growrewards\030\003 \003(\004\"\211\001\n"
    "\025TutorGetGrowRewardCmd\0224\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\031SCENE_USER_TUTOR_PROTOCMD\022:\n\005"
    "param\030\002 \001(\0162\017.Cmd.TutorParam:\032TUTORPARAM"
    "_GET_GROW_REWARD*\256\001\n\nTutorParam\022\036\n\032TUTOR"
    "PARAM_TASK_UPDATE_NTF\020\001\022\031\n\025TUTORPARAM_TA"
    "SK_QUERY\020\002\022\"\n\036TUTORPARAM_TASK_TEACHER_RE"
    "WARD\020\003\022!\n\035TUTORPARAM_GROW_REWARD_UPDATE\020"
    "\004\022\036\n\032TUTORPARAM_GET_GROW_REWARD\020\005", 1393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Tutor.proto", &protobuf_RegisterTypes);
  TutorTaskItem::default_instance_ = new TutorTaskItem();
  TutorRewardItem::default_instance_ = new TutorRewardItem();
  TutorReward::default_instance_ = new TutorReward();
  OfflineTutorReward::default_instance_ = new OfflineTutorReward();
  TutorTaskUpdateNtf::default_instance_ = new TutorTaskUpdateNtf();
  TutorTaskQueryCmd::default_instance_ = new TutorTaskQueryCmd();
  TutorTaskTeacherRewardCmd::default_instance_ = new TutorTaskTeacherRewardCmd();
  TutorGrowRewardUpdateNtf::default_instance_ = new TutorGrowRewardUpdateNtf();
  TutorGetGrowRewardCmd::default_instance_ = new TutorGetGrowRewardCmd();
  TutorTaskItem::default_instance_->InitAsDefaultInstance();
  TutorRewardItem::default_instance_->InitAsDefaultInstance();
  TutorReward::default_instance_->InitAsDefaultInstance();
  OfflineTutorReward::default_instance_->InitAsDefaultInstance();
  TutorTaskUpdateNtf::default_instance_->InitAsDefaultInstance();
  TutorTaskQueryCmd::default_instance_->InitAsDefaultInstance();
  TutorTaskTeacherRewardCmd::default_instance_->InitAsDefaultInstance();
  TutorGrowRewardUpdateNtf::default_instance_->InitAsDefaultInstance();
  TutorGetGrowRewardCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Tutor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Tutor_2eproto {
  StaticDescriptorInitializer_Tutor_2eproto() {
    protobuf_AddDesc_Tutor_2eproto();
  }
} static_descriptor_initializer_Tutor_2eproto_;
const ::google::protobuf::EnumDescriptor* TutorParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorParam_descriptor_;
}
bool TutorParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TutorTaskItem::kIdFieldNumber;
const int TutorTaskItem::kProgressFieldNumber;
const int TutorTaskItem::kRewardFieldNumber;
#endif  // !_MSC_VER

TutorTaskItem::TutorTaskItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorTaskItem)
}

void TutorTaskItem::InitAsDefaultInstance() {
}

TutorTaskItem::TutorTaskItem(const TutorTaskItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorTaskItem)
}

void TutorTaskItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  progress_ = 0u;
  reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorTaskItem::~TutorTaskItem() {
  // @@protoc_insertion_point(destructor:Cmd.TutorTaskItem)
  SharedDtor();
}

void TutorTaskItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorTaskItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorTaskItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorTaskItem_descriptor_;
}

const TutorTaskItem& TutorTaskItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorTaskItem* TutorTaskItem::default_instance_ = NULL;

TutorTaskItem* TutorTaskItem::New() const {
  return new TutorTaskItem;
}

void TutorTaskItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TutorTaskItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorTaskItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorTaskItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional bool reward = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorTaskItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorTaskItem)
  return false;
#undef DO_
}

void TutorTaskItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorTaskItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 progress = 2 [default = 0];
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  // optional bool reward = 3 [default = false];
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorTaskItem)
}

::google::protobuf::uint8* TutorTaskItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorTaskItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 progress = 2 [default = 0];
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  // optional bool reward = 3 [default = false];
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorTaskItem)
  return target;
}

int TutorTaskItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 progress = 2 [default = 0];
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional bool reward = 3 [default = false];
    if (has_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorTaskItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorTaskItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorTaskItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorTaskItem::MergeFrom(const TutorTaskItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorTaskItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorTaskItem::CopyFrom(const TutorTaskItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorTaskItem::IsInitialized() const {

  return true;
}

void TutorTaskItem::Swap(TutorTaskItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(progress_, other->progress_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorTaskItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorTaskItem_descriptor_;
  metadata.reflection = TutorTaskItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorRewardItem::kTaskidFieldNumber;
const int TutorRewardItem::kTimeFieldNumber;
#endif  // !_MSC_VER

TutorRewardItem::TutorRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorRewardItem)
}

void TutorRewardItem::InitAsDefaultInstance() {
}

TutorRewardItem::TutorRewardItem(const TutorRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorRewardItem)
}

void TutorRewardItem::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorRewardItem::~TutorRewardItem() {
  // @@protoc_insertion_point(destructor:Cmd.TutorRewardItem)
  SharedDtor();
}

void TutorRewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorRewardItem_descriptor_;
}

const TutorRewardItem& TutorRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorRewardItem* TutorRewardItem::default_instance_ = NULL;

TutorRewardItem* TutorRewardItem::New() const {
  return new TutorRewardItem;
}

void TutorRewardItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TutorRewardItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorRewardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorRewardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorRewardItem)
  return false;
#undef DO_
}

void TutorRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorRewardItem)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorRewardItem)
}

::google::protobuf::uint8* TutorRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorRewardItem)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorRewardItem)
  return target;
}

int TutorRewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorRewardItem::MergeFrom(const TutorRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorRewardItem::CopyFrom(const TutorRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorRewardItem::IsInitialized() const {

  return true;
}

void TutorRewardItem::Swap(TutorRewardItem* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorRewardItem_descriptor_;
  metadata.reflection = TutorRewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorReward::kCharidFieldNumber;
const int TutorReward::kNameFieldNumber;
const int TutorReward::kRewardFieldNumber;
const int TutorReward::kItemFieldNumber;
#endif  // !_MSC_VER

TutorReward::TutorReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorReward)
}

void TutorReward::InitAsDefaultInstance() {
}

TutorReward::TutorReward(const TutorReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorReward)
}

void TutorReward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorReward::~TutorReward() {
  // @@protoc_insertion_point(destructor:Cmd.TutorReward)
  SharedDtor();
}

void TutorReward::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TutorReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorReward_descriptor_;
}

const TutorReward& TutorReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorReward* TutorReward::default_instance_ = NULL;

TutorReward* TutorReward::New() const {
  return new TutorReward;
}

void TutorReward::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  reward_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // repeated uint32 reward = 3;
      case 3: {
        if (tag == 24) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_reward())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .Cmd.TutorRewardItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorReward)
  return false;
#undef DO_
}

void TutorReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorReward)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated uint32 reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->reward(i), output);
  }

  // repeated .Cmd.TutorRewardItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorReward)
}

::google::protobuf::uint8* TutorReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorReward)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated uint32 reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->reward(i), target);
  }

  // repeated .Cmd.TutorRewardItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorReward)
  return target;
}

int TutorReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated uint32 reward = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reward(i));
    }
    total_size += 1 * this->reward_size() + data_size;
  }

  // repeated .Cmd.TutorRewardItem item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorReward::MergeFrom(const TutorReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorReward::CopyFrom(const TutorReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorReward::IsInitialized() const {

  return true;
}

void TutorReward::Swap(TutorReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    reward_.Swap(&other->reward_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorReward_descriptor_;
  metadata.reflection = TutorReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineTutorReward::kTeacherrewardsFieldNumber;
#endif  // !_MSC_VER

OfflineTutorReward::OfflineTutorReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OfflineTutorReward)
}

void OfflineTutorReward::InitAsDefaultInstance() {
}

OfflineTutorReward::OfflineTutorReward(const OfflineTutorReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OfflineTutorReward)
}

void OfflineTutorReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineTutorReward::~OfflineTutorReward() {
  // @@protoc_insertion_point(destructor:Cmd.OfflineTutorReward)
  SharedDtor();
}

void OfflineTutorReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineTutorReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineTutorReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineTutorReward_descriptor_;
}

const OfflineTutorReward& OfflineTutorReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

OfflineTutorReward* OfflineTutorReward::default_instance_ = NULL;

OfflineTutorReward* OfflineTutorReward::New() const {
  return new OfflineTutorReward;
}

void OfflineTutorReward::Clear() {
  teacherrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineTutorReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OfflineTutorReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.TutorReward teacherrewards = 1;
      case 1: {
        if (tag == 10) {
         parse_teacherrewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teacherrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_teacherrewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OfflineTutorReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OfflineTutorReward)
  return false;
#undef DO_
}

void OfflineTutorReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OfflineTutorReward)
  // repeated .Cmd.TutorReward teacherrewards = 1;
  for (int i = 0; i < this->teacherrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teacherrewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OfflineTutorReward)
}

::google::protobuf::uint8* OfflineTutorReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OfflineTutorReward)
  // repeated .Cmd.TutorReward teacherrewards = 1;
  for (int i = 0; i < this->teacherrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teacherrewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OfflineTutorReward)
  return target;
}

int OfflineTutorReward::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.TutorReward teacherrewards = 1;
  total_size += 1 * this->teacherrewards_size();
  for (int i = 0; i < this->teacherrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teacherrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineTutorReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineTutorReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineTutorReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineTutorReward::MergeFrom(const OfflineTutorReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  teacherrewards_.MergeFrom(from.teacherrewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineTutorReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineTutorReward::CopyFrom(const OfflineTutorReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineTutorReward::IsInitialized() const {

  return true;
}

void OfflineTutorReward::Swap(OfflineTutorReward* other) {
  if (other != this) {
    teacherrewards_.Swap(&other->teacherrewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineTutorReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineTutorReward_descriptor_;
  metadata.reflection = OfflineTutorReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorTaskUpdateNtf::kCmdFieldNumber;
const int TutorTaskUpdateNtf::kParamFieldNumber;
const int TutorTaskUpdateNtf::kItemsFieldNumber;
#endif  // !_MSC_VER

TutorTaskUpdateNtf::TutorTaskUpdateNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorTaskUpdateNtf)
}

void TutorTaskUpdateNtf::InitAsDefaultInstance() {
}

TutorTaskUpdateNtf::TutorTaskUpdateNtf(const TutorTaskUpdateNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorTaskUpdateNtf)
}

void TutorTaskUpdateNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 31;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorTaskUpdateNtf::~TutorTaskUpdateNtf() {
  // @@protoc_insertion_point(destructor:Cmd.TutorTaskUpdateNtf)
  SharedDtor();
}

void TutorTaskUpdateNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorTaskUpdateNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorTaskUpdateNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorTaskUpdateNtf_descriptor_;
}

const TutorTaskUpdateNtf& TutorTaskUpdateNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorTaskUpdateNtf* TutorTaskUpdateNtf::default_instance_ = NULL;

TutorTaskUpdateNtf* TutorTaskUpdateNtf::New() const {
  return new TutorTaskUpdateNtf;
}

void TutorTaskUpdateNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 31;
    param_ = 1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorTaskUpdateNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorTaskUpdateNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_UPDATE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TutorParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TutorParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.TutorTaskItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorTaskUpdateNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorTaskUpdateNtf)
  return false;
#undef DO_
}

void TutorTaskUpdateNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorTaskUpdateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_UPDATE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TutorTaskItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorTaskUpdateNtf)
}

::google::protobuf::uint8* TutorTaskUpdateNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorTaskUpdateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_UPDATE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TutorTaskItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorTaskUpdateNtf)
  return target;
}

int TutorTaskUpdateNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_UPDATE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TutorTaskItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorTaskUpdateNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorTaskUpdateNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorTaskUpdateNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorTaskUpdateNtf::MergeFrom(const TutorTaskUpdateNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorTaskUpdateNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorTaskUpdateNtf::CopyFrom(const TutorTaskUpdateNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorTaskUpdateNtf::IsInitialized() const {

  return true;
}

void TutorTaskUpdateNtf::Swap(TutorTaskUpdateNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorTaskUpdateNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorTaskUpdateNtf_descriptor_;
  metadata.reflection = TutorTaskUpdateNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorTaskQueryCmd::kCmdFieldNumber;
const int TutorTaskQueryCmd::kParamFieldNumber;
const int TutorTaskQueryCmd::kCharidFieldNumber;
const int TutorTaskQueryCmd::kItemsFieldNumber;
const int TutorTaskQueryCmd::kFinishtaskidsFieldNumber;
const int TutorTaskQueryCmd::kRefreshFieldNumber;
#endif  // !_MSC_VER

TutorTaskQueryCmd::TutorTaskQueryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorTaskQueryCmd)
}

void TutorTaskQueryCmd::InitAsDefaultInstance() {
}

TutorTaskQueryCmd::TutorTaskQueryCmd(const TutorTaskQueryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorTaskQueryCmd)
}

void TutorTaskQueryCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 31;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  refresh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorTaskQueryCmd::~TutorTaskQueryCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TutorTaskQueryCmd)
  SharedDtor();
}

void TutorTaskQueryCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorTaskQueryCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorTaskQueryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorTaskQueryCmd_descriptor_;
}

const TutorTaskQueryCmd& TutorTaskQueryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorTaskQueryCmd* TutorTaskQueryCmd::default_instance_ = NULL;

TutorTaskQueryCmd* TutorTaskQueryCmd::New() const {
  return new TutorTaskQueryCmd;
}

void TutorTaskQueryCmd::Clear() {
  if (_has_bits_[0 / 32] & 39) {
    cmd_ = 31;
    param_ = 2;
    charid_ = GOOGLE_ULONGLONG(0);
    refresh_ = false;
  }
  items_.Clear();
  finishtaskids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorTaskQueryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorTaskQueryCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TutorParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TutorParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.TutorTaskItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_finishtaskids;
        break;
      }

      // repeated uint32 finishtaskids = 5;
      case 5: {
        if (tag == 40) {
         parse_finishtaskids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_finishtaskids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finishtaskids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_finishtaskids;
        if (input->ExpectTag(48)) goto parse_refresh;
        break;
      }

      // optional bool refresh = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_)));
          set_has_refresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorTaskQueryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorTaskQueryCmd)
  return false;
#undef DO_
}

void TutorTaskQueryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorTaskQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.TutorTaskItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // repeated uint32 finishtaskids = 5;
  for (int i = 0; i < this->finishtaskids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->finishtaskids(i), output);
  }

  // optional bool refresh = 6 [default = false];
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->refresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorTaskQueryCmd)
}

::google::protobuf::uint8* TutorTaskQueryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorTaskQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.TutorTaskItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // repeated uint32 finishtaskids = 5;
  for (int i = 0; i < this->finishtaskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->finishtaskids(i), target);
  }

  // optional bool refresh = 6 [default = false];
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->refresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorTaskQueryCmd)
  return target;
}

int TutorTaskQueryCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool refresh = 6 [default = false];
    if (has_refresh()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.TutorTaskItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated uint32 finishtaskids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishtaskids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->finishtaskids(i));
    }
    total_size += 1 * this->finishtaskids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorTaskQueryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorTaskQueryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorTaskQueryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorTaskQueryCmd::MergeFrom(const TutorTaskQueryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  finishtaskids_.MergeFrom(from.finishtaskids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_refresh()) {
      set_refresh(from.refresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorTaskQueryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorTaskQueryCmd::CopyFrom(const TutorTaskQueryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorTaskQueryCmd::IsInitialized() const {

  return true;
}

void TutorTaskQueryCmd::Swap(TutorTaskQueryCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    items_.Swap(&other->items_);
    finishtaskids_.Swap(&other->finishtaskids_);
    std::swap(refresh_, other->refresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorTaskQueryCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorTaskQueryCmd_descriptor_;
  metadata.reflection = TutorTaskQueryCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorTaskTeacherRewardCmd::kCmdFieldNumber;
const int TutorTaskTeacherRewardCmd::kParamFieldNumber;
const int TutorTaskTeacherRewardCmd::kCharidFieldNumber;
const int TutorTaskTeacherRewardCmd::kTaskidFieldNumber;
#endif  // !_MSC_VER

TutorTaskTeacherRewardCmd::TutorTaskTeacherRewardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorTaskTeacherRewardCmd)
}

void TutorTaskTeacherRewardCmd::InitAsDefaultInstance() {
}

TutorTaskTeacherRewardCmd::TutorTaskTeacherRewardCmd(const TutorTaskTeacherRewardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorTaskTeacherRewardCmd)
}

void TutorTaskTeacherRewardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 31;
  param_ = 3;
  charid_ = GOOGLE_ULONGLONG(0);
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorTaskTeacherRewardCmd::~TutorTaskTeacherRewardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TutorTaskTeacherRewardCmd)
  SharedDtor();
}

void TutorTaskTeacherRewardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorTaskTeacherRewardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorTaskTeacherRewardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorTaskTeacherRewardCmd_descriptor_;
}

const TutorTaskTeacherRewardCmd& TutorTaskTeacherRewardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorTaskTeacherRewardCmd* TutorTaskTeacherRewardCmd::default_instance_ = NULL;

TutorTaskTeacherRewardCmd* TutorTaskTeacherRewardCmd::New() const {
  return new TutorTaskTeacherRewardCmd;
}

void TutorTaskTeacherRewardCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TutorTaskTeacherRewardCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, taskid_);
    cmd_ = 31;
    param_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorTaskTeacherRewardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorTaskTeacherRewardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_TEACHER_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TutorParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TutorParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_taskid;
        break;
      }

      // optional uint32 taskid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorTaskTeacherRewardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorTaskTeacherRewardCmd)
  return false;
#undef DO_
}

void TutorTaskTeacherRewardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorTaskTeacherRewardCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_TEACHER_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 taskid = 4 [default = 0];
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorTaskTeacherRewardCmd)
}

::google::protobuf::uint8* TutorTaskTeacherRewardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorTaskTeacherRewardCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_TEACHER_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 taskid = 4 [default = 0];
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorTaskTeacherRewardCmd)
  return target;
}

int TutorTaskTeacherRewardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_TASK_TEACHER_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 taskid = 4 [default = 0];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorTaskTeacherRewardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorTaskTeacherRewardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorTaskTeacherRewardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorTaskTeacherRewardCmd::MergeFrom(const TutorTaskTeacherRewardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorTaskTeacherRewardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorTaskTeacherRewardCmd::CopyFrom(const TutorTaskTeacherRewardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorTaskTeacherRewardCmd::IsInitialized() const {

  return true;
}

void TutorTaskTeacherRewardCmd::Swap(TutorTaskTeacherRewardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorTaskTeacherRewardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorTaskTeacherRewardCmd_descriptor_;
  metadata.reflection = TutorTaskTeacherRewardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorGrowRewardUpdateNtf::kCmdFieldNumber;
const int TutorGrowRewardUpdateNtf::kParamFieldNumber;
const int TutorGrowRewardUpdateNtf::kGrowrewardsFieldNumber;
#endif  // !_MSC_VER

TutorGrowRewardUpdateNtf::TutorGrowRewardUpdateNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorGrowRewardUpdateNtf)
}

void TutorGrowRewardUpdateNtf::InitAsDefaultInstance() {
}

TutorGrowRewardUpdateNtf::TutorGrowRewardUpdateNtf(const TutorGrowRewardUpdateNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorGrowRewardUpdateNtf)
}

void TutorGrowRewardUpdateNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 31;
  param_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorGrowRewardUpdateNtf::~TutorGrowRewardUpdateNtf() {
  // @@protoc_insertion_point(destructor:Cmd.TutorGrowRewardUpdateNtf)
  SharedDtor();
}

void TutorGrowRewardUpdateNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorGrowRewardUpdateNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorGrowRewardUpdateNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorGrowRewardUpdateNtf_descriptor_;
}

const TutorGrowRewardUpdateNtf& TutorGrowRewardUpdateNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorGrowRewardUpdateNtf* TutorGrowRewardUpdateNtf::default_instance_ = NULL;

TutorGrowRewardUpdateNtf* TutorGrowRewardUpdateNtf::New() const {
  return new TutorGrowRewardUpdateNtf;
}

void TutorGrowRewardUpdateNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 31;
    param_ = 4;
  }
  growrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorGrowRewardUpdateNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorGrowRewardUpdateNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GROW_REWARD_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TutorParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TutorParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_growrewards;
        break;
      }

      // repeated uint64 growrewards = 3;
      case 3: {
        if (tag == 24) {
         parse_growrewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_growrewards())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_growrewards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_growrewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorGrowRewardUpdateNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorGrowRewardUpdateNtf)
  return false;
#undef DO_
}

void TutorGrowRewardUpdateNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorGrowRewardUpdateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GROW_REWARD_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 growrewards = 3;
  for (int i = 0; i < this->growrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->growrewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorGrowRewardUpdateNtf)
}

::google::protobuf::uint8* TutorGrowRewardUpdateNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorGrowRewardUpdateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GROW_REWARD_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 growrewards = 3;
  for (int i = 0; i < this->growrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->growrewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorGrowRewardUpdateNtf)
  return target;
}

int TutorGrowRewardUpdateNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GROW_REWARD_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint64 growrewards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->growrewards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->growrewards(i));
    }
    total_size += 1 * this->growrewards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorGrowRewardUpdateNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorGrowRewardUpdateNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorGrowRewardUpdateNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorGrowRewardUpdateNtf::MergeFrom(const TutorGrowRewardUpdateNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  growrewards_.MergeFrom(from.growrewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorGrowRewardUpdateNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorGrowRewardUpdateNtf::CopyFrom(const TutorGrowRewardUpdateNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorGrowRewardUpdateNtf::IsInitialized() const {

  return true;
}

void TutorGrowRewardUpdateNtf::Swap(TutorGrowRewardUpdateNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    growrewards_.Swap(&other->growrewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorGrowRewardUpdateNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorGrowRewardUpdateNtf_descriptor_;
  metadata.reflection = TutorGrowRewardUpdateNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorGetGrowRewardCmd::kCmdFieldNumber;
const int TutorGetGrowRewardCmd::kParamFieldNumber;
#endif  // !_MSC_VER

TutorGetGrowRewardCmd::TutorGetGrowRewardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorGetGrowRewardCmd)
}

void TutorGetGrowRewardCmd::InitAsDefaultInstance() {
}

TutorGetGrowRewardCmd::TutorGetGrowRewardCmd(const TutorGetGrowRewardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorGetGrowRewardCmd)
}

void TutorGetGrowRewardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 31;
  param_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorGetGrowRewardCmd::~TutorGetGrowRewardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TutorGetGrowRewardCmd)
  SharedDtor();
}

void TutorGetGrowRewardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorGetGrowRewardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorGetGrowRewardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorGetGrowRewardCmd_descriptor_;
}

const TutorGetGrowRewardCmd& TutorGetGrowRewardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tutor_2eproto();
  return *default_instance_;
}

TutorGetGrowRewardCmd* TutorGetGrowRewardCmd::default_instance_ = NULL;

TutorGetGrowRewardCmd* TutorGetGrowRewardCmd::New() const {
  return new TutorGetGrowRewardCmd;
}

void TutorGetGrowRewardCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 31;
    param_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorGetGrowRewardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorGetGrowRewardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GET_GROW_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TutorParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TutorParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorGetGrowRewardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorGetGrowRewardCmd)
  return false;
#undef DO_
}

void TutorGetGrowRewardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorGetGrowRewardCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GET_GROW_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorGetGrowRewardCmd)
}

::google::protobuf::uint8* TutorGetGrowRewardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorGetGrowRewardCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GET_GROW_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorGetGrowRewardCmd)
  return target;
}

int TutorGetGrowRewardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TUTOR_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TutorParam param = 2 [default = TUTORPARAM_GET_GROW_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorGetGrowRewardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorGetGrowRewardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorGetGrowRewardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorGetGrowRewardCmd::MergeFrom(const TutorGetGrowRewardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorGetGrowRewardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorGetGrowRewardCmd::CopyFrom(const TutorGetGrowRewardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorGetGrowRewardCmd::IsInitialized() const {

  return true;
}

void TutorGetGrowRewardCmd::Swap(TutorGetGrowRewardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorGetGrowRewardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorGetGrowRewardCmd_descriptor_;
  metadata.reflection = TutorGetGrowRewardCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
