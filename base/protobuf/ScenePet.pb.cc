// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScenePet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ScenePet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* PetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponPetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponPetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FireCatPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FireCatPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* HireCatPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HireCatPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EggHatchPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EggHatchPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EggRestorePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EggRestorePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatchValuePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchValuePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatchResultPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchResultPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatchPetPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchPetPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatchPetGiftPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchPetGiftPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetMemberData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetMemberData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetInfoPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetInfoPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetInfoUpdatePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetInfoUpdatePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetOffPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetOffPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGiftPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGiftPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipOperPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipOperPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipUpdatePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipUpdatePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAdventureStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAdventureStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEfficiencyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEfficiencyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetMonsterRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetMonsterRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAdventureItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAdventureItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPetAdventureListPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPetAdventureListPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAdventureResultNtfPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAdventureResultNtfPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartAdventurePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartAdventurePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAdventureRewardPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAdventureRewardPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBattlePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBattlePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandPetPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandPetPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveGiftPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveGiftPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockNtfPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockNtfPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetSkillPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetSkillPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNamePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNamePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchSkillPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchSkillPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkManual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkManual_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkPetExtra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkPetExtra_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkDayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkDayReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockPetWorkManualPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPetWorkManualPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartWorkPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartWorkPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopWorkPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopWorkPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPetWorkManualPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPetWorkManualPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPetWorkDataPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPetWorkDataPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPetWorkRewardPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPetWorkRewardPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkSpaceUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkSpaceUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetExtraUpdatePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetExtraUpdatePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComposePetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComposePetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecPetEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecPetEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEquipUnlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEquipUnlockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEquipListCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEquipListCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePetEquipListCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePetEquipListCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetWearInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetWearInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeWearPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeWearPetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateWearPetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateWearPetCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PetParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEmployType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPetDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPetEquipOper_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPetAdventureStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPetEfficiencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWorkState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ScenePet_2eproto() {
  protobuf_AddDesc_ScenePet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ScenePet.proto");
  GOOGLE_CHECK(file != NULL);
  PetData_descriptor_ = file->message_type(0);
  static const int PetData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, id_),
  };
  PetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetData_descriptor_,
      PetData::default_instance_,
      PetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetData));
  PetList_descriptor_ = file->message_type(1);
  static const int PetList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, datas_),
  };
  PetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetList_descriptor_,
      PetList::default_instance_,
      PetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetList));
  WeaponPetData_descriptor_ = file->message_type(2);
  static const int WeaponPetData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, relivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, blive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, bactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, handstatus_),
  };
  WeaponPetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponPetData_descriptor_,
      WeaponPetData::default_instance_,
      WeaponPetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponPetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponPetData));
  FireCatPetCmd_descriptor_ = file->message_type(3);
  static const int FireCatPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireCatPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireCatPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireCatPetCmd, catid_),
  };
  FireCatPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FireCatPetCmd_descriptor_,
      FireCatPetCmd::default_instance_,
      FireCatPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireCatPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireCatPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FireCatPetCmd));
  HireCatPetCmd_descriptor_ = file->message_type(4);
  static const int HireCatPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireCatPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireCatPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireCatPetCmd, catid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireCatPetCmd, etype_),
  };
  HireCatPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HireCatPetCmd_descriptor_,
      HireCatPetCmd::default_instance_,
      HireCatPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireCatPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireCatPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HireCatPetCmd));
  EggHatchPetCmd_descriptor_ = file->message_type(5);
  static const int EggHatchPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggHatchPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggHatchPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggHatchPetCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggHatchPetCmd, guid_),
  };
  EggHatchPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EggHatchPetCmd_descriptor_,
      EggHatchPetCmd::default_instance_,
      EggHatchPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggHatchPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggHatchPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EggHatchPetCmd));
  EggRestorePetCmd_descriptor_ = file->message_type(6);
  static const int EggRestorePetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggRestorePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggRestorePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggRestorePetCmd, petid_),
  };
  EggRestorePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EggRestorePetCmd_descriptor_,
      EggRestorePetCmd::default_instance_,
      EggRestorePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggRestorePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggRestorePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EggRestorePetCmd));
  CatchValuePetCmd_descriptor_ = file->message_type(7);
  static const int CatchValuePetCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchValuePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchValuePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchValuePetCmd, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchValuePetCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchValuePetCmd, from_npcid_),
  };
  CatchValuePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatchValuePetCmd_descriptor_,
      CatchValuePetCmd::default_instance_,
      CatchValuePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchValuePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchValuePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatchValuePetCmd));
  CatchResultPetCmd_descriptor_ = file->message_type(8);
  static const int CatchResultPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchResultPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchResultPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchResultPetCmd, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchResultPetCmd, npcguid_),
  };
  CatchResultPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatchResultPetCmd_descriptor_,
      CatchResultPetCmd::default_instance_,
      CatchResultPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchResultPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchResultPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatchResultPetCmd));
  UserPetData_descriptor_ = file->message_type(9);
  static const int UserPetData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPetData, basedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPetData, inhand_),
  };
  UserPetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPetData_descriptor_,
      UserPetData::default_instance_,
      UserPetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPetData));
  CatchPetPetCmd_descriptor_ = file->message_type(10);
  static const int CatchPetPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetPetCmd, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetPetCmd, isstop_),
  };
  CatchPetPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatchPetPetCmd_descriptor_,
      CatchPetPetCmd::default_instance_,
      CatchPetPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatchPetPetCmd));
  CatchPetGiftPetCmd_descriptor_ = file->message_type(11);
  static const int CatchPetGiftPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetGiftPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetGiftPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetGiftPetCmd, npcguid_),
  };
  CatchPetGiftPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatchPetGiftPetCmd_descriptor_,
      CatchPetGiftPetCmd::default_instance_,
      CatchPetGiftPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetGiftPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchPetGiftPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatchPetGiftPetCmd));
  PetMemberData_descriptor_ = file->message_type(12);
  static const int PetMemberData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMemberData, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMemberData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMemberData, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMemberData, data_),
  };
  PetMemberData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetMemberData_descriptor_,
      PetMemberData::default_instance_,
      PetMemberData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMemberData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMemberData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetMemberData));
  PetInfo_descriptor_ = file->message_type(13);
  static const int PetInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, friendexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, rewardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, friendlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, relivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, time_happly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, time_excite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, time_happiness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, unlock_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, unlock_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, skilloff_),
  };
  PetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetInfo_descriptor_,
      PetInfo::default_instance_,
      PetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetInfo));
  PetInfoPetCmd_descriptor_ = file->message_type(14);
  static const int PetInfoPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoPetCmd, petinfo_),
  };
  PetInfoPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetInfoPetCmd_descriptor_,
      PetInfoPetCmd::default_instance_,
      PetInfoPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetInfoPetCmd));
  PetInfoUpdatePetCmd_descriptor_ = file->message_type(15);
  static const int PetInfoUpdatePetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoUpdatePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoUpdatePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoUpdatePetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoUpdatePetCmd, datas_),
  };
  PetInfoUpdatePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetInfoUpdatePetCmd_descriptor_,
      PetInfoUpdatePetCmd::default_instance_,
      PetInfoUpdatePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoUpdatePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfoUpdatePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetInfoUpdatePetCmd));
  PetOffPetCmd_descriptor_ = file->message_type(16);
  static const int PetOffPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetOffPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetOffPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetOffPetCmd, petid_),
  };
  PetOffPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetOffPetCmd_descriptor_,
      PetOffPetCmd::default_instance_,
      PetOffPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetOffPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetOffPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetOffPetCmd));
  GetGiftPetCmd_descriptor_ = file->message_type(17);
  static const int GetGiftPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGiftPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGiftPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGiftPetCmd, petid_),
  };
  GetGiftPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGiftPetCmd_descriptor_,
      GetGiftPetCmd::default_instance_,
      GetGiftPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGiftPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGiftPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGiftPetCmd));
  EquipOperPetCmd_descriptor_ = file->message_type(18);
  static const int EquipOperPetCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipOperPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipOperPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipOperPetCmd, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipOperPetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipOperPetCmd, guid_),
  };
  EquipOperPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipOperPetCmd_descriptor_,
      EquipOperPetCmd::default_instance_,
      EquipOperPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipOperPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipOperPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipOperPetCmd));
  EquipUpdatePetCmd_descriptor_ = file->message_type(19);
  static const int EquipUpdatePetCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdatePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdatePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdatePetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdatePetCmd, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdatePetCmd, del_),
  };
  EquipUpdatePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipUpdatePetCmd_descriptor_,
      EquipUpdatePetCmd::default_instance_,
      EquipUpdatePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdatePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdatePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipUpdatePetCmd));
  PetAdventureStep_descriptor_ = file->message_type(20);
  static const int PetAdventureStep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureStep, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureStep, items_),
  };
  PetAdventureStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAdventureStep_descriptor_,
      PetAdventureStep::default_instance_,
      PetAdventureStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAdventureStep));
  PetEfficiencyInfo_descriptor_ = file->message_type(21);
  static const int PetEfficiencyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEfficiencyInfo, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEfficiencyInfo, fvalue_),
  };
  PetEfficiencyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEfficiencyInfo_descriptor_,
      PetEfficiencyInfo::default_instance_,
      PetEfficiencyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEfficiencyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEfficiencyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEfficiencyInfo));
  PetMonsterRewardInfo_descriptor_ = file->message_type(22);
  static const int PetMonsterRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMonsterRewardInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMonsterRewardInfo, items_),
  };
  PetMonsterRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetMonsterRewardInfo_descriptor_,
      PetMonsterRewardInfo::default_instance_,
      PetMonsterRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMonsterRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetMonsterRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetMonsterRewardInfo));
  PetAdventureItem_descriptor_ = file->message_type(23);
  static const int PetAdventureItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, eggs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, raresreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, specid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, eff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, extrarewardinfo_),
  };
  PetAdventureItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAdventureItem_descriptor_,
      PetAdventureItem::default_instance_,
      PetAdventureItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAdventureItem));
  QueryPetAdventureListPetCmd_descriptor_ = file->message_type(24);
  static const int QueryPetAdventureListPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetAdventureListPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetAdventureListPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetAdventureListPetCmd, items_),
  };
  QueryPetAdventureListPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPetAdventureListPetCmd_descriptor_,
      QueryPetAdventureListPetCmd::default_instance_,
      QueryPetAdventureListPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetAdventureListPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetAdventureListPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPetAdventureListPetCmd));
  PetAdventureResultNtfPetCmd_descriptor_ = file->message_type(25);
  static const int PetAdventureResultNtfPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureResultNtfPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureResultNtfPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureResultNtfPetCmd, item_),
  };
  PetAdventureResultNtfPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAdventureResultNtfPetCmd_descriptor_,
      PetAdventureResultNtfPetCmd::default_instance_,
      PetAdventureResultNtfPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureResultNtfPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureResultNtfPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAdventureResultNtfPetCmd));
  StartAdventurePetCmd_descriptor_ = file->message_type(26);
  static const int StartAdventurePetCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAdventurePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAdventurePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAdventurePetCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAdventurePetCmd, petids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAdventurePetCmd, specid_),
  };
  StartAdventurePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartAdventurePetCmd_descriptor_,
      StartAdventurePetCmd::default_instance_,
      StartAdventurePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAdventurePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAdventurePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartAdventurePetCmd));
  GetAdventureRewardPetCmd_descriptor_ = file->message_type(27);
  static const int GetAdventureRewardPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdventureRewardPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdventureRewardPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdventureRewardPetCmd, id_),
  };
  GetAdventureRewardPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAdventureRewardPetCmd_descriptor_,
      GetAdventureRewardPetCmd::default_instance_,
      GetAdventureRewardPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdventureRewardPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdventureRewardPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAdventureRewardPetCmd));
  QueryBattlePetCmd_descriptor_ = file->message_type(28);
  static const int QueryBattlePetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattlePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattlePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattlePetCmd, pets_),
  };
  QueryBattlePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBattlePetCmd_descriptor_,
      QueryBattlePetCmd::default_instance_,
      QueryBattlePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattlePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBattlePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBattlePetCmd));
  HandPetPetCmd_descriptor_ = file->message_type(29);
  static const int HandPetPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandPetPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandPetPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandPetPetCmd, petguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandPetPetCmd, breakup_),
  };
  HandPetPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandPetPetCmd_descriptor_,
      HandPetPetCmd::default_instance_,
      HandPetPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandPetPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandPetPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandPetPetCmd));
  GiveGiftPetCmd_descriptor_ = file->message_type(30);
  static const int GiveGiftPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveGiftPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveGiftPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveGiftPetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveGiftPetCmd, itemguid_),
  };
  GiveGiftPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiveGiftPetCmd_descriptor_,
      GiveGiftPetCmd::default_instance_,
      GiveGiftPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveGiftPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveGiftPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiveGiftPetCmd));
  UnlockNtfPetCmd_descriptor_ = file->message_type(31);
  static const int UnlockNtfPetCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockNtfPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockNtfPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockNtfPetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockNtfPetCmd, equipids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockNtfPetCmd, bodys_),
  };
  UnlockNtfPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockNtfPetCmd_descriptor_,
      UnlockNtfPetCmd::default_instance_,
      UnlockNtfPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockNtfPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockNtfPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockNtfPetCmd));
  ResetSkillPetCmd_descriptor_ = file->message_type(32);
  static const int ResetSkillPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkillPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkillPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkillPetCmd, id_),
  };
  ResetSkillPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetSkillPetCmd_descriptor_,
      ResetSkillPetCmd::default_instance_,
      ResetSkillPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkillPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetSkillPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetSkillPetCmd));
  ChangeNamePetCmd_descriptor_ = file->message_type(33);
  static const int ChangeNamePetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNamePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNamePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNamePetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNamePetCmd, name_),
  };
  ChangeNamePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNamePetCmd_descriptor_,
      ChangeNamePetCmd::default_instance_,
      ChangeNamePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNamePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNamePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNamePetCmd));
  SwitchSkillPetCmd_descriptor_ = file->message_type(34);
  static const int SwitchSkillPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchSkillPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchSkillPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchSkillPetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchSkillPetCmd, open_),
  };
  SwitchSkillPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchSkillPetCmd_descriptor_,
      SwitchSkillPetCmd::default_instance_,
      SwitchSkillPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchSkillPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchSkillPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchSkillPetCmd));
  WorkSpace_descriptor_ = file->message_type(35);
  static const int WorkSpace_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, lastrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, last_counts_),
  };
  WorkSpace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkSpace_descriptor_,
      WorkSpace::default_instance_,
      WorkSpace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkSpace));
  WorkManual_descriptor_ = file->message_type(36);
  static const int WorkManual_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkManual, unlock_),
  };
  WorkManual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkManual_descriptor_,
      WorkManual::default_instance_,
      WorkManual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkManual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkManual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkManual));
  WorkPetExtra_descriptor_ = file->message_type(37);
  static const int WorkPetExtra_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkPetExtra, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkPetExtra, lastspaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkPetExtra, count_),
  };
  WorkPetExtra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkPetExtra_descriptor_,
      WorkPetExtra::default_instance_,
      WorkPetExtra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkPetExtra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkPetExtra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkPetExtra));
  WorkDayReward_descriptor_ = file->message_type(38);
  static const int WorkDayReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDayReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDayReward, time_),
  };
  WorkDayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkDayReward_descriptor_,
      WorkDayReward::default_instance_,
      WorkDayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkDayReward));
  UnlockPetWorkManualPetCmd_descriptor_ = file->message_type(39);
  static const int UnlockPetWorkManualPetCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetWorkManualPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetWorkManualPetCmd, param_),
  };
  UnlockPetWorkManualPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPetWorkManualPetCmd_descriptor_,
      UnlockPetWorkManualPetCmd::default_instance_,
      UnlockPetWorkManualPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetWorkManualPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetWorkManualPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPetWorkManualPetCmd));
  StartWorkPetCmd_descriptor_ = file->message_type(40);
  static const int StartWorkPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWorkPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWorkPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWorkPetCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWorkPetCmd, pets_),
  };
  StartWorkPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartWorkPetCmd_descriptor_,
      StartWorkPetCmd::default_instance_,
      StartWorkPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWorkPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWorkPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartWorkPetCmd));
  StopWorkPetCmd_descriptor_ = file->message_type(41);
  static const int StopWorkPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWorkPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWorkPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWorkPetCmd, id_),
  };
  StopWorkPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopWorkPetCmd_descriptor_,
      StopWorkPetCmd::default_instance_,
      StopWorkPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWorkPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWorkPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopWorkPetCmd));
  QueryPetWorkManualPetCmd_descriptor_ = file->message_type(42);
  static const int QueryPetWorkManualPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkManualPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkManualPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkManualPetCmd, manual_),
  };
  QueryPetWorkManualPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPetWorkManualPetCmd_descriptor_,
      QueryPetWorkManualPetCmd::default_instance_,
      QueryPetWorkManualPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkManualPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkManualPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPetWorkManualPetCmd));
  QueryPetWorkDataPetCmd_descriptor_ = file->message_type(43);
  static const int QueryPetWorkDataPetCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, extras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, max_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, card_expiretime_),
  };
  QueryPetWorkDataPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPetWorkDataPetCmd_descriptor_,
      QueryPetWorkDataPetCmd::default_instance_,
      QueryPetWorkDataPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPetWorkDataPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPetWorkDataPetCmd));
  GetPetWorkRewardPetCmd_descriptor_ = file->message_type(44);
  static const int GetPetWorkRewardPetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPetWorkRewardPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPetWorkRewardPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPetWorkRewardPetCmd, id_),
  };
  GetPetWorkRewardPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPetWorkRewardPetCmd_descriptor_,
      GetPetWorkRewardPetCmd::default_instance_,
      GetPetWorkRewardPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPetWorkRewardPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPetWorkRewardPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPetWorkRewardPetCmd));
  WorkSpaceUpdate_descriptor_ = file->message_type(45);
  static const int WorkSpaceUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpaceUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpaceUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpaceUpdate, updates_),
  };
  WorkSpaceUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkSpaceUpdate_descriptor_,
      WorkSpaceUpdate::default_instance_,
      WorkSpaceUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpaceUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkSpaceUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkSpaceUpdate));
  PetExtraUpdatePetCmd_descriptor_ = file->message_type(46);
  static const int PetExtraUpdatePetCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetExtraUpdatePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetExtraUpdatePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetExtraUpdatePetCmd, updates_),
  };
  PetExtraUpdatePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetExtraUpdatePetCmd_descriptor_,
      PetExtraUpdatePetCmd::default_instance_,
      PetExtraUpdatePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetExtraUpdatePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetExtraUpdatePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetExtraUpdatePetCmd));
  ComposePetCmd_descriptor_ = file->message_type(47);
  static const int ComposePetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposePetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposePetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposePetCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposePetCmd, eggguids_),
  };
  ComposePetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComposePetCmd_descriptor_,
      ComposePetCmd::default_instance_,
      ComposePetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposePetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComposePetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComposePetCmd));
  SpecPetEquip_descriptor_ = file->message_type(48);
  static const int SpecPetEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecPetEquip, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecPetEquip, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecPetEquip, epos_),
  };
  SpecPetEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecPetEquip_descriptor_,
      SpecPetEquip::default_instance_,
      SpecPetEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecPetEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecPetEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecPetEquip));
  PetEquipUnlockInfo_descriptor_ = file->message_type(49);
  static const int PetEquipUnlockInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipUnlockInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipUnlockInfo, bodyitems_),
  };
  PetEquipUnlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEquipUnlockInfo_descriptor_,
      PetEquipUnlockInfo::default_instance_,
      PetEquipUnlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipUnlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipUnlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEquipUnlockInfo));
  PetEquipListCmd_descriptor_ = file->message_type(50);
  static const int PetEquipListCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipListCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipListCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipListCmd, unlockinfo_),
  };
  PetEquipListCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEquipListCmd_descriptor_,
      PetEquipListCmd::default_instance_,
      PetEquipListCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipListCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEquipListCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEquipListCmd));
  UpdatePetEquipListCmd_descriptor_ = file->message_type(51);
  static const int UpdatePetEquipListCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePetEquipListCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePetEquipListCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePetEquipListCmd, additems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePetEquipListCmd, addbodyitems_),
  };
  UpdatePetEquipListCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePetEquipListCmd_descriptor_,
      UpdatePetEquipListCmd::default_instance_,
      UpdatePetEquipListCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePetEquipListCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePetEquipListCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePetEquipListCmd));
  PetWearInfo_descriptor_ = file->message_type(52);
  static const int PetWearInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearInfo, epos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearInfo, oper_),
  };
  PetWearInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetWearInfo_descriptor_,
      PetWearInfo::default_instance_,
      PetWearInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetWearInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetWearInfo));
  ChangeWearPetCmd_descriptor_ = file->message_type(53);
  static const int ChangeWearPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWearPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWearPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWearPetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWearPetCmd, wearinfo_),
  };
  ChangeWearPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeWearPetCmd_descriptor_,
      ChangeWearPetCmd::default_instance_,
      ChangeWearPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWearPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWearPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeWearPetCmd));
  UpdateWearPetCmd_descriptor_ = file->message_type(54);
  static const int UpdateWearPetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWearPetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWearPetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWearPetCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWearPetCmd, wearinfo_),
  };
  UpdateWearPetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateWearPetCmd_descriptor_,
      UpdateWearPetCmd::default_instance_,
      UpdateWearPetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWearPetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWearPetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateWearPetCmd));
  PetParam_descriptor_ = file->enum_type(0);
  EEmployType_descriptor_ = file->enum_type(1);
  EPetDataType_descriptor_ = file->enum_type(2);
  EPetEquipOper_descriptor_ = file->enum_type(3);
  EPetAdventureStatus_descriptor_ = file->enum_type(4);
  EPetEfficiencyType_descriptor_ = file->enum_type(5);
  EWorkState_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ScenePet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetData_descriptor_, &PetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetList_descriptor_, &PetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponPetData_descriptor_, &WeaponPetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FireCatPetCmd_descriptor_, &FireCatPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HireCatPetCmd_descriptor_, &HireCatPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EggHatchPetCmd_descriptor_, &EggHatchPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EggRestorePetCmd_descriptor_, &EggRestorePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatchValuePetCmd_descriptor_, &CatchValuePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatchResultPetCmd_descriptor_, &CatchResultPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPetData_descriptor_, &UserPetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatchPetPetCmd_descriptor_, &CatchPetPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatchPetGiftPetCmd_descriptor_, &CatchPetGiftPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetMemberData_descriptor_, &PetMemberData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetInfo_descriptor_, &PetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetInfoPetCmd_descriptor_, &PetInfoPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetInfoUpdatePetCmd_descriptor_, &PetInfoUpdatePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetOffPetCmd_descriptor_, &PetOffPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGiftPetCmd_descriptor_, &GetGiftPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipOperPetCmd_descriptor_, &EquipOperPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipUpdatePetCmd_descriptor_, &EquipUpdatePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAdventureStep_descriptor_, &PetAdventureStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEfficiencyInfo_descriptor_, &PetEfficiencyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetMonsterRewardInfo_descriptor_, &PetMonsterRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAdventureItem_descriptor_, &PetAdventureItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPetAdventureListPetCmd_descriptor_, &QueryPetAdventureListPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAdventureResultNtfPetCmd_descriptor_, &PetAdventureResultNtfPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartAdventurePetCmd_descriptor_, &StartAdventurePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAdventureRewardPetCmd_descriptor_, &GetAdventureRewardPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBattlePetCmd_descriptor_, &QueryBattlePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandPetPetCmd_descriptor_, &HandPetPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiveGiftPetCmd_descriptor_, &GiveGiftPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockNtfPetCmd_descriptor_, &UnlockNtfPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetSkillPetCmd_descriptor_, &ResetSkillPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNamePetCmd_descriptor_, &ChangeNamePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchSkillPetCmd_descriptor_, &SwitchSkillPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkSpace_descriptor_, &WorkSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkManual_descriptor_, &WorkManual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkPetExtra_descriptor_, &WorkPetExtra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkDayReward_descriptor_, &WorkDayReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPetWorkManualPetCmd_descriptor_, &UnlockPetWorkManualPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartWorkPetCmd_descriptor_, &StartWorkPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopWorkPetCmd_descriptor_, &StopWorkPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPetWorkManualPetCmd_descriptor_, &QueryPetWorkManualPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPetWorkDataPetCmd_descriptor_, &QueryPetWorkDataPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPetWorkRewardPetCmd_descriptor_, &GetPetWorkRewardPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkSpaceUpdate_descriptor_, &WorkSpaceUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetExtraUpdatePetCmd_descriptor_, &PetExtraUpdatePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComposePetCmd_descriptor_, &ComposePetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecPetEquip_descriptor_, &SpecPetEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEquipUnlockInfo_descriptor_, &PetEquipUnlockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEquipListCmd_descriptor_, &PetEquipListCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePetEquipListCmd_descriptor_, &UpdatePetEquipListCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetWearInfo_descriptor_, &PetWearInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeWearPetCmd_descriptor_, &ChangeWearPetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateWearPetCmd_descriptor_, &UpdateWearPetCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ScenePet_2eproto() {
  delete PetData::default_instance_;
  delete PetData_reflection_;
  delete PetList::default_instance_;
  delete PetList_reflection_;
  delete WeaponPetData::default_instance_;
  delete WeaponPetData_reflection_;
  delete FireCatPetCmd::default_instance_;
  delete FireCatPetCmd_reflection_;
  delete HireCatPetCmd::default_instance_;
  delete HireCatPetCmd_reflection_;
  delete EggHatchPetCmd::default_instance_;
  delete EggHatchPetCmd_reflection_;
  delete EggRestorePetCmd::default_instance_;
  delete EggRestorePetCmd_reflection_;
  delete CatchValuePetCmd::default_instance_;
  delete CatchValuePetCmd_reflection_;
  delete CatchResultPetCmd::default_instance_;
  delete CatchResultPetCmd_reflection_;
  delete UserPetData::default_instance_;
  delete UserPetData_reflection_;
  delete CatchPetPetCmd::default_instance_;
  delete CatchPetPetCmd_reflection_;
  delete CatchPetGiftPetCmd::default_instance_;
  delete CatchPetGiftPetCmd_reflection_;
  delete PetMemberData::default_instance_;
  delete PetMemberData_reflection_;
  delete PetInfo::default_instance_;
  delete PetInfo_reflection_;
  delete PetInfoPetCmd::default_instance_;
  delete PetInfoPetCmd_reflection_;
  delete PetInfoUpdatePetCmd::default_instance_;
  delete PetInfoUpdatePetCmd_reflection_;
  delete PetOffPetCmd::default_instance_;
  delete PetOffPetCmd_reflection_;
  delete GetGiftPetCmd::default_instance_;
  delete GetGiftPetCmd_reflection_;
  delete EquipOperPetCmd::default_instance_;
  delete EquipOperPetCmd_reflection_;
  delete EquipUpdatePetCmd::default_instance_;
  delete EquipUpdatePetCmd_reflection_;
  delete PetAdventureStep::default_instance_;
  delete PetAdventureStep_reflection_;
  delete PetEfficiencyInfo::default_instance_;
  delete PetEfficiencyInfo_reflection_;
  delete PetMonsterRewardInfo::default_instance_;
  delete PetMonsterRewardInfo_reflection_;
  delete PetAdventureItem::default_instance_;
  delete PetAdventureItem_reflection_;
  delete QueryPetAdventureListPetCmd::default_instance_;
  delete QueryPetAdventureListPetCmd_reflection_;
  delete PetAdventureResultNtfPetCmd::default_instance_;
  delete PetAdventureResultNtfPetCmd_reflection_;
  delete StartAdventurePetCmd::default_instance_;
  delete StartAdventurePetCmd_reflection_;
  delete GetAdventureRewardPetCmd::default_instance_;
  delete GetAdventureRewardPetCmd_reflection_;
  delete QueryBattlePetCmd::default_instance_;
  delete QueryBattlePetCmd_reflection_;
  delete HandPetPetCmd::default_instance_;
  delete HandPetPetCmd_reflection_;
  delete GiveGiftPetCmd::default_instance_;
  delete GiveGiftPetCmd_reflection_;
  delete UnlockNtfPetCmd::default_instance_;
  delete UnlockNtfPetCmd_reflection_;
  delete ResetSkillPetCmd::default_instance_;
  delete ResetSkillPetCmd_reflection_;
  delete ChangeNamePetCmd::default_instance_;
  delete ChangeNamePetCmd_reflection_;
  delete SwitchSkillPetCmd::default_instance_;
  delete SwitchSkillPetCmd_reflection_;
  delete WorkSpace::default_instance_;
  delete WorkSpace_reflection_;
  delete WorkManual::default_instance_;
  delete WorkManual_reflection_;
  delete WorkPetExtra::default_instance_;
  delete WorkPetExtra_reflection_;
  delete WorkDayReward::default_instance_;
  delete WorkDayReward_reflection_;
  delete UnlockPetWorkManualPetCmd::default_instance_;
  delete UnlockPetWorkManualPetCmd_reflection_;
  delete StartWorkPetCmd::default_instance_;
  delete StartWorkPetCmd_reflection_;
  delete StopWorkPetCmd::default_instance_;
  delete StopWorkPetCmd_reflection_;
  delete QueryPetWorkManualPetCmd::default_instance_;
  delete QueryPetWorkManualPetCmd_reflection_;
  delete QueryPetWorkDataPetCmd::default_instance_;
  delete QueryPetWorkDataPetCmd_reflection_;
  delete GetPetWorkRewardPetCmd::default_instance_;
  delete GetPetWorkRewardPetCmd_reflection_;
  delete WorkSpaceUpdate::default_instance_;
  delete WorkSpaceUpdate_reflection_;
  delete PetExtraUpdatePetCmd::default_instance_;
  delete PetExtraUpdatePetCmd_reflection_;
  delete ComposePetCmd::default_instance_;
  delete ComposePetCmd_reflection_;
  delete SpecPetEquip::default_instance_;
  delete SpecPetEquip_reflection_;
  delete PetEquipUnlockInfo::default_instance_;
  delete PetEquipUnlockInfo_reflection_;
  delete PetEquipListCmd::default_instance_;
  delete PetEquipListCmd_reflection_;
  delete UpdatePetEquipListCmd::default_instance_;
  delete UpdatePetEquipListCmd_reflection_;
  delete PetWearInfo::default_instance_;
  delete PetWearInfo_reflection_;
  delete ChangeWearPetCmd::default_instance_;
  delete ChangeWearPetCmd_reflection_;
  delete UpdateWearPetCmd::default_instance_;
  delete UpdateWearPetCmd_reflection_;
}

void protobuf_AddDesc_ScenePet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ScenePet.proto\022\003Cmd\032\nxCmd.proto\032\017Scene"
    "Item.proto\"\030\n\007PetData\022\r\n\002id\030\001 \001(\r:\0010\"l\n\007"
    "PetList\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCEN"
    "E_USER_PET_PROTOCMD\022\020\n\005param\030\002 \001(\r:\0011\022\033\n"
    "\005datas\030\003 \003(\0132\014.Cmd.PetData\"\244\001\n\rWeaponPet"
    "Data\022\r\n\002id\030\001 \001(\r:\0010\022\r\n\002hp\030\002 \001(\r:\0010\022\025\n\nre"
    "livetime\030\003 \001(\r:\0010\022\025\n\nexpiretime\030\004 \001(\r:\0010"
    "\022\024\n\005blive\030\005 \001(\010:\005false\022\026\n\007bactive\030\006 \001(\010:"
    "\005false\022\031\n\nhandstatus\030\007 \001(\010:\005false\"\206\001\n\rFi"
    "reCatPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027"
    "SCENE_USER_PET_PROTOCMD\022/\n\005param\030\002 \001(\0162\r"
    ".Cmd.PetParam:\021PETPARAM_FIRE_CAT\022\020\n\005cati"
    "d\030\003 \001(\r:\0010\"\270\001\n\rHireCatPetCmd\0222\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\027SCENE_USER_PET_PROTOCMD"
    "\022/\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\021PETPARAM"
    "_HIRE_CAT\022\020\n\005catid\030\003 \001(\r:\0010\0220\n\005etype\030\004 \001"
    "(\0162\020.Cmd.EEmployType:\017EEMPLOYTYPE_DAY\"\222\001"
    "\n\016EggHatchPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\027SCENE_USER_PET_PROTOCMD\0220\n\005param\030\002 "
    "\001(\0162\r.Cmd.PetParam:\022PETPARAM_HATCH_EGG\022\014"
    "\n\004name\030\003 \001(\t\022\014\n\004guid\030\004 \001(\t\"\214\001\n\020EggRestor"
    "ePetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCEN"
    "E_USER_PET_PROTOCMD\0222\n\005param\030\002 \001(\0162\r.Cmd"
    ".PetParam:\024PETPARAM_RESTORE_EGG\022\020\n\005petid"
    "\030\003 \001(\r:\0010\"\271\001\n\020CatchValuePetCmd\0222\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PROTOC"
    "MD\0227\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\031PETPAR"
    "AM_CATCH_VALUE_SYNC\022\017\n\007npcguid\030\003 \002(\004\022\020\n\005"
    "value\030\004 \001(\r:\0010\022\025\n\nfrom_npcid\030\005 \001(\r:\0010\"\250\001"
    "\n\021CatchResultPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\027SCENE_USER_PET_PROTOCMD\0223\n\005param"
    "\030\002 \001(\0162\r.Cmd.PetParam:\025PETPARAM_CATCH_RE"
    "SULT\022\026\n\007success\030\003 \001(\010:\005false\022\022\n\007npcguid\030"
    "\004 \001(\004:\0010\"D\n\013UserPetData\022\036\n\010basedata\030\001 \001("
    "\0132\014.Cmd.EggData\022\025\n\006inhand\030\002 \001(\010:\005false\"\241"
    "\001\n\016CatchPetPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\027SCENE_USER_PET_PROTOCMD\0220\n\005param\030\002"
    " \001(\0162\r.Cmd.PetParam:\022PETPARAM_CATCH_PET\022"
    "\022\n\007npcguid\030\003 \001(\004:\0010\022\025\n\006isstop\030\004 \001(\010:\005fal"
    "se\"\217\001\n\022CatchPetGiftPetCmd\0222\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\027SCENE_USER_PET_PROTOCMD\0221\n"
    "\005param\030\002 \001(\0162\r.Cmd.PetParam:\023PETPARAM_CA"
    "TCH_GIFT\022\022\n\007npcguid\030\003 \001(\004:\0010\"o\n\rPetMembe"
    "rData\022.\n\005etype\030\001 \001(\0162\021.Cmd.EPetDataType:"
    "\014EPETDATA_MIN\022\020\n\005value\030\002 \001(\004:\0010\022\016\n\006value"
    "s\030\003 \003(\r\022\014\n\004data\030\004 \001(\t\"\375\002\n\007PetInfo\022\017\n\004gui"
    "d\030\001 \001(\004:\0010\022\016\n\003exp\030\002 \001(\004:\0010\022\024\n\tfriendexp\030"
    "\003 \001(\004:\0010\022\024\n\trewardexp\030\004 \001(\004:\0010\022\r\n\005petid\030"
    "\005 \002(\r\022\014\n\004name\030\006 \002(\t\022\r\n\002lv\030\007 \001(\r:\0010\022\023\n\010fr"
    "iendlv\030\010 \001(\r:\0010\022\025\n\nrelivetime\030\t \001(\r:\0010\022\017"
    "\n\004body\030\n \001(\r:\0010\022\026\n\013time_happly\030\013 \001(\r:\0010\022"
    "\026\n\013time_excite\030\014 \001(\r:\0010\022\031\n\016time_happines"
    "s\030\r \001(\r:\0010\022\024\n\014unlock_equip\030\016 \003(\r\022\023\n\013unlo"
    "ck_body\030\017 \003(\r\022\016\n\006skills\030\020 \003(\r\022\035\n\006equips\030"
    "\021 \003(\0132\r.Cmd.ItemData\022\027\n\010skilloff\030\022 \001(\010:\005"
    "false\"\222\001\n\rPetInfoPetCmd\0222\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\027SCENE_USER_PET_PROTOCMD\022.\n\005p"
    "aram\030\002 \001(\0162\r.Cmd.PetParam:\020PETPARAM_PETI"
    "NFO\022\035\n\007petinfo\030\003 \003(\0132\014.Cmd.PetInfo\"\262\001\n\023P"
    "etInfoUpdatePetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\027SCENE_USER_PET_PROTOCMD\0225\n\005param\030"
    "\002 \001(\0162\r.Cmd.PetParam:\027PETPARAM_PETINFO_U"
    "PDATE\022\r\n\005petid\030\003 \002(\r\022!\n\005datas\030\004 \003(\0132\022.Cm"
    "d.PetMemberData\"\201\001\n\014PetOffPetCmd\0222\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PROT"
    "OCMD\022.\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\020PETP"
    "ARAM_OFF_PET\022\r\n\005petid\030\003 \002(\r\"\206\001\n\rGetGiftP"
    "etCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_"
    "USER_PET_PROTOCMD\022/\n\005param\030\002 \001(\0162\r.Cmd.P"
    "etParam:\021PETPARAM_GET_GIFT\022\020\n\005petid\030\003 \001("
    "\r:\0010\"\315\001\n\017EquipOperPetCmd\0222\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\027SCENE_USER_PET_PROTOCMD\0221\n\005"
    "param\030\002 \001(\0162\r.Cmd.PetParam:\023PETPARAM_EQU"
    "IP_OPER\0223\n\004oper\030\003 \001(\0162\022.Cmd.EPetEquipOpe"
    "r:\021EPETEQUIPOPER_MIN\022\020\n\005petid\030\004 \001(\r:\0010\022\014"
    "\n\004guid\030\005 \001(\t\"\272\001\n\021EquipUpdatePetCmd\0222\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PR"
    "OTOCMD\0223\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\025PE"
    "TPARAM_EQUIP_UPDATE\022\020\n\005petid\030\003 \001(\r:\0010\022\035\n"
    "\006update\030\004 \001(\0132\r.Cmd.ItemData\022\013\n\003del\030\005 \001("
    "\t\"A\n\020PetAdventureStep\022\017\n\004step\030\001 \001(\r:\0010\022\034"
    "\n\005items\030\003 \003(\0132\r.Cmd.ItemData\"K\n\021PetEffic"
    "iencyInfo\022&\n\005etype\030\001 \002(\0162\027.Cmd.EPetEffic"
    "iencyType\022\016\n\006fvalue\030\002 \001(\r\"J\n\024PetMonsterR"
    "ewardInfo\022\024\n\tmonsterid\030\001 \001(\r:\0010\022\034\n\005items"
    "\030\002 \003(\0132\r.Cmd.ItemData\"\360\002\n\020PetAdventureIt"
    "em\022\r\n\002id\030\001 \001(\r:\0010\022\024\n\tstarttime\030\002 \001(\r:\0010\022"
    "A\n\006status\030\003 \001(\0162\030.Cmd.EPetAdventureStatu"
    "s:\027EPETADVENTURESTATUS_MIN\022\033\n\004eggs\030\004 \003(\013"
    "2\r.Cmd.ItemData\022$\n\005steps\030\005 \003(\0132\025.Cmd.Pet"
    "AdventureStep\022\"\n\013raresreward\030\006 \003(\0132\r.Cmd"
    ".ItemData\022\021\n\006specid\030\007 \001(\r:\0010\022#\n\003eff\030\010 \003("
    "\0132\026.Cmd.PetEfficiencyInfo\022-\n\nrewardinfo\030"
    "\t \003(\0132\031.Cmd.PetMonsterRewardInfo\022&\n\017extr"
    "arewardinfo\030\n \003(\0132\r.Cmd.ItemData\"\263\001\n\033Que"
    "ryPetAdventureListPetCmd\0222\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\027SCENE_USER_PET_PROTOCMD\022:\n\005"
    "param\030\002 \001(\0162\r.Cmd.PetParam:\034PETPARAM_ADV"
    "ENTURE_QUERYLIST\022$\n\005items\030\003 \003(\0132\025.Cmd.Pe"
    "tAdventureItem\"\262\001\n\033PetAdventureResultNtf"
    "PetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE"
    "_USER_PET_PROTOCMD\022:\n\005param\030\002 \001(\0162\r.Cmd."
    "PetParam:\034PETPARAM_ADVENTURE_RESULTNTF\022#"
    "\n\004item\030\003 \001(\0132\025.Cmd.PetAdventureItem\"\264\001\n\024"
    "StartAdventurePetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\027SCENE_USER_PET_PROTOCMD\0226\n\005para"
    "m\030\002 \001(\0162\r.Cmd.PetParam:\030PETPARAM_ADVENTU"
    "RE_START\022\r\n\002id\030\003 \001(\r:\0010\022\016\n\006petids\030\004 \003(\t\022"
    "\021\n\006specid\030\005 \001(\r:\0010\"\231\001\n\030GetAdventureRewar"
    "dPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCEN"
    "E_USER_PET_PROTOCMD\022:\n\005param\030\002 \001(\0162\r.Cmd"
    ".PetParam:\034PETPARAM_ADVENTURE_GETREWARD\022"
    "\r\n\002id\030\003 \001(\r:\0010\"\245\001\n\021QueryBattlePetCmd\0222\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_"
    "PROTOCMD\022\?\n\005param\030\002 \001(\0162\r.Cmd.PetParam:!"
    "PETPARAM_ADVENTURE_QUERYBATTLEPET\022\033\n\004pet"
    "s\030\003 \003(\0132\r.Cmd.ItemData\"\240\001\n\rHandPetPetCmd"
    "\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_"
    "PET_PROTOCMD\0222\n\005param\030\002 \001(\0162\r.Cmd.PetPar"
    "am:\024PETPARAM_INVITE_HAND\022\017\n\007petguid\030\003 \002("
    "\004\022\026\n\007breakup\030\004 \001(\010:\005false\"\227\001\n\016GiveGiftPe"
    "tCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_U"
    "SER_PET_PROTOCMD\0220\n\005param\030\002 \001(\0162\r.Cmd.Pe"
    "tParam:\022PETPARAM_GIVE_GIFT\022\r\n\005petid\030\003 \002("
    "\r\022\020\n\010itemguid\030\004 \001(\t\"\253\001\n\017UnlockNtfPetCmd\022"
    "2\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_P"
    "ET_PROTOCMD\0221\n\005param\030\002 \001(\0162\r.Cmd.PetPara"
    "m:\023PETPARAM_UNLOCK_NTF\022\020\n\005petid\030\003 \001(\r:\0010"
    "\022\020\n\010equipids\030\004 \003(\r\022\r\n\005bodys\030\005 \003(\r\"\211\001\n\020Re"
    "setSkillPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\027SCENE_USER_PET_PROTOCMD\0222\n\005param\030\002 \001("
    "\0162\r.Cmd.PetParam:\024PETPARAM_RESET_SKILL\022\r"
    "\n\002id\030\003 \001(\r:\0010\"\232\001\n\020ChangeNamePetCmd\0222\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PR"
    "OTOCMD\0222\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\024PE"
    "TPARAM_CHANGE_NAME\022\020\n\005petid\030\003 \001(\r:\0010\022\014\n\004"
    "name\030\004 \001(\t\"\243\001\n\021SwitchSkillPetCmd\0222\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PROT"
    "OCMD\0223\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\025PETP"
    "ARAM_SWITCH_SKILL\022\020\n\005petid\030\003 \001(\r:\0010\022\023\n\004o"
    "pen\030\004 \001(\010:\005false\"\325\001\n\tWorkSpace\022\r\n\002id\030\001 \001"
    "(\r:\0010\022\024\n\tstarttime\030\002 \001(\r:\0010\022\031\n\016lastrewar"
    "dtime\030\007 \001(\r:\0010\022\025\n\006unlock\030\003 \001(\010:\005false\022.\n"
    "\005state\030\004 \001(\0162\017.Cmd.EWorkState:\016EWORKSTAT"
    "E_MIN\022\034\n\005datas\030\005 \003(\0132\r.Cmd.ItemData\022\016\n\006c"
    "ounts\030\006 \003(\r\022\023\n\013last_counts\030\010 \003(\r\"#\n\nWork"
    "Manual\022\025\n\006unlock\030\001 \001(\010:\005false\"F\n\014WorkPet"
    "Extra\022\014\n\004guid\030\001 \001(\t\022\026\n\013lastspaceid\030\002 \001(\r"
    ":\0010\022\020\n\005count\030\003 \001(\r:\0010\"/\n\rWorkDayReward\022\r"
    "\n\002id\030\001 \001(\r:\0010\022\017\n\004time\030\002 \001(\r:\0010\"\211\001\n\031Unloc"
    "kPetWorkManualPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\027SCENE_USER_PET_PROTOCMD\0228\n\005para"
    "m\030\002 \001(\0162\r.Cmd.PetParam:\032PETPARAM_WORK_UN"
    "LOCKMANUAL\"\231\001\n\017StartWorkPetCmd\0222\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PROTOC"
    "MD\0225\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\027PETPAR"
    "AM_WORK_STARTWORK\022\r\n\002id\030\003 \001(\r:\0010\022\014\n\004pets"
    "\030\004 \003(\t\"\211\001\n\016StopWorkPetCmd\0222\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\027SCENE_USER_PET_PROTOCMD\0224\n"
    "\005param\030\002 \001(\0162\r.Cmd.PetParam:\026PETPARAM_WO"
    "RK_STOPWORK\022\r\n\002id\030\003 \001(\r:\0010\"\254\001\n\030QueryPetW"
    "orkManualPetCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\027SCENE_USER_PET_PROTOCMD\022;\n\005param\030\002 \001"
    "(\0162\r.Cmd.PetParam:\035PETPARAM_WORK_QUERYWO"
    "RKMANUAL\022\037\n\006manual\030\003 \001(\0132\017.Cmd.WorkManua"
    "l\"\373\001\n\026QueryPetWorkDataPetCmd\0222\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\027SCENE_USER_PET_PROTOCMD"
    "\0229\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\033PETPARAM"
    "_WORK_QUERYWORKDATA\022\035\n\005datas\030\003 \003(\0132\016.Cmd"
    ".WorkSpace\022!\n\006extras\030\004 \003(\0132\021.Cmd.WorkPet"
    "Extra\022\024\n\tmax_space\030\005 \001(\r:\0010\022\032\n\017card_expi"
    "retime\030\006 \001(\r:\0010\"\222\001\n\026GetPetWorkRewardPetC"
    "md\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USE"
    "R_PET_PROTOCMD\0225\n\005param\030\002 \001(\0162\r.Cmd.PetP"
    "aram:\027PETPARAM_WORK_GETREWARD\022\r\n\002id\030\003 \001("
    "\r:\0010\"\237\001\n\017WorkSpaceUpdate\0222\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\027SCENE_USER_PET_PROTOCMD\0227\n\005"
    "param\030\002 \001(\0162\r.Cmd.PetParam:\031PETPARAM_WOR"
    "K_SPACEUPDATE\022\037\n\007updates\030\003 \003(\0132\016.Cmd.Wor"
    "kSpace\"\247\001\n\024PetExtraUpdatePetCmd\0222\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PROTO"
    "CMD\0227\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\031PETPA"
    "RAM_WORK_EXTRAUPDATE\022\"\n\007updates\030\003 \003(\0132\021."
    "Cmd.WorkPetExtra\"\221\001\n\rComposePetCmd\0222\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PR"
    "OTOCMD\022.\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\020PE"
    "TPARAM_COMPOSE\022\n\n\002id\030\003 \002(\r\022\020\n\010eggguids\030\004"
    " \003(\t\"[\n\014SpecPetEquip\022\016\n\006bodyid\030\001 \002(\r\022\016\n\006"
    "itemid\030\002 \002(\r\022+\n\004epos\030\003 \001(\0162\016.Cmd.EEquipP"
    "os:\rEEQUIPPOS_MIN\"I\n\022PetEquipUnlockInfo\022"
    "\r\n\005items\030\001 \003(\r\022$\n\tbodyitems\030\002 \003(\0132\021.Cmd."
    "SpecPetEquip\"\245\001\n\017PetEquipListCmd\0222\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_PET_PROT"
    "OCMD\0221\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\023PETP"
    "ARAM_EQUIP_LIST\022+\n\nunlockinfo\030\003 \001(\0132\027.Cm"
    "d.PetEquipUnlockInfo\"\300\001\n\025UpdatePetEquipL"
    "istCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE"
    "_USER_PET_PROTOCMD\0228\n\005param\030\002 \001(\0162\r.Cmd."
    "PetParam:\032PETPARAM_EQUIP_LIST_UPDATE\022\020\n\010"
    "additems\030\003 \003(\r\022\'\n\014addbodyitems\030\004 \003(\0132\021.C"
    "md.SpecPetEquip\"o\n\013PetWearInfo\022\034\n\004epos\030\004"
    " \002(\0162\016.Cmd.EEquipPos\022\016\n\006itemid\030\005 \001(\r\0222\n\004"
    "oper\030\006 \001(\0162\022.Cmd.EPetEquipOper:\020EPETEQUI"
    "POPER_ON\"\255\001\n\020ChangeWearPetCmd\0222\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\027SCENE_USER_PET_PROTOCM"
    "D\0222\n\005param\030\002 \001(\0162\r.Cmd.PetParam:\024PETPARA"
    "M_CHANGE_WEAR\022\r\n\005petid\030\003 \002(\r\022\"\n\010wearinfo"
    "\030\004 \003(\0132\020.Cmd.PetWearInfo\"\255\001\n\020UpdateWearP"
    "etCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_"
    "USER_PET_PROTOCMD\0222\n\005param\030\002 \001(\0162\r.Cmd.P"
    "etParam:\024PETPARAM_UPDATE_WEAR\022\r\n\005petid\030\003"
    " \002(\r\022\"\n\010wearinfo\030\004 \003(\0132\020.Cmd.PetWearInfo"
    "*\333\010\n\010PetParam\022\024\n\020PETPARAM_PETLIST\020\001\022\025\n\021P"
    "ETPARAM_FIRE_CAT\020\002\022\025\n\021PETPARAM_HIRE_CAT\020"
    "\003\022\026\n\022PETPARAM_HATCH_EGG\020\004\022\030\n\024PETPARAM_RE"
    "STORE_EGG\020\005\022\035\n\031PETPARAM_CATCH_VALUE_SYNC"
    "\020\006\022\031\n\025PETPARAM_CATCH_RESULT\020\007\022\026\n\022PETPARA"
    "M_CATCH_PET\020\010\022\024\n\020PETPARAM_PETINFO\020\t\022\033\n\027P"
    "ETPARAM_PETINFO_UPDATE\020\n\022\024\n\020PETPARAM_OFF"
    "_PET\020\013\022\027\n\023PETPARAM_CATCH_GIFT\020\014\022\025\n\021PETPA"
    "RAM_GET_GIFT\020\r\022\027\n\023PETPARAM_EQUIP_OPER\020\016\022"
    "\031\n\025PETPARAM_EQUIP_UPDATE\020\017\022 \n\034PETPARAM_A"
    "DVENTURE_QUERYLIST\020\020\022 \n\034PETPARAM_ADVENTU"
    "RE_RESULTNTF\020\021\022\034\n\030PETPARAM_ADVENTURE_STA"
    "RT\020\022\022 \n\034PETPARAM_ADVENTURE_GETREWARD\020\023\022%"
    "\n!PETPARAM_ADVENTURE_QUERYBATTLEPET\020\024\022\030\n"
    "\024PETPARAM_INVITE_HAND\020\025\022\026\n\022PETPARAM_GIVE"
    "_GIFT\020\026\022\027\n\023PETPARAM_UNLOCK_NTF\020\027\022\030\n\024PETP"
    "ARAM_RESET_SKILL\020\030\022\032\n\026PETPARAM_QUERY_GOT"
    "ITEM\020\031\022\030\n\024PETPARAM_CHANGE_NAME\020\032\022\031\n\025PETP"
    "ARAM_SWITCH_SKILL\020\033\022\036\n\032PETPARAM_WORK_UNL"
    "OCKMANUAL\020\034\022\033\n\027PETPARAM_WORK_STARTWORK\020\035"
    "\022\032\n\026PETPARAM_WORK_STOPWORK\020\036\022!\n\035PETPARAM"
    "_WORK_QUERYWORKMANUAL\020\037\022\037\n\033PETPARAM_WORK"
    "_QUERYWORKDATA\020 \022\033\n\027PETPARAM_WORK_GETREW"
    "ARD\020!\022\035\n\031PETPARAM_WORK_SPACEUPDATE\020\"\022\035\n\031"
    "PETPARAM_WORK_EXTRAUPDATE\020#\022\024\n\020PETPARAM_"
    "COMPOSE\020$\022\027\n\023PETPARAM_EQUIP_LIST\020%\022\036\n\032PE"
    "TPARAM_EQUIP_LIST_UPDATE\020&\022\030\n\024PETPARAM_C"
    "HANGE_WEAR\020\'\022\030\n\024PETPARAM_UPDATE_WEAR\020(*b"
    "\n\013EEmployType\022\023\n\017EEMPLOYTYPE_MIN\020\000\022\023\n\017EE"
    "MPLOYTYPE_DAY\020\001\022\024\n\020EEMPLOYTYPE_WEEK\020\002\022\023\n"
    "\017EEMPLOYTYPE_MAX\020\003*\331\003\n\014EPetDataType\022\020\n\014E"
    "PETDATA_MIN\020\000\022\017\n\013EPETDATA_LV\020\001\022\020\n\014EPETDA"
    "TA_EXP\020\002\022\025\n\021EPETDATA_FRIENDLV\020\003\022\026\n\022EPETD"
    "ATA_FRIENDEXP\020\004\022\026\n\022EPETDATA_REWARDEXP\020\005\022"
    "\027\n\023EPETDATA_RELIVETIME\020\006\022\030\n\024EPETDATA_TIM"
    "E_HAPPLY\020\007\022\030\n\024EPETDATA_TIME_EXCITE\020\010\022\033\n\027"
    "EPETDATA_TIME_HAPPINESS\020\t\022\027\n\023EPETDATA_TO"
    "UCH_TICK\020\n\022\030\n\024EPETDATA_TOUCH_COUNT\020\r\022\026\n\022"
    "EPETDATA_FEED_TICK\020\013\022\027\n\023EPETDATA_FEED_CO"
    "UNT\020\014\022\031\n\025EPETDATA_REWARD_COUNT\020\021\022\021\n\rEPET"
    "DATA_BODY\020\022\022\022\n\016EPETDATA_SKILL\020\023\022\021\n\rEPETD"
    "ATA_NAME\020\024\022\030\n\024EPETDATA_SKILLSWITCH\020\025\022\020\n\014"
    "EPETDATA_MAX\020\026*\234\001\n\rEPetEquipOper\022\025\n\021EPET"
    "EQUIPOPER_MIN\020\000\022\024\n\020EPETEQUIPOPER_ON\020\001\022\025\n"
    "\021EPETEQUIPOPER_OFF\020\002\022\026\n\022EPETEQUIPOPER_BO"
    "DY\020\003\022\030\n\024EPETEQUIPOPER_DELETE\020\004\022\025\n\021EPETEQ"
    "UIPOPER_MAX\020\005*\324\001\n\023EPetAdventureStatus\022\033\n"
    "\027EPETADVENTURESTATUS_MIN\020\000\022!\n\035EPETADVENT"
    "URESTATUS_CANACCEPT\020\001\022\036\n\032EPETADVENTUREST"
    "ATUS_ACCEPT\020\002\022 \n\034EPETADVENTURESTATUS_COM"
    "PLETE\020\003\022\036\n\032EPETADVENTURESTATUS_SUBMIT\020\004\022"
    "\033\n\027EPETADVENTURESTATUS_MAX\020\005*\344\001\n\022EPetEff"
    "iciencyType\022\026\n\022EPETEFFICIENCY_MIN\020\000\022\031\n\025E"
    "PETEFFICIENCY_REFINE\020\001\022\032\n\026EPETEFFICIENCY"
    "_ENCHANT\020\002\022\027\n\023EPETEFFICIENCY_STAR\020\003\022\030\n\024E"
    "PETEFFICIENCY_TITLE\020\004\022\033\n\027EPETEFFICIENCY_"
    "HEADWEAR\020\005\022\027\n\023EPETEFFICIENCY_CARD\020\006\022\026\n\022E"
    "PETEFFICIENCY_MAX\020\007*x\n\nEWorkState\022\022\n\016EWO"
    "RKSTATE_MIN\020\000\022\025\n\021EWORKSTATE_UNUSED\020\001\022\026\n\022"
    "EWORKSTATE_WORKING\020\002\022\023\n\017EWORKSTATE_REST\020"
    "\003\022\022\n\016EWORKSTATE_MAX\020\004", 10901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ScenePet.proto", &protobuf_RegisterTypes);
  PetData::default_instance_ = new PetData();
  PetList::default_instance_ = new PetList();
  WeaponPetData::default_instance_ = new WeaponPetData();
  FireCatPetCmd::default_instance_ = new FireCatPetCmd();
  HireCatPetCmd::default_instance_ = new HireCatPetCmd();
  EggHatchPetCmd::default_instance_ = new EggHatchPetCmd();
  EggRestorePetCmd::default_instance_ = new EggRestorePetCmd();
  CatchValuePetCmd::default_instance_ = new CatchValuePetCmd();
  CatchResultPetCmd::default_instance_ = new CatchResultPetCmd();
  UserPetData::default_instance_ = new UserPetData();
  CatchPetPetCmd::default_instance_ = new CatchPetPetCmd();
  CatchPetGiftPetCmd::default_instance_ = new CatchPetGiftPetCmd();
  PetMemberData::default_instance_ = new PetMemberData();
  PetInfo::default_instance_ = new PetInfo();
  PetInfoPetCmd::default_instance_ = new PetInfoPetCmd();
  PetInfoUpdatePetCmd::default_instance_ = new PetInfoUpdatePetCmd();
  PetOffPetCmd::default_instance_ = new PetOffPetCmd();
  GetGiftPetCmd::default_instance_ = new GetGiftPetCmd();
  EquipOperPetCmd::default_instance_ = new EquipOperPetCmd();
  EquipUpdatePetCmd::default_instance_ = new EquipUpdatePetCmd();
  PetAdventureStep::default_instance_ = new PetAdventureStep();
  PetEfficiencyInfo::default_instance_ = new PetEfficiencyInfo();
  PetMonsterRewardInfo::default_instance_ = new PetMonsterRewardInfo();
  PetAdventureItem::default_instance_ = new PetAdventureItem();
  QueryPetAdventureListPetCmd::default_instance_ = new QueryPetAdventureListPetCmd();
  PetAdventureResultNtfPetCmd::default_instance_ = new PetAdventureResultNtfPetCmd();
  StartAdventurePetCmd::default_instance_ = new StartAdventurePetCmd();
  GetAdventureRewardPetCmd::default_instance_ = new GetAdventureRewardPetCmd();
  QueryBattlePetCmd::default_instance_ = new QueryBattlePetCmd();
  HandPetPetCmd::default_instance_ = new HandPetPetCmd();
  GiveGiftPetCmd::default_instance_ = new GiveGiftPetCmd();
  UnlockNtfPetCmd::default_instance_ = new UnlockNtfPetCmd();
  ResetSkillPetCmd::default_instance_ = new ResetSkillPetCmd();
  ChangeNamePetCmd::default_instance_ = new ChangeNamePetCmd();
  SwitchSkillPetCmd::default_instance_ = new SwitchSkillPetCmd();
  WorkSpace::default_instance_ = new WorkSpace();
  WorkManual::default_instance_ = new WorkManual();
  WorkPetExtra::default_instance_ = new WorkPetExtra();
  WorkDayReward::default_instance_ = new WorkDayReward();
  UnlockPetWorkManualPetCmd::default_instance_ = new UnlockPetWorkManualPetCmd();
  StartWorkPetCmd::default_instance_ = new StartWorkPetCmd();
  StopWorkPetCmd::default_instance_ = new StopWorkPetCmd();
  QueryPetWorkManualPetCmd::default_instance_ = new QueryPetWorkManualPetCmd();
  QueryPetWorkDataPetCmd::default_instance_ = new QueryPetWorkDataPetCmd();
  GetPetWorkRewardPetCmd::default_instance_ = new GetPetWorkRewardPetCmd();
  WorkSpaceUpdate::default_instance_ = new WorkSpaceUpdate();
  PetExtraUpdatePetCmd::default_instance_ = new PetExtraUpdatePetCmd();
  ComposePetCmd::default_instance_ = new ComposePetCmd();
  SpecPetEquip::default_instance_ = new SpecPetEquip();
  PetEquipUnlockInfo::default_instance_ = new PetEquipUnlockInfo();
  PetEquipListCmd::default_instance_ = new PetEquipListCmd();
  UpdatePetEquipListCmd::default_instance_ = new UpdatePetEquipListCmd();
  PetWearInfo::default_instance_ = new PetWearInfo();
  ChangeWearPetCmd::default_instance_ = new ChangeWearPetCmd();
  UpdateWearPetCmd::default_instance_ = new UpdateWearPetCmd();
  PetData::default_instance_->InitAsDefaultInstance();
  PetList::default_instance_->InitAsDefaultInstance();
  WeaponPetData::default_instance_->InitAsDefaultInstance();
  FireCatPetCmd::default_instance_->InitAsDefaultInstance();
  HireCatPetCmd::default_instance_->InitAsDefaultInstance();
  EggHatchPetCmd::default_instance_->InitAsDefaultInstance();
  EggRestorePetCmd::default_instance_->InitAsDefaultInstance();
  CatchValuePetCmd::default_instance_->InitAsDefaultInstance();
  CatchResultPetCmd::default_instance_->InitAsDefaultInstance();
  UserPetData::default_instance_->InitAsDefaultInstance();
  CatchPetPetCmd::default_instance_->InitAsDefaultInstance();
  CatchPetGiftPetCmd::default_instance_->InitAsDefaultInstance();
  PetMemberData::default_instance_->InitAsDefaultInstance();
  PetInfo::default_instance_->InitAsDefaultInstance();
  PetInfoPetCmd::default_instance_->InitAsDefaultInstance();
  PetInfoUpdatePetCmd::default_instance_->InitAsDefaultInstance();
  PetOffPetCmd::default_instance_->InitAsDefaultInstance();
  GetGiftPetCmd::default_instance_->InitAsDefaultInstance();
  EquipOperPetCmd::default_instance_->InitAsDefaultInstance();
  EquipUpdatePetCmd::default_instance_->InitAsDefaultInstance();
  PetAdventureStep::default_instance_->InitAsDefaultInstance();
  PetEfficiencyInfo::default_instance_->InitAsDefaultInstance();
  PetMonsterRewardInfo::default_instance_->InitAsDefaultInstance();
  PetAdventureItem::default_instance_->InitAsDefaultInstance();
  QueryPetAdventureListPetCmd::default_instance_->InitAsDefaultInstance();
  PetAdventureResultNtfPetCmd::default_instance_->InitAsDefaultInstance();
  StartAdventurePetCmd::default_instance_->InitAsDefaultInstance();
  GetAdventureRewardPetCmd::default_instance_->InitAsDefaultInstance();
  QueryBattlePetCmd::default_instance_->InitAsDefaultInstance();
  HandPetPetCmd::default_instance_->InitAsDefaultInstance();
  GiveGiftPetCmd::default_instance_->InitAsDefaultInstance();
  UnlockNtfPetCmd::default_instance_->InitAsDefaultInstance();
  ResetSkillPetCmd::default_instance_->InitAsDefaultInstance();
  ChangeNamePetCmd::default_instance_->InitAsDefaultInstance();
  SwitchSkillPetCmd::default_instance_->InitAsDefaultInstance();
  WorkSpace::default_instance_->InitAsDefaultInstance();
  WorkManual::default_instance_->InitAsDefaultInstance();
  WorkPetExtra::default_instance_->InitAsDefaultInstance();
  WorkDayReward::default_instance_->InitAsDefaultInstance();
  UnlockPetWorkManualPetCmd::default_instance_->InitAsDefaultInstance();
  StartWorkPetCmd::default_instance_->InitAsDefaultInstance();
  StopWorkPetCmd::default_instance_->InitAsDefaultInstance();
  QueryPetWorkManualPetCmd::default_instance_->InitAsDefaultInstance();
  QueryPetWorkDataPetCmd::default_instance_->InitAsDefaultInstance();
  GetPetWorkRewardPetCmd::default_instance_->InitAsDefaultInstance();
  WorkSpaceUpdate::default_instance_->InitAsDefaultInstance();
  PetExtraUpdatePetCmd::default_instance_->InitAsDefaultInstance();
  ComposePetCmd::default_instance_->InitAsDefaultInstance();
  SpecPetEquip::default_instance_->InitAsDefaultInstance();
  PetEquipUnlockInfo::default_instance_->InitAsDefaultInstance();
  PetEquipListCmd::default_instance_->InitAsDefaultInstance();
  UpdatePetEquipListCmd::default_instance_->InitAsDefaultInstance();
  PetWearInfo::default_instance_->InitAsDefaultInstance();
  ChangeWearPetCmd::default_instance_->InitAsDefaultInstance();
  UpdateWearPetCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ScenePet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ScenePet_2eproto {
  StaticDescriptorInitializer_ScenePet_2eproto() {
    protobuf_AddDesc_ScenePet_2eproto();
  }
} static_descriptor_initializer_ScenePet_2eproto_;
const ::google::protobuf::EnumDescriptor* PetParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetParam_descriptor_;
}
bool PetParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEmployType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEmployType_descriptor_;
}
bool EEmployType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPetDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPetDataType_descriptor_;
}
bool EPetDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPetEquipOper_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPetEquipOper_descriptor_;
}
bool EPetEquipOper_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPetAdventureStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPetAdventureStatus_descriptor_;
}
bool EPetAdventureStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPetEfficiencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPetEfficiencyType_descriptor_;
}
bool EPetEfficiencyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWorkState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWorkState_descriptor_;
}
bool EWorkState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PetData::kIdFieldNumber;
#endif  // !_MSC_VER

PetData::PetData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetData)
}

void PetData::InitAsDefaultInstance() {
}

PetData::PetData(const PetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetData)
}

void PetData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetData::~PetData() {
  // @@protoc_insertion_point(destructor:Cmd.PetData)
  SharedDtor();
}

void PetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetData_descriptor_;
}

const PetData& PetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetData* PetData::default_instance_ = NULL;

PetData* PetData::New() const {
  return new PetData;
}

void PetData::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetData)
  return false;
#undef DO_
}

void PetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetData)
}

::google::protobuf::uint8* PetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetData)
  return target;
}

int PetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetData::MergeFrom(const PetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetData::CopyFrom(const PetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetData::IsInitialized() const {

  return true;
}

void PetData::Swap(PetData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetData_descriptor_;
  metadata.reflection = PetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetList::kCmdFieldNumber;
const int PetList::kParamFieldNumber;
const int PetList::kDatasFieldNumber;
#endif  // !_MSC_VER

PetList::PetList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetList)
}

void PetList::InitAsDefaultInstance() {
}

PetList::PetList(const PetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetList)
}

void PetList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetList::~PetList() {
  // @@protoc_insertion_point(destructor:Cmd.PetList)
  SharedDtor();
}

void PetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetList_descriptor_;
}

const PetList& PetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetList* PetList::default_instance_ = NULL;

PetList* PetList::New() const {
  return new PetList;
}

void PetList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 1u;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.PetData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetList)
  return false;
#undef DO_
}

void PetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint32 param = 2 [default = 1];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // repeated .Cmd.PetData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetList)
}

::google::protobuf::uint8* PetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint32 param = 2 [default = 1];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // repeated .Cmd.PetData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetList)
  return target;
}

int PetList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 param = 2 [default = 1];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  // repeated .Cmd.PetData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetList::MergeFrom(const PetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetList::CopyFrom(const PetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetList::IsInitialized() const {

  return true;
}

void PetList::Swap(PetList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetList_descriptor_;
  metadata.reflection = PetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponPetData::kIdFieldNumber;
const int WeaponPetData::kHpFieldNumber;
const int WeaponPetData::kRelivetimeFieldNumber;
const int WeaponPetData::kExpiretimeFieldNumber;
const int WeaponPetData::kBliveFieldNumber;
const int WeaponPetData::kBactiveFieldNumber;
const int WeaponPetData::kHandstatusFieldNumber;
#endif  // !_MSC_VER

WeaponPetData::WeaponPetData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeaponPetData)
}

void WeaponPetData::InitAsDefaultInstance() {
}

WeaponPetData::WeaponPetData(const WeaponPetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeaponPetData)
}

void WeaponPetData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  hp_ = 0u;
  relivetime_ = 0u;
  expiretime_ = 0u;
  blive_ = false;
  bactive_ = false;
  handstatus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponPetData::~WeaponPetData() {
  // @@protoc_insertion_point(destructor:Cmd.WeaponPetData)
  SharedDtor();
}

void WeaponPetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponPetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponPetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponPetData_descriptor_;
}

const WeaponPetData& WeaponPetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

WeaponPetData* WeaponPetData::default_instance_ = NULL;

WeaponPetData* WeaponPetData::New() const {
  return new WeaponPetData;
}

void WeaponPetData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeaponPetData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, handstatus_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponPetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeaponPetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_relivetime;
        break;
      }

      // optional uint32 relivetime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_relivetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blive;
        break;
      }

      // optional bool blive = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_blive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blive_)));
          set_has_blive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bactive;
        break;
      }

      // optional bool bactive = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_bactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bactive_)));
          set_has_bactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_handstatus;
        break;
      }

      // optional bool handstatus = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_handstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handstatus_)));
          set_has_handstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeaponPetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeaponPetData)
  return false;
#undef DO_
}

void WeaponPetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeaponPetData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 hp = 2 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

  // optional uint32 relivetime = 3 [default = 0];
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relivetime(), output);
  }

  // optional uint32 expiretime = 4 [default = 0];
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expiretime(), output);
  }

  // optional bool blive = 5 [default = false];
  if (has_blive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blive(), output);
  }

  // optional bool bactive = 6 [default = false];
  if (has_bactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bactive(), output);
  }

  // optional bool handstatus = 7 [default = false];
  if (has_handstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->handstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeaponPetData)
}

::google::protobuf::uint8* WeaponPetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeaponPetData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 hp = 2 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }

  // optional uint32 relivetime = 3 [default = 0];
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relivetime(), target);
  }

  // optional uint32 expiretime = 4 [default = 0];
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expiretime(), target);
  }

  // optional bool blive = 5 [default = false];
  if (has_blive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blive(), target);
  }

  // optional bool bactive = 6 [default = false];
  if (has_bactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bactive(), target);
  }

  // optional bool handstatus = 7 [default = false];
  if (has_handstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->handstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeaponPetData)
  return target;
}

int WeaponPetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 hp = 2 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 relivetime = 3 [default = 0];
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivetime());
    }

    // optional uint32 expiretime = 4 [default = 0];
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

    // optional bool blive = 5 [default = false];
    if (has_blive()) {
      total_size += 1 + 1;
    }

    // optional bool bactive = 6 [default = false];
    if (has_bactive()) {
      total_size += 1 + 1;
    }

    // optional bool handstatus = 7 [default = false];
    if (has_handstatus()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponPetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponPetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponPetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponPetData::MergeFrom(const WeaponPetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_blive()) {
      set_blive(from.blive());
    }
    if (from.has_bactive()) {
      set_bactive(from.bactive());
    }
    if (from.has_handstatus()) {
      set_handstatus(from.handstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponPetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponPetData::CopyFrom(const WeaponPetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponPetData::IsInitialized() const {

  return true;
}

void WeaponPetData::Swap(WeaponPetData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hp_, other->hp_);
    std::swap(relivetime_, other->relivetime_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(blive_, other->blive_);
    std::swap(bactive_, other->bactive_);
    std::swap(handstatus_, other->handstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponPetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponPetData_descriptor_;
  metadata.reflection = WeaponPetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FireCatPetCmd::kCmdFieldNumber;
const int FireCatPetCmd::kParamFieldNumber;
const int FireCatPetCmd::kCatidFieldNumber;
#endif  // !_MSC_VER

FireCatPetCmd::FireCatPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FireCatPetCmd)
}

void FireCatPetCmd::InitAsDefaultInstance() {
}

FireCatPetCmd::FireCatPetCmd(const FireCatPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FireCatPetCmd)
}

void FireCatPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 2;
  catid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FireCatPetCmd::~FireCatPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FireCatPetCmd)
  SharedDtor();
}

void FireCatPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FireCatPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FireCatPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FireCatPetCmd_descriptor_;
}

const FireCatPetCmd& FireCatPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

FireCatPetCmd* FireCatPetCmd::default_instance_ = NULL;

FireCatPetCmd* FireCatPetCmd::New() const {
  return new FireCatPetCmd;
}

void FireCatPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 2;
    catid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FireCatPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FireCatPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_FIRE_CAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_catid;
        break;
      }

      // optional uint32 catid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FireCatPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FireCatPetCmd)
  return false;
#undef DO_
}

void FireCatPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FireCatPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_FIRE_CAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 catid = 3 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->catid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FireCatPetCmd)
}

::google::protobuf::uint8* FireCatPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FireCatPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_FIRE_CAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 catid = 3 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->catid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FireCatPetCmd)
  return target;
}

int FireCatPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_FIRE_CAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 catid = 3 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FireCatPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FireCatPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FireCatPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FireCatPetCmd::MergeFrom(const FireCatPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FireCatPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireCatPetCmd::CopyFrom(const FireCatPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireCatPetCmd::IsInitialized() const {

  return true;
}

void FireCatPetCmd::Swap(FireCatPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(catid_, other->catid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FireCatPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FireCatPetCmd_descriptor_;
  metadata.reflection = FireCatPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HireCatPetCmd::kCmdFieldNumber;
const int HireCatPetCmd::kParamFieldNumber;
const int HireCatPetCmd::kCatidFieldNumber;
const int HireCatPetCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

HireCatPetCmd::HireCatPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HireCatPetCmd)
}

void HireCatPetCmd::InitAsDefaultInstance() {
}

HireCatPetCmd::HireCatPetCmd(const HireCatPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HireCatPetCmd)
}

void HireCatPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 3;
  catid_ = 0u;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HireCatPetCmd::~HireCatPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HireCatPetCmd)
  SharedDtor();
}

void HireCatPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HireCatPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HireCatPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HireCatPetCmd_descriptor_;
}

const HireCatPetCmd& HireCatPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

HireCatPetCmd* HireCatPetCmd::default_instance_ = NULL;

HireCatPetCmd* HireCatPetCmd::New() const {
  return new HireCatPetCmd;
}

void HireCatPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 10;
    param_ = 3;
    catid_ = 0u;
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HireCatPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HireCatPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_HIRE_CAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_catid;
        break;
      }

      // optional uint32 catid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_catid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catid_)));
          set_has_catid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.EEmployType etype = 4 [default = EEMPLOYTYPE_DAY];
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEmployType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EEmployType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HireCatPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HireCatPetCmd)
  return false;
#undef DO_
}

void HireCatPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HireCatPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_HIRE_CAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 catid = 3 [default = 0];
  if (has_catid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->catid(), output);
  }

  // optional .Cmd.EEmployType etype = 4 [default = EEMPLOYTYPE_DAY];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HireCatPetCmd)
}

::google::protobuf::uint8* HireCatPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HireCatPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_HIRE_CAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 catid = 3 [default = 0];
  if (has_catid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->catid(), target);
  }

  // optional .Cmd.EEmployType etype = 4 [default = EEMPLOYTYPE_DAY];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HireCatPetCmd)
  return target;
}

int HireCatPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_HIRE_CAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 catid = 3 [default = 0];
    if (has_catid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->catid());
    }

    // optional .Cmd.EEmployType etype = 4 [default = EEMPLOYTYPE_DAY];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HireCatPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HireCatPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HireCatPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HireCatPetCmd::MergeFrom(const HireCatPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_catid()) {
      set_catid(from.catid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HireCatPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HireCatPetCmd::CopyFrom(const HireCatPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HireCatPetCmd::IsInitialized() const {

  return true;
}

void HireCatPetCmd::Swap(HireCatPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(catid_, other->catid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HireCatPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HireCatPetCmd_descriptor_;
  metadata.reflection = HireCatPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EggHatchPetCmd::kCmdFieldNumber;
const int EggHatchPetCmd::kParamFieldNumber;
const int EggHatchPetCmd::kNameFieldNumber;
const int EggHatchPetCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

EggHatchPetCmd::EggHatchPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EggHatchPetCmd)
}

void EggHatchPetCmd::InitAsDefaultInstance() {
}

EggHatchPetCmd::EggHatchPetCmd(const EggHatchPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EggHatchPetCmd)
}

void EggHatchPetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 4;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EggHatchPetCmd::~EggHatchPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EggHatchPetCmd)
  SharedDtor();
}

void EggHatchPetCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EggHatchPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EggHatchPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EggHatchPetCmd_descriptor_;
}

const EggHatchPetCmd& EggHatchPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

EggHatchPetCmd* EggHatchPetCmd::default_instance_ = NULL;

EggHatchPetCmd* EggHatchPetCmd::New() const {
  return new EggHatchPetCmd;
}

void EggHatchPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 10;
    param_ = 4;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EggHatchPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EggHatchPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_HATCH_EGG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        break;
      }

      // optional string guid = 4;
      case 4: {
        if (tag == 34) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EggHatchPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EggHatchPetCmd)
  return false;
#undef DO_
}

void EggHatchPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EggHatchPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_HATCH_EGG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EggHatchPetCmd)
}

::google::protobuf::uint8* EggHatchPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EggHatchPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_HATCH_EGG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EggHatchPetCmd)
  return target;
}

int EggHatchPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_HATCH_EGG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EggHatchPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EggHatchPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EggHatchPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EggHatchPetCmd::MergeFrom(const EggHatchPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EggHatchPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggHatchPetCmd::CopyFrom(const EggHatchPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggHatchPetCmd::IsInitialized() const {

  return true;
}

void EggHatchPetCmd::Swap(EggHatchPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EggHatchPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EggHatchPetCmd_descriptor_;
  metadata.reflection = EggHatchPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EggRestorePetCmd::kCmdFieldNumber;
const int EggRestorePetCmd::kParamFieldNumber;
const int EggRestorePetCmd::kPetidFieldNumber;
#endif  // !_MSC_VER

EggRestorePetCmd::EggRestorePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EggRestorePetCmd)
}

void EggRestorePetCmd::InitAsDefaultInstance() {
}

EggRestorePetCmd::EggRestorePetCmd(const EggRestorePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EggRestorePetCmd)
}

void EggRestorePetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 5;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EggRestorePetCmd::~EggRestorePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EggRestorePetCmd)
  SharedDtor();
}

void EggRestorePetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EggRestorePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EggRestorePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EggRestorePetCmd_descriptor_;
}

const EggRestorePetCmd& EggRestorePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

EggRestorePetCmd* EggRestorePetCmd::default_instance_ = NULL;

EggRestorePetCmd* EggRestorePetCmd::New() const {
  return new EggRestorePetCmd;
}

void EggRestorePetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 5;
    petid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EggRestorePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EggRestorePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESTORE_EGG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional uint32 petid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EggRestorePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EggRestorePetCmd)
  return false;
#undef DO_
}

void EggRestorePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EggRestorePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESTORE_EGG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EggRestorePetCmd)
}

::google::protobuf::uint8* EggRestorePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EggRestorePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESTORE_EGG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EggRestorePetCmd)
  return target;
}

int EggRestorePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESTORE_EGG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 petid = 3 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EggRestorePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EggRestorePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EggRestorePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EggRestorePetCmd::MergeFrom(const EggRestorePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EggRestorePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggRestorePetCmd::CopyFrom(const EggRestorePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggRestorePetCmd::IsInitialized() const {

  return true;
}

void EggRestorePetCmd::Swap(EggRestorePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EggRestorePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EggRestorePetCmd_descriptor_;
  metadata.reflection = EggRestorePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatchValuePetCmd::kCmdFieldNumber;
const int CatchValuePetCmd::kParamFieldNumber;
const int CatchValuePetCmd::kNpcguidFieldNumber;
const int CatchValuePetCmd::kValueFieldNumber;
const int CatchValuePetCmd::kFromNpcidFieldNumber;
#endif  // !_MSC_VER

CatchValuePetCmd::CatchValuePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatchValuePetCmd)
}

void CatchValuePetCmd::InitAsDefaultInstance() {
}

CatchValuePetCmd::CatchValuePetCmd(const CatchValuePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatchValuePetCmd)
}

void CatchValuePetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 6;
  npcguid_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  from_npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatchValuePetCmd::~CatchValuePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatchValuePetCmd)
  SharedDtor();
}

void CatchValuePetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatchValuePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchValuePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchValuePetCmd_descriptor_;
}

const CatchValuePetCmd& CatchValuePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

CatchValuePetCmd* CatchValuePetCmd::default_instance_ = NULL;

CatchValuePetCmd* CatchValuePetCmd::New() const {
  return new CatchValuePetCmd;
}

void CatchValuePetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CatchValuePetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(npcguid_, from_npcid_);
    cmd_ = 10;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatchValuePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatchValuePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_VALUE_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // required uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint32 value = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_from_npcid;
        break;
      }

      // optional uint32 from_npcid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_from_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_npcid_)));
          set_has_from_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatchValuePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatchValuePetCmd)
  return false;
#undef DO_
}

void CatchValuePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatchValuePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_VALUE_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // optional uint32 value = 4 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // optional uint32 from_npcid = 5 [default = 0];
  if (has_from_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatchValuePetCmd)
}

::google::protobuf::uint8* CatchValuePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatchValuePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_VALUE_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // optional uint32 value = 4 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // optional uint32 from_npcid = 5 [default = 0];
  if (has_from_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from_npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatchValuePetCmd)
  return target;
}

int CatchValuePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_VALUE_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional uint32 value = 4 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 from_npcid = 5 [default = 0];
    if (has_from_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchValuePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatchValuePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatchValuePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatchValuePetCmd::MergeFrom(const CatchValuePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_from_npcid()) {
      set_from_npcid(from.from_npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatchValuePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchValuePetCmd::CopyFrom(const CatchValuePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchValuePetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void CatchValuePetCmd::Swap(CatchValuePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(value_, other->value_);
    std::swap(from_npcid_, other->from_npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatchValuePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchValuePetCmd_descriptor_;
  metadata.reflection = CatchValuePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatchResultPetCmd::kCmdFieldNumber;
const int CatchResultPetCmd::kParamFieldNumber;
const int CatchResultPetCmd::kSuccessFieldNumber;
const int CatchResultPetCmd::kNpcguidFieldNumber;
#endif  // !_MSC_VER

CatchResultPetCmd::CatchResultPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatchResultPetCmd)
}

void CatchResultPetCmd::InitAsDefaultInstance() {
}

CatchResultPetCmd::CatchResultPetCmd(const CatchResultPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatchResultPetCmd)
}

void CatchResultPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 7;
  success_ = false;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatchResultPetCmd::~CatchResultPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatchResultPetCmd)
  SharedDtor();
}

void CatchResultPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatchResultPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchResultPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchResultPetCmd_descriptor_;
}

const CatchResultPetCmd& CatchResultPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

CatchResultPetCmd* CatchResultPetCmd::default_instance_ = NULL;

CatchResultPetCmd* CatchResultPetCmd::New() const {
  return new CatchResultPetCmd;
}

void CatchResultPetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CatchResultPetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, success_);
    cmd_ = 10;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatchResultPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatchResultPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_RESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional bool success = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatchResultPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatchResultPetCmd)
  return false;
#undef DO_
}

void CatchResultPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatchResultPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_RESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool success = 3 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional uint64 npcguid = 4 [default = 0];
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatchResultPetCmd)
}

::google::protobuf::uint8* CatchResultPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatchResultPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_RESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool success = 3 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional uint64 npcguid = 4 [default = 0];
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatchResultPetCmd)
  return target;
}

int CatchResultPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_RESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool success = 3 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 npcguid = 4 [default = 0];
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchResultPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatchResultPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatchResultPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatchResultPetCmd::MergeFrom(const CatchResultPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatchResultPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchResultPetCmd::CopyFrom(const CatchResultPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchResultPetCmd::IsInitialized() const {

  return true;
}

void CatchResultPetCmd::Swap(CatchResultPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(success_, other->success_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatchResultPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchResultPetCmd_descriptor_;
  metadata.reflection = CatchResultPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPetData::kBasedataFieldNumber;
const int UserPetData::kInhandFieldNumber;
#endif  // !_MSC_VER

UserPetData::UserPetData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserPetData)
}

void UserPetData::InitAsDefaultInstance() {
  basedata_ = const_cast< ::Cmd::EggData*>(&::Cmd::EggData::default_instance());
}

UserPetData::UserPetData(const UserPetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserPetData)
}

void UserPetData::SharedCtor() {
  _cached_size_ = 0;
  basedata_ = NULL;
  inhand_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPetData::~UserPetData() {
  // @@protoc_insertion_point(destructor:Cmd.UserPetData)
  SharedDtor();
}

void UserPetData::SharedDtor() {
  if (this != default_instance_) {
    delete basedata_;
  }
}

void UserPetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPetData_descriptor_;
}

const UserPetData& UserPetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

UserPetData* UserPetData::default_instance_ = NULL;

UserPetData* UserPetData::New() const {
  return new UserPetData;
}

void UserPetData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_basedata()) {
      if (basedata_ != NULL) basedata_->::Cmd::EggData::Clear();
    }
    inhand_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserPetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EggData basedata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inhand;
        break;
      }

      // optional bool inhand = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_inhand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inhand_)));
          set_has_inhand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserPetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserPetData)
  return false;
#undef DO_
}

void UserPetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserPetData)
  // optional .Cmd.EggData basedata = 1;
  if (has_basedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basedata(), output);
  }

  // optional bool inhand = 2 [default = false];
  if (has_inhand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inhand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserPetData)
}

::google::protobuf::uint8* UserPetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserPetData)
  // optional .Cmd.EggData basedata = 1;
  if (has_basedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basedata(), target);
  }

  // optional bool inhand = 2 [default = false];
  if (has_inhand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->inhand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserPetData)
  return target;
}

int UserPetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EggData basedata = 1;
    if (has_basedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedata());
    }

    // optional bool inhand = 2 [default = false];
    if (has_inhand()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPetData::MergeFrom(const UserPetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basedata()) {
      mutable_basedata()->::Cmd::EggData::MergeFrom(from.basedata());
    }
    if (from.has_inhand()) {
      set_inhand(from.inhand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPetData::CopyFrom(const UserPetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPetData::IsInitialized() const {

  return true;
}

void UserPetData::Swap(UserPetData* other) {
  if (other != this) {
    std::swap(basedata_, other->basedata_);
    std::swap(inhand_, other->inhand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPetData_descriptor_;
  metadata.reflection = UserPetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatchPetPetCmd::kCmdFieldNumber;
const int CatchPetPetCmd::kParamFieldNumber;
const int CatchPetPetCmd::kNpcguidFieldNumber;
const int CatchPetPetCmd::kIsstopFieldNumber;
#endif  // !_MSC_VER

CatchPetPetCmd::CatchPetPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatchPetPetCmd)
}

void CatchPetPetCmd::InitAsDefaultInstance() {
}

CatchPetPetCmd::CatchPetPetCmd(const CatchPetPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatchPetPetCmd)
}

void CatchPetPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 8;
  npcguid_ = GOOGLE_ULONGLONG(0);
  isstop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatchPetPetCmd::~CatchPetPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatchPetPetCmd)
  SharedDtor();
}

void CatchPetPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatchPetPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchPetPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchPetPetCmd_descriptor_;
}

const CatchPetPetCmd& CatchPetPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

CatchPetPetCmd* CatchPetPetCmd::default_instance_ = NULL;

CatchPetPetCmd* CatchPetPetCmd::New() const {
  return new CatchPetPetCmd;
}

void CatchPetPetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CatchPetPetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, isstop_);
    cmd_ = 10;
    param_ = 8;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatchPetPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatchPetPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_PET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isstop;
        break;
      }

      // optional bool isstop = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_isstop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstop_)));
          set_has_isstop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatchPetPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatchPetPetCmd)
  return false;
#undef DO_
}

void CatchPetPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatchPetPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_PET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcguid = 3 [default = 0];
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // optional bool isstop = 4 [default = false];
  if (has_isstop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isstop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatchPetPetCmd)
}

::google::protobuf::uint8* CatchPetPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatchPetPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_PET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcguid = 3 [default = 0];
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // optional bool isstop = 4 [default = false];
  if (has_isstop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isstop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatchPetPetCmd)
  return target;
}

int CatchPetPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_PET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcguid = 3 [default = 0];
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional bool isstop = 4 [default = false];
    if (has_isstop()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchPetPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatchPetPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatchPetPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatchPetPetCmd::MergeFrom(const CatchPetPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_isstop()) {
      set_isstop(from.isstop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatchPetPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchPetPetCmd::CopyFrom(const CatchPetPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchPetPetCmd::IsInitialized() const {

  return true;
}

void CatchPetPetCmd::Swap(CatchPetPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(isstop_, other->isstop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatchPetPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchPetPetCmd_descriptor_;
  metadata.reflection = CatchPetPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatchPetGiftPetCmd::kCmdFieldNumber;
const int CatchPetGiftPetCmd::kParamFieldNumber;
const int CatchPetGiftPetCmd::kNpcguidFieldNumber;
#endif  // !_MSC_VER

CatchPetGiftPetCmd::CatchPetGiftPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatchPetGiftPetCmd)
}

void CatchPetGiftPetCmd::InitAsDefaultInstance() {
}

CatchPetGiftPetCmd::CatchPetGiftPetCmd(const CatchPetGiftPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatchPetGiftPetCmd)
}

void CatchPetGiftPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 12;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatchPetGiftPetCmd::~CatchPetGiftPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatchPetGiftPetCmd)
  SharedDtor();
}

void CatchPetGiftPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatchPetGiftPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchPetGiftPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchPetGiftPetCmd_descriptor_;
}

const CatchPetGiftPetCmd& CatchPetGiftPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

CatchPetGiftPetCmd* CatchPetGiftPetCmd::default_instance_ = NULL;

CatchPetGiftPetCmd* CatchPetGiftPetCmd::New() const {
  return new CatchPetGiftPetCmd;
}

void CatchPetGiftPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 12;
    npcguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatchPetGiftPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatchPetGiftPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_GIFT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatchPetGiftPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatchPetGiftPetCmd)
  return false;
#undef DO_
}

void CatchPetGiftPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatchPetGiftPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_GIFT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcguid = 3 [default = 0];
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatchPetGiftPetCmd)
}

::google::protobuf::uint8* CatchPetGiftPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatchPetGiftPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_GIFT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcguid = 3 [default = 0];
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatchPetGiftPetCmd)
  return target;
}

int CatchPetGiftPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_CATCH_GIFT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcguid = 3 [default = 0];
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchPetGiftPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatchPetGiftPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatchPetGiftPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatchPetGiftPetCmd::MergeFrom(const CatchPetGiftPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatchPetGiftPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchPetGiftPetCmd::CopyFrom(const CatchPetGiftPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchPetGiftPetCmd::IsInitialized() const {

  return true;
}

void CatchPetGiftPetCmd::Swap(CatchPetGiftPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatchPetGiftPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchPetGiftPetCmd_descriptor_;
  metadata.reflection = CatchPetGiftPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetMemberData::kEtypeFieldNumber;
const int PetMemberData::kValueFieldNumber;
const int PetMemberData::kValuesFieldNumber;
const int PetMemberData::kDataFieldNumber;
#endif  // !_MSC_VER

PetMemberData::PetMemberData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetMemberData)
}

void PetMemberData::InitAsDefaultInstance() {
}

PetMemberData::PetMemberData(const PetMemberData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetMemberData)
}

void PetMemberData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  etype_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetMemberData::~PetMemberData() {
  // @@protoc_insertion_point(destructor:Cmd.PetMemberData)
  SharedDtor();
}

void PetMemberData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PetMemberData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetMemberData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetMemberData_descriptor_;
}

const PetMemberData& PetMemberData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetMemberData* PetMemberData::default_instance_ = NULL;

PetMemberData* PetMemberData::New() const {
  return new PetMemberData;
}

void PetMemberData::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    etype_ = 0;
    value_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetMemberData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetMemberData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EPetDataType etype = 1 [default = EPETDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetDataType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPetDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_values;
        break;
      }

      // repeated uint32 values = 3;
      case 3: {
        if (tag == 24) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_values())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_values;
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional string data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetMemberData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetMemberData)
  return false;
#undef DO_
}

void PetMemberData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetMemberData)
  // optional .Cmd.EPetDataType etype = 1 [default = EPETDATA_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // repeated uint32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->values(i), output);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetMemberData)
}

::google::protobuf::uint8* PetMemberData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetMemberData)
  // optional .Cmd.EPetDataType etype = 1 [default = EPETDATA_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional uint64 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // repeated uint32 values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->values(i), target);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetMemberData)
  return target;
}

int PetMemberData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EPetDataType etype = 1 [default = EPETDATA_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint64 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional string data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  // repeated uint32 values = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetMemberData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetMemberData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetMemberData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetMemberData::MergeFrom(const PetMemberData& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetMemberData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetMemberData::CopyFrom(const PetMemberData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetMemberData::IsInitialized() const {

  return true;
}

void PetMemberData::Swap(PetMemberData* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(value_, other->value_);
    values_.Swap(&other->values_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetMemberData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetMemberData_descriptor_;
  metadata.reflection = PetMemberData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetInfo::kGuidFieldNumber;
const int PetInfo::kExpFieldNumber;
const int PetInfo::kFriendexpFieldNumber;
const int PetInfo::kRewardexpFieldNumber;
const int PetInfo::kPetidFieldNumber;
const int PetInfo::kNameFieldNumber;
const int PetInfo::kLvFieldNumber;
const int PetInfo::kFriendlvFieldNumber;
const int PetInfo::kRelivetimeFieldNumber;
const int PetInfo::kBodyFieldNumber;
const int PetInfo::kTimeHapplyFieldNumber;
const int PetInfo::kTimeExciteFieldNumber;
const int PetInfo::kTimeHappinessFieldNumber;
const int PetInfo::kUnlockEquipFieldNumber;
const int PetInfo::kUnlockBodyFieldNumber;
const int PetInfo::kSkillsFieldNumber;
const int PetInfo::kEquipsFieldNumber;
const int PetInfo::kSkilloffFieldNumber;
#endif  // !_MSC_VER

PetInfo::PetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetInfo)
}

void PetInfo::InitAsDefaultInstance() {
}

PetInfo::PetInfo(const PetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetInfo)
}

void PetInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  exp_ = GOOGLE_ULONGLONG(0);
  friendexp_ = GOOGLE_ULONGLONG(0);
  rewardexp_ = GOOGLE_ULONGLONG(0);
  petid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lv_ = 0u;
  friendlv_ = 0u;
  relivetime_ = 0u;
  body_ = 0u;
  time_happly_ = 0u;
  time_excite_ = 0u;
  time_happiness_ = 0u;
  skilloff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetInfo::~PetInfo() {
  // @@protoc_insertion_point(destructor:Cmd.PetInfo)
  SharedDtor();
}

void PetInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetInfo_descriptor_;
}

const PetInfo& PetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetInfo* PetInfo::default_instance_ = NULL;

PetInfo* PetInfo::New() const {
  return new PetInfo;
}

void PetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guid_, rewardexp_);
    ZR_(petid_, friendlv_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(relivetime_, time_happiness_);
  }
  skilloff_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  unlock_equip_.Clear();
  unlock_body_.Clear();
  skills_.Clear();
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friendexp;
        break;
      }

      // optional uint64 friendexp = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_friendexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendexp_)));
          set_has_friendexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardexp;
        break;
      }

      // optional uint64 rewardexp = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_rewardexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardexp_)));
          set_has_rewardexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_petid;
        break;
      }

      // required uint32 petid = 5;
      case 5: {
        if (tag == 40) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_friendlv;
        break;
      }

      // optional uint32 friendlv = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_friendlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendlv_)));
          set_has_friendlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_relivetime;
        break;
      }

      // optional uint32 relivetime = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_relivetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_body;
        break;
      }

      // optional uint32 body = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_happly;
        break;
      }

      // optional uint32 time_happly = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_time_happly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_happly_)));
          set_has_time_happly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_time_excite;
        break;
      }

      // optional uint32 time_excite = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_time_excite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_excite_)));
          set_has_time_excite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_time_happiness;
        break;
      }

      // optional uint32 time_happiness = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_time_happiness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_happiness_)));
          set_has_time_happiness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unlock_equip;
        break;
      }

      // repeated uint32 unlock_equip = 14;
      case 14: {
        if (tag == 112) {
         parse_unlock_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_unlock_equip())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_equip())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unlock_equip;
        if (input->ExpectTag(120)) goto parse_unlock_body;
        break;
      }

      // repeated uint32 unlock_body = 15;
      case 15: {
        if (tag == 120) {
         parse_unlock_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_unlock_body())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_body())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_unlock_body;
        if (input->ExpectTag(128)) goto parse_skills;
        break;
      }

      // repeated uint32 skills = 16;
      case 16: {
        if (tag == 128) {
         parse_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_skills())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skills())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_skills;
        if (input->ExpectTag(138)) goto parse_equips;
        break;
      }

      // repeated .Cmd.ItemData equips = 17;
      case 17: {
        if (tag == 138) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_equips;
        if (input->ExpectTag(144)) goto parse_skilloff;
        break;
      }

      // optional bool skilloff = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_skilloff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skilloff_)));
          set_has_skilloff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetInfo)
  return false;
#undef DO_
}

void PetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetInfo)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional uint64 exp = 2 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }

  // optional uint64 friendexp = 3 [default = 0];
  if (has_friendexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->friendexp(), output);
  }

  // optional uint64 rewardexp = 4 [default = 0];
  if (has_rewardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->rewardexp(), output);
  }

  // required uint32 petid = 5;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->petid(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 lv = 7 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lv(), output);
  }

  // optional uint32 friendlv = 8 [default = 0];
  if (has_friendlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->friendlv(), output);
  }

  // optional uint32 relivetime = 9 [default = 0];
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->relivetime(), output);
  }

  // optional uint32 body = 10 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->body(), output);
  }

  // optional uint32 time_happly = 11 [default = 0];
  if (has_time_happly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_happly(), output);
  }

  // optional uint32 time_excite = 12 [default = 0];
  if (has_time_excite()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time_excite(), output);
  }

  // optional uint32 time_happiness = 13 [default = 0];
  if (has_time_happiness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->time_happiness(), output);
  }

  // repeated uint32 unlock_equip = 14;
  for (int i = 0; i < this->unlock_equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->unlock_equip(i), output);
  }

  // repeated uint32 unlock_body = 15;
  for (int i = 0; i < this->unlock_body_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->unlock_body(i), output);
  }

  // repeated uint32 skills = 16;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->skills(i), output);
  }

  // repeated .Cmd.ItemData equips = 17;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->equips(i), output);
  }

  // optional bool skilloff = 18 [default = false];
  if (has_skilloff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->skilloff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetInfo)
}

::google::protobuf::uint8* PetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetInfo)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional uint64 exp = 2 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exp(), target);
  }

  // optional uint64 friendexp = 3 [default = 0];
  if (has_friendexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->friendexp(), target);
  }

  // optional uint64 rewardexp = 4 [default = 0];
  if (has_rewardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->rewardexp(), target);
  }

  // required uint32 petid = 5;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->petid(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 lv = 7 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lv(), target);
  }

  // optional uint32 friendlv = 8 [default = 0];
  if (has_friendlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->friendlv(), target);
  }

  // optional uint32 relivetime = 9 [default = 0];
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->relivetime(), target);
  }

  // optional uint32 body = 10 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->body(), target);
  }

  // optional uint32 time_happly = 11 [default = 0];
  if (has_time_happly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_happly(), target);
  }

  // optional uint32 time_excite = 12 [default = 0];
  if (has_time_excite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time_excite(), target);
  }

  // optional uint32 time_happiness = 13 [default = 0];
  if (has_time_happiness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->time_happiness(), target);
  }

  // repeated uint32 unlock_equip = 14;
  for (int i = 0; i < this->unlock_equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->unlock_equip(i), target);
  }

  // repeated uint32 unlock_body = 15;
  for (int i = 0; i < this->unlock_body_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->unlock_body(i), target);
  }

  // repeated uint32 skills = 16;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->skills(i), target);
  }

  // repeated .Cmd.ItemData equips = 17;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->equips(i), target);
  }

  // optional bool skilloff = 18 [default = false];
  if (has_skilloff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->skilloff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetInfo)
  return target;
}

int PetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 exp = 2 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint64 friendexp = 3 [default = 0];
    if (has_friendexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendexp());
    }

    // optional uint64 rewardexp = 4 [default = 0];
    if (has_rewardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardexp());
    }

    // required uint32 petid = 5;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 lv = 7 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 friendlv = 8 [default = 0];
    if (has_friendlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendlv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 relivetime = 9 [default = 0];
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivetime());
    }

    // optional uint32 body = 10 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 time_happly = 11 [default = 0];
    if (has_time_happly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_happly());
    }

    // optional uint32 time_excite = 12 [default = 0];
    if (has_time_excite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_excite());
    }

    // optional uint32 time_happiness = 13 [default = 0];
    if (has_time_happiness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_happiness());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool skilloff = 18 [default = false];
    if (has_skilloff()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 unlock_equip = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_equip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlock_equip(i));
    }
    total_size += 1 * this->unlock_equip_size() + data_size;
  }

  // repeated uint32 unlock_body = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_body_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlock_body(i));
    }
    total_size += 1 * this->unlock_body_size() + data_size;
  }

  // repeated uint32 skills = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->skills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skills(i));
    }
    total_size += 2 * this->skills_size() + data_size;
  }

  // repeated .Cmd.ItemData equips = 17;
  total_size += 2 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetInfo::MergeFrom(const PetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlock_equip_.MergeFrom(from.unlock_equip_);
  unlock_body_.MergeFrom(from.unlock_body_);
  skills_.MergeFrom(from.skills_);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_friendexp()) {
      set_friendexp(from.friendexp());
    }
    if (from.has_rewardexp()) {
      set_rewardexp(from.rewardexp());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_friendlv()) {
      set_friendlv(from.friendlv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_time_happly()) {
      set_time_happly(from.time_happly());
    }
    if (from.has_time_excite()) {
      set_time_excite(from.time_excite());
    }
    if (from.has_time_happiness()) {
      set_time_happiness(from.time_happiness());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_skilloff()) {
      set_skilloff(from.skilloff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetInfo::CopyFrom(const PetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;

  return true;
}

void PetInfo::Swap(PetInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(exp_, other->exp_);
    std::swap(friendexp_, other->friendexp_);
    std::swap(rewardexp_, other->rewardexp_);
    std::swap(petid_, other->petid_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(friendlv_, other->friendlv_);
    std::swap(relivetime_, other->relivetime_);
    std::swap(body_, other->body_);
    std::swap(time_happly_, other->time_happly_);
    std::swap(time_excite_, other->time_excite_);
    std::swap(time_happiness_, other->time_happiness_);
    unlock_equip_.Swap(&other->unlock_equip_);
    unlock_body_.Swap(&other->unlock_body_);
    skills_.Swap(&other->skills_);
    equips_.Swap(&other->equips_);
    std::swap(skilloff_, other->skilloff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetInfo_descriptor_;
  metadata.reflection = PetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetInfoPetCmd::kCmdFieldNumber;
const int PetInfoPetCmd::kParamFieldNumber;
const int PetInfoPetCmd::kPetinfoFieldNumber;
#endif  // !_MSC_VER

PetInfoPetCmd::PetInfoPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetInfoPetCmd)
}

void PetInfoPetCmd::InitAsDefaultInstance() {
}

PetInfoPetCmd::PetInfoPetCmd(const PetInfoPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetInfoPetCmd)
}

void PetInfoPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetInfoPetCmd::~PetInfoPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetInfoPetCmd)
  SharedDtor();
}

void PetInfoPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetInfoPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetInfoPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetInfoPetCmd_descriptor_;
}

const PetInfoPetCmd& PetInfoPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetInfoPetCmd* PetInfoPetCmd::default_instance_ = NULL;

PetInfoPetCmd* PetInfoPetCmd::New() const {
  return new PetInfoPetCmd;
}

void PetInfoPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 9;
  }
  petinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetInfoPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetInfoPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_petinfo;
        break;
      }

      // repeated .Cmd.PetInfo petinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_petinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetInfoPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetInfoPetCmd)
  return false;
#undef DO_
}

void PetInfoPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetInfoPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.PetInfo petinfo = 3;
  for (int i = 0; i < this->petinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->petinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetInfoPetCmd)
}

::google::protobuf::uint8* PetInfoPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetInfoPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.PetInfo petinfo = 3;
  for (int i = 0; i < this->petinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->petinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetInfoPetCmd)
  return target;
}

int PetInfoPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.PetInfo petinfo = 3;
  total_size += 1 * this->petinfo_size();
  for (int i = 0; i < this->petinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetInfoPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetInfoPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetInfoPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetInfoPetCmd::MergeFrom(const PetInfoPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  petinfo_.MergeFrom(from.petinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetInfoPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetInfoPetCmd::CopyFrom(const PetInfoPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetInfoPetCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->petinfo())) return false;
  return true;
}

void PetInfoPetCmd::Swap(PetInfoPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    petinfo_.Swap(&other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetInfoPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetInfoPetCmd_descriptor_;
  metadata.reflection = PetInfoPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetInfoUpdatePetCmd::kCmdFieldNumber;
const int PetInfoUpdatePetCmd::kParamFieldNumber;
const int PetInfoUpdatePetCmd::kPetidFieldNumber;
const int PetInfoUpdatePetCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

PetInfoUpdatePetCmd::PetInfoUpdatePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetInfoUpdatePetCmd)
}

void PetInfoUpdatePetCmd::InitAsDefaultInstance() {
}

PetInfoUpdatePetCmd::PetInfoUpdatePetCmd(const PetInfoUpdatePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetInfoUpdatePetCmd)
}

void PetInfoUpdatePetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 10;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetInfoUpdatePetCmd::~PetInfoUpdatePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetInfoUpdatePetCmd)
  SharedDtor();
}

void PetInfoUpdatePetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetInfoUpdatePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetInfoUpdatePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetInfoUpdatePetCmd_descriptor_;
}

const PetInfoUpdatePetCmd& PetInfoUpdatePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetInfoUpdatePetCmd* PetInfoUpdatePetCmd::default_instance_ = NULL;

PetInfoUpdatePetCmd* PetInfoUpdatePetCmd::New() const {
  return new PetInfoUpdatePetCmd;
}

void PetInfoUpdatePetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 10;
    petid_ = 0u;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetInfoUpdatePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetInfoUpdatePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // required uint32 petid = 3;
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.PetMemberData datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetInfoUpdatePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetInfoUpdatePetCmd)
  return false;
#undef DO_
}

void PetInfoUpdatePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetInfoUpdatePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // repeated .Cmd.PetMemberData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetInfoUpdatePetCmd)
}

::google::protobuf::uint8* PetInfoUpdatePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetInfoUpdatePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // repeated .Cmd.PetMemberData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetInfoUpdatePetCmd)
  return target;
}

int PetInfoUpdatePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_PETINFO_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  // repeated .Cmd.PetMemberData datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetInfoUpdatePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetInfoUpdatePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetInfoUpdatePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetInfoUpdatePetCmd::MergeFrom(const PetInfoUpdatePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetInfoUpdatePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetInfoUpdatePetCmd::CopyFrom(const PetInfoUpdatePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetInfoUpdatePetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void PetInfoUpdatePetCmd::Swap(PetInfoUpdatePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetInfoUpdatePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetInfoUpdatePetCmd_descriptor_;
  metadata.reflection = PetInfoUpdatePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetOffPetCmd::kCmdFieldNumber;
const int PetOffPetCmd::kParamFieldNumber;
const int PetOffPetCmd::kPetidFieldNumber;
#endif  // !_MSC_VER

PetOffPetCmd::PetOffPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetOffPetCmd)
}

void PetOffPetCmd::InitAsDefaultInstance() {
}

PetOffPetCmd::PetOffPetCmd(const PetOffPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetOffPetCmd)
}

void PetOffPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 11;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetOffPetCmd::~PetOffPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetOffPetCmd)
  SharedDtor();
}

void PetOffPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetOffPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetOffPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetOffPetCmd_descriptor_;
}

const PetOffPetCmd& PetOffPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetOffPetCmd* PetOffPetCmd::default_instance_ = NULL;

PetOffPetCmd* PetOffPetCmd::New() const {
  return new PetOffPetCmd;
}

void PetOffPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 11;
    petid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetOffPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetOffPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_OFF_PET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // required uint32 petid = 3;
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetOffPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetOffPetCmd)
  return false;
#undef DO_
}

void PetOffPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetOffPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_OFF_PET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetOffPetCmd)
}

::google::protobuf::uint8* PetOffPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetOffPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_OFF_PET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetOffPetCmd)
  return target;
}

int PetOffPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_OFF_PET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetOffPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetOffPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetOffPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetOffPetCmd::MergeFrom(const PetOffPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetOffPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetOffPetCmd::CopyFrom(const PetOffPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetOffPetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void PetOffPetCmd::Swap(PetOffPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetOffPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetOffPetCmd_descriptor_;
  metadata.reflection = PetOffPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGiftPetCmd::kCmdFieldNumber;
const int GetGiftPetCmd::kParamFieldNumber;
const int GetGiftPetCmd::kPetidFieldNumber;
#endif  // !_MSC_VER

GetGiftPetCmd::GetGiftPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetGiftPetCmd)
}

void GetGiftPetCmd::InitAsDefaultInstance() {
}

GetGiftPetCmd::GetGiftPetCmd(const GetGiftPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetGiftPetCmd)
}

void GetGiftPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 13;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGiftPetCmd::~GetGiftPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetGiftPetCmd)
  SharedDtor();
}

void GetGiftPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGiftPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGiftPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGiftPetCmd_descriptor_;
}

const GetGiftPetCmd& GetGiftPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

GetGiftPetCmd* GetGiftPetCmd::default_instance_ = NULL;

GetGiftPetCmd* GetGiftPetCmd::New() const {
  return new GetGiftPetCmd;
}

void GetGiftPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 13;
    petid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGiftPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetGiftPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_GET_GIFT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional uint32 petid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetGiftPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetGiftPetCmd)
  return false;
#undef DO_
}

void GetGiftPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetGiftPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_GET_GIFT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetGiftPetCmd)
}

::google::protobuf::uint8* GetGiftPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetGiftPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_GET_GIFT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetGiftPetCmd)
  return target;
}

int GetGiftPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_GET_GIFT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 petid = 3 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGiftPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGiftPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGiftPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGiftPetCmd::MergeFrom(const GetGiftPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGiftPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGiftPetCmd::CopyFrom(const GetGiftPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGiftPetCmd::IsInitialized() const {

  return true;
}

void GetGiftPetCmd::Swap(GetGiftPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGiftPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGiftPetCmd_descriptor_;
  metadata.reflection = GetGiftPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipOperPetCmd::kCmdFieldNumber;
const int EquipOperPetCmd::kParamFieldNumber;
const int EquipOperPetCmd::kOperFieldNumber;
const int EquipOperPetCmd::kPetidFieldNumber;
const int EquipOperPetCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

EquipOperPetCmd::EquipOperPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipOperPetCmd)
}

void EquipOperPetCmd::InitAsDefaultInstance() {
}

EquipOperPetCmd::EquipOperPetCmd(const EquipOperPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipOperPetCmd)
}

void EquipOperPetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 14;
  oper_ = 0;
  petid_ = 0u;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipOperPetCmd::~EquipOperPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EquipOperPetCmd)
  SharedDtor();
}

void EquipOperPetCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EquipOperPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipOperPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipOperPetCmd_descriptor_;
}

const EquipOperPetCmd& EquipOperPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

EquipOperPetCmd* EquipOperPetCmd::default_instance_ = NULL;

EquipOperPetCmd* EquipOperPetCmd::New() const {
  return new EquipOperPetCmd;
}

void EquipOperPetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipOperPetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(oper_, petid_);
    cmd_ = 10;
    param_ = 14;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipOperPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipOperPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_OPER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oper;
        break;
      }

      // optional .Cmd.EPetEquipOper oper = 3 [default = EPETEQUIPOPER_MIN];
      case 3: {
        if (tag == 24) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetEquipOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EPetEquipOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_petid;
        break;
      }

      // optional uint32 petid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guid;
        break;
      }

      // optional string guid = 5;
      case 5: {
        if (tag == 42) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipOperPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipOperPetCmd)
  return false;
#undef DO_
}

void EquipOperPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipOperPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_OPER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPetEquipOper oper = 3 [default = EPETEQUIPOPER_MIN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->oper(), output);
  }

  // optional uint32 petid = 4 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->petid(), output);
  }

  // optional string guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipOperPetCmd)
}

::google::protobuf::uint8* EquipOperPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipOperPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_OPER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPetEquipOper oper = 3 [default = EPETEQUIPOPER_MIN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->oper(), target);
  }

  // optional uint32 petid = 4 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->petid(), target);
  }

  // optional string guid = 5;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipOperPetCmd)
  return target;
}

int EquipOperPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_OPER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPetEquipOper oper = 3 [default = EPETEQUIPOPER_MIN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional uint32 petid = 4 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional string guid = 5;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipOperPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipOperPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipOperPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipOperPetCmd::MergeFrom(const EquipOperPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipOperPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipOperPetCmd::CopyFrom(const EquipOperPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipOperPetCmd::IsInitialized() const {

  return true;
}

void EquipOperPetCmd::Swap(EquipOperPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(oper_, other->oper_);
    std::swap(petid_, other->petid_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipOperPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipOperPetCmd_descriptor_;
  metadata.reflection = EquipOperPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipUpdatePetCmd::kCmdFieldNumber;
const int EquipUpdatePetCmd::kParamFieldNumber;
const int EquipUpdatePetCmd::kPetidFieldNumber;
const int EquipUpdatePetCmd::kUpdateFieldNumber;
const int EquipUpdatePetCmd::kDelFieldNumber;
#endif  // !_MSC_VER

EquipUpdatePetCmd::EquipUpdatePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipUpdatePetCmd)
}

void EquipUpdatePetCmd::InitAsDefaultInstance() {
  update_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

EquipUpdatePetCmd::EquipUpdatePetCmd(const EquipUpdatePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipUpdatePetCmd)
}

void EquipUpdatePetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 15;
  petid_ = 0u;
  update_ = NULL;
  del_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipUpdatePetCmd::~EquipUpdatePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EquipUpdatePetCmd)
  SharedDtor();
}

void EquipUpdatePetCmd::SharedDtor() {
  if (del_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete del_;
  }
  if (this != default_instance_) {
    delete update_;
  }
}

void EquipUpdatePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipUpdatePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipUpdatePetCmd_descriptor_;
}

const EquipUpdatePetCmd& EquipUpdatePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

EquipUpdatePetCmd* EquipUpdatePetCmd::default_instance_ = NULL;

EquipUpdatePetCmd* EquipUpdatePetCmd::New() const {
  return new EquipUpdatePetCmd;
}

void EquipUpdatePetCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 10;
    param_ = 15;
    petid_ = 0u;
    if (has_update()) {
      if (update_ != NULL) update_->::Cmd::ItemData::Clear();
    }
    if (has_del()) {
      if (del_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        del_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipUpdatePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipUpdatePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional uint32 petid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_update;
        break;
      }

      // optional .Cmd.ItemData update = 4;
      case 4: {
        if (tag == 34) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_del;
        break;
      }

      // optional string del = 5;
      case 5: {
        if (tag == 42) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_del()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->del().data(), this->del().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "del");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipUpdatePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipUpdatePetCmd)
  return false;
#undef DO_
}

void EquipUpdatePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipUpdatePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // optional .Cmd.ItemData update = 4;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->update(), output);
  }

  // optional string del = 5;
  if (has_del()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->del().data(), this->del().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "del");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipUpdatePetCmd)
}

::google::protobuf::uint8* EquipUpdatePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipUpdatePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // optional .Cmd.ItemData update = 4;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->update(), target);
  }

  // optional string del = 5;
  if (has_del()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->del().data(), this->del().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "del");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipUpdatePetCmd)
  return target;
}

int EquipUpdatePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 petid = 3 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional .Cmd.ItemData update = 4;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

    // optional string del = 5;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->del());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipUpdatePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipUpdatePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipUpdatePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipUpdatePetCmd::MergeFrom(const EquipUpdatePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_update()) {
      mutable_update()->::Cmd::ItemData::MergeFrom(from.update());
    }
    if (from.has_del()) {
      set_del(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipUpdatePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipUpdatePetCmd::CopyFrom(const EquipUpdatePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipUpdatePetCmd::IsInitialized() const {

  return true;
}

void EquipUpdatePetCmd::Swap(EquipUpdatePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    std::swap(update_, other->update_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipUpdatePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipUpdatePetCmd_descriptor_;
  metadata.reflection = EquipUpdatePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAdventureStep::kStepFieldNumber;
const int PetAdventureStep::kItemsFieldNumber;
#endif  // !_MSC_VER

PetAdventureStep::PetAdventureStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetAdventureStep)
}

void PetAdventureStep::InitAsDefaultInstance() {
}

PetAdventureStep::PetAdventureStep(const PetAdventureStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetAdventureStep)
}

void PetAdventureStep::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAdventureStep::~PetAdventureStep() {
  // @@protoc_insertion_point(destructor:Cmd.PetAdventureStep)
  SharedDtor();
}

void PetAdventureStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetAdventureStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAdventureStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAdventureStep_descriptor_;
}

const PetAdventureStep& PetAdventureStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetAdventureStep* PetAdventureStep::default_instance_ = NULL;

PetAdventureStep* PetAdventureStep::New() const {
  return new PetAdventureStep;
}

void PetAdventureStep::Clear() {
  step_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAdventureStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetAdventureStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 step = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemData items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetAdventureStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetAdventureStep)
  return false;
#undef DO_
}

void PetAdventureStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetAdventureStep)
  // optional uint32 step = 1 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }

  // repeated .Cmd.ItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetAdventureStep)
}

::google::protobuf::uint8* PetAdventureStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetAdventureStep)
  // optional uint32 step = 1 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }

  // repeated .Cmd.ItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetAdventureStep)
  return target;
}

int PetAdventureStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 step = 1 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  // repeated .Cmd.ItemData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAdventureStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAdventureStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAdventureStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAdventureStep::MergeFrom(const PetAdventureStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAdventureStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAdventureStep::CopyFrom(const PetAdventureStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAdventureStep::IsInitialized() const {

  return true;
}

void PetAdventureStep::Swap(PetAdventureStep* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAdventureStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAdventureStep_descriptor_;
  metadata.reflection = PetAdventureStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEfficiencyInfo::kEtypeFieldNumber;
const int PetEfficiencyInfo::kFvalueFieldNumber;
#endif  // !_MSC_VER

PetEfficiencyInfo::PetEfficiencyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetEfficiencyInfo)
}

void PetEfficiencyInfo::InitAsDefaultInstance() {
}

PetEfficiencyInfo::PetEfficiencyInfo(const PetEfficiencyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetEfficiencyInfo)
}

void PetEfficiencyInfo::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  fvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEfficiencyInfo::~PetEfficiencyInfo() {
  // @@protoc_insertion_point(destructor:Cmd.PetEfficiencyInfo)
  SharedDtor();
}

void PetEfficiencyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEfficiencyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEfficiencyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEfficiencyInfo_descriptor_;
}

const PetEfficiencyInfo& PetEfficiencyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetEfficiencyInfo* PetEfficiencyInfo::default_instance_ = NULL;

PetEfficiencyInfo* PetEfficiencyInfo::New() const {
  return new PetEfficiencyInfo;
}

void PetEfficiencyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetEfficiencyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(etype_, fvalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEfficiencyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetEfficiencyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cmd.EPetEfficiencyType etype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetEfficiencyType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPetEfficiencyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fvalue;
        break;
      }

      // optional uint32 fvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_fvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetEfficiencyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetEfficiencyInfo)
  return false;
#undef DO_
}

void PetEfficiencyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetEfficiencyInfo)
  // required .Cmd.EPetEfficiencyType etype = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional uint32 fvalue = 2;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetEfficiencyInfo)
}

::google::protobuf::uint8* PetEfficiencyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetEfficiencyInfo)
  // required .Cmd.EPetEfficiencyType etype = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional uint32 fvalue = 2;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetEfficiencyInfo)
  return target;
}

int PetEfficiencyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cmd.EPetEfficiencyType etype = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 fvalue = 2;
    if (has_fvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEfficiencyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEfficiencyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEfficiencyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEfficiencyInfo::MergeFrom(const PetEfficiencyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEfficiencyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEfficiencyInfo::CopyFrom(const PetEfficiencyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEfficiencyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PetEfficiencyInfo::Swap(PetEfficiencyInfo* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEfficiencyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEfficiencyInfo_descriptor_;
  metadata.reflection = PetEfficiencyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetMonsterRewardInfo::kMonsteridFieldNumber;
const int PetMonsterRewardInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

PetMonsterRewardInfo::PetMonsterRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetMonsterRewardInfo)
}

void PetMonsterRewardInfo::InitAsDefaultInstance() {
}

PetMonsterRewardInfo::PetMonsterRewardInfo(const PetMonsterRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetMonsterRewardInfo)
}

void PetMonsterRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetMonsterRewardInfo::~PetMonsterRewardInfo() {
  // @@protoc_insertion_point(destructor:Cmd.PetMonsterRewardInfo)
  SharedDtor();
}

void PetMonsterRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetMonsterRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetMonsterRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetMonsterRewardInfo_descriptor_;
}

const PetMonsterRewardInfo& PetMonsterRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetMonsterRewardInfo* PetMonsterRewardInfo::default_instance_ = NULL;

PetMonsterRewardInfo* PetMonsterRewardInfo::New() const {
  return new PetMonsterRewardInfo;
}

void PetMonsterRewardInfo::Clear() {
  monsterid_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetMonsterRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetMonsterRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemData items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetMonsterRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetMonsterRewardInfo)
  return false;
#undef DO_
}

void PetMonsterRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetMonsterRewardInfo)
  // optional uint32 monsterid = 1 [default = 0];
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // repeated .Cmd.ItemData items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetMonsterRewardInfo)
}

::google::protobuf::uint8* PetMonsterRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetMonsterRewardInfo)
  // optional uint32 monsterid = 1 [default = 0];
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // repeated .Cmd.ItemData items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetMonsterRewardInfo)
  return target;
}

int PetMonsterRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterid = 1 [default = 0];
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

  }
  // repeated .Cmd.ItemData items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetMonsterRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetMonsterRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetMonsterRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetMonsterRewardInfo::MergeFrom(const PetMonsterRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetMonsterRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetMonsterRewardInfo::CopyFrom(const PetMonsterRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetMonsterRewardInfo::IsInitialized() const {

  return true;
}

void PetMonsterRewardInfo::Swap(PetMonsterRewardInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetMonsterRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetMonsterRewardInfo_descriptor_;
  metadata.reflection = PetMonsterRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAdventureItem::kIdFieldNumber;
const int PetAdventureItem::kStarttimeFieldNumber;
const int PetAdventureItem::kStatusFieldNumber;
const int PetAdventureItem::kEggsFieldNumber;
const int PetAdventureItem::kStepsFieldNumber;
const int PetAdventureItem::kRaresrewardFieldNumber;
const int PetAdventureItem::kSpecidFieldNumber;
const int PetAdventureItem::kEffFieldNumber;
const int PetAdventureItem::kRewardinfoFieldNumber;
const int PetAdventureItem::kExtrarewardinfoFieldNumber;
#endif  // !_MSC_VER

PetAdventureItem::PetAdventureItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetAdventureItem)
}

void PetAdventureItem::InitAsDefaultInstance() {
}

PetAdventureItem::PetAdventureItem(const PetAdventureItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetAdventureItem)
}

void PetAdventureItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  starttime_ = 0u;
  status_ = 0;
  specid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAdventureItem::~PetAdventureItem() {
  // @@protoc_insertion_point(destructor:Cmd.PetAdventureItem)
  SharedDtor();
}

void PetAdventureItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetAdventureItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAdventureItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAdventureItem_descriptor_;
}

const PetAdventureItem& PetAdventureItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetAdventureItem* PetAdventureItem::default_instance_ = NULL;

PetAdventureItem* PetAdventureItem::New() const {
  return new PetAdventureItem;
}

void PetAdventureItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetAdventureItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, starttime_);
  ZR_(status_, specid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  eggs_.Clear();
  steps_.Clear();
  raresreward_.Clear();
  eff_.Clear();
  rewardinfo_.Clear();
  extrarewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAdventureItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetAdventureItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetAdventureStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EPetAdventureStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eggs;
        break;
      }

      // repeated .Cmd.ItemData eggs = 4;
      case 4: {
        if (tag == 34) {
         parse_eggs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eggs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eggs;
        if (input->ExpectTag(42)) goto parse_steps;
        break;
      }

      // repeated .Cmd.PetAdventureStep steps = 5;
      case 5: {
        if (tag == 42) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_steps;
        if (input->ExpectTag(50)) goto parse_raresreward;
        break;
      }

      // repeated .Cmd.ItemData raresreward = 6;
      case 6: {
        if (tag == 50) {
         parse_raresreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raresreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_raresreward;
        if (input->ExpectTag(56)) goto parse_specid;
        break;
      }

      // optional uint32 specid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_specid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specid_)));
          set_has_specid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_eff;
        break;
      }

      // repeated .Cmd.PetEfficiencyInfo eff = 8;
      case 8: {
        if (tag == 66) {
         parse_eff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_eff;
        if (input->ExpectTag(74)) goto parse_rewardinfo;
        break;
      }

      // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
      case 9: {
        if (tag == 74) {
         parse_rewardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rewardinfo;
        if (input->ExpectTag(82)) goto parse_extrarewardinfo;
        break;
      }

      // repeated .Cmd.ItemData extrarewardinfo = 10;
      case 10: {
        if (tag == 82) {
         parse_extrarewardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extrarewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extrarewardinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetAdventureItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetAdventureItem)
  return false;
#undef DO_
}

void PetAdventureItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetAdventureItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 starttime = 2 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttime(), output);
  }

  // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // repeated .Cmd.ItemData eggs = 4;
  for (int i = 0; i < this->eggs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->eggs(i), output);
  }

  // repeated .Cmd.PetAdventureStep steps = 5;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->steps(i), output);
  }

  // repeated .Cmd.ItemData raresreward = 6;
  for (int i = 0; i < this->raresreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->raresreward(i), output);
  }

  // optional uint32 specid = 7 [default = 0];
  if (has_specid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->specid(), output);
  }

  // repeated .Cmd.PetEfficiencyInfo eff = 8;
  for (int i = 0; i < this->eff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->eff(i), output);
  }

  // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rewardinfo(i), output);
  }

  // repeated .Cmd.ItemData extrarewardinfo = 10;
  for (int i = 0; i < this->extrarewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->extrarewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetAdventureItem)
}

::google::protobuf::uint8* PetAdventureItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetAdventureItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 starttime = 2 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttime(), target);
  }

  // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // repeated .Cmd.ItemData eggs = 4;
  for (int i = 0; i < this->eggs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->eggs(i), target);
  }

  // repeated .Cmd.PetAdventureStep steps = 5;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->steps(i), target);
  }

  // repeated .Cmd.ItemData raresreward = 6;
  for (int i = 0; i < this->raresreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->raresreward(i), target);
  }

  // optional uint32 specid = 7 [default = 0];
  if (has_specid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->specid(), target);
  }

  // repeated .Cmd.PetEfficiencyInfo eff = 8;
  for (int i = 0; i < this->eff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->eff(i), target);
  }

  // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rewardinfo(i), target);
  }

  // repeated .Cmd.ItemData extrarewardinfo = 10;
  for (int i = 0; i < this->extrarewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->extrarewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetAdventureItem)
  return target;
}

int PetAdventureItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 starttime = 2 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 specid = 7 [default = 0];
    if (has_specid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specid());
    }

  }
  // repeated .Cmd.ItemData eggs = 4;
  total_size += 1 * this->eggs_size();
  for (int i = 0; i < this->eggs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eggs(i));
  }

  // repeated .Cmd.PetAdventureStep steps = 5;
  total_size += 1 * this->steps_size();
  for (int i = 0; i < this->steps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steps(i));
  }

  // repeated .Cmd.ItemData raresreward = 6;
  total_size += 1 * this->raresreward_size();
  for (int i = 0; i < this->raresreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raresreward(i));
  }

  // repeated .Cmd.PetEfficiencyInfo eff = 8;
  total_size += 1 * this->eff_size();
  for (int i = 0; i < this->eff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eff(i));
  }

  // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
  total_size += 1 * this->rewardinfo_size();
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfo(i));
  }

  // repeated .Cmd.ItemData extrarewardinfo = 10;
  total_size += 1 * this->extrarewardinfo_size();
  for (int i = 0; i < this->extrarewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extrarewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAdventureItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAdventureItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAdventureItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAdventureItem::MergeFrom(const PetAdventureItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  eggs_.MergeFrom(from.eggs_);
  steps_.MergeFrom(from.steps_);
  raresreward_.MergeFrom(from.raresreward_);
  eff_.MergeFrom(from.eff_);
  rewardinfo_.MergeFrom(from.rewardinfo_);
  extrarewardinfo_.MergeFrom(from.extrarewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_specid()) {
      set_specid(from.specid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAdventureItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAdventureItem::CopyFrom(const PetAdventureItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAdventureItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->eff())) return false;
  return true;
}

void PetAdventureItem::Swap(PetAdventureItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starttime_, other->starttime_);
    std::swap(status_, other->status_);
    eggs_.Swap(&other->eggs_);
    steps_.Swap(&other->steps_);
    raresreward_.Swap(&other->raresreward_);
    std::swap(specid_, other->specid_);
    eff_.Swap(&other->eff_);
    rewardinfo_.Swap(&other->rewardinfo_);
    extrarewardinfo_.Swap(&other->extrarewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAdventureItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAdventureItem_descriptor_;
  metadata.reflection = PetAdventureItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPetAdventureListPetCmd::kCmdFieldNumber;
const int QueryPetAdventureListPetCmd::kParamFieldNumber;
const int QueryPetAdventureListPetCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryPetAdventureListPetCmd::QueryPetAdventureListPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryPetAdventureListPetCmd)
}

void QueryPetAdventureListPetCmd::InitAsDefaultInstance() {
}

QueryPetAdventureListPetCmd::QueryPetAdventureListPetCmd(const QueryPetAdventureListPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryPetAdventureListPetCmd)
}

void QueryPetAdventureListPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 16;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPetAdventureListPetCmd::~QueryPetAdventureListPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryPetAdventureListPetCmd)
  SharedDtor();
}

void QueryPetAdventureListPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPetAdventureListPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPetAdventureListPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPetAdventureListPetCmd_descriptor_;
}

const QueryPetAdventureListPetCmd& QueryPetAdventureListPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

QueryPetAdventureListPetCmd* QueryPetAdventureListPetCmd::default_instance_ = NULL;

QueryPetAdventureListPetCmd* QueryPetAdventureListPetCmd::New() const {
  return new QueryPetAdventureListPetCmd;
}

void QueryPetAdventureListPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 16;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPetAdventureListPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryPetAdventureListPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.PetAdventureItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryPetAdventureListPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryPetAdventureListPetCmd)
  return false;
#undef DO_
}

void QueryPetAdventureListPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryPetAdventureListPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.PetAdventureItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryPetAdventureListPetCmd)
}

::google::protobuf::uint8* QueryPetAdventureListPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryPetAdventureListPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.PetAdventureItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryPetAdventureListPetCmd)
  return target;
}

int QueryPetAdventureListPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.PetAdventureItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPetAdventureListPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPetAdventureListPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPetAdventureListPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPetAdventureListPetCmd::MergeFrom(const QueryPetAdventureListPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPetAdventureListPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPetAdventureListPetCmd::CopyFrom(const QueryPetAdventureListPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPetAdventureListPetCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void QueryPetAdventureListPetCmd::Swap(QueryPetAdventureListPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPetAdventureListPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPetAdventureListPetCmd_descriptor_;
  metadata.reflection = QueryPetAdventureListPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAdventureResultNtfPetCmd::kCmdFieldNumber;
const int PetAdventureResultNtfPetCmd::kParamFieldNumber;
const int PetAdventureResultNtfPetCmd::kItemFieldNumber;
#endif  // !_MSC_VER

PetAdventureResultNtfPetCmd::PetAdventureResultNtfPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetAdventureResultNtfPetCmd)
}

void PetAdventureResultNtfPetCmd::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::PetAdventureItem*>(&::Cmd::PetAdventureItem::default_instance());
}

PetAdventureResultNtfPetCmd::PetAdventureResultNtfPetCmd(const PetAdventureResultNtfPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetAdventureResultNtfPetCmd)
}

void PetAdventureResultNtfPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 17;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAdventureResultNtfPetCmd::~PetAdventureResultNtfPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetAdventureResultNtfPetCmd)
  SharedDtor();
}

void PetAdventureResultNtfPetCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PetAdventureResultNtfPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAdventureResultNtfPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAdventureResultNtfPetCmd_descriptor_;
}

const PetAdventureResultNtfPetCmd& PetAdventureResultNtfPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetAdventureResultNtfPetCmd* PetAdventureResultNtfPetCmd::default_instance_ = NULL;

PetAdventureResultNtfPetCmd* PetAdventureResultNtfPetCmd::New() const {
  return new PetAdventureResultNtfPetCmd;
}

void PetAdventureResultNtfPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 17;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::PetAdventureItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAdventureResultNtfPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetAdventureResultNtfPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_RESULTNTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .Cmd.PetAdventureItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetAdventureResultNtfPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetAdventureResultNtfPetCmd)
  return false;
#undef DO_
}

void PetAdventureResultNtfPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetAdventureResultNtfPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_RESULTNTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.PetAdventureItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetAdventureResultNtfPetCmd)
}

::google::protobuf::uint8* PetAdventureResultNtfPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetAdventureResultNtfPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_RESULTNTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.PetAdventureItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetAdventureResultNtfPetCmd)
  return target;
}

int PetAdventureResultNtfPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_RESULTNTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.PetAdventureItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAdventureResultNtfPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAdventureResultNtfPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAdventureResultNtfPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAdventureResultNtfPetCmd::MergeFrom(const PetAdventureResultNtfPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::PetAdventureItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAdventureResultNtfPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAdventureResultNtfPetCmd::CopyFrom(const PetAdventureResultNtfPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAdventureResultNtfPetCmd::IsInitialized() const {

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void PetAdventureResultNtfPetCmd::Swap(PetAdventureResultNtfPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAdventureResultNtfPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAdventureResultNtfPetCmd_descriptor_;
  metadata.reflection = PetAdventureResultNtfPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartAdventurePetCmd::kCmdFieldNumber;
const int StartAdventurePetCmd::kParamFieldNumber;
const int StartAdventurePetCmd::kIdFieldNumber;
const int StartAdventurePetCmd::kPetidsFieldNumber;
const int StartAdventurePetCmd::kSpecidFieldNumber;
#endif  // !_MSC_VER

StartAdventurePetCmd::StartAdventurePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartAdventurePetCmd)
}

void StartAdventurePetCmd::InitAsDefaultInstance() {
}

StartAdventurePetCmd::StartAdventurePetCmd(const StartAdventurePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartAdventurePetCmd)
}

void StartAdventurePetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 18;
  id_ = 0u;
  specid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartAdventurePetCmd::~StartAdventurePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StartAdventurePetCmd)
  SharedDtor();
}

void StartAdventurePetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartAdventurePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartAdventurePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartAdventurePetCmd_descriptor_;
}

const StartAdventurePetCmd& StartAdventurePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

StartAdventurePetCmd* StartAdventurePetCmd::default_instance_ = NULL;

StartAdventurePetCmd* StartAdventurePetCmd::New() const {
  return new StartAdventurePetCmd;
}

void StartAdventurePetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartAdventurePetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(id_, specid_);
    cmd_ = 10;
    param_ = 18;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  petids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartAdventurePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartAdventurePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_START];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_petids;
        break;
      }

      // repeated string petids = 4;
      case 4: {
        if (tag == 34) {
         parse_petids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_petids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->petids(this->petids_size() - 1).data(),
            this->petids(this->petids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "petids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_petids;
        if (input->ExpectTag(40)) goto parse_specid;
        break;
      }

      // optional uint32 specid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_specid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specid_)));
          set_has_specid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartAdventurePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartAdventurePetCmd)
  return false;
#undef DO_
}

void StartAdventurePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartAdventurePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_START];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // repeated string petids = 4;
  for (int i = 0; i < this->petids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->petids(i).data(), this->petids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "petids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->petids(i), output);
  }

  // optional uint32 specid = 5 [default = 0];
  if (has_specid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->specid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartAdventurePetCmd)
}

::google::protobuf::uint8* StartAdventurePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartAdventurePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_START];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // repeated string petids = 4;
  for (int i = 0; i < this->petids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->petids(i).data(), this->petids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "petids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->petids(i), target);
  }

  // optional uint32 specid = 5 [default = 0];
  if (has_specid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->specid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartAdventurePetCmd)
  return target;
}

int StartAdventurePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_START];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 specid = 5 [default = 0];
    if (has_specid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specid());
    }

  }
  // repeated string petids = 4;
  total_size += 1 * this->petids_size();
  for (int i = 0; i < this->petids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->petids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartAdventurePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartAdventurePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartAdventurePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartAdventurePetCmd::MergeFrom(const StartAdventurePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  petids_.MergeFrom(from.petids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_specid()) {
      set_specid(from.specid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartAdventurePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAdventurePetCmd::CopyFrom(const StartAdventurePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAdventurePetCmd::IsInitialized() const {

  return true;
}

void StartAdventurePetCmd::Swap(StartAdventurePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    petids_.Swap(&other->petids_);
    std::swap(specid_, other->specid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartAdventurePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartAdventurePetCmd_descriptor_;
  metadata.reflection = StartAdventurePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAdventureRewardPetCmd::kCmdFieldNumber;
const int GetAdventureRewardPetCmd::kParamFieldNumber;
const int GetAdventureRewardPetCmd::kIdFieldNumber;
#endif  // !_MSC_VER

GetAdventureRewardPetCmd::GetAdventureRewardPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetAdventureRewardPetCmd)
}

void GetAdventureRewardPetCmd::InitAsDefaultInstance() {
}

GetAdventureRewardPetCmd::GetAdventureRewardPetCmd(const GetAdventureRewardPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetAdventureRewardPetCmd)
}

void GetAdventureRewardPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 19;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAdventureRewardPetCmd::~GetAdventureRewardPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetAdventureRewardPetCmd)
  SharedDtor();
}

void GetAdventureRewardPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAdventureRewardPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAdventureRewardPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAdventureRewardPetCmd_descriptor_;
}

const GetAdventureRewardPetCmd& GetAdventureRewardPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

GetAdventureRewardPetCmd* GetAdventureRewardPetCmd::default_instance_ = NULL;

GetAdventureRewardPetCmd* GetAdventureRewardPetCmd::New() const {
  return new GetAdventureRewardPetCmd;
}

void GetAdventureRewardPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 19;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAdventureRewardPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetAdventureRewardPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_GETREWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetAdventureRewardPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetAdventureRewardPetCmd)
  return false;
#undef DO_
}

void GetAdventureRewardPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetAdventureRewardPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_GETREWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetAdventureRewardPetCmd)
}

::google::protobuf::uint8* GetAdventureRewardPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetAdventureRewardPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_GETREWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetAdventureRewardPetCmd)
  return target;
}

int GetAdventureRewardPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_GETREWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAdventureRewardPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAdventureRewardPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAdventureRewardPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAdventureRewardPetCmd::MergeFrom(const GetAdventureRewardPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAdventureRewardPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAdventureRewardPetCmd::CopyFrom(const GetAdventureRewardPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAdventureRewardPetCmd::IsInitialized() const {

  return true;
}

void GetAdventureRewardPetCmd::Swap(GetAdventureRewardPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAdventureRewardPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAdventureRewardPetCmd_descriptor_;
  metadata.reflection = GetAdventureRewardPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBattlePetCmd::kCmdFieldNumber;
const int QueryBattlePetCmd::kParamFieldNumber;
const int QueryBattlePetCmd::kPetsFieldNumber;
#endif  // !_MSC_VER

QueryBattlePetCmd::QueryBattlePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryBattlePetCmd)
}

void QueryBattlePetCmd::InitAsDefaultInstance() {
}

QueryBattlePetCmd::QueryBattlePetCmd(const QueryBattlePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryBattlePetCmd)
}

void QueryBattlePetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBattlePetCmd::~QueryBattlePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryBattlePetCmd)
  SharedDtor();
}

void QueryBattlePetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryBattlePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBattlePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBattlePetCmd_descriptor_;
}

const QueryBattlePetCmd& QueryBattlePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

QueryBattlePetCmd* QueryBattlePetCmd::default_instance_ = NULL;

QueryBattlePetCmd* QueryBattlePetCmd::New() const {
  return new QueryBattlePetCmd;
}

void QueryBattlePetCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 20;
  }
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBattlePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryBattlePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYBATTLEPET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pets;
        break;
      }

      // repeated .Cmd.ItemData pets = 3;
      case 3: {
        if (tag == 26) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryBattlePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryBattlePetCmd)
  return false;
#undef DO_
}

void QueryBattlePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryBattlePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYBATTLEPET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ItemData pets = 3;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryBattlePetCmd)
}

::google::protobuf::uint8* QueryBattlePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryBattlePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYBATTLEPET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ItemData pets = 3;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryBattlePetCmd)
  return target;
}

int QueryBattlePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_ADVENTURE_QUERYBATTLEPET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ItemData pets = 3;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBattlePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBattlePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBattlePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBattlePetCmd::MergeFrom(const QueryBattlePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  pets_.MergeFrom(from.pets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBattlePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBattlePetCmd::CopyFrom(const QueryBattlePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBattlePetCmd::IsInitialized() const {

  return true;
}

void QueryBattlePetCmd::Swap(QueryBattlePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBattlePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBattlePetCmd_descriptor_;
  metadata.reflection = QueryBattlePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandPetPetCmd::kCmdFieldNumber;
const int HandPetPetCmd::kParamFieldNumber;
const int HandPetPetCmd::kPetguidFieldNumber;
const int HandPetPetCmd::kBreakupFieldNumber;
#endif  // !_MSC_VER

HandPetPetCmd::HandPetPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HandPetPetCmd)
}

void HandPetPetCmd::InitAsDefaultInstance() {
}

HandPetPetCmd::HandPetPetCmd(const HandPetPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HandPetPetCmd)
}

void HandPetPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 21;
  petguid_ = GOOGLE_ULONGLONG(0);
  breakup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandPetPetCmd::~HandPetPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HandPetPetCmd)
  SharedDtor();
}

void HandPetPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandPetPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandPetPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandPetPetCmd_descriptor_;
}

const HandPetPetCmd& HandPetPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

HandPetPetCmd* HandPetPetCmd::default_instance_ = NULL;

HandPetPetCmd* HandPetPetCmd::New() const {
  return new HandPetPetCmd;
}

void HandPetPetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandPetPetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(petguid_, breakup_);
    cmd_ = 10;
    param_ = 21;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandPetPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HandPetPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_INVITE_HAND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petguid;
        break;
      }

      // required uint64 petguid = 3;
      case 3: {
        if (tag == 24) {
         parse_petguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &petguid_)));
          set_has_petguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_breakup;
        break;
      }

      // optional bool breakup = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_breakup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breakup_)));
          set_has_breakup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HandPetPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HandPetPetCmd)
  return false;
#undef DO_
}

void HandPetPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HandPetPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_INVITE_HAND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 petguid = 3;
  if (has_petguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->petguid(), output);
  }

  // optional bool breakup = 4 [default = false];
  if (has_breakup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->breakup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HandPetPetCmd)
}

::google::protobuf::uint8* HandPetPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HandPetPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_INVITE_HAND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 petguid = 3;
  if (has_petguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->petguid(), target);
  }

  // optional bool breakup = 4 [default = false];
  if (has_breakup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->breakup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HandPetPetCmd)
  return target;
}

int HandPetPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_INVITE_HAND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 petguid = 3;
    if (has_petguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->petguid());
    }

    // optional bool breakup = 4 [default = false];
    if (has_breakup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandPetPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandPetPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandPetPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandPetPetCmd::MergeFrom(const HandPetPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petguid()) {
      set_petguid(from.petguid());
    }
    if (from.has_breakup()) {
      set_breakup(from.breakup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandPetPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandPetPetCmd::CopyFrom(const HandPetPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandPetPetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void HandPetPetCmd::Swap(HandPetPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petguid_, other->petguid_);
    std::swap(breakup_, other->breakup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandPetPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandPetPetCmd_descriptor_;
  metadata.reflection = HandPetPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiveGiftPetCmd::kCmdFieldNumber;
const int GiveGiftPetCmd::kParamFieldNumber;
const int GiveGiftPetCmd::kPetidFieldNumber;
const int GiveGiftPetCmd::kItemguidFieldNumber;
#endif  // !_MSC_VER

GiveGiftPetCmd::GiveGiftPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GiveGiftPetCmd)
}

void GiveGiftPetCmd::InitAsDefaultInstance() {
}

GiveGiftPetCmd::GiveGiftPetCmd(const GiveGiftPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GiveGiftPetCmd)
}

void GiveGiftPetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 22;
  petid_ = 0u;
  itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveGiftPetCmd::~GiveGiftPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GiveGiftPetCmd)
  SharedDtor();
}

void GiveGiftPetCmd::SharedDtor() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (this != default_instance_) {
  }
}

void GiveGiftPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveGiftPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveGiftPetCmd_descriptor_;
}

const GiveGiftPetCmd& GiveGiftPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

GiveGiftPetCmd* GiveGiftPetCmd::default_instance_ = NULL;

GiveGiftPetCmd* GiveGiftPetCmd::New() const {
  return new GiveGiftPetCmd;
}

void GiveGiftPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 10;
    param_ = 22;
    petid_ = 0u;
    if (has_itemguid()) {
      if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemguid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiveGiftPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GiveGiftPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_GIVE_GIFT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // required uint32 petid = 3;
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemguid;
        break;
      }

      // optional string itemguid = 4;
      case 4: {
        if (tag == 34) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid().data(), this->itemguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GiveGiftPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GiveGiftPetCmd)
  return false;
#undef DO_
}

void GiveGiftPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GiveGiftPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_GIVE_GIFT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // optional string itemguid = 4;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->itemguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GiveGiftPetCmd)
}

::google::protobuf::uint8* GiveGiftPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GiveGiftPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_GIVE_GIFT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // optional string itemguid = 4;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->itemguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GiveGiftPetCmd)
  return target;
}

int GiveGiftPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_GIVE_GIFT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional string itemguid = 4;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveGiftPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiveGiftPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiveGiftPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiveGiftPetCmd::MergeFrom(const GiveGiftPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiveGiftPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveGiftPetCmd::CopyFrom(const GiveGiftPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveGiftPetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GiveGiftPetCmd::Swap(GiveGiftPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiveGiftPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveGiftPetCmd_descriptor_;
  metadata.reflection = GiveGiftPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockNtfPetCmd::kCmdFieldNumber;
const int UnlockNtfPetCmd::kParamFieldNumber;
const int UnlockNtfPetCmd::kPetidFieldNumber;
const int UnlockNtfPetCmd::kEquipidsFieldNumber;
const int UnlockNtfPetCmd::kBodysFieldNumber;
#endif  // !_MSC_VER

UnlockNtfPetCmd::UnlockNtfPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UnlockNtfPetCmd)
}

void UnlockNtfPetCmd::InitAsDefaultInstance() {
}

UnlockNtfPetCmd::UnlockNtfPetCmd(const UnlockNtfPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UnlockNtfPetCmd)
}

void UnlockNtfPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 23;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockNtfPetCmd::~UnlockNtfPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UnlockNtfPetCmd)
  SharedDtor();
}

void UnlockNtfPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockNtfPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockNtfPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockNtfPetCmd_descriptor_;
}

const UnlockNtfPetCmd& UnlockNtfPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

UnlockNtfPetCmd* UnlockNtfPetCmd::default_instance_ = NULL;

UnlockNtfPetCmd* UnlockNtfPetCmd::New() const {
  return new UnlockNtfPetCmd;
}

void UnlockNtfPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 23;
    petid_ = 0u;
  }
  equipids_.Clear();
  bodys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockNtfPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UnlockNtfPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_UNLOCK_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional uint32 petid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_equipids;
        break;
      }

      // repeated uint32 equipids = 4;
      case 4: {
        if (tag == 32) {
         parse_equipids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_equipids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equipids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_equipids;
        if (input->ExpectTag(40)) goto parse_bodys;
        break;
      }

      // repeated uint32 bodys = 5;
      case 5: {
        if (tag == 40) {
         parse_bodys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_bodys())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bodys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bodys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UnlockNtfPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UnlockNtfPetCmd)
  return false;
#undef DO_
}

void UnlockNtfPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UnlockNtfPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_UNLOCK_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // repeated uint32 equipids = 4;
  for (int i = 0; i < this->equipids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->equipids(i), output);
  }

  // repeated uint32 bodys = 5;
  for (int i = 0; i < this->bodys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->bodys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UnlockNtfPetCmd)
}

::google::protobuf::uint8* UnlockNtfPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UnlockNtfPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_UNLOCK_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // repeated uint32 equipids = 4;
  for (int i = 0; i < this->equipids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->equipids(i), target);
  }

  // repeated uint32 bodys = 5;
  for (int i = 0; i < this->bodys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->bodys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UnlockNtfPetCmd)
  return target;
}

int UnlockNtfPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_UNLOCK_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 petid = 3 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  // repeated uint32 equipids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equipids(i));
    }
    total_size += 1 * this->equipids_size() + data_size;
  }

  // repeated uint32 bodys = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->bodys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bodys(i));
    }
    total_size += 1 * this->bodys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockNtfPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockNtfPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockNtfPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockNtfPetCmd::MergeFrom(const UnlockNtfPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipids_.MergeFrom(from.equipids_);
  bodys_.MergeFrom(from.bodys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockNtfPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockNtfPetCmd::CopyFrom(const UnlockNtfPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockNtfPetCmd::IsInitialized() const {

  return true;
}

void UnlockNtfPetCmd::Swap(UnlockNtfPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    equipids_.Swap(&other->equipids_);
    bodys_.Swap(&other->bodys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockNtfPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockNtfPetCmd_descriptor_;
  metadata.reflection = UnlockNtfPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetSkillPetCmd::kCmdFieldNumber;
const int ResetSkillPetCmd::kParamFieldNumber;
const int ResetSkillPetCmd::kIdFieldNumber;
#endif  // !_MSC_VER

ResetSkillPetCmd::ResetSkillPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ResetSkillPetCmd)
}

void ResetSkillPetCmd::InitAsDefaultInstance() {
}

ResetSkillPetCmd::ResetSkillPetCmd(const ResetSkillPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ResetSkillPetCmd)
}

void ResetSkillPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 24;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetSkillPetCmd::~ResetSkillPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ResetSkillPetCmd)
  SharedDtor();
}

void ResetSkillPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetSkillPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetSkillPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetSkillPetCmd_descriptor_;
}

const ResetSkillPetCmd& ResetSkillPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

ResetSkillPetCmd* ResetSkillPetCmd::default_instance_ = NULL;

ResetSkillPetCmd* ResetSkillPetCmd::New() const {
  return new ResetSkillPetCmd;
}

void ResetSkillPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 24;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetSkillPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ResetSkillPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESET_SKILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ResetSkillPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ResetSkillPetCmd)
  return false;
#undef DO_
}

void ResetSkillPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ResetSkillPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESET_SKILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ResetSkillPetCmd)
}

::google::protobuf::uint8* ResetSkillPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ResetSkillPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESET_SKILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ResetSkillPetCmd)
  return target;
}

int ResetSkillPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_RESET_SKILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetSkillPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetSkillPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetSkillPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetSkillPetCmd::MergeFrom(const ResetSkillPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetSkillPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetSkillPetCmd::CopyFrom(const ResetSkillPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetSkillPetCmd::IsInitialized() const {

  return true;
}

void ResetSkillPetCmd::Swap(ResetSkillPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetSkillPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetSkillPetCmd_descriptor_;
  metadata.reflection = ResetSkillPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNamePetCmd::kCmdFieldNumber;
const int ChangeNamePetCmd::kParamFieldNumber;
const int ChangeNamePetCmd::kPetidFieldNumber;
const int ChangeNamePetCmd::kNameFieldNumber;
#endif  // !_MSC_VER

ChangeNamePetCmd::ChangeNamePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeNamePetCmd)
}

void ChangeNamePetCmd::InitAsDefaultInstance() {
}

ChangeNamePetCmd::ChangeNamePetCmd(const ChangeNamePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeNamePetCmd)
}

void ChangeNamePetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 26;
  petid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNamePetCmd::~ChangeNamePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeNamePetCmd)
  SharedDtor();
}

void ChangeNamePetCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChangeNamePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNamePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNamePetCmd_descriptor_;
}

const ChangeNamePetCmd& ChangeNamePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

ChangeNamePetCmd* ChangeNamePetCmd::default_instance_ = NULL;

ChangeNamePetCmd* ChangeNamePetCmd::New() const {
  return new ChangeNamePetCmd;
}

void ChangeNamePetCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 10;
    param_ = 26;
    petid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNamePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeNamePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_NAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional uint32 petid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeNamePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeNamePetCmd)
  return false;
#undef DO_
}

void ChangeNamePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeNamePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_NAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeNamePetCmd)
}

::google::protobuf::uint8* ChangeNamePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeNamePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_NAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeNamePetCmd)
  return target;
}

int ChangeNamePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_NAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 petid = 3 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNamePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNamePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNamePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNamePetCmd::MergeFrom(const ChangeNamePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNamePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNamePetCmd::CopyFrom(const ChangeNamePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNamePetCmd::IsInitialized() const {

  return true;
}

void ChangeNamePetCmd::Swap(ChangeNamePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNamePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNamePetCmd_descriptor_;
  metadata.reflection = ChangeNamePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwitchSkillPetCmd::kCmdFieldNumber;
const int SwitchSkillPetCmd::kParamFieldNumber;
const int SwitchSkillPetCmd::kPetidFieldNumber;
const int SwitchSkillPetCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

SwitchSkillPetCmd::SwitchSkillPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SwitchSkillPetCmd)
}

void SwitchSkillPetCmd::InitAsDefaultInstance() {
}

SwitchSkillPetCmd::SwitchSkillPetCmd(const SwitchSkillPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SwitchSkillPetCmd)
}

void SwitchSkillPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 27;
  petid_ = 0u;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchSkillPetCmd::~SwitchSkillPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SwitchSkillPetCmd)
  SharedDtor();
}

void SwitchSkillPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwitchSkillPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchSkillPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchSkillPetCmd_descriptor_;
}

const SwitchSkillPetCmd& SwitchSkillPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

SwitchSkillPetCmd* SwitchSkillPetCmd::default_instance_ = NULL;

SwitchSkillPetCmd* SwitchSkillPetCmd::New() const {
  return new SwitchSkillPetCmd;
}

void SwitchSkillPetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SwitchSkillPetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(petid_, open_);
    cmd_ = 10;
    param_ = 27;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchSkillPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SwitchSkillPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_SWITCH_SKILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional uint32 petid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SwitchSkillPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SwitchSkillPetCmd)
  return false;
#undef DO_
}

void SwitchSkillPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SwitchSkillPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_SWITCH_SKILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SwitchSkillPetCmd)
}

::google::protobuf::uint8* SwitchSkillPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SwitchSkillPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_SWITCH_SKILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 petid = 3 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SwitchSkillPetCmd)
  return target;
}

int SwitchSkillPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_SWITCH_SKILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 petid = 3 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // optional bool open = 4 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchSkillPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchSkillPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchSkillPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchSkillPetCmd::MergeFrom(const SwitchSkillPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchSkillPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchSkillPetCmd::CopyFrom(const SwitchSkillPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchSkillPetCmd::IsInitialized() const {

  return true;
}

void SwitchSkillPetCmd::Swap(SwitchSkillPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchSkillPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchSkillPetCmd_descriptor_;
  metadata.reflection = SwitchSkillPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkSpace::kIdFieldNumber;
const int WorkSpace::kStarttimeFieldNumber;
const int WorkSpace::kLastrewardtimeFieldNumber;
const int WorkSpace::kUnlockFieldNumber;
const int WorkSpace::kStateFieldNumber;
const int WorkSpace::kDatasFieldNumber;
const int WorkSpace::kCountsFieldNumber;
const int WorkSpace::kLastCountsFieldNumber;
#endif  // !_MSC_VER

WorkSpace::WorkSpace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorkSpace)
}

void WorkSpace::InitAsDefaultInstance() {
}

WorkSpace::WorkSpace(const WorkSpace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorkSpace)
}

void WorkSpace::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  starttime_ = 0u;
  lastrewardtime_ = 0u;
  unlock_ = false;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkSpace::~WorkSpace() {
  // @@protoc_insertion_point(destructor:Cmd.WorkSpace)
  SharedDtor();
}

void WorkSpace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkSpace_descriptor_;
}

const WorkSpace& WorkSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

WorkSpace* WorkSpace::default_instance_ = NULL;

WorkSpace* WorkSpace::New() const {
  return new WorkSpace;
}

void WorkSpace::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkSpace*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, unlock_);
    state_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  counts_.Clear();
  last_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorkSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlock;
        break;
      }

      // optional bool unlock = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EWorkState state = 4 [default = EWORKSTATE_MIN];
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EWorkState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EWorkState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        break;
      }

      // repeated .Cmd.ItemData datas = 5;
      case 5: {
        if (tag == 42) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        if (input->ExpectTag(48)) goto parse_counts;
        break;
      }

      // repeated uint32 counts = 6;
      case 6: {
        if (tag == 48) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_counts())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_counts;
        if (input->ExpectTag(56)) goto parse_lastrewardtime;
        break;
      }

      // optional uint32 lastrewardtime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_lastrewardtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrewardtime_)));
          set_has_lastrewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_counts;
        break;
      }

      // repeated uint32 last_counts = 8;
      case 8: {
        if (tag == 64) {
         parse_last_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_last_counts())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_last_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_counts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorkSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorkSpace)
  return false;
#undef DO_
}

void WorkSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorkSpace)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 starttime = 2 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttime(), output);
  }

  // optional bool unlock = 3 [default = false];
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unlock(), output);
  }

  // optional .Cmd.EWorkState state = 4 [default = EWORKSTATE_MIN];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // repeated .Cmd.ItemData datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->datas(i), output);
  }

  // repeated uint32 counts = 6;
  for (int i = 0; i < this->counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->counts(i), output);
  }

  // optional uint32 lastrewardtime = 7 [default = 0];
  if (has_lastrewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lastrewardtime(), output);
  }

  // repeated uint32 last_counts = 8;
  for (int i = 0; i < this->last_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->last_counts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorkSpace)
}

::google::protobuf::uint8* WorkSpace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorkSpace)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 starttime = 2 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttime(), target);
  }

  // optional bool unlock = 3 [default = false];
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unlock(), target);
  }

  // optional .Cmd.EWorkState state = 4 [default = EWORKSTATE_MIN];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // repeated .Cmd.ItemData datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->datas(i), target);
  }

  // repeated uint32 counts = 6;
  for (int i = 0; i < this->counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->counts(i), target);
  }

  // optional uint32 lastrewardtime = 7 [default = 0];
  if (has_lastrewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lastrewardtime(), target);
  }

  // repeated uint32 last_counts = 8;
  for (int i = 0; i < this->last_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->last_counts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorkSpace)
  return target;
}

int WorkSpace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 starttime = 2 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 lastrewardtime = 7 [default = 0];
    if (has_lastrewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrewardtime());
    }

    // optional bool unlock = 3 [default = false];
    if (has_unlock()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.EWorkState state = 4 [default = EWORKSTATE_MIN];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated .Cmd.ItemData datas = 5;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated uint32 counts = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->counts(i));
    }
    total_size += 1 * this->counts_size() + data_size;
  }

  // repeated uint32 last_counts = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->last_counts(i));
    }
    total_size += 1 * this->last_counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkSpace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkSpace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkSpace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkSpace::MergeFrom(const WorkSpace& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  counts_.MergeFrom(from.counts_);
  last_counts_.MergeFrom(from.last_counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_lastrewardtime()) {
      set_lastrewardtime(from.lastrewardtime());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkSpace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkSpace::CopyFrom(const WorkSpace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkSpace::IsInitialized() const {

  return true;
}

void WorkSpace::Swap(WorkSpace* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starttime_, other->starttime_);
    std::swap(lastrewardtime_, other->lastrewardtime_);
    std::swap(unlock_, other->unlock_);
    std::swap(state_, other->state_);
    datas_.Swap(&other->datas_);
    counts_.Swap(&other->counts_);
    last_counts_.Swap(&other->last_counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkSpace_descriptor_;
  metadata.reflection = WorkSpace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkManual::kUnlockFieldNumber;
#endif  // !_MSC_VER

WorkManual::WorkManual()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorkManual)
}

void WorkManual::InitAsDefaultInstance() {
}

WorkManual::WorkManual(const WorkManual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorkManual)
}

void WorkManual::SharedCtor() {
  _cached_size_ = 0;
  unlock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkManual::~WorkManual() {
  // @@protoc_insertion_point(destructor:Cmd.WorkManual)
  SharedDtor();
}

void WorkManual::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkManual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkManual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkManual_descriptor_;
}

const WorkManual& WorkManual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

WorkManual* WorkManual::default_instance_ = NULL;

WorkManual* WorkManual::New() const {
  return new WorkManual;
}

void WorkManual::Clear() {
  unlock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkManual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorkManual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool unlock = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorkManual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorkManual)
  return false;
#undef DO_
}

void WorkManual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorkManual)
  // optional bool unlock = 1 [default = false];
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorkManual)
}

::google::protobuf::uint8* WorkManual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorkManual)
  // optional bool unlock = 1 [default = false];
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorkManual)
  return target;
}

int WorkManual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool unlock = 1 [default = false];
    if (has_unlock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkManual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkManual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkManual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkManual::MergeFrom(const WorkManual& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkManual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkManual::CopyFrom(const WorkManual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkManual::IsInitialized() const {

  return true;
}

void WorkManual::Swap(WorkManual* other) {
  if (other != this) {
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkManual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkManual_descriptor_;
  metadata.reflection = WorkManual_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkPetExtra::kGuidFieldNumber;
const int WorkPetExtra::kLastspaceidFieldNumber;
const int WorkPetExtra::kCountFieldNumber;
#endif  // !_MSC_VER

WorkPetExtra::WorkPetExtra()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorkPetExtra)
}

void WorkPetExtra::InitAsDefaultInstance() {
}

WorkPetExtra::WorkPetExtra(const WorkPetExtra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorkPetExtra)
}

void WorkPetExtra::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastspaceid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkPetExtra::~WorkPetExtra() {
  // @@protoc_insertion_point(destructor:Cmd.WorkPetExtra)
  SharedDtor();
}

void WorkPetExtra::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void WorkPetExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkPetExtra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkPetExtra_descriptor_;
}

const WorkPetExtra& WorkPetExtra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

WorkPetExtra* WorkPetExtra::default_instance_ = NULL;

WorkPetExtra* WorkPetExtra::New() const {
  return new WorkPetExtra;
}

void WorkPetExtra::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkPetExtra*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(lastspaceid_, count_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkPetExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorkPetExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastspaceid;
        break;
      }

      // optional uint32 lastspaceid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_lastspaceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastspaceid_)));
          set_has_lastspaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorkPetExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorkPetExtra)
  return false;
#undef DO_
}

void WorkPetExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorkPetExtra)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 lastspaceid = 2 [default = 0];
  if (has_lastspaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastspaceid(), output);
  }

  // optional uint32 count = 3 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorkPetExtra)
}

::google::protobuf::uint8* WorkPetExtra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorkPetExtra)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 lastspaceid = 2 [default = 0];
  if (has_lastspaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lastspaceid(), target);
  }

  // optional uint32 count = 3 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorkPetExtra)
  return target;
}

int WorkPetExtra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 lastspaceid = 2 [default = 0];
    if (has_lastspaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastspaceid());
    }

    // optional uint32 count = 3 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkPetExtra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkPetExtra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkPetExtra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkPetExtra::MergeFrom(const WorkPetExtra& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_lastspaceid()) {
      set_lastspaceid(from.lastspaceid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkPetExtra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkPetExtra::CopyFrom(const WorkPetExtra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkPetExtra::IsInitialized() const {

  return true;
}

void WorkPetExtra::Swap(WorkPetExtra* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(lastspaceid_, other->lastspaceid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkPetExtra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkPetExtra_descriptor_;
  metadata.reflection = WorkPetExtra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkDayReward::kIdFieldNumber;
const int WorkDayReward::kTimeFieldNumber;
#endif  // !_MSC_VER

WorkDayReward::WorkDayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorkDayReward)
}

void WorkDayReward::InitAsDefaultInstance() {
}

WorkDayReward::WorkDayReward(const WorkDayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorkDayReward)
}

void WorkDayReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkDayReward::~WorkDayReward() {
  // @@protoc_insertion_point(destructor:Cmd.WorkDayReward)
  SharedDtor();
}

void WorkDayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkDayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkDayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkDayReward_descriptor_;
}

const WorkDayReward& WorkDayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

WorkDayReward* WorkDayReward::default_instance_ = NULL;

WorkDayReward* WorkDayReward::New() const {
  return new WorkDayReward;
}

void WorkDayReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkDayReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkDayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorkDayReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorkDayReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorkDayReward)
  return false;
#undef DO_
}

void WorkDayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorkDayReward)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorkDayReward)
}

::google::protobuf::uint8* WorkDayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorkDayReward)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorkDayReward)
  return target;
}

int WorkDayReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkDayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkDayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkDayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkDayReward::MergeFrom(const WorkDayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkDayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkDayReward::CopyFrom(const WorkDayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkDayReward::IsInitialized() const {

  return true;
}

void WorkDayReward::Swap(WorkDayReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkDayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkDayReward_descriptor_;
  metadata.reflection = WorkDayReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockPetWorkManualPetCmd::kCmdFieldNumber;
const int UnlockPetWorkManualPetCmd::kParamFieldNumber;
#endif  // !_MSC_VER

UnlockPetWorkManualPetCmd::UnlockPetWorkManualPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UnlockPetWorkManualPetCmd)
}

void UnlockPetWorkManualPetCmd::InitAsDefaultInstance() {
}

UnlockPetWorkManualPetCmd::UnlockPetWorkManualPetCmd(const UnlockPetWorkManualPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UnlockPetWorkManualPetCmd)
}

void UnlockPetWorkManualPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 28;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPetWorkManualPetCmd::~UnlockPetWorkManualPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UnlockPetWorkManualPetCmd)
  SharedDtor();
}

void UnlockPetWorkManualPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockPetWorkManualPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPetWorkManualPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPetWorkManualPetCmd_descriptor_;
}

const UnlockPetWorkManualPetCmd& UnlockPetWorkManualPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

UnlockPetWorkManualPetCmd* UnlockPetWorkManualPetCmd::default_instance_ = NULL;

UnlockPetWorkManualPetCmd* UnlockPetWorkManualPetCmd::New() const {
  return new UnlockPetWorkManualPetCmd;
}

void UnlockPetWorkManualPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 28;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPetWorkManualPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UnlockPetWorkManualPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_UNLOCKMANUAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UnlockPetWorkManualPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UnlockPetWorkManualPetCmd)
  return false;
#undef DO_
}

void UnlockPetWorkManualPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UnlockPetWorkManualPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_UNLOCKMANUAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UnlockPetWorkManualPetCmd)
}

::google::protobuf::uint8* UnlockPetWorkManualPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UnlockPetWorkManualPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_UNLOCKMANUAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UnlockPetWorkManualPetCmd)
  return target;
}

int UnlockPetWorkManualPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_UNLOCKMANUAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPetWorkManualPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPetWorkManualPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPetWorkManualPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPetWorkManualPetCmd::MergeFrom(const UnlockPetWorkManualPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPetWorkManualPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPetWorkManualPetCmd::CopyFrom(const UnlockPetWorkManualPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPetWorkManualPetCmd::IsInitialized() const {

  return true;
}

void UnlockPetWorkManualPetCmd::Swap(UnlockPetWorkManualPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPetWorkManualPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPetWorkManualPetCmd_descriptor_;
  metadata.reflection = UnlockPetWorkManualPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartWorkPetCmd::kCmdFieldNumber;
const int StartWorkPetCmd::kParamFieldNumber;
const int StartWorkPetCmd::kIdFieldNumber;
const int StartWorkPetCmd::kPetsFieldNumber;
#endif  // !_MSC_VER

StartWorkPetCmd::StartWorkPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartWorkPetCmd)
}

void StartWorkPetCmd::InitAsDefaultInstance() {
}

StartWorkPetCmd::StartWorkPetCmd(const StartWorkPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartWorkPetCmd)
}

void StartWorkPetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 29;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartWorkPetCmd::~StartWorkPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StartWorkPetCmd)
  SharedDtor();
}

void StartWorkPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartWorkPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartWorkPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartWorkPetCmd_descriptor_;
}

const StartWorkPetCmd& StartWorkPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

StartWorkPetCmd* StartWorkPetCmd::default_instance_ = NULL;

StartWorkPetCmd* StartWorkPetCmd::New() const {
  return new StartWorkPetCmd;
}

void StartWorkPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 29;
    id_ = 0u;
  }
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartWorkPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartWorkPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STARTWORK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pets;
        break;
      }

      // repeated string pets = 4;
      case 4: {
        if (tag == 34) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pets(this->pets_size() - 1).data(),
            this->pets(this->pets_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pets");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartWorkPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartWorkPetCmd)
  return false;
#undef DO_
}

void StartWorkPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartWorkPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STARTWORK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // repeated string pets = 4;
  for (int i = 0; i < this->pets_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->pets(i).data(), this->pets(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "pets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartWorkPetCmd)
}

::google::protobuf::uint8* StartWorkPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartWorkPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STARTWORK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // repeated string pets = 4;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pets(i).data(), this->pets(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->pets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartWorkPetCmd)
  return target;
}

int StartWorkPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STARTWORK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated string pets = 4;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartWorkPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartWorkPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartWorkPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartWorkPetCmd::MergeFrom(const StartWorkPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  pets_.MergeFrom(from.pets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartWorkPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartWorkPetCmd::CopyFrom(const StartWorkPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartWorkPetCmd::IsInitialized() const {

  return true;
}

void StartWorkPetCmd::Swap(StartWorkPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartWorkPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartWorkPetCmd_descriptor_;
  metadata.reflection = StartWorkPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopWorkPetCmd::kCmdFieldNumber;
const int StopWorkPetCmd::kParamFieldNumber;
const int StopWorkPetCmd::kIdFieldNumber;
#endif  // !_MSC_VER

StopWorkPetCmd::StopWorkPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StopWorkPetCmd)
}

void StopWorkPetCmd::InitAsDefaultInstance() {
}

StopWorkPetCmd::StopWorkPetCmd(const StopWorkPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StopWorkPetCmd)
}

void StopWorkPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 30;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopWorkPetCmd::~StopWorkPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StopWorkPetCmd)
  SharedDtor();
}

void StopWorkPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopWorkPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopWorkPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopWorkPetCmd_descriptor_;
}

const StopWorkPetCmd& StopWorkPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

StopWorkPetCmd* StopWorkPetCmd::default_instance_ = NULL;

StopWorkPetCmd* StopWorkPetCmd::New() const {
  return new StopWorkPetCmd;
}

void StopWorkPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 30;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopWorkPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StopWorkPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STOPWORK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StopWorkPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StopWorkPetCmd)
  return false;
#undef DO_
}

void StopWorkPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StopWorkPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STOPWORK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StopWorkPetCmd)
}

::google::protobuf::uint8* StopWorkPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StopWorkPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STOPWORK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StopWorkPetCmd)
  return target;
}

int StopWorkPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_STOPWORK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopWorkPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopWorkPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopWorkPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopWorkPetCmd::MergeFrom(const StopWorkPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopWorkPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopWorkPetCmd::CopyFrom(const StopWorkPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopWorkPetCmd::IsInitialized() const {

  return true;
}

void StopWorkPetCmd::Swap(StopWorkPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopWorkPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopWorkPetCmd_descriptor_;
  metadata.reflection = StopWorkPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPetWorkManualPetCmd::kCmdFieldNumber;
const int QueryPetWorkManualPetCmd::kParamFieldNumber;
const int QueryPetWorkManualPetCmd::kManualFieldNumber;
#endif  // !_MSC_VER

QueryPetWorkManualPetCmd::QueryPetWorkManualPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryPetWorkManualPetCmd)
}

void QueryPetWorkManualPetCmd::InitAsDefaultInstance() {
  manual_ = const_cast< ::Cmd::WorkManual*>(&::Cmd::WorkManual::default_instance());
}

QueryPetWorkManualPetCmd::QueryPetWorkManualPetCmd(const QueryPetWorkManualPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryPetWorkManualPetCmd)
}

void QueryPetWorkManualPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 31;
  manual_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPetWorkManualPetCmd::~QueryPetWorkManualPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryPetWorkManualPetCmd)
  SharedDtor();
}

void QueryPetWorkManualPetCmd::SharedDtor() {
  if (this != default_instance_) {
    delete manual_;
  }
}

void QueryPetWorkManualPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPetWorkManualPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPetWorkManualPetCmd_descriptor_;
}

const QueryPetWorkManualPetCmd& QueryPetWorkManualPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

QueryPetWorkManualPetCmd* QueryPetWorkManualPetCmd::default_instance_ = NULL;

QueryPetWorkManualPetCmd* QueryPetWorkManualPetCmd::New() const {
  return new QueryPetWorkManualPetCmd;
}

void QueryPetWorkManualPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 31;
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::WorkManual::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPetWorkManualPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryPetWorkManualPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKMANUAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_manual;
        break;
      }

      // optional .Cmd.WorkManual manual = 3;
      case 3: {
        if (tag == 26) {
         parse_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryPetWorkManualPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryPetWorkManualPetCmd)
  return false;
#undef DO_
}

void QueryPetWorkManualPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryPetWorkManualPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKMANUAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.WorkManual manual = 3;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->manual(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryPetWorkManualPetCmd)
}

::google::protobuf::uint8* QueryPetWorkManualPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryPetWorkManualPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKMANUAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.WorkManual manual = 3;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->manual(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryPetWorkManualPetCmd)
  return target;
}

int QueryPetWorkManualPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKMANUAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.WorkManual manual = 3;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPetWorkManualPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPetWorkManualPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPetWorkManualPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPetWorkManualPetCmd::MergeFrom(const QueryPetWorkManualPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_manual()) {
      mutable_manual()->::Cmd::WorkManual::MergeFrom(from.manual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPetWorkManualPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPetWorkManualPetCmd::CopyFrom(const QueryPetWorkManualPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPetWorkManualPetCmd::IsInitialized() const {

  return true;
}

void QueryPetWorkManualPetCmd::Swap(QueryPetWorkManualPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(manual_, other->manual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPetWorkManualPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPetWorkManualPetCmd_descriptor_;
  metadata.reflection = QueryPetWorkManualPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPetWorkDataPetCmd::kCmdFieldNumber;
const int QueryPetWorkDataPetCmd::kParamFieldNumber;
const int QueryPetWorkDataPetCmd::kDatasFieldNumber;
const int QueryPetWorkDataPetCmd::kExtrasFieldNumber;
const int QueryPetWorkDataPetCmd::kMaxSpaceFieldNumber;
const int QueryPetWorkDataPetCmd::kCardExpiretimeFieldNumber;
#endif  // !_MSC_VER

QueryPetWorkDataPetCmd::QueryPetWorkDataPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryPetWorkDataPetCmd)
}

void QueryPetWorkDataPetCmd::InitAsDefaultInstance() {
}

QueryPetWorkDataPetCmd::QueryPetWorkDataPetCmd(const QueryPetWorkDataPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryPetWorkDataPetCmd)
}

void QueryPetWorkDataPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 32;
  max_space_ = 0u;
  card_expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPetWorkDataPetCmd::~QueryPetWorkDataPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryPetWorkDataPetCmd)
  SharedDtor();
}

void QueryPetWorkDataPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPetWorkDataPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPetWorkDataPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPetWorkDataPetCmd_descriptor_;
}

const QueryPetWorkDataPetCmd& QueryPetWorkDataPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

QueryPetWorkDataPetCmd* QueryPetWorkDataPetCmd::default_instance_ = NULL;

QueryPetWorkDataPetCmd* QueryPetWorkDataPetCmd::New() const {
  return new QueryPetWorkDataPetCmd;
}

void QueryPetWorkDataPetCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryPetWorkDataPetCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 51) {
    ZR_(max_space_, card_expiretime_);
    cmd_ = 10;
    param_ = 32;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  extras_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPetWorkDataPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryPetWorkDataPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.WorkSpace datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectTag(34)) goto parse_extras;
        break;
      }

      // repeated .Cmd.WorkPetExtra extras = 4;
      case 4: {
        if (tag == 34) {
         parse_extras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extras()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_extras;
        if (input->ExpectTag(40)) goto parse_max_space;
        break;
      }

      // optional uint32 max_space = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_max_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_space_)));
          set_has_max_space();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_card_expiretime;
        break;
      }

      // optional uint32 card_expiretime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_card_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_expiretime_)));
          set_has_card_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryPetWorkDataPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryPetWorkDataPetCmd)
  return false;
#undef DO_
}

void QueryPetWorkDataPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryPetWorkDataPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.WorkSpace datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  // repeated .Cmd.WorkPetExtra extras = 4;
  for (int i = 0; i < this->extras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extras(i), output);
  }

  // optional uint32 max_space = 5 [default = 0];
  if (has_max_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_space(), output);
  }

  // optional uint32 card_expiretime = 6 [default = 0];
  if (has_card_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryPetWorkDataPetCmd)
}

::google::protobuf::uint8* QueryPetWorkDataPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryPetWorkDataPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.WorkSpace datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  // repeated .Cmd.WorkPetExtra extras = 4;
  for (int i = 0; i < this->extras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extras(i), target);
  }

  // optional uint32 max_space = 5 [default = 0];
  if (has_max_space()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_space(), target);
  }

  // optional uint32 card_expiretime = 6 [default = 0];
  if (has_card_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryPetWorkDataPetCmd)
  return target;
}

int QueryPetWorkDataPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_QUERYWORKDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 max_space = 5 [default = 0];
    if (has_max_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_space());
    }

    // optional uint32 card_expiretime = 6 [default = 0];
    if (has_card_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_expiretime());
    }

  }
  // repeated .Cmd.WorkSpace datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.WorkPetExtra extras = 4;
  total_size += 1 * this->extras_size();
  for (int i = 0; i < this->extras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extras(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPetWorkDataPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPetWorkDataPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPetWorkDataPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPetWorkDataPetCmd::MergeFrom(const QueryPetWorkDataPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  extras_.MergeFrom(from.extras_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_max_space()) {
      set_max_space(from.max_space());
    }
    if (from.has_card_expiretime()) {
      set_card_expiretime(from.card_expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPetWorkDataPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPetWorkDataPetCmd::CopyFrom(const QueryPetWorkDataPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPetWorkDataPetCmd::IsInitialized() const {

  return true;
}

void QueryPetWorkDataPetCmd::Swap(QueryPetWorkDataPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    extras_.Swap(&other->extras_);
    std::swap(max_space_, other->max_space_);
    std::swap(card_expiretime_, other->card_expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPetWorkDataPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPetWorkDataPetCmd_descriptor_;
  metadata.reflection = QueryPetWorkDataPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPetWorkRewardPetCmd::kCmdFieldNumber;
const int GetPetWorkRewardPetCmd::kParamFieldNumber;
const int GetPetWorkRewardPetCmd::kIdFieldNumber;
#endif  // !_MSC_VER

GetPetWorkRewardPetCmd::GetPetWorkRewardPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetPetWorkRewardPetCmd)
}

void GetPetWorkRewardPetCmd::InitAsDefaultInstance() {
}

GetPetWorkRewardPetCmd::GetPetWorkRewardPetCmd(const GetPetWorkRewardPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetPetWorkRewardPetCmd)
}

void GetPetWorkRewardPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 33;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPetWorkRewardPetCmd::~GetPetWorkRewardPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetPetWorkRewardPetCmd)
  SharedDtor();
}

void GetPetWorkRewardPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPetWorkRewardPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPetWorkRewardPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPetWorkRewardPetCmd_descriptor_;
}

const GetPetWorkRewardPetCmd& GetPetWorkRewardPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

GetPetWorkRewardPetCmd* GetPetWorkRewardPetCmd::default_instance_ = NULL;

GetPetWorkRewardPetCmd* GetPetWorkRewardPetCmd::New() const {
  return new GetPetWorkRewardPetCmd;
}

void GetPetWorkRewardPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 33;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPetWorkRewardPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetPetWorkRewardPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_GETREWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetPetWorkRewardPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetPetWorkRewardPetCmd)
  return false;
#undef DO_
}

void GetPetWorkRewardPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetPetWorkRewardPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_GETREWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetPetWorkRewardPetCmd)
}

::google::protobuf::uint8* GetPetWorkRewardPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetPetWorkRewardPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_GETREWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetPetWorkRewardPetCmd)
  return target;
}

int GetPetWorkRewardPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_GETREWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPetWorkRewardPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPetWorkRewardPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPetWorkRewardPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPetWorkRewardPetCmd::MergeFrom(const GetPetWorkRewardPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPetWorkRewardPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPetWorkRewardPetCmd::CopyFrom(const GetPetWorkRewardPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPetWorkRewardPetCmd::IsInitialized() const {

  return true;
}

void GetPetWorkRewardPetCmd::Swap(GetPetWorkRewardPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPetWorkRewardPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPetWorkRewardPetCmd_descriptor_;
  metadata.reflection = GetPetWorkRewardPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkSpaceUpdate::kCmdFieldNumber;
const int WorkSpaceUpdate::kParamFieldNumber;
const int WorkSpaceUpdate::kUpdatesFieldNumber;
#endif  // !_MSC_VER

WorkSpaceUpdate::WorkSpaceUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorkSpaceUpdate)
}

void WorkSpaceUpdate::InitAsDefaultInstance() {
}

WorkSpaceUpdate::WorkSpaceUpdate(const WorkSpaceUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorkSpaceUpdate)
}

void WorkSpaceUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 34;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkSpaceUpdate::~WorkSpaceUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.WorkSpaceUpdate)
  SharedDtor();
}

void WorkSpaceUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkSpaceUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkSpaceUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkSpaceUpdate_descriptor_;
}

const WorkSpaceUpdate& WorkSpaceUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

WorkSpaceUpdate* WorkSpaceUpdate::default_instance_ = NULL;

WorkSpaceUpdate* WorkSpaceUpdate::New() const {
  return new WorkSpaceUpdate;
}

void WorkSpaceUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 34;
  }
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkSpaceUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorkSpaceUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_SPACEUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.WorkSpace updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorkSpaceUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorkSpaceUpdate)
  return false;
#undef DO_
}

void WorkSpaceUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorkSpaceUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_SPACEUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.WorkSpace updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorkSpaceUpdate)
}

::google::protobuf::uint8* WorkSpaceUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorkSpaceUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_SPACEUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.WorkSpace updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorkSpaceUpdate)
  return target;
}

int WorkSpaceUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_SPACEUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.WorkSpace updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkSpaceUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkSpaceUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkSpaceUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkSpaceUpdate::MergeFrom(const WorkSpaceUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkSpaceUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkSpaceUpdate::CopyFrom(const WorkSpaceUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkSpaceUpdate::IsInitialized() const {

  return true;
}

void WorkSpaceUpdate::Swap(WorkSpaceUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkSpaceUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkSpaceUpdate_descriptor_;
  metadata.reflection = WorkSpaceUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetExtraUpdatePetCmd::kCmdFieldNumber;
const int PetExtraUpdatePetCmd::kParamFieldNumber;
const int PetExtraUpdatePetCmd::kUpdatesFieldNumber;
#endif  // !_MSC_VER

PetExtraUpdatePetCmd::PetExtraUpdatePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetExtraUpdatePetCmd)
}

void PetExtraUpdatePetCmd::InitAsDefaultInstance() {
}

PetExtraUpdatePetCmd::PetExtraUpdatePetCmd(const PetExtraUpdatePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetExtraUpdatePetCmd)
}

void PetExtraUpdatePetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 35;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetExtraUpdatePetCmd::~PetExtraUpdatePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetExtraUpdatePetCmd)
  SharedDtor();
}

void PetExtraUpdatePetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetExtraUpdatePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetExtraUpdatePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetExtraUpdatePetCmd_descriptor_;
}

const PetExtraUpdatePetCmd& PetExtraUpdatePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetExtraUpdatePetCmd* PetExtraUpdatePetCmd::default_instance_ = NULL;

PetExtraUpdatePetCmd* PetExtraUpdatePetCmd::New() const {
  return new PetExtraUpdatePetCmd;
}

void PetExtraUpdatePetCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 35;
  }
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetExtraUpdatePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetExtraUpdatePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_EXTRAUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.WorkPetExtra updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetExtraUpdatePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetExtraUpdatePetCmd)
  return false;
#undef DO_
}

void PetExtraUpdatePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetExtraUpdatePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_EXTRAUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.WorkPetExtra updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetExtraUpdatePetCmd)
}

::google::protobuf::uint8* PetExtraUpdatePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetExtraUpdatePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_EXTRAUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.WorkPetExtra updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetExtraUpdatePetCmd)
  return target;
}

int PetExtraUpdatePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_WORK_EXTRAUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.WorkPetExtra updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetExtraUpdatePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetExtraUpdatePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetExtraUpdatePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetExtraUpdatePetCmd::MergeFrom(const PetExtraUpdatePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetExtraUpdatePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetExtraUpdatePetCmd::CopyFrom(const PetExtraUpdatePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetExtraUpdatePetCmd::IsInitialized() const {

  return true;
}

void PetExtraUpdatePetCmd::Swap(PetExtraUpdatePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetExtraUpdatePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetExtraUpdatePetCmd_descriptor_;
  metadata.reflection = PetExtraUpdatePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComposePetCmd::kCmdFieldNumber;
const int ComposePetCmd::kParamFieldNumber;
const int ComposePetCmd::kIdFieldNumber;
const int ComposePetCmd::kEggguidsFieldNumber;
#endif  // !_MSC_VER

ComposePetCmd::ComposePetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ComposePetCmd)
}

void ComposePetCmd::InitAsDefaultInstance() {
}

ComposePetCmd::ComposePetCmd(const ComposePetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ComposePetCmd)
}

void ComposePetCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 36;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComposePetCmd::~ComposePetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ComposePetCmd)
  SharedDtor();
}

void ComposePetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComposePetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComposePetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComposePetCmd_descriptor_;
}

const ComposePetCmd& ComposePetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

ComposePetCmd* ComposePetCmd::default_instance_ = NULL;

ComposePetCmd* ComposePetCmd::New() const {
  return new ComposePetCmd;
}

void ComposePetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 36;
    id_ = 0u;
  }
  eggguids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComposePetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ComposePetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_COMPOSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eggguids;
        break;
      }

      // repeated string eggguids = 4;
      case 4: {
        if (tag == 34) {
         parse_eggguids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_eggguids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eggguids(this->eggguids_size() - 1).data(),
            this->eggguids(this->eggguids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "eggguids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eggguids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ComposePetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ComposePetCmd)
  return false;
#undef DO_
}

void ComposePetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ComposePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_COMPOSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // repeated string eggguids = 4;
  for (int i = 0; i < this->eggguids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->eggguids(i).data(), this->eggguids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "eggguids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eggguids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ComposePetCmd)
}

::google::protobuf::uint8* ComposePetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ComposePetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_COMPOSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // repeated string eggguids = 4;
  for (int i = 0; i < this->eggguids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eggguids(i).data(), this->eggguids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eggguids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->eggguids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ComposePetCmd)
  return target;
}

int ComposePetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_COMPOSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated string eggguids = 4;
  total_size += 1 * this->eggguids_size();
  for (int i = 0; i < this->eggguids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->eggguids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComposePetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComposePetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComposePetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComposePetCmd::MergeFrom(const ComposePetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  eggguids_.MergeFrom(from.eggguids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComposePetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComposePetCmd::CopyFrom(const ComposePetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposePetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ComposePetCmd::Swap(ComposePetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    eggguids_.Swap(&other->eggguids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComposePetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComposePetCmd_descriptor_;
  metadata.reflection = ComposePetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecPetEquip::kBodyidFieldNumber;
const int SpecPetEquip::kItemidFieldNumber;
const int SpecPetEquip::kEposFieldNumber;
#endif  // !_MSC_VER

SpecPetEquip::SpecPetEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SpecPetEquip)
}

void SpecPetEquip::InitAsDefaultInstance() {
}

SpecPetEquip::SpecPetEquip(const SpecPetEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SpecPetEquip)
}

void SpecPetEquip::SharedCtor() {
  _cached_size_ = 0;
  bodyid_ = 0u;
  itemid_ = 0u;
  epos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecPetEquip::~SpecPetEquip() {
  // @@protoc_insertion_point(destructor:Cmd.SpecPetEquip)
  SharedDtor();
}

void SpecPetEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecPetEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecPetEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecPetEquip_descriptor_;
}

const SpecPetEquip& SpecPetEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

SpecPetEquip* SpecPetEquip::default_instance_ = NULL;

SpecPetEquip* SpecPetEquip::New() const {
  return new SpecPetEquip;
}

void SpecPetEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecPetEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bodyid_, epos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecPetEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SpecPetEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bodyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // required uint32 itemid = 2;
      case 2: {
        if (tag == 16) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_epos;
        break;
      }

      // optional .Cmd.EEquipPos epos = 3 [default = EEQUIPPOS_MIN];
      case 3: {
        if (tag == 24) {
         parse_epos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipPos_IsValid(value)) {
            set_epos(static_cast< ::Cmd::EEquipPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SpecPetEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SpecPetEquip)
  return false;
#undef DO_
}

void SpecPetEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SpecPetEquip)
  // required uint32 bodyid = 1;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bodyid(), output);
  }

  // required uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional .Cmd.EEquipPos epos = 3 [default = EEQUIPPOS_MIN];
  if (has_epos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->epos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SpecPetEquip)
}

::google::protobuf::uint8* SpecPetEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SpecPetEquip)
  // required uint32 bodyid = 1;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bodyid(), target);
  }

  // required uint32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional .Cmd.EEquipPos epos = 3 [default = EEQUIPPOS_MIN];
  if (has_epos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->epos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SpecPetEquip)
  return target;
}

int SpecPetEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bodyid = 1;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // required uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional .Cmd.EEquipPos epos = 3 [default = EEQUIPPOS_MIN];
    if (has_epos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->epos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecPetEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecPetEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecPetEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecPetEquip::MergeFrom(const SpecPetEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_epos()) {
      set_epos(from.epos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecPetEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecPetEquip::CopyFrom(const SpecPetEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecPetEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpecPetEquip::Swap(SpecPetEquip* other) {
  if (other != this) {
    std::swap(bodyid_, other->bodyid_);
    std::swap(itemid_, other->itemid_);
    std::swap(epos_, other->epos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecPetEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecPetEquip_descriptor_;
  metadata.reflection = SpecPetEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEquipUnlockInfo::kItemsFieldNumber;
const int PetEquipUnlockInfo::kBodyitemsFieldNumber;
#endif  // !_MSC_VER

PetEquipUnlockInfo::PetEquipUnlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetEquipUnlockInfo)
}

void PetEquipUnlockInfo::InitAsDefaultInstance() {
}

PetEquipUnlockInfo::PetEquipUnlockInfo(const PetEquipUnlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetEquipUnlockInfo)
}

void PetEquipUnlockInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEquipUnlockInfo::~PetEquipUnlockInfo() {
  // @@protoc_insertion_point(destructor:Cmd.PetEquipUnlockInfo)
  SharedDtor();
}

void PetEquipUnlockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEquipUnlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEquipUnlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEquipUnlockInfo_descriptor_;
}

const PetEquipUnlockInfo& PetEquipUnlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetEquipUnlockInfo* PetEquipUnlockInfo::default_instance_ = NULL;

PetEquipUnlockInfo* PetEquipUnlockInfo::New() const {
  return new PetEquipUnlockInfo;
}

void PetEquipUnlockInfo::Clear() {
  items_.Clear();
  bodyitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEquipUnlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetEquipUnlockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 items = 1;
      case 1: {
        if (tag == 8) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_items())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_bodyitems;
        break;
      }

      // repeated .Cmd.SpecPetEquip bodyitems = 2;
      case 2: {
        if (tag == 18) {
         parse_bodyitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodyitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bodyitems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetEquipUnlockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetEquipUnlockInfo)
  return false;
#undef DO_
}

void PetEquipUnlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetEquipUnlockInfo)
  // repeated uint32 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->items(i), output);
  }

  // repeated .Cmd.SpecPetEquip bodyitems = 2;
  for (int i = 0; i < this->bodyitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bodyitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetEquipUnlockInfo)
}

::google::protobuf::uint8* PetEquipUnlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetEquipUnlockInfo)
  // repeated uint32 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->items(i), target);
  }

  // repeated .Cmd.SpecPetEquip bodyitems = 2;
  for (int i = 0; i < this->bodyitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bodyitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetEquipUnlockInfo)
  return target;
}

int PetEquipUnlockInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 items = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }

  // repeated .Cmd.SpecPetEquip bodyitems = 2;
  total_size += 1 * this->bodyitems_size();
  for (int i = 0; i < this->bodyitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodyitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEquipUnlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEquipUnlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEquipUnlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEquipUnlockInfo::MergeFrom(const PetEquipUnlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  bodyitems_.MergeFrom(from.bodyitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEquipUnlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEquipUnlockInfo::CopyFrom(const PetEquipUnlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEquipUnlockInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bodyitems())) return false;
  return true;
}

void PetEquipUnlockInfo::Swap(PetEquipUnlockInfo* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    bodyitems_.Swap(&other->bodyitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEquipUnlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEquipUnlockInfo_descriptor_;
  metadata.reflection = PetEquipUnlockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEquipListCmd::kCmdFieldNumber;
const int PetEquipListCmd::kParamFieldNumber;
const int PetEquipListCmd::kUnlockinfoFieldNumber;
#endif  // !_MSC_VER

PetEquipListCmd::PetEquipListCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetEquipListCmd)
}

void PetEquipListCmd::InitAsDefaultInstance() {
  unlockinfo_ = const_cast< ::Cmd::PetEquipUnlockInfo*>(&::Cmd::PetEquipUnlockInfo::default_instance());
}

PetEquipListCmd::PetEquipListCmd(const PetEquipListCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetEquipListCmd)
}

void PetEquipListCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 37;
  unlockinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEquipListCmd::~PetEquipListCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PetEquipListCmd)
  SharedDtor();
}

void PetEquipListCmd::SharedDtor() {
  if (this != default_instance_) {
    delete unlockinfo_;
  }
}

void PetEquipListCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEquipListCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEquipListCmd_descriptor_;
}

const PetEquipListCmd& PetEquipListCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetEquipListCmd* PetEquipListCmd::default_instance_ = NULL;

PetEquipListCmd* PetEquipListCmd::New() const {
  return new PetEquipListCmd;
}

void PetEquipListCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 37;
    if (has_unlockinfo()) {
      if (unlockinfo_ != NULL) unlockinfo_->::Cmd::PetEquipUnlockInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEquipListCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetEquipListCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unlockinfo;
        break;
      }

      // optional .Cmd.PetEquipUnlockInfo unlockinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_unlockinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetEquipListCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetEquipListCmd)
  return false;
#undef DO_
}

void PetEquipListCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetEquipListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.PetEquipUnlockInfo unlockinfo = 3;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unlockinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetEquipListCmd)
}

::google::protobuf::uint8* PetEquipListCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetEquipListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.PetEquipUnlockInfo unlockinfo = 3;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unlockinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetEquipListCmd)
  return target;
}

int PetEquipListCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.PetEquipUnlockInfo unlockinfo = 3;
    if (has_unlockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEquipListCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEquipListCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEquipListCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEquipListCmd::MergeFrom(const PetEquipListCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::Cmd::PetEquipUnlockInfo::MergeFrom(from.unlockinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEquipListCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEquipListCmd::CopyFrom(const PetEquipListCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEquipListCmd::IsInitialized() const {

  if (has_unlockinfo()) {
    if (!this->unlockinfo().IsInitialized()) return false;
  }
  return true;
}

void PetEquipListCmd::Swap(PetEquipListCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(unlockinfo_, other->unlockinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEquipListCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEquipListCmd_descriptor_;
  metadata.reflection = PetEquipListCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePetEquipListCmd::kCmdFieldNumber;
const int UpdatePetEquipListCmd::kParamFieldNumber;
const int UpdatePetEquipListCmd::kAdditemsFieldNumber;
const int UpdatePetEquipListCmd::kAddbodyitemsFieldNumber;
#endif  // !_MSC_VER

UpdatePetEquipListCmd::UpdatePetEquipListCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdatePetEquipListCmd)
}

void UpdatePetEquipListCmd::InitAsDefaultInstance() {
}

UpdatePetEquipListCmd::UpdatePetEquipListCmd(const UpdatePetEquipListCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdatePetEquipListCmd)
}

void UpdatePetEquipListCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 38;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePetEquipListCmd::~UpdatePetEquipListCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdatePetEquipListCmd)
  SharedDtor();
}

void UpdatePetEquipListCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdatePetEquipListCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePetEquipListCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePetEquipListCmd_descriptor_;
}

const UpdatePetEquipListCmd& UpdatePetEquipListCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

UpdatePetEquipListCmd* UpdatePetEquipListCmd::default_instance_ = NULL;

UpdatePetEquipListCmd* UpdatePetEquipListCmd::New() const {
  return new UpdatePetEquipListCmd;
}

void UpdatePetEquipListCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 10;
    param_ = 38;
  }
  additems_.Clear();
  addbodyitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePetEquipListCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdatePetEquipListCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_additems;
        break;
      }

      // repeated uint32 additems = 3;
      case 3: {
        if (tag == 24) {
         parse_additems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_additems())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_additems())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_additems;
        if (input->ExpectTag(34)) goto parse_addbodyitems;
        break;
      }

      // repeated .Cmd.SpecPetEquip addbodyitems = 4;
      case 4: {
        if (tag == 34) {
         parse_addbodyitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addbodyitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addbodyitems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdatePetEquipListCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdatePetEquipListCmd)
  return false;
#undef DO_
}

void UpdatePetEquipListCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdatePetEquipListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 additems = 3;
  for (int i = 0; i < this->additems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->additems(i), output);
  }

  // repeated .Cmd.SpecPetEquip addbodyitems = 4;
  for (int i = 0; i < this->addbodyitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->addbodyitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdatePetEquipListCmd)
}

::google::protobuf::uint8* UpdatePetEquipListCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdatePetEquipListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 additems = 3;
  for (int i = 0; i < this->additems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->additems(i), target);
  }

  // repeated .Cmd.SpecPetEquip addbodyitems = 4;
  for (int i = 0; i < this->addbodyitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->addbodyitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdatePetEquipListCmd)
  return target;
}

int UpdatePetEquipListCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_EQUIP_LIST_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 additems = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->additems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->additems(i));
    }
    total_size += 1 * this->additems_size() + data_size;
  }

  // repeated .Cmd.SpecPetEquip addbodyitems = 4;
  total_size += 1 * this->addbodyitems_size();
  for (int i = 0; i < this->addbodyitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addbodyitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePetEquipListCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePetEquipListCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePetEquipListCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePetEquipListCmd::MergeFrom(const UpdatePetEquipListCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  additems_.MergeFrom(from.additems_);
  addbodyitems_.MergeFrom(from.addbodyitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePetEquipListCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePetEquipListCmd::CopyFrom(const UpdatePetEquipListCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePetEquipListCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->addbodyitems())) return false;
  return true;
}

void UpdatePetEquipListCmd::Swap(UpdatePetEquipListCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    additems_.Swap(&other->additems_);
    addbodyitems_.Swap(&other->addbodyitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePetEquipListCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePetEquipListCmd_descriptor_;
  metadata.reflection = UpdatePetEquipListCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetWearInfo::kEposFieldNumber;
const int PetWearInfo::kItemidFieldNumber;
const int PetWearInfo::kOperFieldNumber;
#endif  // !_MSC_VER

PetWearInfo::PetWearInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetWearInfo)
}

void PetWearInfo::InitAsDefaultInstance() {
}

PetWearInfo::PetWearInfo(const PetWearInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetWearInfo)
}

void PetWearInfo::SharedCtor() {
  _cached_size_ = 0;
  epos_ = 0;
  itemid_ = 0u;
  oper_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetWearInfo::~PetWearInfo() {
  // @@protoc_insertion_point(destructor:Cmd.PetWearInfo)
  SharedDtor();
}

void PetWearInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetWearInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetWearInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetWearInfo_descriptor_;
}

const PetWearInfo& PetWearInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

PetWearInfo* PetWearInfo::default_instance_ = NULL;

PetWearInfo* PetWearInfo::New() const {
  return new PetWearInfo;
}

void PetWearInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetWearInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(epos_, itemid_);
    oper_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetWearInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetWearInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cmd.EEquipPos epos = 4;
      case 4: {
        if (tag == 32) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEquipPos_IsValid(value)) {
            set_epos(static_cast< ::Cmd::EEquipPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_oper;
        break;
      }

      // optional .Cmd.EPetEquipOper oper = 6 [default = EPETEQUIPOPER_ON];
      case 6: {
        if (tag == 48) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetEquipOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EPetEquipOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetWearInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetWearInfo)
  return false;
#undef DO_
}

void PetWearInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetWearInfo)
  // required .Cmd.EEquipPos epos = 4;
  if (has_epos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->epos(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional .Cmd.EPetEquipOper oper = 6 [default = EPETEQUIPOPER_ON];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetWearInfo)
}

::google::protobuf::uint8* PetWearInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetWearInfo)
  // required .Cmd.EEquipPos epos = 4;
  if (has_epos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->epos(), target);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional .Cmd.EPetEquipOper oper = 6 [default = EPETEQUIPOPER_ON];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetWearInfo)
  return target;
}

int PetWearInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cmd.EEquipPos epos = 4;
    if (has_epos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->epos());
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional .Cmd.EPetEquipOper oper = 6 [default = EPETEQUIPOPER_ON];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetWearInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetWearInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetWearInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetWearInfo::MergeFrom(const PetWearInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epos()) {
      set_epos(from.epos());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetWearInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetWearInfo::CopyFrom(const PetWearInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetWearInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PetWearInfo::Swap(PetWearInfo* other) {
  if (other != this) {
    std::swap(epos_, other->epos_);
    std::swap(itemid_, other->itemid_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetWearInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetWearInfo_descriptor_;
  metadata.reflection = PetWearInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeWearPetCmd::kCmdFieldNumber;
const int ChangeWearPetCmd::kParamFieldNumber;
const int ChangeWearPetCmd::kPetidFieldNumber;
const int ChangeWearPetCmd::kWearinfoFieldNumber;
#endif  // !_MSC_VER

ChangeWearPetCmd::ChangeWearPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeWearPetCmd)
}

void ChangeWearPetCmd::InitAsDefaultInstance() {
}

ChangeWearPetCmd::ChangeWearPetCmd(const ChangeWearPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeWearPetCmd)
}

void ChangeWearPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 39;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeWearPetCmd::~ChangeWearPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeWearPetCmd)
  SharedDtor();
}

void ChangeWearPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeWearPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeWearPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeWearPetCmd_descriptor_;
}

const ChangeWearPetCmd& ChangeWearPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

ChangeWearPetCmd* ChangeWearPetCmd::default_instance_ = NULL;

ChangeWearPetCmd* ChangeWearPetCmd::New() const {
  return new ChangeWearPetCmd;
}

void ChangeWearPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 39;
    petid_ = 0u;
  }
  wearinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeWearPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeWearPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_WEAR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // required uint32 petid = 3;
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wearinfo;
        break;
      }

      // repeated .Cmd.PetWearInfo wearinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_wearinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wearinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wearinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeWearPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeWearPetCmd)
  return false;
#undef DO_
}

void ChangeWearPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeWearPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_WEAR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // repeated .Cmd.PetWearInfo wearinfo = 4;
  for (int i = 0; i < this->wearinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wearinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeWearPetCmd)
}

::google::protobuf::uint8* ChangeWearPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeWearPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_WEAR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // repeated .Cmd.PetWearInfo wearinfo = 4;
  for (int i = 0; i < this->wearinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->wearinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeWearPetCmd)
  return target;
}

int ChangeWearPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_CHANGE_WEAR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  // repeated .Cmd.PetWearInfo wearinfo = 4;
  total_size += 1 * this->wearinfo_size();
  for (int i = 0; i < this->wearinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wearinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeWearPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeWearPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeWearPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeWearPetCmd::MergeFrom(const ChangeWearPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  wearinfo_.MergeFrom(from.wearinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeWearPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeWearPetCmd::CopyFrom(const ChangeWearPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeWearPetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->wearinfo())) return false;
  return true;
}

void ChangeWearPetCmd::Swap(ChangeWearPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    wearinfo_.Swap(&other->wearinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeWearPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeWearPetCmd_descriptor_;
  metadata.reflection = ChangeWearPetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateWearPetCmd::kCmdFieldNumber;
const int UpdateWearPetCmd::kParamFieldNumber;
const int UpdateWearPetCmd::kPetidFieldNumber;
const int UpdateWearPetCmd::kWearinfoFieldNumber;
#endif  // !_MSC_VER

UpdateWearPetCmd::UpdateWearPetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateWearPetCmd)
}

void UpdateWearPetCmd::InitAsDefaultInstance() {
}

UpdateWearPetCmd::UpdateWearPetCmd(const UpdateWearPetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateWearPetCmd)
}

void UpdateWearPetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 10;
  param_ = 40;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateWearPetCmd::~UpdateWearPetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateWearPetCmd)
  SharedDtor();
}

void UpdateWearPetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateWearPetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWearPetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateWearPetCmd_descriptor_;
}

const UpdateWearPetCmd& UpdateWearPetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScenePet_2eproto();
  return *default_instance_;
}

UpdateWearPetCmd* UpdateWearPetCmd::default_instance_ = NULL;

UpdateWearPetCmd* UpdateWearPetCmd::New() const {
  return new UpdateWearPetCmd;
}

void UpdateWearPetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 10;
    param_ = 40;
    petid_ = 0u;
  }
  wearinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateWearPetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateWearPetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.PetParam param = 2 [default = PETPARAM_UPDATE_WEAR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PetParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::PetParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // required uint32 petid = 3;
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wearinfo;
        break;
      }

      // repeated .Cmd.PetWearInfo wearinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_wearinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wearinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wearinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateWearPetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateWearPetCmd)
  return false;
#undef DO_
}

void UpdateWearPetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateWearPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_UPDATE_WEAR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->petid(), output);
  }

  // repeated .Cmd.PetWearInfo wearinfo = 4;
  for (int i = 0; i < this->wearinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wearinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateWearPetCmd)
}

::google::protobuf::uint8* UpdateWearPetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateWearPetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.PetParam param = 2 [default = PETPARAM_UPDATE_WEAR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->petid(), target);
  }

  // repeated .Cmd.PetWearInfo wearinfo = 4;
  for (int i = 0; i < this->wearinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->wearinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateWearPetCmd)
  return target;
}

int UpdateWearPetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PET_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.PetParam param = 2 [default = PETPARAM_UPDATE_WEAR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  // repeated .Cmd.PetWearInfo wearinfo = 4;
  total_size += 1 * this->wearinfo_size();
  for (int i = 0; i < this->wearinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wearinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWearPetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateWearPetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateWearPetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateWearPetCmd::MergeFrom(const UpdateWearPetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  wearinfo_.MergeFrom(from.wearinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateWearPetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWearPetCmd::CopyFrom(const UpdateWearPetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWearPetCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->wearinfo())) return false;
  return true;
}

void UpdateWearPetCmd::Swap(UpdateWearPetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(petid_, other->petid_);
    wearinfo_.Swap(&other->wearinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateWearPetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateWearPetCmd_descriptor_;
  metadata.reflection = UpdateWearPetCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
