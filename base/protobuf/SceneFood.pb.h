// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneFood.proto

#ifndef PROTOBUF_SceneFood_2eproto__INCLUDED
#define PROTOBUF_SceneFood_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneFood_2eproto();
void protobuf_AssignDesc_SceneFood_2eproto();
void protobuf_ShutdownFile_SceneFood_2eproto();

class CookStateMsg;
class CookStateNtf;
class PrepareCook;
class SelectCookType;
class BriefItemInfo;
class StartCook;
class PutFood;
class EditFoodPower;
class FoodItemInfo2;
class QueryFoodNpcInfo;
class StartEat;
class StopEat;
class EatProgressNtf;
class FoodInfoNtf;
class UpdateFoodInfo;
class UnlockRecipeNtf;
class FoodSubData;
class FoodManualData;
class QueryFoodManualData;
class NewFoodDataNtf;
class ClickFoodManualData;

enum FoodParam {
  FOODPARAM_COOK_STATE_NTF = 1,
  FOODPARAM_PREPARECOOK = 2,
  FOODPARAM_SELECT_COOKTYPE = 3,
  FOODPARAM_START_COOK = 4,
  FOODPARAM_PUT_FOOD = 5,
  FOODPARAM_EDIT_FOOD_POWER = 6,
  FOODPARAM_EAT_PROGRESS_NTF = 7,
  FOODPARAM_QUERY_FOOD_NPC_INFO = 8,
  FOODPARAM_START_EAT = 9,
  FOODPARAM_STOP_EAT = 10,
  FOODPARAM_FOOD_INFO_NTF = 11,
  FOODPARAM_UNLOCK_RECIPE_NTF = 12,
  FOODPARAM_QUERY_FOOD_DATA = 13,
  FOODPARAM_NEW_FOOD_DATA_NTF = 14,
  FOODPARAM_CLICK_FOOD_MANUAL_DATA = 15,
  FOODPARAM_UPDATE_FOOD_INFO_NTF = 16
};
bool FoodParam_IsValid(int value);
const FoodParam FoodParam_MIN = FOODPARAM_COOK_STATE_NTF;
const FoodParam FoodParam_MAX = FOODPARAM_UPDATE_FOOD_INFO_NTF;
const int FoodParam_ARRAYSIZE = FoodParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* FoodParam_descriptor();
inline const ::std::string& FoodParam_Name(FoodParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    FoodParam_descriptor(), value);
}
inline bool FoodParam_Parse(
    const ::std::string& name, FoodParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FoodParam>(
    FoodParam_descriptor(), name, value);
}
enum ECookType {
  ECOOKTYPE_MIN = 0,
  ECOOKTYPE_JIANCHAO = 1,
  ECOOKTYPE_BARBECUE = 2,
  ECOOKTYPE_SOUP = 3,
  ECOOKTYPE_DESSERT = 4,
  ECOOKTYPE_MAX = 5
};
bool ECookType_IsValid(int value);
const ECookType ECookType_MIN = ECOOKTYPE_MIN;
const ECookType ECookType_MAX = ECOOKTYPE_MAX;
const int ECookType_ARRAYSIZE = ECookType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECookType_descriptor();
inline const ::std::string& ECookType_Name(ECookType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECookType_descriptor(), value);
}
inline bool ECookType_Parse(
    const ::std::string& name, ECookType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECookType>(
    ECookType_descriptor(), name, value);
}
enum ECookState {
  ECOOKSTATE_NONE = 0,
  ECOOKSTATE_PREPAREING = 1,
  ECOOKSTATE_COOKING = 2,
  ECOOKSTATE_COMPLETE = 3
};
bool ECookState_IsValid(int value);
const ECookState ECookState_MIN = ECOOKSTATE_NONE;
const ECookState ECookState_MAX = ECOOKSTATE_COMPLETE;
const int ECookState_ARRAYSIZE = ECookState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECookState_descriptor();
inline const ::std::string& ECookState_Name(ECookState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECookState_descriptor(), value);
}
inline bool ECookState_Parse(
    const ::std::string& name, ECookState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECookState>(
    ECookState_descriptor(), name, value);
}
enum EEatPower {
  EEATPOWR_SELF = 1,
  EEATPOWR_TEAM = 2,
  EEATPOWR_ALL = 3
};
bool EEatPower_IsValid(int value);
const EEatPower EEatPower_MIN = EEATPOWR_SELF;
const EEatPower EEatPower_MAX = EEATPOWR_ALL;
const int EEatPower_ARRAYSIZE = EEatPower_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEatPower_descriptor();
inline const ::std::string& EEatPower_Name(EEatPower value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEatPower_descriptor(), value);
}
inline bool EEatPower_Parse(
    const ::std::string& name, EEatPower* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEatPower>(
    EEatPower_descriptor(), name, value);
}
enum EFoodDataType {
  EFOODDATATYPE_MIN = 0,
  EFOODDATATYPE_MATERIAL = 1,
  EFOODDATATYPE_FOODCOOK = 2,
  EFOODDATATYPE_FOODTASTE = 3,
  EFOODDATATYPE_MAX = 4
};
bool EFoodDataType_IsValid(int value);
const EFoodDataType EFoodDataType_MIN = EFOODDATATYPE_MIN;
const EFoodDataType EFoodDataType_MAX = EFOODDATATYPE_MAX;
const int EFoodDataType_ARRAYSIZE = EFoodDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFoodDataType_descriptor();
inline const ::std::string& EFoodDataType_Name(EFoodDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFoodDataType_descriptor(), value);
}
inline bool EFoodDataType_Parse(
    const ::std::string& name, EFoodDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFoodDataType>(
    EFoodDataType_descriptor(), name, value);
}
enum EFoodStatus {
  EFOODSTATUS_MIN = 0,
  EFOODSTATUS_ADD = 1,
  EFOODSTATUS_CLICKED = 2,
  EFOODSTATUS_MAX = 3
};
bool EFoodStatus_IsValid(int value);
const EFoodStatus EFoodStatus_MIN = EFOODSTATUS_MIN;
const EFoodStatus EFoodStatus_MAX = EFOODSTATUS_MAX;
const int EFoodStatus_ARRAYSIZE = EFoodStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFoodStatus_descriptor();
inline const ::std::string& EFoodStatus_Name(EFoodStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFoodStatus_descriptor(), value);
}
inline bool EFoodStatus_Parse(
    const ::std::string& name, EFoodStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFoodStatus>(
    EFoodStatus_descriptor(), name, value);
}
// ===================================================================

class CookStateMsg : public ::google::protobuf::Message {
 public:
  CookStateMsg();
  virtual ~CookStateMsg();

  CookStateMsg(const CookStateMsg& from);

  inline CookStateMsg& operator=(const CookStateMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CookStateMsg& default_instance();

  void Swap(CookStateMsg* other);

  // implements Message ----------------------------------------------

  CookStateMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CookStateMsg& from);
  void MergeFrom(const CookStateMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ECookState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::Cmd::ECookState state() const;
  inline void set_state(::Cmd::ECookState value);

  // optional .Cmd.ECookType cooktype = 2;
  inline bool has_cooktype() const;
  inline void clear_cooktype();
  static const int kCooktypeFieldNumber = 2;
  inline ::Cmd::ECookType cooktype() const;
  inline void set_cooktype(::Cmd::ECookType value);

  // optional uint32 progress = 3;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // repeated uint32 foodid = 5;
  inline int foodid_size() const;
  inline void clear_foodid();
  static const int kFoodidFieldNumber = 5;
  inline ::google::protobuf::uint32 foodid(int index) const;
  inline void set_foodid(int index, ::google::protobuf::uint32 value);
  inline void add_foodid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      foodid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_foodid();

  // @@protoc_insertion_point(class_scope:Cmd.CookStateMsg)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cooktype();
  inline void clear_has_cooktype();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int state_;
  int cooktype_;
  ::google::protobuf::uint32 progress_;
  bool success_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > foodid_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static CookStateMsg* default_instance_;
};
// -------------------------------------------------------------------

class CookStateNtf : public ::google::protobuf::Message {
 public:
  CookStateNtf();
  virtual ~CookStateNtf();

  CookStateNtf(const CookStateNtf& from);

  inline CookStateNtf& operator=(const CookStateNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CookStateNtf& default_instance();

  void Swap(CookStateNtf* other);

  // implements Message ----------------------------------------------

  CookStateNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CookStateNtf& from);
  void MergeFrom(const CookStateNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_COOK_STATE_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional .Cmd.CookStateMsg state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline const ::Cmd::CookStateMsg& state() const;
  inline ::Cmd::CookStateMsg* mutable_state();
  inline ::Cmd::CookStateMsg* release_state();
  inline void set_allocated_state(::Cmd::CookStateMsg* state);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.CookStateNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::CookStateMsg* state_;
  ::google::protobuf::uint64 charid_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static CookStateNtf* default_instance_;
};
// -------------------------------------------------------------------

class PrepareCook : public ::google::protobuf::Message {
 public:
  PrepareCook();
  virtual ~PrepareCook();

  PrepareCook(const PrepareCook& from);

  inline PrepareCook& operator=(const PrepareCook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareCook& default_instance();

  void Swap(PrepareCook* other);

  // implements Message ----------------------------------------------

  PrepareCook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrepareCook& from);
  void MergeFrom(const PrepareCook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PREPARECOOK];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional bool start = 3 [default = true];
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline bool start() const;
  inline void set_start(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.PrepareCook)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_start();
  inline void clear_has_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool start_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static PrepareCook* default_instance_;
};
// -------------------------------------------------------------------

class SelectCookType : public ::google::protobuf::Message {
 public:
  SelectCookType();
  virtual ~SelectCookType();

  SelectCookType(const SelectCookType& from);

  inline SelectCookType& operator=(const SelectCookType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectCookType& default_instance();

  void Swap(SelectCookType* other);

  // implements Message ----------------------------------------------

  SelectCookType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectCookType& from);
  void MergeFrom(const SelectCookType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_SELECT_COOKTYPE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional .Cmd.ECookType cooktype = 3;
  inline bool has_cooktype() const;
  inline void clear_cooktype();
  static const int kCooktypeFieldNumber = 3;
  inline ::Cmd::ECookType cooktype() const;
  inline void set_cooktype(::Cmd::ECookType value);

  // @@protoc_insertion_point(class_scope:Cmd.SelectCookType)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cooktype();
  inline void clear_has_cooktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int cooktype_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static SelectCookType* default_instance_;
};
// -------------------------------------------------------------------

class BriefItemInfo : public ::google::protobuf::Message {
 public:
  BriefItemInfo();
  virtual ~BriefItemInfo();

  BriefItemInfo(const BriefItemInfo& from);

  inline BriefItemInfo& operator=(const BriefItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BriefItemInfo& default_instance();

  void Swap(BriefItemInfo* other);

  // implements Message ----------------------------------------------

  BriefItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BriefItemInfo& from);
  void MergeFrom(const BriefItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BriefItemInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static BriefItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class StartCook : public ::google::protobuf::Message {
 public:
  StartCook();
  virtual ~StartCook();

  StartCook(const StartCook& from);

  inline StartCook& operator=(const StartCook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartCook& default_instance();

  void Swap(StartCook* other);

  // implements Message ----------------------------------------------

  StartCook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartCook& from);
  void MergeFrom(const StartCook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_COOK];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional .Cmd.ECookType cooktype = 3;
  inline bool has_cooktype() const;
  inline void clear_cooktype();
  static const int kCooktypeFieldNumber = 3;
  inline ::Cmd::ECookType cooktype() const;
  inline void set_cooktype(::Cmd::ECookType value);

  // repeated .Cmd.BriefItemInfo material = 4;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 4;
  inline const ::Cmd::BriefItemInfo& material(int index) const;
  inline ::Cmd::BriefItemInfo* mutable_material(int index);
  inline ::Cmd::BriefItemInfo* add_material();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BriefItemInfo >&
      material() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BriefItemInfo >*
      mutable_material();

  // optional uint32 recipe = 5;
  inline bool has_recipe() const;
  inline void clear_recipe();
  static const int kRecipeFieldNumber = 5;
  inline ::google::protobuf::uint32 recipe() const;
  inline void set_recipe(::google::protobuf::uint32 value);

  // optional bool skipanimation = 6 [default = false];
  inline bool has_skipanimation() const;
  inline void clear_skipanimation();
  static const int kSkipanimationFieldNumber = 6;
  inline bool skipanimation() const;
  inline void set_skipanimation(bool value);

  // repeated uint32 recipes = 7;
  inline int recipes_size() const;
  inline void clear_recipes();
  static const int kRecipesFieldNumber = 7;
  inline ::google::protobuf::uint32 recipes(int index) const;
  inline void set_recipes(int index, ::google::protobuf::uint32 value);
  inline void add_recipes(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recipes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recipes();

  // @@protoc_insertion_point(class_scope:Cmd.StartCook)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cooktype();
  inline void clear_has_cooktype();
  inline void set_has_recipe();
  inline void clear_has_recipe();
  inline void set_has_skipanimation();
  inline void clear_has_skipanimation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BriefItemInfo > material_;
  int cooktype_;
  ::google::protobuf::uint32 recipe_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recipes_;
  bool skipanimation_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static StartCook* default_instance_;
};
// -------------------------------------------------------------------

class PutFood : public ::google::protobuf::Message {
 public:
  PutFood();
  virtual ~PutFood();

  PutFood(const PutFood& from);

  inline PutFood& operator=(const PutFood& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutFood& default_instance();

  void Swap(PutFood* other);

  // implements Message ----------------------------------------------

  PutFood* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutFood& from);
  void MergeFrom(const PutFood& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PUT_FOOD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional string foodguid = 3;
  inline bool has_foodguid() const;
  inline void clear_foodguid();
  static const int kFoodguidFieldNumber = 3;
  inline const ::std::string& foodguid() const;
  inline void set_foodguid(const ::std::string& value);
  inline void set_foodguid(const char* value);
  inline void set_foodguid(const char* value, size_t size);
  inline ::std::string* mutable_foodguid();
  inline ::std::string* release_foodguid();
  inline void set_allocated_foodguid(::std::string* foodguid);

  // optional .Cmd.EEatPower power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  inline ::Cmd::EEatPower power() const;
  inline void set_power(::Cmd::EEatPower value);

  // optional uint32 foodnum = 5;
  inline bool has_foodnum() const;
  inline void clear_foodnum();
  static const int kFoodnumFieldNumber = 5;
  inline ::google::protobuf::uint32 foodnum() const;
  inline void set_foodnum(::google::protobuf::uint32 value);

  // optional bool peteat = 6 [default = false];
  inline bool has_peteat() const;
  inline void clear_peteat();
  static const int kPeteatFieldNumber = 6;
  inline bool peteat() const;
  inline void set_peteat(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.PutFood)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_foodguid();
  inline void clear_has_foodguid();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_foodnum();
  inline void clear_has_foodnum();
  inline void set_has_peteat();
  inline void clear_has_peteat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* foodguid_;
  int power_;
  ::google::protobuf::uint32 foodnum_;
  bool peteat_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static PutFood* default_instance_;
};
// -------------------------------------------------------------------

class EditFoodPower : public ::google::protobuf::Message {
 public:
  EditFoodPower();
  virtual ~EditFoodPower();

  EditFoodPower(const EditFoodPower& from);

  inline EditFoodPower& operator=(const EditFoodPower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EditFoodPower& default_instance();

  void Swap(EditFoodPower* other);

  // implements Message ----------------------------------------------

  EditFoodPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EditFoodPower& from);
  void MergeFrom(const EditFoodPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EDIT_FOOD_POWER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional uint64 npcguid = 3;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // optional .Cmd.EEatPower power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  inline ::Cmd::EEatPower power() const;
  inline void set_power(::Cmd::EEatPower value);

  // @@protoc_insertion_point(class_scope:Cmd.EditFoodPower)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcguid_;
  int power_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static EditFoodPower* default_instance_;
};
// -------------------------------------------------------------------

class FoodItemInfo2 : public ::google::protobuf::Message {
 public:
  FoodItemInfo2();
  virtual ~FoodItemInfo2();

  FoodItemInfo2(const FoodItemInfo2& from);

  inline FoodItemInfo2& operator=(const FoodItemInfo2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodItemInfo2& default_instance();

  void Swap(FoodItemInfo2* other);

  // implements Message ----------------------------------------------

  FoodItemInfo2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodItemInfo2& from);
  void MergeFrom(const FoodItemInfo2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 invalid_time = 2;
  inline bool has_invalid_time() const;
  inline void clear_invalid_time();
  static const int kInvalidTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 invalid_time() const;
  inline void set_invalid_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.FoodItemInfo2)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_invalid_time();
  inline void clear_has_invalid_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 invalid_time_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static FoodItemInfo2* default_instance_;
};
// -------------------------------------------------------------------

class QueryFoodNpcInfo : public ::google::protobuf::Message {
 public:
  QueryFoodNpcInfo();
  virtual ~QueryFoodNpcInfo();

  QueryFoodNpcInfo(const QueryFoodNpcInfo& from);

  inline QueryFoodNpcInfo& operator=(const QueryFoodNpcInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFoodNpcInfo& default_instance();

  void Swap(QueryFoodNpcInfo* other);

  // implements Message ----------------------------------------------

  QueryFoodNpcInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFoodNpcInfo& from);
  void MergeFrom(const QueryFoodNpcInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_NPC_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional uint64 npcguid = 3;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // optional uint32 eating_people = 4;
  inline bool has_eating_people() const;
  inline void clear_eating_people();
  static const int kEatingPeopleFieldNumber = 4;
  inline ::google::protobuf::uint32 eating_people() const;
  inline void set_eating_people(::google::protobuf::uint32 value);

  // optional uint32 itemid = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 5;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 ownerid = 6;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 6;
  inline ::google::protobuf::uint64 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint64 value);

  // optional uint32 itemnum = 7;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemnumFieldNumber = 7;
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryFoodNpcInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();
  inline void set_has_eating_people();
  inline void clear_has_eating_people();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcguid_;
  ::google::protobuf::uint32 eating_people_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint64 ownerid_;
  ::google::protobuf::uint32 itemnum_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static QueryFoodNpcInfo* default_instance_;
};
// -------------------------------------------------------------------

class StartEat : public ::google::protobuf::Message {
 public:
  StartEat();
  virtual ~StartEat();

  StartEat(const StartEat& from);

  inline StartEat& operator=(const StartEat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartEat& default_instance();

  void Swap(StartEat* other);

  // implements Message ----------------------------------------------

  StartEat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartEat& from);
  void MergeFrom(const StartEat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_EAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional uint64 npcguid = 3;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // optional bool pet = 4 [default = false];
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 4;
  inline bool pet() const;
  inline void set_pet(bool value);

  // optional uint32 eatnum = 5;
  inline bool has_eatnum() const;
  inline void clear_eatnum();
  static const int kEatnumFieldNumber = 5;
  inline ::google::protobuf::uint32 eatnum() const;
  inline void set_eatnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.StartEat)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_eatnum();
  inline void clear_has_eatnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcguid_;
  bool pet_;
  ::google::protobuf::uint32 eatnum_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static StartEat* default_instance_;
};
// -------------------------------------------------------------------

class StopEat : public ::google::protobuf::Message {
 public:
  StopEat();
  virtual ~StopEat();

  StopEat(const StopEat& from);

  inline StopEat& operator=(const StopEat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopEat& default_instance();

  void Swap(StopEat* other);

  // implements Message ----------------------------------------------

  StopEat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopEat& from);
  void MergeFrom(const StopEat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_STOP_EAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional uint64 npcguid = 3;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.StopEat)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcguid_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static StopEat* default_instance_;
};
// -------------------------------------------------------------------

class EatProgressNtf : public ::google::protobuf::Message {
 public:
  EatProgressNtf();
  virtual ~EatProgressNtf();

  EatProgressNtf(const EatProgressNtf& from);

  inline EatProgressNtf& operator=(const EatProgressNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EatProgressNtf& default_instance();

  void Swap(EatProgressNtf* other);

  // implements Message ----------------------------------------------

  EatProgressNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EatProgressNtf& from);
  void MergeFrom(const EatProgressNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EAT_PROGRESS_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional uint32 progress = 3;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // optional uint64 npcguid = 4;
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 4;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.EatProgressNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcguid_;
  ::google::protobuf::uint32 progress_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static EatProgressNtf* default_instance_;
};
// -------------------------------------------------------------------

class FoodInfoNtf : public ::google::protobuf::Message {
 public:
  FoodInfoNtf();
  virtual ~FoodInfoNtf();

  FoodInfoNtf(const FoodInfoNtf& from);

  inline FoodInfoNtf& operator=(const FoodInfoNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodInfoNtf& default_instance();

  void Swap(FoodInfoNtf* other);

  // implements Message ----------------------------------------------

  FoodInfoNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodInfoNtf& from);
  void MergeFrom(const FoodInfoNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_FOOD_INFO_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // repeated uint32 recipeids = 3;
  inline int recipeids_size() const;
  inline void clear_recipeids();
  static const int kRecipeidsFieldNumber = 3;
  inline ::google::protobuf::uint32 recipeids(int index) const;
  inline void set_recipeids(int index, ::google::protobuf::uint32 value);
  inline void add_recipeids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recipeids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recipeids();

  // repeated uint32 last_cooked_foods = 4;
  inline int last_cooked_foods_size() const;
  inline void clear_last_cooked_foods();
  static const int kLastCookedFoodsFieldNumber = 4;
  inline ::google::protobuf::uint32 last_cooked_foods(int index) const;
  inline void set_last_cooked_foods(int index, ::google::protobuf::uint32 value);
  inline void add_last_cooked_foods(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      last_cooked_foods() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_last_cooked_foods();

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  inline int eat_foods_size() const;
  inline void clear_eat_foods();
  static const int kEatFoodsFieldNumber = 5;
  inline const ::Cmd::FoodItemInfo2& eat_foods(int index) const;
  inline ::Cmd::FoodItemInfo2* mutable_eat_foods(int index);
  inline ::Cmd::FoodItemInfo2* add_eat_foods();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >&
      eat_foods() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >*
      mutable_eat_foods();

  // @@protoc_insertion_point(class_scope:Cmd.FoodInfoNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recipeids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > last_cooked_foods_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 > eat_foods_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static FoodInfoNtf* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFoodInfo : public ::google::protobuf::Message {
 public:
  UpdateFoodInfo();
  virtual ~UpdateFoodInfo();

  UpdateFoodInfo(const UpdateFoodInfo& from);

  inline UpdateFoodInfo& operator=(const UpdateFoodInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFoodInfo& default_instance();

  void Swap(UpdateFoodInfo* other);

  // implements Message ----------------------------------------------

  UpdateFoodInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFoodInfo& from);
  void MergeFrom(const UpdateFoodInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UPDATE_FOOD_INFO_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // repeated uint32 last_cooked_foods = 4;
  inline int last_cooked_foods_size() const;
  inline void clear_last_cooked_foods();
  static const int kLastCookedFoodsFieldNumber = 4;
  inline ::google::protobuf::uint32 last_cooked_foods(int index) const;
  inline void set_last_cooked_foods(int index, ::google::protobuf::uint32 value);
  inline void add_last_cooked_foods(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      last_cooked_foods() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_last_cooked_foods();

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  inline int eat_foods_size() const;
  inline void clear_eat_foods();
  static const int kEatFoodsFieldNumber = 5;
  inline const ::Cmd::FoodItemInfo2& eat_foods(int index) const;
  inline ::Cmd::FoodItemInfo2* mutable_eat_foods(int index);
  inline ::Cmd::FoodItemInfo2* add_eat_foods();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >&
      eat_foods() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >*
      mutable_eat_foods();

  // repeated uint32 del_eat_foods = 6;
  inline int del_eat_foods_size() const;
  inline void clear_del_eat_foods();
  static const int kDelEatFoodsFieldNumber = 6;
  inline ::google::protobuf::uint32 del_eat_foods(int index) const;
  inline void set_del_eat_foods(int index, ::google::protobuf::uint32 value);
  inline void add_del_eat_foods(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      del_eat_foods() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_del_eat_foods();

  // @@protoc_insertion_point(class_scope:Cmd.UpdateFoodInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > last_cooked_foods_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 > eat_foods_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > del_eat_foods_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static UpdateFoodInfo* default_instance_;
};
// -------------------------------------------------------------------

class UnlockRecipeNtf : public ::google::protobuf::Message {
 public:
  UnlockRecipeNtf();
  virtual ~UnlockRecipeNtf();

  UnlockRecipeNtf(const UnlockRecipeNtf& from);

  inline UnlockRecipeNtf& operator=(const UnlockRecipeNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockRecipeNtf& default_instance();

  void Swap(UnlockRecipeNtf* other);

  // implements Message ----------------------------------------------

  UnlockRecipeNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockRecipeNtf& from);
  void MergeFrom(const UnlockRecipeNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UNLOCK_RECIPE_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional uint32 recipe = 3;
  inline bool has_recipe() const;
  inline void clear_recipe();
  static const int kRecipeFieldNumber = 3;
  inline ::google::protobuf::uint32 recipe() const;
  inline void set_recipe(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UnlockRecipeNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_recipe();
  inline void clear_has_recipe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 recipe_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static UnlockRecipeNtf* default_instance_;
};
// -------------------------------------------------------------------

class FoodSubData : public ::google::protobuf::Message {
 public:
  FoodSubData();
  virtual ~FoodSubData();

  FoodSubData(const FoodSubData& from);

  inline FoodSubData& operator=(const FoodSubData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodSubData& default_instance();

  void Swap(FoodSubData* other);

  // implements Message ----------------------------------------------

  FoodSubData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodSubData& from);
  void MergeFrom(const FoodSubData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EFoodStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::Cmd::EFoodStatus status() const;
  inline void set_status(::Cmd::EFoodStatus value);

  // optional uint32 itemid = 2 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 exp = 3 [default = 0];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 level = 4 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.FoodSubData)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static FoodSubData* default_instance_;
};
// -------------------------------------------------------------------

class FoodManualData : public ::google::protobuf::Message {
 public:
  FoodManualData();
  virtual ~FoodManualData();

  FoodManualData(const FoodManualData& from);

  inline FoodManualData& operator=(const FoodManualData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodManualData& default_instance();

  void Swap(FoodManualData* other);

  // implements Message ----------------------------------------------

  FoodManualData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodManualData& from);
  void MergeFrom(const FoodManualData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EFoodDataType type = 1 [default = EFOODDATATYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EFoodDataType type() const;
  inline void set_type(::Cmd::EFoodDataType value);

  // repeated .Cmd.FoodSubData datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::FoodSubData& datas(int index) const;
  inline ::Cmd::FoodSubData* mutable_datas(int index);
  inline ::Cmd::FoodSubData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodSubData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodSubData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.FoodManualData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodSubData > datas_;
  int type_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static FoodManualData* default_instance_;
};
// -------------------------------------------------------------------

class QueryFoodManualData : public ::google::protobuf::Message {
 public:
  QueryFoodManualData();
  virtual ~QueryFoodManualData();

  QueryFoodManualData(const QueryFoodManualData& from);

  inline QueryFoodManualData& operator=(const QueryFoodManualData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFoodManualData& default_instance();

  void Swap(QueryFoodManualData* other);

  // implements Message ----------------------------------------------

  QueryFoodManualData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFoodManualData& from);
  void MergeFrom(const QueryFoodManualData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_DATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional uint32 cookerexp = 3;
  inline bool has_cookerexp() const;
  inline void clear_cookerexp();
  static const int kCookerexpFieldNumber = 3;
  inline ::google::protobuf::uint32 cookerexp() const;
  inline void set_cookerexp(::google::protobuf::uint32 value);

  // optional uint32 cookerlv = 4;
  inline bool has_cookerlv() const;
  inline void clear_cookerlv();
  static const int kCookerlvFieldNumber = 4;
  inline ::google::protobuf::uint32 cookerlv() const;
  inline void set_cookerlv(::google::protobuf::uint32 value);

  // optional uint32 tasterexp = 5;
  inline bool has_tasterexp() const;
  inline void clear_tasterexp();
  static const int kTasterexpFieldNumber = 5;
  inline ::google::protobuf::uint32 tasterexp() const;
  inline void set_tasterexp(::google::protobuf::uint32 value);

  // optional uint32 tasterlv = 6;
  inline bool has_tasterlv() const;
  inline void clear_tasterlv();
  static const int kTasterlvFieldNumber = 6;
  inline ::google::protobuf::uint32 tasterlv() const;
  inline void set_tasterlv(::google::protobuf::uint32 value);

  // repeated .Cmd.FoodManualData items = 7;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 7;
  inline const ::Cmd::FoodManualData& items(int index) const;
  inline ::Cmd::FoodManualData* mutable_items(int index);
  inline ::Cmd::FoodManualData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.QueryFoodManualData)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_cookerexp();
  inline void clear_has_cookerexp();
  inline void set_has_cookerlv();
  inline void clear_has_cookerlv();
  inline void set_has_tasterexp();
  inline void clear_has_tasterexp();
  inline void set_has_tasterlv();
  inline void clear_has_tasterlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 cookerexp_;
  ::google::protobuf::uint32 cookerlv_;
  ::google::protobuf::uint32 tasterexp_;
  ::google::protobuf::uint32 tasterlv_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData > items_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static QueryFoodManualData* default_instance_;
};
// -------------------------------------------------------------------

class NewFoodDataNtf : public ::google::protobuf::Message {
 public:
  NewFoodDataNtf();
  virtual ~NewFoodDataNtf();

  NewFoodDataNtf(const NewFoodDataNtf& from);

  inline NewFoodDataNtf& operator=(const NewFoodDataNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewFoodDataNtf& default_instance();

  void Swap(NewFoodDataNtf* other);

  // implements Message ----------------------------------------------

  NewFoodDataNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewFoodDataNtf& from);
  void MergeFrom(const NewFoodDataNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_NEW_FOOD_DATA_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // repeated .Cmd.FoodManualData items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::FoodManualData& items(int index) const;
  inline ::Cmd::FoodManualData* mutable_items(int index);
  inline ::Cmd::FoodManualData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.NewFoodDataNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData > items_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static NewFoodDataNtf* default_instance_;
};
// -------------------------------------------------------------------

class ClickFoodManualData : public ::google::protobuf::Message {
 public:
  ClickFoodManualData();
  virtual ~ClickFoodManualData();

  ClickFoodManualData(const ClickFoodManualData& from);

  inline ClickFoodManualData& operator=(const ClickFoodManualData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickFoodManualData& default_instance();

  void Swap(ClickFoodManualData* other);

  // implements Message ----------------------------------------------

  ClickFoodManualData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickFoodManualData& from);
  void MergeFrom(const ClickFoodManualData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_CLICK_FOOD_MANUAL_DATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::FoodParam param() const;
  inline void set_param(::Cmd::FoodParam value);

  // optional .Cmd.EFoodDataType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EFoodDataType type() const;
  inline void set_type(::Cmd::EFoodDataType value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ClickFoodManualData)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_SceneFood_2eproto();
  friend void protobuf_AssignDesc_SceneFood_2eproto();
  friend void protobuf_ShutdownFile_SceneFood_2eproto();

  void InitAsDefaultInstance();
  static ClickFoodManualData* default_instance_;
};
// ===================================================================


// ===================================================================

// CookStateMsg

// optional .Cmd.ECookState state = 1;
inline bool CookStateMsg::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CookStateMsg::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CookStateMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CookStateMsg::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::Cmd::ECookState CookStateMsg::state() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateMsg.state)
  return static_cast< ::Cmd::ECookState >(state_);
}
inline void CookStateMsg::set_state(::Cmd::ECookState value) {
  assert(::Cmd::ECookState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CookStateMsg.state)
}

// optional .Cmd.ECookType cooktype = 2;
inline bool CookStateMsg::has_cooktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CookStateMsg::set_has_cooktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CookStateMsg::clear_has_cooktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CookStateMsg::clear_cooktype() {
  cooktype_ = 0;
  clear_has_cooktype();
}
inline ::Cmd::ECookType CookStateMsg::cooktype() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateMsg.cooktype)
  return static_cast< ::Cmd::ECookType >(cooktype_);
}
inline void CookStateMsg::set_cooktype(::Cmd::ECookType value) {
  assert(::Cmd::ECookType_IsValid(value));
  set_has_cooktype();
  cooktype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CookStateMsg.cooktype)
}

// optional uint32 progress = 3;
inline bool CookStateMsg::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CookStateMsg::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CookStateMsg::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CookStateMsg::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 CookStateMsg::progress() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateMsg.progress)
  return progress_;
}
inline void CookStateMsg::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CookStateMsg.progress)
}

// optional bool success = 4;
inline bool CookStateMsg::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CookStateMsg::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CookStateMsg::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CookStateMsg::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CookStateMsg::success() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateMsg.success)
  return success_;
}
inline void CookStateMsg::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CookStateMsg.success)
}

// repeated uint32 foodid = 5;
inline int CookStateMsg::foodid_size() const {
  return foodid_.size();
}
inline void CookStateMsg::clear_foodid() {
  foodid_.Clear();
}
inline ::google::protobuf::uint32 CookStateMsg::foodid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateMsg.foodid)
  return foodid_.Get(index);
}
inline void CookStateMsg::set_foodid(int index, ::google::protobuf::uint32 value) {
  foodid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.CookStateMsg.foodid)
}
inline void CookStateMsg::add_foodid(::google::protobuf::uint32 value) {
  foodid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.CookStateMsg.foodid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CookStateMsg::foodid() const {
  // @@protoc_insertion_point(field_list:Cmd.CookStateMsg.foodid)
  return foodid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CookStateMsg::mutable_foodid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.CookStateMsg.foodid)
  return &foodid_;
}

// -------------------------------------------------------------------

// CookStateNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool CookStateNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CookStateNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CookStateNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CookStateNtf::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command CookStateNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CookStateNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CookStateNtf.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_COOK_STATE_NTF];
inline bool CookStateNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CookStateNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CookStateNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CookStateNtf::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::FoodParam CookStateNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateNtf.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void CookStateNtf::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CookStateNtf.param)
}

// optional .Cmd.CookStateMsg state = 3;
inline bool CookStateNtf::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CookStateNtf::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CookStateNtf::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CookStateNtf::clear_state() {
  if (state_ != NULL) state_->::Cmd::CookStateMsg::Clear();
  clear_has_state();
}
inline const ::Cmd::CookStateMsg& CookStateNtf::state() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateNtf.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::Cmd::CookStateMsg* CookStateNtf::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::Cmd::CookStateMsg;
  // @@protoc_insertion_point(field_mutable:Cmd.CookStateNtf.state)
  return state_;
}
inline ::Cmd::CookStateMsg* CookStateNtf::release_state() {
  clear_has_state();
  ::Cmd::CookStateMsg* temp = state_;
  state_ = NULL;
  return temp;
}
inline void CookStateNtf::set_allocated_state(::Cmd::CookStateMsg* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CookStateNtf.state)
}

// optional uint64 charid = 4;
inline bool CookStateNtf::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CookStateNtf::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CookStateNtf::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CookStateNtf::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CookStateNtf::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CookStateNtf.charid)
  return charid_;
}
inline void CookStateNtf::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CookStateNtf.charid)
}

// -------------------------------------------------------------------

// PrepareCook

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool PrepareCook::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareCook::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareCook::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareCook::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command PrepareCook::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PrepareCook.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PrepareCook::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PrepareCook.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PREPARECOOK];
inline bool PrepareCook::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrepareCook::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrepareCook::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrepareCook::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::FoodParam PrepareCook::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PrepareCook.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void PrepareCook::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PrepareCook.param)
}

// optional bool start = 3 [default = true];
inline bool PrepareCook::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrepareCook::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrepareCook::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrepareCook::clear_start() {
  start_ = true;
  clear_has_start();
}
inline bool PrepareCook::start() const {
  // @@protoc_insertion_point(field_get:Cmd.PrepareCook.start)
  return start_;
}
inline void PrepareCook::set_start(bool value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PrepareCook.start)
}

// -------------------------------------------------------------------

// SelectCookType

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool SelectCookType::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectCookType::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectCookType::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectCookType::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command SelectCookType::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectCookType.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SelectCookType::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectCookType.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_SELECT_COOKTYPE];
inline bool SelectCookType::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectCookType::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectCookType::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectCookType::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::FoodParam SelectCookType::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectCookType.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void SelectCookType::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectCookType.param)
}

// optional .Cmd.ECookType cooktype = 3;
inline bool SelectCookType::has_cooktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectCookType::set_has_cooktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectCookType::clear_has_cooktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectCookType::clear_cooktype() {
  cooktype_ = 0;
  clear_has_cooktype();
}
inline ::Cmd::ECookType SelectCookType::cooktype() const {
  // @@protoc_insertion_point(field_get:Cmd.SelectCookType.cooktype)
  return static_cast< ::Cmd::ECookType >(cooktype_);
}
inline void SelectCookType::set_cooktype(::Cmd::ECookType value) {
  assert(::Cmd::ECookType_IsValid(value));
  set_has_cooktype();
  cooktype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SelectCookType.cooktype)
}

// -------------------------------------------------------------------

// BriefItemInfo

// optional string guid = 1;
inline bool BriefItemInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BriefItemInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BriefItemInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BriefItemInfo::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& BriefItemInfo::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefItemInfo.guid)
  return *guid_;
}
inline void BriefItemInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BriefItemInfo.guid)
}
inline void BriefItemInfo::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BriefItemInfo.guid)
}
inline void BriefItemInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BriefItemInfo.guid)
}
inline ::std::string* BriefItemInfo::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BriefItemInfo.guid)
  return guid_;
}
inline ::std::string* BriefItemInfo::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BriefItemInfo::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BriefItemInfo.guid)
}

// optional uint32 itemid = 2;
inline bool BriefItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BriefItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BriefItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BriefItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 BriefItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefItemInfo.itemid)
  return itemid_;
}
inline void BriefItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefItemInfo.itemid)
}

// optional uint32 num = 3;
inline bool BriefItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BriefItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BriefItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BriefItemInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 BriefItemInfo::num() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefItemInfo.num)
  return num_;
}
inline void BriefItemInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefItemInfo.num)
}

// -------------------------------------------------------------------

// StartCook

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool StartCook::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartCook::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartCook::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartCook::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command StartCook::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StartCook.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StartCook::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartCook.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_COOK];
inline bool StartCook::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartCook::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartCook::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartCook::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::FoodParam StartCook::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StartCook.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void StartCook::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartCook.param)
}

// optional .Cmd.ECookType cooktype = 3;
inline bool StartCook::has_cooktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartCook::set_has_cooktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartCook::clear_has_cooktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartCook::clear_cooktype() {
  cooktype_ = 0;
  clear_has_cooktype();
}
inline ::Cmd::ECookType StartCook::cooktype() const {
  // @@protoc_insertion_point(field_get:Cmd.StartCook.cooktype)
  return static_cast< ::Cmd::ECookType >(cooktype_);
}
inline void StartCook::set_cooktype(::Cmd::ECookType value) {
  assert(::Cmd::ECookType_IsValid(value));
  set_has_cooktype();
  cooktype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartCook.cooktype)
}

// repeated .Cmd.BriefItemInfo material = 4;
inline int StartCook::material_size() const {
  return material_.size();
}
inline void StartCook::clear_material() {
  material_.Clear();
}
inline const ::Cmd::BriefItemInfo& StartCook::material(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.StartCook.material)
  return material_.Get(index);
}
inline ::Cmd::BriefItemInfo* StartCook::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.StartCook.material)
  return material_.Mutable(index);
}
inline ::Cmd::BriefItemInfo* StartCook::add_material() {
  // @@protoc_insertion_point(field_add:Cmd.StartCook.material)
  return material_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BriefItemInfo >&
StartCook::material() const {
  // @@protoc_insertion_point(field_list:Cmd.StartCook.material)
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BriefItemInfo >*
StartCook::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.StartCook.material)
  return &material_;
}

// optional uint32 recipe = 5;
inline bool StartCook::has_recipe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StartCook::set_has_recipe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StartCook::clear_has_recipe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StartCook::clear_recipe() {
  recipe_ = 0u;
  clear_has_recipe();
}
inline ::google::protobuf::uint32 StartCook::recipe() const {
  // @@protoc_insertion_point(field_get:Cmd.StartCook.recipe)
  return recipe_;
}
inline void StartCook::set_recipe(::google::protobuf::uint32 value) {
  set_has_recipe();
  recipe_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartCook.recipe)
}

// optional bool skipanimation = 6 [default = false];
inline bool StartCook::has_skipanimation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StartCook::set_has_skipanimation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StartCook::clear_has_skipanimation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StartCook::clear_skipanimation() {
  skipanimation_ = false;
  clear_has_skipanimation();
}
inline bool StartCook::skipanimation() const {
  // @@protoc_insertion_point(field_get:Cmd.StartCook.skipanimation)
  return skipanimation_;
}
inline void StartCook::set_skipanimation(bool value) {
  set_has_skipanimation();
  skipanimation_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartCook.skipanimation)
}

// repeated uint32 recipes = 7;
inline int StartCook::recipes_size() const {
  return recipes_.size();
}
inline void StartCook::clear_recipes() {
  recipes_.Clear();
}
inline ::google::protobuf::uint32 StartCook::recipes(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.StartCook.recipes)
  return recipes_.Get(index);
}
inline void StartCook::set_recipes(int index, ::google::protobuf::uint32 value) {
  recipes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.StartCook.recipes)
}
inline void StartCook::add_recipes(::google::protobuf::uint32 value) {
  recipes_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.StartCook.recipes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StartCook::recipes() const {
  // @@protoc_insertion_point(field_list:Cmd.StartCook.recipes)
  return recipes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StartCook::mutable_recipes() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.StartCook.recipes)
  return &recipes_;
}

// -------------------------------------------------------------------

// PutFood

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool PutFood::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutFood::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutFood::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutFood::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command PutFood::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PutFood.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PutFood::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PutFood.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PUT_FOOD];
inline bool PutFood::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutFood::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutFood::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutFood::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::FoodParam PutFood::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PutFood.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void PutFood::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PutFood.param)
}

// optional string foodguid = 3;
inline bool PutFood::has_foodguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutFood::set_has_foodguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutFood::clear_has_foodguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutFood::clear_foodguid() {
  if (foodguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    foodguid_->clear();
  }
  clear_has_foodguid();
}
inline const ::std::string& PutFood::foodguid() const {
  // @@protoc_insertion_point(field_get:Cmd.PutFood.foodguid)
  return *foodguid_;
}
inline void PutFood::set_foodguid(const ::std::string& value) {
  set_has_foodguid();
  if (foodguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    foodguid_ = new ::std::string;
  }
  foodguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PutFood.foodguid)
}
inline void PutFood::set_foodguid(const char* value) {
  set_has_foodguid();
  if (foodguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    foodguid_ = new ::std::string;
  }
  foodguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PutFood.foodguid)
}
inline void PutFood::set_foodguid(const char* value, size_t size) {
  set_has_foodguid();
  if (foodguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    foodguid_ = new ::std::string;
  }
  foodguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PutFood.foodguid)
}
inline ::std::string* PutFood::mutable_foodguid() {
  set_has_foodguid();
  if (foodguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    foodguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PutFood.foodguid)
  return foodguid_;
}
inline ::std::string* PutFood::release_foodguid() {
  clear_has_foodguid();
  if (foodguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = foodguid_;
    foodguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PutFood::set_allocated_foodguid(::std::string* foodguid) {
  if (foodguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete foodguid_;
  }
  if (foodguid) {
    set_has_foodguid();
    foodguid_ = foodguid;
  } else {
    clear_has_foodguid();
    foodguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PutFood.foodguid)
}

// optional .Cmd.EEatPower power = 4;
inline bool PutFood::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutFood::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PutFood::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PutFood::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline ::Cmd::EEatPower PutFood::power() const {
  // @@protoc_insertion_point(field_get:Cmd.PutFood.power)
  return static_cast< ::Cmd::EEatPower >(power_);
}
inline void PutFood::set_power(::Cmd::EEatPower value) {
  assert(::Cmd::EEatPower_IsValid(value));
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PutFood.power)
}

// optional uint32 foodnum = 5;
inline bool PutFood::has_foodnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PutFood::set_has_foodnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PutFood::clear_has_foodnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PutFood::clear_foodnum() {
  foodnum_ = 0u;
  clear_has_foodnum();
}
inline ::google::protobuf::uint32 PutFood::foodnum() const {
  // @@protoc_insertion_point(field_get:Cmd.PutFood.foodnum)
  return foodnum_;
}
inline void PutFood::set_foodnum(::google::protobuf::uint32 value) {
  set_has_foodnum();
  foodnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PutFood.foodnum)
}

// optional bool peteat = 6 [default = false];
inline bool PutFood::has_peteat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PutFood::set_has_peteat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PutFood::clear_has_peteat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PutFood::clear_peteat() {
  peteat_ = false;
  clear_has_peteat();
}
inline bool PutFood::peteat() const {
  // @@protoc_insertion_point(field_get:Cmd.PutFood.peteat)
  return peteat_;
}
inline void PutFood::set_peteat(bool value) {
  set_has_peteat();
  peteat_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PutFood.peteat)
}

// -------------------------------------------------------------------

// EditFoodPower

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool EditFoodPower::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EditFoodPower::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EditFoodPower::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EditFoodPower::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command EditFoodPower::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EditFoodPower.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EditFoodPower::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EditFoodPower.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EDIT_FOOD_POWER];
inline bool EditFoodPower::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EditFoodPower::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EditFoodPower::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EditFoodPower::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::FoodParam EditFoodPower::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EditFoodPower.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void EditFoodPower::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EditFoodPower.param)
}

// optional uint64 npcguid = 3;
inline bool EditFoodPower::has_npcguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EditFoodPower::set_has_npcguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EditFoodPower::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EditFoodPower::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 EditFoodPower::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EditFoodPower.npcguid)
  return npcguid_;
}
inline void EditFoodPower::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EditFoodPower.npcguid)
}

// optional .Cmd.EEatPower power = 4;
inline bool EditFoodPower::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EditFoodPower::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EditFoodPower::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EditFoodPower::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline ::Cmd::EEatPower EditFoodPower::power() const {
  // @@protoc_insertion_point(field_get:Cmd.EditFoodPower.power)
  return static_cast< ::Cmd::EEatPower >(power_);
}
inline void EditFoodPower::set_power(::Cmd::EEatPower value) {
  assert(::Cmd::EEatPower_IsValid(value));
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EditFoodPower.power)
}

// -------------------------------------------------------------------

// FoodItemInfo2

// optional uint32 itemid = 1;
inline bool FoodItemInfo2::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FoodItemInfo2::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FoodItemInfo2::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FoodItemInfo2::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 FoodItemInfo2::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodItemInfo2.itemid)
  return itemid_;
}
inline void FoodItemInfo2::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodItemInfo2.itemid)
}

// optional uint32 invalid_time = 2;
inline bool FoodItemInfo2::has_invalid_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FoodItemInfo2::set_has_invalid_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FoodItemInfo2::clear_has_invalid_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FoodItemInfo2::clear_invalid_time() {
  invalid_time_ = 0u;
  clear_has_invalid_time();
}
inline ::google::protobuf::uint32 FoodItemInfo2::invalid_time() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodItemInfo2.invalid_time)
  return invalid_time_;
}
inline void FoodItemInfo2::set_invalid_time(::google::protobuf::uint32 value) {
  set_has_invalid_time();
  invalid_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodItemInfo2.invalid_time)
}

// -------------------------------------------------------------------

// QueryFoodNpcInfo

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool QueryFoodNpcInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFoodNpcInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFoodNpcInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFoodNpcInfo::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command QueryFoodNpcInfo::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodNpcInfo.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryFoodNpcInfo::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodNpcInfo.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_NPC_INFO];
inline bool QueryFoodNpcInfo::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFoodNpcInfo::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFoodNpcInfo::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFoodNpcInfo::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::FoodParam QueryFoodNpcInfo::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodNpcInfo.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void QueryFoodNpcInfo::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodNpcInfo.param)
}

// optional uint64 npcguid = 3;
inline bool QueryFoodNpcInfo::has_npcguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryFoodNpcInfo::set_has_npcguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryFoodNpcInfo::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryFoodNpcInfo::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 QueryFoodNpcInfo::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodNpcInfo.npcguid)
  return npcguid_;
}
inline void QueryFoodNpcInfo::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodNpcInfo.npcguid)
}

// optional uint32 eating_people = 4;
inline bool QueryFoodNpcInfo::has_eating_people() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryFoodNpcInfo::set_has_eating_people() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryFoodNpcInfo::clear_has_eating_people() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryFoodNpcInfo::clear_eating_people() {
  eating_people_ = 0u;
  clear_has_eating_people();
}
inline ::google::protobuf::uint32 QueryFoodNpcInfo::eating_people() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodNpcInfo.eating_people)
  return eating_people_;
}
inline void QueryFoodNpcInfo::set_eating_people(::google::protobuf::uint32 value) {
  set_has_eating_people();
  eating_people_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodNpcInfo.eating_people)
}

// optional uint32 itemid = 5;
inline bool QueryFoodNpcInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryFoodNpcInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryFoodNpcInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryFoodNpcInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 QueryFoodNpcInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodNpcInfo.itemid)
  return itemid_;
}
inline void QueryFoodNpcInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodNpcInfo.itemid)
}

// optional uint64 ownerid = 6;
inline bool QueryFoodNpcInfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryFoodNpcInfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryFoodNpcInfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryFoodNpcInfo::clear_ownerid() {
  ownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::uint64 QueryFoodNpcInfo::ownerid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodNpcInfo.ownerid)
  return ownerid_;
}
inline void QueryFoodNpcInfo::set_ownerid(::google::protobuf::uint64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodNpcInfo.ownerid)
}

// optional uint32 itemnum = 7;
inline bool QueryFoodNpcInfo::has_itemnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryFoodNpcInfo::set_has_itemnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryFoodNpcInfo::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryFoodNpcInfo::clear_itemnum() {
  itemnum_ = 0u;
  clear_has_itemnum();
}
inline ::google::protobuf::uint32 QueryFoodNpcInfo::itemnum() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodNpcInfo.itemnum)
  return itemnum_;
}
inline void QueryFoodNpcInfo::set_itemnum(::google::protobuf::uint32 value) {
  set_has_itemnum();
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodNpcInfo.itemnum)
}

// -------------------------------------------------------------------

// StartEat

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool StartEat::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartEat::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartEat::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartEat::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command StartEat::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StartEat.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StartEat::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartEat.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_EAT];
inline bool StartEat::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartEat::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartEat::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartEat::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::FoodParam StartEat::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StartEat.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void StartEat::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartEat.param)
}

// optional uint64 npcguid = 3;
inline bool StartEat::has_npcguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartEat::set_has_npcguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartEat::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartEat::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 StartEat::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.StartEat.npcguid)
  return npcguid_;
}
inline void StartEat::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartEat.npcguid)
}

// optional bool pet = 4 [default = false];
inline bool StartEat::has_pet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StartEat::set_has_pet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StartEat::clear_has_pet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StartEat::clear_pet() {
  pet_ = false;
  clear_has_pet();
}
inline bool StartEat::pet() const {
  // @@protoc_insertion_point(field_get:Cmd.StartEat.pet)
  return pet_;
}
inline void StartEat::set_pet(bool value) {
  set_has_pet();
  pet_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartEat.pet)
}

// optional uint32 eatnum = 5;
inline bool StartEat::has_eatnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StartEat::set_has_eatnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StartEat::clear_has_eatnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StartEat::clear_eatnum() {
  eatnum_ = 0u;
  clear_has_eatnum();
}
inline ::google::protobuf::uint32 StartEat::eatnum() const {
  // @@protoc_insertion_point(field_get:Cmd.StartEat.eatnum)
  return eatnum_;
}
inline void StartEat::set_eatnum(::google::protobuf::uint32 value) {
  set_has_eatnum();
  eatnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StartEat.eatnum)
}

// -------------------------------------------------------------------

// StopEat

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool StopEat::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopEat::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopEat::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopEat::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command StopEat::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StopEat.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StopEat::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StopEat.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_STOP_EAT];
inline bool StopEat::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopEat::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopEat::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopEat::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::FoodParam StopEat::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StopEat.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void StopEat::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StopEat.param)
}

// optional uint64 npcguid = 3;
inline bool StopEat::has_npcguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopEat::set_has_npcguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopEat::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopEat::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 StopEat::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.StopEat.npcguid)
  return npcguid_;
}
inline void StopEat::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StopEat.npcguid)
}

// -------------------------------------------------------------------

// EatProgressNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool EatProgressNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EatProgressNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EatProgressNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EatProgressNtf::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command EatProgressNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EatProgressNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EatProgressNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EatProgressNtf.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EAT_PROGRESS_NTF];
inline bool EatProgressNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EatProgressNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EatProgressNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EatProgressNtf::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::FoodParam EatProgressNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EatProgressNtf.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void EatProgressNtf::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EatProgressNtf.param)
}

// optional uint32 progress = 3;
inline bool EatProgressNtf::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EatProgressNtf::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EatProgressNtf::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EatProgressNtf::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 EatProgressNtf::progress() const {
  // @@protoc_insertion_point(field_get:Cmd.EatProgressNtf.progress)
  return progress_;
}
inline void EatProgressNtf::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EatProgressNtf.progress)
}

// optional uint64 npcguid = 4;
inline bool EatProgressNtf::has_npcguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EatProgressNtf::set_has_npcguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EatProgressNtf::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EatProgressNtf::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 EatProgressNtf::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EatProgressNtf.npcguid)
  return npcguid_;
}
inline void EatProgressNtf::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EatProgressNtf.npcguid)
}

// -------------------------------------------------------------------

// FoodInfoNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool FoodInfoNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FoodInfoNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FoodInfoNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FoodInfoNtf::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command FoodInfoNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodInfoNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FoodInfoNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodInfoNtf.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_FOOD_INFO_NTF];
inline bool FoodInfoNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FoodInfoNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FoodInfoNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FoodInfoNtf::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::FoodParam FoodInfoNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodInfoNtf.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void FoodInfoNtf::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodInfoNtf.param)
}

// repeated uint32 recipeids = 3;
inline int FoodInfoNtf::recipeids_size() const {
  return recipeids_.size();
}
inline void FoodInfoNtf::clear_recipeids() {
  recipeids_.Clear();
}
inline ::google::protobuf::uint32 FoodInfoNtf::recipeids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FoodInfoNtf.recipeids)
  return recipeids_.Get(index);
}
inline void FoodInfoNtf::set_recipeids(int index, ::google::protobuf::uint32 value) {
  recipeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.FoodInfoNtf.recipeids)
}
inline void FoodInfoNtf::add_recipeids(::google::protobuf::uint32 value) {
  recipeids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.FoodInfoNtf.recipeids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FoodInfoNtf::recipeids() const {
  // @@protoc_insertion_point(field_list:Cmd.FoodInfoNtf.recipeids)
  return recipeids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FoodInfoNtf::mutable_recipeids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FoodInfoNtf.recipeids)
  return &recipeids_;
}

// repeated uint32 last_cooked_foods = 4;
inline int FoodInfoNtf::last_cooked_foods_size() const {
  return last_cooked_foods_.size();
}
inline void FoodInfoNtf::clear_last_cooked_foods() {
  last_cooked_foods_.Clear();
}
inline ::google::protobuf::uint32 FoodInfoNtf::last_cooked_foods(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FoodInfoNtf.last_cooked_foods)
  return last_cooked_foods_.Get(index);
}
inline void FoodInfoNtf::set_last_cooked_foods(int index, ::google::protobuf::uint32 value) {
  last_cooked_foods_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.FoodInfoNtf.last_cooked_foods)
}
inline void FoodInfoNtf::add_last_cooked_foods(::google::protobuf::uint32 value) {
  last_cooked_foods_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.FoodInfoNtf.last_cooked_foods)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FoodInfoNtf::last_cooked_foods() const {
  // @@protoc_insertion_point(field_list:Cmd.FoodInfoNtf.last_cooked_foods)
  return last_cooked_foods_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FoodInfoNtf::mutable_last_cooked_foods() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FoodInfoNtf.last_cooked_foods)
  return &last_cooked_foods_;
}

// repeated .Cmd.FoodItemInfo2 eat_foods = 5;
inline int FoodInfoNtf::eat_foods_size() const {
  return eat_foods_.size();
}
inline void FoodInfoNtf::clear_eat_foods() {
  eat_foods_.Clear();
}
inline const ::Cmd::FoodItemInfo2& FoodInfoNtf::eat_foods(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FoodInfoNtf.eat_foods)
  return eat_foods_.Get(index);
}
inline ::Cmd::FoodItemInfo2* FoodInfoNtf::mutable_eat_foods(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.FoodInfoNtf.eat_foods)
  return eat_foods_.Mutable(index);
}
inline ::Cmd::FoodItemInfo2* FoodInfoNtf::add_eat_foods() {
  // @@protoc_insertion_point(field_add:Cmd.FoodInfoNtf.eat_foods)
  return eat_foods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >&
FoodInfoNtf::eat_foods() const {
  // @@protoc_insertion_point(field_list:Cmd.FoodInfoNtf.eat_foods)
  return eat_foods_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >*
FoodInfoNtf::mutable_eat_foods() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FoodInfoNtf.eat_foods)
  return &eat_foods_;
}

// -------------------------------------------------------------------

// UpdateFoodInfo

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool UpdateFoodInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFoodInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFoodInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateFoodInfo::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateFoodInfo::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFoodInfo.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateFoodInfo::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateFoodInfo.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UPDATE_FOOD_INFO_NTF];
inline bool UpdateFoodInfo::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateFoodInfo::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateFoodInfo::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateFoodInfo::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::FoodParam UpdateFoodInfo::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFoodInfo.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void UpdateFoodInfo::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateFoodInfo.param)
}

// repeated uint32 last_cooked_foods = 4;
inline int UpdateFoodInfo::last_cooked_foods_size() const {
  return last_cooked_foods_.size();
}
inline void UpdateFoodInfo::clear_last_cooked_foods() {
  last_cooked_foods_.Clear();
}
inline ::google::protobuf::uint32 UpdateFoodInfo::last_cooked_foods(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFoodInfo.last_cooked_foods)
  return last_cooked_foods_.Get(index);
}
inline void UpdateFoodInfo::set_last_cooked_foods(int index, ::google::protobuf::uint32 value) {
  last_cooked_foods_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UpdateFoodInfo.last_cooked_foods)
}
inline void UpdateFoodInfo::add_last_cooked_foods(::google::protobuf::uint32 value) {
  last_cooked_foods_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UpdateFoodInfo.last_cooked_foods)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UpdateFoodInfo::last_cooked_foods() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateFoodInfo.last_cooked_foods)
  return last_cooked_foods_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UpdateFoodInfo::mutable_last_cooked_foods() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateFoodInfo.last_cooked_foods)
  return &last_cooked_foods_;
}

// repeated .Cmd.FoodItemInfo2 eat_foods = 5;
inline int UpdateFoodInfo::eat_foods_size() const {
  return eat_foods_.size();
}
inline void UpdateFoodInfo::clear_eat_foods() {
  eat_foods_.Clear();
}
inline const ::Cmd::FoodItemInfo2& UpdateFoodInfo::eat_foods(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFoodInfo.eat_foods)
  return eat_foods_.Get(index);
}
inline ::Cmd::FoodItemInfo2* UpdateFoodInfo::mutable_eat_foods(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateFoodInfo.eat_foods)
  return eat_foods_.Mutable(index);
}
inline ::Cmd::FoodItemInfo2* UpdateFoodInfo::add_eat_foods() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateFoodInfo.eat_foods)
  return eat_foods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >&
UpdateFoodInfo::eat_foods() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateFoodInfo.eat_foods)
  return eat_foods_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo2 >*
UpdateFoodInfo::mutable_eat_foods() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateFoodInfo.eat_foods)
  return &eat_foods_;
}

// repeated uint32 del_eat_foods = 6;
inline int UpdateFoodInfo::del_eat_foods_size() const {
  return del_eat_foods_.size();
}
inline void UpdateFoodInfo::clear_del_eat_foods() {
  del_eat_foods_.Clear();
}
inline ::google::protobuf::uint32 UpdateFoodInfo::del_eat_foods(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFoodInfo.del_eat_foods)
  return del_eat_foods_.Get(index);
}
inline void UpdateFoodInfo::set_del_eat_foods(int index, ::google::protobuf::uint32 value) {
  del_eat_foods_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UpdateFoodInfo.del_eat_foods)
}
inline void UpdateFoodInfo::add_del_eat_foods(::google::protobuf::uint32 value) {
  del_eat_foods_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UpdateFoodInfo.del_eat_foods)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UpdateFoodInfo::del_eat_foods() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateFoodInfo.del_eat_foods)
  return del_eat_foods_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UpdateFoodInfo::mutable_del_eat_foods() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateFoodInfo.del_eat_foods)
  return &del_eat_foods_;
}

// -------------------------------------------------------------------

// UnlockRecipeNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool UnlockRecipeNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockRecipeNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockRecipeNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockRecipeNtf::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command UnlockRecipeNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockRecipeNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UnlockRecipeNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockRecipeNtf.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UNLOCK_RECIPE_NTF];
inline bool UnlockRecipeNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockRecipeNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockRecipeNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockRecipeNtf::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::FoodParam UnlockRecipeNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockRecipeNtf.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void UnlockRecipeNtf::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockRecipeNtf.param)
}

// optional uint32 recipe = 3;
inline bool UnlockRecipeNtf::has_recipe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnlockRecipeNtf::set_has_recipe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnlockRecipeNtf::clear_has_recipe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnlockRecipeNtf::clear_recipe() {
  recipe_ = 0u;
  clear_has_recipe();
}
inline ::google::protobuf::uint32 UnlockRecipeNtf::recipe() const {
  // @@protoc_insertion_point(field_get:Cmd.UnlockRecipeNtf.recipe)
  return recipe_;
}
inline void UnlockRecipeNtf::set_recipe(::google::protobuf::uint32 value) {
  set_has_recipe();
  recipe_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnlockRecipeNtf.recipe)
}

// -------------------------------------------------------------------

// FoodSubData

// optional .Cmd.EFoodStatus status = 1;
inline bool FoodSubData::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FoodSubData::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FoodSubData::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FoodSubData::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EFoodStatus FoodSubData::status() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodSubData.status)
  return static_cast< ::Cmd::EFoodStatus >(status_);
}
inline void FoodSubData::set_status(::Cmd::EFoodStatus value) {
  assert(::Cmd::EFoodStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodSubData.status)
}

// optional uint32 itemid = 2 [default = 0];
inline bool FoodSubData::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FoodSubData::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FoodSubData::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FoodSubData::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 FoodSubData::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodSubData.itemid)
  return itemid_;
}
inline void FoodSubData::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodSubData.itemid)
}

// optional uint32 exp = 3 [default = 0];
inline bool FoodSubData::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FoodSubData::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FoodSubData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FoodSubData::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 FoodSubData::exp() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodSubData.exp)
  return exp_;
}
inline void FoodSubData::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodSubData.exp)
}

// optional uint32 level = 4 [default = 0];
inline bool FoodSubData::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FoodSubData::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FoodSubData::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FoodSubData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 FoodSubData::level() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodSubData.level)
  return level_;
}
inline void FoodSubData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodSubData.level)
}

// -------------------------------------------------------------------

// FoodManualData

// optional .Cmd.EFoodDataType type = 1 [default = EFOODDATATYPE_MIN];
inline bool FoodManualData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FoodManualData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FoodManualData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FoodManualData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EFoodDataType FoodManualData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodManualData.type)
  return static_cast< ::Cmd::EFoodDataType >(type_);
}
inline void FoodManualData::set_type(::Cmd::EFoodDataType value) {
  assert(::Cmd::EFoodDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodManualData.type)
}

// repeated .Cmd.FoodSubData datas = 2;
inline int FoodManualData::datas_size() const {
  return datas_.size();
}
inline void FoodManualData::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::FoodSubData& FoodManualData::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FoodManualData.datas)
  return datas_.Get(index);
}
inline ::Cmd::FoodSubData* FoodManualData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.FoodManualData.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::FoodSubData* FoodManualData::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.FoodManualData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodSubData >&
FoodManualData::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.FoodManualData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodSubData >*
FoodManualData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FoodManualData.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// QueryFoodManualData

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool QueryFoodManualData::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFoodManualData::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFoodManualData::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFoodManualData::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command QueryFoodManualData::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodManualData.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryFoodManualData::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodManualData.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_DATA];
inline bool QueryFoodManualData::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFoodManualData::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFoodManualData::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFoodManualData::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::FoodParam QueryFoodManualData::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodManualData.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void QueryFoodManualData::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodManualData.param)
}

// optional uint32 cookerexp = 3;
inline bool QueryFoodManualData::has_cookerexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryFoodManualData::set_has_cookerexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryFoodManualData::clear_has_cookerexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryFoodManualData::clear_cookerexp() {
  cookerexp_ = 0u;
  clear_has_cookerexp();
}
inline ::google::protobuf::uint32 QueryFoodManualData::cookerexp() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodManualData.cookerexp)
  return cookerexp_;
}
inline void QueryFoodManualData::set_cookerexp(::google::protobuf::uint32 value) {
  set_has_cookerexp();
  cookerexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodManualData.cookerexp)
}

// optional uint32 cookerlv = 4;
inline bool QueryFoodManualData::has_cookerlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryFoodManualData::set_has_cookerlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryFoodManualData::clear_has_cookerlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryFoodManualData::clear_cookerlv() {
  cookerlv_ = 0u;
  clear_has_cookerlv();
}
inline ::google::protobuf::uint32 QueryFoodManualData::cookerlv() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodManualData.cookerlv)
  return cookerlv_;
}
inline void QueryFoodManualData::set_cookerlv(::google::protobuf::uint32 value) {
  set_has_cookerlv();
  cookerlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodManualData.cookerlv)
}

// optional uint32 tasterexp = 5;
inline bool QueryFoodManualData::has_tasterexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryFoodManualData::set_has_tasterexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryFoodManualData::clear_has_tasterexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryFoodManualData::clear_tasterexp() {
  tasterexp_ = 0u;
  clear_has_tasterexp();
}
inline ::google::protobuf::uint32 QueryFoodManualData::tasterexp() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodManualData.tasterexp)
  return tasterexp_;
}
inline void QueryFoodManualData::set_tasterexp(::google::protobuf::uint32 value) {
  set_has_tasterexp();
  tasterexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodManualData.tasterexp)
}

// optional uint32 tasterlv = 6;
inline bool QueryFoodManualData::has_tasterlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryFoodManualData::set_has_tasterlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryFoodManualData::clear_has_tasterlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryFoodManualData::clear_tasterlv() {
  tasterlv_ = 0u;
  clear_has_tasterlv();
}
inline ::google::protobuf::uint32 QueryFoodManualData::tasterlv() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodManualData.tasterlv)
  return tasterlv_;
}
inline void QueryFoodManualData::set_tasterlv(::google::protobuf::uint32 value) {
  set_has_tasterlv();
  tasterlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFoodManualData.tasterlv)
}

// repeated .Cmd.FoodManualData items = 7;
inline int QueryFoodManualData::items_size() const {
  return items_.size();
}
inline void QueryFoodManualData::clear_items() {
  items_.Clear();
}
inline const ::Cmd::FoodManualData& QueryFoodManualData::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFoodManualData.items)
  return items_.Get(index);
}
inline ::Cmd::FoodManualData* QueryFoodManualData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryFoodManualData.items)
  return items_.Mutable(index);
}
inline ::Cmd::FoodManualData* QueryFoodManualData::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QueryFoodManualData.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >&
QueryFoodManualData::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryFoodManualData.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >*
QueryFoodManualData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryFoodManualData.items)
  return &items_;
}

// -------------------------------------------------------------------

// NewFoodDataNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool NewFoodDataNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewFoodDataNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewFoodDataNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewFoodDataNtf::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command NewFoodDataNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewFoodDataNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewFoodDataNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewFoodDataNtf.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_NEW_FOOD_DATA_NTF];
inline bool NewFoodDataNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewFoodDataNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewFoodDataNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewFoodDataNtf::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::FoodParam NewFoodDataNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewFoodDataNtf.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void NewFoodDataNtf::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewFoodDataNtf.param)
}

// repeated .Cmd.FoodManualData items = 3;
inline int NewFoodDataNtf::items_size() const {
  return items_.size();
}
inline void NewFoodDataNtf::clear_items() {
  items_.Clear();
}
inline const ::Cmd::FoodManualData& NewFoodDataNtf::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NewFoodDataNtf.items)
  return items_.Get(index);
}
inline ::Cmd::FoodManualData* NewFoodDataNtf::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NewFoodDataNtf.items)
  return items_.Mutable(index);
}
inline ::Cmd::FoodManualData* NewFoodDataNtf::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.NewFoodDataNtf.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >&
NewFoodDataNtf::items() const {
  // @@protoc_insertion_point(field_list:Cmd.NewFoodDataNtf.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >*
NewFoodDataNtf::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NewFoodDataNtf.items)
  return &items_;
}

// -------------------------------------------------------------------

// ClickFoodManualData

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
inline bool ClickFoodManualData::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickFoodManualData::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickFoodManualData::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickFoodManualData::clear_cmd() {
  cmd_ = 29;
  clear_has_cmd();
}
inline ::Cmd::Command ClickFoodManualData::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ClickFoodManualData.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ClickFoodManualData::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClickFoodManualData.cmd)
}

// optional .Cmd.FoodParam param = 2 [default = FOODPARAM_CLICK_FOOD_MANUAL_DATA];
inline bool ClickFoodManualData::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClickFoodManualData::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClickFoodManualData::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClickFoodManualData::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::FoodParam ClickFoodManualData::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ClickFoodManualData.param)
  return static_cast< ::Cmd::FoodParam >(param_);
}
inline void ClickFoodManualData::set_param(::Cmd::FoodParam value) {
  assert(::Cmd::FoodParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClickFoodManualData.param)
}

// optional .Cmd.EFoodDataType type = 3;
inline bool ClickFoodManualData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClickFoodManualData::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClickFoodManualData::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClickFoodManualData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EFoodDataType ClickFoodManualData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ClickFoodManualData.type)
  return static_cast< ::Cmd::EFoodDataType >(type_);
}
inline void ClickFoodManualData::set_type(::Cmd::EFoodDataType value) {
  assert(::Cmd::EFoodDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClickFoodManualData.type)
}

// optional uint32 itemid = 4;
inline bool ClickFoodManualData::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClickFoodManualData::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClickFoodManualData::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClickFoodManualData::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ClickFoodManualData::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ClickFoodManualData.itemid)
  return itemid_;
}
inline void ClickFoodManualData::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClickFoodManualData.itemid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::FoodParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::FoodParam>() {
  return ::Cmd::FoodParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ECookType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ECookType>() {
  return ::Cmd::ECookType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ECookState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ECookState>() {
  return ::Cmd::ECookState_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EEatPower> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EEatPower>() {
  return ::Cmd::EEatPower_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFoodDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFoodDataType>() {
  return ::Cmd::EFoodDataType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFoodStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFoodStatus>() {
  return ::Cmd::EFoodStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneFood_2eproto__INCLUDED
