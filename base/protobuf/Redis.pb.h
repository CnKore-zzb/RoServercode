// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Redis.proto

#ifndef PROTOBUF_Redis_2eproto__INCLUDED
#define PROTOBUF_Redis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Redis_2eproto();
void protobuf_AssignDesc_Redis_2eproto();
void protobuf_ShutdownFile_Redis_2eproto();

class RedisItemTest;
class RedisTest;

enum ERedisParam {
  EREDISPARAM_TEST = 1
};
bool ERedisParam_IsValid(int value);
const ERedisParam ERedisParam_MIN = EREDISPARAM_TEST;
const ERedisParam ERedisParam_MAX = EREDISPARAM_TEST;
const int ERedisParam_ARRAYSIZE = ERedisParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERedisParam_descriptor();
inline const ::std::string& ERedisParam_Name(ERedisParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERedisParam_descriptor(), value);
}
inline bool ERedisParam_Parse(
    const ::std::string& name, ERedisParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERedisParam>(
    ERedisParam_descriptor(), name, value);
}
// ===================================================================

class RedisItemTest : public ::google::protobuf::Message {
 public:
  RedisItemTest();
  virtual ~RedisItemTest();

  RedisItemTest(const RedisItemTest& from);

  inline RedisItemTest& operator=(const RedisItemTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisItemTest& default_instance();

  void Swap(RedisItemTest* other);

  // implements Message ----------------------------------------------

  RedisItemTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedisItemTest& from);
  void MergeFrom(const RedisItemTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:Cmd.RedisItemTest)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* str_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_Redis_2eproto();
  friend void protobuf_AssignDesc_Redis_2eproto();
  friend void protobuf_ShutdownFile_Redis_2eproto();

  void InitAsDefaultInstance();
  static RedisItemTest* default_instance_;
};
// -------------------------------------------------------------------

class RedisTest : public ::google::protobuf::Message {
 public:
  RedisTest();
  virtual ~RedisTest();

  RedisTest(const RedisTest& from);

  inline RedisTest& operator=(const RedisTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisTest& default_instance();

  void Swap(RedisTest* other);

  // implements Message ----------------------------------------------

  RedisTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedisTest& from);
  void MergeFrom(const RedisTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 number = 1 [default = 0];
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // repeated uint32 numbers = 3;
  inline int numbers_size() const;
  inline void clear_numbers();
  static const int kNumbersFieldNumber = 3;
  inline ::google::protobuf::uint32 numbers(int index) const;
  inline void set_numbers(int index, ::google::protobuf::uint32 value);
  inline void add_numbers(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      numbers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_numbers();

  // repeated string strs = 4;
  inline int strs_size() const;
  inline void clear_strs();
  static const int kStrsFieldNumber = 4;
  inline const ::std::string& strs(int index) const;
  inline ::std::string* mutable_strs(int index);
  inline void set_strs(int index, const ::std::string& value);
  inline void set_strs(int index, const char* value);
  inline void set_strs(int index, const char* value, size_t size);
  inline ::std::string* add_strs();
  inline void add_strs(const ::std::string& value);
  inline void add_strs(const char* value);
  inline void add_strs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strs();

  // optional .Cmd.RedisItemTest item = 5;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 5;
  inline const ::Cmd::RedisItemTest& item() const;
  inline ::Cmd::RedisItemTest* mutable_item();
  inline ::Cmd::RedisItemTest* release_item();
  inline void set_allocated_item(::Cmd::RedisItemTest* item);

  // repeated .Cmd.RedisItemTest items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::Cmd::RedisItemTest& items(int index) const;
  inline ::Cmd::RedisItemTest* mutable_items(int index);
  inline ::Cmd::RedisItemTest* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RedisItemTest >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RedisItemTest >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.RedisTest)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* str_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > numbers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strs_;
  ::Cmd::RedisItemTest* item_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RedisItemTest > items_;
  ::google::protobuf::uint32 number_;
  friend void  protobuf_AddDesc_Redis_2eproto();
  friend void protobuf_AssignDesc_Redis_2eproto();
  friend void protobuf_ShutdownFile_Redis_2eproto();

  void InitAsDefaultInstance();
  static RedisTest* default_instance_;
};
// ===================================================================


// ===================================================================

// RedisItemTest

// optional uint32 num = 1 [default = 0];
inline bool RedisItemTest::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisItemTest::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisItemTest::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisItemTest::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 RedisItemTest::num() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisItemTest.num)
  return num_;
}
inline void RedisItemTest::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisItemTest.num)
}

// optional string str = 2;
inline bool RedisItemTest::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisItemTest::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisItemTest::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisItemTest::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& RedisItemTest::str() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisItemTest.str)
  return *str_;
}
inline void RedisItemTest::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RedisItemTest.str)
}
inline void RedisItemTest::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RedisItemTest.str)
}
inline void RedisItemTest::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RedisItemTest.str)
}
inline ::std::string* RedisItemTest::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RedisItemTest.str)
  return str_;
}
inline ::std::string* RedisItemTest::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RedisItemTest::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RedisItemTest.str)
}

// -------------------------------------------------------------------

// RedisTest

// optional uint32 number = 1 [default = 0];
inline bool RedisTest::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisTest::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisTest::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisTest::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 RedisTest::number() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisTest.number)
  return number_;
}
inline void RedisTest::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisTest.number)
}

// optional string str = 2;
inline bool RedisTest::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisTest::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisTest::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisTest::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& RedisTest::str() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisTest.str)
  return *str_;
}
inline void RedisTest::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RedisTest.str)
}
inline void RedisTest::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RedisTest.str)
}
inline void RedisTest::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RedisTest.str)
}
inline ::std::string* RedisTest::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RedisTest.str)
  return str_;
}
inline ::std::string* RedisTest::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RedisTest::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RedisTest.str)
}

// repeated uint32 numbers = 3;
inline int RedisTest::numbers_size() const {
  return numbers_.size();
}
inline void RedisTest::clear_numbers() {
  numbers_.Clear();
}
inline ::google::protobuf::uint32 RedisTest::numbers(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RedisTest.numbers)
  return numbers_.Get(index);
}
inline void RedisTest::set_numbers(int index, ::google::protobuf::uint32 value) {
  numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.RedisTest.numbers)
}
inline void RedisTest::add_numbers(::google::protobuf::uint32 value) {
  numbers_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.RedisTest.numbers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RedisTest::numbers() const {
  // @@protoc_insertion_point(field_list:Cmd.RedisTest.numbers)
  return numbers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RedisTest::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RedisTest.numbers)
  return &numbers_;
}

// repeated string strs = 4;
inline int RedisTest::strs_size() const {
  return strs_.size();
}
inline void RedisTest::clear_strs() {
  strs_.Clear();
}
inline const ::std::string& RedisTest::strs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RedisTest.strs)
  return strs_.Get(index);
}
inline ::std::string* RedisTest::mutable_strs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RedisTest.strs)
  return strs_.Mutable(index);
}
inline void RedisTest::set_strs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.RedisTest.strs)
  strs_.Mutable(index)->assign(value);
}
inline void RedisTest::set_strs(int index, const char* value) {
  strs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RedisTest.strs)
}
inline void RedisTest::set_strs(int index, const char* value, size_t size) {
  strs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RedisTest.strs)
}
inline ::std::string* RedisTest::add_strs() {
  return strs_.Add();
}
inline void RedisTest::add_strs(const ::std::string& value) {
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.RedisTest.strs)
}
inline void RedisTest::add_strs(const char* value) {
  strs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.RedisTest.strs)
}
inline void RedisTest::add_strs(const char* value, size_t size) {
  strs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.RedisTest.strs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RedisTest::strs() const {
  // @@protoc_insertion_point(field_list:Cmd.RedisTest.strs)
  return strs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RedisTest::mutable_strs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RedisTest.strs)
  return &strs_;
}

// optional .Cmd.RedisItemTest item = 5;
inline bool RedisTest::has_item() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedisTest::set_has_item() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedisTest::clear_has_item() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedisTest::clear_item() {
  if (item_ != NULL) item_->::Cmd::RedisItemTest::Clear();
  clear_has_item();
}
inline const ::Cmd::RedisItemTest& RedisTest::item() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisTest.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Cmd::RedisItemTest* RedisTest::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Cmd::RedisItemTest;
  // @@protoc_insertion_point(field_mutable:Cmd.RedisTest.item)
  return item_;
}
inline ::Cmd::RedisItemTest* RedisTest::release_item() {
  clear_has_item();
  ::Cmd::RedisItemTest* temp = item_;
  item_ = NULL;
  return temp;
}
inline void RedisTest::set_allocated_item(::Cmd::RedisItemTest* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RedisTest.item)
}

// repeated .Cmd.RedisItemTest items = 6;
inline int RedisTest::items_size() const {
  return items_.size();
}
inline void RedisTest::clear_items() {
  items_.Clear();
}
inline const ::Cmd::RedisItemTest& RedisTest::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RedisTest.items)
  return items_.Get(index);
}
inline ::Cmd::RedisItemTest* RedisTest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RedisTest.items)
  return items_.Mutable(index);
}
inline ::Cmd::RedisItemTest* RedisTest::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.RedisTest.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RedisItemTest >&
RedisTest::items() const {
  // @@protoc_insertion_point(field_list:Cmd.RedisTest.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RedisItemTest >*
RedisTest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RedisTest.items)
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::ERedisParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERedisParam>() {
  return ::Cmd::ERedisParam_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Redis_2eproto__INCLUDED
