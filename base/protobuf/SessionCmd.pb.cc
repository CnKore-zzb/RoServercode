// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SessionCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* RaidMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaidMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapRegSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapRegSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRaidMapSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRaidMapSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDMapSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDMapSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSceneSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSceneSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSceneResultSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSceneResultSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDataSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDataSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToUserMapSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToUserMapSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadLuaSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadLuaSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecGMCmdSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecGMCmdSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneTowerUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneTowerUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerMonsterKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerMonsterKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionSceneUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionSceneUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMailAttachSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMailAttachSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowerIDCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowerIDCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsgSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsgSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGlobalDaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGlobalDaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySealTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySealTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelSceneImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelSceneImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamSeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamSeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginNtfSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginNtfSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLoginSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLoginSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrSetUserDataSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrSetUserDataSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSceneSingleSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSceneSingleSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegMapFailSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegMapFailSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegMapOKSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegMapOKSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardUserSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardUserSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardUserSceneSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardUserSceneSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardUserSessionSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardUserSessionSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardUserSceneSvrSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardUserSceneSvrSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGuildTerritorySessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGuildTerritorySessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncDojoSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncDojoSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GagSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GagSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LockSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* IteamImageSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IteamImageSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FerrisInviteSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FerrisInviteSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterFerrisReadySessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterFerrisReadySessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityTestAndSetSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityTestAndSetSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityStatusSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityStatusSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeTeamSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeTeamSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardRegionSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardRegionSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BreakHandSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BreakHandSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityStopSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityStopSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WantedInfoSyncSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WantedInfoSyncSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryZoneStatusSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryZoneStatusSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMailFromScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMailFromScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTradeLogSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTradeLogSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRaidCloseSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRaidCloseSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthorizeInfoSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthorizeInfoSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRaidCloseSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRaidCloseSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePwdSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePwdSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoBackSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoBackSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WantedQuestFinishCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WantedQuestFinishCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddOfflineItemSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddOfflineItemSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateOperActivitySessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateOperActivitySessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncShopSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncShopSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateActivityEventSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateActivityEventSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEventNtfSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEventNtfSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoveLetterSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoveLetterSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoveLetterSendSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoveLetterSendSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemCodeSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemCodeSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUsedItemCodeSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUsedItemCodeSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalActivityStartSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalActivityStartSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalActivityStopSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalActivityStopSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLotteryGiveSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLotteryGiveSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncOperateRewardSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncOperateRewardSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyActivitySessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyActivitySessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveRewardSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveRewardSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WantedQuestSetCDSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WantedQuestSetCDSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserQuotaOperSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserQuotaOperSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncWorldLevelSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncWorldLevelSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserEnterSceneSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserEnterSceneSessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncUserVarSessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncUserVarSessionCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGetMailOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESceneImageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESetSealStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SessionCmd_2eproto() {
  protobuf_AddDesc_SessionCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SessionCmd.proto");
  GOOGLE_CHECK(file != NULL);
  RaidMapData_descriptor_ = file->message_type(0);
  static const int RaidMapData_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, guildlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, restrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, memberlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, imagecenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, imagerange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, enterpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, sealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, guildraidindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, nomonsterlayer_),
  };
  RaidMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaidMapData_descriptor_,
      RaidMapData::default_instance_,
      RaidMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaidMapData));
  MapRegSessionCmd_descriptor_ = file->message_type(1);
  static const int MapRegSessionCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, data_),
  };
  MapRegSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapRegSessionCmd_descriptor_,
      MapRegSessionCmd::default_instance_,
      MapRegSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRegSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapRegSessionCmd));
  CreateRaidMapSessionCmd_descriptor_ = file->message_type(2);
  static const int CreateRaidMapSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRaidMapSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRaidMapSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRaidMapSessionCmd, data_),
  };
  CreateRaidMapSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRaidMapSessionCmd_descriptor_,
      CreateRaidMapSessionCmd::default_instance_,
      CreateRaidMapSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRaidMapSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRaidMapSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRaidMapSessionCmd));
  DeleteDMapSessionCmd_descriptor_ = file->message_type(3);
  static const int DeleteDMapSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDMapSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDMapSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDMapSessionCmd, mapid_),
  };
  DeleteDMapSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteDMapSessionCmd_descriptor_,
      DeleteDMapSessionCmd::default_instance_,
      DeleteDMapSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDMapSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDMapSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteDMapSessionCmd));
  ChangeSceneSessionCmd_descriptor_ = file->message_type(4);
  static const int ChangeSceneSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSessionCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSessionCmd, pos_),
  };
  ChangeSceneSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSceneSessionCmd_descriptor_,
      ChangeSceneSessionCmd::default_instance_,
      ChangeSceneSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSceneSessionCmd));
  ChangeSceneResultSessionCmd_descriptor_ = file->message_type(5);
  static const int ChangeSceneResultSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResultSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResultSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResultSessionCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResultSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResultSessionCmd, pos_),
  };
  ChangeSceneResultSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSceneResultSessionCmd_descriptor_,
      ChangeSceneResultSessionCmd::default_instance_,
      ChangeSceneResultSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResultSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResultSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSceneResultSessionCmd));
  UserDataSync_descriptor_ = file->message_type(6);
  static const int UserDataSync_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, attrs_),
  };
  UserDataSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDataSync_descriptor_,
      UserDataSync::default_instance_,
      UserDataSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDataSync));
  GoToUserMapSessionCmd_descriptor_ = file->message_type(7);
  static const int GoToUserMapSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserMapSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserMapSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserMapSessionCmd, targetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserMapSessionCmd, gotouserid_),
  };
  GoToUserMapSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToUserMapSessionCmd_descriptor_,
      GoToUserMapSessionCmd::default_instance_,
      GoToUserMapSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserMapSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserMapSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToUserMapSessionCmd));
  LoadLuaSessionCmd_descriptor_ = file->message_type(8);
  static const int LoadLuaSessionCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, lua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, allzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, load_type_),
  };
  LoadLuaSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadLuaSessionCmd_descriptor_,
      LoadLuaSessionCmd::default_instance_,
      LoadLuaSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadLuaSessionCmd));
  ExecGMCmdSessionCmd_descriptor_ = file->message_type(9);
  static const int ExecGMCmdSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmdSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmdSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmdSessionCmd, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmdSessionCmd, gmcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmdSessionCmd, allzone_),
  };
  ExecGMCmdSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecGMCmdSessionCmd_descriptor_,
      ExecGMCmdSessionCmd::default_instance_,
      ExecGMCmdSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmdSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmdSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecGMCmdSessionCmd));
  TowerLayer_descriptor_ = file->message_type(10);
  static const int TowerLayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayer, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayer, curmonsterids_),
  };
  TowerLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerLayer_descriptor_,
      TowerLayer::default_instance_,
      TowerLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerLayer));
  TowerInfo_descriptor_ = file->message_type(11);
  static const int TowerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, killmonsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, layers_),
  };
  TowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerInfo_descriptor_,
      TowerInfo::default_instance_,
      TowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerInfo));
  SceneTowerUpdate_descriptor_ = file->message_type(12);
  static const int SceneTowerUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTowerUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTowerUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTowerUpdate, info_),
  };
  SceneTowerUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneTowerUpdate_descriptor_,
      SceneTowerUpdate::default_instance_,
      SceneTowerUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTowerUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTowerUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneTowerUpdate));
  TowerMonsterKill_descriptor_ = file->message_type(13);
  static const int TowerMonsterKill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerMonsterKill, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerMonsterKill, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerMonsterKill, monsterid_),
  };
  TowerMonsterKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerMonsterKill_descriptor_,
      TowerMonsterKill::default_instance_,
      TowerMonsterKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerMonsterKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerMonsterKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerMonsterKill));
  SendMail_descriptor_ = file->message_type(14);
  static const int SendMail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMail, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMail, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMail, data_),
  };
  SendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMail_descriptor_,
      SendMail::default_instance_,
      SendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMail));
  SessionSceneUserCmd_descriptor_ = file->message_type(15);
  static const int SessionSceneUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSceneUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSceneUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSceneUserCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSceneUserCmd, cmddata_),
  };
  SessionSceneUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionSceneUserCmd_descriptor_,
      SessionSceneUserCmd::default_instance_,
      SessionSceneUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSceneUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionSceneUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionSceneUserCmd));
  GetMailAttachSessionCmd_descriptor_ = file->message_type(16);
  static const int GetMailAttachSessionCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, itemdatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, opt_),
  };
  GetMailAttachSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMailAttachSessionCmd_descriptor_,
      GetMailAttachSessionCmd::default_instance_,
      GetMailAttachSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMailAttachSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMailAttachSessionCmd));
  FollowerIDCheck_descriptor_ = file->message_type(17);
  static const int FollowerIDCheck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerIDCheck, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerIDCheck, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerIDCheck, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerIDCheck, followid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerIDCheck, etype_),
  };
  FollowerIDCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowerIDCheck_descriptor_,
      FollowerIDCheck::default_instance_,
      FollowerIDCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerIDCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerIDCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowerIDCheck));
  Event_descriptor_ = file->message_type(18);
  static const int Event_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, params_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  ChatMsgSession_descriptor_ = file->message_type(19);
  static const int ChatMsgSession_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, voicetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, blink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, msgover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, barrage_),
  };
  ChatMsgSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsgSession_descriptor_,
      ChatMsgSession::default_instance_,
      ChatMsgSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsgSession));
  SetGlobalDaily_descriptor_ = file->message_type(20);
  static const int SetGlobalDaily_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGlobalDaily, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGlobalDaily, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGlobalDaily, value_),
  };
  SetGlobalDaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGlobalDaily_descriptor_,
      SetGlobalDaily::default_instance_,
      SetGlobalDaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGlobalDaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGlobalDaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGlobalDaily));
  RefreshQuest_descriptor_ = file->message_type(21);
  static const int RefreshQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuest, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuest, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuest, value_),
  };
  RefreshQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshQuest_descriptor_,
      RefreshQuest::default_instance_,
      RefreshQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshQuest));
  QuerySealTimer_descriptor_ = file->message_type(22);
  static const int QuerySealTimer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySealTimer, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySealTimer, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySealTimer, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySealTimer, teamid_),
  };
  QuerySealTimer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySealTimer_descriptor_,
      QuerySealTimer::default_instance_,
      QuerySealTimer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySealTimer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySealTimer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySealTimer));
  DelSceneImage_descriptor_ = file->message_type(23);
  static const int DelSceneImage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, realscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, raid_),
  };
  DelSceneImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelSceneImage_descriptor_,
      DelSceneImage::default_instance_,
      DelSceneImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelSceneImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelSceneImage));
  SetTeamSeal_descriptor_ = file->message_type(24);
  static const int SetTeamSeal_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, sealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, estatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, teamers_),
  };
  SetTeamSeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTeamSeal_descriptor_,
      SetTeamSeal::default_instance_,
      SetTeamSeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamSeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTeamSeal));
  UserLoginNtfSessionCmd_descriptor_ = file->message_type(25);
  static const int UserLoginNtfSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginNtfSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginNtfSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginNtfSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginNtfSessionCmd, servername_),
  };
  UserLoginNtfSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginNtfSessionCmd_descriptor_,
      UserLoginNtfSessionCmd::default_instance_,
      UserLoginNtfSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginNtfSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginNtfSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginNtfSessionCmd));
  RefreshTower_descriptor_ = file->message_type(26);
  static const int RefreshTower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTower, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTower, param_),
  };
  RefreshTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshTower_descriptor_,
      RefreshTower::default_instance_,
      RefreshTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshTower));
  NotifyLoginSessionCmd_descriptor_ = file->message_type(27);
  static const int NotifyLoginSessionCmd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, ischangescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, gatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, ignorepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, realauthorized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, maxbaselv_),
  };
  NotifyLoginSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLoginSessionCmd_descriptor_,
      NotifyLoginSessionCmd::default_instance_,
      NotifyLoginSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLoginSessionCmd));
  ErrSetUserDataSessionCmd_descriptor_ = file->message_type(28);
  static const int ErrSetUserDataSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrSetUserDataSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrSetUserDataSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrSetUserDataSessionCmd, id_),
  };
  ErrSetUserDataSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrSetUserDataSessionCmd_descriptor_,
      ErrSetUserDataSessionCmd::default_instance_,
      ErrSetUserDataSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrSetUserDataSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrSetUserDataSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrSetUserDataSessionCmd));
  ChangeSceneSingleSessionCmd_descriptor_ = file->message_type(29);
  static const int ChangeSceneSingleSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSingleSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSingleSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSingleSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSingleSessionCmd, mapid_),
  };
  ChangeSceneSingleSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSceneSingleSessionCmd_descriptor_,
      ChangeSceneSingleSessionCmd::default_instance_,
      ChangeSceneSingleSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSingleSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneSingleSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSceneSingleSessionCmd));
  RegMapFailSessionCmd_descriptor_ = file->message_type(30);
  static const int RegMapFailSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapFailSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapFailSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapFailSessionCmd, mapid_),
  };
  RegMapFailSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegMapFailSessionCmd_descriptor_,
      RegMapFailSessionCmd::default_instance_,
      RegMapFailSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapFailSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapFailSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegMapFailSessionCmd));
  RegMapOKSessionCmd_descriptor_ = file->message_type(31);
  static const int RegMapOKSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapOKSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapOKSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapOKSessionCmd, mapid_),
  };
  RegMapOKSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegMapOKSessionCmd_descriptor_,
      RegMapOKSessionCmd::default_instance_,
      RegMapOKSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapOKSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegMapOKSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegMapOKSessionCmd));
  ForwardUserSessionCmd_descriptor_ = file->message_type(32);
  static const int ForwardUserSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionCmd, data_),
  };
  ForwardUserSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardUserSessionCmd_descriptor_,
      ForwardUserSessionCmd::default_instance_,
      ForwardUserSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardUserSessionCmd));
  ForwardUserSceneSessionCmd_descriptor_ = file->message_type(33);
  static const int ForwardUserSceneSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSessionCmd, data_),
  };
  ForwardUserSceneSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardUserSceneSessionCmd_descriptor_,
      ForwardUserSceneSessionCmd::default_instance_,
      ForwardUserSceneSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardUserSceneSessionCmd));
  ForwardUserSessionSessionCmd_descriptor_ = file->message_type(34);
  static const int ForwardUserSessionSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionSessionCmd, data_),
  };
  ForwardUserSessionSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardUserSessionSessionCmd_descriptor_,
      ForwardUserSessionSessionCmd::default_instance_,
      ForwardUserSessionSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSessionSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardUserSessionSessionCmd));
  ForwardUserSceneSvrSessionCmd_descriptor_ = file->message_type(35);
  static const int ForwardUserSceneSvrSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSvrSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSvrSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSvrSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSvrSessionCmd, data_),
  };
  ForwardUserSceneSvrSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardUserSceneSvrSessionCmd_descriptor_,
      ForwardUserSceneSvrSessionCmd::default_instance_,
      ForwardUserSceneSvrSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSvrSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserSceneSvrSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardUserSceneSvrSessionCmd));
  EnterGuildTerritorySessionCmd_descriptor_ = file->message_type(36);
  static const int EnterGuildTerritorySessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritorySessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritorySessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritorySessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritorySessionCmd, targetid_),
  };
  EnterGuildTerritorySessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGuildTerritorySessionCmd_descriptor_,
      EnterGuildTerritorySessionCmd::default_instance_,
      EnterGuildTerritorySessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritorySessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritorySessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGuildTerritorySessionCmd));
  SyncDojoSessionCmd_descriptor_ = file->message_type(37);
  static const int SyncDojoSessionCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, teamguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, sponsorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, del_),
  };
  SyncDojoSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncDojoSessionCmd_descriptor_,
      SyncDojoSessionCmd::default_instance_,
      SyncDojoSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDojoSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncDojoSessionCmd));
  ChargeSessionCmd_descriptor_ = file->message_type(38);
  static const int ChargeSessionCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, dataid_),
  };
  ChargeSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeSessionCmd_descriptor_,
      ChargeSessionCmd::default_instance_,
      ChargeSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeSessionCmd));
  GagSessionCmd_descriptor_ = file->message_type(39);
  static const int GagSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GagSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GagSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GagSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GagSessionCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GagSessionCmd, reason_),
  };
  GagSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GagSessionCmd_descriptor_,
      GagSessionCmd::default_instance_,
      GagSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GagSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GagSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GagSessionCmd));
  LockSessionCmd_descriptor_ = file->message_type(40);
  static const int LockSessionCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, account_),
  };
  LockSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LockSessionCmd_descriptor_,
      LockSessionCmd::default_instance_,
      LockSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LockSessionCmd));
  IteamImageSessionCmd_descriptor_ = file->message_type(41);
  static const int IteamImageSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteamImageSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteamImageSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteamImageSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteamImageSessionCmd, teamid_),
  };
  IteamImageSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IteamImageSessionCmd_descriptor_,
      IteamImageSessionCmd::default_instance_,
      IteamImageSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteamImageSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteamImageSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IteamImageSessionCmd));
  FerrisInviteSessionCmd_descriptor_ = file->message_type(42);
  static const int FerrisInviteSessionCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, id_),
  };
  FerrisInviteSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FerrisInviteSessionCmd_descriptor_,
      FerrisInviteSessionCmd::default_instance_,
      FerrisInviteSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisInviteSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FerrisInviteSessionCmd));
  EnterFerrisReadySessionCmd_descriptor_ = file->message_type(43);
  static const int EnterFerrisReadySessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFerrisReadySessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFerrisReadySessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFerrisReadySessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFerrisReadySessionCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFerrisReadySessionCmd, id_),
  };
  EnterFerrisReadySessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterFerrisReadySessionCmd_descriptor_,
      EnterFerrisReadySessionCmd::default_instance_,
      EnterFerrisReadySessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFerrisReadySessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFerrisReadySessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterFerrisReadySessionCmd));
  ActivityTestAndSetSessionCmd_descriptor_ = file->message_type(44);
  static const int ActivityTestAndSetSessionCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, ret_),
  };
  ActivityTestAndSetSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityTestAndSetSessionCmd_descriptor_,
      ActivityTestAndSetSessionCmd::default_instance_,
      ActivityTestAndSetSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTestAndSetSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityTestAndSetSessionCmd));
  ActivityStatusSessionCmd_descriptor_ = file->message_type(45);
  static const int ActivityStatusSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatusSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatusSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatusSessionCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatusSessionCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatusSessionCmd, start_),
  };
  ActivityStatusSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityStatusSessionCmd_descriptor_,
      ActivityStatusSessionCmd::default_instance_,
      ActivityStatusSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatusSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStatusSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityStatusSessionCmd));
  ChangeTeamSessionCmd_descriptor_ = file->message_type(46);
  static const int ChangeTeamSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamSessionCmd, join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamSessionCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamSessionCmd, teamid_),
  };
  ChangeTeamSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeTeamSessionCmd_descriptor_,
      ChangeTeamSessionCmd::default_instance_,
      ChangeTeamSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeTeamSessionCmd));
  ForwardRegionSessionCmd_descriptor_ = file->message_type(47);
  static const int ForwardRegionSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRegionSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRegionSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRegionSessionCmd, region_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRegionSessionCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRegionSessionCmd, len_),
  };
  ForwardRegionSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardRegionSessionCmd_descriptor_,
      ForwardRegionSessionCmd::default_instance_,
      ForwardRegionSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRegionSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardRegionSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardRegionSessionCmd));
  BreakHandSessionCmd_descriptor_ = file->message_type(48);
  static const int BreakHandSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakHandSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakHandSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakHandSessionCmd, userid_),
  };
  BreakHandSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BreakHandSessionCmd_descriptor_,
      BreakHandSessionCmd::default_instance_,
      BreakHandSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakHandSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakHandSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BreakHandSessionCmd));
  ActivityStopSessionCmd_descriptor_ = file->message_type(49);
  static const int ActivityStopSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStopSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStopSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStopSessionCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStopSessionCmd, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStopSessionCmd, mapid_),
  };
  ActivityStopSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityStopSessionCmd_descriptor_,
      ActivityStopSessionCmd::default_instance_,
      ActivityStopSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStopSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStopSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityStopSessionCmd));
  WantedInfoSyncSessionCmd_descriptor_ = file->message_type(50);
  static const int WantedInfoSyncSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedInfoSyncSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedInfoSyncSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedInfoSyncSessionCmd, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedInfoSyncSessionCmd, maxcount_),
  };
  WantedInfoSyncSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WantedInfoSyncSessionCmd_descriptor_,
      WantedInfoSyncSessionCmd::default_instance_,
      WantedInfoSyncSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedInfoSyncSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedInfoSyncSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WantedInfoSyncSessionCmd));
  QueryZoneStatusSessionCmd_descriptor_ = file->message_type(51);
  static const int QueryZoneStatusSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusSessionCmd, infos_),
  };
  QueryZoneStatusSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryZoneStatusSessionCmd_descriptor_,
      QueryZoneStatusSessionCmd::default_instance_,
      QueryZoneStatusSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryZoneStatusSessionCmd));
  SendMailFromScene_descriptor_ = file->message_type(52);
  static const int SendMailFromScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailFromScene, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailFromScene, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailFromScene, data_),
  };
  SendMailFromScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMailFromScene_descriptor_,
      SendMailFromScene::default_instance_,
      SendMailFromScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailFromScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailFromScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMailFromScene));
  GetTradeLogSessionCmd_descriptor_ = file->message_type(53);
  static const int GetTradeLogSessionCmd_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, logtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, sell_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, sell_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, sell_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, refine_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, ret_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, trade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, quota_),
  };
  GetTradeLogSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTradeLogSessionCmd_descriptor_,
      GetTradeLogSessionCmd::default_instance_,
      GetTradeLogSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTradeLogSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTradeLogSessionCmd));
  QuestRaidCloseSessionCmd_descriptor_ = file->message_type(54);
  static const int QuestRaidCloseSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCloseSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCloseSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCloseSessionCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCloseSessionCmd, raidid_),
  };
  QuestRaidCloseSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRaidCloseSessionCmd_descriptor_,
      QuestRaidCloseSessionCmd::default_instance_,
      QuestRaidCloseSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCloseSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRaidCloseSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRaidCloseSessionCmd));
  AuthorizeInfoSessionCmd_descriptor_ = file->message_type(55);
  static const int AuthorizeInfoSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSessionCmd, ignorepwd_),
  };
  AuthorizeInfoSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthorizeInfoSessionCmd_descriptor_,
      AuthorizeInfoSessionCmd::default_instance_,
      AuthorizeInfoSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthorizeInfoSessionCmd));
  GuildRaidCloseSessionCmd_descriptor_ = file->message_type(56);
  static const int GuildRaidCloseSessionCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, curmapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, teamid_),
  };
  GuildRaidCloseSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRaidCloseSessionCmd_descriptor_,
      GuildRaidCloseSessionCmd::default_instance_,
      GuildRaidCloseSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaidCloseSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRaidCloseSessionCmd));
  DeletePwdSessionCmd_descriptor_ = file->message_type(57);
  static const int DeletePwdSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePwdSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePwdSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePwdSessionCmd, charid_),
  };
  DeletePwdSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePwdSessionCmd_descriptor_,
      DeletePwdSessionCmd::default_instance_,
      DeletePwdSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePwdSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePwdSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePwdSessionCmd));
  GoBackSessionCmd_descriptor_ = file->message_type(58);
  static const int GoBackSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoBackSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoBackSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoBackSessionCmd, charid_),
  };
  GoBackSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoBackSessionCmd_descriptor_,
      GoBackSessionCmd::default_instance_,
      GoBackSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoBackSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoBackSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoBackSessionCmd));
  WantedQuestFinishCmd_descriptor_ = file->message_type(59);
  static const int WantedQuestFinishCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestFinishCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestFinishCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestFinishCmd, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestFinishCmd, teammateid_),
  };
  WantedQuestFinishCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WantedQuestFinishCmd_descriptor_,
      WantedQuestFinishCmd::default_instance_,
      WantedQuestFinishCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestFinishCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestFinishCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WantedQuestFinishCmd));
  AddOfflineItemSessionCmd_descriptor_ = file->message_type(60);
  static const int AddOfflineItemSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineItemSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineItemSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineItemSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineItemSessionCmd, data_),
  };
  AddOfflineItemSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddOfflineItemSessionCmd_descriptor_,
      AddOfflineItemSessionCmd::default_instance_,
      AddOfflineItemSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineItemSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineItemSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddOfflineItemSessionCmd));
  UpdateOperActivitySessionCmd_descriptor_ = file->message_type(61);
  static const int UpdateOperActivitySessionCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOperActivitySessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOperActivitySessionCmd, param_),
  };
  UpdateOperActivitySessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateOperActivitySessionCmd_descriptor_,
      UpdateOperActivitySessionCmd::default_instance_,
      UpdateOperActivitySessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOperActivitySessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateOperActivitySessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateOperActivitySessionCmd));
  SessionShopData_descriptor_ = file->message_type(62);
  static const int SessionShopData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionShopData, old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionShopData, now_),
  };
  SessionShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionShopData_descriptor_,
      SessionShopData::default_instance_,
      SessionShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionShopData));
  SyncShopSessionCmd_descriptor_ = file->message_type(63);
  static const int SyncShopSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncShopSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncShopSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncShopSessionCmd, item_),
  };
  SyncShopSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncShopSessionCmd_descriptor_,
      SyncShopSessionCmd::default_instance_,
      SyncShopSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncShopSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncShopSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncShopSessionCmd));
  UpdateActivityEventSessionCmd_descriptor_ = file->message_type(64);
  static const int UpdateActivityEventSessionCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityEventSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityEventSessionCmd, param_),
  };
  UpdateActivityEventSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateActivityEventSessionCmd_descriptor_,
      UpdateActivityEventSessionCmd::default_instance_,
      UpdateActivityEventSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityEventSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityEventSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateActivityEventSessionCmd));
  ActivityEventNtfSessionCmd_descriptor_ = file->message_type(65);
  static const int ActivityEventNtfSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfSessionCmd, infos_),
  };
  ActivityEventNtfSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEventNtfSessionCmd_descriptor_,
      ActivityEventNtfSessionCmd::default_instance_,
      ActivityEventNtfSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEventNtfSessionCmd));
  LoveLetterSessionCmd_descriptor_ = file->message_type(66);
  static const int LoveLetterSessionCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, type_),
  };
  LoveLetterSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoveLetterSessionCmd_descriptor_,
      LoveLetterSessionCmd::default_instance_,
      LoveLetterSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoveLetterSessionCmd));
  LoveLetterSendSessionCmd_descriptor_ = file->message_type(67);
  static const int LoveLetterSendSessionCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, type_),
  };
  LoveLetterSendSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoveLetterSendSessionCmd_descriptor_,
      LoveLetterSendSessionCmd::default_instance_,
      LoveLetterSendSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterSendSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoveLetterSendSessionCmd));
  UseItemCodeSessionCmd_descriptor_ = file->message_type(68);
  static const int UseItemCodeSessionCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, code_),
  };
  UseItemCodeSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemCodeSessionCmd_descriptor_,
      UseItemCodeSessionCmd::default_instance_,
      UseItemCodeSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemCodeSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemCodeSessionCmd));
  ReqUsedItemCodeSessionCmd_descriptor_ = file->message_type(69);
  static const int ReqUsedItemCodeSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUsedItemCodeSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUsedItemCodeSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUsedItemCodeSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUsedItemCodeSessionCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUsedItemCodeSessionCmd, type_),
  };
  ReqUsedItemCodeSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUsedItemCodeSessionCmd_descriptor_,
      ReqUsedItemCodeSessionCmd::default_instance_,
      ReqUsedItemCodeSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUsedItemCodeSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUsedItemCodeSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUsedItemCodeSessionCmd));
  GlobalActivityStartSessionCmd_descriptor_ = file->message_type(70);
  static const int GlobalActivityStartSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStartSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStartSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStartSessionCmd, id_),
  };
  GlobalActivityStartSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalActivityStartSessionCmd_descriptor_,
      GlobalActivityStartSessionCmd::default_instance_,
      GlobalActivityStartSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStartSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStartSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalActivityStartSessionCmd));
  GlobalActivityStopSessionCmd_descriptor_ = file->message_type(71);
  static const int GlobalActivityStopSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStopSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStopSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStopSessionCmd, id_),
  };
  GlobalActivityStopSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalActivityStopSessionCmd_descriptor_,
      GlobalActivityStopSessionCmd::default_instance_,
      GlobalActivityStopSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStopSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalActivityStopSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalActivityStopSessionCmd));
  ReqLotteryGiveSessionCmd_descriptor_ = file->message_type(72);
  static const int ReqLotteryGiveSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLotteryGiveSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLotteryGiveSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLotteryGiveSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLotteryGiveSessionCmd, iteminfo_),
  };
  ReqLotteryGiveSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLotteryGiveSessionCmd_descriptor_,
      ReqLotteryGiveSessionCmd::default_instance_,
      ReqLotteryGiveSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLotteryGiveSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLotteryGiveSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLotteryGiveSessionCmd));
  SyncOperateRewardSessionCmd_descriptor_ = file->message_type(73);
  static const int SyncOperateRewardSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperateRewardSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperateRewardSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperateRewardSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperateRewardSessionCmd, var_),
  };
  SyncOperateRewardSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncOperateRewardSessionCmd_descriptor_,
      SyncOperateRewardSessionCmd::default_instance_,
      SyncOperateRewardSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperateRewardSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOperateRewardSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncOperateRewardSessionCmd));
  NotifyActivitySessionCmd_descriptor_ = file->message_type(74);
  static const int NotifyActivitySessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyActivitySessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyActivitySessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyActivitySessionCmd, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyActivitySessionCmd, open_),
  };
  NotifyActivitySessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyActivitySessionCmd_descriptor_,
      NotifyActivitySessionCmd::default_instance_,
      NotifyActivitySessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyActivitySessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyActivitySessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyActivitySessionCmd));
  GiveRewardSessionCmd_descriptor_ = file->message_type(75);
  static const int GiveRewardSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveRewardSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveRewardSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveRewardSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveRewardSessionCmd, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveRewardSessionCmd, buffid_),
  };
  GiveRewardSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiveRewardSessionCmd_descriptor_,
      GiveRewardSessionCmd::default_instance_,
      GiveRewardSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveRewardSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveRewardSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiveRewardSessionCmd));
  WantedQuestSetCDSessionCmd_descriptor_ = file->message_type(76);
  static const int WantedQuestSetCDSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestSetCDSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestSetCDSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestSetCDSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestSetCDSessionCmd, time_),
  };
  WantedQuestSetCDSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WantedQuestSetCDSessionCmd_descriptor_,
      WantedQuestSetCDSessionCmd::default_instance_,
      WantedQuestSetCDSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestSetCDSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantedQuestSetCDSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WantedQuestSetCDSessionCmd));
  UserQuotaOperSessionCmd_descriptor_ = file->message_type(77);
  static const int UserQuotaOperSessionCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, type_),
  };
  UserQuotaOperSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserQuotaOperSessionCmd_descriptor_,
      UserQuotaOperSessionCmd::default_instance_,
      UserQuotaOperSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuotaOperSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserQuotaOperSessionCmd));
  SyncWorldLevelSessionCmd_descriptor_ = file->message_type(78);
  static const int SyncWorldLevelSessionCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWorldLevelSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWorldLevelSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWorldLevelSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWorldLevelSessionCmd, base_worldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWorldLevelSessionCmd, job_worldlevel_),
  };
  SyncWorldLevelSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncWorldLevelSessionCmd_descriptor_,
      SyncWorldLevelSessionCmd::default_instance_,
      SyncWorldLevelSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWorldLevelSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWorldLevelSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncWorldLevelSessionCmd));
  UserEnterSceneSessionCmd_descriptor_ = file->message_type(79);
  static const int UserEnterSceneSessionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterSceneSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterSceneSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterSceneSessionCmd, charid_),
  };
  UserEnterSceneSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserEnterSceneSessionCmd_descriptor_,
      UserEnterSceneSessionCmd::default_instance_,
      UserEnterSceneSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterSceneSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEnterSceneSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserEnterSceneSessionCmd));
  SyncUserVarSessionCmd_descriptor_ = file->message_type(80);
  static const int SyncUserVarSessionCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserVarSessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserVarSessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserVarSessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserVarSessionCmd, vars_),
  };
  SyncUserVarSessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncUserVarSessionCmd_descriptor_,
      SyncUserVarSessionCmd::default_instance_,
      SyncUserVarSessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserVarSessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserVarSessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncUserVarSessionCmd));
  SessionParam_descriptor_ = file->enum_type(0);
  EGetMailOpt_descriptor_ = file->enum_type(1);
  EEventType_descriptor_ = file->enum_type(2);
  ESceneImageType_descriptor_ = file->enum_type(3);
  ESetSealStatus_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SessionCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaidMapData_descriptor_, &RaidMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapRegSessionCmd_descriptor_, &MapRegSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRaidMapSessionCmd_descriptor_, &CreateRaidMapSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteDMapSessionCmd_descriptor_, &DeleteDMapSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSceneSessionCmd_descriptor_, &ChangeSceneSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSceneResultSessionCmd_descriptor_, &ChangeSceneResultSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDataSync_descriptor_, &UserDataSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToUserMapSessionCmd_descriptor_, &GoToUserMapSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadLuaSessionCmd_descriptor_, &LoadLuaSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecGMCmdSessionCmd_descriptor_, &ExecGMCmdSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerLayer_descriptor_, &TowerLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerInfo_descriptor_, &TowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneTowerUpdate_descriptor_, &SceneTowerUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerMonsterKill_descriptor_, &TowerMonsterKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMail_descriptor_, &SendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionSceneUserCmd_descriptor_, &SessionSceneUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMailAttachSessionCmd_descriptor_, &GetMailAttachSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowerIDCheck_descriptor_, &FollowerIDCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsgSession_descriptor_, &ChatMsgSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGlobalDaily_descriptor_, &SetGlobalDaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshQuest_descriptor_, &RefreshQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySealTimer_descriptor_, &QuerySealTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelSceneImage_descriptor_, &DelSceneImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTeamSeal_descriptor_, &SetTeamSeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginNtfSessionCmd_descriptor_, &UserLoginNtfSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshTower_descriptor_, &RefreshTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLoginSessionCmd_descriptor_, &NotifyLoginSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrSetUserDataSessionCmd_descriptor_, &ErrSetUserDataSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSceneSingleSessionCmd_descriptor_, &ChangeSceneSingleSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegMapFailSessionCmd_descriptor_, &RegMapFailSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegMapOKSessionCmd_descriptor_, &RegMapOKSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardUserSessionCmd_descriptor_, &ForwardUserSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardUserSceneSessionCmd_descriptor_, &ForwardUserSceneSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardUserSessionSessionCmd_descriptor_, &ForwardUserSessionSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardUserSceneSvrSessionCmd_descriptor_, &ForwardUserSceneSvrSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGuildTerritorySessionCmd_descriptor_, &EnterGuildTerritorySessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncDojoSessionCmd_descriptor_, &SyncDojoSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeSessionCmd_descriptor_, &ChargeSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GagSessionCmd_descriptor_, &GagSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LockSessionCmd_descriptor_, &LockSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IteamImageSessionCmd_descriptor_, &IteamImageSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FerrisInviteSessionCmd_descriptor_, &FerrisInviteSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterFerrisReadySessionCmd_descriptor_, &EnterFerrisReadySessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityTestAndSetSessionCmd_descriptor_, &ActivityTestAndSetSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityStatusSessionCmd_descriptor_, &ActivityStatusSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeTeamSessionCmd_descriptor_, &ChangeTeamSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardRegionSessionCmd_descriptor_, &ForwardRegionSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BreakHandSessionCmd_descriptor_, &BreakHandSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityStopSessionCmd_descriptor_, &ActivityStopSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WantedInfoSyncSessionCmd_descriptor_, &WantedInfoSyncSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryZoneStatusSessionCmd_descriptor_, &QueryZoneStatusSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMailFromScene_descriptor_, &SendMailFromScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTradeLogSessionCmd_descriptor_, &GetTradeLogSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRaidCloseSessionCmd_descriptor_, &QuestRaidCloseSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthorizeInfoSessionCmd_descriptor_, &AuthorizeInfoSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRaidCloseSessionCmd_descriptor_, &GuildRaidCloseSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePwdSessionCmd_descriptor_, &DeletePwdSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoBackSessionCmd_descriptor_, &GoBackSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WantedQuestFinishCmd_descriptor_, &WantedQuestFinishCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddOfflineItemSessionCmd_descriptor_, &AddOfflineItemSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateOperActivitySessionCmd_descriptor_, &UpdateOperActivitySessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionShopData_descriptor_, &SessionShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncShopSessionCmd_descriptor_, &SyncShopSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateActivityEventSessionCmd_descriptor_, &UpdateActivityEventSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEventNtfSessionCmd_descriptor_, &ActivityEventNtfSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoveLetterSessionCmd_descriptor_, &LoveLetterSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoveLetterSendSessionCmd_descriptor_, &LoveLetterSendSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemCodeSessionCmd_descriptor_, &UseItemCodeSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUsedItemCodeSessionCmd_descriptor_, &ReqUsedItemCodeSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalActivityStartSessionCmd_descriptor_, &GlobalActivityStartSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalActivityStopSessionCmd_descriptor_, &GlobalActivityStopSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLotteryGiveSessionCmd_descriptor_, &ReqLotteryGiveSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncOperateRewardSessionCmd_descriptor_, &SyncOperateRewardSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyActivitySessionCmd_descriptor_, &NotifyActivitySessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiveRewardSessionCmd_descriptor_, &GiveRewardSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WantedQuestSetCDSessionCmd_descriptor_, &WantedQuestSetCDSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserQuotaOperSessionCmd_descriptor_, &UserQuotaOperSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncWorldLevelSessionCmd_descriptor_, &SyncWorldLevelSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserEnterSceneSessionCmd_descriptor_, &UserEnterSceneSessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncUserVarSessionCmd_descriptor_, &SyncUserVarSessionCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SessionCmd_2eproto() {
  delete RaidMapData::default_instance_;
  delete RaidMapData_reflection_;
  delete MapRegSessionCmd::default_instance_;
  delete MapRegSessionCmd_reflection_;
  delete CreateRaidMapSessionCmd::default_instance_;
  delete CreateRaidMapSessionCmd_reflection_;
  delete DeleteDMapSessionCmd::default_instance_;
  delete DeleteDMapSessionCmd_reflection_;
  delete ChangeSceneSessionCmd::default_instance_;
  delete ChangeSceneSessionCmd_reflection_;
  delete ChangeSceneResultSessionCmd::default_instance_;
  delete ChangeSceneResultSessionCmd_reflection_;
  delete UserDataSync::default_instance_;
  delete UserDataSync_reflection_;
  delete GoToUserMapSessionCmd::default_instance_;
  delete GoToUserMapSessionCmd_reflection_;
  delete LoadLuaSessionCmd::default_instance_;
  delete LoadLuaSessionCmd_reflection_;
  delete ExecGMCmdSessionCmd::default_instance_;
  delete ExecGMCmdSessionCmd_reflection_;
  delete TowerLayer::default_instance_;
  delete TowerLayer_reflection_;
  delete TowerInfo::default_instance_;
  delete TowerInfo_reflection_;
  delete SceneTowerUpdate::default_instance_;
  delete SceneTowerUpdate_reflection_;
  delete TowerMonsterKill::default_instance_;
  delete TowerMonsterKill_reflection_;
  delete SendMail::default_instance_;
  delete SendMail_reflection_;
  delete SessionSceneUserCmd::default_instance_;
  delete SessionSceneUserCmd_reflection_;
  delete GetMailAttachSessionCmd::default_instance_;
  delete GetMailAttachSessionCmd_reflection_;
  delete FollowerIDCheck::default_instance_;
  delete FollowerIDCheck_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete ChatMsgSession::default_instance_;
  delete ChatMsgSession_reflection_;
  delete SetGlobalDaily::default_instance_;
  delete SetGlobalDaily_reflection_;
  delete RefreshQuest::default_instance_;
  delete RefreshQuest_reflection_;
  delete QuerySealTimer::default_instance_;
  delete QuerySealTimer_reflection_;
  delete DelSceneImage::default_instance_;
  delete DelSceneImage_reflection_;
  delete SetTeamSeal::default_instance_;
  delete SetTeamSeal_reflection_;
  delete UserLoginNtfSessionCmd::default_instance_;
  delete UserLoginNtfSessionCmd_reflection_;
  delete RefreshTower::default_instance_;
  delete RefreshTower_reflection_;
  delete NotifyLoginSessionCmd::default_instance_;
  delete NotifyLoginSessionCmd_reflection_;
  delete ErrSetUserDataSessionCmd::default_instance_;
  delete ErrSetUserDataSessionCmd_reflection_;
  delete ChangeSceneSingleSessionCmd::default_instance_;
  delete ChangeSceneSingleSessionCmd_reflection_;
  delete RegMapFailSessionCmd::default_instance_;
  delete RegMapFailSessionCmd_reflection_;
  delete RegMapOKSessionCmd::default_instance_;
  delete RegMapOKSessionCmd_reflection_;
  delete ForwardUserSessionCmd::default_instance_;
  delete ForwardUserSessionCmd_reflection_;
  delete ForwardUserSceneSessionCmd::default_instance_;
  delete ForwardUserSceneSessionCmd_reflection_;
  delete ForwardUserSessionSessionCmd::default_instance_;
  delete ForwardUserSessionSessionCmd_reflection_;
  delete ForwardUserSceneSvrSessionCmd::default_instance_;
  delete ForwardUserSceneSvrSessionCmd_reflection_;
  delete EnterGuildTerritorySessionCmd::default_instance_;
  delete EnterGuildTerritorySessionCmd_reflection_;
  delete SyncDojoSessionCmd::default_instance_;
  delete SyncDojoSessionCmd_reflection_;
  delete ChargeSessionCmd::default_instance_;
  delete ChargeSessionCmd_reflection_;
  delete GagSessionCmd::default_instance_;
  delete GagSessionCmd_reflection_;
  delete LockSessionCmd::default_instance_;
  delete LockSessionCmd_reflection_;
  delete IteamImageSessionCmd::default_instance_;
  delete IteamImageSessionCmd_reflection_;
  delete FerrisInviteSessionCmd::default_instance_;
  delete FerrisInviteSessionCmd_reflection_;
  delete EnterFerrisReadySessionCmd::default_instance_;
  delete EnterFerrisReadySessionCmd_reflection_;
  delete ActivityTestAndSetSessionCmd::default_instance_;
  delete ActivityTestAndSetSessionCmd_reflection_;
  delete ActivityStatusSessionCmd::default_instance_;
  delete ActivityStatusSessionCmd_reflection_;
  delete ChangeTeamSessionCmd::default_instance_;
  delete ChangeTeamSessionCmd_reflection_;
  delete ForwardRegionSessionCmd::default_instance_;
  delete ForwardRegionSessionCmd_reflection_;
  delete BreakHandSessionCmd::default_instance_;
  delete BreakHandSessionCmd_reflection_;
  delete ActivityStopSessionCmd::default_instance_;
  delete ActivityStopSessionCmd_reflection_;
  delete WantedInfoSyncSessionCmd::default_instance_;
  delete WantedInfoSyncSessionCmd_reflection_;
  delete QueryZoneStatusSessionCmd::default_instance_;
  delete QueryZoneStatusSessionCmd_reflection_;
  delete SendMailFromScene::default_instance_;
  delete SendMailFromScene_reflection_;
  delete GetTradeLogSessionCmd::default_instance_;
  delete GetTradeLogSessionCmd_reflection_;
  delete QuestRaidCloseSessionCmd::default_instance_;
  delete QuestRaidCloseSessionCmd_reflection_;
  delete AuthorizeInfoSessionCmd::default_instance_;
  delete AuthorizeInfoSessionCmd_reflection_;
  delete GuildRaidCloseSessionCmd::default_instance_;
  delete GuildRaidCloseSessionCmd_reflection_;
  delete DeletePwdSessionCmd::default_instance_;
  delete DeletePwdSessionCmd_reflection_;
  delete GoBackSessionCmd::default_instance_;
  delete GoBackSessionCmd_reflection_;
  delete WantedQuestFinishCmd::default_instance_;
  delete WantedQuestFinishCmd_reflection_;
  delete AddOfflineItemSessionCmd::default_instance_;
  delete AddOfflineItemSessionCmd_reflection_;
  delete UpdateOperActivitySessionCmd::default_instance_;
  delete UpdateOperActivitySessionCmd_reflection_;
  delete SessionShopData::default_instance_;
  delete SessionShopData_reflection_;
  delete SyncShopSessionCmd::default_instance_;
  delete SyncShopSessionCmd_reflection_;
  delete UpdateActivityEventSessionCmd::default_instance_;
  delete UpdateActivityEventSessionCmd_reflection_;
  delete ActivityEventNtfSessionCmd::default_instance_;
  delete ActivityEventNtfSessionCmd_reflection_;
  delete LoveLetterSessionCmd::default_instance_;
  delete LoveLetterSessionCmd_reflection_;
  delete LoveLetterSendSessionCmd::default_instance_;
  delete LoveLetterSendSessionCmd_reflection_;
  delete UseItemCodeSessionCmd::default_instance_;
  delete UseItemCodeSessionCmd_reflection_;
  delete ReqUsedItemCodeSessionCmd::default_instance_;
  delete ReqUsedItemCodeSessionCmd_reflection_;
  delete GlobalActivityStartSessionCmd::default_instance_;
  delete GlobalActivityStartSessionCmd_reflection_;
  delete GlobalActivityStopSessionCmd::default_instance_;
  delete GlobalActivityStopSessionCmd_reflection_;
  delete ReqLotteryGiveSessionCmd::default_instance_;
  delete ReqLotteryGiveSessionCmd_reflection_;
  delete SyncOperateRewardSessionCmd::default_instance_;
  delete SyncOperateRewardSessionCmd_reflection_;
  delete NotifyActivitySessionCmd::default_instance_;
  delete NotifyActivitySessionCmd_reflection_;
  delete GiveRewardSessionCmd::default_instance_;
  delete GiveRewardSessionCmd_reflection_;
  delete WantedQuestSetCDSessionCmd::default_instance_;
  delete WantedQuestSetCDSessionCmd_reflection_;
  delete UserQuotaOperSessionCmd::default_instance_;
  delete UserQuotaOperSessionCmd_reflection_;
  delete SyncWorldLevelSessionCmd::default_instance_;
  delete SyncWorldLevelSessionCmd_reflection_;
  delete UserEnterSceneSessionCmd::default_instance_;
  delete UserEnterSceneSessionCmd_reflection_;
  delete SyncUserVarSessionCmd::default_instance_;
  delete SyncUserVarSessionCmd_reflection_;
}

void protobuf_AddDesc_SessionCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_SessionMail_2eproto();
  ::Cmd::protobuf_AddDesc_ChatCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::Cmd::protobuf_AddDesc_SystemCmd_2eproto();
  ::Cmd::protobuf_AddDesc_RecordTrade_2eproto();
  ::Cmd::protobuf_AddDesc_GuildSCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ActivityEvent_2eproto();
  ::Cmd::protobuf_AddDesc_Var_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SessionCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Pro"
    "toCommon.proto\032\017SceneUser.proto\032\017SceneIt"
    "em.proto\032\021SessionMail.proto\032\rChatCmd.pro"
    "to\032\020SceneUser2.proto\032\017SystemCmd.proto\032\021R"
    "ecordTrade.proto\032\017GuildSCmd.proto\032\023Activ"
    "ityEvent.proto\032\tVar.proto\"\260\003\n\013RaidMapDat"
    "a\022\016\n\006raidid\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\016\n\006char"
    "id\030\003 \001(\004\022\017\n\007guildid\030\004 \001(\004\022\017\n\007guildlv\030\005 \001"
    "(\r\022\016\n\006teamid\030\006 \001(\004\022\020\n\010restrict\030\007 \001(\r\022\022\n\n"
    "memberlist\030\010 \003(\004\022\"\n\013imagecenter\030\t \001(\0132\r."
    "Cmd.ScenePos\022\022\n\nimagerange\030\n \001(\r\022\037\n\010ente"
    "rpos\030\013 \001(\0132\r.Cmd.ScenePos\022\021\n\006sealid\030\014 \001("
    "\r:\0010\022\021\n\006follow\030\r \001(\r:\0010\022\021\n\006dojoid\030\016 \001(\r:"
    "\0010\022\020\n\005layer\030\017 \001(\r:\0010\022\031\n\016guildraidindex\030\020"
    " \001(\r:\0010\022\016\n\006roomid\030\021 \001(\004\022!\n\tguildinfo\030\022 \001"
    "(\0132\016.Cmd.GuildInfo\022\r\n\005npcid\030\023 \001(\r\022\031\n\016nom"
    "onsterlayer\030\024 \001(\r:\0010\"\310\001\n\020MapRegSessionCm"
    "d\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PR"
    "OTOCMD\0224\n\005param\030\002 \001(\0162\021.Cmd.SessionParam"
    ":\022MAP_REG_SESSIONCMD\022\r\n\005mapid\030\003 \001(\r\022\017\n\007m"
    "apname\030\004 \001(\t\022\021\n\tscenename\030\005 \001(\t\022\036\n\004data\030"
    "\006 \001(\0132\020.Cmd.RaidMapData\"\243\001\n\027CreateRaidMa"
    "pSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020"
    "SESSION_PROTOCMD\022;\n\005param\030\002 \001(\0162\021.Cmd.Se"
    "ssionParam:\031CREATE_RAIDMAP_SESSIONCMD\022\036\n"
    "\004data\030\003 \001(\0132\020.Cmd.RaidMapData\"\214\001\n\024Delete"
    "DMapSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\020SESSION_PROTOCMD\0228\n\005param\030\002 \001(\0162\021.Cmd"
    ".SessionParam:\026DELETE_DMAP_SESSIONCMD\022\r\n"
    "\005mapid\030\003 \001(\r\"\272\001\n\025ChangeSceneSessionCmd\022+"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTO"
    "CMD\0229\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\027C"
    "HANGE_SCENE_SESSIONCMD\022\r\n\005mapid\030\003 \001(\r\022\016\n"
    "\006charid\030\004 \003(\004\022\032\n\003pos\030\005 \001(\0132\r.Cmd.ScenePo"
    "s\"\307\001\n\033ChangeSceneResultSessionCmd\022+\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\022@"
    "\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\036CHANGE"
    "_SCENE_RESULT_SESSIONCMD\022\r\n\005mapid\030\003 \001(\r\022"
    "\016\n\006charid\030\004 \001(\004\022\032\n\003pos\030\006 \001(\0132\r.Cmd.Scene"
    "Pos\"\353\001\n\014UserDataSync\022+\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\020SESSION_PROTOCMD\0229\n\005param\030\002 \001(\016"
    "2\021.Cmd.SessionParam:\027CMDPARAM_USER_DATA_"
    "SYNC\022\r\n\002id\030\003 \001(\004:\0010\022\014\n\001x\030\004 \001(\002:\0010\022\014\n\001y\030\005"
    " \001(\002:\0010\022\014\n\001z\030\006 \001(\002:\0010\022\034\n\005datas\030\007 \003(\0132\r.C"
    "md.UserData\022\034\n\005attrs\030\010 \003(\0132\r.Cmd.UserAtt"
    "r\"\260\001\n\025GoToUserMapSessionCmd\022+\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\020SESSION_PROTOCMD\022:\n\005para"
    "m\030\002 \001(\0162\021.Cmd.SessionParam:\030GOTO_USER_MA"
    "P_SESSIONCMD\022\027\n\014targetuserid\030\003 \001(\004:\0010\022\025\n"
    "\ngotouserid\030\004 \001(\004:\0010\"\357\001\n\021LoadLuaSessionC"
    "md\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_P"
    "ROTOCMD\0225\n\005param\030\002 \001(\0162\021.Cmd.SessionPara"
    "m:\023LOAD_LUA_SESSIONCMD\022\r\n\005table\030\003 \001(\t\022\013\n"
    "\003lua\030\004 \001(\t\022\013\n\003log\030\005 \001(\t\022\020\n\010serverid\030\006 \001("
    "\r\022\025\n\007allzone\030\007 \001(\010:\004true\022$\n\tload_type\030\010 "
    "\001(\0162\021.Cmd.EComLoadType\"\264\001\n\023ExecGMCmdSess"
    "ionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSI"
    "ON_PROTOCMD\0228\n\005param\030\002 \001(\0162\021.Cmd.Session"
    "Param:\026EXEC_GM_CMD_SESSIONCMD\022\020\n\010serveri"
    "d\030\003 \001(\r\022\r\n\005gmcmd\030\004 \001(\t\022\025\n\007allzone\030\005 \001(\010:"
    "\004true\"5\n\nTowerLayer\022\020\n\005layer\030\001 \001(\r:\0010\022\025\n"
    "\rcurmonsterids\030\003 \003(\r\"W\n\tTowerInfo\022\023\n\010max"
    "layer\030\001 \001(\r:\0010\022\024\n\014killmonsters\030\003 \003(\r\022\037\n\006"
    "layers\030\004 \003(\0132\017.Cmd.TowerLayer\"\221\001\n\020SceneT"
    "owerUpdate\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020S"
    "ESSION_PROTOCMD\0222\n\005param\030\002 \001(\0162\021.Cmd.Ses"
    "sionParam:\020TOWERINFO_UPDATE\022\034\n\004info\030\003 \001("
    "\0132\016.Cmd.TowerInfo\"\212\001\n\020TowerMonsterKill\022+"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTO"
    "CMD\0223\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\021T"
    "OWER_MONSTERKILL\022\024\n\tmonsterid\030\003 \001(\r:\0010\"\212"
    "\001\n\010SendMail\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020"
    "SESSION_PROTOCMD\0224\n\005param\030\002 \001(\0162\021.Cmd.Se"
    "ssionParam:\022CMDPARAM_SEND_MAIL\022\033\n\004data\030\003"
    " \001(\0132\r.Cmd.MailData\"\237\001\n\023SessionSceneUser"
    "Cmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_"
    "PROTOCMD\0227\n\005param\030\002 \001(\0162\021.Cmd.SessionPar"
    "am:\025CMDPARAM_SCENEUSERCMD\022\021\n\006userid\030\003 \001("
    "\004:\0010\022\017\n\007cmddata\030\004 \001(\014\"\255\002\n\027GetMailAttachS"
    "essionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SE"
    "SSION_PROTOCMD\022=\n\005param\030\002 \001(\0162\021.Cmd.Sess"
    "ionParam:\033SESSIONPARAM_GET_MAILATTACH\022\021\n"
    "\006charid\030\003 \001(\004:\0010\022\021\n\006mailid\030\004 \001(\004:\0010\022\020\n\005m"
    "sgid\030\005 \001(\r:\0010\022\034\n\005items\030\006 \003(\0132\r.Cmd.ItemI"
    "nfo\022 \n\titemDatas\030\007 \003(\0132\r.Cmd.ItemData\022\017\n"
    "\007groupid\030\010 \001(\t\022\035\n\003opt\030\t \001(\0162\020.Cmd.EGetMa"
    "ilOpt\"\324\001\n\017FollowerIDCheck\022+\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\020SESSION_PROTOCMD\022:\n\005param\030"
    "\002 \001(\0162\021.Cmd.SessionParam:\030CMDPARAM_FOLLO"
    "WERIDCHECK\022\021\n\006userid\030\003 \001(\004:\0010\022\023\n\010followi"
    "d\030\004 \001(\004:\0010\0220\n\005etype\030\005 \001(\0162\020.Cmd.EFollowT"
    "ype:\017EFOLLOWTYPE_MIN\"\266\001\n\005Event\022+\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\0220\n\005p"
    "aram\030\002 \001(\0162\021.Cmd.SessionParam:\016CMDPARAM_"
    "EVENT\022\017\n\004guid\030\003 \001(\004:\0010\022-\n\004type\030\004 \001(\0162\017.C"
    "md.EEventType:\016EEVENTTYPE_MIN\022\016\n\006params\030"
    "\005 \003(\004\"\344\002\n\016ChatMsgSession\022+\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\020SESSION_PROTOCMD\022*\n\005param\030\002"
    " \001(\0162\021.Cmd.SessionParam:\010CHAT_MSG\022\020\n\010tar"
    "getid\030\003 \003(\004\022\013\n\003msg\030\004 \001(\t\0229\n\007channel\030\005 \001("
    "\0162\025.Cmd.EGameChatChannel:\021ECHAT_CHANNEL_"
    "MIN\022\021\n\006selfid\030\006 \001(\004:\0010\022\r\n\005voice\030\007 \001(\014\022\024\n"
    "\tvoicetime\030\010 \001(\r:\0010\022\024\n\005blink\030\t \001(\010:\005fals"
    "e\022\020\n\005msgid\030\n \001(\r:\0010\022\026\n\007msgover\030\013 \001(\010:\005fa"
    "lse\022\'\n\007barrage\030\014 \001(\0132\026.Cmd.BarrageMsgCha"
    "tCmd\"\213\001\n\016SetGlobalDaily\022+\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\020SESSION_PROTOCMD\022:\n\005param\030\002 "
    "\001(\0162\021.Cmd.SessionParam:\030CMDPARAM_SET_GLO"
    "BL_DAILY\022\020\n\005value\030\003 \001(\r:\0010\"\207\001\n\014RefreshQu"
    "est\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_"
    "PROTOCMD\0228\n\005param\030\002 \001(\0162\021.Cmd.SessionPar"
    "am:\026CMDPARAM_REFRESH_QUEST\022\020\n\005value\030\003 \001("
    "\r:\0010\"\231\001\n\016QuerySealTimer\022+\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\020SESSION_PROTOCMD\0224\n\005param\030\002 "
    "\001(\0162\021.Cmd.SessionParam:\022CMDPARAM_SEALTIM"
    "ER\022\021\n\006userid\030\003 \002(\004:\0010\022\021\n\006teamid\030\004 \002(\004:\0010"
    "\"\335\001\n\rDelSceneImage\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\020SESSION_PROTOCMD\0221\n\005param\030\002 \001(\0162\021"
    ".Cmd.SessionParam:\017DEL_SCENE_IMAGE\022\017\n\004gu"
    "id\030\003 \001(\004:\0010\022\024\n\trealscene\030\004 \001(\r:\0010\0224\n\005ety"
    "pe\030\005 \001(\0162\024.Cmd.ESceneImageType:\017ESCENEIM"
    "AGE_MIN\022\017\n\004raid\030\006 \001(\r:\0010\"\243\002\n\013SetTeamSeal"
    "\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PRO"
    "TOCMD\0223\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:"
    "\021CMDPARAM_SET_SEAL\022\021\n\006sealid\030\003 \001(\r:\0010\022\021\n"
    "\006teamid\030\004 \001(\004:\0010\022\020\n\005mapid\030\005 \001(\r:\0010\0228\n\007es"
    "tatus\030\006 \001(\0162\023.Cmd.ESetSealStatus:\022ESETSE"
    "ALSTATUS_MIN\022\032\n\003pos\030\007 \001(\0132\r.Cmd.ScenePos"
    "\022\023\n\010leaderid\030\010 \001(\004:\0010\022\017\n\007teamers\030\t \003(\004\"\252"
    "\001\n\026UserLoginNtfSessionCmd\022+\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\020SESSION_PROTOCMD\022<\n\005param\030"
    "\002 \001(\0162\021.Cmd.SessionParam:\032SESSIONPARAM_U"
    "SERLOGIN_NTF\022\021\n\006charid\030\003 \001(\004:\0010\022\022\n\nserve"
    "rname\030\004 \001(\t\"u\n\014RefreshTower\022+\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\020SESSION_PROTOCMD\0228\n\005para"
    "m\030\002 \001(\0162\021.Cmd.SessionParam:\026CMDPARAM_REF"
    "RESH_TOWER\"\321\002\n\025NotifyLoginSessionCmd\022+\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCM"
    "D\022;\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\031SES"
    "SIONPARAM_NOTIFY_LOGIN\022\r\n\002id\030\003 \001(\004:\0010\022\020\n"
    "\005accid\030\004 \001(\004:\0010\022\020\n\005mapid\030\005 \001(\r:\0010\022\034\n\risc"
    "hangescene\030\006 \001(\010:\005false\022\014\n\004name\030\007 \001(\t\022\020\n"
    "\010gatename\030\010 \001(\t\022\r\n\005phone\030\t \001(\t\022\021\n\tignore"
    "pwd\030\n \001(\010\022\020\n\010language\030\013 \001(\r\022\026\n\016realautho"
    "rized\030\014 \001(\010\022\021\n\tmaxbaselv\030\r \001(\r\"\227\001\n\030ErrSe"
    "tUserDataSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\020SESSION_PROTOCMD\022\?\n\005param\030\002 \001(\0162"
    "\021.Cmd.SessionParam:\035SESSIONPARAM_ERR_SET"
    "_USERDATA\022\r\n\002id\030\003 \001(\004:\0010\"\253\001\n\033ChangeScene"
    "SingleSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\020SESSION_PROTOCMD\022:\n\005param\030\002 \001(\0162\021.C"
    "md.SessionParam:\030SESSIONPARAM_CHANGESCEN"
    "E\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\005mapid\030\004 \001(\r:\0010\"\220"
    "\001\n\024RegMapFailSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\020SESSION_PROTOCMD\0229\n\005param\030\002 "
    "\001(\0162\021.Cmd.SessionParam:\027SESSIONPARAM_REG"
    "MAPFAIL\022\020\n\005mapid\030\003 \001(\r:\0010\"\214\001\n\022RegMapOKSe"
    "ssionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SES"
    "SION_PROTOCMD\0227\n\005param\030\002 \001(\0162\021.Cmd.Sessi"
    "onParam:\025SESSIONPARAM_REGMAPOK\022\020\n\005mapid\030"
    "\003 \001(\r:\0010\"\241\001\n\025ForwardUserSessionCmd\022+\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\022"
    ":\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\030SESSI"
    "ONPARAM_FORWARDUSER\022\021\n\006charid\030\003 \001(\004:\0010\022\014"
    "\n\004data\030\004 \001(\014\"\253\001\n\032ForwardUserSceneSession"
    "Cmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_"
    "PROTOCMD\022\?\n\005param\030\002 \001(\0162\021.Cmd.SessionPar"
    "am:\035SESSIONPARAM_FORWARDUSERSCENE\022\021\n\006cha"
    "rid\030\003 \001(\004:\0010\022\014\n\004data\030\004 \001(\014\"\257\001\n\034ForwardUs"
    "erSessionSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\020SESSION_PROTOCMD\022A\n\005param\030\002 \001(\0162"
    "\021.Cmd.SessionParam:\037SESSIONPARAM_FORWARD"
    "USERSESSION\022\021\n\006charid\030\003 \001(\004:\0010\022\014\n\004data\030\004"
    " \001(\014\"\261\001\n\035ForwardUserSceneSvrSessionCmd\022+"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTO"
    "CMD\022B\n\005param\030\002 \001(\0162\021.Cmd.SessionParam: S"
    "ESSIONPARAM_FORWARDUSERSCENESVR\022\021\n\006chari"
    "d\030\003 \001(\004:\0010\022\014\n\004data\030\004 \001(\014\"\257\001\n\035EnterGuildT"
    "erritorySessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\020SESSION_PROTOCMD\0229\n\005param\030\002 \001(\0162\021"
    ".Cmd.SessionParam:\027SESSIONPARAM_ENTERGUI"
    "LD\022\021\n\006charid\030\003 \001(\004:\0010\022\023\n\010targetid\030\004 \001(\004:"
    "\0010\"\345\001\n\022SyncDojoSessionCmd\022+\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\020SESSION_PROTOCMD\0228\n\005param\030"
    "\002 \001(\0162\021.Cmd.SessionParam:\026SESSIONPARAM_S"
    "YNC_DOJO\022\020\n\010teamguid\030\003 \001(\004\022\016\n\006dojoid\030\004 \001"
    "(\r\022\021\n\tsponsorid\030\005 \001(\004\022\016\n\006isopen\030\006 \001(\010\022\017\n"
    "\007guildid\030\007 \001(\004\022\022\n\003del\030\010 \001(\010:\005false\"\354\001\n\020C"
    "hargeSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\020SESSION_PROTOCMD\0225\n\005param\030\002 \001(\0162\021.Cm"
    "d.SessionParam:\023SESSIONPARAM_CHARGE\022\021\n\006c"
    "harid\030\003 \001(\004:\0010\022\021\n\006charge\030\004 \001(\002:\0010\022\016\n\006ite"
    "mid\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022\016\n\006source\030\007 \001(\t"
    "\022\017\n\007orderid\030\010 \001(\t\022\016\n\006dataid\030\t \001(\r\"\247\001\n\rGa"
    "gSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020"
    "SESSION_PROTOCMD\0225\n\005param\030\002 \001(\0162\021.Cmd.Se"
    "ssionParam:\023SESSIONPARAM_GM_GAG\022\021\n\006chari"
    "d\030\003 \001(\004:\0010\022\017\n\004time\030\004 \001(\r:\0010\022\016\n\006reason\030\005 "
    "\001(\t\"\301\001\n\016LockSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\020SESSION_PROTOCMD\0226\n\005param\030\002 \001"
    "(\0162\021.Cmd.SessionParam:\024SESSIONPARAM_GM_L"
    "OCK\022\021\n\006charid\030\003 \001(\004:\0010\022\017\n\004time\030\004 \001(\r:\0010\022"
    "\016\n\006reason\030\005 \001(\t\022\026\n\007account\030\006 \001(\010:\005false\""
    "\243\001\n\024IteamImageSessionCmd\022+\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\020SESSION_PROTOCMD\0228\n\005param\030\002"
    " \001(\0162\021.Cmd.SessionParam:\026SESSIONPARAM_IT"
    "EMIMAGE\022\021\n\006charid\030\003 \001(\004:\0010\022\021\n\006teamid\030\004 \001"
    "(\004:\0010\"\314\001\n\026FerrisInviteSessionCmd\022+\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\022<\n"
    "\005param\030\002 \001(\0162\021.Cmd.SessionParam:\032SESSION"
    "PARAM_FERRIS_INVITE\022\021\n\006charid\030\003 \001(\004:\0010\022\023"
    "\n\010targetid\030\004 \001(\004:\0010\022\020\n\005msgid\030\005 \001(\r:\0010\022\r\n"
    "\002id\030\006 \001(\r:\0011\"\277\001\n\032EnterFerrisReadySession"
    "Cmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_"
    "PROTOCMD\022@\n\005param\030\002 \001(\0162\021.Cmd.SessionPar"
    "am:\036SESSIONPARAM_FERRIS_READYENTER\022\021\n\006ch"
    "arid\030\003 \001(\004:\0010\022\020\n\005msgid\030\004 \001(\r:\0010\022\r\n\002id\030\005 "
    "\001(\r:\0011\"\347\001\n\034ActivityTestAndSetSessionCmd\022"
    "+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROT"
    "OCMD\022B\n\005param\030\002 \001(\0162\021.Cmd.SessionParam: "
    "SESSIONPARAM_ACTIVITY_TESTANDSET\022\n\n\002id\030\003"
    " \001(\r\022\013\n\003uid\030\004 \001(\004\022\r\n\005mapid\030\005 \001(\r\022\021\n\tstar"
    "ttime\030\006 \001(\r\022\016\n\006charid\030\007 \001(\004\022\013\n\003ret\030\010 \001(\r"
    "\"\276\001\n\030ActivityStatusSessionCmd\022+\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\022>\n\005pa"
    "ram\030\002 \001(\0162\021.Cmd.SessionParam:\034SESSIONPAR"
    "AM_ACTIVITY_STATUS\022\r\n\002id\030\003 \001(\r:\0010\022\020\n\005map"
    "id\030\004 \001(\r:\0010\022\024\n\005start\030\005 \001(\010:\005false\"\271\001\n\024Ch"
    "angeTeamSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\020SESSION_PROTOCMD\022:\n\005param\030\002 \001(\0162\021"
    ".Cmd.SessionParam:\030SESSIONPARAM_CHANGE_T"
    "EAM\022\022\n\004join\030\003 \001(\010:\004true\022\021\n\006userid\030\004 \001(\004:"
    "\0010\022\021\n\006teamid\030\005 \001(\004:\0010\"\265\001\n\027ForwardRegionS"
    "essionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SE"
    "SSION_PROTOCMD\022=\n\005param\030\002 \001(\0162\021.Cmd.Sess"
    "ionParam:\033SESSIONPARAM_FORWARD_REGION\022\023\n"
    "\013region_type\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030"
    "\005 \001(\r\"\220\001\n\023BreakHandSessionCmd\022+\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\0229\n\005pa"
    "ram\030\002 \001(\0162\021.Cmd.SessionParam:\027SESSIONPAR"
    "AM_BREAK_HAND\022\021\n\006userid\030\003 \001(\004:\0010\"\253\001\n\026Act"
    "ivityStopSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\020SESSION_PROTOCMD\022<\n\005param\030\002 \001(\0162"
    "\021.Cmd.SessionParam:\032SESSIONPARAM_ACTIVIT"
    "Y_STOP\022\n\n\002id\030\003 \001(\r\022\013\n\003uid\030\004 \001(\004\022\r\n\005mapid"
    "\030\005 \001(\r\"\264\001\n\030WantedInfoSyncSessionCmd\022+\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCMD"
    "\022\?\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\035SESS"
    "IONPARAM_WANTED_INFO_SYNC\022\025\n\006active\030\003 \001("
    "\010:\005false\022\023\n\010maxcount\030\004 \001(\r:\0010\"\272\001\n\031QueryZ"
    "oneStatusSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\020SESSION_PROTOCMD\022\?\n\005param\030\002 \001(\0162"
    "\021.Cmd.SessionParam:\035SESSIONPARAM_ZONE_QU"
    "ERYSTATUS\022\021\n\006charid\030\003 \001(\004:\0010\022\034\n\005infos\030\004 "
    "\003(\0132\r.Cmd.ZoneInfo\"\236\001\n\021SendMailFromScene"
    "\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PRO"
    "TOCMD\022\?\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:"
    "\035CMDPARAM_SEND_MAIL_FROM_SCENE\022\033\n\004data\030\003"
    " \001(\0132\r.Cmd.MailData\"\267\003\n\025GetTradeLogSessi"
    "onCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSIO"
    "N_PROTOCMD\022;\n\005param\030\002 \001(\0162\021.Cmd.SessionP"
    "aram:\031SESSIONPARAM_GET_TRADELOG\022\021\n\006chari"
    "d\030\003 \001(\004:\0010\022\r\n\002id\030\004 \001(\004:\0010\022\037\n\007logtype\030\005 \001"
    "(\0162\016.Cmd.EOperType\022\033\n\004item\030\006 \001(\0132\r.Cmd.I"
    "temInfo\022\037\n\010itemData\030\007 \001(\0132\r.Cmd.ItemData"
    "\022\017\n\007success\030\010 \001(\010\022\024\n\014sell_item_id\030\t \001(\r\022"
    "\022\n\nsell_price\030\n \001(\004\022\022\n\nsell_count\030\013 \001(\r\022"
    "\021\n\trefine_lv\030\014 \001(\r\022\020\n\010ret_cost\030\r \001(\r\022#\n\n"
    "trade_type\030\016 \001(\0162\017.Cmd.ETradeType\022\013\n\003tax"
    "\030\017 \001(\004\022\r\n\005quota\030\020 \001(\004\"\256\001\n\030QuestRaidClose"
    "SessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020S"
    "ESSION_PROTOCMD\022\?\n\005param\030\002 \001(\0162\021.Cmd.Ses"
    "sionParam:\035SESSIONPARAM_QUEST_RAID_CLOSE"
    "\022\021\n\006userid\030\003 \001(\004:\0010\022\021\n\006raidid\030\004 \001(\r:\0010\"\262"
    "\001\n\027AuthorizeInfoSessionCmd\022+\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\020SESSION_PROTOCMD\022=\n\005param"
    "\030\002 \001(\0162\021.Cmd.SessionParam:\033SESSIONPARAM_"
    "SYNC_AUTHORIZE\022\021\n\006charid\030\003 \001(\004:\0010\022\030\n\tign"
    "orepwd\030\004 \001(\010:\005false\"\330\001\n\030GuildRaidCloseSe"
    "ssionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SES"
    "SION_PROTOCMD\022>\n\005param\030\002 \001(\0162\021.Cmd.Sessi"
    "onParam:\034SESSIONPARAM_GUILDRAID_CLOSE\022\020\n"
    "\005mapid\030\003 \001(\r:\0010\022\026\n\013curmapindex\030\004 \001(\r:\0010\022"
    "\022\n\007guildid\030\005 \001(\004:\0010\022\021\n\006teamid\030\006 \001(\004:\0010\"\226"
    "\001\n\023DeletePwdSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\020SESSION_PROTOCMD\022\?\n\005param\030\002 \001"
    "(\0162\021.Cmd.SessionParam:\035SESSIONPARAM_DELE"
    "TE_AUTHORIZE\022\021\n\006charid\030\003 \001(\004:\0010\"\212\001\n\020GoBa"
    "ckSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\020SESSION_PROTOCMD\0226\n\005param\030\002 \001(\0162\021.Cmd.S"
    "essionParam:\024SESSIONPARAM_GO_BACK\022\021\n\006cha"
    "rid\030\003 \001(\004:\0010\"\263\001\n\024WantedQuestFinishCmd\022+\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOC"
    "MD\022B\n\005param\030\002 \001(\0162\021.Cmd.SessionParam: SE"
    "SSIONPARAM_WANTED_QUEST_FINISH\022\023\n\010leader"
    "id\030\003 \001(\004:\0010\022\025\n\nteammateid\030\004 \001(\004:\0010\"\270\001\n\030A"
    "ddOfflineItemSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\020SESSION_PROTOCMD\022\?\n\005param\030\002 "
    "\001(\0162\021.Cmd.SessionParam:\035SESSIONPARAM_ADD"
    "_OFFLINE_ITEM\022\021\n\006charid\030\003 \001(\004:\0010\022\033\n\004data"
    "\030\004 \001(\0132\r.Cmd.ItemData\"\217\001\n\034UpdateOperActi"
    "vitySessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\020SESSION_PROTOCMD\022B\n\005param\030\002 \001(\0162\021.Cmd"
    ".SessionParam: SESSIONPARAM_UPDATE_OPERA"
    "CTIVITY\"+\n\017SessionShopData\022\013\n\003old\030\001 \003(\r\022"
    "\013\n\003now\030\002 \001(\r\"\211\001\n\022SyncShopSessionCmd\022+\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCMD"
    "\0228\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\026SESS"
    "IONPARAM_SYNC_SHOP\022\014\n\004item\030\003 \001(\r\"\221\001\n\035Upd"
    "ateActivityEventSessionCmd\022+\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\020SESSION_PROTOCMD\022C\n\005param"
    "\030\002 \001(\0162\021.Cmd.SessionParam:!SESSIONPARAM_"
    "UPDATE_ACTIVITYEVENT\"\262\001\n\032ActivityEventNt"
    "fSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020"
    "SESSION_PROTOCMD\022@\n\005param\030\002 \001(\0162\021.Cmd.Se"
    "ssionParam:\036SESSIONPARAM_ACTIVITYEVENT_N"
    "TF\022%\n\005infos\030\003 \003(\0132\026.Cmd.ActivityEventInf"
    "o\"\203\002\n\024LoveLetterSessionCmd\022+\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\020SESSION_PROTOCMD\022=\n\005param"
    "\030\002 \001(\0162\021.Cmd.SessionParam:\033SESSIONPARAM_"
    "LOVELETTER_USE\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\010ite"
    "mguid\030\004 \001(\t\022\022\n\007targets\030\005 \001(\004:\0010\022\017\n\007conte"
    "nt\030\006 \001(\t\0225\n\004type\030\007 \001(\0162\020.Cmd.ELetterType"
    ":\025ELETTERTYPE_CHRISTMAS\"\364\001\n\030LoveLetterSe"
    "ndSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\020SESSION_PROTOCMD\022>\n\005param\030\002 \001(\0162\021.Cmd.S"
    "essionParam:\034SESSIONPARAM_LOVELETTER_SEN"
    "D\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\010sendname\030\004 \001(\t\022\017"
    "\n\007content\030\005 \001(\t\0225\n\004type\030\006 \001(\0162\020.Cmd.ELet"
    "terType:\025ELETTERTYPE_CHRISTMAS\"\321\001\n\025UseIt"
    "emCodeSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\020SESSION_PROTOCMD\022;\n\005param\030\002 \001(\0162\021.C"
    "md.SessionParam:\031SESSIONPARAM_USE_ITEMCO"
    "DE\022\021\n\006charid\030\003 \001(\004:\0010\022\014\n\004guid\030\004 \001(\t\022\016\n\006i"
    "temid\030\005 \001(\r\022\017\n\004type\030\007 \001(\r:\0010\022\014\n\004code\030\006 \001"
    "(\t\"\274\001\n\031ReqUsedItemCodeSessionCmd\022+\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\022@\n"
    "\005param\030\002 \001(\0162\021.Cmd.SessionParam:\036SESSION"
    "PARAM_REQ_USED_ITEMCODE\022\021\n\006charid\030\003 \001(\004:"
    "\0010\022\014\n\004guid\030\004 \003(\t\022\017\n\004type\030\005 \001(\r:\0010\"\240\001\n\035Gl"
    "obalActivityStartSessionCmd\022+\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\020SESSION_PROTOCMD\022C\n\005para"
    "m\030\002 \001(\0162\021.Cmd.SessionParam:!SESSIONPARAM"
    "_GLOBALACTIVITY_START\022\r\n\002id\030\003 \001(\r:\0010\"\236\001\n"
    "\034GlobalActivityStopSessionCmd\022+\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\022B\n\005pa"
    "ram\030\002 \001(\0162\021.Cmd.SessionParam: SESSIONPAR"
    "AM_GLOBALACTIVITY_STOP\022\r\n\002id\030\004 \001(\r:\0010\"\303\001"
    "\n\030ReqLotteryGiveSessionCmd\022+\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\020SESSION_PROTOCMD\022\?\n\005param"
    "\030\002 \001(\0162\021.Cmd.SessionParam:\035SESSIONPARAM_"
    "REQ_LOTTERY_GIVE\022\021\n\006charid\030\003 \001(\004:\0010\022&\n\010i"
    "teminfo\030\004 \001(\0132\024.Cmd.LotteryGiveInfo\"\254\001\n\033"
    "SyncOperateRewardSessionCmd\022+\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\020SESSION_PROTOCMD\022=\n\005para"
    "m\030\002 \001(\0162\021.Cmd.SessionParam:\033SESSIONPARAM"
    "_OPERATE_REWARD\022\021\n\006charid\030\003 \001(\004:\0010\022\016\n\003va"
    "r\030\004 \001(\r:\0010\"\255\001\n\030NotifyActivitySessionCmd\022"
    "+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROT"
    "OCMD\022>\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\034"
    "SESSIONPARAM_NOTIFY_ACTIVITY\022\020\n\005actid\030\003 "
    "\001(\r:\0010\022\022\n\004open\030\004 \001(\010:\004true\"\272\001\n\024GiveRewar"
    "dSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020"
    "SESSION_PROTOCMD\022:\n\005param\030\002 \001(\0162\021.Cmd.Se"
    "ssionParam:\030SESSIONPARAM_GIVE_REWARD\022\021\n\006"
    "charid\030\003 \001(\004:\0010\022\023\n\010rewardid\030\004 \001(\r:\0010\022\021\n\006"
    "buffid\030\005 \001(\r:\0010\"\261\001\n\032WantedQuestSetCDSess"
    "ionCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSI"
    "ON_PROTOCMD\022B\n\005param\030\002 \001(\0162\021.Cmd.Session"
    "Param: SESSIONPARAM_WANTED_QUEST_SET_CD\022"
    "\021\n\006charid\030\003 \001(\004:\0010\022\017\n\004time\030\004 \001(\r:\0010\"\232\002\n\027"
    "UserQuotaOperSessionCmd\022+\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\020SESSION_PROTOCMD\022>\n\005param\030\002 "
    "\001(\0162\021.Cmd.SessionParam:\034SESSIONPARAM_USE"
    "R_QUOTA_OPER\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\005quota"
    "\030\004 \001(\004:\0010\0225\n\004oper\030\005 \001(\0162\023.Cmd.EUserQuota"
    "Oper:\022EUSERQUOTAOPER_MIN\0226\n\004type\030\006 \001(\0162\017"
    ".Cmd.EQuotaType:\027EQuotaType_U_Give_Trade"
    "\"\322\001\n\030SyncWorldLevelSessionCmd\022+\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\020SESSION_PROTOCMD\022\?\n\005pa"
    "ram\030\002 \001(\0162\021.Cmd.SessionParam:\035SESSIONPAR"
    "AM_SYNC_WORLD_LEVEL\022\021\n\006charid\030\003 \001(\004:\0010\022\032"
    "\n\017base_worldlevel\030\004 \001(\r:\0010\022\031\n\016job_worldl"
    "evel\030\005 \001(\r:\0010\"\232\001\n\030UserEnterSceneSessionC"
    "md\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_P"
    "ROTOCMD\022>\n\005param\030\002 \001(\0162\021.Cmd.SessionPara"
    "m:\034SESSIONPARAM_USER_ENTERSCENE\022\021\n\006chari"
    "d\030\003 \001(\004:\0010\"\252\001\n\025SyncUserVarSessionCmd\022+\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\020SESSION_PROTOCM"
    "D\022<\n\005param\030\002 \001(\0162\021.Cmd.SessionParam:\032SES"
    "SIONPARAM_USER_VAR_SYNC\022\016\n\006charid\030\003 \002(\004\022"
    "\026\n\004vars\030\004 \003(\0132\010.Cmd.Var*\372\022\n\014SessionParam"
    "\022\026\n\022MAP_REG_SESSIONCMD\020\001\022\035\n\031CREATE_RAIDM"
    "AP_SESSIONCMD\020\002\022\032\n\026DELETE_DMAP_SESSIONCM"
    "D\020\003\022\033\n\027CHANGE_SCENE_SESSIONCMD\020\004\022\"\n\036CHAN"
    "GE_SCENE_RESULT_SESSIONCMD\020\005\022\033\n\027CMDPARAM"
    "_USER_DATA_SYNC\020\006\022\034\n\030GOTO_USER_MAP_SESSI"
    "ONCMD\020\t\022\027\n\023LOAD_LUA_SESSIONCMD\020\n\022\014\n\010CHAT"
    "_MSG\020\013\022\024\n\020TOWERINFO_UPDATE\020\r\022\025\n\021TOWER_MO"
    "NSTERKILL\020\017\022\026\n\022CMDPARAM_SEND_MAIL\020\023\022\037\n\033S"
    "ESSIONPARAM_GET_MAILATTACH\020\024\022\031\n\025CMDPARAM"
    "_SCENEUSERCMD\020\025\022\034\n\030CMDPARAM_FOLLOWERIDCH"
    "ECK\020\026\022\022\n\016CMDPARAM_EVENT\020\027\022\034\n\030CMDPARAM_SE"
    "T_GLOBL_DAILY\020\030\022\026\n\022CMDPARAM_SEALTIMER\020\031\022"
    "\023\n\017DEL_SCENE_IMAGE\020\032\022\025\n\021CMDPARAM_SET_SEA"
    "L\020\033\022\032\n\026CMDPARAM_REFRESH_QUEST\020\034\022\031\n\025CMDPA"
    "RAM_INVITE_HANDS\020\035\022\036\n\032SESSIONPARAM_USERL"
    "OGIN_NTF\020\037\022\032\n\026CMDPARAM_REFRESH_TOWER\020 \022\035"
    "\n\031SESSIONPARAM_NOTIFY_LOGIN\020!\022!\n\035SESSION"
    "PARAM_ERR_SET_USERDATA\020\"\022\034\n\030SESSIONPARAM"
    "_CHANGESCENE\020#\022\033\n\027SESSIONPARAM_REGMAPFAI"
    "L\020$\022\031\n\025SESSIONPARAM_REGMAPOK\020%\022\034\n\030SESSIO"
    "NPARAM_FORWARDUSER\020&\022!\n\035SESSIONPARAM_FOR"
    "WARDUSERSCENE\020\'\022#\n\037SESSIONPARAM_FORWARDU"
    "SERSESSION\020(\022$\n SESSIONPARAM_FORWARDUSER"
    "SCENESVR\020)\022\033\n\027SESSIONPARAM_ENTERGUILD\0202\022"
    "\032\n\026SESSIONPARAM_SYNC_DOJO\0204\022\027\n\023SESSIONPA"
    "RAM_CHARGE\0206\022\027\n\023SESSIONPARAM_GM_GAG\0207\022\030\n"
    "\024SESSIONPARAM_GM_LOCK\0208\022\032\n\026SESSIONPARAM_"
    "ITEMIMAGE\020;\022\036\n\032SESSIONPARAM_FERRIS_INVIT"
    "E\020<\022\"\n\036SESSIONPARAM_FERRIS_READYENTER\020=\022"
    "$\n SESSIONPARAM_ACTIVITY_TESTANDSET\020>\022 \n"
    "\034SESSIONPARAM_ACTIVITY_STATUS\020\?\022\034\n\030SESSI"
    "ONPARAM_CHANGE_TEAM\020@\022\037\n\033SESSIONPARAM_FO"
    "RWARD_REGION\020A\022\033\n\027SESSIONPARAM_BREAK_HAN"
    "D\020B\022\036\n\032SESSIONPARAM_ACTIVITY_STOP\020C\022!\n\035S"
    "ESSIONPARAM_WANTED_INFO_SYNC\020D\022!\n\035SESSIO"
    "NPARAM_ZONE_QUERYSTATUS\020E\022!\n\035CMDPARAM_SE"
    "ND_MAIL_FROM_SCENE\020F\022\035\n\031SESSIONPARAM_GET"
    "_TRADELOG\020G\022\032\n\026EXEC_GM_CMD_SESSIONCMD\020H\022"
    "!\n\035SESSIONPARAM_QUEST_RAID_CLOSE\020I\022 \n\034SE"
    "SSIONPARAM_GUILDRAID_CLOSE\020J\022\037\n\033SESSIONP"
    "ARAM_SYNC_AUTHORIZE\020K\022!\n\035SESSIONPARAM_DE"
    "LETE_AUTHORIZE\020L\022\030\n\024SESSIONPARAM_GO_BACK"
    "\020M\022$\n SESSIONPARAM_WANTED_QUEST_FINISH\020N"
    "\022!\n\035SESSIONPARAM_ADD_OFFLINE_ITEM\020O\022$\n S"
    "ESSIONPARAM_UPDATE_OPERACTIVITY\020Q\022\032\n\026SES"
    "SIONPARAM_SYNC_SHOP\020R\022\037\n\033SESSIONPARAM_LO"
    "VELETTER_USE\020U\022 \n\034SESSIONPARAM_LOVELETTE"
    "R_SEND\020V\022%\n!SESSIONPARAM_UPDATE_ACTIVITY"
    "EVENT\020W\022\"\n\036SESSIONPARAM_ACTIVITYEVENT_NT"
    "F\020X\022\035\n\031SESSIONPARAM_USE_ITEMCODE\020Y\022\"\n\036SE"
    "SSIONPARAM_REQ_USED_ITEMCODE\020Z\022%\n!SESSIO"
    "NPARAM_GLOBALACTIVITY_START\020[\022$\n SESSION"
    "PARAM_GLOBALACTIVITY_STOP\020\\\022!\n\035SESSIONPA"
    "RAM_REQ_LOTTERY_GIVE\020]\022\037\n\033SESSIONPARAM_O"
    "PERATE_REWARD\020_\022 \n\034SESSIONPARAM_NOTIFY_A"
    "CTIVITY\020`\022$\n SESSIONPARAM_WANTED_QUEST_S"
    "ET_CD\020a\022\034\n\030SESSIONPARAM_GIVE_REWARD\020b\022!\n"
    "\035SESSIONPARAM_SYNC_WORLD_LEVEL\020c\022 \n\034SESS"
    "IONPARAM_USER_QUOTA_OPER\020d\022\036\n\032SESSIONPAR"
    "AM_USER_VAR_SYNC\020e\022 \n\034SESSIONPARAM_USER_"
    "ENTERSCENE\020f*d\n\013EGetMailOpt\022\026\n\022EGetMailO"
    "pt_Normal\020\000\022\033\n\027EGetMailOpt_LotteryGive\020\001"
    "\022 \n\034EGetMailOpt_LotteryGive_Auto\020\002*T\n\nEE"
    "ventType\022\022\n\016EEVENTTYPE_MIN\020\000\022\036\n\032EEVENTTY"
    "PE_SOCIALAPPLY_ADD\020\001\022\022\n\016EEVENTTYPE_MAX\020\005"
    "*Q\n\017ESceneImageType\022\023\n\017ESCENEIMAGE_MIN\020\000"
    "\022\024\n\020ESCENEIMAGE_SEAL\020\001\022\023\n\017ESCENEIMAGE_MA"
    "X\020\002*\344\001\n\016ESetSealStatus\022\026\n\022ESETSEALSTATUS"
    "_MIN\020\000\022\030\n\024ESETSEALSTATUS_BEGIN\020\001\022\031\n\025ESET"
    "SEALSTATUS_FINISH\020\002\022\027\n\023ESETSEALSTATUS_FA"
    "IL\020\003\022\031\n\025ESETSEALSTATUS_CREATE\020\004\022\031\n\025ESETS"
    "EALSTATUS_SETPOS\020\005\022\032\n\026ESETSEALSTATUS_ABA"
    "NDON\020\006\022\032\n\026ESETSEALSTATUS_INVALID\020\007", 18594);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SessionCmd.proto", &protobuf_RegisterTypes);
  RaidMapData::default_instance_ = new RaidMapData();
  MapRegSessionCmd::default_instance_ = new MapRegSessionCmd();
  CreateRaidMapSessionCmd::default_instance_ = new CreateRaidMapSessionCmd();
  DeleteDMapSessionCmd::default_instance_ = new DeleteDMapSessionCmd();
  ChangeSceneSessionCmd::default_instance_ = new ChangeSceneSessionCmd();
  ChangeSceneResultSessionCmd::default_instance_ = new ChangeSceneResultSessionCmd();
  UserDataSync::default_instance_ = new UserDataSync();
  GoToUserMapSessionCmd::default_instance_ = new GoToUserMapSessionCmd();
  LoadLuaSessionCmd::default_instance_ = new LoadLuaSessionCmd();
  ExecGMCmdSessionCmd::default_instance_ = new ExecGMCmdSessionCmd();
  TowerLayer::default_instance_ = new TowerLayer();
  TowerInfo::default_instance_ = new TowerInfo();
  SceneTowerUpdate::default_instance_ = new SceneTowerUpdate();
  TowerMonsterKill::default_instance_ = new TowerMonsterKill();
  SendMail::default_instance_ = new SendMail();
  SessionSceneUserCmd::default_instance_ = new SessionSceneUserCmd();
  GetMailAttachSessionCmd::default_instance_ = new GetMailAttachSessionCmd();
  FollowerIDCheck::default_instance_ = new FollowerIDCheck();
  Event::default_instance_ = new Event();
  ChatMsgSession::default_instance_ = new ChatMsgSession();
  SetGlobalDaily::default_instance_ = new SetGlobalDaily();
  RefreshQuest::default_instance_ = new RefreshQuest();
  QuerySealTimer::default_instance_ = new QuerySealTimer();
  DelSceneImage::default_instance_ = new DelSceneImage();
  SetTeamSeal::default_instance_ = new SetTeamSeal();
  UserLoginNtfSessionCmd::default_instance_ = new UserLoginNtfSessionCmd();
  RefreshTower::default_instance_ = new RefreshTower();
  NotifyLoginSessionCmd::default_instance_ = new NotifyLoginSessionCmd();
  ErrSetUserDataSessionCmd::default_instance_ = new ErrSetUserDataSessionCmd();
  ChangeSceneSingleSessionCmd::default_instance_ = new ChangeSceneSingleSessionCmd();
  RegMapFailSessionCmd::default_instance_ = new RegMapFailSessionCmd();
  RegMapOKSessionCmd::default_instance_ = new RegMapOKSessionCmd();
  ForwardUserSessionCmd::default_instance_ = new ForwardUserSessionCmd();
  ForwardUserSceneSessionCmd::default_instance_ = new ForwardUserSceneSessionCmd();
  ForwardUserSessionSessionCmd::default_instance_ = new ForwardUserSessionSessionCmd();
  ForwardUserSceneSvrSessionCmd::default_instance_ = new ForwardUserSceneSvrSessionCmd();
  EnterGuildTerritorySessionCmd::default_instance_ = new EnterGuildTerritorySessionCmd();
  SyncDojoSessionCmd::default_instance_ = new SyncDojoSessionCmd();
  ChargeSessionCmd::default_instance_ = new ChargeSessionCmd();
  GagSessionCmd::default_instance_ = new GagSessionCmd();
  LockSessionCmd::default_instance_ = new LockSessionCmd();
  IteamImageSessionCmd::default_instance_ = new IteamImageSessionCmd();
  FerrisInviteSessionCmd::default_instance_ = new FerrisInviteSessionCmd();
  EnterFerrisReadySessionCmd::default_instance_ = new EnterFerrisReadySessionCmd();
  ActivityTestAndSetSessionCmd::default_instance_ = new ActivityTestAndSetSessionCmd();
  ActivityStatusSessionCmd::default_instance_ = new ActivityStatusSessionCmd();
  ChangeTeamSessionCmd::default_instance_ = new ChangeTeamSessionCmd();
  ForwardRegionSessionCmd::default_instance_ = new ForwardRegionSessionCmd();
  BreakHandSessionCmd::default_instance_ = new BreakHandSessionCmd();
  ActivityStopSessionCmd::default_instance_ = new ActivityStopSessionCmd();
  WantedInfoSyncSessionCmd::default_instance_ = new WantedInfoSyncSessionCmd();
  QueryZoneStatusSessionCmd::default_instance_ = new QueryZoneStatusSessionCmd();
  SendMailFromScene::default_instance_ = new SendMailFromScene();
  GetTradeLogSessionCmd::default_instance_ = new GetTradeLogSessionCmd();
  QuestRaidCloseSessionCmd::default_instance_ = new QuestRaidCloseSessionCmd();
  AuthorizeInfoSessionCmd::default_instance_ = new AuthorizeInfoSessionCmd();
  GuildRaidCloseSessionCmd::default_instance_ = new GuildRaidCloseSessionCmd();
  DeletePwdSessionCmd::default_instance_ = new DeletePwdSessionCmd();
  GoBackSessionCmd::default_instance_ = new GoBackSessionCmd();
  WantedQuestFinishCmd::default_instance_ = new WantedQuestFinishCmd();
  AddOfflineItemSessionCmd::default_instance_ = new AddOfflineItemSessionCmd();
  UpdateOperActivitySessionCmd::default_instance_ = new UpdateOperActivitySessionCmd();
  SessionShopData::default_instance_ = new SessionShopData();
  SyncShopSessionCmd::default_instance_ = new SyncShopSessionCmd();
  UpdateActivityEventSessionCmd::default_instance_ = new UpdateActivityEventSessionCmd();
  ActivityEventNtfSessionCmd::default_instance_ = new ActivityEventNtfSessionCmd();
  LoveLetterSessionCmd::default_instance_ = new LoveLetterSessionCmd();
  LoveLetterSendSessionCmd::default_instance_ = new LoveLetterSendSessionCmd();
  UseItemCodeSessionCmd::default_instance_ = new UseItemCodeSessionCmd();
  ReqUsedItemCodeSessionCmd::default_instance_ = new ReqUsedItemCodeSessionCmd();
  GlobalActivityStartSessionCmd::default_instance_ = new GlobalActivityStartSessionCmd();
  GlobalActivityStopSessionCmd::default_instance_ = new GlobalActivityStopSessionCmd();
  ReqLotteryGiveSessionCmd::default_instance_ = new ReqLotteryGiveSessionCmd();
  SyncOperateRewardSessionCmd::default_instance_ = new SyncOperateRewardSessionCmd();
  NotifyActivitySessionCmd::default_instance_ = new NotifyActivitySessionCmd();
  GiveRewardSessionCmd::default_instance_ = new GiveRewardSessionCmd();
  WantedQuestSetCDSessionCmd::default_instance_ = new WantedQuestSetCDSessionCmd();
  UserQuotaOperSessionCmd::default_instance_ = new UserQuotaOperSessionCmd();
  SyncWorldLevelSessionCmd::default_instance_ = new SyncWorldLevelSessionCmd();
  UserEnterSceneSessionCmd::default_instance_ = new UserEnterSceneSessionCmd();
  SyncUserVarSessionCmd::default_instance_ = new SyncUserVarSessionCmd();
  RaidMapData::default_instance_->InitAsDefaultInstance();
  MapRegSessionCmd::default_instance_->InitAsDefaultInstance();
  CreateRaidMapSessionCmd::default_instance_->InitAsDefaultInstance();
  DeleteDMapSessionCmd::default_instance_->InitAsDefaultInstance();
  ChangeSceneSessionCmd::default_instance_->InitAsDefaultInstance();
  ChangeSceneResultSessionCmd::default_instance_->InitAsDefaultInstance();
  UserDataSync::default_instance_->InitAsDefaultInstance();
  GoToUserMapSessionCmd::default_instance_->InitAsDefaultInstance();
  LoadLuaSessionCmd::default_instance_->InitAsDefaultInstance();
  ExecGMCmdSessionCmd::default_instance_->InitAsDefaultInstance();
  TowerLayer::default_instance_->InitAsDefaultInstance();
  TowerInfo::default_instance_->InitAsDefaultInstance();
  SceneTowerUpdate::default_instance_->InitAsDefaultInstance();
  TowerMonsterKill::default_instance_->InitAsDefaultInstance();
  SendMail::default_instance_->InitAsDefaultInstance();
  SessionSceneUserCmd::default_instance_->InitAsDefaultInstance();
  GetMailAttachSessionCmd::default_instance_->InitAsDefaultInstance();
  FollowerIDCheck::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ChatMsgSession::default_instance_->InitAsDefaultInstance();
  SetGlobalDaily::default_instance_->InitAsDefaultInstance();
  RefreshQuest::default_instance_->InitAsDefaultInstance();
  QuerySealTimer::default_instance_->InitAsDefaultInstance();
  DelSceneImage::default_instance_->InitAsDefaultInstance();
  SetTeamSeal::default_instance_->InitAsDefaultInstance();
  UserLoginNtfSessionCmd::default_instance_->InitAsDefaultInstance();
  RefreshTower::default_instance_->InitAsDefaultInstance();
  NotifyLoginSessionCmd::default_instance_->InitAsDefaultInstance();
  ErrSetUserDataSessionCmd::default_instance_->InitAsDefaultInstance();
  ChangeSceneSingleSessionCmd::default_instance_->InitAsDefaultInstance();
  RegMapFailSessionCmd::default_instance_->InitAsDefaultInstance();
  RegMapOKSessionCmd::default_instance_->InitAsDefaultInstance();
  ForwardUserSessionCmd::default_instance_->InitAsDefaultInstance();
  ForwardUserSceneSessionCmd::default_instance_->InitAsDefaultInstance();
  ForwardUserSessionSessionCmd::default_instance_->InitAsDefaultInstance();
  ForwardUserSceneSvrSessionCmd::default_instance_->InitAsDefaultInstance();
  EnterGuildTerritorySessionCmd::default_instance_->InitAsDefaultInstance();
  SyncDojoSessionCmd::default_instance_->InitAsDefaultInstance();
  ChargeSessionCmd::default_instance_->InitAsDefaultInstance();
  GagSessionCmd::default_instance_->InitAsDefaultInstance();
  LockSessionCmd::default_instance_->InitAsDefaultInstance();
  IteamImageSessionCmd::default_instance_->InitAsDefaultInstance();
  FerrisInviteSessionCmd::default_instance_->InitAsDefaultInstance();
  EnterFerrisReadySessionCmd::default_instance_->InitAsDefaultInstance();
  ActivityTestAndSetSessionCmd::default_instance_->InitAsDefaultInstance();
  ActivityStatusSessionCmd::default_instance_->InitAsDefaultInstance();
  ChangeTeamSessionCmd::default_instance_->InitAsDefaultInstance();
  ForwardRegionSessionCmd::default_instance_->InitAsDefaultInstance();
  BreakHandSessionCmd::default_instance_->InitAsDefaultInstance();
  ActivityStopSessionCmd::default_instance_->InitAsDefaultInstance();
  WantedInfoSyncSessionCmd::default_instance_->InitAsDefaultInstance();
  QueryZoneStatusSessionCmd::default_instance_->InitAsDefaultInstance();
  SendMailFromScene::default_instance_->InitAsDefaultInstance();
  GetTradeLogSessionCmd::default_instance_->InitAsDefaultInstance();
  QuestRaidCloseSessionCmd::default_instance_->InitAsDefaultInstance();
  AuthorizeInfoSessionCmd::default_instance_->InitAsDefaultInstance();
  GuildRaidCloseSessionCmd::default_instance_->InitAsDefaultInstance();
  DeletePwdSessionCmd::default_instance_->InitAsDefaultInstance();
  GoBackSessionCmd::default_instance_->InitAsDefaultInstance();
  WantedQuestFinishCmd::default_instance_->InitAsDefaultInstance();
  AddOfflineItemSessionCmd::default_instance_->InitAsDefaultInstance();
  UpdateOperActivitySessionCmd::default_instance_->InitAsDefaultInstance();
  SessionShopData::default_instance_->InitAsDefaultInstance();
  SyncShopSessionCmd::default_instance_->InitAsDefaultInstance();
  UpdateActivityEventSessionCmd::default_instance_->InitAsDefaultInstance();
  ActivityEventNtfSessionCmd::default_instance_->InitAsDefaultInstance();
  LoveLetterSessionCmd::default_instance_->InitAsDefaultInstance();
  LoveLetterSendSessionCmd::default_instance_->InitAsDefaultInstance();
  UseItemCodeSessionCmd::default_instance_->InitAsDefaultInstance();
  ReqUsedItemCodeSessionCmd::default_instance_->InitAsDefaultInstance();
  GlobalActivityStartSessionCmd::default_instance_->InitAsDefaultInstance();
  GlobalActivityStopSessionCmd::default_instance_->InitAsDefaultInstance();
  ReqLotteryGiveSessionCmd::default_instance_->InitAsDefaultInstance();
  SyncOperateRewardSessionCmd::default_instance_->InitAsDefaultInstance();
  NotifyActivitySessionCmd::default_instance_->InitAsDefaultInstance();
  GiveRewardSessionCmd::default_instance_->InitAsDefaultInstance();
  WantedQuestSetCDSessionCmd::default_instance_->InitAsDefaultInstance();
  UserQuotaOperSessionCmd::default_instance_->InitAsDefaultInstance();
  SyncWorldLevelSessionCmd::default_instance_->InitAsDefaultInstance();
  UserEnterSceneSessionCmd::default_instance_->InitAsDefaultInstance();
  SyncUserVarSessionCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SessionCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SessionCmd_2eproto {
  StaticDescriptorInitializer_SessionCmd_2eproto() {
    protobuf_AddDesc_SessionCmd_2eproto();
  }
} static_descriptor_initializer_SessionCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* SessionParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionParam_descriptor_;
}
bool SessionParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 13:
    case 15:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 52:
    case 54:
    case 55:
    case 56:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGetMailOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGetMailOpt_descriptor_;
}
bool EGetMailOpt_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEventType_descriptor_;
}
bool EEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESceneImageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESceneImageType_descriptor_;
}
bool ESceneImageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESetSealStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESetSealStatus_descriptor_;
}
bool ESetSealStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RaidMapData::kRaididFieldNumber;
const int RaidMapData::kIndexFieldNumber;
const int RaidMapData::kCharidFieldNumber;
const int RaidMapData::kGuildidFieldNumber;
const int RaidMapData::kGuildlvFieldNumber;
const int RaidMapData::kTeamidFieldNumber;
const int RaidMapData::kRestrictFieldNumber;
const int RaidMapData::kMemberlistFieldNumber;
const int RaidMapData::kImagecenterFieldNumber;
const int RaidMapData::kImagerangeFieldNumber;
const int RaidMapData::kEnterposFieldNumber;
const int RaidMapData::kSealidFieldNumber;
const int RaidMapData::kFollowFieldNumber;
const int RaidMapData::kDojoidFieldNumber;
const int RaidMapData::kLayerFieldNumber;
const int RaidMapData::kGuildraidindexFieldNumber;
const int RaidMapData::kRoomidFieldNumber;
const int RaidMapData::kGuildinfoFieldNumber;
const int RaidMapData::kNpcidFieldNumber;
const int RaidMapData::kNomonsterlayerFieldNumber;
#endif  // !_MSC_VER

RaidMapData::RaidMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RaidMapData)
}

void RaidMapData::InitAsDefaultInstance() {
  imagecenter_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
  enterpos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
  guildinfo_ = const_cast< ::Cmd::GuildInfo*>(&::Cmd::GuildInfo::default_instance());
}

RaidMapData::RaidMapData(const RaidMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RaidMapData)
}

void RaidMapData::SharedCtor() {
  _cached_size_ = 0;
  raidid_ = 0u;
  index_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildlv_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  restrict_ = 0u;
  imagecenter_ = NULL;
  imagerange_ = 0u;
  enterpos_ = NULL;
  sealid_ = 0u;
  follow_ = 0u;
  dojoid_ = 0u;
  layer_ = 0u;
  guildraidindex_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  guildinfo_ = NULL;
  npcid_ = 0u;
  nomonsterlayer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaidMapData::~RaidMapData() {
  // @@protoc_insertion_point(destructor:Cmd.RaidMapData)
  SharedDtor();
}

void RaidMapData::SharedDtor() {
  if (this != default_instance_) {
    delete imagecenter_;
    delete enterpos_;
    delete guildinfo_;
  }
}

void RaidMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaidMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidMapData_descriptor_;
}

const RaidMapData& RaidMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

RaidMapData* RaidMapData::default_instance_ = NULL;

RaidMapData* RaidMapData::New() const {
  return new RaidMapData;
}

void RaidMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaidMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(raidid_, restrict_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(imagerange_, guildraidindex_);
    if (has_imagecenter()) {
      if (imagecenter_ != NULL) imagecenter_->::Cmd::ScenePos::Clear();
    }
    if (has_enterpos()) {
      if (enterpos_ != NULL) enterpos_->::Cmd::ScenePos::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(npcid_, nomonsterlayer_);
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::Cmd::GuildInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  memberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaidMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RaidMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 raidid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4;
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guildlv;
        break;
      }

      // optional uint32 guildlv = 5;
      case 5: {
        if (tag == 40) {
         parse_guildlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlv_)));
          set_has_guildlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 6;
      case 6: {
        if (tag == 48) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_restrict;
        break;
      }

      // optional uint32 restrict = 7;
      case 7: {
        if (tag == 56) {
         parse_restrict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restrict_)));
          set_has_restrict();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_memberlist;
        break;
      }

      // repeated uint64 memberlist = 8;
      case 8: {
        if (tag == 64) {
         parse_memberlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_memberlist())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_memberlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_memberlist;
        if (input->ExpectTag(74)) goto parse_imagecenter;
        break;
      }

      // optional .Cmd.ScenePos imagecenter = 9;
      case 9: {
        if (tag == 74) {
         parse_imagecenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagecenter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_imagerange;
        break;
      }

      // optional uint32 imagerange = 10;
      case 10: {
        if (tag == 80) {
         parse_imagerange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagerange_)));
          set_has_imagerange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_enterpos;
        break;
      }

      // optional .Cmd.ScenePos enterpos = 11;
      case 11: {
        if (tag == 90) {
         parse_enterpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sealid;
        break;
      }

      // optional uint32 sealid = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_sealid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sealid_)));
          set_has_sealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_follow;
        break;
      }

      // optional uint32 follow = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &follow_)));
          set_has_follow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_guildraidindex;
        break;
      }

      // optional uint32 guildraidindex = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_guildraidindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildraidindex_)));
          set_has_guildraidindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 17;
      case 17: {
        if (tag == 136) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_guildinfo;
        break;
      }

      // optional .Cmd.GuildInfo guildinfo = 18;
      case 18: {
        if (tag == 146) {
         parse_guildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_npcid;
        break;
      }

      // optional uint32 npcid = 19;
      case 19: {
        if (tag == 152) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_nomonsterlayer;
        break;
      }

      // optional uint32 nomonsterlayer = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_nomonsterlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nomonsterlayer_)));
          set_has_nomonsterlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RaidMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RaidMapData)
  return false;
#undef DO_
}

void RaidMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RaidMapData)
  // optional uint32 raidid = 1;
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raidid(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 guildid = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional uint32 guildlv = 5;
  if (has_guildlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guildlv(), output);
  }

  // optional uint64 teamid = 6;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->teamid(), output);
  }

  // optional uint32 restrict = 7;
  if (has_restrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->restrict(), output);
  }

  // repeated uint64 memberlist = 8;
  for (int i = 0; i < this->memberlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->memberlist(i), output);
  }

  // optional .Cmd.ScenePos imagecenter = 9;
  if (has_imagecenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->imagecenter(), output);
  }

  // optional uint32 imagerange = 10;
  if (has_imagerange()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->imagerange(), output);
  }

  // optional .Cmd.ScenePos enterpos = 11;
  if (has_enterpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->enterpos(), output);
  }

  // optional uint32 sealid = 12 [default = 0];
  if (has_sealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sealid(), output);
  }

  // optional uint32 follow = 13 [default = 0];
  if (has_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->follow(), output);
  }

  // optional uint32 dojoid = 14 [default = 0];
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dojoid(), output);
  }

  // optional uint32 layer = 15 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->layer(), output);
  }

  // optional uint32 guildraidindex = 16 [default = 0];
  if (has_guildraidindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->guildraidindex(), output);
  }

  // optional uint64 roomid = 17;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->roomid(), output);
  }

  // optional .Cmd.GuildInfo guildinfo = 18;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->guildinfo(), output);
  }

  // optional uint32 npcid = 19;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->npcid(), output);
  }

  // optional uint32 nomonsterlayer = 20 [default = 0];
  if (has_nomonsterlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->nomonsterlayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RaidMapData)
}

::google::protobuf::uint8* RaidMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RaidMapData)
  // optional uint32 raidid = 1;
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raidid(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 guildid = 4;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional uint32 guildlv = 5;
  if (has_guildlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guildlv(), target);
  }

  // optional uint64 teamid = 6;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->teamid(), target);
  }

  // optional uint32 restrict = 7;
  if (has_restrict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->restrict(), target);
  }

  // repeated uint64 memberlist = 8;
  for (int i = 0; i < this->memberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->memberlist(i), target);
  }

  // optional .Cmd.ScenePos imagecenter = 9;
  if (has_imagecenter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->imagecenter(), target);
  }

  // optional uint32 imagerange = 10;
  if (has_imagerange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->imagerange(), target);
  }

  // optional .Cmd.ScenePos enterpos = 11;
  if (has_enterpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->enterpos(), target);
  }

  // optional uint32 sealid = 12 [default = 0];
  if (has_sealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sealid(), target);
  }

  // optional uint32 follow = 13 [default = 0];
  if (has_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->follow(), target);
  }

  // optional uint32 dojoid = 14 [default = 0];
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dojoid(), target);
  }

  // optional uint32 layer = 15 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->layer(), target);
  }

  // optional uint32 guildraidindex = 16 [default = 0];
  if (has_guildraidindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->guildraidindex(), target);
  }

  // optional uint64 roomid = 17;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->roomid(), target);
  }

  // optional .Cmd.GuildInfo guildinfo = 18;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->guildinfo(), target);
  }

  // optional uint32 npcid = 19;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->npcid(), target);
  }

  // optional uint32 nomonsterlayer = 20 [default = 0];
  if (has_nomonsterlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->nomonsterlayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RaidMapData)
  return target;
}

int RaidMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 raidid = 1;
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 guildlv = 5;
    if (has_guildlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlv());
    }

    // optional uint64 teamid = 6;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 restrict = 7;
    if (has_restrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restrict());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ScenePos imagecenter = 9;
    if (has_imagecenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagecenter());
    }

    // optional uint32 imagerange = 10;
    if (has_imagerange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagerange());
    }

    // optional .Cmd.ScenePos enterpos = 11;
    if (has_enterpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterpos());
    }

    // optional uint32 sealid = 12 [default = 0];
    if (has_sealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sealid());
    }

    // optional uint32 follow = 13 [default = 0];
    if (has_follow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->follow());
    }

    // optional uint32 dojoid = 14 [default = 0];
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional uint32 layer = 15 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional uint32 guildraidindex = 16 [default = 0];
    if (has_guildraidindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildraidindex());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 roomid = 17;
    if (has_roomid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional .Cmd.GuildInfo guildinfo = 18;
    if (has_guildinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }

    // optional uint32 npcid = 19;
    if (has_npcid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint32 nomonsterlayer = 20 [default = 0];
    if (has_nomonsterlayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nomonsterlayer());
    }

  }
  // repeated uint64 memberlist = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->memberlist(i));
    }
    total_size += 1 * this->memberlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaidMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaidMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaidMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaidMapData::MergeFrom(const RaidMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberlist_.MergeFrom(from.memberlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildlv()) {
      set_guildlv(from.guildlv());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_restrict()) {
      set_restrict(from.restrict());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imagecenter()) {
      mutable_imagecenter()->::Cmd::ScenePos::MergeFrom(from.imagecenter());
    }
    if (from.has_imagerange()) {
      set_imagerange(from.imagerange());
    }
    if (from.has_enterpos()) {
      mutable_enterpos()->::Cmd::ScenePos::MergeFrom(from.enterpos());
    }
    if (from.has_sealid()) {
      set_sealid(from.sealid());
    }
    if (from.has_follow()) {
      set_follow(from.follow());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_guildraidindex()) {
      set_guildraidindex(from.guildraidindex());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::Cmd::GuildInfo::MergeFrom(from.guildinfo());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_nomonsterlayer()) {
      set_nomonsterlayer(from.nomonsterlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaidMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaidMapData::CopyFrom(const RaidMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaidMapData::IsInitialized() const {

  return true;
}

void RaidMapData::Swap(RaidMapData* other) {
  if (other != this) {
    std::swap(raidid_, other->raidid_);
    std::swap(index_, other->index_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildlv_, other->guildlv_);
    std::swap(teamid_, other->teamid_);
    std::swap(restrict_, other->restrict_);
    memberlist_.Swap(&other->memberlist_);
    std::swap(imagecenter_, other->imagecenter_);
    std::swap(imagerange_, other->imagerange_);
    std::swap(enterpos_, other->enterpos_);
    std::swap(sealid_, other->sealid_);
    std::swap(follow_, other->follow_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(layer_, other->layer_);
    std::swap(guildraidindex_, other->guildraidindex_);
    std::swap(roomid_, other->roomid_);
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(npcid_, other->npcid_);
    std::swap(nomonsterlayer_, other->nomonsterlayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaidMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaidMapData_descriptor_;
  metadata.reflection = RaidMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapRegSessionCmd::kCmdFieldNumber;
const int MapRegSessionCmd::kParamFieldNumber;
const int MapRegSessionCmd::kMapidFieldNumber;
const int MapRegSessionCmd::kMapnameFieldNumber;
const int MapRegSessionCmd::kScenenameFieldNumber;
const int MapRegSessionCmd::kDataFieldNumber;
#endif  // !_MSC_VER

MapRegSessionCmd::MapRegSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapRegSessionCmd)
}

void MapRegSessionCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::RaidMapData*>(&::Cmd::RaidMapData::default_instance());
}

MapRegSessionCmd::MapRegSessionCmd(const MapRegSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapRegSessionCmd)
}

void MapRegSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 1;
  mapid_ = 0u;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapRegSessionCmd::~MapRegSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MapRegSessionCmd)
  SharedDtor();
}

void MapRegSessionCmd::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void MapRegSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapRegSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapRegSessionCmd_descriptor_;
}

const MapRegSessionCmd& MapRegSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

MapRegSessionCmd* MapRegSessionCmd::default_instance_ = NULL;

MapRegSessionCmd* MapRegSessionCmd::New() const {
  return new MapRegSessionCmd;
}

void MapRegSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 202;
    param_ = 1;
    mapid_ = 0u;
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapname_->clear();
      }
    }
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::RaidMapData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapRegSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapRegSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = MAP_REG_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mapname;
        break;
      }

      // optional string mapname = 4;
      case 4: {
        if (tag == 34) {
         parse_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_scenename;
        break;
      }

      // optional string scenename = 5;
      case 5: {
        if (tag == 42) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .Cmd.RaidMapData data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapRegSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapRegSessionCmd)
  return false;
#undef DO_
}

void MapRegSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapRegSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = MAP_REG_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional string mapname = 4;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mapname(), output);
  }

  // optional string scenename = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scenename(), output);
  }

  // optional .Cmd.RaidMapData data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapRegSessionCmd)
}

::google::protobuf::uint8* MapRegSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapRegSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = MAP_REG_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional string mapname = 4;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mapname(), target);
  }

  // optional string scenename = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scenename(), target);
  }

  // optional .Cmd.RaidMapData data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapRegSessionCmd)
  return target;
}

int MapRegSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = MAP_REG_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional string mapname = 4;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

    // optional string scenename = 5;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

    // optional .Cmd.RaidMapData data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapRegSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapRegSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapRegSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapRegSessionCmd::MergeFrom(const MapRegSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::RaidMapData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapRegSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRegSessionCmd::CopyFrom(const MapRegSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRegSessionCmd::IsInitialized() const {

  return true;
}

void MapRegSessionCmd::Swap(MapRegSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(mapname_, other->mapname_);
    std::swap(scenename_, other->scenename_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapRegSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapRegSessionCmd_descriptor_;
  metadata.reflection = MapRegSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRaidMapSessionCmd::kCmdFieldNumber;
const int CreateRaidMapSessionCmd::kParamFieldNumber;
const int CreateRaidMapSessionCmd::kDataFieldNumber;
#endif  // !_MSC_VER

CreateRaidMapSessionCmd::CreateRaidMapSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateRaidMapSessionCmd)
}

void CreateRaidMapSessionCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::RaidMapData*>(&::Cmd::RaidMapData::default_instance());
}

CreateRaidMapSessionCmd::CreateRaidMapSessionCmd(const CreateRaidMapSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateRaidMapSessionCmd)
}

void CreateRaidMapSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 2;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRaidMapSessionCmd::~CreateRaidMapSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreateRaidMapSessionCmd)
  SharedDtor();
}

void CreateRaidMapSessionCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CreateRaidMapSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRaidMapSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRaidMapSessionCmd_descriptor_;
}

const CreateRaidMapSessionCmd& CreateRaidMapSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

CreateRaidMapSessionCmd* CreateRaidMapSessionCmd::default_instance_ = NULL;

CreateRaidMapSessionCmd* CreateRaidMapSessionCmd::New() const {
  return new CreateRaidMapSessionCmd;
}

void CreateRaidMapSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 2;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::RaidMapData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRaidMapSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateRaidMapSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CREATE_RAIDMAP_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.RaidMapData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateRaidMapSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateRaidMapSessionCmd)
  return false;
#undef DO_
}

void CreateRaidMapSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateRaidMapSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CREATE_RAIDMAP_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.RaidMapData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateRaidMapSessionCmd)
}

::google::protobuf::uint8* CreateRaidMapSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateRaidMapSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CREATE_RAIDMAP_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.RaidMapData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateRaidMapSessionCmd)
  return target;
}

int CreateRaidMapSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CREATE_RAIDMAP_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.RaidMapData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRaidMapSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRaidMapSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRaidMapSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRaidMapSessionCmd::MergeFrom(const CreateRaidMapSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::RaidMapData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRaidMapSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRaidMapSessionCmd::CopyFrom(const CreateRaidMapSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRaidMapSessionCmd::IsInitialized() const {

  return true;
}

void CreateRaidMapSessionCmd::Swap(CreateRaidMapSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRaidMapSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRaidMapSessionCmd_descriptor_;
  metadata.reflection = CreateRaidMapSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteDMapSessionCmd::kCmdFieldNumber;
const int DeleteDMapSessionCmd::kParamFieldNumber;
const int DeleteDMapSessionCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

DeleteDMapSessionCmd::DeleteDMapSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeleteDMapSessionCmd)
}

void DeleteDMapSessionCmd::InitAsDefaultInstance() {
}

DeleteDMapSessionCmd::DeleteDMapSessionCmd(const DeleteDMapSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeleteDMapSessionCmd)
}

void DeleteDMapSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 3;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteDMapSessionCmd::~DeleteDMapSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeleteDMapSessionCmd)
  SharedDtor();
}

void DeleteDMapSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteDMapSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDMapSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDMapSessionCmd_descriptor_;
}

const DeleteDMapSessionCmd& DeleteDMapSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

DeleteDMapSessionCmd* DeleteDMapSessionCmd::default_instance_ = NULL;

DeleteDMapSessionCmd* DeleteDMapSessionCmd::New() const {
  return new DeleteDMapSessionCmd;
}

void DeleteDMapSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 3;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteDMapSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeleteDMapSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = DELETE_DMAP_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeleteDMapSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeleteDMapSessionCmd)
  return false;
#undef DO_
}

void DeleteDMapSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeleteDMapSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = DELETE_DMAP_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeleteDMapSessionCmd)
}

::google::protobuf::uint8* DeleteDMapSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeleteDMapSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = DELETE_DMAP_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeleteDMapSessionCmd)
  return target;
}

int DeleteDMapSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = DELETE_DMAP_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDMapSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteDMapSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteDMapSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteDMapSessionCmd::MergeFrom(const DeleteDMapSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteDMapSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDMapSessionCmd::CopyFrom(const DeleteDMapSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDMapSessionCmd::IsInitialized() const {

  return true;
}

void DeleteDMapSessionCmd::Swap(DeleteDMapSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteDMapSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDMapSessionCmd_descriptor_;
  metadata.reflection = DeleteDMapSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSceneSessionCmd::kCmdFieldNumber;
const int ChangeSceneSessionCmd::kParamFieldNumber;
const int ChangeSceneSessionCmd::kMapidFieldNumber;
const int ChangeSceneSessionCmd::kCharidFieldNumber;
const int ChangeSceneSessionCmd::kPosFieldNumber;
#endif  // !_MSC_VER

ChangeSceneSessionCmd::ChangeSceneSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeSceneSessionCmd)
}

void ChangeSceneSessionCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ChangeSceneSessionCmd::ChangeSceneSessionCmd(const ChangeSceneSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeSceneSessionCmd)
}

void ChangeSceneSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 4;
  mapid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSceneSessionCmd::~ChangeSceneSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeSceneSessionCmd)
  SharedDtor();
}

void ChangeSceneSessionCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ChangeSceneSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSceneSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSceneSessionCmd_descriptor_;
}

const ChangeSceneSessionCmd& ChangeSceneSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ChangeSceneSessionCmd* ChangeSceneSessionCmd::default_instance_ = NULL;

ChangeSceneSessionCmd* ChangeSceneSessionCmd::New() const {
  return new ChangeSceneSessionCmd;
}

void ChangeSceneSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    cmd_ = 202;
    param_ = 4;
    mapid_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSceneSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeSceneSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // repeated uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_charid())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeSceneSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeSceneSessionCmd)
  return false;
#undef DO_
}

void ChangeSceneSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeSceneSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // repeated uint64 charid = 4;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->charid(i), output);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeSceneSessionCmd)
}

::google::protobuf::uint8* ChangeSceneSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeSceneSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // repeated uint64 charid = 4;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->charid(i), target);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeSceneSessionCmd)
  return target;
}

int ChangeSceneSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .Cmd.ScenePos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  // repeated uint64 charid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSceneSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSceneSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSceneSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSceneSessionCmd::MergeFrom(const ChangeSceneSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSceneSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSceneSessionCmd::CopyFrom(const ChangeSceneSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSceneSessionCmd::IsInitialized() const {

  return true;
}

void ChangeSceneSessionCmd::Swap(ChangeSceneSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    charid_.Swap(&other->charid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSceneSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSceneSessionCmd_descriptor_;
  metadata.reflection = ChangeSceneSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSceneResultSessionCmd::kCmdFieldNumber;
const int ChangeSceneResultSessionCmd::kParamFieldNumber;
const int ChangeSceneResultSessionCmd::kMapidFieldNumber;
const int ChangeSceneResultSessionCmd::kCharidFieldNumber;
const int ChangeSceneResultSessionCmd::kPosFieldNumber;
#endif  // !_MSC_VER

ChangeSceneResultSessionCmd::ChangeSceneResultSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeSceneResultSessionCmd)
}

void ChangeSceneResultSessionCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ChangeSceneResultSessionCmd::ChangeSceneResultSessionCmd(const ChangeSceneResultSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeSceneResultSessionCmd)
}

void ChangeSceneResultSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 5;
  mapid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSceneResultSessionCmd::~ChangeSceneResultSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeSceneResultSessionCmd)
  SharedDtor();
}

void ChangeSceneResultSessionCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ChangeSceneResultSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSceneResultSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSceneResultSessionCmd_descriptor_;
}

const ChangeSceneResultSessionCmd& ChangeSceneResultSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ChangeSceneResultSessionCmd* ChangeSceneResultSessionCmd::default_instance_ = NULL;

ChangeSceneResultSessionCmd* ChangeSceneResultSessionCmd::New() const {
  return new ChangeSceneResultSessionCmd;
}

void ChangeSceneResultSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 202;
    param_ = 5;
    mapid_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSceneResultSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeSceneResultSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_RESULT_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 6;
      case 6: {
        if (tag == 50) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeSceneResultSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeSceneResultSessionCmd)
  return false;
#undef DO_
}

void ChangeSceneResultSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeSceneResultSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_RESULT_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeSceneResultSessionCmd)
}

::google::protobuf::uint8* ChangeSceneResultSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeSceneResultSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_RESULT_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeSceneResultSessionCmd)
  return target;
}

int ChangeSceneResultSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CHANGE_SCENE_RESULT_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ScenePos pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSceneResultSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSceneResultSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSceneResultSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSceneResultSessionCmd::MergeFrom(const ChangeSceneResultSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSceneResultSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSceneResultSessionCmd::CopyFrom(const ChangeSceneResultSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSceneResultSessionCmd::IsInitialized() const {

  return true;
}

void ChangeSceneResultSessionCmd::Swap(ChangeSceneResultSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSceneResultSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSceneResultSessionCmd_descriptor_;
  metadata.reflection = ChangeSceneResultSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDataSync::kCmdFieldNumber;
const int UserDataSync::kParamFieldNumber;
const int UserDataSync::kIdFieldNumber;
const int UserDataSync::kXFieldNumber;
const int UserDataSync::kYFieldNumber;
const int UserDataSync::kZFieldNumber;
const int UserDataSync::kDatasFieldNumber;
const int UserDataSync::kAttrsFieldNumber;
#endif  // !_MSC_VER

UserDataSync::UserDataSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserDataSync)
}

void UserDataSync::InitAsDefaultInstance() {
}

UserDataSync::UserDataSync(const UserDataSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserDataSync)
}

void UserDataSync::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 6;
  id_ = GOOGLE_ULONGLONG(0);
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDataSync::~UserDataSync() {
  // @@protoc_insertion_point(destructor:Cmd.UserDataSync)
  SharedDtor();
}

void UserDataSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDataSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDataSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDataSync_descriptor_;
}

const UserDataSync& UserDataSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

UserDataSync* UserDataSync::default_instance_ = NULL;

UserDataSync* UserDataSync::New() const {
  return new UserDataSync;
}

void UserDataSync::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserDataSync*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, y_);
    cmd_ = 202;
    param_ = 6;
    z_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDataSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserDataSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_USER_DATA_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_z;
        break;
      }

      // optional float z = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 7;
      case 7: {
        if (tag == 58) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_datas;
        if (input->ExpectTag(66)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 8;
      case 8: {
        if (tag == 66) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserDataSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserDataSync)
  return false;
#undef DO_
}

void UserDataSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserDataSync)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_USER_DATA_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional float x = 4 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  // repeated .Cmd.UserData datas = 7;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr attrs = 8;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserDataSync)
}

::google::protobuf::uint8* UserDataSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserDataSync)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_USER_DATA_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional float x = 4 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  // repeated .Cmd.UserData datas = 7;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr attrs = 8;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserDataSync)
  return target;
}

int UserDataSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_USER_DATA_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional float x = 4 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 6 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  // repeated .Cmd.UserData datas = 7;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr attrs = 8;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDataSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDataSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDataSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDataSync::MergeFrom(const UserDataSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDataSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDataSync::CopyFrom(const UserDataSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDataSync::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void UserDataSync::Swap(UserDataSync* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    datas_.Swap(&other->datas_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDataSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDataSync_descriptor_;
  metadata.reflection = UserDataSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToUserMapSessionCmd::kCmdFieldNumber;
const int GoToUserMapSessionCmd::kParamFieldNumber;
const int GoToUserMapSessionCmd::kTargetuseridFieldNumber;
const int GoToUserMapSessionCmd::kGotouseridFieldNumber;
#endif  // !_MSC_VER

GoToUserMapSessionCmd::GoToUserMapSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToUserMapSessionCmd)
}

void GoToUserMapSessionCmd::InitAsDefaultInstance() {
}

GoToUserMapSessionCmd::GoToUserMapSessionCmd(const GoToUserMapSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToUserMapSessionCmd)
}

void GoToUserMapSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 9;
  targetuserid_ = GOOGLE_ULONGLONG(0);
  gotouserid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToUserMapSessionCmd::~GoToUserMapSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToUserMapSessionCmd)
  SharedDtor();
}

void GoToUserMapSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoToUserMapSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToUserMapSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToUserMapSessionCmd_descriptor_;
}

const GoToUserMapSessionCmd& GoToUserMapSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GoToUserMapSessionCmd* GoToUserMapSessionCmd::default_instance_ = NULL;

GoToUserMapSessionCmd* GoToUserMapSessionCmd::New() const {
  return new GoToUserMapSessionCmd;
}

void GoToUserMapSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoToUserMapSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(targetuserid_, gotouserid_);
    cmd_ = 202;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToUserMapSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToUserMapSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = GOTO_USER_MAP_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetuserid;
        break;
      }

      // optional uint64 targetuserid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_targetuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gotouserid;
        break;
      }

      // optional uint64 gotouserid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_gotouserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gotouserid_)));
          set_has_gotouserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToUserMapSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToUserMapSessionCmd)
  return false;
#undef DO_
}

void GoToUserMapSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToUserMapSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = GOTO_USER_MAP_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 targetuserid = 3 [default = 0];
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetuserid(), output);
  }

  // optional uint64 gotouserid = 4 [default = 0];
  if (has_gotouserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gotouserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToUserMapSessionCmd)
}

::google::protobuf::uint8* GoToUserMapSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToUserMapSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = GOTO_USER_MAP_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 targetuserid = 3 [default = 0];
  if (has_targetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetuserid(), target);
  }

  // optional uint64 gotouserid = 4 [default = 0];
  if (has_gotouserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gotouserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToUserMapSessionCmd)
  return target;
}

int GoToUserMapSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = GOTO_USER_MAP_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 targetuserid = 3 [default = 0];
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetuserid());
    }

    // optional uint64 gotouserid = 4 [default = 0];
    if (has_gotouserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gotouserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToUserMapSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToUserMapSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToUserMapSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToUserMapSessionCmd::MergeFrom(const GoToUserMapSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_gotouserid()) {
      set_gotouserid(from.gotouserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToUserMapSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToUserMapSessionCmd::CopyFrom(const GoToUserMapSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToUserMapSessionCmd::IsInitialized() const {

  return true;
}

void GoToUserMapSessionCmd::Swap(GoToUserMapSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(gotouserid_, other->gotouserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToUserMapSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToUserMapSessionCmd_descriptor_;
  metadata.reflection = GoToUserMapSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadLuaSessionCmd::kCmdFieldNumber;
const int LoadLuaSessionCmd::kParamFieldNumber;
const int LoadLuaSessionCmd::kTableFieldNumber;
const int LoadLuaSessionCmd::kLuaFieldNumber;
const int LoadLuaSessionCmd::kLogFieldNumber;
const int LoadLuaSessionCmd::kServeridFieldNumber;
const int LoadLuaSessionCmd::kAllzoneFieldNumber;
const int LoadLuaSessionCmd::kLoadTypeFieldNumber;
#endif  // !_MSC_VER

LoadLuaSessionCmd::LoadLuaSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoadLuaSessionCmd)
}

void LoadLuaSessionCmd::InitAsDefaultInstance() {
}

LoadLuaSessionCmd::LoadLuaSessionCmd(const LoadLuaSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoadLuaSessionCmd)
}

void LoadLuaSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 10;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0u;
  allzone_ = true;
  load_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadLuaSessionCmd::~LoadLuaSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoadLuaSessionCmd)
  SharedDtor();
}

void LoadLuaSessionCmd::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lua_;
  }
  if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void LoadLuaSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadLuaSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadLuaSessionCmd_descriptor_;
}

const LoadLuaSessionCmd& LoadLuaSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

LoadLuaSessionCmd* LoadLuaSessionCmd::default_instance_ = NULL;

LoadLuaSessionCmd* LoadLuaSessionCmd::New() const {
  return new LoadLuaSessionCmd;
}

void LoadLuaSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    cmd_ = 202;
    param_ = 10;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_lua()) {
      if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lua_->clear();
      }
    }
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_->clear();
      }
    }
    serverid_ = 0u;
    allzone_ = true;
    load_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadLuaSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoadLuaSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = LOAD_LUA_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table;
        break;
      }

      // optional string table = 3;
      case 3: {
        if (tag == 26) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lua;
        break;
      }

      // optional string lua = 4;
      case 4: {
        if (tag == 34) {
         parse_lua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lua().data(), this->lua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }

      // optional string log = 5;
      case 5: {
        if (tag == 42) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 6;
      case 6: {
        if (tag == 48) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_allzone;
        break;
      }

      // optional bool allzone = 7 [default = true];
      case 7: {
        if (tag == 56) {
         parse_allzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allzone_)));
          set_has_allzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_load_type;
        break;
      }

      // optional .Cmd.EComLoadType load_type = 8;
      case 8: {
        if (tag == 64) {
         parse_load_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EComLoadType_IsValid(value)) {
            set_load_type(static_cast< ::Cmd::EComLoadType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoadLuaSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoadLuaSessionCmd)
  return false;
#undef DO_
}

void LoadLuaSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoadLuaSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = LOAD_LUA_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table(), output);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lua(), output);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->log(), output);
  }

  // optional uint32 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serverid(), output);
  }

  // optional bool allzone = 7 [default = true];
  if (has_allzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allzone(), output);
  }

  // optional .Cmd.EComLoadType load_type = 8;
  if (has_load_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->load_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoadLuaSessionCmd)
}

::google::protobuf::uint8* LoadLuaSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoadLuaSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = LOAD_LUA_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table(), target);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lua(), target);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log(), target);
  }

  // optional uint32 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serverid(), target);
  }

  // optional bool allzone = 7 [default = true];
  if (has_allzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allzone(), target);
  }

  // optional .Cmd.EComLoadType load_type = 8;
  if (has_load_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->load_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoadLuaSessionCmd)
  return target;
}

int LoadLuaSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = LOAD_LUA_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // optional string lua = 4;
    if (has_lua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua());
    }

    // optional string log = 5;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }

    // optional uint32 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional bool allzone = 7 [default = true];
    if (has_allzone()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.EComLoadType load_type = 8;
    if (has_load_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->load_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadLuaSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadLuaSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadLuaSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadLuaSessionCmd::MergeFrom(const LoadLuaSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_lua()) {
      set_lua(from.lua());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_allzone()) {
      set_allzone(from.allzone());
    }
    if (from.has_load_type()) {
      set_load_type(from.load_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadLuaSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadLuaSessionCmd::CopyFrom(const LoadLuaSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadLuaSessionCmd::IsInitialized() const {

  return true;
}

void LoadLuaSessionCmd::Swap(LoadLuaSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(table_, other->table_);
    std::swap(lua_, other->lua_);
    std::swap(log_, other->log_);
    std::swap(serverid_, other->serverid_);
    std::swap(allzone_, other->allzone_);
    std::swap(load_type_, other->load_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadLuaSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadLuaSessionCmd_descriptor_;
  metadata.reflection = LoadLuaSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecGMCmdSessionCmd::kCmdFieldNumber;
const int ExecGMCmdSessionCmd::kParamFieldNumber;
const int ExecGMCmdSessionCmd::kServeridFieldNumber;
const int ExecGMCmdSessionCmd::kGmcmdFieldNumber;
const int ExecGMCmdSessionCmd::kAllzoneFieldNumber;
#endif  // !_MSC_VER

ExecGMCmdSessionCmd::ExecGMCmdSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExecGMCmdSessionCmd)
}

void ExecGMCmdSessionCmd::InitAsDefaultInstance() {
}

ExecGMCmdSessionCmd::ExecGMCmdSessionCmd(const ExecGMCmdSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExecGMCmdSessionCmd)
}

void ExecGMCmdSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 72;
  serverid_ = 0u;
  gmcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allzone_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecGMCmdSessionCmd::~ExecGMCmdSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExecGMCmdSessionCmd)
  SharedDtor();
}

void ExecGMCmdSessionCmd::SharedDtor() {
  if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmcmd_;
  }
  if (this != default_instance_) {
  }
}

void ExecGMCmdSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecGMCmdSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecGMCmdSessionCmd_descriptor_;
}

const ExecGMCmdSessionCmd& ExecGMCmdSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ExecGMCmdSessionCmd* ExecGMCmdSessionCmd::default_instance_ = NULL;

ExecGMCmdSessionCmd* ExecGMCmdSessionCmd::New() const {
  return new ExecGMCmdSessionCmd;
}

void ExecGMCmdSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 202;
    param_ = 72;
    serverid_ = 0u;
    if (has_gmcmd()) {
      if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmcmd_->clear();
      }
    }
    allzone_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecGMCmdSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExecGMCmdSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = EXEC_GM_CMD_SESSIONCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 3;
      case 3: {
        if (tag == 24) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gmcmd;
        break;
      }

      // optional string gmcmd = 4;
      case 4: {
        if (tag == 34) {
         parse_gmcmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmcmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmcmd().data(), this->gmcmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmcmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allzone;
        break;
      }

      // optional bool allzone = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_allzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allzone_)));
          set_has_allzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExecGMCmdSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExecGMCmdSessionCmd)
  return false;
#undef DO_
}

void ExecGMCmdSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExecGMCmdSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = EXEC_GM_CMD_SESSIONCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // optional string gmcmd = 4;
  if (has_gmcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcmd().data(), this->gmcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gmcmd(), output);
  }

  // optional bool allzone = 5 [default = true];
  if (has_allzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allzone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExecGMCmdSessionCmd)
}

::google::protobuf::uint8* ExecGMCmdSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExecGMCmdSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = EXEC_GM_CMD_SESSIONCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // optional string gmcmd = 4;
  if (has_gmcmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcmd().data(), this->gmcmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gmcmd(), target);
  }

  // optional bool allzone = 5 [default = true];
  if (has_allzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allzone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExecGMCmdSessionCmd)
  return target;
}

int ExecGMCmdSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = EXEC_GM_CMD_SESSIONCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional string gmcmd = 4;
    if (has_gmcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmcmd());
    }

    // optional bool allzone = 5 [default = true];
    if (has_allzone()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecGMCmdSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecGMCmdSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecGMCmdSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecGMCmdSessionCmd::MergeFrom(const ExecGMCmdSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_gmcmd()) {
      set_gmcmd(from.gmcmd());
    }
    if (from.has_allzone()) {
      set_allzone(from.allzone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecGMCmdSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecGMCmdSessionCmd::CopyFrom(const ExecGMCmdSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecGMCmdSessionCmd::IsInitialized() const {

  return true;
}

void ExecGMCmdSessionCmd::Swap(ExecGMCmdSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(serverid_, other->serverid_);
    std::swap(gmcmd_, other->gmcmd_);
    std::swap(allzone_, other->allzone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecGMCmdSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecGMCmdSessionCmd_descriptor_;
  metadata.reflection = ExecGMCmdSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerLayer::kLayerFieldNumber;
const int TowerLayer::kCurmonsteridsFieldNumber;
#endif  // !_MSC_VER

TowerLayer::TowerLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerLayer)
}

void TowerLayer::InitAsDefaultInstance() {
}

TowerLayer::TowerLayer(const TowerLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerLayer)
}

void TowerLayer::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerLayer::~TowerLayer() {
  // @@protoc_insertion_point(destructor:Cmd.TowerLayer)
  SharedDtor();
}

void TowerLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerLayer_descriptor_;
}

const TowerLayer& TowerLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

TowerLayer* TowerLayer::default_instance_ = NULL;

TowerLayer* TowerLayer::New() const {
  return new TowerLayer;
}

void TowerLayer::Clear() {
  layer_ = 0u;
  curmonsterids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 layer = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curmonsterids;
        break;
      }

      // repeated uint32 curmonsterids = 3;
      case 3: {
        if (tag == 24) {
         parse_curmonsterids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_curmonsterids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_curmonsterids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curmonsterids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerLayer)
  return false;
#undef DO_
}

void TowerLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerLayer)
  // optional uint32 layer = 1 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

  // repeated uint32 curmonsterids = 3;
  for (int i = 0; i < this->curmonsterids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->curmonsterids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerLayer)
}

::google::protobuf::uint8* TowerLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerLayer)
  // optional uint32 layer = 1 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layer(), target);
  }

  // repeated uint32 curmonsterids = 3;
  for (int i = 0; i < this->curmonsterids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->curmonsterids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerLayer)
  return target;
}

int TowerLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 layer = 1 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  // repeated uint32 curmonsterids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->curmonsterids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->curmonsterids(i));
    }
    total_size += 1 * this->curmonsterids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerLayer::MergeFrom(const TowerLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  curmonsterids_.MergeFrom(from.curmonsterids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerLayer::CopyFrom(const TowerLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerLayer::IsInitialized() const {

  return true;
}

void TowerLayer::Swap(TowerLayer* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    curmonsterids_.Swap(&other->curmonsterids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerLayer_descriptor_;
  metadata.reflection = TowerLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerInfo::kMaxlayerFieldNumber;
const int TowerInfo::kKillmonstersFieldNumber;
const int TowerInfo::kLayersFieldNumber;
#endif  // !_MSC_VER

TowerInfo::TowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerInfo)
}

void TowerInfo::InitAsDefaultInstance() {
}

TowerInfo::TowerInfo(const TowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerInfo)
}

void TowerInfo::SharedCtor() {
  _cached_size_ = 0;
  maxlayer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerInfo::~TowerInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TowerInfo)
  SharedDtor();
}

void TowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerInfo_descriptor_;
}

const TowerInfo& TowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

TowerInfo* TowerInfo::default_instance_ = NULL;

TowerInfo* TowerInfo::New() const {
  return new TowerInfo;
}

void TowerInfo::Clear() {
  maxlayer_ = 0u;
  killmonsters_.Clear();
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxlayer = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killmonsters;
        break;
      }

      // repeated uint32 killmonsters = 3;
      case 3: {
        if (tag == 24) {
         parse_killmonsters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_killmonsters())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_killmonsters())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killmonsters;
        if (input->ExpectTag(34)) goto parse_layers;
        break;
      }

      // repeated .Cmd.TowerLayer layers = 4;
      case 4: {
        if (tag == 34) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_layers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerInfo)
  return false;
#undef DO_
}

void TowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerInfo)
  // optional uint32 maxlayer = 1 [default = 0];
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxlayer(), output);
  }

  // repeated uint32 killmonsters = 3;
  for (int i = 0; i < this->killmonsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->killmonsters(i), output);
  }

  // repeated .Cmd.TowerLayer layers = 4;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerInfo)
}

::google::protobuf::uint8* TowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerInfo)
  // optional uint32 maxlayer = 1 [default = 0];
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxlayer(), target);
  }

  // repeated uint32 killmonsters = 3;
  for (int i = 0; i < this->killmonsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->killmonsters(i), target);
  }

  // repeated .Cmd.TowerLayer layers = 4;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerInfo)
  return target;
}

int TowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 maxlayer = 1 [default = 0];
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlayer());
    }

  }
  // repeated uint32 killmonsters = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->killmonsters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->killmonsters(i));
    }
    total_size += 1 * this->killmonsters_size() + data_size;
  }

  // repeated .Cmd.TowerLayer layers = 4;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerInfo::MergeFrom(const TowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  killmonsters_.MergeFrom(from.killmonsters_);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerInfo::CopyFrom(const TowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerInfo::IsInitialized() const {

  return true;
}

void TowerInfo::Swap(TowerInfo* other) {
  if (other != this) {
    std::swap(maxlayer_, other->maxlayer_);
    killmonsters_.Swap(&other->killmonsters_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerInfo_descriptor_;
  metadata.reflection = TowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneTowerUpdate::kCmdFieldNumber;
const int SceneTowerUpdate::kParamFieldNumber;
const int SceneTowerUpdate::kInfoFieldNumber;
#endif  // !_MSC_VER

SceneTowerUpdate::SceneTowerUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SceneTowerUpdate)
}

void SceneTowerUpdate::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::TowerInfo*>(&::Cmd::TowerInfo::default_instance());
}

SceneTowerUpdate::SceneTowerUpdate(const SceneTowerUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SceneTowerUpdate)
}

void SceneTowerUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 13;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneTowerUpdate::~SceneTowerUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.SceneTowerUpdate)
  SharedDtor();
}

void SceneTowerUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SceneTowerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneTowerUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneTowerUpdate_descriptor_;
}

const SceneTowerUpdate& SceneTowerUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SceneTowerUpdate* SceneTowerUpdate::default_instance_ = NULL;

SceneTowerUpdate* SceneTowerUpdate::New() const {
  return new SceneTowerUpdate;
}

void SceneTowerUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 13;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::TowerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneTowerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SceneTowerUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = TOWERINFO_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Cmd.TowerInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SceneTowerUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SceneTowerUpdate)
  return false;
#undef DO_
}

void SceneTowerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SceneTowerUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = TOWERINFO_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TowerInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SceneTowerUpdate)
}

::google::protobuf::uint8* SceneTowerUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SceneTowerUpdate)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = TOWERINFO_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TowerInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SceneTowerUpdate)
  return target;
}

int SceneTowerUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = TOWERINFO_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TowerInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneTowerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneTowerUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneTowerUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneTowerUpdate::MergeFrom(const SceneTowerUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::TowerInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneTowerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneTowerUpdate::CopyFrom(const SceneTowerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneTowerUpdate::IsInitialized() const {

  return true;
}

void SceneTowerUpdate::Swap(SceneTowerUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneTowerUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneTowerUpdate_descriptor_;
  metadata.reflection = SceneTowerUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerMonsterKill::kCmdFieldNumber;
const int TowerMonsterKill::kParamFieldNumber;
const int TowerMonsterKill::kMonsteridFieldNumber;
#endif  // !_MSC_VER

TowerMonsterKill::TowerMonsterKill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerMonsterKill)
}

void TowerMonsterKill::InitAsDefaultInstance() {
}

TowerMonsterKill::TowerMonsterKill(const TowerMonsterKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerMonsterKill)
}

void TowerMonsterKill::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 15;
  monsterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerMonsterKill::~TowerMonsterKill() {
  // @@protoc_insertion_point(destructor:Cmd.TowerMonsterKill)
  SharedDtor();
}

void TowerMonsterKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerMonsterKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerMonsterKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerMonsterKill_descriptor_;
}

const TowerMonsterKill& TowerMonsterKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

TowerMonsterKill* TowerMonsterKill::default_instance_ = NULL;

TowerMonsterKill* TowerMonsterKill::New() const {
  return new TowerMonsterKill;
}

void TowerMonsterKill::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 15;
    monsterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerMonsterKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerMonsterKill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = TOWER_MONSTERKILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monsterid;
        break;
      }

      // optional uint32 monsterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerMonsterKill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerMonsterKill)
  return false;
#undef DO_
}

void TowerMonsterKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerMonsterKill)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = TOWER_MONSTERKILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 monsterid = 3 [default = 0];
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerMonsterKill)
}

::google::protobuf::uint8* TowerMonsterKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerMonsterKill)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = TOWER_MONSTERKILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 monsterid = 3 [default = 0];
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerMonsterKill)
  return target;
}

int TowerMonsterKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = TOWER_MONSTERKILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 monsterid = 3 [default = 0];
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerMonsterKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerMonsterKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerMonsterKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerMonsterKill::MergeFrom(const TowerMonsterKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerMonsterKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerMonsterKill::CopyFrom(const TowerMonsterKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerMonsterKill::IsInitialized() const {

  return true;
}

void TowerMonsterKill::Swap(TowerMonsterKill* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerMonsterKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerMonsterKill_descriptor_;
  metadata.reflection = TowerMonsterKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMail::kCmdFieldNumber;
const int SendMail::kParamFieldNumber;
const int SendMail::kDataFieldNumber;
#endif  // !_MSC_VER

SendMail::SendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SendMail)
}

void SendMail::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MailData*>(&::Cmd::MailData::default_instance());
}

SendMail::SendMail(const SendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SendMail)
}

void SendMail::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 19;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMail::~SendMail() {
  // @@protoc_insertion_point(destructor:Cmd.SendMail)
  SharedDtor();
}

void SendMail::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void SendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMail_descriptor_;
}

const SendMail& SendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SendMail* SendMail::default_instance_ = NULL;

SendMail* SendMail::New() const {
  return new SendMail;
}

void SendMail::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 19;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MailData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SendMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MailData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SendMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SendMail)
  return false;
#undef DO_
}

void SendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SendMail)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MailData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SendMail)
}

::google::protobuf::uint8* SendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SendMail)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MailData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SendMail)
  return target;
}

int SendMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MailData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMail::MergeFrom(const SendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MailData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMail::CopyFrom(const SendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMail::IsInitialized() const {

  return true;
}

void SendMail::Swap(SendMail* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMail_descriptor_;
  metadata.reflection = SendMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionSceneUserCmd::kCmdFieldNumber;
const int SessionSceneUserCmd::kParamFieldNumber;
const int SessionSceneUserCmd::kUseridFieldNumber;
const int SessionSceneUserCmd::kCmddataFieldNumber;
#endif  // !_MSC_VER

SessionSceneUserCmd::SessionSceneUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionSceneUserCmd)
}

void SessionSceneUserCmd::InitAsDefaultInstance() {
}

SessionSceneUserCmd::SessionSceneUserCmd(const SessionSceneUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionSceneUserCmd)
}

void SessionSceneUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 21;
  userid_ = GOOGLE_ULONGLONG(0);
  cmddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionSceneUserCmd::~SessionSceneUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SessionSceneUserCmd)
  SharedDtor();
}

void SessionSceneUserCmd::SharedDtor() {
  if (cmddata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmddata_;
  }
  if (this != default_instance_) {
  }
}

void SessionSceneUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionSceneUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionSceneUserCmd_descriptor_;
}

const SessionSceneUserCmd& SessionSceneUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SessionSceneUserCmd* SessionSceneUserCmd::default_instance_ = NULL;

SessionSceneUserCmd* SessionSceneUserCmd::New() const {
  return new SessionSceneUserCmd;
}

void SessionSceneUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 21;
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_cmddata()) {
      if (cmddata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmddata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionSceneUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionSceneUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SCENEUSERCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmddata;
        break;
      }

      // optional bytes cmddata = 4;
      case 4: {
        if (tag == 34) {
         parse_cmddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionSceneUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionSceneUserCmd)
  return false;
#undef DO_
}

void SessionSceneUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionSceneUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SCENEUSERCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional bytes cmddata = 4;
  if (has_cmddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cmddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionSceneUserCmd)
}

::google::protobuf::uint8* SessionSceneUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionSceneUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SCENEUSERCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional bytes cmddata = 4;
  if (has_cmddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cmddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionSceneUserCmd)
  return target;
}

int SessionSceneUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SCENEUSERCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional bytes cmddata = 4;
    if (has_cmddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmddata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionSceneUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionSceneUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionSceneUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionSceneUserCmd::MergeFrom(const SessionSceneUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_cmddata()) {
      set_cmddata(from.cmddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionSceneUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionSceneUserCmd::CopyFrom(const SessionSceneUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSceneUserCmd::IsInitialized() const {

  return true;
}

void SessionSceneUserCmd::Swap(SessionSceneUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(cmddata_, other->cmddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionSceneUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionSceneUserCmd_descriptor_;
  metadata.reflection = SessionSceneUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMailAttachSessionCmd::kCmdFieldNumber;
const int GetMailAttachSessionCmd::kParamFieldNumber;
const int GetMailAttachSessionCmd::kCharidFieldNumber;
const int GetMailAttachSessionCmd::kMailidFieldNumber;
const int GetMailAttachSessionCmd::kMsgidFieldNumber;
const int GetMailAttachSessionCmd::kItemsFieldNumber;
const int GetMailAttachSessionCmd::kItemDatasFieldNumber;
const int GetMailAttachSessionCmd::kGroupidFieldNumber;
const int GetMailAttachSessionCmd::kOptFieldNumber;
#endif  // !_MSC_VER

GetMailAttachSessionCmd::GetMailAttachSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetMailAttachSessionCmd)
}

void GetMailAttachSessionCmd::InitAsDefaultInstance() {
}

GetMailAttachSessionCmd::GetMailAttachSessionCmd(const GetMailAttachSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetMailAttachSessionCmd)
}

void GetMailAttachSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 20;
  charid_ = GOOGLE_ULONGLONG(0);
  mailid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0u;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMailAttachSessionCmd::~GetMailAttachSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetMailAttachSessionCmd)
  SharedDtor();
}

void GetMailAttachSessionCmd::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void GetMailAttachSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMailAttachSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMailAttachSessionCmd_descriptor_;
}

const GetMailAttachSessionCmd& GetMailAttachSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GetMailAttachSessionCmd* GetMailAttachSessionCmd::default_instance_ = NULL;

GetMailAttachSessionCmd* GetMailAttachSessionCmd::New() const {
  return new GetMailAttachSessionCmd;
}

void GetMailAttachSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetMailAttachSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(charid_, mailid_);
    cmd_ = 202;
    param_ = 20;
    msgid_ = 0u;
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupid_->clear();
      }
    }
  }
  opt_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  itemdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMailAttachSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetMailAttachSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_MAILATTACH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mailid;
        break;
      }

      // optional uint64 mailid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 6;
      case 6: {
        if (tag == 50) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectTag(58)) goto parse_itemDatas;
        break;
      }

      // repeated .Cmd.ItemData itemDatas = 7;
      case 7: {
        if (tag == 58) {
         parse_itemDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemDatas;
        if (input->ExpectTag(66)) goto parse_groupid;
        break;
      }

      // optional string groupid = 8;
      case 8: {
        if (tag == 66) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_opt;
        break;
      }

      // optional .Cmd.EGetMailOpt opt = 9;
      case 9: {
        if (tag == 72) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGetMailOpt_IsValid(value)) {
            set_opt(static_cast< ::Cmd::EGetMailOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetMailAttachSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetMailAttachSessionCmd)
  return false;
#undef DO_
}

void GetMailAttachSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetMailAttachSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_MAILATTACH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 mailid = 4 [default = 0];
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mailid(), output);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msgid(), output);
  }

  // repeated .Cmd.ItemInfo items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  // repeated .Cmd.ItemData itemDatas = 7;
  for (int i = 0; i < this->itemdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->itemdatas(i), output);
  }

  // optional string groupid = 8;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->groupid(), output);
  }

  // optional .Cmd.EGetMailOpt opt = 9;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetMailAttachSessionCmd)
}

::google::protobuf::uint8* GetMailAttachSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetMailAttachSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_MAILATTACH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 mailid = 4 [default = 0];
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mailid(), target);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msgid(), target);
  }

  // repeated .Cmd.ItemInfo items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  // repeated .Cmd.ItemData itemDatas = 7;
  for (int i = 0; i < this->itemdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->itemdatas(i), target);
  }

  // optional string groupid = 8;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->groupid(), target);
  }

  // optional .Cmd.EGetMailOpt opt = 9;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetMailAttachSessionCmd)
  return target;
}

int GetMailAttachSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_MAILATTACH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 mailid = 4 [default = 0];
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint32 msgid = 5 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string groupid = 8;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EGetMailOpt opt = 9;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

  }
  // repeated .Cmd.ItemInfo items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.ItemData itemDatas = 7;
  total_size += 1 * this->itemdatas_size();
  for (int i = 0; i < this->itemdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMailAttachSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMailAttachSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMailAttachSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMailAttachSessionCmd::MergeFrom(const GetMailAttachSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  itemdatas_.MergeFrom(from.itemdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMailAttachSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMailAttachSessionCmd::CopyFrom(const GetMailAttachSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMailAttachSessionCmd::IsInitialized() const {

  return true;
}

void GetMailAttachSessionCmd::Swap(GetMailAttachSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(mailid_, other->mailid_);
    std::swap(msgid_, other->msgid_);
    items_.Swap(&other->items_);
    itemdatas_.Swap(&other->itemdatas_);
    std::swap(groupid_, other->groupid_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMailAttachSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMailAttachSessionCmd_descriptor_;
  metadata.reflection = GetMailAttachSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowerIDCheck::kCmdFieldNumber;
const int FollowerIDCheck::kParamFieldNumber;
const int FollowerIDCheck::kUseridFieldNumber;
const int FollowerIDCheck::kFollowidFieldNumber;
const int FollowerIDCheck::kEtypeFieldNumber;
#endif  // !_MSC_VER

FollowerIDCheck::FollowerIDCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FollowerIDCheck)
}

void FollowerIDCheck::InitAsDefaultInstance() {
}

FollowerIDCheck::FollowerIDCheck(const FollowerIDCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FollowerIDCheck)
}

void FollowerIDCheck::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 22;
  userid_ = GOOGLE_ULONGLONG(0);
  followid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowerIDCheck::~FollowerIDCheck() {
  // @@protoc_insertion_point(destructor:Cmd.FollowerIDCheck)
  SharedDtor();
}

void FollowerIDCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FollowerIDCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowerIDCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowerIDCheck_descriptor_;
}

const FollowerIDCheck& FollowerIDCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

FollowerIDCheck* FollowerIDCheck::default_instance_ = NULL;

FollowerIDCheck* FollowerIDCheck::New() const {
  return new FollowerIDCheck;
}

void FollowerIDCheck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FollowerIDCheck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(userid_, etype_);
    cmd_ = 202;
    param_ = 22;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowerIDCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FollowerIDCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_FOLLOWERIDCHECK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_followid;
        break;
      }

      // optional uint64 followid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_followid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &followid_)));
          set_has_followid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_etype;
        break;
      }

      // optional .Cmd.EFollowType etype = 5 [default = EFOLLOWTYPE_MIN];
      case 5: {
        if (tag == 40) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFollowType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EFollowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FollowerIDCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FollowerIDCheck)
  return false;
#undef DO_
}

void FollowerIDCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FollowerIDCheck)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_FOLLOWERIDCHECK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional uint64 followid = 4 [default = 0];
  if (has_followid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->followid(), output);
  }

  // optional .Cmd.EFollowType etype = 5 [default = EFOLLOWTYPE_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FollowerIDCheck)
}

::google::protobuf::uint8* FollowerIDCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FollowerIDCheck)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_FOLLOWERIDCHECK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional uint64 followid = 4 [default = 0];
  if (has_followid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->followid(), target);
  }

  // optional .Cmd.EFollowType etype = 5 [default = EFOLLOWTYPE_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FollowerIDCheck)
  return target;
}

int FollowerIDCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_FOLLOWERIDCHECK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint64 followid = 4 [default = 0];
    if (has_followid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->followid());
    }

    // optional .Cmd.EFollowType etype = 5 [default = EFOLLOWTYPE_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowerIDCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowerIDCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowerIDCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowerIDCheck::MergeFrom(const FollowerIDCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_followid()) {
      set_followid(from.followid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowerIDCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowerIDCheck::CopyFrom(const FollowerIDCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowerIDCheck::IsInitialized() const {

  return true;
}

void FollowerIDCheck::Swap(FollowerIDCheck* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(followid_, other->followid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowerIDCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowerIDCheck_descriptor_;
  metadata.reflection = FollowerIDCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kCmdFieldNumber;
const int Event::kParamFieldNumber;
const int Event::kGuidFieldNumber;
const int Event::kTypeFieldNumber;
const int Event::kParamsFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Event)
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 23;
  guid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:Cmd.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 23;
    guid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_EVENT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EEventType type = 4 [default = EEVENTTYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEventType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_params;
        break;
      }

      // repeated uint64 params = 5;
      case 5: {
        if (tag == 40) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_params())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Event)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_EVENT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // optional .Cmd.EEventType type = 4 [default = EEVENTTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // repeated uint64 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Event)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_EVENT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // optional .Cmd.EEventType type = 4 [default = EEVENTTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // repeated uint64 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_EVENT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional .Cmd.EEventType type = 4 [default = EEVENTTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint64 params = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMsgSession::kCmdFieldNumber;
const int ChatMsgSession::kParamFieldNumber;
const int ChatMsgSession::kTargetidFieldNumber;
const int ChatMsgSession::kMsgFieldNumber;
const int ChatMsgSession::kChannelFieldNumber;
const int ChatMsgSession::kSelfidFieldNumber;
const int ChatMsgSession::kVoiceFieldNumber;
const int ChatMsgSession::kVoicetimeFieldNumber;
const int ChatMsgSession::kBlinkFieldNumber;
const int ChatMsgSession::kMsgidFieldNumber;
const int ChatMsgSession::kMsgoverFieldNumber;
const int ChatMsgSession::kBarrageFieldNumber;
#endif  // !_MSC_VER

ChatMsgSession::ChatMsgSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatMsgSession)
}

void ChatMsgSession::InitAsDefaultInstance() {
  barrage_ = const_cast< ::Cmd::BarrageMsgChatCmd*>(&::Cmd::BarrageMsgChatCmd::default_instance());
}

ChatMsgSession::ChatMsgSession(const ChatMsgSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatMsgSession)
}

void ChatMsgSession::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 11;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
  selfid_ = GOOGLE_ULONGLONG(0);
  voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voicetime_ = 0u;
  blink_ = false;
  msgid_ = 0u;
  msgover_ = false;
  barrage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsgSession::~ChatMsgSession() {
  // @@protoc_insertion_point(destructor:Cmd.ChatMsgSession)
  SharedDtor();
}

void ChatMsgSession::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (this != default_instance_) {
    delete barrage_;
  }
}

void ChatMsgSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsgSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsgSession_descriptor_;
}

const ChatMsgSession& ChatMsgSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ChatMsgSession* ChatMsgSession::default_instance_ = NULL;

ChatMsgSession* ChatMsgSession::New() const {
  return new ChatMsgSession;
}

void ChatMsgSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatMsgSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(selfid_, voicetime_);
    cmd_ = 202;
    param_ = 11;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
    if (has_voice()) {
      if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voice_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(msgid_, msgover_);
    if (has_barrage()) {
      if (barrage_ != NULL) barrage_->::Cmd::BarrageMsgChatCmd::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsgSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatMsgSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CHAT_MSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }

      // repeated uint64 targetid = 3;
      case 3: {
        if (tag == 24) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_targetid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_targetid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channel;
        break;
      }

      // optional .Cmd.EGameChatChannel channel = 5 [default = ECHAT_CHANNEL_MIN];
      case 5: {
        if (tag == 40) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGameChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Cmd::EGameChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_selfid;
        break;
      }

      // optional uint64 selfid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_selfid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selfid_)));
          set_has_selfid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_voice;
        break;
      }

      // optional bytes voice = 7;
      case 7: {
        if (tag == 58) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_voicetime;
        break;
      }

      // optional uint32 voicetime = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_voicetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicetime_)));
          set_has_voicetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blink;
        break;
      }

      // optional bool blink = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
          set_has_blink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_msgover;
        break;
      }

      // optional bool msgover = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_msgover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msgover_)));
          set_has_msgover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_barrage;
        break;
      }

      // optional .Cmd.BarrageMsgChatCmd barrage = 12;
      case 12: {
        if (tag == 98) {
         parse_barrage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barrage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatMsgSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatMsgSession)
  return false;
#undef DO_
}

void ChatMsgSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatMsgSession)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CHAT_MSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 targetid = 3;
  for (int i = 0; i < this->targetid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->targetid(i), output);
  }

  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // optional .Cmd.EGameChatChannel channel = 5 [default = ECHAT_CHANNEL_MIN];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->channel(), output);
  }

  // optional uint64 selfid = 6 [default = 0];
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->selfid(), output);
  }

  // optional bytes voice = 7;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->voice(), output);
  }

  // optional uint32 voicetime = 8 [default = 0];
  if (has_voicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->voicetime(), output);
  }

  // optional bool blink = 9 [default = false];
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->blink(), output);
  }

  // optional uint32 msgid = 10 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->msgid(), output);
  }

  // optional bool msgover = 11 [default = false];
  if (has_msgover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->msgover(), output);
  }

  // optional .Cmd.BarrageMsgChatCmd barrage = 12;
  if (has_barrage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->barrage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatMsgSession)
}

::google::protobuf::uint8* ChatMsgSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatMsgSession)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CHAT_MSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 targetid = 3;
  for (int i = 0; i < this->targetid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->targetid(i), target);
  }

  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // optional .Cmd.EGameChatChannel channel = 5 [default = ECHAT_CHANNEL_MIN];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->channel(), target);
  }

  // optional uint64 selfid = 6 [default = 0];
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->selfid(), target);
  }

  // optional bytes voice = 7;
  if (has_voice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->voice(), target);
  }

  // optional uint32 voicetime = 8 [default = 0];
  if (has_voicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->voicetime(), target);
  }

  // optional bool blink = 9 [default = false];
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->blink(), target);
  }

  // optional uint32 msgid = 10 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->msgid(), target);
  }

  // optional bool msgover = 11 [default = false];
  if (has_msgover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->msgover(), target);
  }

  // optional .Cmd.BarrageMsgChatCmd barrage = 12;
  if (has_barrage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->barrage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatMsgSession)
  return target;
}

int ChatMsgSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CHAT_MSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .Cmd.EGameChatChannel channel = 5 [default = ECHAT_CHANNEL_MIN];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional uint64 selfid = 6 [default = 0];
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->selfid());
    }

    // optional bytes voice = 7;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice());
    }

    // optional uint32 voicetime = 8 [default = 0];
    if (has_voicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool blink = 9 [default = false];
    if (has_blink()) {
      total_size += 1 + 1;
    }

    // optional uint32 msgid = 10 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional bool msgover = 11 [default = false];
    if (has_msgover()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.BarrageMsgChatCmd barrage = 12;
    if (has_barrage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barrage());
    }

  }
  // repeated uint64 targetid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->targetid(i));
    }
    total_size += 1 * this->targetid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsgSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsgSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsgSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsgSession::MergeFrom(const ChatMsgSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetid_.MergeFrom(from.targetid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_selfid()) {
      set_selfid(from.selfid());
    }
    if (from.has_voice()) {
      set_voice(from.voice());
    }
    if (from.has_voicetime()) {
      set_voicetime(from.voicetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blink()) {
      set_blink(from.blink());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgover()) {
      set_msgover(from.msgover());
    }
    if (from.has_barrage()) {
      mutable_barrage()->::Cmd::BarrageMsgChatCmd::MergeFrom(from.barrage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsgSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgSession::CopyFrom(const ChatMsgSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgSession::IsInitialized() const {

  return true;
}

void ChatMsgSession::Swap(ChatMsgSession* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    targetid_.Swap(&other->targetid_);
    std::swap(msg_, other->msg_);
    std::swap(channel_, other->channel_);
    std::swap(selfid_, other->selfid_);
    std::swap(voice_, other->voice_);
    std::swap(voicetime_, other->voicetime_);
    std::swap(blink_, other->blink_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgover_, other->msgover_);
    std::swap(barrage_, other->barrage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsgSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsgSession_descriptor_;
  metadata.reflection = ChatMsgSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGlobalDaily::kCmdFieldNumber;
const int SetGlobalDaily::kParamFieldNumber;
const int SetGlobalDaily::kValueFieldNumber;
#endif  // !_MSC_VER

SetGlobalDaily::SetGlobalDaily()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetGlobalDaily)
}

void SetGlobalDaily::InitAsDefaultInstance() {
}

SetGlobalDaily::SetGlobalDaily(const SetGlobalDaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetGlobalDaily)
}

void SetGlobalDaily::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 24;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGlobalDaily::~SetGlobalDaily() {
  // @@protoc_insertion_point(destructor:Cmd.SetGlobalDaily)
  SharedDtor();
}

void SetGlobalDaily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGlobalDaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGlobalDaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGlobalDaily_descriptor_;
}

const SetGlobalDaily& SetGlobalDaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SetGlobalDaily* SetGlobalDaily::default_instance_ = NULL;

SetGlobalDaily* SetGlobalDaily::New() const {
  return new SetGlobalDaily;
}

void SetGlobalDaily::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 24;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGlobalDaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetGlobalDaily)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_GLOBL_DAILY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetGlobalDaily)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetGlobalDaily)
  return false;
#undef DO_
}

void SetGlobalDaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetGlobalDaily)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_GLOBL_DAILY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 value = 3 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetGlobalDaily)
}

::google::protobuf::uint8* SetGlobalDaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetGlobalDaily)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_GLOBL_DAILY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 value = 3 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetGlobalDaily)
  return target;
}

int SetGlobalDaily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_GLOBL_DAILY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 value = 3 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGlobalDaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGlobalDaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGlobalDaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGlobalDaily::MergeFrom(const SetGlobalDaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGlobalDaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGlobalDaily::CopyFrom(const SetGlobalDaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGlobalDaily::IsInitialized() const {

  return true;
}

void SetGlobalDaily::Swap(SetGlobalDaily* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGlobalDaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGlobalDaily_descriptor_;
  metadata.reflection = SetGlobalDaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshQuest::kCmdFieldNumber;
const int RefreshQuest::kParamFieldNumber;
const int RefreshQuest::kValueFieldNumber;
#endif  // !_MSC_VER

RefreshQuest::RefreshQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RefreshQuest)
}

void RefreshQuest::InitAsDefaultInstance() {
}

RefreshQuest::RefreshQuest(const RefreshQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RefreshQuest)
}

void RefreshQuest::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 28;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshQuest::~RefreshQuest() {
  // @@protoc_insertion_point(destructor:Cmd.RefreshQuest)
  SharedDtor();
}

void RefreshQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshQuest_descriptor_;
}

const RefreshQuest& RefreshQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

RefreshQuest* RefreshQuest::default_instance_ = NULL;

RefreshQuest* RefreshQuest::New() const {
  return new RefreshQuest;
}

void RefreshQuest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 28;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RefreshQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_QUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RefreshQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RefreshQuest)
  return false;
#undef DO_
}

void RefreshQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RefreshQuest)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_QUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 value = 3 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RefreshQuest)
}

::google::protobuf::uint8* RefreshQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RefreshQuest)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_QUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 value = 3 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RefreshQuest)
  return target;
}

int RefreshQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_QUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 value = 3 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshQuest::MergeFrom(const RefreshQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshQuest::CopyFrom(const RefreshQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshQuest::IsInitialized() const {

  return true;
}

void RefreshQuest::Swap(RefreshQuest* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshQuest_descriptor_;
  metadata.reflection = RefreshQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySealTimer::kCmdFieldNumber;
const int QuerySealTimer::kParamFieldNumber;
const int QuerySealTimer::kUseridFieldNumber;
const int QuerySealTimer::kTeamidFieldNumber;
#endif  // !_MSC_VER

QuerySealTimer::QuerySealTimer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuerySealTimer)
}

void QuerySealTimer::InitAsDefaultInstance() {
}

QuerySealTimer::QuerySealTimer(const QuerySealTimer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuerySealTimer)
}

void QuerySealTimer::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 25;
  userid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySealTimer::~QuerySealTimer() {
  // @@protoc_insertion_point(destructor:Cmd.QuerySealTimer)
  SharedDtor();
}

void QuerySealTimer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuerySealTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySealTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySealTimer_descriptor_;
}

const QuerySealTimer& QuerySealTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

QuerySealTimer* QuerySealTimer::default_instance_ = NULL;

QuerySealTimer* QuerySealTimer::New() const {
  return new QuerySealTimer;
}

void QuerySealTimer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuerySealTimer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userid_, teamid_);
    cmd_ = 202;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySealTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuerySealTimer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEALTIMER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // required uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuerySealTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuerySealTimer)
  return false;
#undef DO_
}

void QuerySealTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuerySealTimer)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEALTIMER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // required uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuerySealTimer)
}

::google::protobuf::uint8* QuerySealTimer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuerySealTimer)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEALTIMER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // required uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuerySealTimer)
  return target;
}

int QuerySealTimer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEALTIMER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // required uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySealTimer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySealTimer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySealTimer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySealTimer::MergeFrom(const QuerySealTimer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySealTimer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySealTimer::CopyFrom(const QuerySealTimer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySealTimer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void QuerySealTimer::Swap(QuerySealTimer* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySealTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySealTimer_descriptor_;
  metadata.reflection = QuerySealTimer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelSceneImage::kCmdFieldNumber;
const int DelSceneImage::kParamFieldNumber;
const int DelSceneImage::kGuidFieldNumber;
const int DelSceneImage::kRealsceneFieldNumber;
const int DelSceneImage::kEtypeFieldNumber;
const int DelSceneImage::kRaidFieldNumber;
#endif  // !_MSC_VER

DelSceneImage::DelSceneImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DelSceneImage)
}

void DelSceneImage::InitAsDefaultInstance() {
}

DelSceneImage::DelSceneImage(const DelSceneImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DelSceneImage)
}

void DelSceneImage::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 26;
  guid_ = GOOGLE_ULONGLONG(0);
  realscene_ = 0u;
  etype_ = 0;
  raid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelSceneImage::~DelSceneImage() {
  // @@protoc_insertion_point(destructor:Cmd.DelSceneImage)
  SharedDtor();
}

void DelSceneImage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelSceneImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelSceneImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelSceneImage_descriptor_;
}

const DelSceneImage& DelSceneImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

DelSceneImage* DelSceneImage::default_instance_ = NULL;

DelSceneImage* DelSceneImage::New() const {
  return new DelSceneImage;
}

void DelSceneImage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DelSceneImage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(guid_, raid_);
    cmd_ = 202;
    param_ = 26;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelSceneImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DelSceneImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = DEL_SCENE_IMAGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_realscene;
        break;
      }

      // optional uint32 realscene = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_realscene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realscene_)));
          set_has_realscene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_etype;
        break;
      }

      // optional .Cmd.ESceneImageType etype = 5 [default = ESCENEIMAGE_MIN];
      case 5: {
        if (tag == 40) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESceneImageType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::ESceneImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_raid;
        break;
      }

      // optional uint32 raid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_raid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_)));
          set_has_raid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DelSceneImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DelSceneImage)
  return false;
#undef DO_
}

void DelSceneImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DelSceneImage)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = DEL_SCENE_IMAGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // optional uint32 realscene = 4 [default = 0];
  if (has_realscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->realscene(), output);
  }

  // optional .Cmd.ESceneImageType etype = 5 [default = ESCENEIMAGE_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->etype(), output);
  }

  // optional uint32 raid = 6 [default = 0];
  if (has_raid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DelSceneImage)
}

::google::protobuf::uint8* DelSceneImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DelSceneImage)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = DEL_SCENE_IMAGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // optional uint32 realscene = 4 [default = 0];
  if (has_realscene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->realscene(), target);
  }

  // optional .Cmd.ESceneImageType etype = 5 [default = ESCENEIMAGE_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->etype(), target);
  }

  // optional uint32 raid = 6 [default = 0];
  if (has_raid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->raid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DelSceneImage)
  return target;
}

int DelSceneImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = DEL_SCENE_IMAGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 realscene = 4 [default = 0];
    if (has_realscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realscene());
    }

    // optional .Cmd.ESceneImageType etype = 5 [default = ESCENEIMAGE_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 raid = 6 [default = 0];
    if (has_raid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelSceneImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelSceneImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelSceneImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelSceneImage::MergeFrom(const DelSceneImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_realscene()) {
      set_realscene(from.realscene());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_raid()) {
      set_raid(from.raid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelSceneImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelSceneImage::CopyFrom(const DelSceneImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelSceneImage::IsInitialized() const {

  return true;
}

void DelSceneImage::Swap(DelSceneImage* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(realscene_, other->realscene_);
    std::swap(etype_, other->etype_);
    std::swap(raid_, other->raid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelSceneImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelSceneImage_descriptor_;
  metadata.reflection = DelSceneImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTeamSeal::kCmdFieldNumber;
const int SetTeamSeal::kParamFieldNumber;
const int SetTeamSeal::kSealidFieldNumber;
const int SetTeamSeal::kTeamidFieldNumber;
const int SetTeamSeal::kMapidFieldNumber;
const int SetTeamSeal::kEstatusFieldNumber;
const int SetTeamSeal::kPosFieldNumber;
const int SetTeamSeal::kLeaderidFieldNumber;
const int SetTeamSeal::kTeamersFieldNumber;
#endif  // !_MSC_VER

SetTeamSeal::SetTeamSeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetTeamSeal)
}

void SetTeamSeal::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

SetTeamSeal::SetTeamSeal(const SetTeamSeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetTeamSeal)
}

void SetTeamSeal::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 27;
  sealid_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  estatus_ = 0;
  pos_ = NULL;
  leaderid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTeamSeal::~SetTeamSeal() {
  // @@protoc_insertion_point(destructor:Cmd.SetTeamSeal)
  SharedDtor();
}

void SetTeamSeal::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void SetTeamSeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamSeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamSeal_descriptor_;
}

const SetTeamSeal& SetTeamSeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SetTeamSeal* SetTeamSeal::default_instance_ = NULL;

SetTeamSeal* SetTeamSeal::New() const {
  return new SetTeamSeal;
}

void SetTeamSeal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetTeamSeal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(teamid_, mapid_);
    cmd_ = 202;
    param_ = 27;
    estatus_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    leaderid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teamers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTeamSeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetTeamSeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_SEAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sealid;
        break;
      }

      // optional uint32 sealid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sealid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sealid_)));
          set_has_sealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_estatus;
        break;
      }

      // optional .Cmd.ESetSealStatus estatus = 6 [default = ESETSEALSTATUS_MIN];
      case 6: {
        if (tag == 48) {
         parse_estatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESetSealStatus_IsValid(value)) {
            set_estatus(static_cast< ::Cmd::ESetSealStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 7;
      case 7: {
        if (tag == 58) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_leaderid;
        break;
      }

      // optional uint64 leaderid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_teamers;
        break;
      }

      // repeated uint64 teamers = 9;
      case 9: {
        if (tag == 72) {
         parse_teamers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72, input, this->mutable_teamers())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_teamers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_teamers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetTeamSeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetTeamSeal)
  return false;
#undef DO_
}

void SetTeamSeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetTeamSeal)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_SEAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 sealid = 3 [default = 0];
  if (has_sealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sealid(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 mapid = 5 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  // optional .Cmd.ESetSealStatus estatus = 6 [default = ESETSEALSTATUS_MIN];
  if (has_estatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->estatus(), output);
  }

  // optional .Cmd.ScenePos pos = 7;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pos(), output);
  }

  // optional uint64 leaderid = 8 [default = 0];
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->leaderid(), output);
  }

  // repeated uint64 teamers = 9;
  for (int i = 0; i < this->teamers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->teamers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetTeamSeal)
}

::google::protobuf::uint8* SetTeamSeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetTeamSeal)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_SEAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 sealid = 3 [default = 0];
  if (has_sealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sealid(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 mapid = 5 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  // optional .Cmd.ESetSealStatus estatus = 6 [default = ESETSEALSTATUS_MIN];
  if (has_estatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->estatus(), target);
  }

  // optional .Cmd.ScenePos pos = 7;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pos(), target);
  }

  // optional uint64 leaderid = 8 [default = 0];
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->leaderid(), target);
  }

  // repeated uint64 teamers = 9;
  for (int i = 0; i < this->teamers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(9, this->teamers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetTeamSeal)
  return target;
}

int SetTeamSeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SET_SEAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 sealid = 3 [default = 0];
    if (has_sealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sealid());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 mapid = 5 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .Cmd.ESetSealStatus estatus = 6 [default = ESETSEALSTATUS_MIN];
    if (has_estatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->estatus());
    }

    // optional .Cmd.ScenePos pos = 7;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 leaderid = 8 [default = 0];
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

  }
  // repeated uint64 teamers = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->teamers(i));
    }
    total_size += 1 * this->teamers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamSeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTeamSeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTeamSeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTeamSeal::MergeFrom(const SetTeamSeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamers_.MergeFrom(from.teamers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_sealid()) {
      set_sealid(from.sealid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_estatus()) {
      set_estatus(from.estatus());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTeamSeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTeamSeal::CopyFrom(const SetTeamSeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTeamSeal::IsInitialized() const {

  return true;
}

void SetTeamSeal::Swap(SetTeamSeal* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(sealid_, other->sealid_);
    std::swap(teamid_, other->teamid_);
    std::swap(mapid_, other->mapid_);
    std::swap(estatus_, other->estatus_);
    std::swap(pos_, other->pos_);
    std::swap(leaderid_, other->leaderid_);
    teamers_.Swap(&other->teamers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTeamSeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamSeal_descriptor_;
  metadata.reflection = SetTeamSeal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginNtfSessionCmd::kCmdFieldNumber;
const int UserLoginNtfSessionCmd::kParamFieldNumber;
const int UserLoginNtfSessionCmd::kCharidFieldNumber;
const int UserLoginNtfSessionCmd::kServernameFieldNumber;
#endif  // !_MSC_VER

UserLoginNtfSessionCmd::UserLoginNtfSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserLoginNtfSessionCmd)
}

void UserLoginNtfSessionCmd::InitAsDefaultInstance() {
}

UserLoginNtfSessionCmd::UserLoginNtfSessionCmd(const UserLoginNtfSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserLoginNtfSessionCmd)
}

void UserLoginNtfSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 31;
  charid_ = GOOGLE_ULONGLONG(0);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginNtfSessionCmd::~UserLoginNtfSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserLoginNtfSessionCmd)
  SharedDtor();
}

void UserLoginNtfSessionCmd::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginNtfSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginNtfSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginNtfSessionCmd_descriptor_;
}

const UserLoginNtfSessionCmd& UserLoginNtfSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

UserLoginNtfSessionCmd* UserLoginNtfSessionCmd::default_instance_ = NULL;

UserLoginNtfSessionCmd* UserLoginNtfSessionCmd::New() const {
  return new UserLoginNtfSessionCmd;
}

void UserLoginNtfSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 31;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginNtfSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserLoginNtfSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USERLOGIN_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_servername;
        break;
      }

      // optional string servername = 4;
      case 4: {
        if (tag == 34) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserLoginNtfSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserLoginNtfSessionCmd)
  return false;
#undef DO_
}

void UserLoginNtfSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserLoginNtfSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USERLOGIN_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserLoginNtfSessionCmd)
}

::google::protobuf::uint8* UserLoginNtfSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserLoginNtfSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USERLOGIN_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserLoginNtfSessionCmd)
  return target;
}

int UserLoginNtfSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USERLOGIN_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string servername = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginNtfSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginNtfSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginNtfSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginNtfSessionCmd::MergeFrom(const UserLoginNtfSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginNtfSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginNtfSessionCmd::CopyFrom(const UserLoginNtfSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginNtfSessionCmd::IsInitialized() const {

  return true;
}

void UserLoginNtfSessionCmd::Swap(UserLoginNtfSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginNtfSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginNtfSessionCmd_descriptor_;
  metadata.reflection = UserLoginNtfSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshTower::kCmdFieldNumber;
const int RefreshTower::kParamFieldNumber;
#endif  // !_MSC_VER

RefreshTower::RefreshTower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RefreshTower)
}

void RefreshTower::InitAsDefaultInstance() {
}

RefreshTower::RefreshTower(const RefreshTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RefreshTower)
}

void RefreshTower::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 32;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshTower::~RefreshTower() {
  // @@protoc_insertion_point(destructor:Cmd.RefreshTower)
  SharedDtor();
}

void RefreshTower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshTower_descriptor_;
}

const RefreshTower& RefreshTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

RefreshTower* RefreshTower::default_instance_ = NULL;

RefreshTower* RefreshTower::New() const {
  return new RefreshTower;
}

void RefreshTower::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 202;
    param_ = 32;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RefreshTower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_TOWER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RefreshTower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RefreshTower)
  return false;
#undef DO_
}

void RefreshTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RefreshTower)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_TOWER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RefreshTower)
}

::google::protobuf::uint8* RefreshTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RefreshTower)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_TOWER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RefreshTower)
  return target;
}

int RefreshTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_REFRESH_TOWER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshTower::MergeFrom(const RefreshTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshTower::CopyFrom(const RefreshTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshTower::IsInitialized() const {

  return true;
}

void RefreshTower::Swap(RefreshTower* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshTower_descriptor_;
  metadata.reflection = RefreshTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLoginSessionCmd::kCmdFieldNumber;
const int NotifyLoginSessionCmd::kParamFieldNumber;
const int NotifyLoginSessionCmd::kIdFieldNumber;
const int NotifyLoginSessionCmd::kAccidFieldNumber;
const int NotifyLoginSessionCmd::kMapidFieldNumber;
const int NotifyLoginSessionCmd::kIschangesceneFieldNumber;
const int NotifyLoginSessionCmd::kNameFieldNumber;
const int NotifyLoginSessionCmd::kGatenameFieldNumber;
const int NotifyLoginSessionCmd::kPhoneFieldNumber;
const int NotifyLoginSessionCmd::kIgnorepwdFieldNumber;
const int NotifyLoginSessionCmd::kLanguageFieldNumber;
const int NotifyLoginSessionCmd::kRealauthorizedFieldNumber;
const int NotifyLoginSessionCmd::kMaxbaselvFieldNumber;
#endif  // !_MSC_VER

NotifyLoginSessionCmd::NotifyLoginSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NotifyLoginSessionCmd)
}

void NotifyLoginSessionCmd::InitAsDefaultInstance() {
}

NotifyLoginSessionCmd::NotifyLoginSessionCmd(const NotifyLoginSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NotifyLoginSessionCmd)
}

void NotifyLoginSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 33;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ischangescene_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ignorepwd_ = false;
  language_ = 0u;
  realauthorized_ = false;
  maxbaselv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLoginSessionCmd::~NotifyLoginSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NotifyLoginSessionCmd)
  SharedDtor();
}

void NotifyLoginSessionCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (gatename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatename_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void NotifyLoginSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLoginSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLoginSessionCmd_descriptor_;
}

const NotifyLoginSessionCmd& NotifyLoginSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

NotifyLoginSessionCmd* NotifyLoginSessionCmd::default_instance_ = NULL;

NotifyLoginSessionCmd* NotifyLoginSessionCmd::New() const {
  return new NotifyLoginSessionCmd;
}

void NotifyLoginSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyLoginSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, accid_);
    ZR_(mapid_, ischangescene_);
    cmd_ = 202;
    param_ = 33;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_gatename()) {
      if (gatename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gatename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(ignorepwd_, realauthorized_);
    ZR_(language_, maxbaselv_);
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLoginSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NotifyLoginSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_LOGIN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ischangescene;
        break;
      }

      // optional bool ischangescene = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_ischangescene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischangescene_)));
          set_has_ischangescene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gatename;
        break;
      }

      // optional string gatename = 8;
      case 8: {
        if (tag == 66) {
         parse_gatename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gatename().data(), this->gatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gatename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_phone;
        break;
      }

      // optional string phone = 9;
      case 9: {
        if (tag == 74) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ignorepwd;
        break;
      }

      // optional bool ignorepwd = 10;
      case 10: {
        if (tag == 80) {
         parse_ignorepwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepwd_)));
          set_has_ignorepwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_language;
        break;
      }

      // optional uint32 language = 11;
      case 11: {
        if (tag == 88) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_realauthorized;
        break;
      }

      // optional bool realauthorized = 12;
      case 12: {
        if (tag == 96) {
         parse_realauthorized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realauthorized_)));
          set_has_realauthorized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxbaselv;
        break;
      }

      // optional uint32 maxbaselv = 13;
      case 13: {
        if (tag == 104) {
         parse_maxbaselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_)));
          set_has_maxbaselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NotifyLoginSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NotifyLoginSessionCmd)
  return false;
#undef DO_
}

void NotifyLoginSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NotifyLoginSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_LOGIN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional uint32 mapid = 5 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  // optional bool ischangescene = 6 [default = false];
  if (has_ischangescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ischangescene(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string gatename = 8;
  if (has_gatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatename().data(), this->gatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->gatename(), output);
  }

  // optional string phone = 9;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->phone(), output);
  }

  // optional bool ignorepwd = 10;
  if (has_ignorepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ignorepwd(), output);
  }

  // optional uint32 language = 11;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->language(), output);
  }

  // optional bool realauthorized = 12;
  if (has_realauthorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->realauthorized(), output);
  }

  // optional uint32 maxbaselv = 13;
  if (has_maxbaselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->maxbaselv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NotifyLoginSessionCmd)
}

::google::protobuf::uint8* NotifyLoginSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NotifyLoginSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_LOGIN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional uint32 mapid = 5 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  // optional bool ischangescene = 6 [default = false];
  if (has_ischangescene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ischangescene(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string gatename = 8;
  if (has_gatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatename().data(), this->gatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gatename(), target);
  }

  // optional string phone = 9;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->phone(), target);
  }

  // optional bool ignorepwd = 10;
  if (has_ignorepwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ignorepwd(), target);
  }

  // optional uint32 language = 11;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->language(), target);
  }

  // optional bool realauthorized = 12;
  if (has_realauthorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->realauthorized(), target);
  }

  // optional uint32 maxbaselv = 13;
  if (has_maxbaselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->maxbaselv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NotifyLoginSessionCmd)
  return target;
}

int NotifyLoginSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_LOGIN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 4 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 mapid = 5 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional bool ischangescene = 6 [default = false];
    if (has_ischangescene()) {
      total_size += 1 + 1;
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string gatename = 8;
    if (has_gatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatename());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string phone = 9;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional bool ignorepwd = 10;
    if (has_ignorepwd()) {
      total_size += 1 + 1;
    }

    // optional uint32 language = 11;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional bool realauthorized = 12;
    if (has_realauthorized()) {
      total_size += 1 + 1;
    }

    // optional uint32 maxbaselv = 13;
    if (has_maxbaselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLoginSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLoginSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLoginSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLoginSessionCmd::MergeFrom(const NotifyLoginSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_ischangescene()) {
      set_ischangescene(from.ischangescene());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gatename()) {
      set_gatename(from.gatename());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_ignorepwd()) {
      set_ignorepwd(from.ignorepwd());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_realauthorized()) {
      set_realauthorized(from.realauthorized());
    }
    if (from.has_maxbaselv()) {
      set_maxbaselv(from.maxbaselv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLoginSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLoginSessionCmd::CopyFrom(const NotifyLoginSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLoginSessionCmd::IsInitialized() const {

  return true;
}

void NotifyLoginSessionCmd::Swap(NotifyLoginSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(mapid_, other->mapid_);
    std::swap(ischangescene_, other->ischangescene_);
    std::swap(name_, other->name_);
    std::swap(gatename_, other->gatename_);
    std::swap(phone_, other->phone_);
    std::swap(ignorepwd_, other->ignorepwd_);
    std::swap(language_, other->language_);
    std::swap(realauthorized_, other->realauthorized_);
    std::swap(maxbaselv_, other->maxbaselv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLoginSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLoginSessionCmd_descriptor_;
  metadata.reflection = NotifyLoginSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrSetUserDataSessionCmd::kCmdFieldNumber;
const int ErrSetUserDataSessionCmd::kParamFieldNumber;
const int ErrSetUserDataSessionCmd::kIdFieldNumber;
#endif  // !_MSC_VER

ErrSetUserDataSessionCmd::ErrSetUserDataSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ErrSetUserDataSessionCmd)
}

void ErrSetUserDataSessionCmd::InitAsDefaultInstance() {
}

ErrSetUserDataSessionCmd::ErrSetUserDataSessionCmd(const ErrSetUserDataSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ErrSetUserDataSessionCmd)
}

void ErrSetUserDataSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 34;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrSetUserDataSessionCmd::~ErrSetUserDataSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ErrSetUserDataSessionCmd)
  SharedDtor();
}

void ErrSetUserDataSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrSetUserDataSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrSetUserDataSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrSetUserDataSessionCmd_descriptor_;
}

const ErrSetUserDataSessionCmd& ErrSetUserDataSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ErrSetUserDataSessionCmd* ErrSetUserDataSessionCmd::default_instance_ = NULL;

ErrSetUserDataSessionCmd* ErrSetUserDataSessionCmd::New() const {
  return new ErrSetUserDataSessionCmd;
}

void ErrSetUserDataSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 34;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrSetUserDataSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ErrSetUserDataSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ERR_SET_USERDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ErrSetUserDataSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ErrSetUserDataSessionCmd)
  return false;
#undef DO_
}

void ErrSetUserDataSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ErrSetUserDataSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ERR_SET_USERDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ErrSetUserDataSessionCmd)
}

::google::protobuf::uint8* ErrSetUserDataSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ErrSetUserDataSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ERR_SET_USERDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ErrSetUserDataSessionCmd)
  return target;
}

int ErrSetUserDataSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ERR_SET_USERDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrSetUserDataSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrSetUserDataSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrSetUserDataSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrSetUserDataSessionCmd::MergeFrom(const ErrSetUserDataSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrSetUserDataSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrSetUserDataSessionCmd::CopyFrom(const ErrSetUserDataSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrSetUserDataSessionCmd::IsInitialized() const {

  return true;
}

void ErrSetUserDataSessionCmd::Swap(ErrSetUserDataSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrSetUserDataSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrSetUserDataSessionCmd_descriptor_;
  metadata.reflection = ErrSetUserDataSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSceneSingleSessionCmd::kCmdFieldNumber;
const int ChangeSceneSingleSessionCmd::kParamFieldNumber;
const int ChangeSceneSingleSessionCmd::kCharidFieldNumber;
const int ChangeSceneSingleSessionCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

ChangeSceneSingleSessionCmd::ChangeSceneSingleSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeSceneSingleSessionCmd)
}

void ChangeSceneSingleSessionCmd::InitAsDefaultInstance() {
}

ChangeSceneSingleSessionCmd::ChangeSceneSingleSessionCmd(const ChangeSceneSingleSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeSceneSingleSessionCmd)
}

void ChangeSceneSingleSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 35;
  charid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSceneSingleSessionCmd::~ChangeSceneSingleSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeSceneSingleSessionCmd)
  SharedDtor();
}

void ChangeSceneSingleSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeSceneSingleSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSceneSingleSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSceneSingleSessionCmd_descriptor_;
}

const ChangeSceneSingleSessionCmd& ChangeSceneSingleSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ChangeSceneSingleSessionCmd* ChangeSceneSingleSessionCmd::default_instance_ = NULL;

ChangeSceneSingleSessionCmd* ChangeSceneSingleSessionCmd::New() const {
  return new ChangeSceneSingleSessionCmd;
}

void ChangeSceneSingleSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeSceneSingleSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, mapid_);
    cmd_ = 202;
    param_ = 35;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSceneSingleSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeSceneSingleSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGESCENE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeSceneSingleSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeSceneSingleSessionCmd)
  return false;
#undef DO_
}

void ChangeSceneSingleSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeSceneSingleSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGESCENE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeSceneSingleSessionCmd)
}

::google::protobuf::uint8* ChangeSceneSingleSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeSceneSingleSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGESCENE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeSceneSingleSessionCmd)
  return target;
}

int ChangeSceneSingleSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGESCENE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSceneSingleSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSceneSingleSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSceneSingleSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSceneSingleSessionCmd::MergeFrom(const ChangeSceneSingleSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSceneSingleSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSceneSingleSessionCmd::CopyFrom(const ChangeSceneSingleSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSceneSingleSessionCmd::IsInitialized() const {

  return true;
}

void ChangeSceneSingleSessionCmd::Swap(ChangeSceneSingleSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSceneSingleSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSceneSingleSessionCmd_descriptor_;
  metadata.reflection = ChangeSceneSingleSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegMapFailSessionCmd::kCmdFieldNumber;
const int RegMapFailSessionCmd::kParamFieldNumber;
const int RegMapFailSessionCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

RegMapFailSessionCmd::RegMapFailSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegMapFailSessionCmd)
}

void RegMapFailSessionCmd::InitAsDefaultInstance() {
}

RegMapFailSessionCmd::RegMapFailSessionCmd(const RegMapFailSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegMapFailSessionCmd)
}

void RegMapFailSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 36;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegMapFailSessionCmd::~RegMapFailSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RegMapFailSessionCmd)
  SharedDtor();
}

void RegMapFailSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegMapFailSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegMapFailSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegMapFailSessionCmd_descriptor_;
}

const RegMapFailSessionCmd& RegMapFailSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

RegMapFailSessionCmd* RegMapFailSessionCmd::default_instance_ = NULL;

RegMapFailSessionCmd* RegMapFailSessionCmd::New() const {
  return new RegMapFailSessionCmd;
}

void RegMapFailSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 36;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegMapFailSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegMapFailSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPFAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegMapFailSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegMapFailSessionCmd)
  return false;
#undef DO_
}

void RegMapFailSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegMapFailSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPFAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegMapFailSessionCmd)
}

::google::protobuf::uint8* RegMapFailSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegMapFailSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPFAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegMapFailSessionCmd)
  return target;
}

int RegMapFailSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPFAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegMapFailSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegMapFailSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegMapFailSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegMapFailSessionCmd::MergeFrom(const RegMapFailSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegMapFailSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegMapFailSessionCmd::CopyFrom(const RegMapFailSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegMapFailSessionCmd::IsInitialized() const {

  return true;
}

void RegMapFailSessionCmd::Swap(RegMapFailSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegMapFailSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegMapFailSessionCmd_descriptor_;
  metadata.reflection = RegMapFailSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegMapOKSessionCmd::kCmdFieldNumber;
const int RegMapOKSessionCmd::kParamFieldNumber;
const int RegMapOKSessionCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

RegMapOKSessionCmd::RegMapOKSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegMapOKSessionCmd)
}

void RegMapOKSessionCmd::InitAsDefaultInstance() {
}

RegMapOKSessionCmd::RegMapOKSessionCmd(const RegMapOKSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegMapOKSessionCmd)
}

void RegMapOKSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 37;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegMapOKSessionCmd::~RegMapOKSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RegMapOKSessionCmd)
  SharedDtor();
}

void RegMapOKSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegMapOKSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegMapOKSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegMapOKSessionCmd_descriptor_;
}

const RegMapOKSessionCmd& RegMapOKSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

RegMapOKSessionCmd* RegMapOKSessionCmd::default_instance_ = NULL;

RegMapOKSessionCmd* RegMapOKSessionCmd::New() const {
  return new RegMapOKSessionCmd;
}

void RegMapOKSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 37;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegMapOKSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegMapOKSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPOK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegMapOKSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegMapOKSessionCmd)
  return false;
#undef DO_
}

void RegMapOKSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegMapOKSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPOK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegMapOKSessionCmd)
}

::google::protobuf::uint8* RegMapOKSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegMapOKSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPOK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegMapOKSessionCmd)
  return target;
}

int RegMapOKSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REGMAPOK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegMapOKSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegMapOKSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegMapOKSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegMapOKSessionCmd::MergeFrom(const RegMapOKSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegMapOKSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegMapOKSessionCmd::CopyFrom(const RegMapOKSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegMapOKSessionCmd::IsInitialized() const {

  return true;
}

void RegMapOKSessionCmd::Swap(RegMapOKSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegMapOKSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegMapOKSessionCmd_descriptor_;
  metadata.reflection = RegMapOKSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardUserSessionCmd::kCmdFieldNumber;
const int ForwardUserSessionCmd::kParamFieldNumber;
const int ForwardUserSessionCmd::kCharidFieldNumber;
const int ForwardUserSessionCmd::kDataFieldNumber;
#endif  // !_MSC_VER

ForwardUserSessionCmd::ForwardUserSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardUserSessionCmd)
}

void ForwardUserSessionCmd::InitAsDefaultInstance() {
}

ForwardUserSessionCmd::ForwardUserSessionCmd(const ForwardUserSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardUserSessionCmd)
}

void ForwardUserSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 38;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardUserSessionCmd::~ForwardUserSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardUserSessionCmd)
  SharedDtor();
}

void ForwardUserSessionCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardUserSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardUserSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardUserSessionCmd_descriptor_;
}

const ForwardUserSessionCmd& ForwardUserSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ForwardUserSessionCmd* ForwardUserSessionCmd::default_instance_ = NULL;

ForwardUserSessionCmd* ForwardUserSessionCmd::New() const {
  return new ForwardUserSessionCmd;
}

void ForwardUserSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 38;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardUserSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardUserSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardUserSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardUserSessionCmd)
  return false;
#undef DO_
}

void ForwardUserSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardUserSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardUserSessionCmd)
}

::google::protobuf::uint8* ForwardUserSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardUserSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardUserSessionCmd)
  return target;
}

int ForwardUserSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardUserSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardUserSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardUserSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardUserSessionCmd::MergeFrom(const ForwardUserSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardUserSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardUserSessionCmd::CopyFrom(const ForwardUserSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardUserSessionCmd::IsInitialized() const {

  return true;
}

void ForwardUserSessionCmd::Swap(ForwardUserSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardUserSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardUserSessionCmd_descriptor_;
  metadata.reflection = ForwardUserSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardUserSceneSessionCmd::kCmdFieldNumber;
const int ForwardUserSceneSessionCmd::kParamFieldNumber;
const int ForwardUserSceneSessionCmd::kCharidFieldNumber;
const int ForwardUserSceneSessionCmd::kDataFieldNumber;
#endif  // !_MSC_VER

ForwardUserSceneSessionCmd::ForwardUserSceneSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardUserSceneSessionCmd)
}

void ForwardUserSceneSessionCmd::InitAsDefaultInstance() {
}

ForwardUserSceneSessionCmd::ForwardUserSceneSessionCmd(const ForwardUserSceneSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardUserSceneSessionCmd)
}

void ForwardUserSceneSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 39;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardUserSceneSessionCmd::~ForwardUserSceneSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardUserSceneSessionCmd)
  SharedDtor();
}

void ForwardUserSceneSessionCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardUserSceneSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardUserSceneSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardUserSceneSessionCmd_descriptor_;
}

const ForwardUserSceneSessionCmd& ForwardUserSceneSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ForwardUserSceneSessionCmd* ForwardUserSceneSessionCmd::default_instance_ = NULL;

ForwardUserSceneSessionCmd* ForwardUserSceneSessionCmd::New() const {
  return new ForwardUserSceneSessionCmd;
}

void ForwardUserSceneSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 39;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardUserSceneSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardUserSceneSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardUserSceneSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardUserSceneSessionCmd)
  return false;
#undef DO_
}

void ForwardUserSceneSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardUserSceneSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardUserSceneSessionCmd)
}

::google::protobuf::uint8* ForwardUserSceneSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardUserSceneSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardUserSceneSessionCmd)
  return target;
}

int ForwardUserSceneSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardUserSceneSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardUserSceneSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardUserSceneSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardUserSceneSessionCmd::MergeFrom(const ForwardUserSceneSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardUserSceneSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardUserSceneSessionCmd::CopyFrom(const ForwardUserSceneSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardUserSceneSessionCmd::IsInitialized() const {

  return true;
}

void ForwardUserSceneSessionCmd::Swap(ForwardUserSceneSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardUserSceneSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardUserSceneSessionCmd_descriptor_;
  metadata.reflection = ForwardUserSceneSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardUserSessionSessionCmd::kCmdFieldNumber;
const int ForwardUserSessionSessionCmd::kParamFieldNumber;
const int ForwardUserSessionSessionCmd::kCharidFieldNumber;
const int ForwardUserSessionSessionCmd::kDataFieldNumber;
#endif  // !_MSC_VER

ForwardUserSessionSessionCmd::ForwardUserSessionSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardUserSessionSessionCmd)
}

void ForwardUserSessionSessionCmd::InitAsDefaultInstance() {
}

ForwardUserSessionSessionCmd::ForwardUserSessionSessionCmd(const ForwardUserSessionSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardUserSessionSessionCmd)
}

void ForwardUserSessionSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 40;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardUserSessionSessionCmd::~ForwardUserSessionSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardUserSessionSessionCmd)
  SharedDtor();
}

void ForwardUserSessionSessionCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardUserSessionSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardUserSessionSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardUserSessionSessionCmd_descriptor_;
}

const ForwardUserSessionSessionCmd& ForwardUserSessionSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ForwardUserSessionSessionCmd* ForwardUserSessionSessionCmd::default_instance_ = NULL;

ForwardUserSessionSessionCmd* ForwardUserSessionSessionCmd::New() const {
  return new ForwardUserSessionSessionCmd;
}

void ForwardUserSessionSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 40;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardUserSessionSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardUserSessionSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardUserSessionSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardUserSessionSessionCmd)
  return false;
#undef DO_
}

void ForwardUserSessionSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardUserSessionSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardUserSessionSessionCmd)
}

::google::protobuf::uint8* ForwardUserSessionSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardUserSessionSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardUserSessionSessionCmd)
  return target;
}

int ForwardUserSessionSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardUserSessionSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardUserSessionSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardUserSessionSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardUserSessionSessionCmd::MergeFrom(const ForwardUserSessionSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardUserSessionSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardUserSessionSessionCmd::CopyFrom(const ForwardUserSessionSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardUserSessionSessionCmd::IsInitialized() const {

  return true;
}

void ForwardUserSessionSessionCmd::Swap(ForwardUserSessionSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardUserSessionSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardUserSessionSessionCmd_descriptor_;
  metadata.reflection = ForwardUserSessionSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardUserSceneSvrSessionCmd::kCmdFieldNumber;
const int ForwardUserSceneSvrSessionCmd::kParamFieldNumber;
const int ForwardUserSceneSvrSessionCmd::kCharidFieldNumber;
const int ForwardUserSceneSvrSessionCmd::kDataFieldNumber;
#endif  // !_MSC_VER

ForwardUserSceneSvrSessionCmd::ForwardUserSceneSvrSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardUserSceneSvrSessionCmd)
}

void ForwardUserSceneSvrSessionCmd::InitAsDefaultInstance() {
}

ForwardUserSceneSvrSessionCmd::ForwardUserSceneSvrSessionCmd(const ForwardUserSceneSvrSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardUserSceneSvrSessionCmd)
}

void ForwardUserSceneSvrSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 41;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardUserSceneSvrSessionCmd::~ForwardUserSceneSvrSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardUserSceneSvrSessionCmd)
  SharedDtor();
}

void ForwardUserSceneSvrSessionCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardUserSceneSvrSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardUserSceneSvrSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardUserSceneSvrSessionCmd_descriptor_;
}

const ForwardUserSceneSvrSessionCmd& ForwardUserSceneSvrSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ForwardUserSceneSvrSessionCmd* ForwardUserSceneSvrSessionCmd::default_instance_ = NULL;

ForwardUserSceneSvrSessionCmd* ForwardUserSceneSvrSessionCmd::New() const {
  return new ForwardUserSceneSvrSessionCmd;
}

void ForwardUserSceneSvrSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 41;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardUserSceneSvrSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardUserSceneSvrSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENESVR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardUserSceneSvrSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardUserSceneSvrSessionCmd)
  return false;
#undef DO_
}

void ForwardUserSceneSvrSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardUserSceneSvrSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENESVR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardUserSceneSvrSessionCmd)
}

::google::protobuf::uint8* ForwardUserSceneSvrSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardUserSceneSvrSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENESVR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardUserSceneSvrSessionCmd)
  return target;
}

int ForwardUserSceneSvrSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARDUSERSCENESVR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardUserSceneSvrSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardUserSceneSvrSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardUserSceneSvrSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardUserSceneSvrSessionCmd::MergeFrom(const ForwardUserSceneSvrSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardUserSceneSvrSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardUserSceneSvrSessionCmd::CopyFrom(const ForwardUserSceneSvrSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardUserSceneSvrSessionCmd::IsInitialized() const {

  return true;
}

void ForwardUserSceneSvrSessionCmd::Swap(ForwardUserSceneSvrSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardUserSceneSvrSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardUserSceneSvrSessionCmd_descriptor_;
  metadata.reflection = ForwardUserSceneSvrSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGuildTerritorySessionCmd::kCmdFieldNumber;
const int EnterGuildTerritorySessionCmd::kParamFieldNumber;
const int EnterGuildTerritorySessionCmd::kCharidFieldNumber;
const int EnterGuildTerritorySessionCmd::kTargetidFieldNumber;
#endif  // !_MSC_VER

EnterGuildTerritorySessionCmd::EnterGuildTerritorySessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterGuildTerritorySessionCmd)
}

void EnterGuildTerritorySessionCmd::InitAsDefaultInstance() {
}

EnterGuildTerritorySessionCmd::EnterGuildTerritorySessionCmd(const EnterGuildTerritorySessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterGuildTerritorySessionCmd)
}

void EnterGuildTerritorySessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 50;
  charid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGuildTerritorySessionCmd::~EnterGuildTerritorySessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterGuildTerritorySessionCmd)
  SharedDtor();
}

void EnterGuildTerritorySessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGuildTerritorySessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGuildTerritorySessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGuildTerritorySessionCmd_descriptor_;
}

const EnterGuildTerritorySessionCmd& EnterGuildTerritorySessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

EnterGuildTerritorySessionCmd* EnterGuildTerritorySessionCmd::default_instance_ = NULL;

EnterGuildTerritorySessionCmd* EnterGuildTerritorySessionCmd::New() const {
  return new EnterGuildTerritorySessionCmd;
}

void EnterGuildTerritorySessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterGuildTerritorySessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, targetid_);
    cmd_ = 202;
    param_ = 50;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGuildTerritorySessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterGuildTerritorySessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ENTERGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterGuildTerritorySessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterGuildTerritorySessionCmd)
  return false;
#undef DO_
}

void EnterGuildTerritorySessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterGuildTerritorySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ENTERGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterGuildTerritorySessionCmd)
}

::google::protobuf::uint8* EnterGuildTerritorySessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterGuildTerritorySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ENTERGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterGuildTerritorySessionCmd)
  return target;
}

int EnterGuildTerritorySessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ENTERGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 targetid = 4 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGuildTerritorySessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGuildTerritorySessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGuildTerritorySessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGuildTerritorySessionCmd::MergeFrom(const EnterGuildTerritorySessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGuildTerritorySessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGuildTerritorySessionCmd::CopyFrom(const EnterGuildTerritorySessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGuildTerritorySessionCmd::IsInitialized() const {

  return true;
}

void EnterGuildTerritorySessionCmd::Swap(EnterGuildTerritorySessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGuildTerritorySessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGuildTerritorySessionCmd_descriptor_;
  metadata.reflection = EnterGuildTerritorySessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncDojoSessionCmd::kCmdFieldNumber;
const int SyncDojoSessionCmd::kParamFieldNumber;
const int SyncDojoSessionCmd::kTeamguidFieldNumber;
const int SyncDojoSessionCmd::kDojoidFieldNumber;
const int SyncDojoSessionCmd::kSponsoridFieldNumber;
const int SyncDojoSessionCmd::kIsopenFieldNumber;
const int SyncDojoSessionCmd::kGuildidFieldNumber;
const int SyncDojoSessionCmd::kDelFieldNumber;
#endif  // !_MSC_VER

SyncDojoSessionCmd::SyncDojoSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncDojoSessionCmd)
}

void SyncDojoSessionCmd::InitAsDefaultInstance() {
}

SyncDojoSessionCmd::SyncDojoSessionCmd(const SyncDojoSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncDojoSessionCmd)
}

void SyncDojoSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 52;
  teamguid_ = GOOGLE_ULONGLONG(0);
  dojoid_ = 0u;
  sponsorid_ = GOOGLE_ULONGLONG(0);
  isopen_ = false;
  guildid_ = GOOGLE_ULONGLONG(0);
  del_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncDojoSessionCmd::~SyncDojoSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncDojoSessionCmd)
  SharedDtor();
}

void SyncDojoSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncDojoSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncDojoSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncDojoSessionCmd_descriptor_;
}

const SyncDojoSessionCmd& SyncDojoSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SyncDojoSessionCmd* SyncDojoSessionCmd::default_instance_ = NULL;

SyncDojoSessionCmd* SyncDojoSessionCmd::New() const {
  return new SyncDojoSessionCmd;
}

void SyncDojoSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncDojoSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(teamguid_, guildid_);
    cmd_ = 202;
    param_ = 52;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncDojoSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncDojoSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_DOJO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamguid;
        break;
      }

      // optional uint64 teamguid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamguid_)));
          set_has_teamguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 4;
      case 4: {
        if (tag == 32) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sponsorid;
        break;
      }

      // optional uint64 sponsorid = 5;
      case 5: {
        if (tag == 40) {
         parse_sponsorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsorid_)));
          set_has_sponsorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isopen;
        break;
      }

      // optional bool isopen = 6;
      case 6: {
        if (tag == 48) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 7;
      case 7: {
        if (tag == 56) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_del;
        break;
      }

      // optional bool del = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &del_)));
          set_has_del();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncDojoSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncDojoSessionCmd)
  return false;
#undef DO_
}

void SyncDojoSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncDojoSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_DOJO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamguid = 3;
  if (has_teamguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamguid(), output);
  }

  // optional uint32 dojoid = 4;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dojoid(), output);
  }

  // optional uint64 sponsorid = 5;
  if (has_sponsorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sponsorid(), output);
  }

  // optional bool isopen = 6;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isopen(), output);
  }

  // optional uint64 guildid = 7;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->guildid(), output);
  }

  // optional bool del = 8 [default = false];
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncDojoSessionCmd)
}

::google::protobuf::uint8* SyncDojoSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncDojoSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_DOJO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamguid = 3;
  if (has_teamguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamguid(), target);
  }

  // optional uint32 dojoid = 4;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dojoid(), target);
  }

  // optional uint64 sponsorid = 5;
  if (has_sponsorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sponsorid(), target);
  }

  // optional bool isopen = 6;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isopen(), target);
  }

  // optional uint64 guildid = 7;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->guildid(), target);
  }

  // optional bool del = 8 [default = false];
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncDojoSessionCmd)
  return target;
}

int SyncDojoSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_DOJO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamguid = 3;
    if (has_teamguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamguid());
    }

    // optional uint32 dojoid = 4;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional uint64 sponsorid = 5;
    if (has_sponsorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsorid());
    }

    // optional bool isopen = 6;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // optional uint64 guildid = 7;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional bool del = 8 [default = false];
    if (has_del()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncDojoSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncDojoSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncDojoSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncDojoSessionCmd::MergeFrom(const SyncDojoSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamguid()) {
      set_teamguid(from.teamguid());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_sponsorid()) {
      set_sponsorid(from.sponsorid());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_del()) {
      set_del(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncDojoSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncDojoSessionCmd::CopyFrom(const SyncDojoSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDojoSessionCmd::IsInitialized() const {

  return true;
}

void SyncDojoSessionCmd::Swap(SyncDojoSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamguid_, other->teamguid_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(sponsorid_, other->sponsorid_);
    std::swap(isopen_, other->isopen_);
    std::swap(guildid_, other->guildid_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncDojoSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncDojoSessionCmd_descriptor_;
  metadata.reflection = SyncDojoSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeSessionCmd::kCmdFieldNumber;
const int ChargeSessionCmd::kParamFieldNumber;
const int ChargeSessionCmd::kCharidFieldNumber;
const int ChargeSessionCmd::kChargeFieldNumber;
const int ChargeSessionCmd::kItemidFieldNumber;
const int ChargeSessionCmd::kCountFieldNumber;
const int ChargeSessionCmd::kSourceFieldNumber;
const int ChargeSessionCmd::kOrderidFieldNumber;
const int ChargeSessionCmd::kDataidFieldNumber;
#endif  // !_MSC_VER

ChargeSessionCmd::ChargeSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChargeSessionCmd)
}

void ChargeSessionCmd::InitAsDefaultInstance() {
}

ChargeSessionCmd::ChargeSessionCmd(const ChargeSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChargeSessionCmd)
}

void ChargeSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 54;
  charid_ = GOOGLE_ULONGLONG(0);
  charge_ = 0;
  itemid_ = 0u;
  count_ = 0u;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeSessionCmd::~ChargeSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChargeSessionCmd)
  SharedDtor();
}

void ChargeSessionCmd::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void ChargeSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeSessionCmd_descriptor_;
}

const ChargeSessionCmd& ChargeSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ChargeSessionCmd* ChargeSessionCmd::default_instance_ = NULL;

ChargeSessionCmd* ChargeSessionCmd::New() const {
  return new ChargeSessionCmd;
}

void ChargeSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, itemid_);
    cmd_ = 202;
    param_ = 54;
    count_ = 0u;
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderid_->clear();
      }
    }
  }
  dataid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChargeSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHARGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_charge;
        break;
      }

      // optional float charge = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_source;
        break;
      }

      // optional string source = 7;
      case 7: {
        if (tag == 58) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_orderid;
        break;
      }

      // optional string orderid = 8;
      case 8: {
        if (tag == 66) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dataid;
        break;
      }

      // optional uint32 dataid = 9;
      case 9: {
        if (tag == 72) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChargeSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChargeSessionCmd)
  return false;
#undef DO_
}

void ChargeSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChargeSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHARGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional float charge = 4 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->charge(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional string source = 7;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source(), output);
  }

  // optional string orderid = 8;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->orderid(), output);
  }

  // optional uint32 dataid = 9;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChargeSessionCmd)
}

::google::protobuf::uint8* ChargeSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChargeSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHARGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional float charge = 4 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->charge(), target);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional string source = 7;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source(), target);
  }

  // optional string orderid = 8;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->orderid(), target);
  }

  // optional uint32 dataid = 9;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChargeSessionCmd)
  return target;
}

int ChargeSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHARGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional float charge = 4 [default = 0];
    if (has_charge()) {
      total_size += 1 + 4;
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string source = 7;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string orderid = 8;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dataid = 9;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeSessionCmd::MergeFrom(const ChargeSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeSessionCmd::CopyFrom(const ChargeSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeSessionCmd::IsInitialized() const {

  return true;
}

void ChargeSessionCmd::Swap(ChargeSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(charge_, other->charge_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(source_, other->source_);
    std::swap(orderid_, other->orderid_);
    std::swap(dataid_, other->dataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeSessionCmd_descriptor_;
  metadata.reflection = ChargeSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GagSessionCmd::kCmdFieldNumber;
const int GagSessionCmd::kParamFieldNumber;
const int GagSessionCmd::kCharidFieldNumber;
const int GagSessionCmd::kTimeFieldNumber;
const int GagSessionCmd::kReasonFieldNumber;
#endif  // !_MSC_VER

GagSessionCmd::GagSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GagSessionCmd)
}

void GagSessionCmd::InitAsDefaultInstance() {
}

GagSessionCmd::GagSessionCmd(const GagSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GagSessionCmd)
}

void GagSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 55;
  charid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GagSessionCmd::~GagSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GagSessionCmd)
  SharedDtor();
}

void GagSessionCmd::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void GagSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GagSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GagSessionCmd_descriptor_;
}

const GagSessionCmd& GagSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GagSessionCmd* GagSessionCmd::default_instance_ = NULL;

GagSessionCmd* GagSessionCmd::New() const {
  return new GagSessionCmd;
}

void GagSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 202;
    param_ = 55;
    charid_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GagSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GagSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_GAG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GagSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GagSessionCmd)
  return false;
#undef DO_
}

void GagSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GagSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_GAG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GagSessionCmd)
}

::google::protobuf::uint8* GagSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GagSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_GAG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GagSessionCmd)
  return target;
}

int GagSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_GAG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GagSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GagSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GagSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GagSessionCmd::MergeFrom(const GagSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GagSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GagSessionCmd::CopyFrom(const GagSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GagSessionCmd::IsInitialized() const {

  return true;
}

void GagSessionCmd::Swap(GagSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(time_, other->time_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GagSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GagSessionCmd_descriptor_;
  metadata.reflection = GagSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LockSessionCmd::kCmdFieldNumber;
const int LockSessionCmd::kParamFieldNumber;
const int LockSessionCmd::kCharidFieldNumber;
const int LockSessionCmd::kTimeFieldNumber;
const int LockSessionCmd::kReasonFieldNumber;
const int LockSessionCmd::kAccountFieldNumber;
#endif  // !_MSC_VER

LockSessionCmd::LockSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LockSessionCmd)
}

void LockSessionCmd::InitAsDefaultInstance() {
}

LockSessionCmd::LockSessionCmd(const LockSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LockSessionCmd)
}

void LockSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 56;
  charid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LockSessionCmd::~LockSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LockSessionCmd)
  SharedDtor();
}

void LockSessionCmd::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void LockSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockSessionCmd_descriptor_;
}

const LockSessionCmd& LockSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

LockSessionCmd* LockSessionCmd::default_instance_ = NULL;

LockSessionCmd* LockSessionCmd::New() const {
  return new LockSessionCmd;
}

void LockSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LockSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(time_, account_);
    cmd_ = 202;
    param_ = 56;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LockSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LockSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_LOCK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_account;
        break;
      }

      // optional bool account = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LockSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LockSessionCmd)
  return false;
#undef DO_
}

void LockSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LockSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_LOCK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  // optional bool account = 6 [default = false];
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LockSessionCmd)
}

::google::protobuf::uint8* LockSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LockSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_LOCK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // optional bool account = 6 [default = false];
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LockSessionCmd)
  return target;
}

int LockSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GM_LOCK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool account = 6 [default = false];
    if (has_account()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LockSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LockSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LockSessionCmd::MergeFrom(const LockSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LockSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockSessionCmd::CopyFrom(const LockSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockSessionCmd::IsInitialized() const {

  return true;
}

void LockSessionCmd::Swap(LockSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(time_, other->time_);
    std::swap(reason_, other->reason_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LockSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockSessionCmd_descriptor_;
  metadata.reflection = LockSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IteamImageSessionCmd::kCmdFieldNumber;
const int IteamImageSessionCmd::kParamFieldNumber;
const int IteamImageSessionCmd::kCharidFieldNumber;
const int IteamImageSessionCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

IteamImageSessionCmd::IteamImageSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.IteamImageSessionCmd)
}

void IteamImageSessionCmd::InitAsDefaultInstance() {
}

IteamImageSessionCmd::IteamImageSessionCmd(const IteamImageSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.IteamImageSessionCmd)
}

void IteamImageSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 59;
  charid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IteamImageSessionCmd::~IteamImageSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.IteamImageSessionCmd)
  SharedDtor();
}

void IteamImageSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IteamImageSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IteamImageSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IteamImageSessionCmd_descriptor_;
}

const IteamImageSessionCmd& IteamImageSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

IteamImageSessionCmd* IteamImageSessionCmd::default_instance_ = NULL;

IteamImageSessionCmd* IteamImageSessionCmd::New() const {
  return new IteamImageSessionCmd;
}

void IteamImageSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IteamImageSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, teamid_);
    cmd_ = 202;
    param_ = 59;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IteamImageSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.IteamImageSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ITEMIMAGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.IteamImageSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.IteamImageSessionCmd)
  return false;
#undef DO_
}

void IteamImageSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.IteamImageSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ITEMIMAGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.IteamImageSessionCmd)
}

::google::protobuf::uint8* IteamImageSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.IteamImageSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ITEMIMAGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.IteamImageSessionCmd)
  return target;
}

int IteamImageSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ITEMIMAGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IteamImageSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IteamImageSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IteamImageSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IteamImageSessionCmd::MergeFrom(const IteamImageSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IteamImageSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IteamImageSessionCmd::CopyFrom(const IteamImageSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IteamImageSessionCmd::IsInitialized() const {

  return true;
}

void IteamImageSessionCmd::Swap(IteamImageSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IteamImageSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IteamImageSessionCmd_descriptor_;
  metadata.reflection = IteamImageSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FerrisInviteSessionCmd::kCmdFieldNumber;
const int FerrisInviteSessionCmd::kParamFieldNumber;
const int FerrisInviteSessionCmd::kCharidFieldNumber;
const int FerrisInviteSessionCmd::kTargetidFieldNumber;
const int FerrisInviteSessionCmd::kMsgidFieldNumber;
const int FerrisInviteSessionCmd::kIdFieldNumber;
#endif  // !_MSC_VER

FerrisInviteSessionCmd::FerrisInviteSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FerrisInviteSessionCmd)
}

void FerrisInviteSessionCmd::InitAsDefaultInstance() {
}

FerrisInviteSessionCmd::FerrisInviteSessionCmd(const FerrisInviteSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FerrisInviteSessionCmd)
}

void FerrisInviteSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 60;
  charid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0u;
  id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FerrisInviteSessionCmd::~FerrisInviteSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FerrisInviteSessionCmd)
  SharedDtor();
}

void FerrisInviteSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FerrisInviteSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FerrisInviteSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FerrisInviteSessionCmd_descriptor_;
}

const FerrisInviteSessionCmd& FerrisInviteSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

FerrisInviteSessionCmd* FerrisInviteSessionCmd::default_instance_ = NULL;

FerrisInviteSessionCmd* FerrisInviteSessionCmd::New() const {
  return new FerrisInviteSessionCmd;
}

void FerrisInviteSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FerrisInviteSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, msgid_);
    cmd_ = 202;
    param_ = 60;
    id_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FerrisInviteSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FerrisInviteSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional uint32 id = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FerrisInviteSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FerrisInviteSessionCmd)
  return false;
#undef DO_
}

void FerrisInviteSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FerrisInviteSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msgid(), output);
  }

  // optional uint32 id = 6 [default = 1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FerrisInviteSessionCmd)
}

::google::protobuf::uint8* FerrisInviteSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FerrisInviteSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msgid(), target);
  }

  // optional uint32 id = 6 [default = 1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FerrisInviteSessionCmd)
  return target;
}

int FerrisInviteSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 targetid = 4 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint32 msgid = 5 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional uint32 id = 6 [default = 1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FerrisInviteSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FerrisInviteSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FerrisInviteSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FerrisInviteSessionCmd::MergeFrom(const FerrisInviteSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FerrisInviteSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FerrisInviteSessionCmd::CopyFrom(const FerrisInviteSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FerrisInviteSessionCmd::IsInitialized() const {

  return true;
}

void FerrisInviteSessionCmd::Swap(FerrisInviteSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(targetid_, other->targetid_);
    std::swap(msgid_, other->msgid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FerrisInviteSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FerrisInviteSessionCmd_descriptor_;
  metadata.reflection = FerrisInviteSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterFerrisReadySessionCmd::kCmdFieldNumber;
const int EnterFerrisReadySessionCmd::kParamFieldNumber;
const int EnterFerrisReadySessionCmd::kCharidFieldNumber;
const int EnterFerrisReadySessionCmd::kMsgidFieldNumber;
const int EnterFerrisReadySessionCmd::kIdFieldNumber;
#endif  // !_MSC_VER

EnterFerrisReadySessionCmd::EnterFerrisReadySessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterFerrisReadySessionCmd)
}

void EnterFerrisReadySessionCmd::InitAsDefaultInstance() {
}

EnterFerrisReadySessionCmd::EnterFerrisReadySessionCmd(const EnterFerrisReadySessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterFerrisReadySessionCmd)
}

void EnterFerrisReadySessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 61;
  charid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0u;
  id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterFerrisReadySessionCmd::~EnterFerrisReadySessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterFerrisReadySessionCmd)
  SharedDtor();
}

void EnterFerrisReadySessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterFerrisReadySessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterFerrisReadySessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterFerrisReadySessionCmd_descriptor_;
}

const EnterFerrisReadySessionCmd& EnterFerrisReadySessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

EnterFerrisReadySessionCmd* EnterFerrisReadySessionCmd::default_instance_ = NULL;

EnterFerrisReadySessionCmd* EnterFerrisReadySessionCmd::New() const {
  return new EnterFerrisReadySessionCmd;
}

void EnterFerrisReadySessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterFerrisReadySessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, msgid_);
    cmd_ = 202;
    param_ = 61;
    id_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterFerrisReadySessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterFerrisReadySessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_READYENTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint32 id = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterFerrisReadySessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterFerrisReadySessionCmd)
  return false;
#undef DO_
}

void EnterFerrisReadySessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterFerrisReadySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_READYENTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 msgid = 4 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgid(), output);
  }

  // optional uint32 id = 5 [default = 1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterFerrisReadySessionCmd)
}

::google::protobuf::uint8* EnterFerrisReadySessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterFerrisReadySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_READYENTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 msgid = 4 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgid(), target);
  }

  // optional uint32 id = 5 [default = 1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterFerrisReadySessionCmd)
  return target;
}

int EnterFerrisReadySessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FERRIS_READYENTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 msgid = 4 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional uint32 id = 5 [default = 1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterFerrisReadySessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterFerrisReadySessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterFerrisReadySessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterFerrisReadySessionCmd::MergeFrom(const EnterFerrisReadySessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterFerrisReadySessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterFerrisReadySessionCmd::CopyFrom(const EnterFerrisReadySessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterFerrisReadySessionCmd::IsInitialized() const {

  return true;
}

void EnterFerrisReadySessionCmd::Swap(EnterFerrisReadySessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(msgid_, other->msgid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterFerrisReadySessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterFerrisReadySessionCmd_descriptor_;
  metadata.reflection = EnterFerrisReadySessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityTestAndSetSessionCmd::kCmdFieldNumber;
const int ActivityTestAndSetSessionCmd::kParamFieldNumber;
const int ActivityTestAndSetSessionCmd::kIdFieldNumber;
const int ActivityTestAndSetSessionCmd::kUidFieldNumber;
const int ActivityTestAndSetSessionCmd::kMapidFieldNumber;
const int ActivityTestAndSetSessionCmd::kStarttimeFieldNumber;
const int ActivityTestAndSetSessionCmd::kCharidFieldNumber;
const int ActivityTestAndSetSessionCmd::kRetFieldNumber;
#endif  // !_MSC_VER

ActivityTestAndSetSessionCmd::ActivityTestAndSetSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityTestAndSetSessionCmd)
}

void ActivityTestAndSetSessionCmd::InitAsDefaultInstance() {
}

ActivityTestAndSetSessionCmd::ActivityTestAndSetSessionCmd(const ActivityTestAndSetSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityTestAndSetSessionCmd)
}

void ActivityTestAndSetSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 62;
  id_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  starttime_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityTestAndSetSessionCmd::~ActivityTestAndSetSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityTestAndSetSessionCmd)
  SharedDtor();
}

void ActivityTestAndSetSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityTestAndSetSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityTestAndSetSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityTestAndSetSessionCmd_descriptor_;
}

const ActivityTestAndSetSessionCmd& ActivityTestAndSetSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ActivityTestAndSetSessionCmd* ActivityTestAndSetSessionCmd::default_instance_ = NULL;

ActivityTestAndSetSessionCmd* ActivityTestAndSetSessionCmd::New() const {
  return new ActivityTestAndSetSessionCmd;
}

void ActivityTestAndSetSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityTestAndSetSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, ret_);
    cmd_ = 202;
    param_ = 62;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityTestAndSetSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityTestAndSetSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_TESTANDSET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 7;
      case 7: {
        if (tag == 56) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 8;
      case 8: {
        if (tag == 64) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityTestAndSetSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityTestAndSetSessionCmd)
  return false;
#undef DO_
}

void ActivityTestAndSetSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityTestAndSetSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_TESTANDSET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint64 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uid(), output);
  }

  // optional uint32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starttime(), output);
  }

  // optional uint64 charid = 7;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->charid(), output);
  }

  // optional uint32 ret = 8;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityTestAndSetSessionCmd)
}

::google::protobuf::uint8* ActivityTestAndSetSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityTestAndSetSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_TESTANDSET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint64 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uid(), target);
  }

  // optional uint32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starttime(), target);
  }

  // optional uint64 charid = 7;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->charid(), target);
  }

  // optional uint32 ret = 8;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityTestAndSetSessionCmd)
  return target;
}

int ActivityTestAndSetSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_TESTANDSET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint64 charid = 7;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 ret = 8;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityTestAndSetSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityTestAndSetSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityTestAndSetSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityTestAndSetSessionCmd::MergeFrom(const ActivityTestAndSetSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityTestAndSetSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityTestAndSetSessionCmd::CopyFrom(const ActivityTestAndSetSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityTestAndSetSessionCmd::IsInitialized() const {

  return true;
}

void ActivityTestAndSetSessionCmd::Swap(ActivityTestAndSetSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(uid_, other->uid_);
    std::swap(mapid_, other->mapid_);
    std::swap(starttime_, other->starttime_);
    std::swap(charid_, other->charid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityTestAndSetSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityTestAndSetSessionCmd_descriptor_;
  metadata.reflection = ActivityTestAndSetSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityStatusSessionCmd::kCmdFieldNumber;
const int ActivityStatusSessionCmd::kParamFieldNumber;
const int ActivityStatusSessionCmd::kIdFieldNumber;
const int ActivityStatusSessionCmd::kMapidFieldNumber;
const int ActivityStatusSessionCmd::kStartFieldNumber;
#endif  // !_MSC_VER

ActivityStatusSessionCmd::ActivityStatusSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityStatusSessionCmd)
}

void ActivityStatusSessionCmd::InitAsDefaultInstance() {
}

ActivityStatusSessionCmd::ActivityStatusSessionCmd(const ActivityStatusSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityStatusSessionCmd)
}

void ActivityStatusSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 63;
  id_ = 0u;
  mapid_ = 0u;
  start_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityStatusSessionCmd::~ActivityStatusSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityStatusSessionCmd)
  SharedDtor();
}

void ActivityStatusSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityStatusSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityStatusSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityStatusSessionCmd_descriptor_;
}

const ActivityStatusSessionCmd& ActivityStatusSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ActivityStatusSessionCmd* ActivityStatusSessionCmd::default_instance_ = NULL;

ActivityStatusSessionCmd* ActivityStatusSessionCmd::New() const {
  return new ActivityStatusSessionCmd;
}

void ActivityStatusSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityStatusSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, start_);
    cmd_ = 202;
    param_ = 63;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityStatusSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityStatusSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }

      // optional bool start = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityStatusSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityStatusSessionCmd)
  return false;
#undef DO_
}

void ActivityStatusSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityStatusSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional bool start = 5 [default = false];
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityStatusSessionCmd)
}

::google::protobuf::uint8* ActivityStatusSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityStatusSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional bool start = 5 [default = false];
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityStatusSessionCmd)
  return target;
}

int ActivityStatusSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional bool start = 5 [default = false];
    if (has_start()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityStatusSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityStatusSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityStatusSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityStatusSessionCmd::MergeFrom(const ActivityStatusSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityStatusSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityStatusSessionCmd::CopyFrom(const ActivityStatusSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStatusSessionCmd::IsInitialized() const {

  return true;
}

void ActivityStatusSessionCmd::Swap(ActivityStatusSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(mapid_, other->mapid_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityStatusSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityStatusSessionCmd_descriptor_;
  metadata.reflection = ActivityStatusSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeTeamSessionCmd::kCmdFieldNumber;
const int ChangeTeamSessionCmd::kParamFieldNumber;
const int ChangeTeamSessionCmd::kJoinFieldNumber;
const int ChangeTeamSessionCmd::kUseridFieldNumber;
const int ChangeTeamSessionCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

ChangeTeamSessionCmd::ChangeTeamSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeTeamSessionCmd)
}

void ChangeTeamSessionCmd::InitAsDefaultInstance() {
}

ChangeTeamSessionCmd::ChangeTeamSessionCmd(const ChangeTeamSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeTeamSessionCmd)
}

void ChangeTeamSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 64;
  join_ = true;
  userid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeTeamSessionCmd::~ChangeTeamSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeTeamSessionCmd)
  SharedDtor();
}

void ChangeTeamSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeTeamSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTeamSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeTeamSessionCmd_descriptor_;
}

const ChangeTeamSessionCmd& ChangeTeamSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ChangeTeamSessionCmd* ChangeTeamSessionCmd::default_instance_ = NULL;

ChangeTeamSessionCmd* ChangeTeamSessionCmd::New() const {
  return new ChangeTeamSessionCmd;
}

void ChangeTeamSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeTeamSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(userid_, teamid_);
    cmd_ = 202;
    param_ = 64;
    join_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeTeamSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeTeamSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGE_TEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_join;
        break;
      }

      // optional bool join = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &join_)));
          set_has_join();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeTeamSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeTeamSessionCmd)
  return false;
#undef DO_
}

void ChangeTeamSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeTeamSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGE_TEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool join = 3 [default = true];
  if (has_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->join(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  // optional uint64 teamid = 5 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeTeamSessionCmd)
}

::google::protobuf::uint8* ChangeTeamSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeTeamSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGE_TEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool join = 3 [default = true];
  if (has_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->join(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  // optional uint64 teamid = 5 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeTeamSessionCmd)
  return target;
}

int ChangeTeamSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_CHANGE_TEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool join = 3 [default = true];
    if (has_join()) {
      total_size += 1 + 1;
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint64 teamid = 5 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTeamSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeTeamSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeTeamSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeTeamSessionCmd::MergeFrom(const ChangeTeamSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_join()) {
      set_join(from.join());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeTeamSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTeamSessionCmd::CopyFrom(const ChangeTeamSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTeamSessionCmd::IsInitialized() const {

  return true;
}

void ChangeTeamSessionCmd::Swap(ChangeTeamSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(join_, other->join_);
    std::swap(userid_, other->userid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeTeamSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeTeamSessionCmd_descriptor_;
  metadata.reflection = ChangeTeamSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardRegionSessionCmd::kCmdFieldNumber;
const int ForwardRegionSessionCmd::kParamFieldNumber;
const int ForwardRegionSessionCmd::kRegionTypeFieldNumber;
const int ForwardRegionSessionCmd::kDataFieldNumber;
const int ForwardRegionSessionCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardRegionSessionCmd::ForwardRegionSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardRegionSessionCmd)
}

void ForwardRegionSessionCmd::InitAsDefaultInstance() {
}

ForwardRegionSessionCmd::ForwardRegionSessionCmd(const ForwardRegionSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardRegionSessionCmd)
}

void ForwardRegionSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 65;
  region_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardRegionSessionCmd::~ForwardRegionSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardRegionSessionCmd)
  SharedDtor();
}

void ForwardRegionSessionCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardRegionSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardRegionSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardRegionSessionCmd_descriptor_;
}

const ForwardRegionSessionCmd& ForwardRegionSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ForwardRegionSessionCmd* ForwardRegionSessionCmd::default_instance_ = NULL;

ForwardRegionSessionCmd* ForwardRegionSessionCmd::New() const {
  return new ForwardRegionSessionCmd;
}

void ForwardRegionSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForwardRegionSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(region_type_, len_);
    cmd_ = 202;
    param_ = 65;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardRegionSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardRegionSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARD_REGION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_region_type;
        break;
      }

      // optional uint32 region_type = 3;
      case 3: {
        if (tag == 24) {
         parse_region_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_type_)));
          set_has_region_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardRegionSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardRegionSessionCmd)
  return false;
#undef DO_
}

void ForwardRegionSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardRegionSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARD_REGION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 region_type = 3;
  if (has_region_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region_type(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardRegionSessionCmd)
}

::google::protobuf::uint8* ForwardRegionSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardRegionSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARD_REGION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 region_type = 3;
  if (has_region_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region_type(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardRegionSessionCmd)
  return target;
}

int ForwardRegionSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_FORWARD_REGION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 region_type = 3;
    if (has_region_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_type());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardRegionSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardRegionSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardRegionSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardRegionSessionCmd::MergeFrom(const ForwardRegionSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_region_type()) {
      set_region_type(from.region_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardRegionSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardRegionSessionCmd::CopyFrom(const ForwardRegionSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardRegionSessionCmd::IsInitialized() const {

  return true;
}

void ForwardRegionSessionCmd::Swap(ForwardRegionSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(region_type_, other->region_type_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardRegionSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardRegionSessionCmd_descriptor_;
  metadata.reflection = ForwardRegionSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BreakHandSessionCmd::kCmdFieldNumber;
const int BreakHandSessionCmd::kParamFieldNumber;
const int BreakHandSessionCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

BreakHandSessionCmd::BreakHandSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BreakHandSessionCmd)
}

void BreakHandSessionCmd::InitAsDefaultInstance() {
}

BreakHandSessionCmd::BreakHandSessionCmd(const BreakHandSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BreakHandSessionCmd)
}

void BreakHandSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 66;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BreakHandSessionCmd::~BreakHandSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BreakHandSessionCmd)
  SharedDtor();
}

void BreakHandSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BreakHandSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakHandSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BreakHandSessionCmd_descriptor_;
}

const BreakHandSessionCmd& BreakHandSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

BreakHandSessionCmd* BreakHandSessionCmd::default_instance_ = NULL;

BreakHandSessionCmd* BreakHandSessionCmd::New() const {
  return new BreakHandSessionCmd;
}

void BreakHandSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 66;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BreakHandSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BreakHandSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_BREAK_HAND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BreakHandSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BreakHandSessionCmd)
  return false;
#undef DO_
}

void BreakHandSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BreakHandSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_BREAK_HAND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BreakHandSessionCmd)
}

::google::protobuf::uint8* BreakHandSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BreakHandSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_BREAK_HAND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BreakHandSessionCmd)
  return target;
}

int BreakHandSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_BREAK_HAND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakHandSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BreakHandSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BreakHandSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BreakHandSessionCmd::MergeFrom(const BreakHandSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BreakHandSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakHandSessionCmd::CopyFrom(const BreakHandSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakHandSessionCmd::IsInitialized() const {

  return true;
}

void BreakHandSessionCmd::Swap(BreakHandSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BreakHandSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BreakHandSessionCmd_descriptor_;
  metadata.reflection = BreakHandSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityStopSessionCmd::kCmdFieldNumber;
const int ActivityStopSessionCmd::kParamFieldNumber;
const int ActivityStopSessionCmd::kIdFieldNumber;
const int ActivityStopSessionCmd::kUidFieldNumber;
const int ActivityStopSessionCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

ActivityStopSessionCmd::ActivityStopSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityStopSessionCmd)
}

void ActivityStopSessionCmd::InitAsDefaultInstance() {
}

ActivityStopSessionCmd::ActivityStopSessionCmd(const ActivityStopSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityStopSessionCmd)
}

void ActivityStopSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 67;
  id_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityStopSessionCmd::~ActivityStopSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityStopSessionCmd)
  SharedDtor();
}

void ActivityStopSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityStopSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityStopSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityStopSessionCmd_descriptor_;
}

const ActivityStopSessionCmd& ActivityStopSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ActivityStopSessionCmd* ActivityStopSessionCmd::default_instance_ = NULL;

ActivityStopSessionCmd* ActivityStopSessionCmd::New() const {
  return new ActivityStopSessionCmd;
}

void ActivityStopSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityStopSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, mapid_);
    cmd_ = 202;
    param_ = 67;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityStopSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityStopSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STOP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityStopSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityStopSessionCmd)
  return false;
#undef DO_
}

void ActivityStopSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityStopSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STOP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint64 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uid(), output);
  }

  // optional uint32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityStopSessionCmd)
}

::google::protobuf::uint8* ActivityStopSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityStopSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STOP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint64 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uid(), target);
  }

  // optional uint32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityStopSessionCmd)
  return target;
}

int ActivityStopSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITY_STOP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityStopSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityStopSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityStopSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityStopSessionCmd::MergeFrom(const ActivityStopSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityStopSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityStopSessionCmd::CopyFrom(const ActivityStopSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStopSessionCmd::IsInitialized() const {

  return true;
}

void ActivityStopSessionCmd::Swap(ActivityStopSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(uid_, other->uid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityStopSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityStopSessionCmd_descriptor_;
  metadata.reflection = ActivityStopSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WantedInfoSyncSessionCmd::kCmdFieldNumber;
const int WantedInfoSyncSessionCmd::kParamFieldNumber;
const int WantedInfoSyncSessionCmd::kActiveFieldNumber;
const int WantedInfoSyncSessionCmd::kMaxcountFieldNumber;
#endif  // !_MSC_VER

WantedInfoSyncSessionCmd::WantedInfoSyncSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WantedInfoSyncSessionCmd)
}

void WantedInfoSyncSessionCmd::InitAsDefaultInstance() {
}

WantedInfoSyncSessionCmd::WantedInfoSyncSessionCmd(const WantedInfoSyncSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WantedInfoSyncSessionCmd)
}

void WantedInfoSyncSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 68;
  active_ = false;
  maxcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WantedInfoSyncSessionCmd::~WantedInfoSyncSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WantedInfoSyncSessionCmd)
  SharedDtor();
}

void WantedInfoSyncSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WantedInfoSyncSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WantedInfoSyncSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WantedInfoSyncSessionCmd_descriptor_;
}

const WantedInfoSyncSessionCmd& WantedInfoSyncSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

WantedInfoSyncSessionCmd* WantedInfoSyncSessionCmd::default_instance_ = NULL;

WantedInfoSyncSessionCmd* WantedInfoSyncSessionCmd::New() const {
  return new WantedInfoSyncSessionCmd;
}

void WantedInfoSyncSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WantedInfoSyncSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(active_, maxcount_);
    cmd_ = 202;
    param_ = 68;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WantedInfoSyncSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WantedInfoSyncSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_INFO_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxcount;
        break;
      }

      // optional uint32 maxcount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WantedInfoSyncSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WantedInfoSyncSessionCmd)
  return false;
#undef DO_
}

void WantedInfoSyncSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WantedInfoSyncSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_INFO_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool active = 3 [default = false];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // optional uint32 maxcount = 4 [default = 0];
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WantedInfoSyncSessionCmd)
}

::google::protobuf::uint8* WantedInfoSyncSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WantedInfoSyncSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_INFO_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool active = 3 [default = false];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // optional uint32 maxcount = 4 [default = 0];
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WantedInfoSyncSessionCmd)
  return target;
}

int WantedInfoSyncSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_INFO_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool active = 3 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional uint32 maxcount = 4 [default = 0];
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WantedInfoSyncSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WantedInfoSyncSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WantedInfoSyncSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WantedInfoSyncSessionCmd::MergeFrom(const WantedInfoSyncSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WantedInfoSyncSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WantedInfoSyncSessionCmd::CopyFrom(const WantedInfoSyncSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WantedInfoSyncSessionCmd::IsInitialized() const {

  return true;
}

void WantedInfoSyncSessionCmd::Swap(WantedInfoSyncSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(active_, other->active_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WantedInfoSyncSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WantedInfoSyncSessionCmd_descriptor_;
  metadata.reflection = WantedInfoSyncSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryZoneStatusSessionCmd::kCmdFieldNumber;
const int QueryZoneStatusSessionCmd::kParamFieldNumber;
const int QueryZoneStatusSessionCmd::kCharidFieldNumber;
const int QueryZoneStatusSessionCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

QueryZoneStatusSessionCmd::QueryZoneStatusSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryZoneStatusSessionCmd)
}

void QueryZoneStatusSessionCmd::InitAsDefaultInstance() {
}

QueryZoneStatusSessionCmd::QueryZoneStatusSessionCmd(const QueryZoneStatusSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryZoneStatusSessionCmd)
}

void QueryZoneStatusSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 69;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryZoneStatusSessionCmd::~QueryZoneStatusSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryZoneStatusSessionCmd)
  SharedDtor();
}

void QueryZoneStatusSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryZoneStatusSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryZoneStatusSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryZoneStatusSessionCmd_descriptor_;
}

const QueryZoneStatusSessionCmd& QueryZoneStatusSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

QueryZoneStatusSessionCmd* QueryZoneStatusSessionCmd::default_instance_ = NULL;

QueryZoneStatusSessionCmd* QueryZoneStatusSessionCmd::New() const {
  return new QueryZoneStatusSessionCmd;
}

void QueryZoneStatusSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 69;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryZoneStatusSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryZoneStatusSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ZONE_QUERYSTATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }

      // repeated .Cmd.ZoneInfo infos = 4;
      case 4: {
        if (tag == 34) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryZoneStatusSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryZoneStatusSessionCmd)
  return false;
#undef DO_
}

void QueryZoneStatusSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryZoneStatusSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ZONE_QUERYSTATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.ZoneInfo infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryZoneStatusSessionCmd)
}

::google::protobuf::uint8* QueryZoneStatusSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryZoneStatusSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ZONE_QUERYSTATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.ZoneInfo infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryZoneStatusSessionCmd)
  return target;
}

int QueryZoneStatusSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ZONE_QUERYSTATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.ZoneInfo infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryZoneStatusSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryZoneStatusSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryZoneStatusSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryZoneStatusSessionCmd::MergeFrom(const QueryZoneStatusSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryZoneStatusSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryZoneStatusSessionCmd::CopyFrom(const QueryZoneStatusSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryZoneStatusSessionCmd::IsInitialized() const {

  return true;
}

void QueryZoneStatusSessionCmd::Swap(QueryZoneStatusSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryZoneStatusSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryZoneStatusSessionCmd_descriptor_;
  metadata.reflection = QueryZoneStatusSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMailFromScene::kCmdFieldNumber;
const int SendMailFromScene::kParamFieldNumber;
const int SendMailFromScene::kDataFieldNumber;
#endif  // !_MSC_VER

SendMailFromScene::SendMailFromScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SendMailFromScene)
}

void SendMailFromScene::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MailData*>(&::Cmd::MailData::default_instance());
}

SendMailFromScene::SendMailFromScene(const SendMailFromScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SendMailFromScene)
}

void SendMailFromScene::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 70;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailFromScene::~SendMailFromScene() {
  // @@protoc_insertion_point(destructor:Cmd.SendMailFromScene)
  SharedDtor();
}

void SendMailFromScene::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void SendMailFromScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMailFromScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMailFromScene_descriptor_;
}

const SendMailFromScene& SendMailFromScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SendMailFromScene* SendMailFromScene::default_instance_ = NULL;

SendMailFromScene* SendMailFromScene::New() const {
  return new SendMailFromScene;
}

void SendMailFromScene::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 70;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MailData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMailFromScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SendMailFromScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL_FROM_SCENE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MailData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SendMailFromScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SendMailFromScene)
  return false;
#undef DO_
}

void SendMailFromScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SendMailFromScene)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL_FROM_SCENE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MailData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SendMailFromScene)
}

::google::protobuf::uint8* SendMailFromScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SendMailFromScene)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL_FROM_SCENE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MailData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SendMailFromScene)
  return target;
}

int SendMailFromScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = CMDPARAM_SEND_MAIL_FROM_SCENE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MailData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailFromScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMailFromScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMailFromScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMailFromScene::MergeFrom(const SendMailFromScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MailData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMailFromScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailFromScene::CopyFrom(const SendMailFromScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailFromScene::IsInitialized() const {

  return true;
}

void SendMailFromScene::Swap(SendMailFromScene* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMailFromScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMailFromScene_descriptor_;
  metadata.reflection = SendMailFromScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTradeLogSessionCmd::kCmdFieldNumber;
const int GetTradeLogSessionCmd::kParamFieldNumber;
const int GetTradeLogSessionCmd::kCharidFieldNumber;
const int GetTradeLogSessionCmd::kIdFieldNumber;
const int GetTradeLogSessionCmd::kLogtypeFieldNumber;
const int GetTradeLogSessionCmd::kItemFieldNumber;
const int GetTradeLogSessionCmd::kItemDataFieldNumber;
const int GetTradeLogSessionCmd::kSuccessFieldNumber;
const int GetTradeLogSessionCmd::kSellItemIdFieldNumber;
const int GetTradeLogSessionCmd::kSellPriceFieldNumber;
const int GetTradeLogSessionCmd::kSellCountFieldNumber;
const int GetTradeLogSessionCmd::kRefineLvFieldNumber;
const int GetTradeLogSessionCmd::kRetCostFieldNumber;
const int GetTradeLogSessionCmd::kTradeTypeFieldNumber;
const int GetTradeLogSessionCmd::kTaxFieldNumber;
const int GetTradeLogSessionCmd::kQuotaFieldNumber;
#endif  // !_MSC_VER

GetTradeLogSessionCmd::GetTradeLogSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetTradeLogSessionCmd)
}

void GetTradeLogSessionCmd::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::ItemInfo*>(&::Cmd::ItemInfo::default_instance());
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

GetTradeLogSessionCmd::GetTradeLogSessionCmd(const GetTradeLogSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetTradeLogSessionCmd)
}

void GetTradeLogSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 71;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  logtype_ = 0;
  item_ = NULL;
  itemdata_ = NULL;
  success_ = false;
  sell_item_id_ = 0u;
  sell_price_ = GOOGLE_ULONGLONG(0);
  sell_count_ = 0u;
  refine_lv_ = 0u;
  ret_cost_ = 0u;
  trade_type_ = 0;
  tax_ = GOOGLE_ULONGLONG(0);
  quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTradeLogSessionCmd::~GetTradeLogSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetTradeLogSessionCmd)
  SharedDtor();
}

void GetTradeLogSessionCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete itemdata_;
  }
}

void GetTradeLogSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTradeLogSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTradeLogSessionCmd_descriptor_;
}

const GetTradeLogSessionCmd& GetTradeLogSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GetTradeLogSessionCmd* GetTradeLogSessionCmd::default_instance_ = NULL;

GetTradeLogSessionCmd* GetTradeLogSessionCmd::New() const {
  return new GetTradeLogSessionCmd;
}

void GetTradeLogSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetTradeLogSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, id_);
    ZR_(logtype_, success_);
    cmd_ = 202;
    param_ = 71;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::ItemInfo::Clear();
    }
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(sell_price_, trade_type_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTradeLogSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetTradeLogSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_TRADELOG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_logtype;
        break;
      }

      // optional .Cmd.EOperType logtype = 5;
      case 5: {
        if (tag == 40) {
         parse_logtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperType_IsValid(value)) {
            set_logtype(static_cast< ::Cmd::EOperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_item;
        break;
      }

      // optional .Cmd.ItemInfo item = 6;
      case 6: {
        if (tag == 50) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemData;
        break;
      }

      // optional .Cmd.ItemData itemData = 7;
      case 7: {
        if (tag == 58) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_success;
        break;
      }

      // optional bool success = 8;
      case 8: {
        if (tag == 64) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sell_item_id;
        break;
      }

      // optional uint32 sell_item_id = 9;
      case 9: {
        if (tag == 72) {
         parse_sell_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_item_id_)));
          set_has_sell_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sell_price;
        break;
      }

      // optional uint64 sell_price = 10;
      case 10: {
        if (tag == 80) {
         parse_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sell_price_)));
          set_has_sell_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sell_count;
        break;
      }

      // optional uint32 sell_count = 11;
      case 11: {
        if (tag == 88) {
         parse_sell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_count_)));
          set_has_sell_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_refine_lv;
        break;
      }

      // optional uint32 refine_lv = 12;
      case 12: {
        if (tag == 96) {
         parse_refine_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_lv_)));
          set_has_refine_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ret_cost;
        break;
      }

      // optional uint32 ret_cost = 13;
      case 13: {
        if (tag == 104) {
         parse_ret_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_cost_)));
          set_has_ret_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_trade_type;
        break;
      }

      // optional .Cmd.ETradeType trade_type = 14;
      case 14: {
        if (tag == 112) {
         parse_trade_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETradeType_IsValid(value)) {
            set_trade_type(static_cast< ::Cmd::ETradeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_tax;
        break;
      }

      // optional uint64 tax = 15;
      case 15: {
        if (tag == 120) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 16;
      case 16: {
        if (tag == 128) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetTradeLogSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetTradeLogSessionCmd)
  return false;
#undef DO_
}

void GetTradeLogSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetTradeLogSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_TRADELOG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional .Cmd.EOperType logtype = 5;
  if (has_logtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->logtype(), output);
  }

  // optional .Cmd.ItemInfo item = 6;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item(), output);
  }

  // optional .Cmd.ItemData itemData = 7;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->itemdata(), output);
  }

  // optional bool success = 8;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->success(), output);
  }

  // optional uint32 sell_item_id = 9;
  if (has_sell_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sell_item_id(), output);
  }

  // optional uint64 sell_price = 10;
  if (has_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->sell_price(), output);
  }

  // optional uint32 sell_count = 11;
  if (has_sell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sell_count(), output);
  }

  // optional uint32 refine_lv = 12;
  if (has_refine_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->refine_lv(), output);
  }

  // optional uint32 ret_cost = 13;
  if (has_ret_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ret_cost(), output);
  }

  // optional .Cmd.ETradeType trade_type = 14;
  if (has_trade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->trade_type(), output);
  }

  // optional uint64 tax = 15;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->tax(), output);
  }

  // optional uint64 quota = 16;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetTradeLogSessionCmd)
}

::google::protobuf::uint8* GetTradeLogSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetTradeLogSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_TRADELOG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional .Cmd.EOperType logtype = 5;
  if (has_logtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->logtype(), target);
  }

  // optional .Cmd.ItemInfo item = 6;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item(), target);
  }

  // optional .Cmd.ItemData itemData = 7;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->itemdata(), target);
  }

  // optional bool success = 8;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->success(), target);
  }

  // optional uint32 sell_item_id = 9;
  if (has_sell_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sell_item_id(), target);
  }

  // optional uint64 sell_price = 10;
  if (has_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->sell_price(), target);
  }

  // optional uint32 sell_count = 11;
  if (has_sell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sell_count(), target);
  }

  // optional uint32 refine_lv = 12;
  if (has_refine_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->refine_lv(), target);
  }

  // optional uint32 ret_cost = 13;
  if (has_ret_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ret_cost(), target);
  }

  // optional .Cmd.ETradeType trade_type = 14;
  if (has_trade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->trade_type(), target);
  }

  // optional uint64 tax = 15;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->tax(), target);
  }

  // optional uint64 quota = 16;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetTradeLogSessionCmd)
  return target;
}

int GetTradeLogSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GET_TRADELOG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.EOperType logtype = 5;
    if (has_logtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->logtype());
    }

    // optional .Cmd.ItemInfo item = 6;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .Cmd.ItemData itemData = 7;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional bool success = 8;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sell_item_id = 9;
    if (has_sell_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_item_id());
    }

    // optional uint64 sell_price = 10;
    if (has_sell_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sell_price());
    }

    // optional uint32 sell_count = 11;
    if (has_sell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_count());
    }

    // optional uint32 refine_lv = 12;
    if (has_refine_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_lv());
    }

    // optional uint32 ret_cost = 13;
    if (has_ret_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_cost());
    }

    // optional .Cmd.ETradeType trade_type = 14;
    if (has_trade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trade_type());
    }

    // optional uint64 tax = 15;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tax());
    }

    // optional uint64 quota = 16;
    if (has_quota()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTradeLogSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTradeLogSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTradeLogSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTradeLogSessionCmd::MergeFrom(const GetTradeLogSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_logtype()) {
      set_logtype(from.logtype());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::ItemInfo::MergeFrom(from.item());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sell_item_id()) {
      set_sell_item_id(from.sell_item_id());
    }
    if (from.has_sell_price()) {
      set_sell_price(from.sell_price());
    }
    if (from.has_sell_count()) {
      set_sell_count(from.sell_count());
    }
    if (from.has_refine_lv()) {
      set_refine_lv(from.refine_lv());
    }
    if (from.has_ret_cost()) {
      set_ret_cost(from.ret_cost());
    }
    if (from.has_trade_type()) {
      set_trade_type(from.trade_type());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTradeLogSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTradeLogSessionCmd::CopyFrom(const GetTradeLogSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradeLogSessionCmd::IsInitialized() const {

  return true;
}

void GetTradeLogSessionCmd::Swap(GetTradeLogSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(logtype_, other->logtype_);
    std::swap(item_, other->item_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(success_, other->success_);
    std::swap(sell_item_id_, other->sell_item_id_);
    std::swap(sell_price_, other->sell_price_);
    std::swap(sell_count_, other->sell_count_);
    std::swap(refine_lv_, other->refine_lv_);
    std::swap(ret_cost_, other->ret_cost_);
    std::swap(trade_type_, other->trade_type_);
    std::swap(tax_, other->tax_);
    std::swap(quota_, other->quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTradeLogSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTradeLogSessionCmd_descriptor_;
  metadata.reflection = GetTradeLogSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRaidCloseSessionCmd::kCmdFieldNumber;
const int QuestRaidCloseSessionCmd::kParamFieldNumber;
const int QuestRaidCloseSessionCmd::kUseridFieldNumber;
const int QuestRaidCloseSessionCmd::kRaididFieldNumber;
#endif  // !_MSC_VER

QuestRaidCloseSessionCmd::QuestRaidCloseSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestRaidCloseSessionCmd)
}

void QuestRaidCloseSessionCmd::InitAsDefaultInstance() {
}

QuestRaidCloseSessionCmd::QuestRaidCloseSessionCmd(const QuestRaidCloseSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestRaidCloseSessionCmd)
}

void QuestRaidCloseSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 73;
  userid_ = GOOGLE_ULONGLONG(0);
  raidid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRaidCloseSessionCmd::~QuestRaidCloseSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuestRaidCloseSessionCmd)
  SharedDtor();
}

void QuestRaidCloseSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRaidCloseSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRaidCloseSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRaidCloseSessionCmd_descriptor_;
}

const QuestRaidCloseSessionCmd& QuestRaidCloseSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

QuestRaidCloseSessionCmd* QuestRaidCloseSessionCmd::default_instance_ = NULL;

QuestRaidCloseSessionCmd* QuestRaidCloseSessionCmd::New() const {
  return new QuestRaidCloseSessionCmd;
}

void QuestRaidCloseSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestRaidCloseSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userid_, raidid_);
    cmd_ = 202;
    param_ = 73;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRaidCloseSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestRaidCloseSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_QUEST_RAID_CLOSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestRaidCloseSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestRaidCloseSessionCmd)
  return false;
#undef DO_
}

void QuestRaidCloseSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestRaidCloseSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_QUEST_RAID_CLOSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional uint32 raidid = 4 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raidid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestRaidCloseSessionCmd)
}

::google::protobuf::uint8* QuestRaidCloseSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestRaidCloseSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_QUEST_RAID_CLOSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional uint32 raidid = 4 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raidid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestRaidCloseSessionCmd)
  return target;
}

int QuestRaidCloseSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_QUEST_RAID_CLOSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 raidid = 4 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRaidCloseSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRaidCloseSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRaidCloseSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRaidCloseSessionCmd::MergeFrom(const QuestRaidCloseSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRaidCloseSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRaidCloseSessionCmd::CopyFrom(const QuestRaidCloseSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRaidCloseSessionCmd::IsInitialized() const {

  return true;
}

void QuestRaidCloseSessionCmd::Swap(QuestRaidCloseSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(raidid_, other->raidid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRaidCloseSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRaidCloseSessionCmd_descriptor_;
  metadata.reflection = QuestRaidCloseSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthorizeInfoSessionCmd::kCmdFieldNumber;
const int AuthorizeInfoSessionCmd::kParamFieldNumber;
const int AuthorizeInfoSessionCmd::kCharidFieldNumber;
const int AuthorizeInfoSessionCmd::kIgnorepwdFieldNumber;
#endif  // !_MSC_VER

AuthorizeInfoSessionCmd::AuthorizeInfoSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuthorizeInfoSessionCmd)
}

void AuthorizeInfoSessionCmd::InitAsDefaultInstance() {
}

AuthorizeInfoSessionCmd::AuthorizeInfoSessionCmd(const AuthorizeInfoSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuthorizeInfoSessionCmd)
}

void AuthorizeInfoSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 75;
  charid_ = GOOGLE_ULONGLONG(0);
  ignorepwd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorizeInfoSessionCmd::~AuthorizeInfoSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AuthorizeInfoSessionCmd)
  SharedDtor();
}

void AuthorizeInfoSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthorizeInfoSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthorizeInfoSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizeInfoSessionCmd_descriptor_;
}

const AuthorizeInfoSessionCmd& AuthorizeInfoSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

AuthorizeInfoSessionCmd* AuthorizeInfoSessionCmd::default_instance_ = NULL;

AuthorizeInfoSessionCmd* AuthorizeInfoSessionCmd::New() const {
  return new AuthorizeInfoSessionCmd;
}

void AuthorizeInfoSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthorizeInfoSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, ignorepwd_);
    cmd_ = 202;
    param_ = 75;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthorizeInfoSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuthorizeInfoSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_AUTHORIZE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ignorepwd;
        break;
      }

      // optional bool ignorepwd = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_ignorepwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepwd_)));
          set_has_ignorepwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuthorizeInfoSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuthorizeInfoSessionCmd)
  return false;
#undef DO_
}

void AuthorizeInfoSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuthorizeInfoSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_AUTHORIZE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bool ignorepwd = 4 [default = false];
  if (has_ignorepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ignorepwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuthorizeInfoSessionCmd)
}

::google::protobuf::uint8* AuthorizeInfoSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuthorizeInfoSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_AUTHORIZE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bool ignorepwd = 4 [default = false];
  if (has_ignorepwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ignorepwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuthorizeInfoSessionCmd)
  return target;
}

int AuthorizeInfoSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_AUTHORIZE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool ignorepwd = 4 [default = false];
    if (has_ignorepwd()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizeInfoSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthorizeInfoSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthorizeInfoSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthorizeInfoSessionCmd::MergeFrom(const AuthorizeInfoSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ignorepwd()) {
      set_ignorepwd(from.ignorepwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthorizeInfoSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizeInfoSessionCmd::CopyFrom(const AuthorizeInfoSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizeInfoSessionCmd::IsInitialized() const {

  return true;
}

void AuthorizeInfoSessionCmd::Swap(AuthorizeInfoSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(ignorepwd_, other->ignorepwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthorizeInfoSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthorizeInfoSessionCmd_descriptor_;
  metadata.reflection = AuthorizeInfoSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRaidCloseSessionCmd::kCmdFieldNumber;
const int GuildRaidCloseSessionCmd::kParamFieldNumber;
const int GuildRaidCloseSessionCmd::kMapidFieldNumber;
const int GuildRaidCloseSessionCmd::kCurmapindexFieldNumber;
const int GuildRaidCloseSessionCmd::kGuildidFieldNumber;
const int GuildRaidCloseSessionCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

GuildRaidCloseSessionCmd::GuildRaidCloseSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildRaidCloseSessionCmd)
}

void GuildRaidCloseSessionCmd::InitAsDefaultInstance() {
}

GuildRaidCloseSessionCmd::GuildRaidCloseSessionCmd(const GuildRaidCloseSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildRaidCloseSessionCmd)
}

void GuildRaidCloseSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 74;
  mapid_ = 0u;
  curmapindex_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRaidCloseSessionCmd::~GuildRaidCloseSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildRaidCloseSessionCmd)
  SharedDtor();
}

void GuildRaidCloseSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRaidCloseSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRaidCloseSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRaidCloseSessionCmd_descriptor_;
}

const GuildRaidCloseSessionCmd& GuildRaidCloseSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GuildRaidCloseSessionCmd* GuildRaidCloseSessionCmd::default_instance_ = NULL;

GuildRaidCloseSessionCmd* GuildRaidCloseSessionCmd::New() const {
  return new GuildRaidCloseSessionCmd;
}

void GuildRaidCloseSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildRaidCloseSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mapid_, teamid_);
    cmd_ = 202;
    param_ = 74;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRaidCloseSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildRaidCloseSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GUILDRAID_CLOSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curmapindex;
        break;
      }

      // optional uint32 curmapindex = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_curmapindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmapindex_)));
          set_has_curmapindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildRaidCloseSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildRaidCloseSessionCmd)
  return false;
#undef DO_
}

void GuildRaidCloseSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildRaidCloseSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GUILDRAID_CLOSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional uint32 curmapindex = 4 [default = 0];
  if (has_curmapindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curmapindex(), output);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guildid(), output);
  }

  // optional uint64 teamid = 6 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildRaidCloseSessionCmd)
}

::google::protobuf::uint8* GuildRaidCloseSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildRaidCloseSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GUILDRAID_CLOSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional uint32 curmapindex = 4 [default = 0];
  if (has_curmapindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curmapindex(), target);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guildid(), target);
  }

  // optional uint64 teamid = 6 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildRaidCloseSessionCmd)
  return target;
}

int GuildRaidCloseSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GUILDRAID_CLOSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 curmapindex = 4 [default = 0];
    if (has_curmapindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmapindex());
    }

    // optional uint64 guildid = 5 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 teamid = 6 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRaidCloseSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRaidCloseSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRaidCloseSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRaidCloseSessionCmd::MergeFrom(const GuildRaidCloseSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_curmapindex()) {
      set_curmapindex(from.curmapindex());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRaidCloseSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRaidCloseSessionCmd::CopyFrom(const GuildRaidCloseSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRaidCloseSessionCmd::IsInitialized() const {

  return true;
}

void GuildRaidCloseSessionCmd::Swap(GuildRaidCloseSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(curmapindex_, other->curmapindex_);
    std::swap(guildid_, other->guildid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRaidCloseSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRaidCloseSessionCmd_descriptor_;
  metadata.reflection = GuildRaidCloseSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePwdSessionCmd::kCmdFieldNumber;
const int DeletePwdSessionCmd::kParamFieldNumber;
const int DeletePwdSessionCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

DeletePwdSessionCmd::DeletePwdSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeletePwdSessionCmd)
}

void DeletePwdSessionCmd::InitAsDefaultInstance() {
}

DeletePwdSessionCmd::DeletePwdSessionCmd(const DeletePwdSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeletePwdSessionCmd)
}

void DeletePwdSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 76;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePwdSessionCmd::~DeletePwdSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeletePwdSessionCmd)
  SharedDtor();
}

void DeletePwdSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePwdSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePwdSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePwdSessionCmd_descriptor_;
}

const DeletePwdSessionCmd& DeletePwdSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

DeletePwdSessionCmd* DeletePwdSessionCmd::default_instance_ = NULL;

DeletePwdSessionCmd* DeletePwdSessionCmd::New() const {
  return new DeletePwdSessionCmd;
}

void DeletePwdSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 76;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePwdSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeletePwdSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_DELETE_AUTHORIZE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeletePwdSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeletePwdSessionCmd)
  return false;
#undef DO_
}

void DeletePwdSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeletePwdSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_DELETE_AUTHORIZE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeletePwdSessionCmd)
}

::google::protobuf::uint8* DeletePwdSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeletePwdSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_DELETE_AUTHORIZE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeletePwdSessionCmd)
  return target;
}

int DeletePwdSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_DELETE_AUTHORIZE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePwdSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePwdSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePwdSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePwdSessionCmd::MergeFrom(const DeletePwdSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePwdSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePwdSessionCmd::CopyFrom(const DeletePwdSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePwdSessionCmd::IsInitialized() const {

  return true;
}

void DeletePwdSessionCmd::Swap(DeletePwdSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePwdSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePwdSessionCmd_descriptor_;
  metadata.reflection = DeletePwdSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoBackSessionCmd::kCmdFieldNumber;
const int GoBackSessionCmd::kParamFieldNumber;
const int GoBackSessionCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

GoBackSessionCmd::GoBackSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoBackSessionCmd)
}

void GoBackSessionCmd::InitAsDefaultInstance() {
}

GoBackSessionCmd::GoBackSessionCmd(const GoBackSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoBackSessionCmd)
}

void GoBackSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 77;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoBackSessionCmd::~GoBackSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoBackSessionCmd)
  SharedDtor();
}

void GoBackSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoBackSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoBackSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoBackSessionCmd_descriptor_;
}

const GoBackSessionCmd& GoBackSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GoBackSessionCmd* GoBackSessionCmd::default_instance_ = NULL;

GoBackSessionCmd* GoBackSessionCmd::New() const {
  return new GoBackSessionCmd;
}

void GoBackSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 77;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoBackSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoBackSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GO_BACK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoBackSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoBackSessionCmd)
  return false;
#undef DO_
}

void GoBackSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoBackSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GO_BACK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoBackSessionCmd)
}

::google::protobuf::uint8* GoBackSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoBackSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GO_BACK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoBackSessionCmd)
  return target;
}

int GoBackSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GO_BACK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoBackSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoBackSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoBackSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoBackSessionCmd::MergeFrom(const GoBackSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoBackSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoBackSessionCmd::CopyFrom(const GoBackSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoBackSessionCmd::IsInitialized() const {

  return true;
}

void GoBackSessionCmd::Swap(GoBackSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoBackSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoBackSessionCmd_descriptor_;
  metadata.reflection = GoBackSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WantedQuestFinishCmd::kCmdFieldNumber;
const int WantedQuestFinishCmd::kParamFieldNumber;
const int WantedQuestFinishCmd::kLeaderidFieldNumber;
const int WantedQuestFinishCmd::kTeammateidFieldNumber;
#endif  // !_MSC_VER

WantedQuestFinishCmd::WantedQuestFinishCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WantedQuestFinishCmd)
}

void WantedQuestFinishCmd::InitAsDefaultInstance() {
}

WantedQuestFinishCmd::WantedQuestFinishCmd(const WantedQuestFinishCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WantedQuestFinishCmd)
}

void WantedQuestFinishCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 78;
  leaderid_ = GOOGLE_ULONGLONG(0);
  teammateid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WantedQuestFinishCmd::~WantedQuestFinishCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WantedQuestFinishCmd)
  SharedDtor();
}

void WantedQuestFinishCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WantedQuestFinishCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WantedQuestFinishCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WantedQuestFinishCmd_descriptor_;
}

const WantedQuestFinishCmd& WantedQuestFinishCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

WantedQuestFinishCmd* WantedQuestFinishCmd::default_instance_ = NULL;

WantedQuestFinishCmd* WantedQuestFinishCmd::New() const {
  return new WantedQuestFinishCmd;
}

void WantedQuestFinishCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WantedQuestFinishCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(leaderid_, teammateid_);
    cmd_ = 202;
    param_ = 78;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WantedQuestFinishCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WantedQuestFinishCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_FINISH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leaderid;
        break;
      }

      // optional uint64 leaderid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teammateid;
        break;
      }

      // optional uint64 teammateid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teammateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teammateid_)));
          set_has_teammateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WantedQuestFinishCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WantedQuestFinishCmd)
  return false;
#undef DO_
}

void WantedQuestFinishCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WantedQuestFinishCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_FINISH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leaderid(), output);
  }

  // optional uint64 teammateid = 4 [default = 0];
  if (has_teammateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teammateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WantedQuestFinishCmd)
}

::google::protobuf::uint8* WantedQuestFinishCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WantedQuestFinishCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_FINISH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 leaderid = 3 [default = 0];
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leaderid(), target);
  }

  // optional uint64 teammateid = 4 [default = 0];
  if (has_teammateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teammateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WantedQuestFinishCmd)
  return target;
}

int WantedQuestFinishCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_FINISH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 leaderid = 3 [default = 0];
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional uint64 teammateid = 4 [default = 0];
    if (has_teammateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teammateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WantedQuestFinishCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WantedQuestFinishCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WantedQuestFinishCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WantedQuestFinishCmd::MergeFrom(const WantedQuestFinishCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_teammateid()) {
      set_teammateid(from.teammateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WantedQuestFinishCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WantedQuestFinishCmd::CopyFrom(const WantedQuestFinishCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WantedQuestFinishCmd::IsInitialized() const {

  return true;
}

void WantedQuestFinishCmd::Swap(WantedQuestFinishCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(teammateid_, other->teammateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WantedQuestFinishCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WantedQuestFinishCmd_descriptor_;
  metadata.reflection = WantedQuestFinishCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddOfflineItemSessionCmd::kCmdFieldNumber;
const int AddOfflineItemSessionCmd::kParamFieldNumber;
const int AddOfflineItemSessionCmd::kCharidFieldNumber;
const int AddOfflineItemSessionCmd::kDataFieldNumber;
#endif  // !_MSC_VER

AddOfflineItemSessionCmd::AddOfflineItemSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddOfflineItemSessionCmd)
}

void AddOfflineItemSessionCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

AddOfflineItemSessionCmd::AddOfflineItemSessionCmd(const AddOfflineItemSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddOfflineItemSessionCmd)
}

void AddOfflineItemSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 79;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddOfflineItemSessionCmd::~AddOfflineItemSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddOfflineItemSessionCmd)
  SharedDtor();
}

void AddOfflineItemSessionCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void AddOfflineItemSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddOfflineItemSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddOfflineItemSessionCmd_descriptor_;
}

const AddOfflineItemSessionCmd& AddOfflineItemSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

AddOfflineItemSessionCmd* AddOfflineItemSessionCmd::default_instance_ = NULL;

AddOfflineItemSessionCmd* AddOfflineItemSessionCmd::New() const {
  return new AddOfflineItemSessionCmd;
}

void AddOfflineItemSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 79;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::ItemData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddOfflineItemSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddOfflineItemSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ADD_OFFLINE_ITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.ItemData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddOfflineItemSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddOfflineItemSessionCmd)
  return false;
#undef DO_
}

void AddOfflineItemSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddOfflineItemSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ADD_OFFLINE_ITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.ItemData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddOfflineItemSessionCmd)
}

::google::protobuf::uint8* AddOfflineItemSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddOfflineItemSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ADD_OFFLINE_ITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.ItemData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddOfflineItemSessionCmd)
  return target;
}

int AddOfflineItemSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ADD_OFFLINE_ITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ItemData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddOfflineItemSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddOfflineItemSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddOfflineItemSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddOfflineItemSessionCmd::MergeFrom(const AddOfflineItemSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::ItemData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddOfflineItemSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOfflineItemSessionCmd::CopyFrom(const AddOfflineItemSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOfflineItemSessionCmd::IsInitialized() const {

  return true;
}

void AddOfflineItemSessionCmd::Swap(AddOfflineItemSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddOfflineItemSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddOfflineItemSessionCmd_descriptor_;
  metadata.reflection = AddOfflineItemSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateOperActivitySessionCmd::kCmdFieldNumber;
const int UpdateOperActivitySessionCmd::kParamFieldNumber;
#endif  // !_MSC_VER

UpdateOperActivitySessionCmd::UpdateOperActivitySessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateOperActivitySessionCmd)
}

void UpdateOperActivitySessionCmd::InitAsDefaultInstance() {
}

UpdateOperActivitySessionCmd::UpdateOperActivitySessionCmd(const UpdateOperActivitySessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateOperActivitySessionCmd)
}

void UpdateOperActivitySessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 81;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateOperActivitySessionCmd::~UpdateOperActivitySessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateOperActivitySessionCmd)
  SharedDtor();
}

void UpdateOperActivitySessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateOperActivitySessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateOperActivitySessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateOperActivitySessionCmd_descriptor_;
}

const UpdateOperActivitySessionCmd& UpdateOperActivitySessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

UpdateOperActivitySessionCmd* UpdateOperActivitySessionCmd::default_instance_ = NULL;

UpdateOperActivitySessionCmd* UpdateOperActivitySessionCmd::New() const {
  return new UpdateOperActivitySessionCmd;
}

void UpdateOperActivitySessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 202;
    param_ = 81;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateOperActivitySessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateOperActivitySessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_OPERACTIVITY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateOperActivitySessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateOperActivitySessionCmd)
  return false;
#undef DO_
}

void UpdateOperActivitySessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateOperActivitySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_OPERACTIVITY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateOperActivitySessionCmd)
}

::google::protobuf::uint8* UpdateOperActivitySessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateOperActivitySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_OPERACTIVITY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateOperActivitySessionCmd)
  return target;
}

int UpdateOperActivitySessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_OPERACTIVITY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateOperActivitySessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateOperActivitySessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateOperActivitySessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateOperActivitySessionCmd::MergeFrom(const UpdateOperActivitySessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateOperActivitySessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateOperActivitySessionCmd::CopyFrom(const UpdateOperActivitySessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateOperActivitySessionCmd::IsInitialized() const {

  return true;
}

void UpdateOperActivitySessionCmd::Swap(UpdateOperActivitySessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateOperActivitySessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateOperActivitySessionCmd_descriptor_;
  metadata.reflection = UpdateOperActivitySessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionShopData::kOldFieldNumber;
const int SessionShopData::kNowFieldNumber;
#endif  // !_MSC_VER

SessionShopData::SessionShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionShopData)
}

void SessionShopData::InitAsDefaultInstance() {
}

SessionShopData::SessionShopData(const SessionShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionShopData)
}

void SessionShopData::SharedCtor() {
  _cached_size_ = 0;
  now_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionShopData::~SessionShopData() {
  // @@protoc_insertion_point(destructor:Cmd.SessionShopData)
  SharedDtor();
}

void SessionShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionShopData_descriptor_;
}

const SessionShopData& SessionShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SessionShopData* SessionShopData::default_instance_ = NULL;

SessionShopData* SessionShopData::New() const {
  return new SessionShopData;
}

void SessionShopData::Clear() {
  now_ = 0u;
  old_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionShopData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 old = 1;
      case 1: {
        if (tag == 8) {
         parse_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_old())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_old())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_old;
        if (input->ExpectTag(16)) goto parse_now;
        break;
      }

      // optional uint32 now = 2;
      case 2: {
        if (tag == 16) {
         parse_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionShopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionShopData)
  return false;
#undef DO_
}

void SessionShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionShopData)
  // repeated uint32 old = 1;
  for (int i = 0; i < this->old_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->old(i), output);
  }

  // optional uint32 now = 2;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionShopData)
}

::google::protobuf::uint8* SessionShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionShopData)
  // repeated uint32 old = 1;
  for (int i = 0; i < this->old_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->old(i), target);
  }

  // optional uint32 now = 2;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionShopData)
  return target;
}

int SessionShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 now = 2;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->now());
    }

  }
  // repeated uint32 old = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->old_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->old(i));
    }
    total_size += 1 * this->old_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionShopData::MergeFrom(const SessionShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_.MergeFrom(from.old_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_now()) {
      set_now(from.now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionShopData::CopyFrom(const SessionShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionShopData::IsInitialized() const {

  return true;
}

void SessionShopData::Swap(SessionShopData* other) {
  if (other != this) {
    old_.Swap(&other->old_);
    std::swap(now_, other->now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionShopData_descriptor_;
  metadata.reflection = SessionShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncShopSessionCmd::kCmdFieldNumber;
const int SyncShopSessionCmd::kParamFieldNumber;
const int SyncShopSessionCmd::kItemFieldNumber;
#endif  // !_MSC_VER

SyncShopSessionCmd::SyncShopSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncShopSessionCmd)
}

void SyncShopSessionCmd::InitAsDefaultInstance() {
}

SyncShopSessionCmd::SyncShopSessionCmd(const SyncShopSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncShopSessionCmd)
}

void SyncShopSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 82;
  item_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncShopSessionCmd::~SyncShopSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncShopSessionCmd)
  SharedDtor();
}

void SyncShopSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncShopSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncShopSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncShopSessionCmd_descriptor_;
}

const SyncShopSessionCmd& SyncShopSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SyncShopSessionCmd* SyncShopSessionCmd::default_instance_ = NULL;

SyncShopSessionCmd* SyncShopSessionCmd::New() const {
  return new SyncShopSessionCmd;
}

void SyncShopSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 82;
    item_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncShopSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncShopSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_SHOP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // optional uint32 item = 3;
      case 3: {
        if (tag == 24) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncShopSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncShopSessionCmd)
  return false;
#undef DO_
}

void SyncShopSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncShopSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_SHOP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncShopSessionCmd)
}

::google::protobuf::uint8* SyncShopSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncShopSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_SHOP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncShopSessionCmd)
  return target;
}

int SyncShopSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_SHOP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncShopSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncShopSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncShopSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncShopSessionCmd::MergeFrom(const SyncShopSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncShopSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncShopSessionCmd::CopyFrom(const SyncShopSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncShopSessionCmd::IsInitialized() const {

  return true;
}

void SyncShopSessionCmd::Swap(SyncShopSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncShopSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncShopSessionCmd_descriptor_;
  metadata.reflection = SyncShopSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateActivityEventSessionCmd::kCmdFieldNumber;
const int UpdateActivityEventSessionCmd::kParamFieldNumber;
#endif  // !_MSC_VER

UpdateActivityEventSessionCmd::UpdateActivityEventSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateActivityEventSessionCmd)
}

void UpdateActivityEventSessionCmd::InitAsDefaultInstance() {
}

UpdateActivityEventSessionCmd::UpdateActivityEventSessionCmd(const UpdateActivityEventSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateActivityEventSessionCmd)
}

void UpdateActivityEventSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 87;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateActivityEventSessionCmd::~UpdateActivityEventSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateActivityEventSessionCmd)
  SharedDtor();
}

void UpdateActivityEventSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateActivityEventSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateActivityEventSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateActivityEventSessionCmd_descriptor_;
}

const UpdateActivityEventSessionCmd& UpdateActivityEventSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

UpdateActivityEventSessionCmd* UpdateActivityEventSessionCmd::default_instance_ = NULL;

UpdateActivityEventSessionCmd* UpdateActivityEventSessionCmd::New() const {
  return new UpdateActivityEventSessionCmd;
}

void UpdateActivityEventSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 202;
    param_ = 87;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateActivityEventSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateActivityEventSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_ACTIVITYEVENT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateActivityEventSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateActivityEventSessionCmd)
  return false;
#undef DO_
}

void UpdateActivityEventSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateActivityEventSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_ACTIVITYEVENT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateActivityEventSessionCmd)
}

::google::protobuf::uint8* UpdateActivityEventSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateActivityEventSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_ACTIVITYEVENT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateActivityEventSessionCmd)
  return target;
}

int UpdateActivityEventSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_UPDATE_ACTIVITYEVENT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateActivityEventSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateActivityEventSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateActivityEventSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateActivityEventSessionCmd::MergeFrom(const UpdateActivityEventSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateActivityEventSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateActivityEventSessionCmd::CopyFrom(const UpdateActivityEventSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateActivityEventSessionCmd::IsInitialized() const {

  return true;
}

void UpdateActivityEventSessionCmd::Swap(UpdateActivityEventSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateActivityEventSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateActivityEventSessionCmd_descriptor_;
  metadata.reflection = UpdateActivityEventSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEventNtfSessionCmd::kCmdFieldNumber;
const int ActivityEventNtfSessionCmd::kParamFieldNumber;
const int ActivityEventNtfSessionCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

ActivityEventNtfSessionCmd::ActivityEventNtfSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityEventNtfSessionCmd)
}

void ActivityEventNtfSessionCmd::InitAsDefaultInstance() {
}

ActivityEventNtfSessionCmd::ActivityEventNtfSessionCmd(const ActivityEventNtfSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityEventNtfSessionCmd)
}

void ActivityEventNtfSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 88;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEventNtfSessionCmd::~ActivityEventNtfSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityEventNtfSessionCmd)
  SharedDtor();
}

void ActivityEventNtfSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityEventNtfSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEventNtfSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEventNtfSessionCmd_descriptor_;
}

const ActivityEventNtfSessionCmd& ActivityEventNtfSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ActivityEventNtfSessionCmd* ActivityEventNtfSessionCmd::default_instance_ = NULL;

ActivityEventNtfSessionCmd* ActivityEventNtfSessionCmd::New() const {
  return new ActivityEventNtfSessionCmd;
}

void ActivityEventNtfSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 202;
    param_ = 88;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEventNtfSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityEventNtfSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITYEVENT_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.ActivityEventInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityEventNtfSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityEventNtfSessionCmd)
  return false;
#undef DO_
}

void ActivityEventNtfSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityEventNtfSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITYEVENT_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ActivityEventInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityEventNtfSessionCmd)
}

::google::protobuf::uint8* ActivityEventNtfSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityEventNtfSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITYEVENT_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ActivityEventInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityEventNtfSessionCmd)
  return target;
}

int ActivityEventNtfSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_ACTIVITYEVENT_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ActivityEventInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEventNtfSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEventNtfSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEventNtfSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEventNtfSessionCmd::MergeFrom(const ActivityEventNtfSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEventNtfSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEventNtfSessionCmd::CopyFrom(const ActivityEventNtfSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEventNtfSessionCmd::IsInitialized() const {

  return true;
}

void ActivityEventNtfSessionCmd::Swap(ActivityEventNtfSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEventNtfSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEventNtfSessionCmd_descriptor_;
  metadata.reflection = ActivityEventNtfSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoveLetterSessionCmd::kCmdFieldNumber;
const int LoveLetterSessionCmd::kParamFieldNumber;
const int LoveLetterSessionCmd::kCharidFieldNumber;
const int LoveLetterSessionCmd::kItemguidFieldNumber;
const int LoveLetterSessionCmd::kTargetsFieldNumber;
const int LoveLetterSessionCmd::kContentFieldNumber;
const int LoveLetterSessionCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

LoveLetterSessionCmd::LoveLetterSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoveLetterSessionCmd)
}

void LoveLetterSessionCmd::InitAsDefaultInstance() {
}

LoveLetterSessionCmd::LoveLetterSessionCmd(const LoveLetterSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoveLetterSessionCmd)
}

void LoveLetterSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 85;
  charid_ = GOOGLE_ULONGLONG(0);
  itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targets_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoveLetterSessionCmd::~LoveLetterSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoveLetterSessionCmd)
  SharedDtor();
}

void LoveLetterSessionCmd::SharedDtor() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void LoveLetterSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoveLetterSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoveLetterSessionCmd_descriptor_;
}

const LoveLetterSessionCmd& LoveLetterSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

LoveLetterSessionCmd* LoveLetterSessionCmd::default_instance_ = NULL;

LoveLetterSessionCmd* LoveLetterSessionCmd::New() const {
  return new LoveLetterSessionCmd;
}

void LoveLetterSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    cmd_ = 202;
    param_ = 85;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_itemguid()) {
      if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemguid_->clear();
      }
    }
    targets_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    type_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoveLetterSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoveLetterSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_USE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemguid;
        break;
      }

      // optional string itemguid = 4;
      case 4: {
        if (tag == 34) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid().data(), this->itemguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targets;
        break;
      }

      // optional uint64 targets = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targets_)));
          set_has_targets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .Cmd.ELetterType type = 7 [default = ELETTERTYPE_CHRISTMAS];
      case 7: {
        if (tag == 56) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELetterType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELetterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoveLetterSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoveLetterSessionCmd)
  return false;
#undef DO_
}

void LoveLetterSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoveLetterSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_USE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string itemguid = 4;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->itemguid(), output);
  }

  // optional uint64 targets = 5 [default = 0];
  if (has_targets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->targets(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional .Cmd.ELetterType type = 7 [default = ELETTERTYPE_CHRISTMAS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoveLetterSessionCmd)
}

::google::protobuf::uint8* LoveLetterSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoveLetterSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_USE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string itemguid = 4;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->itemguid(), target);
  }

  // optional uint64 targets = 5 [default = 0];
  if (has_targets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->targets(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional .Cmd.ELetterType type = 7 [default = ELETTERTYPE_CHRISTMAS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoveLetterSessionCmd)
  return target;
}

int LoveLetterSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_USE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string itemguid = 4;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemguid());
    }

    // optional uint64 targets = 5 [default = 0];
    if (has_targets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targets());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .Cmd.ELetterType type = 7 [default = ELETTERTYPE_CHRISTMAS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoveLetterSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoveLetterSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoveLetterSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoveLetterSessionCmd::MergeFrom(const LoveLetterSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_targets()) {
      set_targets(from.targets());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoveLetterSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoveLetterSessionCmd::CopyFrom(const LoveLetterSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoveLetterSessionCmd::IsInitialized() const {

  return true;
}

void LoveLetterSessionCmd::Swap(LoveLetterSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(targets_, other->targets_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoveLetterSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoveLetterSessionCmd_descriptor_;
  metadata.reflection = LoveLetterSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoveLetterSendSessionCmd::kCmdFieldNumber;
const int LoveLetterSendSessionCmd::kParamFieldNumber;
const int LoveLetterSendSessionCmd::kCharidFieldNumber;
const int LoveLetterSendSessionCmd::kSendnameFieldNumber;
const int LoveLetterSendSessionCmd::kContentFieldNumber;
const int LoveLetterSendSessionCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

LoveLetterSendSessionCmd::LoveLetterSendSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoveLetterSendSessionCmd)
}

void LoveLetterSendSessionCmd::InitAsDefaultInstance() {
}

LoveLetterSendSessionCmd::LoveLetterSendSessionCmd(const LoveLetterSendSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoveLetterSendSessionCmd)
}

void LoveLetterSendSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 86;
  charid_ = GOOGLE_ULONGLONG(0);
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoveLetterSendSessionCmd::~LoveLetterSendSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoveLetterSendSessionCmd)
  SharedDtor();
}

void LoveLetterSendSessionCmd::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendname_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void LoveLetterSendSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoveLetterSendSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoveLetterSendSessionCmd_descriptor_;
}

const LoveLetterSendSessionCmd& LoveLetterSendSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

LoveLetterSendSessionCmd* LoveLetterSendSessionCmd::default_instance_ = NULL;

LoveLetterSendSessionCmd* LoveLetterSendSessionCmd::New() const {
  return new LoveLetterSendSessionCmd;
}

void LoveLetterSendSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 202;
    param_ = 86;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendname_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    type_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoveLetterSendSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoveLetterSendSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_SEND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sendname;
        break;
      }

      // optional string sendname = 4;
      case 4: {
        if (tag == 34) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELetterType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELetterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoveLetterSendSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoveLetterSendSessionCmd)
  return false;
#undef DO_
}

void LoveLetterSendSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoveLetterSendSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_SEND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string sendname = 4;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sendname(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoveLetterSendSessionCmd)
}

::google::protobuf::uint8* LoveLetterSendSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoveLetterSendSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_SEND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string sendname = 4;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sendname(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoveLetterSendSessionCmd)
  return target;
}

int LoveLetterSendSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_LOVELETTER_SEND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string sendname = 4;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoveLetterSendSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoveLetterSendSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoveLetterSendSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoveLetterSendSessionCmd::MergeFrom(const LoveLetterSendSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoveLetterSendSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoveLetterSendSessionCmd::CopyFrom(const LoveLetterSendSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoveLetterSendSessionCmd::IsInitialized() const {

  return true;
}

void LoveLetterSendSessionCmd::Swap(LoveLetterSendSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(sendname_, other->sendname_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoveLetterSendSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoveLetterSendSessionCmd_descriptor_;
  metadata.reflection = LoveLetterSendSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemCodeSessionCmd::kCmdFieldNumber;
const int UseItemCodeSessionCmd::kParamFieldNumber;
const int UseItemCodeSessionCmd::kCharidFieldNumber;
const int UseItemCodeSessionCmd::kGuidFieldNumber;
const int UseItemCodeSessionCmd::kItemidFieldNumber;
const int UseItemCodeSessionCmd::kTypeFieldNumber;
const int UseItemCodeSessionCmd::kCodeFieldNumber;
#endif  // !_MSC_VER

UseItemCodeSessionCmd::UseItemCodeSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseItemCodeSessionCmd)
}

void UseItemCodeSessionCmd::InitAsDefaultInstance() {
}

UseItemCodeSessionCmd::UseItemCodeSessionCmd(const UseItemCodeSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseItemCodeSessionCmd)
}

void UseItemCodeSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 89;
  charid_ = GOOGLE_ULONGLONG(0);
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
  type_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemCodeSessionCmd::~UseItemCodeSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UseItemCodeSessionCmd)
  SharedDtor();
}

void UseItemCodeSessionCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void UseItemCodeSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemCodeSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemCodeSessionCmd_descriptor_;
}

const UseItemCodeSessionCmd& UseItemCodeSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

UseItemCodeSessionCmd* UseItemCodeSessionCmd::default_instance_ = NULL;

UseItemCodeSessionCmd* UseItemCodeSessionCmd::New() const {
  return new UseItemCodeSessionCmd;
}

void UseItemCodeSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseItemCodeSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(itemid_, type_);
    cmd_ = 202;
    param_ = 89;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemCodeSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseItemCodeSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USE_ITEMCODE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        break;
      }

      // optional string guid = 4;
      case 4: {
        if (tag == 34) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_code;
        break;
      }

      // optional string code = 6;
      case 6: {
        if (tag == 50) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional uint32 type = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseItemCodeSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseItemCodeSessionCmd)
  return false;
#undef DO_
}

void UseItemCodeSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseItemCodeSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USE_ITEMCODE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guid(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional string code = 6;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // optional uint32 type = 7 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseItemCodeSessionCmd)
}

::google::protobuf::uint8* UseItemCodeSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseItemCodeSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USE_ITEMCODE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guid(), target);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional string code = 6;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  // optional uint32 type = 7 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseItemCodeSessionCmd)
  return target;
}

int UseItemCodeSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USE_ITEMCODE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 type = 7 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string code = 6;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemCodeSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemCodeSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemCodeSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemCodeSessionCmd::MergeFrom(const UseItemCodeSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemCodeSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemCodeSessionCmd::CopyFrom(const UseItemCodeSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemCodeSessionCmd::IsInitialized() const {

  return true;
}

void UseItemCodeSessionCmd::Swap(UseItemCodeSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(guid_, other->guid_);
    std::swap(itemid_, other->itemid_);
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemCodeSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemCodeSessionCmd_descriptor_;
  metadata.reflection = UseItemCodeSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUsedItemCodeSessionCmd::kCmdFieldNumber;
const int ReqUsedItemCodeSessionCmd::kParamFieldNumber;
const int ReqUsedItemCodeSessionCmd::kCharidFieldNumber;
const int ReqUsedItemCodeSessionCmd::kGuidFieldNumber;
const int ReqUsedItemCodeSessionCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqUsedItemCodeSessionCmd::ReqUsedItemCodeSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqUsedItemCodeSessionCmd)
}

void ReqUsedItemCodeSessionCmd::InitAsDefaultInstance() {
}

ReqUsedItemCodeSessionCmd::ReqUsedItemCodeSessionCmd(const ReqUsedItemCodeSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqUsedItemCodeSessionCmd)
}

void ReqUsedItemCodeSessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 90;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUsedItemCodeSessionCmd::~ReqUsedItemCodeSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqUsedItemCodeSessionCmd)
  SharedDtor();
}

void ReqUsedItemCodeSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqUsedItemCodeSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUsedItemCodeSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUsedItemCodeSessionCmd_descriptor_;
}

const ReqUsedItemCodeSessionCmd& ReqUsedItemCodeSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ReqUsedItemCodeSessionCmd* ReqUsedItemCodeSessionCmd::default_instance_ = NULL;

ReqUsedItemCodeSessionCmd* ReqUsedItemCodeSessionCmd::New() const {
  return new ReqUsedItemCodeSessionCmd;
}

void ReqUsedItemCodeSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    cmd_ = 202;
    param_ = 90;
    charid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUsedItemCodeSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqUsedItemCodeSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_USED_ITEMCODE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        break;
      }

      // repeated string guid = 4;
      case 4: {
        if (tag == 34) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid(this->guid_size() - 1).data(),
            this->guid(this->guid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqUsedItemCodeSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqUsedItemCodeSessionCmd)
  return false;
#undef DO_
}

void ReqUsedItemCodeSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqUsedItemCodeSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_USED_ITEMCODE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated string guid = 4;
  for (int i = 0; i < this->guid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->guid(i).data(), this->guid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "guid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guid(i), output);
  }

  // optional uint32 type = 5 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqUsedItemCodeSessionCmd)
}

::google::protobuf::uint8* ReqUsedItemCodeSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqUsedItemCodeSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_USED_ITEMCODE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated string guid = 4;
  for (int i = 0; i < this->guid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid(i).data(), this->guid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->guid(i), target);
  }

  // optional uint32 type = 5 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqUsedItemCodeSessionCmd)
  return target;
}

int ReqUsedItemCodeSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_USED_ITEMCODE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 type = 5 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated string guid = 4;
  total_size += 1 * this->guid_size();
  for (int i = 0; i < this->guid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUsedItemCodeSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUsedItemCodeSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUsedItemCodeSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUsedItemCodeSessionCmd::MergeFrom(const ReqUsedItemCodeSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  guid_.MergeFrom(from.guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUsedItemCodeSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUsedItemCodeSessionCmd::CopyFrom(const ReqUsedItemCodeSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUsedItemCodeSessionCmd::IsInitialized() const {

  return true;
}

void ReqUsedItemCodeSessionCmd::Swap(ReqUsedItemCodeSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    guid_.Swap(&other->guid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUsedItemCodeSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUsedItemCodeSessionCmd_descriptor_;
  metadata.reflection = ReqUsedItemCodeSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalActivityStartSessionCmd::kCmdFieldNumber;
const int GlobalActivityStartSessionCmd::kParamFieldNumber;
const int GlobalActivityStartSessionCmd::kIdFieldNumber;
#endif  // !_MSC_VER

GlobalActivityStartSessionCmd::GlobalActivityStartSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GlobalActivityStartSessionCmd)
}

void GlobalActivityStartSessionCmd::InitAsDefaultInstance() {
}

GlobalActivityStartSessionCmd::GlobalActivityStartSessionCmd(const GlobalActivityStartSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GlobalActivityStartSessionCmd)
}

void GlobalActivityStartSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 91;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalActivityStartSessionCmd::~GlobalActivityStartSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GlobalActivityStartSessionCmd)
  SharedDtor();
}

void GlobalActivityStartSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalActivityStartSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalActivityStartSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalActivityStartSessionCmd_descriptor_;
}

const GlobalActivityStartSessionCmd& GlobalActivityStartSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GlobalActivityStartSessionCmd* GlobalActivityStartSessionCmd::default_instance_ = NULL;

GlobalActivityStartSessionCmd* GlobalActivityStartSessionCmd::New() const {
  return new GlobalActivityStartSessionCmd;
}

void GlobalActivityStartSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 91;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalActivityStartSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GlobalActivityStartSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_START];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GlobalActivityStartSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GlobalActivityStartSessionCmd)
  return false;
#undef DO_
}

void GlobalActivityStartSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GlobalActivityStartSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_START];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GlobalActivityStartSessionCmd)
}

::google::protobuf::uint8* GlobalActivityStartSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GlobalActivityStartSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_START];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GlobalActivityStartSessionCmd)
  return target;
}

int GlobalActivityStartSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_START];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalActivityStartSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalActivityStartSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalActivityStartSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalActivityStartSessionCmd::MergeFrom(const GlobalActivityStartSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalActivityStartSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalActivityStartSessionCmd::CopyFrom(const GlobalActivityStartSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalActivityStartSessionCmd::IsInitialized() const {

  return true;
}

void GlobalActivityStartSessionCmd::Swap(GlobalActivityStartSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalActivityStartSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalActivityStartSessionCmd_descriptor_;
  metadata.reflection = GlobalActivityStartSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalActivityStopSessionCmd::kCmdFieldNumber;
const int GlobalActivityStopSessionCmd::kParamFieldNumber;
const int GlobalActivityStopSessionCmd::kIdFieldNumber;
#endif  // !_MSC_VER

GlobalActivityStopSessionCmd::GlobalActivityStopSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GlobalActivityStopSessionCmd)
}

void GlobalActivityStopSessionCmd::InitAsDefaultInstance() {
}

GlobalActivityStopSessionCmd::GlobalActivityStopSessionCmd(const GlobalActivityStopSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GlobalActivityStopSessionCmd)
}

void GlobalActivityStopSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 92;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalActivityStopSessionCmd::~GlobalActivityStopSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GlobalActivityStopSessionCmd)
  SharedDtor();
}

void GlobalActivityStopSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalActivityStopSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalActivityStopSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalActivityStopSessionCmd_descriptor_;
}

const GlobalActivityStopSessionCmd& GlobalActivityStopSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GlobalActivityStopSessionCmd* GlobalActivityStopSessionCmd::default_instance_ = NULL;

GlobalActivityStopSessionCmd* GlobalActivityStopSessionCmd::New() const {
  return new GlobalActivityStopSessionCmd;
}

void GlobalActivityStopSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 92;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalActivityStopSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GlobalActivityStopSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_STOP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GlobalActivityStopSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GlobalActivityStopSessionCmd)
  return false;
#undef DO_
}

void GlobalActivityStopSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GlobalActivityStopSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_STOP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GlobalActivityStopSessionCmd)
}

::google::protobuf::uint8* GlobalActivityStopSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GlobalActivityStopSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_STOP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GlobalActivityStopSessionCmd)
  return target;
}

int GlobalActivityStopSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GLOBALACTIVITY_STOP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalActivityStopSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalActivityStopSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalActivityStopSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalActivityStopSessionCmd::MergeFrom(const GlobalActivityStopSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalActivityStopSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalActivityStopSessionCmd::CopyFrom(const GlobalActivityStopSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalActivityStopSessionCmd::IsInitialized() const {

  return true;
}

void GlobalActivityStopSessionCmd::Swap(GlobalActivityStopSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalActivityStopSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalActivityStopSessionCmd_descriptor_;
  metadata.reflection = GlobalActivityStopSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLotteryGiveSessionCmd::kCmdFieldNumber;
const int ReqLotteryGiveSessionCmd::kParamFieldNumber;
const int ReqLotteryGiveSessionCmd::kCharidFieldNumber;
const int ReqLotteryGiveSessionCmd::kIteminfoFieldNumber;
#endif  // !_MSC_VER

ReqLotteryGiveSessionCmd::ReqLotteryGiveSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqLotteryGiveSessionCmd)
}

void ReqLotteryGiveSessionCmd::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Cmd::LotteryGiveInfo*>(&::Cmd::LotteryGiveInfo::default_instance());
}

ReqLotteryGiveSessionCmd::ReqLotteryGiveSessionCmd(const ReqLotteryGiveSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqLotteryGiveSessionCmd)
}

void ReqLotteryGiveSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 93;
  charid_ = GOOGLE_ULONGLONG(0);
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLotteryGiveSessionCmd::~ReqLotteryGiveSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqLotteryGiveSessionCmd)
  SharedDtor();
}

void ReqLotteryGiveSessionCmd::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void ReqLotteryGiveSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLotteryGiveSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLotteryGiveSessionCmd_descriptor_;
}

const ReqLotteryGiveSessionCmd& ReqLotteryGiveSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

ReqLotteryGiveSessionCmd* ReqLotteryGiveSessionCmd::default_instance_ = NULL;

ReqLotteryGiveSessionCmd* ReqLotteryGiveSessionCmd::New() const {
  return new ReqLotteryGiveSessionCmd;
}

void ReqLotteryGiveSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 93;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Cmd::LotteryGiveInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLotteryGiveSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqLotteryGiveSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_LOTTERY_GIVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iteminfo;
        break;
      }

      // optional .Cmd.LotteryGiveInfo iteminfo = 4;
      case 4: {
        if (tag == 34) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqLotteryGiveSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqLotteryGiveSessionCmd)
  return false;
#undef DO_
}

void ReqLotteryGiveSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqLotteryGiveSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_LOTTERY_GIVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.LotteryGiveInfo iteminfo = 4;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqLotteryGiveSessionCmd)
}

::google::protobuf::uint8* ReqLotteryGiveSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqLotteryGiveSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_LOTTERY_GIVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.LotteryGiveInfo iteminfo = 4;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqLotteryGiveSessionCmd)
  return target;
}

int ReqLotteryGiveSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_REQ_LOTTERY_GIVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.LotteryGiveInfo iteminfo = 4;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLotteryGiveSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLotteryGiveSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLotteryGiveSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLotteryGiveSessionCmd::MergeFrom(const ReqLotteryGiveSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Cmd::LotteryGiveInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLotteryGiveSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLotteryGiveSessionCmd::CopyFrom(const ReqLotteryGiveSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLotteryGiveSessionCmd::IsInitialized() const {

  return true;
}

void ReqLotteryGiveSessionCmd::Swap(ReqLotteryGiveSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLotteryGiveSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLotteryGiveSessionCmd_descriptor_;
  metadata.reflection = ReqLotteryGiveSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncOperateRewardSessionCmd::kCmdFieldNumber;
const int SyncOperateRewardSessionCmd::kParamFieldNumber;
const int SyncOperateRewardSessionCmd::kCharidFieldNumber;
const int SyncOperateRewardSessionCmd::kVarFieldNumber;
#endif  // !_MSC_VER

SyncOperateRewardSessionCmd::SyncOperateRewardSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncOperateRewardSessionCmd)
}

void SyncOperateRewardSessionCmd::InitAsDefaultInstance() {
}

SyncOperateRewardSessionCmd::SyncOperateRewardSessionCmd(const SyncOperateRewardSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncOperateRewardSessionCmd)
}

void SyncOperateRewardSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 95;
  charid_ = GOOGLE_ULONGLONG(0);
  var_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncOperateRewardSessionCmd::~SyncOperateRewardSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncOperateRewardSessionCmd)
  SharedDtor();
}

void SyncOperateRewardSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncOperateRewardSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncOperateRewardSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncOperateRewardSessionCmd_descriptor_;
}

const SyncOperateRewardSessionCmd& SyncOperateRewardSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SyncOperateRewardSessionCmd* SyncOperateRewardSessionCmd::default_instance_ = NULL;

SyncOperateRewardSessionCmd* SyncOperateRewardSessionCmd::New() const {
  return new SyncOperateRewardSessionCmd;
}

void SyncOperateRewardSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncOperateRewardSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, var_);
    cmd_ = 202;
    param_ = 95;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncOperateRewardSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncOperateRewardSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_OPERATE_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_var;
        break;
      }

      // optional uint32 var = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &var_)));
          set_has_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncOperateRewardSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncOperateRewardSessionCmd)
  return false;
#undef DO_
}

void SyncOperateRewardSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncOperateRewardSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_OPERATE_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 var = 4 [default = 0];
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->var(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncOperateRewardSessionCmd)
}

::google::protobuf::uint8* SyncOperateRewardSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncOperateRewardSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_OPERATE_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 var = 4 [default = 0];
  if (has_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->var(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncOperateRewardSessionCmd)
  return target;
}

int SyncOperateRewardSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_OPERATE_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 var = 4 [default = 0];
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->var());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncOperateRewardSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncOperateRewardSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncOperateRewardSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncOperateRewardSessionCmd::MergeFrom(const SyncOperateRewardSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_var()) {
      set_var(from.var());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncOperateRewardSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncOperateRewardSessionCmd::CopyFrom(const SyncOperateRewardSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncOperateRewardSessionCmd::IsInitialized() const {

  return true;
}

void SyncOperateRewardSessionCmd::Swap(SyncOperateRewardSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(var_, other->var_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncOperateRewardSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncOperateRewardSessionCmd_descriptor_;
  metadata.reflection = SyncOperateRewardSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyActivitySessionCmd::kCmdFieldNumber;
const int NotifyActivitySessionCmd::kParamFieldNumber;
const int NotifyActivitySessionCmd::kActidFieldNumber;
const int NotifyActivitySessionCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

NotifyActivitySessionCmd::NotifyActivitySessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NotifyActivitySessionCmd)
}

void NotifyActivitySessionCmd::InitAsDefaultInstance() {
}

NotifyActivitySessionCmd::NotifyActivitySessionCmd(const NotifyActivitySessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NotifyActivitySessionCmd)
}

void NotifyActivitySessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 96;
  actid_ = 0u;
  open_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyActivitySessionCmd::~NotifyActivitySessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NotifyActivitySessionCmd)
  SharedDtor();
}

void NotifyActivitySessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyActivitySessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyActivitySessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyActivitySessionCmd_descriptor_;
}

const NotifyActivitySessionCmd& NotifyActivitySessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

NotifyActivitySessionCmd* NotifyActivitySessionCmd::default_instance_ = NULL;

NotifyActivitySessionCmd* NotifyActivitySessionCmd::New() const {
  return new NotifyActivitySessionCmd;
}

void NotifyActivitySessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 202;
    param_ = 96;
    actid_ = 0u;
    open_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyActivitySessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NotifyActivitySessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_ACTIVITY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actid;
        break;
      }

      // optional uint32 actid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_actid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NotifyActivitySessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NotifyActivitySessionCmd)
  return false;
#undef DO_
}

void NotifyActivitySessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NotifyActivitySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_ACTIVITY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 actid = 3 [default = 0];
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->actid(), output);
  }

  // optional bool open = 4 [default = true];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NotifyActivitySessionCmd)
}

::google::protobuf::uint8* NotifyActivitySessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NotifyActivitySessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_ACTIVITY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 actid = 3 [default = 0];
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->actid(), target);
  }

  // optional bool open = 4 [default = true];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NotifyActivitySessionCmd)
  return target;
}

int NotifyActivitySessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_NOTIFY_ACTIVITY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 actid = 3 [default = 0];
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // optional bool open = 4 [default = true];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyActivitySessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyActivitySessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyActivitySessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyActivitySessionCmd::MergeFrom(const NotifyActivitySessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyActivitySessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyActivitySessionCmd::CopyFrom(const NotifyActivitySessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyActivitySessionCmd::IsInitialized() const {

  return true;
}

void NotifyActivitySessionCmd::Swap(NotifyActivitySessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(actid_, other->actid_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyActivitySessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyActivitySessionCmd_descriptor_;
  metadata.reflection = NotifyActivitySessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiveRewardSessionCmd::kCmdFieldNumber;
const int GiveRewardSessionCmd::kParamFieldNumber;
const int GiveRewardSessionCmd::kCharidFieldNumber;
const int GiveRewardSessionCmd::kRewardidFieldNumber;
const int GiveRewardSessionCmd::kBuffidFieldNumber;
#endif  // !_MSC_VER

GiveRewardSessionCmd::GiveRewardSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GiveRewardSessionCmd)
}

void GiveRewardSessionCmd::InitAsDefaultInstance() {
}

GiveRewardSessionCmd::GiveRewardSessionCmd(const GiveRewardSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GiveRewardSessionCmd)
}

void GiveRewardSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 98;
  charid_ = GOOGLE_ULONGLONG(0);
  rewardid_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveRewardSessionCmd::~GiveRewardSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GiveRewardSessionCmd)
  SharedDtor();
}

void GiveRewardSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiveRewardSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveRewardSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveRewardSessionCmd_descriptor_;
}

const GiveRewardSessionCmd& GiveRewardSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

GiveRewardSessionCmd* GiveRewardSessionCmd::default_instance_ = NULL;

GiveRewardSessionCmd* GiveRewardSessionCmd::New() const {
  return new GiveRewardSessionCmd;
}

void GiveRewardSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GiveRewardSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, buffid_);
    cmd_ = 202;
    param_ = 98;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiveRewardSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GiveRewardSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GIVE_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardid;
        break;
      }

      // optional uint32 rewardid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buffid;
        break;
      }

      // optional uint32 buffid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_buffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GiveRewardSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GiveRewardSessionCmd)
  return false;
#undef DO_
}

void GiveRewardSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GiveRewardSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GIVE_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 rewardid = 4 [default = 0];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardid(), output);
  }

  // optional uint32 buffid = 5 [default = 0];
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GiveRewardSessionCmd)
}

::google::protobuf::uint8* GiveRewardSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GiveRewardSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GIVE_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 rewardid = 4 [default = 0];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardid(), target);
  }

  // optional uint32 buffid = 5 [default = 0];
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GiveRewardSessionCmd)
  return target;
}

int GiveRewardSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_GIVE_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 rewardid = 4 [default = 0];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

    // optional uint32 buffid = 5 [default = 0];
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveRewardSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiveRewardSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiveRewardSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiveRewardSessionCmd::MergeFrom(const GiveRewardSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiveRewardSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveRewardSessionCmd::CopyFrom(const GiveRewardSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveRewardSessionCmd::IsInitialized() const {

  return true;
}

void GiveRewardSessionCmd::Swap(GiveRewardSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiveRewardSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveRewardSessionCmd_descriptor_;
  metadata.reflection = GiveRewardSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WantedQuestSetCDSessionCmd::kCmdFieldNumber;
const int WantedQuestSetCDSessionCmd::kParamFieldNumber;
const int WantedQuestSetCDSessionCmd::kCharidFieldNumber;
const int WantedQuestSetCDSessionCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

WantedQuestSetCDSessionCmd::WantedQuestSetCDSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WantedQuestSetCDSessionCmd)
}

void WantedQuestSetCDSessionCmd::InitAsDefaultInstance() {
}

WantedQuestSetCDSessionCmd::WantedQuestSetCDSessionCmd(const WantedQuestSetCDSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WantedQuestSetCDSessionCmd)
}

void WantedQuestSetCDSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 97;
  charid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WantedQuestSetCDSessionCmd::~WantedQuestSetCDSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WantedQuestSetCDSessionCmd)
  SharedDtor();
}

void WantedQuestSetCDSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WantedQuestSetCDSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WantedQuestSetCDSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WantedQuestSetCDSessionCmd_descriptor_;
}

const WantedQuestSetCDSessionCmd& WantedQuestSetCDSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

WantedQuestSetCDSessionCmd* WantedQuestSetCDSessionCmd::default_instance_ = NULL;

WantedQuestSetCDSessionCmd* WantedQuestSetCDSessionCmd::New() const {
  return new WantedQuestSetCDSessionCmd;
}

void WantedQuestSetCDSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WantedQuestSetCDSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, time_);
    cmd_ = 202;
    param_ = 97;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WantedQuestSetCDSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WantedQuestSetCDSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_SET_CD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WantedQuestSetCDSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WantedQuestSetCDSessionCmd)
  return false;
#undef DO_
}

void WantedQuestSetCDSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WantedQuestSetCDSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_SET_CD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WantedQuestSetCDSessionCmd)
}

::google::protobuf::uint8* WantedQuestSetCDSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WantedQuestSetCDSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_SET_CD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WantedQuestSetCDSessionCmd)
  return target;
}

int WantedQuestSetCDSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_WANTED_QUEST_SET_CD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WantedQuestSetCDSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WantedQuestSetCDSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WantedQuestSetCDSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WantedQuestSetCDSessionCmd::MergeFrom(const WantedQuestSetCDSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WantedQuestSetCDSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WantedQuestSetCDSessionCmd::CopyFrom(const WantedQuestSetCDSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WantedQuestSetCDSessionCmd::IsInitialized() const {

  return true;
}

void WantedQuestSetCDSessionCmd::Swap(WantedQuestSetCDSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WantedQuestSetCDSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WantedQuestSetCDSessionCmd_descriptor_;
  metadata.reflection = WantedQuestSetCDSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserQuotaOperSessionCmd::kCmdFieldNumber;
const int UserQuotaOperSessionCmd::kParamFieldNumber;
const int UserQuotaOperSessionCmd::kCharidFieldNumber;
const int UserQuotaOperSessionCmd::kQuotaFieldNumber;
const int UserQuotaOperSessionCmd::kOperFieldNumber;
const int UserQuotaOperSessionCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

UserQuotaOperSessionCmd::UserQuotaOperSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserQuotaOperSessionCmd)
}

void UserQuotaOperSessionCmd::InitAsDefaultInstance() {
}

UserQuotaOperSessionCmd::UserQuotaOperSessionCmd(const UserQuotaOperSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserQuotaOperSessionCmd)
}

void UserQuotaOperSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 100;
  charid_ = GOOGLE_ULONGLONG(0);
  quota_ = GOOGLE_ULONGLONG(0);
  oper_ = 0;
  type_ = 12;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserQuotaOperSessionCmd::~UserQuotaOperSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserQuotaOperSessionCmd)
  SharedDtor();
}

void UserQuotaOperSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserQuotaOperSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserQuotaOperSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserQuotaOperSessionCmd_descriptor_;
}

const UserQuotaOperSessionCmd& UserQuotaOperSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

UserQuotaOperSessionCmd* UserQuotaOperSessionCmd::default_instance_ = NULL;

UserQuotaOperSessionCmd* UserQuotaOperSessionCmd::New() const {
  return new UserQuotaOperSessionCmd;
}

void UserQuotaOperSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserQuotaOperSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, oper_);
    cmd_ = 202;
    param_ = 100;
    type_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserQuotaOperSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserQuotaOperSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_QUOTA_OPER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_oper;
        break;
      }

      // optional .Cmd.EUserQuotaOper oper = 5 [default = EUSERQUOTAOPER_MIN];
      case 5: {
        if (tag == 40) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserQuotaOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EUserQuotaOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Cmd.EQuotaType type = 6 [default = EQuotaType_U_Give_Trade];
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQuotaType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQuotaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserQuotaOperSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserQuotaOperSessionCmd)
  return false;
#undef DO_
}

void UserQuotaOperSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserQuotaOperSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_QUOTA_OPER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 quota = 4 [default = 0];
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->quota(), output);
  }

  // optional .Cmd.EUserQuotaOper oper = 5 [default = EUSERQUOTAOPER_MIN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->oper(), output);
  }

  // optional .Cmd.EQuotaType type = 6 [default = EQuotaType_U_Give_Trade];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserQuotaOperSessionCmd)
}

::google::protobuf::uint8* UserQuotaOperSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserQuotaOperSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_QUOTA_OPER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 quota = 4 [default = 0];
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->quota(), target);
  }

  // optional .Cmd.EUserQuotaOper oper = 5 [default = EUSERQUOTAOPER_MIN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->oper(), target);
  }

  // optional .Cmd.EQuotaType type = 6 [default = EQuotaType_U_Give_Trade];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserQuotaOperSessionCmd)
  return target;
}

int UserQuotaOperSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_QUOTA_OPER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 quota = 4 [default = 0];
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

    // optional .Cmd.EUserQuotaOper oper = 5 [default = EUSERQUOTAOPER_MIN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional .Cmd.EQuotaType type = 6 [default = EQuotaType_U_Give_Trade];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserQuotaOperSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserQuotaOperSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserQuotaOperSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserQuotaOperSessionCmd::MergeFrom(const UserQuotaOperSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserQuotaOperSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuotaOperSessionCmd::CopyFrom(const UserQuotaOperSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuotaOperSessionCmd::IsInitialized() const {

  return true;
}

void UserQuotaOperSessionCmd::Swap(UserQuotaOperSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(quota_, other->quota_);
    std::swap(oper_, other->oper_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserQuotaOperSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserQuotaOperSessionCmd_descriptor_;
  metadata.reflection = UserQuotaOperSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncWorldLevelSessionCmd::kCmdFieldNumber;
const int SyncWorldLevelSessionCmd::kParamFieldNumber;
const int SyncWorldLevelSessionCmd::kCharidFieldNumber;
const int SyncWorldLevelSessionCmd::kBaseWorldlevelFieldNumber;
const int SyncWorldLevelSessionCmd::kJobWorldlevelFieldNumber;
#endif  // !_MSC_VER

SyncWorldLevelSessionCmd::SyncWorldLevelSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncWorldLevelSessionCmd)
}

void SyncWorldLevelSessionCmd::InitAsDefaultInstance() {
}

SyncWorldLevelSessionCmd::SyncWorldLevelSessionCmd(const SyncWorldLevelSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncWorldLevelSessionCmd)
}

void SyncWorldLevelSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 99;
  charid_ = GOOGLE_ULONGLONG(0);
  base_worldlevel_ = 0u;
  job_worldlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncWorldLevelSessionCmd::~SyncWorldLevelSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncWorldLevelSessionCmd)
  SharedDtor();
}

void SyncWorldLevelSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncWorldLevelSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncWorldLevelSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncWorldLevelSessionCmd_descriptor_;
}

const SyncWorldLevelSessionCmd& SyncWorldLevelSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SyncWorldLevelSessionCmd* SyncWorldLevelSessionCmd::default_instance_ = NULL;

SyncWorldLevelSessionCmd* SyncWorldLevelSessionCmd::New() const {
  return new SyncWorldLevelSessionCmd;
}

void SyncWorldLevelSessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncWorldLevelSessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, job_worldlevel_);
    cmd_ = 202;
    param_ = 99;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncWorldLevelSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncWorldLevelSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_WORLD_LEVEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_worldlevel;
        break;
      }

      // optional uint32 base_worldlevel = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_base_worldlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_worldlevel_)));
          set_has_base_worldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_job_worldlevel;
        break;
      }

      // optional uint32 job_worldlevel = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_job_worldlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_worldlevel_)));
          set_has_job_worldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncWorldLevelSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncWorldLevelSessionCmd)
  return false;
#undef DO_
}

void SyncWorldLevelSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncWorldLevelSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_WORLD_LEVEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 base_worldlevel = 4 [default = 0];
  if (has_base_worldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->base_worldlevel(), output);
  }

  // optional uint32 job_worldlevel = 5 [default = 0];
  if (has_job_worldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job_worldlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncWorldLevelSessionCmd)
}

::google::protobuf::uint8* SyncWorldLevelSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncWorldLevelSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_WORLD_LEVEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 base_worldlevel = 4 [default = 0];
  if (has_base_worldlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->base_worldlevel(), target);
  }

  // optional uint32 job_worldlevel = 5 [default = 0];
  if (has_job_worldlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job_worldlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncWorldLevelSessionCmd)
  return target;
}

int SyncWorldLevelSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_SYNC_WORLD_LEVEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 base_worldlevel = 4 [default = 0];
    if (has_base_worldlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_worldlevel());
    }

    // optional uint32 job_worldlevel = 5 [default = 0];
    if (has_job_worldlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job_worldlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncWorldLevelSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncWorldLevelSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncWorldLevelSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncWorldLevelSessionCmd::MergeFrom(const SyncWorldLevelSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_base_worldlevel()) {
      set_base_worldlevel(from.base_worldlevel());
    }
    if (from.has_job_worldlevel()) {
      set_job_worldlevel(from.job_worldlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncWorldLevelSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncWorldLevelSessionCmd::CopyFrom(const SyncWorldLevelSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncWorldLevelSessionCmd::IsInitialized() const {

  return true;
}

void SyncWorldLevelSessionCmd::Swap(SyncWorldLevelSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(base_worldlevel_, other->base_worldlevel_);
    std::swap(job_worldlevel_, other->job_worldlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncWorldLevelSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncWorldLevelSessionCmd_descriptor_;
  metadata.reflection = SyncWorldLevelSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserEnterSceneSessionCmd::kCmdFieldNumber;
const int UserEnterSceneSessionCmd::kParamFieldNumber;
const int UserEnterSceneSessionCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

UserEnterSceneSessionCmd::UserEnterSceneSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserEnterSceneSessionCmd)
}

void UserEnterSceneSessionCmd::InitAsDefaultInstance() {
}

UserEnterSceneSessionCmd::UserEnterSceneSessionCmd(const UserEnterSceneSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserEnterSceneSessionCmd)
}

void UserEnterSceneSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 102;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEnterSceneSessionCmd::~UserEnterSceneSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserEnterSceneSessionCmd)
  SharedDtor();
}

void UserEnterSceneSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserEnterSceneSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEnterSceneSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserEnterSceneSessionCmd_descriptor_;
}

const UserEnterSceneSessionCmd& UserEnterSceneSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

UserEnterSceneSessionCmd* UserEnterSceneSessionCmd::default_instance_ = NULL;

UserEnterSceneSessionCmd* UserEnterSceneSessionCmd::New() const {
  return new UserEnterSceneSessionCmd;
}

void UserEnterSceneSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 102;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserEnterSceneSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserEnterSceneSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_ENTERSCENE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserEnterSceneSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserEnterSceneSessionCmd)
  return false;
#undef DO_
}

void UserEnterSceneSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserEnterSceneSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_ENTERSCENE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserEnterSceneSessionCmd)
}

::google::protobuf::uint8* UserEnterSceneSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserEnterSceneSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_ENTERSCENE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserEnterSceneSessionCmd)
  return target;
}

int UserEnterSceneSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_ENTERSCENE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEnterSceneSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserEnterSceneSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserEnterSceneSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserEnterSceneSessionCmd::MergeFrom(const UserEnterSceneSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserEnterSceneSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEnterSceneSessionCmd::CopyFrom(const UserEnterSceneSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEnterSceneSessionCmd::IsInitialized() const {

  return true;
}

void UserEnterSceneSessionCmd::Swap(UserEnterSceneSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserEnterSceneSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserEnterSceneSessionCmd_descriptor_;
  metadata.reflection = UserEnterSceneSessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncUserVarSessionCmd::kCmdFieldNumber;
const int SyncUserVarSessionCmd::kParamFieldNumber;
const int SyncUserVarSessionCmd::kCharidFieldNumber;
const int SyncUserVarSessionCmd::kVarsFieldNumber;
#endif  // !_MSC_VER

SyncUserVarSessionCmd::SyncUserVarSessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncUserVarSessionCmd)
}

void SyncUserVarSessionCmd::InitAsDefaultInstance() {
}

SyncUserVarSessionCmd::SyncUserVarSessionCmd(const SyncUserVarSessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncUserVarSessionCmd)
}

void SyncUserVarSessionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 202;
  param_ = 101;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncUserVarSessionCmd::~SyncUserVarSessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncUserVarSessionCmd)
  SharedDtor();
}

void SyncUserVarSessionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncUserVarSessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncUserVarSessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncUserVarSessionCmd_descriptor_;
}

const SyncUserVarSessionCmd& SyncUserVarSessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionCmd_2eproto();
  return *default_instance_;
}

SyncUserVarSessionCmd* SyncUserVarSessionCmd::default_instance_ = NULL;

SyncUserVarSessionCmd* SyncUserVarSessionCmd::New() const {
  return new SyncUserVarSessionCmd;
}

void SyncUserVarSessionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 202;
    param_ = 101;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  vars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncUserVarSessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncUserVarSessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_VAR_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SessionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SessionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vars;
        break;
      }

      // repeated .Cmd.Var vars = 4;
      case 4: {
        if (tag == 34) {
         parse_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vars;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncUserVarSessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncUserVarSessionCmd)
  return false;
#undef DO_
}

void SyncUserVarSessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncUserVarSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_VAR_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.Var vars = 4;
  for (int i = 0; i < this->vars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncUserVarSessionCmd)
}

::google::protobuf::uint8* SyncUserVarSessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncUserVarSessionCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_VAR_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.Var vars = 4;
  for (int i = 0; i < this->vars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncUserVarSessionCmd)
  return target;
}

int SyncUserVarSessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SessionParam param = 2 [default = SESSIONPARAM_USER_VAR_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.Var vars = 4;
  total_size += 1 * this->vars_size();
  for (int i = 0; i < this->vars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncUserVarSessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncUserVarSessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncUserVarSessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncUserVarSessionCmd::MergeFrom(const SyncUserVarSessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  vars_.MergeFrom(from.vars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncUserVarSessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncUserVarSessionCmd::CopyFrom(const SyncUserVarSessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncUserVarSessionCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void SyncUserVarSessionCmd::Swap(SyncUserVarSessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    vars_.Swap(&other->vars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncUserVarSessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncUserVarSessionCmd_descriptor_;
  metadata.reflection = SyncUserVarSessionCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
