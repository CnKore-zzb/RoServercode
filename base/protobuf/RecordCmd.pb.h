// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecordCmd.proto

#ifndef PROTOBUF_RecordCmd_2eproto__INCLUDED
#define PROTOBUF_RecordCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
#include "Var.pb.h"
#include "SceneUser2.pb.h"
#include "SceneSkill.pb.h"
#include "SceneQuest.pb.h"
#include "SceneItem.pb.h"
#include "ScenePet.pb.h"
#include "SceneTip.pb.h"
#include "SceneSeal.pb.h"
#include "SessionCmd.pb.h"
#include "InfiniteTower.pb.h"
#include "SceneManual.pb.h"
#include "SceneInterlocution.pb.h"
#include "UserEvent.pb.h"
#include "SceneUser.pb.h"
#include "SceneMap.pb.h"
#include "GuildSCmd.pb.h"
#include "TeamCmd.pb.h"
#include "AchieveCmd.pb.h"
#include "FuBenCmd.pb.h"
#include "AstrolabeCmd.pb.h"
#include "PhotoCmd.pb.h"
#include "SceneFood.pb.h"
#include "Tutor.pb.h"
#include "ActivityEvent.pb.h"
#include "SceneBeing.pb.h"
#include "SessionShop.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RecordCmd_2eproto();
void protobuf_AssignDesc_RecordCmd_2eproto();
void protobuf_ShutdownFile_RecordCmd_2eproto();

class NotifyLoginRecordCmd;
class RecordUserData;
class RedisUserData;
class UserDataRecordCmd;
class ErrUserCharBaseRecordCmd;
class MusicUpdateCmd;
class LoadLuaSceneRecordCmd;
class ItemModifyRecordCmd;
class ChangeAuthorizeRecordCmd;
class GuildMusicQueryRecordCmd;
class GuildMusicUpdateCmd;
class GuildMusicDeleteRecordCmd;
class UserBaseData;
class BlobData;
class UserAccData;
class BlobAccData;
class BlobAccUser;
class BlobUnsolvedPhoto;
class BlobBoss;
class BlobUser;
class SkillReplaceInfo;
class SkillShortcutDB;
class UserSkillData;
class BlobShareSkill;
class UserRoleData;
class BlobFighter;
class StageStepNormalBlob;
class StageStepHardBlob;
class StageBlobItem;
class BlobStage;
class QuestNpcData;
class BlobQuestNpc;
class BufferStateBlob;
class BlobBuffer;
class BlobPortrait;
class BlobHair;
class BlobGearItem;
class BlobGears;
class BlobTipItem;
class BlobTips;
class FollowerItem;
class BlobFollower;
class BlobCDTime;
class BlobShortcut;
class BlobGMEffectItem;
class BlobGMEffects;
class BlobFreyja;
class BlobTransfer;
class BlobLaboratory;
class SceneryItem;
class SceneryMapItem;
class BlobScenery;
class BlobCarrier;
class BlobMenu;
class BlobShopGotItem;
class BlobExchangeShop;
class BlobKnownMaps;
class BlobInter;
class BlobHands;
class BlobShow;
class BlobTrace;
class BlobOption;
class BlobDojo;
class FoodItemInfo;
class FoodLimitInfo;
class BlobFood;
class BlobHighRefine;
class PackageData;
class ItemUseCount;
class ItemGetCount;
class RewardSafetyItem;
class BlobPack;
class MapQuest;
class BlobQuestPuzzle;
class BlobQuest;
class BlobTitle;
class BlobLineData;
class BlobLine;
class BlobSpEffect;
class BlobHandNpc;
class BlobPet;
class BlobWeaponPet;
class BlobVar;
class BlobAccVar;
class SkillDamage;
class StatKillMonster;
class BlobStatVar;
class BlobChatMsg;
class BlobUserTower;
class BlobSeal;
class BlobManual;
class BlobFirstActionDone;
class BlobAttr;
class MonsterNum;
class BlobCamera;
class RaidZone;
class BlobZone;
class BlobGuild;
class BlobTeam;
class BlobUserZone;
class BlobAccQuest;
class BlobGlobalTower;
class GlobalSocialFocus;
class BlobGlobalSociality;
class ChargeData;
class BlobDeposit;
class BlobTicketData;
class BlobTicketCacheCmd;
class BlobTicket;
class BlobCredit;
class BlobNewCredit;
class ChatCount;
class ChatItem;
class BlobChat;
class ActivityCommonData;
class BlobActivity;
class BlobRelation;
class ShareNormal;
class ShareCalcItem;
class ShareCalc;
class ShareFirstMvp;
class ShareFirstHand;
class ShareFirstCarrier;
class ShareTrade;
class ShareDamage;
class BlobShare;
class AchieveDBItem;
class BlobAchieve;
class BlobAuthorize;
class GuildRaid;
class BlobGuildRaid;
class AstrolabeStarData;
class AstrolabeData;
class AstrolabeMainData;
class BlobAstrolabe;
class PetAdventureDBItem;
class BlobPetAdventure;
class BlobPetWork;
class BlobEye;
class BlobTutorTask;
class BlobActivityEvent;
class BlobGuildChallenge;
class BlobGvgData;
class BlobUserData;
class DelPatchCharRecordCmd;
class BlobChatItem;
class ChatSaveRecordCmd;
class QueryChatRecordCmd;
class UserRenameQueryRecordCmd;
class UserRenameResultRecordCmd;
class LotteryResultRecordCmd;
class BlobBattle;
class BlobSeeNpc;
class BlobSettings;
class BlobPhoto;
class BlobUserPet;
class BlobUserBeing;
class BlobJoyData;
class LotteryPoolData;
class BlobLottery;
class BlobServant;
class ProfessionData;
class ProfessionSvrData;
class BlobProfession;
class BlobRecordInfo;
class UserProfessionData;
class ReqUserProfessionCmd;
class ProfessionSaveRecordCmd;
class ProfessionQueryRecordCmd;
class ActivityQuestItem;
class BlobActivityQuest;
class BlobBooth;
class BlobElementElfData;
class CheatTagRecordCmd;
class CheatTagQueryRecordCmd;

enum RecordParam {
  RECORDPARAM_NOTIFYLOGIN = 1,
  RECORDPARAM_USERDATA = 2,
  RECORDPARAM_ERROR_USERDATA = 3,
  RECORDPARAM_MUSIC_DATA = 6,
  RECORDPARAM_LOADLUA = 7,
  RECORDPARAM_STORE_PUT = 8,
  RECORDPARAM_STORE_OFF = 9,
  RECORDPARAM_STORE_ITEMMODIFY = 10,
  RECORDPARAM_DEL_PATCH_CHAR = 11,
  RECORDPARAM_CHAT_SAVE = 12,
  RECORDPARAM_CHAT_QUERY = 13,
  RECORDPARAM_AUTHORIZE_CHANGE = 14,
  RECORDPARAM_GUILD_MUSIC_QUERY = 15,
  RECORDPARAM_GUILD_MUSIC_UPDATE = 16,
  RECORDPARAM_GUILD_MUSIC_DELETE = 17,
  RECORDPARAM_USER_RENAME_QUERY = 18,
  RECORDPARAM_USER_RENAME_RESULT = 19,
  RECORDPARAM_LOTTERY_RESULT = 20,
  RECORDPARAM_USER_PROFESSION = 21,
  RECORDPARAM_PROFESSION_SAVE = 22,
  RECORDPARAM_PROFESSION_QUERY = 23,
  RECORDPARAM_CHEAT_TAG = 24,
  RECORDPARAM_CHEAT_TAG_QUERY = 25
};
bool RecordParam_IsValid(int value);
const RecordParam RecordParam_MIN = RECORDPARAM_NOTIFYLOGIN;
const RecordParam RecordParam_MAX = RECORDPARAM_CHEAT_TAG_QUERY;
const int RecordParam_ARRAYSIZE = RecordParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordParam_descriptor();
inline const ::std::string& RecordParam_Name(RecordParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordParam_descriptor(), value);
}
inline bool RecordParam_Parse(
    const ::std::string& name, RecordParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordParam>(
    RecordParam_descriptor(), name, value);
}
enum ETicketType {
  ETicketType_AddGiveItem = 1,
  ETicketType_AuctionTake = 2
};
bool ETicketType_IsValid(int value);
const ETicketType ETicketType_MIN = ETicketType_AddGiveItem;
const ETicketType ETicketType_MAX = ETicketType_AuctionTake;
const int ETicketType_ARRAYSIZE = ETicketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETicketType_descriptor();
inline const ::std::string& ETicketType_Name(ETicketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETicketType_descriptor(), value);
}
inline bool ETicketType_Parse(
    const ::std::string& name, ETicketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETicketType>(
    ETicketType_descriptor(), name, value);
}
enum ETicketRet {
  ETickRet_No = 0,
  ETickRet_Ok = 1,
  ETickRet_Error = 2
};
bool ETicketRet_IsValid(int value);
const ETicketRet ETicketRet_MIN = ETickRet_No;
const ETicketRet ETicketRet_MAX = ETickRet_Error;
const int ETicketRet_ARRAYSIZE = ETicketRet_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETicketRet_descriptor();
inline const ::std::string& ETicketRet_Name(ETicketRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETicketRet_descriptor(), value);
}
inline bool ETicketRet_Parse(
    const ::std::string& name, ETicketRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETicketRet>(
    ETicketRet_descriptor(), name, value);
}
enum ETicketCmdType {
  ETicketCmdType_Auction = 1
};
bool ETicketCmdType_IsValid(int value);
const ETicketCmdType ETicketCmdType_MIN = ETicketCmdType_Auction;
const ETicketCmdType ETicketCmdType_MAX = ETicketCmdType_Auction;
const int ETicketCmdType_ARRAYSIZE = ETicketCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETicketCmdType_descriptor();
inline const ::std::string& ETicketCmdType_Name(ETicketCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETicketCmdType_descriptor(), value);
}
inline bool ETicketCmdType_Parse(
    const ::std::string& name, ETicketCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETicketCmdType>(
    ETicketCmdType_descriptor(), name, value);
}
enum EShareDataType {
  ESHAREDATATYPE_MIN = 0,
  ESHAREDATATYPE_S_BATTLETIME = 1,
  ESHAREDATATYPE_S_KILLMONSTER = 2,
  ESHAREDATATYPE_S_MVPCOUNT = 3,
  ESHAREDATATYPE_S_MINICOUNT = 4,
  ESHAREDATATYPE_S_MOVEDIS = 5,
  ESHAREDATATYPE_S_PHOTOCOUNT = 6,
  ESHAREDATATYPE_N_FRIENDCOUNT = 7,
  ESHAREDATATYPE_S_TRADECOST = 8,
  ESHAREDATATYPE_S_TRADEGAIN = 9,
  ESHAREDATATYPE_S_REFINECOUNT = 10,
  ESHAREDATATYPE_S_REFINESUCCESS = 11,
  ESHAREDATATYPE_S_REFINEDAMAGE = 12,
  ESHAREDATATYPE_S_ENCHANTCOUNT = 13,
  ESHAREDATATYPE_S_ENCHANTCOST = 14,
  ESHAREDATATYPE_S_HUEDIE = 15,
  ESHAREDATATYPE_S_CANGYING = 16,
  ESHAREDATATYPE_MAX_TOWER = 17,
  ESHAREDATATYPE_MOST_KILLMONSTER = 18,
  ESHAREDATATYPE_MOST_DROPITEM = 19,
  ESHAREDATATYPE_MOST_TEAM = 20,
  ESHAREDATATYPE_MOST_HAND = 21,
  ESHAREDATATYPE_MOST_SAVE = 22,
  ESHAREDATATYPE_MOST_BESAVED = 23,
  ESHAREDATATYPE_MOST_WHELL = 24,
  ESHAREDATATYPE_MOST_CHAT = 25,
  ESHAREDATATYPE_MOST_TEAMTIME = 26,
  ESHAREDATATYPE_MOST_HANDTIME = 27,
  ESHAREDATATYPE_S_LOGINCOUNT = 28,
  ESHAREDATATYPE_S_BE_PRO_1_TIME = 29,
  ESHAREDATATYPE_S_BE_PRO_2_TIME = 30,
  ESHAREDATATYPE_S_BE_PRO_3_TIME = 31,
  ESHAREDATATYPE_MOST_MUSICCD = 32,
  ESHAREDATATYPE_MOST_HAND_TIMECOUNT = 33,
  ESHAREDATATYPE_MOST_EXPRESSION = 34,
  ESHAREDATATYPE_MOST_BARRAGEMSG = 35,
  ESHAREDATATYPE_MOST_CARRIER = 36,
  ESHAREDATATYPE_MOST_HANDMUSIC = 37,
  ESHAREDATATYPE_MAX = 38
};
bool EShareDataType_IsValid(int value);
const EShareDataType EShareDataType_MIN = ESHAREDATATYPE_MIN;
const EShareDataType EShareDataType_MAX = ESHAREDATATYPE_MAX;
const int EShareDataType_ARRAYSIZE = EShareDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EShareDataType_descriptor();
inline const ::std::string& EShareDataType_Name(EShareDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EShareDataType_descriptor(), value);
}
inline bool EShareDataType_Parse(
    const ::std::string& name, EShareDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EShareDataType>(
    EShareDataType_descriptor(), name, value);
}
enum EPatchType {
  EPATCHTYPE_QUEST = 1
};
bool EPatchType_IsValid(int value);
const EPatchType EPatchType_MIN = EPATCHTYPE_QUEST;
const EPatchType EPatchType_MAX = EPATCHTYPE_QUEST;
const int EPatchType_ARRAYSIZE = EPatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPatchType_descriptor();
inline const ::std::string& EPatchType_Name(EPatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPatchType_descriptor(), value);
}
inline bool EPatchType_Parse(
    const ::std::string& name, EPatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPatchType>(
    EPatchType_descriptor(), name, value);
}
// ===================================================================

class NotifyLoginRecordCmd : public ::google::protobuf::Message {
 public:
  NotifyLoginRecordCmd();
  virtual ~NotifyLoginRecordCmd();

  NotifyLoginRecordCmd(const NotifyLoginRecordCmd& from);

  inline NotifyLoginRecordCmd& operator=(const NotifyLoginRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyLoginRecordCmd& default_instance();

  void Swap(NotifyLoginRecordCmd* other);

  // implements Message ----------------------------------------------

  NotifyLoginRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyLoginRecordCmd& from);
  void MergeFrom(const NotifyLoginRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_NOTIFYLOGIN];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 accid = 4 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string sceneName = 5;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kSceneNameFieldNumber = 5;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // @@protoc_insertion_point(class_scope:Cmd.NotifyLoginRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_scenename();
  inline void clear_has_scenename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 accid_;
  ::std::string* scenename_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static NotifyLoginRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class RecordUserData : public ::google::protobuf::Message {
 public:
  RecordUserData();
  virtual ~RecordUserData();

  RecordUserData(const RecordUserData& from);

  inline RecordUserData& operator=(const RecordUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordUserData& default_instance();

  void Swap(RecordUserData* other);

  // implements Message ----------------------------------------------

  RecordUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordUserData& from);
  void MergeFrom(const RecordUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.UserAccData acc = 1;
  inline bool has_acc() const;
  inline void clear_acc();
  static const int kAccFieldNumber = 1;
  inline const ::Cmd::UserAccData& acc() const;
  inline ::Cmd::UserAccData* mutable_acc();
  inline ::Cmd::UserAccData* release_acc();
  inline void set_allocated_acc(::Cmd::UserAccData* acc);

  // optional .Cmd.UserBaseData base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::Cmd::UserBaseData& base() const;
  inline ::Cmd::UserBaseData* mutable_base();
  inline ::Cmd::UserBaseData* release_base();
  inline void set_allocated_base(::Cmd::UserBaseData* base);

  // optional .Cmd.RedisUserData redis = 3;
  inline bool has_redis() const;
  inline void clear_redis();
  static const int kRedisFieldNumber = 3;
  inline const ::Cmd::RedisUserData& redis() const;
  inline ::Cmd::RedisUserData* mutable_redis();
  inline ::Cmd::RedisUserData* release_redis();
  inline void set_allocated_redis(::Cmd::RedisUserData* redis);

  // optional bytes acc_data = 4;
  inline bool has_acc_data() const;
  inline void clear_acc_data();
  static const int kAccDataFieldNumber = 4;
  inline const ::std::string& acc_data() const;
  inline void set_acc_data(const ::std::string& value);
  inline void set_acc_data(const char* value);
  inline void set_acc_data(const void* value, size_t size);
  inline ::std::string* mutable_acc_data();
  inline ::std::string* release_acc_data();
  inline void set_allocated_acc_data(::std::string* acc_data);

  // optional bytes char_data = 5;
  inline bool has_char_data() const;
  inline void clear_char_data();
  static const int kCharDataFieldNumber = 5;
  inline const ::std::string& char_data() const;
  inline void set_char_data(const ::std::string& value);
  inline void set_char_data(const char* value);
  inline void set_char_data(const void* value, size_t size);
  inline ::std::string* mutable_char_data();
  inline ::std::string* release_char_data();
  inline void set_allocated_char_data(::std::string* char_data);

  // @@protoc_insertion_point(class_scope:Cmd.RecordUserData)
 private:
  inline void set_has_acc();
  inline void clear_has_acc();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_redis();
  inline void clear_has_redis();
  inline void set_has_acc_data();
  inline void clear_has_acc_data();
  inline void set_has_char_data();
  inline void clear_has_char_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::UserAccData* acc_;
  ::Cmd::UserBaseData* base_;
  ::Cmd::RedisUserData* redis_;
  ::std::string* acc_data_;
  ::std::string* char_data_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static RecordUserData* default_instance_;
};
// -------------------------------------------------------------------

class RedisUserData : public ::google::protobuf::Message {
 public:
  RedisUserData();
  virtual ~RedisUserData();

  RedisUserData(const RedisUserData& from);

  inline RedisUserData& operator=(const RedisUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisUserData& default_instance();

  void Swap(RedisUserData* other);

  // implements Message ----------------------------------------------

  RedisUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedisUserData& from);
  void MergeFrom(const RedisUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 portrait = 5 [default = 0];
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 5;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 clothcolor = 13 [default = 0];
  inline bool has_clothcolor() const;
  inline void clear_clothcolor();
  static const int kClothcolorFieldNumber = 13;
  inline ::google::protobuf::uint32 clothcolor() const;
  inline void set_clothcolor(::google::protobuf::uint32 value);

  // optional uint32 manuallv = 20 [default = 0];
  inline bool has_manuallv() const;
  inline void clear_manuallv();
  static const int kManuallvFieldNumber = 20;
  inline ::google::protobuf::uint32 manuallv() const;
  inline void set_manuallv(::google::protobuf::uint32 value);

  // optional uint32 manualexp = 21 [default = 0];
  inline bool has_manualexp() const;
  inline void clear_manualexp();
  static const int kManualexpFieldNumber = 21;
  inline ::google::protobuf::uint32 manualexp() const;
  inline void set_manualexp(::google::protobuf::uint32 value);

  // optional uint32 querytype = 23 [default = 0];
  inline bool has_querytype() const;
  inline void clear_querytype();
  static const int kQuerytypeFieldNumber = 23;
  inline ::google::protobuf::uint32 querytype() const;
  inline void set_querytype(::google::protobuf::uint32 value);

  // optional uint32 profic = 24 [default = 0];
  inline bool has_profic() const;
  inline void clear_profic();
  static const int kProficFieldNumber = 24;
  inline ::google::protobuf::uint32 profic() const;
  inline void set_profic(::google::protobuf::uint32 value);

  // optional bool blink = 26 [default = false];
  inline bool has_blink() const;
  inline void clear_blink();
  static const int kBlinkFieldNumber = 26;
  inline bool blink() const;
  inline void set_blink(bool value);

  // optional bool canbetutor = 27 [default = false];
  inline bool has_canbetutor() const;
  inline void clear_canbetutor();
  static const int kCanbetutorFieldNumber = 27;
  inline bool canbetutor() const;
  inline void set_canbetutor(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.RedisUserData)
 private:
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_clothcolor();
  inline void clear_has_clothcolor();
  inline void set_has_manuallv();
  inline void clear_has_manuallv();
  inline void set_has_manualexp();
  inline void clear_has_manualexp();
  inline void set_has_querytype();
  inline void clear_has_querytype();
  inline void set_has_profic();
  inline void clear_has_profic();
  inline void set_has_blink();
  inline void clear_has_blink();
  inline void set_has_canbetutor();
  inline void clear_has_canbetutor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 clothcolor_;
  ::google::protobuf::uint32 manuallv_;
  ::google::protobuf::uint32 manualexp_;
  ::google::protobuf::uint32 querytype_;
  ::google::protobuf::uint32 profic_;
  bool blink_;
  bool canbetutor_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static RedisUserData* default_instance_;
};
// -------------------------------------------------------------------

class UserDataRecordCmd : public ::google::protobuf::Message {
 public:
  UserDataRecordCmd();
  virtual ~UserDataRecordCmd();

  UserDataRecordCmd(const UserDataRecordCmd& from);

  inline UserDataRecordCmd& operator=(const UserDataRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDataRecordCmd& default_instance();

  void Swap(UserDataRecordCmd* other);

  // implements Message ----------------------------------------------

  UserDataRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDataRecordCmd& from);
  void MergeFrom(const UserDataRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USERDATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 accid = 4;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint32 unregType = 5;
  inline bool has_unregtype() const;
  inline void clear_unregtype();
  static const int kUnregTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 unregtype() const;
  inline void set_unregtype(::google::protobuf::uint32 value);

  // optional bool first = 6 [default = false];
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 6;
  inline bool first() const;
  inline void set_first(bool value);

  // optional bool over = 7 [default = false];
  inline bool has_over() const;
  inline void clear_over();
  static const int kOverFieldNumber = 7;
  inline bool over() const;
  inline void set_over(bool value);

  // optional bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Cmd.UserDataRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_unregtype();
  inline void clear_has_unregtype();
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_over();
  inline void clear_has_over();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::uint32 unregtype_;
  bool first_;
  bool over_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserDataRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class ErrUserCharBaseRecordCmd : public ::google::protobuf::Message {
 public:
  ErrUserCharBaseRecordCmd();
  virtual ~ErrUserCharBaseRecordCmd();

  ErrUserCharBaseRecordCmd(const ErrUserCharBaseRecordCmd& from);

  inline ErrUserCharBaseRecordCmd& operator=(const ErrUserCharBaseRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrUserCharBaseRecordCmd& default_instance();

  void Swap(ErrUserCharBaseRecordCmd* other);

  // implements Message ----------------------------------------------

  ErrUserCharBaseRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrUserCharBaseRecordCmd& from);
  void MergeFrom(const ErrUserCharBaseRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_ERROR_USERDATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ErrUserCharBaseRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ErrUserCharBaseRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class MusicUpdateCmd : public ::google::protobuf::Message {
 public:
  MusicUpdateCmd();
  virtual ~MusicUpdateCmd();

  MusicUpdateCmd(const MusicUpdateCmd& from);

  inline MusicUpdateCmd& operator=(const MusicUpdateCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicUpdateCmd& default_instance();

  void Swap(MusicUpdateCmd* other);

  // implements Message ----------------------------------------------

  MusicUpdateCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicUpdateCmd& from);
  void MergeFrom(const MusicUpdateCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_MUSIC_DATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional .Cmd.MusicItem item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::Cmd::MusicItem& item() const;
  inline ::Cmd::MusicItem* mutable_item();
  inline ::Cmd::MusicItem* release_item();
  inline void set_allocated_item(::Cmd::MusicItem* item);

  // @@protoc_insertion_point(class_scope:Cmd.MusicUpdateCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::MusicItem* item_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static MusicUpdateCmd* default_instance_;
};
// -------------------------------------------------------------------

class LoadLuaSceneRecordCmd : public ::google::protobuf::Message {
 public:
  LoadLuaSceneRecordCmd();
  virtual ~LoadLuaSceneRecordCmd();

  LoadLuaSceneRecordCmd(const LoadLuaSceneRecordCmd& from);

  inline LoadLuaSceneRecordCmd& operator=(const LoadLuaSceneRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadLuaSceneRecordCmd& default_instance();

  void Swap(LoadLuaSceneRecordCmd* other);

  // implements Message ----------------------------------------------

  LoadLuaSceneRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadLuaSceneRecordCmd& from);
  void MergeFrom(const LoadLuaSceneRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOADLUA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional string table = 3;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 3;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const char* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // optional string lua = 4;
  inline bool has_lua() const;
  inline void clear_lua();
  static const int kLuaFieldNumber = 4;
  inline const ::std::string& lua() const;
  inline void set_lua(const ::std::string& value);
  inline void set_lua(const char* value);
  inline void set_lua(const char* value, size_t size);
  inline ::std::string* mutable_lua();
  inline ::std::string* release_lua();
  inline void set_allocated_lua(::std::string* lua);

  // optional string log = 5;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 5;
  inline const ::std::string& log() const;
  inline void set_log(const ::std::string& value);
  inline void set_log(const char* value);
  inline void set_log(const char* value, size_t size);
  inline ::std::string* mutable_log();
  inline ::std::string* release_log();
  inline void set_allocated_log(::std::string* log);

  // @@protoc_insertion_point(class_scope:Cmd.LoadLuaSceneRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_lua();
  inline void clear_has_lua();
  inline void set_has_log();
  inline void clear_has_log();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* table_;
  ::std::string* lua_;
  ::std::string* log_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static LoadLuaSceneRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class ItemModifyRecordCmd : public ::google::protobuf::Message {
 public:
  ItemModifyRecordCmd();
  virtual ~ItemModifyRecordCmd();

  ItemModifyRecordCmd(const ItemModifyRecordCmd& from);

  inline ItemModifyRecordCmd& operator=(const ItemModifyRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemModifyRecordCmd& default_instance();

  void Swap(ItemModifyRecordCmd* other);

  // implements Message ----------------------------------------------

  ItemModifyRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemModifyRecordCmd& from);
  void MergeFrom(const ItemModifyRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_STORE_ITEMMODIFY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 accid = 3 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint64 charid = 4 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 newid = 7 [default = 0];
  inline bool has_newid() const;
  inline void clear_newid();
  static const int kNewidFieldNumber = 7;
  inline ::google::protobuf::uint32 newid() const;
  inline void set_newid(::google::protobuf::uint32 value);

  // optional string scenename = 5;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kScenenameFieldNumber = 5;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // optional string guid = 6;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 6;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:Cmd.ItemModifyRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_newid();
  inline void clear_has_newid();
  inline void set_has_scenename();
  inline void clear_has_scenename();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::uint64 charid_;
  ::std::string* scenename_;
  ::std::string* guid_;
  ::google::protobuf::uint32 newid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ItemModifyRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChangeAuthorizeRecordCmd : public ::google::protobuf::Message {
 public:
  ChangeAuthorizeRecordCmd();
  virtual ~ChangeAuthorizeRecordCmd();

  ChangeAuthorizeRecordCmd(const ChangeAuthorizeRecordCmd& from);

  inline ChangeAuthorizeRecordCmd& operator=(const ChangeAuthorizeRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeAuthorizeRecordCmd& default_instance();

  void Swap(ChangeAuthorizeRecordCmd* other);

  // implements Message ----------------------------------------------

  ChangeAuthorizeRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeAuthorizeRecordCmd& from);
  void MergeFrom(const ChangeAuthorizeRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_AUTHORIZE_CHANGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 accid = 3 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint32 resettime = 5;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResettimeFieldNumber = 5;
  inline ::google::protobuf::uint32 resettime() const;
  inline void set_resettime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ChangeAuthorizeRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 accid_;
  ::std::string* password_;
  ::google::protobuf::uint32 resettime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ChangeAuthorizeRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class GuildMusicQueryRecordCmd : public ::google::protobuf::Message {
 public:
  GuildMusicQueryRecordCmd();
  virtual ~GuildMusicQueryRecordCmd();

  GuildMusicQueryRecordCmd(const GuildMusicQueryRecordCmd& from);

  inline GuildMusicQueryRecordCmd& operator=(const GuildMusicQueryRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMusicQueryRecordCmd& default_instance();

  void Swap(GuildMusicQueryRecordCmd* other);

  // implements Message ----------------------------------------------

  GuildMusicQueryRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMusicQueryRecordCmd& from);
  void MergeFrom(const GuildMusicQueryRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional string scenename = 3;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kScenenameFieldNumber = 3;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // optional uint32 sceneid = 4 [default = 0];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 4;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // optional uint64 guildid = 5 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 5;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // repeated .Cmd.MusicItem items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::Cmd::MusicItem& items(int index) const;
  inline ::Cmd::MusicItem* mutable_items(int index);
  inline ::Cmd::MusicItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.GuildMusicQueryRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_scenename();
  inline void clear_has_scenename();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* scenename_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem > items_;
  ::google::protobuf::uint32 sceneid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static GuildMusicQueryRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class GuildMusicUpdateCmd : public ::google::protobuf::Message {
 public:
  GuildMusicUpdateCmd();
  virtual ~GuildMusicUpdateCmd();

  GuildMusicUpdateCmd(const GuildMusicUpdateCmd& from);

  inline GuildMusicUpdateCmd& operator=(const GuildMusicUpdateCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMusicUpdateCmd& default_instance();

  void Swap(GuildMusicUpdateCmd* other);

  // implements Message ----------------------------------------------

  GuildMusicUpdateCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMusicUpdateCmd& from);
  void MergeFrom(const GuildMusicUpdateCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_UPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 guildid = 3 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 3;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional .Cmd.MusicItem item = 4;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::Cmd::MusicItem& item() const;
  inline ::Cmd::MusicItem* mutable_item();
  inline ::Cmd::MusicItem* release_item();
  inline void set_allocated_item(::Cmd::MusicItem* item);

  // @@protoc_insertion_point(class_scope:Cmd.GuildMusicUpdateCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guildid_;
  ::Cmd::MusicItem* item_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static GuildMusicUpdateCmd* default_instance_;
};
// -------------------------------------------------------------------

class GuildMusicDeleteRecordCmd : public ::google::protobuf::Message {
 public:
  GuildMusicDeleteRecordCmd();
  virtual ~GuildMusicDeleteRecordCmd();

  GuildMusicDeleteRecordCmd(const GuildMusicDeleteRecordCmd& from);

  inline GuildMusicDeleteRecordCmd& operator=(const GuildMusicDeleteRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMusicDeleteRecordCmd& default_instance();

  void Swap(GuildMusicDeleteRecordCmd* other);

  // implements Message ----------------------------------------------

  GuildMusicDeleteRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMusicDeleteRecordCmd& from);
  void MergeFrom(const GuildMusicDeleteRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_DELETE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 guildid = 3 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 3;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.GuildMusicDeleteRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static GuildMusicDeleteRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserBaseData : public ::google::protobuf::Message {
 public:
  UserBaseData();
  virtual ~UserBaseData();

  UserBaseData(const UserBaseData& from);

  inline UserBaseData& operator=(const UserBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBaseData& default_instance();

  void Swap(UserBaseData* other);

  // implements Message ----------------------------------------------

  UserBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBaseData& from);
  void MergeFrom(const UserBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 platformid = 1 [default = 0];
  inline bool has_platformid() const;
  inline void clear_platformid();
  static const int kPlatformidFieldNumber = 1;
  inline ::google::protobuf::uint32 platformid() const;
  inline void set_platformid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 2 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint64 accid = 3 [default = 0];
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint64 charid = 4 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 guildid = 5 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 5;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 mapid = 7 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 7;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 rolelv = 8 [default = 0];
  inline bool has_rolelv() const;
  inline void clear_rolelv();
  static const int kRolelvFieldNumber = 8;
  inline ::google::protobuf::uint32 rolelv() const;
  inline void set_rolelv(::google::protobuf::uint32 value);

  // optional uint64 roleexp = 9 [default = 0];
  inline bool has_roleexp() const;
  inline void clear_roleexp();
  static const int kRoleexpFieldNumber = 9;
  inline ::google::protobuf::uint64 roleexp() const;
  inline void set_roleexp(::google::protobuf::uint64 value);

  // optional uint32 charge = 10 [default = 0];
  inline bool has_charge() const;
  inline void clear_charge();
  static const int kChargeFieldNumber = 10;
  inline ::google::protobuf::uint32 charge() const;
  inline void set_charge(::google::protobuf::uint32 value);

  // optional uint32 diamond = 11 [default = 0];
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 11;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // optional uint64 silver = 12 [default = 0];
  inline bool has_silver() const;
  inline void clear_silver();
  static const int kSilverFieldNumber = 12;
  inline ::google::protobuf::uint64 silver() const;
  inline void set_silver(::google::protobuf::uint64 value);

  // optional uint32 gold = 13 [default = 0];
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 13;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 garden = 14 [default = 0];
  inline bool has_garden() const;
  inline void clear_garden();
  static const int kGardenFieldNumber = 14;
  inline ::google::protobuf::uint32 garden() const;
  inline void set_garden(::google::protobuf::uint32 value);

  // optional uint32 friendship = 15 [default = 0];
  inline bool has_friendship() const;
  inline void clear_friendship();
  static const int kFriendshipFieldNumber = 15;
  inline ::google::protobuf::uint32 friendship() const;
  inline void set_friendship(::google::protobuf::uint32 value);

  // optional uint32 createTime = 16 [default = 0];
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional uint32 onlinetime = 17 [default = 0];
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlinetimeFieldNumber = 17;
  inline ::google::protobuf::uint32 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::uint32 value);

  // optional uint32 offlinetime = 18 [default = 0];
  inline bool has_offlinetime() const;
  inline void clear_offlinetime();
  static const int kOfflinetimeFieldNumber = 18;
  inline ::google::protobuf::uint32 offlinetime() const;
  inline void set_offlinetime(::google::protobuf::uint32 value);

  // optional uint32 addict = 19 [default = 0];
  inline bool has_addict() const;
  inline void clear_addict();
  static const int kAddictFieldNumber = 19;
  inline ::google::protobuf::uint32 addict() const;
  inline void set_addict(::google::protobuf::uint32 value);

  // optional uint32 battletime = 20 [default = 0];
  inline bool has_battletime() const;
  inline void clear_battletime();
  static const int kBattletimeFieldNumber = 20;
  inline ::google::protobuf::uint32 battletime() const;
  inline void set_battletime(::google::protobuf::uint32 value);

  // optional uint32 body = 21 [default = 0];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 21;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 addictTipsTime = 22 [default = 0];
  inline bool has_addicttipstime() const;
  inline void clear_addicttipstime();
  static const int kAddictTipsTimeFieldNumber = 22;
  inline ::google::protobuf::uint32 addicttipstime() const;
  inline void set_addicttipstime(::google::protobuf::uint32 value);

  // optional uint32 gagtime = 23 [default = 0];
  inline bool has_gagtime() const;
  inline void clear_gagtime();
  static const int kGagtimeFieldNumber = 23;
  inline ::google::protobuf::uint32 gagtime() const;
  inline void set_gagtime(::google::protobuf::uint32 value);

  // optional uint32 nologintime = 24 [default = 0];
  inline bool has_nologintime() const;
  inline void clear_nologintime();
  static const int kNologintimeFieldNumber = 24;
  inline ::google::protobuf::uint32 nologintime() const;
  inline void set_nologintime(::google::protobuf::uint32 value);

  // optional uint32 rebattletime = 25 [default = 0];
  inline bool has_rebattletime() const;
  inline void clear_rebattletime();
  static const int kRebattletimeFieldNumber = 25;
  inline ::google::protobuf::uint32 rebattletime() const;
  inline void set_rebattletime(::google::protobuf::uint32 value);

  // optional uint32 usedbattletime = 26 [default = 0];
  inline bool has_usedbattletime() const;
  inline void clear_usedbattletime();
  static const int kUsedbattletimeFieldNumber = 26;
  inline ::google::protobuf::uint32 usedbattletime() const;
  inline void set_usedbattletime(::google::protobuf::uint32 value);

  // optional uint32 hair = 27 [default = 0];
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 27;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 28 [default = 0];
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 28;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 lefthand = 29 [default = 0];
  inline bool has_lefthand() const;
  inline void clear_lefthand();
  static const int kLefthandFieldNumber = 29;
  inline ::google::protobuf::uint32 lefthand() const;
  inline void set_lefthand(::google::protobuf::uint32 value);

  // optional uint32 righthand = 30 [default = 0];
  inline bool has_righthand() const;
  inline void clear_righthand();
  static const int kRighthandFieldNumber = 30;
  inline ::google::protobuf::uint32 righthand() const;
  inline void set_righthand(::google::protobuf::uint32 value);

  // optional uint32 head = 31 [default = 0];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 31;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // optional uint32 back = 32 [default = 0];
  inline bool has_back() const;
  inline void clear_back();
  static const int kBackFieldNumber = 32;
  inline ::google::protobuf::uint32 back() const;
  inline void set_back(::google::protobuf::uint32 value);

  // optional uint32 face = 33 [default = 0];
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 33;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 tail = 34 [default = 0];
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 34;
  inline ::google::protobuf::uint32 tail() const;
  inline void set_tail(::google::protobuf::uint32 value);

  // optional uint32 mount = 35 [default = 0];
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 35;
  inline ::google::protobuf::uint32 mount() const;
  inline void set_mount(::google::protobuf::uint32 value);

  // optional uint32 title = 36 [default = 0];
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 36;
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint32 eye = 37 [default = 0];
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 37;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // optional uint32 partnerid = 38 [default = 0];
  inline bool has_partnerid() const;
  inline void clear_partnerid();
  static const int kPartneridFieldNumber = 38;
  inline ::google::protobuf::uint32 partnerid() const;
  inline void set_partnerid(::google::protobuf::uint32 value);

  // optional uint32 portrait = 39 [default = 0];
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 39;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 mouth = 40 [default = 0];
  inline bool has_mouth() const;
  inline void clear_mouth();
  static const int kMouthFieldNumber = 40;
  inline ::google::protobuf::uint32 mouth() const;
  inline void set_mouth(::google::protobuf::uint32 value);

  // optional uint32 clothcolor = 41 [default = 0];
  inline bool has_clothcolor() const;
  inline void clear_clothcolor();
  static const int kClothcolorFieldNumber = 41;
  inline ::google::protobuf::uint32 clothcolor() const;
  inline void set_clothcolor(::google::protobuf::uint32 value);

  // optional .Cmd.EGender gender = 42 [default = EGENDER_MIN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 42;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional .Cmd.EProfession profession = 43 [default = EPROFESSION_MIN];
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 43;
  inline ::Cmd::EProfession profession() const;
  inline void set_profession(::Cmd::EProfession value);

  // optional .Cmd.EProfession destprofession = 44 [default = EPROFESSION_MIN];
  inline bool has_destprofession() const;
  inline void clear_destprofession();
  static const int kDestprofessionFieldNumber = 44;
  inline ::Cmd::EProfession destprofession() const;
  inline void set_destprofession(::Cmd::EProfession value);

  // optional uint32 destzoneid = 45 [default = 0];
  inline bool has_destzoneid() const;
  inline void clear_destzoneid();
  static const int kDestzoneidFieldNumber = 45;
  inline ::google::protobuf::uint32 destzoneid() const;
  inline void set_destzoneid(::google::protobuf::uint32 value);

  // optional uint32 originalzoneid = 46 [default = 0];
  inline bool has_originalzoneid() const;
  inline void clear_originalzoneid();
  static const int kOriginalzoneidFieldNumber = 46;
  inline ::google::protobuf::uint32 originalzoneid() const;
  inline void set_originalzoneid(::google::protobuf::uint32 value);

  // optional uint32 maxbaselv = 47 [default = 0];
  inline bool has_maxbaselv() const;
  inline void clear_maxbaselv();
  static const int kMaxbaselvFieldNumber = 47;
  inline ::google::protobuf::uint32 maxbaselv() const;
  inline void set_maxbaselv(::google::protobuf::uint32 value);

  // optional string lock_reason = 48;
  inline bool has_lock_reason() const;
  inline void clear_lock_reason();
  static const int kLockReasonFieldNumber = 48;
  inline const ::std::string& lock_reason() const;
  inline void set_lock_reason(const ::std::string& value);
  inline void set_lock_reason(const char* value);
  inline void set_lock_reason(const char* value, size_t size);
  inline ::std::string* mutable_lock_reason();
  inline ::std::string* release_lock_reason();
  inline void set_allocated_lock_reason(::std::string* lock_reason);

  // optional string gag_reason = 49;
  inline bool has_gag_reason() const;
  inline void clear_gag_reason();
  static const int kGagReasonFieldNumber = 49;
  inline const ::std::string& gag_reason() const;
  inline void set_gag_reason(const ::std::string& value);
  inline void set_gag_reason(const char* value);
  inline void set_gag_reason(const char* value, size_t size);
  inline ::std::string* mutable_gag_reason();
  inline ::std::string* release_gag_reason();
  inline void set_allocated_gag_reason(::std::string* gag_reason);

  // repeated uint32 questmapntf = 50;
  inline int questmapntf_size() const;
  inline void clear_questmapntf();
  static const int kQuestmapntfFieldNumber = 50;
  inline ::google::protobuf::uint32 questmapntf(int index) const;
  inline void set_questmapntf(int index, ::google::protobuf::uint32 value);
  inline void add_questmapntf(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      questmapntf() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_questmapntf();

  // optional uint64 maincharid = 51;
  inline bool has_maincharid() const;
  inline void clear_maincharid();
  static const int kMaincharidFieldNumber = 51;
  inline ::google::protobuf::uint64 maincharid() const;
  inline void set_maincharid(::google::protobuf::uint64 value);

  // optional uint32 maxpro = 52;
  inline bool has_maxpro() const;
  inline void clear_maxpro();
  static const int kMaxproFieldNumber = 52;
  inline ::google::protobuf::uint32 maxpro() const;
  inline void set_maxpro(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserBaseData)
 private:
  inline void set_has_platformid();
  inline void clear_has_platformid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_rolelv();
  inline void clear_has_rolelv();
  inline void set_has_roleexp();
  inline void clear_has_roleexp();
  inline void set_has_charge();
  inline void clear_has_charge();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_silver();
  inline void clear_has_silver();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_garden();
  inline void clear_has_garden();
  inline void set_has_friendship();
  inline void clear_has_friendship();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();
  inline void set_has_offlinetime();
  inline void clear_has_offlinetime();
  inline void set_has_addict();
  inline void clear_has_addict();
  inline void set_has_battletime();
  inline void clear_has_battletime();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_addicttipstime();
  inline void clear_has_addicttipstime();
  inline void set_has_gagtime();
  inline void clear_has_gagtime();
  inline void set_has_nologintime();
  inline void clear_has_nologintime();
  inline void set_has_rebattletime();
  inline void clear_has_rebattletime();
  inline void set_has_usedbattletime();
  inline void clear_has_usedbattletime();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_lefthand();
  inline void clear_has_lefthand();
  inline void set_has_righthand();
  inline void clear_has_righthand();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_back();
  inline void clear_has_back();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_tail();
  inline void clear_has_tail();
  inline void set_has_mount();
  inline void clear_has_mount();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_eye();
  inline void clear_has_eye();
  inline void set_has_partnerid();
  inline void clear_has_partnerid();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_mouth();
  inline void clear_has_mouth();
  inline void set_has_clothcolor();
  inline void clear_has_clothcolor();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_destprofession();
  inline void clear_has_destprofession();
  inline void set_has_destzoneid();
  inline void clear_has_destzoneid();
  inline void set_has_originalzoneid();
  inline void clear_has_originalzoneid();
  inline void set_has_maxbaselv();
  inline void clear_has_maxbaselv();
  inline void set_has_lock_reason();
  inline void clear_has_lock_reason();
  inline void set_has_gag_reason();
  inline void clear_has_gag_reason();
  inline void set_has_maincharid();
  inline void clear_has_maincharid();
  inline void set_has_maxpro();
  inline void clear_has_maxpro();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 platformid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* name_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 rolelv_;
  ::google::protobuf::uint64 roleexp_;
  ::google::protobuf::uint32 charge_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint64 silver_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 garden_;
  ::google::protobuf::uint32 friendship_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 onlinetime_;
  ::google::protobuf::uint32 offlinetime_;
  ::google::protobuf::uint32 addict_;
  ::google::protobuf::uint32 battletime_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 addicttipstime_;
  ::google::protobuf::uint32 gagtime_;
  ::google::protobuf::uint32 nologintime_;
  ::google::protobuf::uint32 rebattletime_;
  ::google::protobuf::uint32 usedbattletime_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint32 lefthand_;
  ::google::protobuf::uint32 righthand_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 back_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 tail_;
  ::google::protobuf::uint32 mount_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 eye_;
  ::google::protobuf::uint32 partnerid_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 mouth_;
  ::google::protobuf::uint32 clothcolor_;
  int gender_;
  int profession_;
  int destprofession_;
  ::google::protobuf::uint32 destzoneid_;
  ::google::protobuf::uint32 originalzoneid_;
  ::std::string* lock_reason_;
  ::std::string* gag_reason_;
  ::google::protobuf::uint32 maxbaselv_;
  ::google::protobuf::uint32 maxpro_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > questmapntf_;
  ::google::protobuf::uint64 maincharid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserBaseData* default_instance_;
};
// -------------------------------------------------------------------

class BlobData : public ::google::protobuf::Message {
 public:
  BlobData();
  virtual ~BlobData();

  BlobData(const BlobData& from);

  inline BlobData& operator=(const BlobData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobData& default_instance();

  void Swap(BlobData* other);

  // implements Message ----------------------------------------------

  BlobData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobData& from);
  void MergeFrom(const BlobData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional .Cmd.BlobUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::Cmd::BlobUser& user() const;
  inline ::Cmd::BlobUser* mutable_user();
  inline ::Cmd::BlobUser* release_user();
  inline void set_allocated_user(::Cmd::BlobUser* user);

  // optional .Cmd.BlobFighter fighter = 3;
  inline bool has_fighter() const;
  inline void clear_fighter();
  static const int kFighterFieldNumber = 3;
  inline const ::Cmd::BlobFighter& fighter() const;
  inline ::Cmd::BlobFighter* mutable_fighter();
  inline ::Cmd::BlobFighter* release_fighter();
  inline void set_allocated_fighter(::Cmd::BlobFighter* fighter);

  // optional .Cmd.BlobStage stage = 4;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline const ::Cmd::BlobStage& stage() const;
  inline ::Cmd::BlobStage* mutable_stage();
  inline ::Cmd::BlobStage* release_stage();
  inline void set_allocated_stage(::Cmd::BlobStage* stage);

  // optional .Cmd.BlobQuestNpc questnpc = 5;
  inline bool has_questnpc() const;
  inline void clear_questnpc();
  static const int kQuestnpcFieldNumber = 5;
  inline const ::Cmd::BlobQuestNpc& questnpc() const;
  inline ::Cmd::BlobQuestNpc* mutable_questnpc();
  inline ::Cmd::BlobQuestNpc* release_questnpc();
  inline void set_allocated_questnpc(::Cmd::BlobQuestNpc* questnpc);

  // optional .Cmd.BlobBuffer buffer = 6;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 6;
  inline const ::Cmd::BlobBuffer& buffer() const;
  inline ::Cmd::BlobBuffer* mutable_buffer();
  inline ::Cmd::BlobBuffer* release_buffer();
  inline void set_allocated_buffer(::Cmd::BlobBuffer* buffer);

  // optional .Cmd.BlobPortrait portrait = 7;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 7;
  inline const ::Cmd::BlobPortrait& portrait() const;
  inline ::Cmd::BlobPortrait* mutable_portrait();
  inline ::Cmd::BlobPortrait* release_portrait();
  inline void set_allocated_portrait(::Cmd::BlobPortrait* portrait);

  // optional .Cmd.BlobHair hair = 8;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 8;
  inline const ::Cmd::BlobHair& hair() const;
  inline ::Cmd::BlobHair* mutable_hair();
  inline ::Cmd::BlobHair* release_hair();
  inline void set_allocated_hair(::Cmd::BlobHair* hair);

  // optional .Cmd.BlobGears gear = 9;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 9;
  inline const ::Cmd::BlobGears& gear() const;
  inline ::Cmd::BlobGears* mutable_gear();
  inline ::Cmd::BlobGears* release_gear();
  inline void set_allocated_gear(::Cmd::BlobGears* gear);

  // optional .Cmd.BlobTips tip = 10;
  inline bool has_tip() const;
  inline void clear_tip();
  static const int kTipFieldNumber = 10;
  inline const ::Cmd::BlobTips& tip() const;
  inline ::Cmd::BlobTips* mutable_tip();
  inline ::Cmd::BlobTips* release_tip();
  inline void set_allocated_tip(::Cmd::BlobTips* tip);

  // optional .Cmd.BlobFollower follower = 11;
  inline bool has_follower() const;
  inline void clear_follower();
  static const int kFollowerFieldNumber = 11;
  inline const ::Cmd::BlobFollower& follower() const;
  inline ::Cmd::BlobFollower* mutable_follower();
  inline ::Cmd::BlobFollower* release_follower();
  inline void set_allocated_follower(::Cmd::BlobFollower* follower);

  // optional .Cmd.BlobCDTime cd = 12;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 12;
  inline const ::Cmd::BlobCDTime& cd() const;
  inline ::Cmd::BlobCDTime* mutable_cd();
  inline ::Cmd::BlobCDTime* release_cd();
  inline void set_allocated_cd(::Cmd::BlobCDTime* cd);

  // optional .Cmd.BlobShortcut shortcut = 13;
  inline bool has_shortcut() const;
  inline void clear_shortcut();
  static const int kShortcutFieldNumber = 13;
  inline const ::Cmd::BlobShortcut& shortcut() const;
  inline ::Cmd::BlobShortcut* mutable_shortcut();
  inline ::Cmd::BlobShortcut* release_shortcut();
  inline void set_allocated_shortcut(::Cmd::BlobShortcut* shortcut);

  // optional .Cmd.BlobGMEffects effect = 14;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 14;
  inline const ::Cmd::BlobGMEffects& effect() const;
  inline ::Cmd::BlobGMEffects* mutable_effect();
  inline ::Cmd::BlobGMEffects* release_effect();
  inline void set_allocated_effect(::Cmd::BlobGMEffects* effect);

  // optional .Cmd.BlobFreyja freyja = 15;
  inline bool has_freyja() const;
  inline void clear_freyja();
  static const int kFreyjaFieldNumber = 15;
  inline const ::Cmd::BlobFreyja& freyja() const;
  inline ::Cmd::BlobFreyja* mutable_freyja();
  inline ::Cmd::BlobFreyja* release_freyja();
  inline void set_allocated_freyja(::Cmd::BlobFreyja* freyja);

  // optional .Cmd.BlobLaboratory lab = 16;
  inline bool has_lab() const;
  inline void clear_lab();
  static const int kLabFieldNumber = 16;
  inline const ::Cmd::BlobLaboratory& lab() const;
  inline ::Cmd::BlobLaboratory* mutable_lab();
  inline ::Cmd::BlobLaboratory* release_lab();
  inline void set_allocated_lab(::Cmd::BlobLaboratory* lab);

  // optional .Cmd.BlobScenery scenery = 17;
  inline bool has_scenery() const;
  inline void clear_scenery();
  static const int kSceneryFieldNumber = 17;
  inline const ::Cmd::BlobScenery& scenery() const;
  inline ::Cmd::BlobScenery* mutable_scenery();
  inline ::Cmd::BlobScenery* release_scenery();
  inline void set_allocated_scenery(::Cmd::BlobScenery* scenery);

  // optional .Cmd.BlobCarrier carrier = 18;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 18;
  inline const ::Cmd::BlobCarrier& carrier() const;
  inline ::Cmd::BlobCarrier* mutable_carrier();
  inline ::Cmd::BlobCarrier* release_carrier();
  inline void set_allocated_carrier(::Cmd::BlobCarrier* carrier);

  // optional .Cmd.BlobMenu menu = 19;
  inline bool has_menu() const;
  inline void clear_menu();
  static const int kMenuFieldNumber = 19;
  inline const ::Cmd::BlobMenu& menu() const;
  inline ::Cmd::BlobMenu* mutable_menu();
  inline ::Cmd::BlobMenu* release_menu();
  inline void set_allocated_menu(::Cmd::BlobMenu* menu);

  // optional .Cmd.BlobShopGotItem shop = 20;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 20;
  inline const ::Cmd::BlobShopGotItem& shop() const;
  inline ::Cmd::BlobShopGotItem* mutable_shop();
  inline ::Cmd::BlobShopGotItem* release_shop();
  inline void set_allocated_shop(::Cmd::BlobShopGotItem* shop);

  // optional .Cmd.BlobKnownMaps knownmap = 21;
  inline bool has_knownmap() const;
  inline void clear_knownmap();
  static const int kKnownmapFieldNumber = 21;
  inline const ::Cmd::BlobKnownMaps& knownmap() const;
  inline ::Cmd::BlobKnownMaps* mutable_knownmap();
  inline ::Cmd::BlobKnownMaps* release_knownmap();
  inline void set_allocated_knownmap(::Cmd::BlobKnownMaps* knownmap);

  // optional .Cmd.BlobInter iter = 22;
  inline bool has_iter() const;
  inline void clear_iter();
  static const int kIterFieldNumber = 22;
  inline const ::Cmd::BlobInter& iter() const;
  inline ::Cmd::BlobInter* mutable_iter();
  inline ::Cmd::BlobInter* release_iter();
  inline void set_allocated_iter(::Cmd::BlobInter* iter);

  // optional .Cmd.BlobHands hand = 23;
  inline bool has_hand() const;
  inline void clear_hand();
  static const int kHandFieldNumber = 23;
  inline const ::Cmd::BlobHands& hand() const;
  inline ::Cmd::BlobHands* mutable_hand();
  inline ::Cmd::BlobHands* release_hand();
  inline void set_allocated_hand(::Cmd::BlobHands* hand);

  // optional .Cmd.BlobShow show = 24;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 24;
  inline const ::Cmd::BlobShow& show() const;
  inline ::Cmd::BlobShow* mutable_show();
  inline ::Cmd::BlobShow* release_show();
  inline void set_allocated_show(::Cmd::BlobShow* show);

  // optional .Cmd.BlobTrace trace = 25;
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 25;
  inline const ::Cmd::BlobTrace& trace() const;
  inline ::Cmd::BlobTrace* mutable_trace();
  inline ::Cmd::BlobTrace* release_trace();
  inline void set_allocated_trace(::Cmd::BlobTrace* trace);

  // optional .Cmd.BlobDojo dojo = 26;
  inline bool has_dojo() const;
  inline void clear_dojo();
  static const int kDojoFieldNumber = 26;
  inline const ::Cmd::BlobDojo& dojo() const;
  inline ::Cmd::BlobDojo* mutable_dojo();
  inline ::Cmd::BlobDojo* release_dojo();
  inline void set_allocated_dojo(::Cmd::BlobDojo* dojo);

  // optional .Cmd.BlobPack pack = 27;
  inline bool has_pack() const;
  inline void clear_pack();
  static const int kPackFieldNumber = 27;
  inline const ::Cmd::BlobPack& pack() const;
  inline ::Cmd::BlobPack* mutable_pack();
  inline ::Cmd::BlobPack* release_pack();
  inline void set_allocated_pack(::Cmd::BlobPack* pack);

  // optional .Cmd.BlobQuest quest = 28;
  inline bool has_quest() const;
  inline void clear_quest();
  static const int kQuestFieldNumber = 28;
  inline const ::Cmd::BlobQuest& quest() const;
  inline ::Cmd::BlobQuest* mutable_quest();
  inline ::Cmd::BlobQuest* release_quest();
  inline void set_allocated_quest(::Cmd::BlobQuest* quest);

  // optional .Cmd.BlobTitle title = 29;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 29;
  inline const ::Cmd::BlobTitle& title() const;
  inline ::Cmd::BlobTitle* mutable_title();
  inline ::Cmd::BlobTitle* release_title();
  inline void set_allocated_title(::Cmd::BlobTitle* title);

  // optional .Cmd.BlobLine line = 30;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 30;
  inline const ::Cmd::BlobLine& line() const;
  inline ::Cmd::BlobLine* mutable_line();
  inline ::Cmd::BlobLine* release_line();
  inline void set_allocated_line(::Cmd::BlobLine* line);

  // optional .Cmd.BlobPet pet = 31;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 31;
  inline const ::Cmd::BlobPet& pet() const;
  inline ::Cmd::BlobPet* mutable_pet();
  inline ::Cmd::BlobPet* release_pet();
  inline void set_allocated_pet(::Cmd::BlobPet* pet);

  // optional .Cmd.BlobVar var = 32;
  inline bool has_var() const;
  inline void clear_var();
  static const int kVarFieldNumber = 32;
  inline const ::Cmd::BlobVar& var() const;
  inline ::Cmd::BlobVar* mutable_var();
  inline ::Cmd::BlobVar* release_var();
  inline void set_allocated_var(::Cmd::BlobVar* var);

  // optional .Cmd.BlobChatMsg chatmsg = 33;
  inline bool has_chatmsg() const;
  inline void clear_chatmsg();
  static const int kChatmsgFieldNumber = 33;
  inline const ::Cmd::BlobChatMsg& chatmsg() const;
  inline ::Cmd::BlobChatMsg* mutable_chatmsg();
  inline ::Cmd::BlobChatMsg* release_chatmsg();
  inline void set_allocated_chatmsg(::Cmd::BlobChatMsg* chatmsg);

  // optional .Cmd.BlobUserTower tower = 34;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 34;
  inline const ::Cmd::BlobUserTower& tower() const;
  inline ::Cmd::BlobUserTower* mutable_tower();
  inline ::Cmd::BlobUserTower* release_tower();
  inline void set_allocated_tower(::Cmd::BlobUserTower* tower);

  // optional .Cmd.BlobSeal seal = 35;
  inline bool has_seal() const;
  inline void clear_seal();
  static const int kSealFieldNumber = 35;
  inline const ::Cmd::BlobSeal& seal() const;
  inline ::Cmd::BlobSeal* mutable_seal();
  inline ::Cmd::BlobSeal* release_seal();
  inline void set_allocated_seal(::Cmd::BlobSeal* seal);

  // optional .Cmd.BlobManual manual = 36;
  inline bool has_manual() const;
  inline void clear_manual();
  static const int kManualFieldNumber = 36;
  inline const ::Cmd::BlobManual& manual() const;
  inline ::Cmd::BlobManual* mutable_manual();
  inline ::Cmd::BlobManual* release_manual();
  inline void set_allocated_manual(::Cmd::BlobManual* manual);

  // optional .Cmd.BlobFirstActionDone action = 37;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 37;
  inline const ::Cmd::BlobFirstActionDone& action() const;
  inline ::Cmd::BlobFirstActionDone* mutable_action();
  inline ::Cmd::BlobFirstActionDone* release_action();
  inline void set_allocated_action(::Cmd::BlobFirstActionDone* action);

  // optional .Cmd.BlobAttr attr = 38;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 38;
  inline const ::Cmd::BlobAttr& attr() const;
  inline ::Cmd::BlobAttr* mutable_attr();
  inline ::Cmd::BlobAttr* release_attr();
  inline void set_allocated_attr(::Cmd::BlobAttr* attr);

  // optional .Cmd.BlobOption opt = 39;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 39;
  inline const ::Cmd::BlobOption& opt() const;
  inline ::Cmd::BlobOption* mutable_opt();
  inline ::Cmd::BlobOption* release_opt();
  inline void set_allocated_opt(::Cmd::BlobOption* opt);

  // optional .Cmd.BlobHandNpc handnpc = 40;
  inline bool has_handnpc() const;
  inline void clear_handnpc();
  static const int kHandnpcFieldNumber = 40;
  inline const ::Cmd::BlobHandNpc& handnpc() const;
  inline ::Cmd::BlobHandNpc* mutable_handnpc();
  inline ::Cmd::BlobHandNpc* release_handnpc();
  inline void set_allocated_handnpc(::Cmd::BlobHandNpc* handnpc);

  // optional .Cmd.BlobCamera camera = 41;
  inline bool has_camera() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 41;
  inline const ::Cmd::BlobCamera& camera() const;
  inline ::Cmd::BlobCamera* mutable_camera();
  inline ::Cmd::BlobCamera* release_camera();
  inline void set_allocated_camera(::Cmd::BlobCamera* camera);

  // optional .Cmd.BlobZone zone = 42;
  inline bool has_zone() const;
  inline void clear_zone();
  static const int kZoneFieldNumber = 42;
  inline const ::Cmd::BlobZone& zone() const;
  inline ::Cmd::BlobZone* mutable_zone();
  inline ::Cmd::BlobZone* release_zone();
  inline void set_allocated_zone(::Cmd::BlobZone* zone);

  // optional .Cmd.BlobGuild guild = 43;
  inline bool has_guild() const;
  inline void clear_guild();
  static const int kGuildFieldNumber = 43;
  inline const ::Cmd::BlobGuild& guild() const;
  inline ::Cmd::BlobGuild* mutable_guild();
  inline ::Cmd::BlobGuild* release_guild();
  inline void set_allocated_guild(::Cmd::BlobGuild* guild);

  // optional .Cmd.BlobTeam team = 44;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 44;
  inline const ::Cmd::BlobTeam& team() const;
  inline ::Cmd::BlobTeam* mutable_team();
  inline ::Cmd::BlobTeam* release_team();
  inline void set_allocated_team(::Cmd::BlobTeam* team);

  // optional .Cmd.BlobUserZone userzone = 45;
  inline bool has_userzone() const;
  inline void clear_userzone();
  static const int kUserzoneFieldNumber = 45;
  inline const ::Cmd::BlobUserZone& userzone() const;
  inline ::Cmd::BlobUserZone* mutable_userzone();
  inline ::Cmd::BlobUserZone* release_userzone();
  inline void set_allocated_userzone(::Cmd::BlobUserZone* userzone);

  // optional .Cmd.BlobSpEffect speffect = 46;
  inline bool has_speffect() const;
  inline void clear_speffect();
  static const int kSpeffectFieldNumber = 46;
  inline const ::Cmd::BlobSpEffect& speffect() const;
  inline ::Cmd::BlobSpEffect* mutable_speffect();
  inline ::Cmd::BlobSpEffect* release_speffect();
  inline void set_allocated_speffect(::Cmd::BlobSpEffect* speffect);

  // optional .Cmd.BlobDeposit deposit = 47;
  inline bool has_deposit() const;
  inline void clear_deposit();
  static const int kDepositFieldNumber = 47;
  inline const ::Cmd::BlobDeposit& deposit() const;
  inline ::Cmd::BlobDeposit* mutable_deposit();
  inline ::Cmd::BlobDeposit* release_deposit();
  inline void set_allocated_deposit(::Cmd::BlobDeposit* deposit);

  // optional .Cmd.BlobActivity activity = 48;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 48;
  inline const ::Cmd::BlobActivity& activity() const;
  inline ::Cmd::BlobActivity* mutable_activity();
  inline ::Cmd::BlobActivity* release_activity();
  inline void set_allocated_activity(::Cmd::BlobActivity* activity);

  // optional .Cmd.BlobChat chat = 51;
  inline bool has_chat() const;
  inline void clear_chat();
  static const int kChatFieldNumber = 51;
  inline const ::Cmd::BlobChat& chat() const;
  inline ::Cmd::BlobChat* mutable_chat();
  inline ::Cmd::BlobChat* release_chat();
  inline void set_allocated_chat(::Cmd::BlobChat* chat);

  // optional .Cmd.BlobBattle battle = 52;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 52;
  inline const ::Cmd::BlobBattle& battle() const;
  inline ::Cmd::BlobBattle* mutable_battle();
  inline ::Cmd::BlobBattle* release_battle();
  inline void set_allocated_battle(::Cmd::BlobBattle* battle);

  // optional .Cmd.BlobStatVar statvar = 53;
  inline bool has_statvar() const;
  inline void clear_statvar();
  static const int kStatvarFieldNumber = 53;
  inline const ::Cmd::BlobStatVar& statvar() const;
  inline ::Cmd::BlobStatVar* mutable_statvar();
  inline ::Cmd::BlobStatVar* release_statvar();
  inline void set_allocated_statvar(::Cmd::BlobStatVar* statvar);

  // optional .Cmd.BlobSeeNpc seenpc = 54;
  inline bool has_seenpc() const;
  inline void clear_seenpc();
  static const int kSeenpcFieldNumber = 54;
  inline const ::Cmd::BlobSeeNpc& seenpc() const;
  inline ::Cmd::BlobSeeNpc* mutable_seenpc();
  inline ::Cmd::BlobSeeNpc* release_seenpc();
  inline void set_allocated_seenpc(::Cmd::BlobSeeNpc* seenpc);

  // optional .Cmd.BlobWeaponPet weaponpet = 55;
  inline bool has_weaponpet() const;
  inline void clear_weaponpet();
  static const int kWeaponpetFieldNumber = 55;
  inline const ::Cmd::BlobWeaponPet& weaponpet() const;
  inline ::Cmd::BlobWeaponPet* mutable_weaponpet();
  inline ::Cmd::BlobWeaponPet* release_weaponpet();
  inline void set_allocated_weaponpet(::Cmd::BlobWeaponPet* weaponpet);

  // optional .Cmd.BlobTicket ticket = 56;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 56;
  inline const ::Cmd::BlobTicket& ticket() const;
  inline ::Cmd::BlobTicket* mutable_ticket();
  inline ::Cmd::BlobTicket* release_ticket();
  inline void set_allocated_ticket(::Cmd::BlobTicket* ticket);

  // optional .Cmd.BlobShare share = 57;
  inline bool has_share() const;
  inline void clear_share();
  static const int kShareFieldNumber = 57;
  inline const ::Cmd::BlobShare& share() const;
  inline ::Cmd::BlobShare* mutable_share();
  inline ::Cmd::BlobShare* release_share();
  inline void set_allocated_share(::Cmd::BlobShare* share);

  // optional .Cmd.BlobAchieve achieve = 58;
  inline bool has_achieve() const;
  inline void clear_achieve();
  static const int kAchieveFieldNumber = 58;
  inline const ::Cmd::BlobAchieve& achieve() const;
  inline ::Cmd::BlobAchieve* mutable_achieve();
  inline ::Cmd::BlobAchieve* release_achieve();
  inline void set_allocated_achieve(::Cmd::BlobAchieve* achieve);

  // optional .Cmd.BlobAuthorize authorize = 59;
  inline bool has_authorize() const;
  inline void clear_authorize();
  static const int kAuthorizeFieldNumber = 59;
  inline const ::Cmd::BlobAuthorize& authorize() const;
  inline ::Cmd::BlobAuthorize* mutable_authorize();
  inline ::Cmd::BlobAuthorize* release_authorize();
  inline void set_allocated_authorize(::Cmd::BlobAuthorize* authorize);

  // optional .Cmd.BlobGuildRaid guildraid = 60;
  inline bool has_guildraid() const;
  inline void clear_guildraid();
  static const int kGuildraidFieldNumber = 60;
  inline const ::Cmd::BlobGuildRaid& guildraid() const;
  inline ::Cmd::BlobGuildRaid* mutable_guildraid();
  inline ::Cmd::BlobGuildRaid* release_guildraid();
  inline void set_allocated_guildraid(::Cmd::BlobGuildRaid* guildraid);

  // optional .Cmd.BlobAstrolabe astrolabe = 61;
  inline bool has_astrolabe() const;
  inline void clear_astrolabe();
  static const int kAstrolabeFieldNumber = 61;
  inline const ::Cmd::BlobAstrolabe& astrolabe() const;
  inline ::Cmd::BlobAstrolabe* mutable_astrolabe();
  inline ::Cmd::BlobAstrolabe* release_astrolabe();
  inline void set_allocated_astrolabe(::Cmd::BlobAstrolabe* astrolabe);

  // optional .Cmd.BlobSettings settings = 62;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 62;
  inline const ::Cmd::BlobSettings& settings() const;
  inline ::Cmd::BlobSettings* mutable_settings();
  inline ::Cmd::BlobSettings* release_settings();
  inline void set_allocated_settings(::Cmd::BlobSettings* settings);

  // optional .Cmd.BlobPhoto photo = 63;
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 63;
  inline const ::Cmd::BlobPhoto& photo() const;
  inline ::Cmd::BlobPhoto* mutable_photo();
  inline ::Cmd::BlobPhoto* release_photo();
  inline void set_allocated_photo(::Cmd::BlobPhoto* photo);

  // optional .Cmd.BlobFood food = 64;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 64;
  inline const ::Cmd::BlobFood& food() const;
  inline ::Cmd::BlobFood* mutable_food();
  inline ::Cmd::BlobFood* release_food();
  inline void set_allocated_food(::Cmd::BlobFood* food);

  // optional .Cmd.BlobUserPet userpet = 65;
  inline bool has_userpet() const;
  inline void clear_userpet();
  static const int kUserpetFieldNumber = 65;
  inline const ::Cmd::BlobUserPet& userpet() const;
  inline ::Cmd::BlobUserPet* mutable_userpet();
  inline ::Cmd::BlobUserPet* release_userpet();
  inline void set_allocated_userpet(::Cmd::BlobUserPet* userpet);

  // optional .Cmd.BlobPetAdventure petadventure = 66;
  inline bool has_petadventure() const;
  inline void clear_petadventure();
  static const int kPetadventureFieldNumber = 66;
  inline const ::Cmd::BlobPetAdventure& petadventure() const;
  inline ::Cmd::BlobPetAdventure* mutable_petadventure();
  inline ::Cmd::BlobPetAdventure* release_petadventure();
  inline void set_allocated_petadventure(::Cmd::BlobPetAdventure* petadventure);

  // optional .Cmd.BlobTutorTask tutortask = 67;
  inline bool has_tutortask() const;
  inline void clear_tutortask();
  static const int kTutortaskFieldNumber = 67;
  inline const ::Cmd::BlobTutorTask& tutortask() const;
  inline ::Cmd::BlobTutorTask* mutable_tutortask();
  inline ::Cmd::BlobTutorTask* release_tutortask();
  inline void set_allocated_tutortask(::Cmd::BlobTutorTask* tutortask);

  // optional .Cmd.BlobEye eye = 68;
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 68;
  inline const ::Cmd::BlobEye& eye() const;
  inline ::Cmd::BlobEye* mutable_eye();
  inline ::Cmd::BlobEye* release_eye();
  inline void set_allocated_eye(::Cmd::BlobEye* eye);

  // optional .Cmd.BlobHighRefine highrefine = 69;
  inline bool has_highrefine() const;
  inline void clear_highrefine();
  static const int kHighrefineFieldNumber = 69;
  inline const ::Cmd::BlobHighRefine& highrefine() const;
  inline ::Cmd::BlobHighRefine* mutable_highrefine();
  inline ::Cmd::BlobHighRefine* release_highrefine();
  inline void set_allocated_highrefine(::Cmd::BlobHighRefine* highrefine);

  // optional .Cmd.BlobActivityEvent acevent = 70;
  inline bool has_acevent() const;
  inline void clear_acevent();
  static const int kAceventFieldNumber = 70;
  inline const ::Cmd::BlobActivityEvent& acevent() const;
  inline ::Cmd::BlobActivityEvent* mutable_acevent();
  inline ::Cmd::BlobActivityEvent* release_acevent();
  inline void set_allocated_acevent(::Cmd::BlobActivityEvent* acevent);

  // optional .Cmd.BlobUserBeing being = 71;
  inline bool has_being() const;
  inline void clear_being();
  static const int kBeingFieldNumber = 71;
  inline const ::Cmd::BlobUserBeing& being() const;
  inline ::Cmd::BlobUserBeing* mutable_being();
  inline ::Cmd::BlobUserBeing* release_being();
  inline void set_allocated_being(::Cmd::BlobUserBeing* being);

  // optional .Cmd.BlobGuildChallenge gchallenge = 72;
  inline bool has_gchallenge() const;
  inline void clear_gchallenge();
  static const int kGchallengeFieldNumber = 72;
  inline const ::Cmd::BlobGuildChallenge& gchallenge() const;
  inline ::Cmd::BlobGuildChallenge* mutable_gchallenge();
  inline ::Cmd::BlobGuildChallenge* release_gchallenge();
  inline void set_allocated_gchallenge(::Cmd::BlobGuildChallenge* gchallenge);

  // optional .Cmd.BlobGvgData gvgdata = 73;
  inline bool has_gvgdata() const;
  inline void clear_gvgdata();
  static const int kGvgdataFieldNumber = 73;
  inline const ::Cmd::BlobGvgData& gvgdata() const;
  inline ::Cmd::BlobGvgData* mutable_gvgdata();
  inline ::Cmd::BlobGvgData* release_gvgdata();
  inline void set_allocated_gvgdata(::Cmd::BlobGvgData* gvgdata);

  // optional .Cmd.BlobLottery lottery = 74;
  inline bool has_lottery() const;
  inline void clear_lottery();
  static const int kLotteryFieldNumber = 74;
  inline const ::Cmd::BlobLottery& lottery() const;
  inline ::Cmd::BlobLottery* mutable_lottery();
  inline ::Cmd::BlobLottery* release_lottery();
  inline void set_allocated_lottery(::Cmd::BlobLottery* lottery);

  // optional .Cmd.BlobServant servant = 75;
  inline bool has_servant() const;
  inline void clear_servant();
  static const int kServantFieldNumber = 75;
  inline const ::Cmd::BlobServant& servant() const;
  inline ::Cmd::BlobServant* mutable_servant();
  inline ::Cmd::BlobServant* release_servant();
  inline void set_allocated_servant(::Cmd::BlobServant* servant);

  // optional .Cmd.BlobProfession profession = 76;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 76;
  inline const ::Cmd::BlobProfession& profession() const;
  inline ::Cmd::BlobProfession* mutable_profession();
  inline ::Cmd::BlobProfession* release_profession();
  inline void set_allocated_profession(::Cmd::BlobProfession* profession);

  // optional .Cmd.BlobActivityQuest activityquest = 77;
  inline bool has_activityquest() const;
  inline void clear_activityquest();
  static const int kActivityquestFieldNumber = 77;
  inline const ::Cmd::BlobActivityQuest& activityquest() const;
  inline ::Cmd::BlobActivityQuest* mutable_activityquest();
  inline ::Cmd::BlobActivityQuest* release_activityquest();
  inline void set_allocated_activityquest(::Cmd::BlobActivityQuest* activityquest);

  // optional .Cmd.BlobBooth booth = 79;
  inline bool has_booth() const;
  inline void clear_booth();
  static const int kBoothFieldNumber = 79;
  inline const ::Cmd::BlobBooth& booth() const;
  inline ::Cmd::BlobBooth* mutable_booth();
  inline ::Cmd::BlobBooth* release_booth();
  inline void set_allocated_booth(::Cmd::BlobBooth* booth);

  // optional .Cmd.BlobExchangeShop exchangeshop = 80;
  inline bool has_exchangeshop() const;
  inline void clear_exchangeshop();
  static const int kExchangeshopFieldNumber = 80;
  inline const ::Cmd::BlobExchangeShop& exchangeshop() const;
  inline ::Cmd::BlobExchangeShop* mutable_exchangeshop();
  inline ::Cmd::BlobExchangeShop* release_exchangeshop();
  inline void set_allocated_exchangeshop(::Cmd::BlobExchangeShop* exchangeshop);

  // optional .Cmd.BlobTransfer transfer = 81;
  inline bool has_transfer() const;
  inline void clear_transfer();
  static const int kTransferFieldNumber = 81;
  inline const ::Cmd::BlobTransfer& transfer() const;
  inline ::Cmd::BlobTransfer* mutable_transfer();
  inline ::Cmd::BlobTransfer* release_transfer();
  inline void set_allocated_transfer(::Cmd::BlobTransfer* transfer);

  // optional .Cmd.BlobElementElfData element_elf = 82;
  inline bool has_element_elf() const;
  inline void clear_element_elf();
  static const int kElementElfFieldNumber = 82;
  inline const ::Cmd::BlobElementElfData& element_elf() const;
  inline ::Cmd::BlobElementElfData* mutable_element_elf();
  inline ::Cmd::BlobElementElfData* release_element_elf();
  inline void set_allocated_element_elf(::Cmd::BlobElementElfData* element_elf);

  // optional .Cmd.BlobBoss boss = 83;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 83;
  inline const ::Cmd::BlobBoss& boss() const;
  inline ::Cmd::BlobBoss* mutable_boss();
  inline ::Cmd::BlobBoss* release_boss();
  inline void set_allocated_boss(::Cmd::BlobBoss* boss);

  // @@protoc_insertion_point(class_scope:Cmd.BlobData)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_fighter();
  inline void clear_has_fighter();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_questnpc();
  inline void clear_has_questnpc();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_gear();
  inline void clear_has_gear();
  inline void set_has_tip();
  inline void clear_has_tip();
  inline void set_has_follower();
  inline void clear_has_follower();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_shortcut();
  inline void clear_has_shortcut();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_freyja();
  inline void clear_has_freyja();
  inline void set_has_lab();
  inline void clear_has_lab();
  inline void set_has_scenery();
  inline void clear_has_scenery();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_menu();
  inline void clear_has_menu();
  inline void set_has_shop();
  inline void clear_has_shop();
  inline void set_has_knownmap();
  inline void clear_has_knownmap();
  inline void set_has_iter();
  inline void clear_has_iter();
  inline void set_has_hand();
  inline void clear_has_hand();
  inline void set_has_show();
  inline void clear_has_show();
  inline void set_has_trace();
  inline void clear_has_trace();
  inline void set_has_dojo();
  inline void clear_has_dojo();
  inline void set_has_pack();
  inline void clear_has_pack();
  inline void set_has_quest();
  inline void clear_has_quest();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_var();
  inline void clear_has_var();
  inline void set_has_chatmsg();
  inline void clear_has_chatmsg();
  inline void set_has_tower();
  inline void clear_has_tower();
  inline void set_has_seal();
  inline void clear_has_seal();
  inline void set_has_manual();
  inline void clear_has_manual();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_handnpc();
  inline void clear_has_handnpc();
  inline void set_has_camera();
  inline void clear_has_camera();
  inline void set_has_zone();
  inline void clear_has_zone();
  inline void set_has_guild();
  inline void clear_has_guild();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_userzone();
  inline void clear_has_userzone();
  inline void set_has_speffect();
  inline void clear_has_speffect();
  inline void set_has_deposit();
  inline void clear_has_deposit();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_chat();
  inline void clear_has_chat();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_statvar();
  inline void clear_has_statvar();
  inline void set_has_seenpc();
  inline void clear_has_seenpc();
  inline void set_has_weaponpet();
  inline void clear_has_weaponpet();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_share();
  inline void clear_has_share();
  inline void set_has_achieve();
  inline void clear_has_achieve();
  inline void set_has_authorize();
  inline void clear_has_authorize();
  inline void set_has_guildraid();
  inline void clear_has_guildraid();
  inline void set_has_astrolabe();
  inline void clear_has_astrolabe();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_photo();
  inline void clear_has_photo();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_userpet();
  inline void clear_has_userpet();
  inline void set_has_petadventure();
  inline void clear_has_petadventure();
  inline void set_has_tutortask();
  inline void clear_has_tutortask();
  inline void set_has_eye();
  inline void clear_has_eye();
  inline void set_has_highrefine();
  inline void clear_has_highrefine();
  inline void set_has_acevent();
  inline void clear_has_acevent();
  inline void set_has_being();
  inline void clear_has_being();
  inline void set_has_gchallenge();
  inline void clear_has_gchallenge();
  inline void set_has_gvgdata();
  inline void clear_has_gvgdata();
  inline void set_has_lottery();
  inline void clear_has_lottery();
  inline void set_has_servant();
  inline void clear_has_servant();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_activityquest();
  inline void clear_has_activityquest();
  inline void set_has_booth();
  inline void clear_has_booth();
  inline void set_has_exchangeshop();
  inline void clear_has_exchangeshop();
  inline void set_has_transfer();
  inline void clear_has_transfer();
  inline void set_has_element_elf();
  inline void clear_has_element_elf();
  inline void set_has_boss();
  inline void clear_has_boss();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::Cmd::BlobUser* user_;
  ::Cmd::BlobFighter* fighter_;
  ::Cmd::BlobStage* stage_;
  ::Cmd::BlobQuestNpc* questnpc_;
  ::Cmd::BlobBuffer* buffer_;
  ::Cmd::BlobPortrait* portrait_;
  ::Cmd::BlobHair* hair_;
  ::Cmd::BlobGears* gear_;
  ::Cmd::BlobTips* tip_;
  ::Cmd::BlobFollower* follower_;
  ::Cmd::BlobCDTime* cd_;
  ::Cmd::BlobShortcut* shortcut_;
  ::Cmd::BlobGMEffects* effect_;
  ::Cmd::BlobFreyja* freyja_;
  ::Cmd::BlobLaboratory* lab_;
  ::Cmd::BlobScenery* scenery_;
  ::Cmd::BlobCarrier* carrier_;
  ::Cmd::BlobMenu* menu_;
  ::Cmd::BlobShopGotItem* shop_;
  ::Cmd::BlobKnownMaps* knownmap_;
  ::Cmd::BlobInter* iter_;
  ::Cmd::BlobHands* hand_;
  ::Cmd::BlobShow* show_;
  ::Cmd::BlobTrace* trace_;
  ::Cmd::BlobDojo* dojo_;
  ::Cmd::BlobPack* pack_;
  ::Cmd::BlobQuest* quest_;
  ::Cmd::BlobTitle* title_;
  ::Cmd::BlobLine* line_;
  ::Cmd::BlobPet* pet_;
  ::Cmd::BlobVar* var_;
  ::Cmd::BlobChatMsg* chatmsg_;
  ::Cmd::BlobUserTower* tower_;
  ::Cmd::BlobSeal* seal_;
  ::Cmd::BlobManual* manual_;
  ::Cmd::BlobFirstActionDone* action_;
  ::Cmd::BlobAttr* attr_;
  ::Cmd::BlobOption* opt_;
  ::Cmd::BlobHandNpc* handnpc_;
  ::Cmd::BlobCamera* camera_;
  ::Cmd::BlobZone* zone_;
  ::Cmd::BlobGuild* guild_;
  ::Cmd::BlobTeam* team_;
  ::Cmd::BlobUserZone* userzone_;
  ::Cmd::BlobSpEffect* speffect_;
  ::Cmd::BlobDeposit* deposit_;
  ::Cmd::BlobActivity* activity_;
  ::Cmd::BlobChat* chat_;
  ::Cmd::BlobBattle* battle_;
  ::Cmd::BlobStatVar* statvar_;
  ::Cmd::BlobSeeNpc* seenpc_;
  ::Cmd::BlobWeaponPet* weaponpet_;
  ::Cmd::BlobTicket* ticket_;
  ::Cmd::BlobShare* share_;
  ::Cmd::BlobAchieve* achieve_;
  ::Cmd::BlobAuthorize* authorize_;
  ::Cmd::BlobGuildRaid* guildraid_;
  ::Cmd::BlobAstrolabe* astrolabe_;
  ::Cmd::BlobSettings* settings_;
  ::Cmd::BlobPhoto* photo_;
  ::Cmd::BlobFood* food_;
  ::Cmd::BlobUserPet* userpet_;
  ::Cmd::BlobPetAdventure* petadventure_;
  ::Cmd::BlobTutorTask* tutortask_;
  ::Cmd::BlobEye* eye_;
  ::Cmd::BlobHighRefine* highrefine_;
  ::Cmd::BlobActivityEvent* acevent_;
  ::Cmd::BlobUserBeing* being_;
  ::Cmd::BlobGuildChallenge* gchallenge_;
  ::Cmd::BlobGvgData* gvgdata_;
  ::Cmd::BlobLottery* lottery_;
  ::Cmd::BlobServant* servant_;
  ::Cmd::BlobProfession* profession_;
  ::Cmd::BlobActivityQuest* activityquest_;
  ::Cmd::BlobBooth* booth_;
  ::Cmd::BlobExchangeShop* exchangeshop_;
  ::Cmd::BlobTransfer* transfer_;
  ::Cmd::BlobElementElfData* element_elf_;
  ::Cmd::BlobBoss* boss_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobData* default_instance_;
};
// -------------------------------------------------------------------

class UserAccData : public ::google::protobuf::Message {
 public:
  UserAccData();
  virtual ~UserAccData();

  UserAccData(const UserAccData& from);

  inline UserAccData& operator=(const UserAccData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAccData& default_instance();

  void Swap(UserAccData* other);

  // implements Message ----------------------------------------------

  UserAccData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAccData& from);
  void MergeFrom(const UserAccData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nologintime = 1 [default = 0];
  inline bool has_nologintime() const;
  inline void clear_nologintime();
  static const int kNologintimeFieldNumber = 1;
  inline ::google::protobuf::uint32 nologintime() const;
  inline void set_nologintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserAccData)
 private:
  inline void set_has_nologintime();
  inline void clear_has_nologintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 nologintime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserAccData* default_instance_;
};
// -------------------------------------------------------------------

class BlobAccData : public ::google::protobuf::Message {
 public:
  BlobAccData();
  virtual ~BlobAccData();

  BlobAccData(const BlobAccData& from);

  inline BlobAccData& operator=(const BlobAccData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAccData& default_instance();

  void Swap(BlobAccData* other);

  // implements Message ----------------------------------------------

  BlobAccData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAccData& from);
  void MergeFrom(const BlobAccData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.BlobAccUser user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::Cmd::BlobAccUser& user() const;
  inline ::Cmd::BlobAccUser* mutable_user();
  inline ::Cmd::BlobAccUser* release_user();
  inline void set_allocated_user(::Cmd::BlobAccUser* user);

  // optional .Cmd.BlobNewCredit credit = 2;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 2;
  inline const ::Cmd::BlobNewCredit& credit() const;
  inline ::Cmd::BlobNewCredit* mutable_credit();
  inline ::Cmd::BlobNewCredit* release_credit();
  inline void set_allocated_credit(::Cmd::BlobNewCredit* credit);

  // optional .Cmd.BlobShopGotItem shop = 3;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 3;
  inline const ::Cmd::BlobShopGotItem& shop() const;
  inline ::Cmd::BlobShopGotItem* mutable_shop();
  inline ::Cmd::BlobShopGotItem* release_shop();
  inline void set_allocated_shop(::Cmd::BlobShopGotItem* shop);

  // optional .Cmd.BlobAccVar var = 4;
  inline bool has_var() const;
  inline void clear_var();
  static const int kVarFieldNumber = 4;
  inline const ::Cmd::BlobAccVar& var() const;
  inline ::Cmd::BlobAccVar* mutable_var();
  inline ::Cmd::BlobAccVar* release_var();
  inline void set_allocated_var(::Cmd::BlobAccVar* var);

  // optional .Cmd.BlobManual manual = 5;
  inline bool has_manual() const;
  inline void clear_manual();
  static const int kManualFieldNumber = 5;
  inline const ::Cmd::BlobManual& manual() const;
  inline ::Cmd::BlobManual* mutable_manual();
  inline ::Cmd::BlobManual* release_manual();
  inline void set_allocated_manual(::Cmd::BlobManual* manual);

  // optional .Cmd.BlobFood food = 6;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 6;
  inline const ::Cmd::BlobFood& food() const;
  inline ::Cmd::BlobFood* mutable_food();
  inline ::Cmd::BlobFood* release_food();
  inline void set_allocated_food(::Cmd::BlobFood* food);

  // optional .Cmd.BlobQuest quest = 7;
  inline bool has_quest() const;
  inline void clear_quest();
  static const int kQuestFieldNumber = 7;
  inline const ::Cmd::BlobQuest& quest() const;
  inline ::Cmd::BlobQuest* mutable_quest();
  inline ::Cmd::BlobQuest* release_quest();
  inline void set_allocated_quest(::Cmd::BlobQuest* quest);

  // optional .Cmd.BlobAchieve achieve = 8;
  inline bool has_achieve() const;
  inline void clear_achieve();
  static const int kAchieveFieldNumber = 8;
  inline const ::Cmd::BlobAchieve& achieve() const;
  inline ::Cmd::BlobAchieve* mutable_achieve();
  inline ::Cmd::BlobAchieve* release_achieve();
  inline void set_allocated_achieve(::Cmd::BlobAchieve* achieve);

  // optional .Cmd.BlobTitle title = 9;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 9;
  inline const ::Cmd::BlobTitle& title() const;
  inline ::Cmd::BlobTitle* mutable_title();
  inline ::Cmd::BlobTitle* release_title();
  inline void set_allocated_title(::Cmd::BlobTitle* title);

  // optional .Cmd.BlobScenery scenery = 10;
  inline bool has_scenery() const;
  inline void clear_scenery();
  static const int kSceneryFieldNumber = 10;
  inline const ::Cmd::BlobScenery& scenery() const;
  inline ::Cmd::BlobScenery* mutable_scenery();
  inline ::Cmd::BlobScenery* release_scenery();
  inline void set_allocated_scenery(::Cmd::BlobScenery* scenery);

  // optional .Cmd.BlobMenu menu = 11;
  inline bool has_menu() const;
  inline void clear_menu();
  static const int kMenuFieldNumber = 11;
  inline const ::Cmd::BlobMenu& menu() const;
  inline ::Cmd::BlobMenu* mutable_menu();
  inline ::Cmd::BlobMenu* release_menu();
  inline void set_allocated_menu(::Cmd::BlobMenu* menu);

  // optional .Cmd.BlobActivityEvent acevent = 12;
  inline bool has_acevent() const;
  inline void clear_acevent();
  static const int kAceventFieldNumber = 12;
  inline const ::Cmd::BlobActivityEvent& acevent() const;
  inline ::Cmd::BlobActivityEvent* mutable_acevent();
  inline ::Cmd::BlobActivityEvent* release_acevent();
  inline void set_allocated_acevent(::Cmd::BlobActivityEvent* acevent);

  // optional .Cmd.BlobUnsolvedPhoto photo = 13;
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 13;
  inline const ::Cmd::BlobUnsolvedPhoto& photo() const;
  inline ::Cmd::BlobUnsolvedPhoto* mutable_photo();
  inline ::Cmd::BlobUnsolvedPhoto* release_photo();
  inline void set_allocated_photo(::Cmd::BlobUnsolvedPhoto* photo);

  // optional .Cmd.BlobPortrait portrait = 14;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 14;
  inline const ::Cmd::BlobPortrait& portrait() const;
  inline ::Cmd::BlobPortrait* mutable_portrait();
  inline ::Cmd::BlobPortrait* release_portrait();
  inline void set_allocated_portrait(::Cmd::BlobPortrait* portrait);

  // optional .Cmd.BlobQuestNpc questnpc = 15;
  inline bool has_questnpc() const;
  inline void clear_questnpc();
  static const int kQuestnpcFieldNumber = 15;
  inline const ::Cmd::BlobQuestNpc& questnpc() const;
  inline ::Cmd::BlobQuestNpc* mutable_questnpc();
  inline ::Cmd::BlobQuestNpc* release_questnpc();
  inline void set_allocated_questnpc(::Cmd::BlobQuestNpc* questnpc);

  // optional .Cmd.BlobPetWork petwork = 16;
  inline bool has_petwork() const;
  inline void clear_petwork();
  static const int kPetworkFieldNumber = 16;
  inline const ::Cmd::BlobPetWork& petwork() const;
  inline ::Cmd::BlobPetWork* mutable_petwork();
  inline ::Cmd::BlobPetWork* release_petwork();
  inline void set_allocated_petwork(::Cmd::BlobPetWork* petwork);

  // optional .Cmd.BlobShareSkill skill = 17;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 17;
  inline const ::Cmd::BlobShareSkill& skill() const;
  inline ::Cmd::BlobShareSkill* mutable_skill();
  inline ::Cmd::BlobShareSkill* release_skill();
  inline void set_allocated_skill(::Cmd::BlobShareSkill* skill);

  // optional .Cmd.BlobServant servant = 18;
  inline bool has_servant() const;
  inline void clear_servant();
  static const int kServantFieldNumber = 18;
  inline const ::Cmd::BlobServant& servant() const;
  inline ::Cmd::BlobServant* mutable_servant();
  inline ::Cmd::BlobServant* release_servant();
  inline void set_allocated_servant(::Cmd::BlobServant* servant);

  // optional .Cmd.BlobRecordInfo record = 19;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 19;
  inline const ::Cmd::BlobRecordInfo& record() const;
  inline ::Cmd::BlobRecordInfo* mutable_record();
  inline ::Cmd::BlobRecordInfo* release_record();
  inline void set_allocated_record(::Cmd::BlobRecordInfo* record);

  // optional .Cmd.BlobPack pack = 20;
  inline bool has_pack() const;
  inline void clear_pack();
  static const int kPackFieldNumber = 20;
  inline const ::Cmd::BlobPack& pack() const;
  inline ::Cmd::BlobPack* mutable_pack();
  inline ::Cmd::BlobPack* release_pack();
  inline void set_allocated_pack(::Cmd::BlobPack* pack);

  // optional .Cmd.BlobLottery lottery = 21;
  inline bool has_lottery() const;
  inline void clear_lottery();
  static const int kLotteryFieldNumber = 21;
  inline const ::Cmd::BlobLottery& lottery() const;
  inline ::Cmd::BlobLottery* mutable_lottery();
  inline ::Cmd::BlobLottery* release_lottery();
  inline void set_allocated_lottery(::Cmd::BlobLottery* lottery);

  // @@protoc_insertion_point(class_scope:Cmd.BlobAccData)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_shop();
  inline void clear_has_shop();
  inline void set_has_var();
  inline void clear_has_var();
  inline void set_has_manual();
  inline void clear_has_manual();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_quest();
  inline void clear_has_quest();
  inline void set_has_achieve();
  inline void clear_has_achieve();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_scenery();
  inline void clear_has_scenery();
  inline void set_has_menu();
  inline void clear_has_menu();
  inline void set_has_acevent();
  inline void clear_has_acevent();
  inline void set_has_photo();
  inline void clear_has_photo();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_questnpc();
  inline void clear_has_questnpc();
  inline void set_has_petwork();
  inline void clear_has_petwork();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_servant();
  inline void clear_has_servant();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_pack();
  inline void clear_has_pack();
  inline void set_has_lottery();
  inline void clear_has_lottery();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::BlobAccUser* user_;
  ::Cmd::BlobNewCredit* credit_;
  ::Cmd::BlobShopGotItem* shop_;
  ::Cmd::BlobAccVar* var_;
  ::Cmd::BlobManual* manual_;
  ::Cmd::BlobFood* food_;
  ::Cmd::BlobQuest* quest_;
  ::Cmd::BlobAchieve* achieve_;
  ::Cmd::BlobTitle* title_;
  ::Cmd::BlobScenery* scenery_;
  ::Cmd::BlobMenu* menu_;
  ::Cmd::BlobActivityEvent* acevent_;
  ::Cmd::BlobUnsolvedPhoto* photo_;
  ::Cmd::BlobPortrait* portrait_;
  ::Cmd::BlobQuestNpc* questnpc_;
  ::Cmd::BlobPetWork* petwork_;
  ::Cmd::BlobShareSkill* skill_;
  ::Cmd::BlobServant* servant_;
  ::Cmd::BlobRecordInfo* record_;
  ::Cmd::BlobPack* pack_;
  ::Cmd::BlobLottery* lottery_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAccData* default_instance_;
};
// -------------------------------------------------------------------

class BlobAccUser : public ::google::protobuf::Message {
 public:
  BlobAccUser();
  virtual ~BlobAccUser();

  BlobAccUser(const BlobAccUser& from);

  inline BlobAccUser& operator=(const BlobAccUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAccUser& default_instance();

  void Swap(BlobAccUser* other);

  // implements Message ----------------------------------------------

  BlobAccUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAccUser& from);
  void MergeFrom(const BlobAccUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 auguryreward = 1 [default = 0];
  inline bool has_auguryreward() const;
  inline void clear_auguryreward();
  static const int kAuguryrewardFieldNumber = 1;
  inline ::google::protobuf::uint32 auguryreward() const;
  inline void set_auguryreward(::google::protobuf::uint32 value);

  // optional uint32 maxbaselv = 2 [default = 0];
  inline bool has_maxbaselv() const;
  inline void clear_maxbaselv();
  static const int kMaxbaselvFieldNumber = 2;
  inline ::google::protobuf::uint32 maxbaselv() const;
  inline void set_maxbaselv(::google::protobuf::uint32 value);

  // optional uint32 maxbaselv_resettime = 3 [default = 0];
  inline bool has_maxbaselv_resettime() const;
  inline void clear_maxbaselv_resettime();
  static const int kMaxbaselvResettimeFieldNumber = 3;
  inline ::google::protobuf::uint32 maxbaselv_resettime() const;
  inline void set_maxbaselv_resettime(::google::protobuf::uint32 value);

  // repeated .Cmd.PhotoMd5 md5s = 4;
  inline int md5s_size() const;
  inline void clear_md5s();
  static const int kMd5SFieldNumber = 4;
  inline const ::Cmd::PhotoMd5& md5s(int index) const;
  inline ::Cmd::PhotoMd5* mutable_md5s(int index);
  inline ::Cmd::PhotoMd5* add_md5s();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >&
      md5s() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >*
      mutable_md5s();

  // repeated .Cmd.BlobJoyData accjoy = 5;
  inline int accjoy_size() const;
  inline void clear_accjoy();
  static const int kAccjoyFieldNumber = 5;
  inline const ::Cmd::BlobJoyData& accjoy(int index) const;
  inline ::Cmd::BlobJoyData* mutable_accjoy(int index);
  inline ::Cmd::BlobJoyData* add_accjoy();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobJoyData >&
      accjoy() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobJoyData >*
      mutable_accjoy();

  // repeated uint32 shownpcs = 6;
  inline int shownpcs_size() const;
  inline void clear_shownpcs();
  static const int kShownpcsFieldNumber = 6;
  inline ::google::protobuf::uint32 shownpcs(int index) const;
  inline void set_shownpcs(int index, ::google::protobuf::uint32 value);
  inline void add_shownpcs(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shownpcs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shownpcs();

  // optional uint64 char_primary_id = 7;
  inline bool has_char_primary_id() const;
  inline void clear_char_primary_id();
  static const int kCharPrimaryIdFieldNumber = 7;
  inline ::google::protobuf::uint64 char_primary_id() const;
  inline void set_char_primary_id(::google::protobuf::uint64 value);

  // repeated uint64 patchversion = 8;
  inline int patchversion_size() const;
  inline void clear_patchversion();
  static const int kPatchversionFieldNumber = 8;
  inline ::google::protobuf::uint64 patchversion(int index) const;
  inline void set_patchversion(int index, ::google::protobuf::uint64 value);
  inline void add_patchversion(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      patchversion() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_patchversion();

  // @@protoc_insertion_point(class_scope:Cmd.BlobAccUser)
 private:
  inline void set_has_auguryreward();
  inline void clear_has_auguryreward();
  inline void set_has_maxbaselv();
  inline void clear_has_maxbaselv();
  inline void set_has_maxbaselv_resettime();
  inline void clear_has_maxbaselv_resettime();
  inline void set_has_char_primary_id();
  inline void clear_has_char_primary_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 auguryreward_;
  ::google::protobuf::uint32 maxbaselv_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 > md5s_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobJoyData > accjoy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shownpcs_;
  ::google::protobuf::uint64 char_primary_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > patchversion_;
  ::google::protobuf::uint32 maxbaselv_resettime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAccUser* default_instance_;
};
// -------------------------------------------------------------------

class BlobUnsolvedPhoto : public ::google::protobuf::Message {
 public:
  BlobUnsolvedPhoto();
  virtual ~BlobUnsolvedPhoto();

  BlobUnsolvedPhoto(const BlobUnsolvedPhoto& from);

  inline BlobUnsolvedPhoto& operator=(const BlobUnsolvedPhoto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobUnsolvedPhoto& default_instance();

  void Swap(BlobUnsolvedPhoto* other);

  // implements Message ----------------------------------------------

  BlobUnsolvedPhoto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobUnsolvedPhoto& from);
  void MergeFrom(const BlobUnsolvedPhoto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.UnsolvedUserPhoto photos = 1;
  inline int photos_size() const;
  inline void clear_photos();
  static const int kPhotosFieldNumber = 1;
  inline const ::Cmd::UnsolvedUserPhoto& photos(int index) const;
  inline ::Cmd::UnsolvedUserPhoto* mutable_photos(int index);
  inline ::Cmd::UnsolvedUserPhoto* add_photos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UnsolvedUserPhoto >&
      photos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UnsolvedUserPhoto >*
      mutable_photos();

  // @@protoc_insertion_point(class_scope:Cmd.BlobUnsolvedPhoto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UnsolvedUserPhoto > photos_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobUnsolvedPhoto* default_instance_;
};
// -------------------------------------------------------------------

class BlobBoss : public ::google::protobuf::Message {
 public:
  BlobBoss();
  virtual ~BlobBoss();

  BlobBoss(const BlobBoss& from);

  inline BlobBoss& operator=(const BlobBoss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobBoss& default_instance();

  void Swap(BlobBoss* other);

  // implements Message ----------------------------------------------

  BlobBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobBoss& from);
  void MergeFrom(const BlobBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool open_ntf = 1 [default = false];
  inline bool has_open_ntf() const;
  inline void clear_open_ntf();
  static const int kOpenNtfFieldNumber = 1;
  inline bool open_ntf() const;
  inline void set_open_ntf(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobBoss)
 private:
  inline void set_has_open_ntf();
  inline void clear_has_open_ntf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool open_ntf_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobBoss* default_instance_;
};
// -------------------------------------------------------------------

class BlobUser : public ::google::protobuf::Message {
 public:
  BlobUser();
  virtual ~BlobUser();

  BlobUser(const BlobUser& from);

  inline BlobUser& operator=(const BlobUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobUser& default_instance();

  void Swap(BlobUser* other);

  // implements Message ----------------------------------------------

  BlobUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobUser& from);
  void MergeFrom(const BlobUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional uint32 clothcolor = 4 [default = 0];
  inline bool has_clothcolor() const;
  inline void clear_clothcolor();
  static const int kClothcolorFieldNumber = 4;
  inline ::google::protobuf::uint32 clothcolor() const;
  inline void set_clothcolor(::google::protobuf::uint32 value);

  // optional uint32 purify = 6 [default = 0];
  inline bool has_purify() const;
  inline void clear_purify();
  static const int kPurifyFieldNumber = 6;
  inline ::google::protobuf::uint32 purify() const;
  inline void set_purify(::google::protobuf::uint32 value);

  // optional uint32 savemap = 7 [default = 0];
  inline bool has_savemap() const;
  inline void clear_savemap();
  static const int kSavemapFieldNumber = 7;
  inline ::google::protobuf::uint32 savemap() const;
  inline void set_savemap(::google::protobuf::uint32 value);

  // optional uint32 lastmapid = 8;
  inline bool has_lastmapid() const;
  inline void clear_lastmapid();
  static const int kLastmapidFieldNumber = 8;
  inline ::google::protobuf::uint32 lastmapid() const;
  inline void set_lastmapid(::google::protobuf::uint32 value);

  // optional uint32 lastrealmapid = 11;
  inline bool has_lastrealmapid() const;
  inline void clear_lastrealmapid();
  static const int kLastrealmapidFieldNumber = 11;
  inline ::google::protobuf::uint32 lastrealmapid() const;
  inline void set_lastrealmapid(::google::protobuf::uint32 value);

  // repeated uint32 shownpcs = 9;
  inline int shownpcs_size() const;
  inline void clear_shownpcs();
  static const int kShownpcsFieldNumber = 9;
  inline ::google::protobuf::uint32 shownpcs(int index) const;
  inline void set_shownpcs(int index, ::google::protobuf::uint32 value);
  inline void add_shownpcs(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shownpcs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shownpcs();

  // repeated uint32 mapareas = 10;
  inline int mapareas_size() const;
  inline void clear_mapareas();
  static const int kMapareasFieldNumber = 10;
  inline ::google::protobuf::uint32 mapareas(int index) const;
  inline void set_mapareas(int index, ::google::protobuf::uint32 value);
  inline void add_mapareas(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mapareas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mapareas();

  // repeated uint32 patchversion = 12;
  inline int patchversion_size() const;
  inline void clear_patchversion();
  static const int kPatchversionFieldNumber = 12;
  inline ::google::protobuf::uint32 patchversion(int index) const;
  inline void set_patchversion(int index, ::google::protobuf::uint32 value);
  inline void add_patchversion(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      patchversion() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_patchversion();

  // optional uint32 teamtimelen = 13 [default = 0];
  inline bool has_teamtimelen() const;
  inline void clear_teamtimelen();
  static const int kTeamtimelenFieldNumber = 13;
  inline ::google::protobuf::uint32 teamtimelen() const;
  inline void set_teamtimelen(::google::protobuf::uint32 value);

  // optional uint64 followerid = 14 [default = 0];
  inline bool has_followerid() const;
  inline void clear_followerid();
  static const int kFolloweridFieldNumber = 14;
  inline ::google::protobuf::uint64 followerid() const;
  inline void set_followerid(::google::protobuf::uint64 value);

  // optional uint32 leveluptime = 15 [default = 0];
  inline bool has_leveluptime() const;
  inline void clear_leveluptime();
  static const int kLeveluptimeFieldNumber = 15;
  inline ::google::protobuf::uint32 leveluptime() const;
  inline void set_leveluptime(::google::protobuf::uint32 value);

  // optional uint32 lastsmapid = 16 [default = 0];
  inline bool has_lastsmapid() const;
  inline void clear_lastsmapid();
  static const int kLastsmapidFieldNumber = 16;
  inline ::google::protobuf::uint32 lastsmapid() const;
  inline void set_lastsmapid(::google::protobuf::uint32 value);

  // optional float sx = 17 [default = 0];
  inline bool has_sx() const;
  inline void clear_sx();
  static const int kSxFieldNumber = 17;
  inline float sx() const;
  inline void set_sx(float value);

  // optional float sy = 18 [default = 0];
  inline bool has_sy() const;
  inline void clear_sy();
  static const int kSyFieldNumber = 18;
  inline float sy() const;
  inline void set_sy(float value);

  // optional float sz = 19 [default = 0];
  inline bool has_sz() const;
  inline void clear_sz();
  static const int kSzFieldNumber = 19;
  inline float sz() const;
  inline void set_sz(float value);

  // optional uint32 healcount = 20 [default = 0];
  inline bool has_healcount() const;
  inline void clear_healcount();
  static const int kHealcountFieldNumber = 20;
  inline ::google::protobuf::uint32 healcount() const;
  inline void set_healcount(::google::protobuf::uint32 value);

  // optional uint32 zeny_max = 21 [default = 0];
  inline bool has_zeny_max() const;
  inline void clear_zeny_max();
  static const int kZenyMaxFieldNumber = 21;
  inline ::google::protobuf::uint32 zeny_max() const;
  inline void set_zeny_max(::google::protobuf::uint32 value);

  // optional uint32 zeny_debt = 22 [default = 0];
  inline bool has_zeny_debt() const;
  inline void clear_zeny_debt();
  static const int kZenyDebtFieldNumber = 22;
  inline ::google::protobuf::uint32 zeny_debt() const;
  inline void set_zeny_debt(::google::protobuf::uint32 value);

  // optional uint32 pvp_coin = 23 [default = 0];
  inline bool has_pvp_coin() const;
  inline void clear_pvp_coin();
  static const int kPvpCoinFieldNumber = 23;
  inline ::google::protobuf::uint32 pvp_coin() const;
  inline void set_pvp_coin(::google::protobuf::uint32 value);

  // optional uint32 con = 24 [default = 0];
  inline bool has_con() const;
  inline void clear_con();
  static const int kConFieldNumber = 24;
  inline ::google::protobuf::uint32 con() const;
  inline void set_con(::google::protobuf::uint32 value);

  // optional bool coninit = 25 [default = false];
  inline bool has_coninit() const;
  inline void clear_coninit();
  static const int kConinitFieldNumber = 25;
  inline bool coninit() const;
  inline void set_coninit(bool value);

  // optional uint64 charge_zeny = 26;
  inline bool has_charge_zeny() const;
  inline void clear_charge_zeny();
  static const int kChargeZenyFieldNumber = 26;
  inline ::google::protobuf::uint64 charge_zeny() const;
  inline void set_charge_zeny(::google::protobuf::uint64 value);

  // optional uint32 charge_lottery = 27;
  inline bool has_charge_lottery() const;
  inline void clear_charge_lottery();
  static const int kChargeLotteryFieldNumber = 27;
  inline ::google::protobuf::uint32 charge_lottery() const;
  inline void set_charge_lottery(::google::protobuf::uint32 value);

  // optional uint32 lottery_coin = 28 [default = 0];
  inline bool has_lottery_coin() const;
  inline void clear_lottery_coin();
  static const int kLotteryCoinFieldNumber = 28;
  inline ::google::protobuf::uint32 lottery_coin() const;
  inline void set_lottery_coin(::google::protobuf::uint32 value);

  // optional uint32 rename_time = 29 [default = 0];
  inline bool has_rename_time() const;
  inline void clear_rename_time();
  static const int kRenameTimeFieldNumber = 29;
  inline ::google::protobuf::uint32 rename_time() const;
  inline void set_rename_time(::google::protobuf::uint32 value);

  // optional uint32 guild_honor = 30 [default = 0];
  inline bool has_guild_honor() const;
  inline void clear_guild_honor();
  static const int kGuildHonorFieldNumber = 30;
  inline ::google::protobuf::uint32 guild_honor() const;
  inline void set_guild_honor(::google::protobuf::uint32 value);

  // optional uint64 save_index = 31 [default = 0];
  inline bool has_save_index() const;
  inline void clear_save_index();
  static const int kSaveIndexFieldNumber = 31;
  inline ::google::protobuf::uint64 save_index() const;
  inline void set_save_index(::google::protobuf::uint64 value);

  // optional bool divorce_roller_coaster = 32 [default = false];
  inline bool has_divorce_roller_coaster() const;
  inline void clear_divorce_roller_coaster();
  static const int kDivorceRollerCoasterFieldNumber = 32;
  inline bool divorce_roller_coaster() const;
  inline void set_divorce_roller_coaster(bool value);

  // optional uint64 daily_normal_zeny = 33;
  inline bool has_daily_normal_zeny() const;
  inline void clear_daily_normal_zeny();
  static const int kDailyNormalZenyFieldNumber = 33;
  inline ::google::protobuf::uint64 daily_normal_zeny() const;
  inline void set_daily_normal_zeny(::google::protobuf::uint64 value);

  // optional uint64 daily_charge_zeny = 34;
  inline bool has_daily_charge_zeny() const;
  inline void clear_daily_charge_zeny();
  static const int kDailyChargeZenyFieldNumber = 34;
  inline ::google::protobuf::uint64 daily_charge_zeny() const;
  inline void set_daily_charge_zeny(::google::protobuf::uint64 value);

  // optional uint64 tutorbattletime = 35 [default = 0];
  inline bool has_tutorbattletime() const;
  inline void clear_tutorbattletime();
  static const int kTutorbattletimeFieldNumber = 35;
  inline ::google::protobuf::uint64 tutorbattletime() const;
  inline void set_tutorbattletime(::google::protobuf::uint64 value);

  // optional uint64 usedtutorbattletime = 36 [default = 0];
  inline bool has_usedtutorbattletime() const;
  inline void clear_usedtutorbattletime();
  static const int kUsedtutorbattletimeFieldNumber = 36;
  inline ::google::protobuf::uint64 usedtutorbattletime() const;
  inline void set_usedtutorbattletime(::google::protobuf::uint64 value);

  // optional uint32 last_offlinetime = 37;
  inline bool has_last_offlinetime() const;
  inline void clear_last_offlinetime();
  static const int kLastOfflinetimeFieldNumber = 37;
  inline ::google::protobuf::uint32 last_offlinetime() const;
  inline void set_last_offlinetime(::google::protobuf::uint32 value);

  // optional uint32 last_baselv = 38;
  inline bool has_last_baselv() const;
  inline void clear_last_baselv();
  static const int kLastBaselvFieldNumber = 38;
  inline ::google::protobuf::uint32 last_baselv() const;
  inline void set_last_baselv(::google::protobuf::uint32 value);

  // optional uint32 last_joblv = 39;
  inline bool has_last_joblv() const;
  inline void clear_last_joblv();
  static const int kLastJoblvFieldNumber = 39;
  inline ::google::protobuf::uint32 last_joblv() const;
  inline void set_last_joblv(::google::protobuf::uint32 value);

  // optional uint32 dead_coin = 40 [default = 0];
  inline bool has_dead_coin() const;
  inline void clear_dead_coin();
  static const int kDeadCoinFieldNumber = 40;
  inline ::google::protobuf::uint32 dead_coin() const;
  inline void set_dead_coin(::google::protobuf::uint32 value);

  // optional uint32 dead_lv = 41 [default = 0];
  inline bool has_dead_lv() const;
  inline void clear_dead_lv();
  static const int kDeadLvFieldNumber = 41;
  inline ::google::protobuf::uint32 dead_lv() const;
  inline void set_dead_lv(::google::protobuf::uint32 value);

  // optional uint32 dead_exp = 42 [default = 0];
  inline bool has_dead_exp() const;
  inline void clear_dead_exp();
  static const int kDeadExpFieldNumber = 42;
  inline ::google::protobuf::uint32 dead_exp() const;
  inline void set_dead_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobUser)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_clothcolor();
  inline void clear_has_clothcolor();
  inline void set_has_purify();
  inline void clear_has_purify();
  inline void set_has_savemap();
  inline void clear_has_savemap();
  inline void set_has_lastmapid();
  inline void clear_has_lastmapid();
  inline void set_has_lastrealmapid();
  inline void clear_has_lastrealmapid();
  inline void set_has_teamtimelen();
  inline void clear_has_teamtimelen();
  inline void set_has_followerid();
  inline void clear_has_followerid();
  inline void set_has_leveluptime();
  inline void clear_has_leveluptime();
  inline void set_has_lastsmapid();
  inline void clear_has_lastsmapid();
  inline void set_has_sx();
  inline void clear_has_sx();
  inline void set_has_sy();
  inline void clear_has_sy();
  inline void set_has_sz();
  inline void clear_has_sz();
  inline void set_has_healcount();
  inline void clear_has_healcount();
  inline void set_has_zeny_max();
  inline void clear_has_zeny_max();
  inline void set_has_zeny_debt();
  inline void clear_has_zeny_debt();
  inline void set_has_pvp_coin();
  inline void clear_has_pvp_coin();
  inline void set_has_con();
  inline void clear_has_con();
  inline void set_has_coninit();
  inline void clear_has_coninit();
  inline void set_has_charge_zeny();
  inline void clear_has_charge_zeny();
  inline void set_has_charge_lottery();
  inline void clear_has_charge_lottery();
  inline void set_has_lottery_coin();
  inline void clear_has_lottery_coin();
  inline void set_has_rename_time();
  inline void clear_has_rename_time();
  inline void set_has_guild_honor();
  inline void clear_has_guild_honor();
  inline void set_has_save_index();
  inline void clear_has_save_index();
  inline void set_has_divorce_roller_coaster();
  inline void clear_has_divorce_roller_coaster();
  inline void set_has_daily_normal_zeny();
  inline void clear_has_daily_normal_zeny();
  inline void set_has_daily_charge_zeny();
  inline void clear_has_daily_charge_zeny();
  inline void set_has_tutorbattletime();
  inline void clear_has_tutorbattletime();
  inline void set_has_usedtutorbattletime();
  inline void clear_has_usedtutorbattletime();
  inline void set_has_last_offlinetime();
  inline void clear_has_last_offlinetime();
  inline void set_has_last_baselv();
  inline void clear_has_last_baselv();
  inline void set_has_last_joblv();
  inline void clear_has_last_joblv();
  inline void set_has_dead_coin();
  inline void clear_has_dead_coin();
  inline void set_has_dead_lv();
  inline void clear_has_dead_lv();
  inline void set_has_dead_exp();
  inline void clear_has_dead_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  float x_;
  float y_;
  float z_;
  ::google::protobuf::uint32 clothcolor_;
  ::google::protobuf::uint32 purify_;
  ::google::protobuf::uint32 savemap_;
  ::google::protobuf::uint32 lastmapid_;
  ::google::protobuf::uint32 lastrealmapid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shownpcs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mapareas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > patchversion_;
  ::google::protobuf::uint64 followerid_;
  ::google::protobuf::uint32 teamtimelen_;
  ::google::protobuf::uint32 leveluptime_;
  ::google::protobuf::uint32 lastsmapid_;
  float sx_;
  float sy_;
  float sz_;
  ::google::protobuf::uint32 healcount_;
  ::google::protobuf::uint32 zeny_max_;
  ::google::protobuf::uint32 zeny_debt_;
  ::google::protobuf::uint32 pvp_coin_;
  ::google::protobuf::uint32 con_;
  ::google::protobuf::uint32 charge_lottery_;
  ::google::protobuf::uint64 charge_zeny_;
  ::google::protobuf::uint32 lottery_coin_;
  bool coninit_;
  bool divorce_roller_coaster_;
  ::google::protobuf::uint32 rename_time_;
  ::google::protobuf::uint32 guild_honor_;
  ::google::protobuf::uint64 save_index_;
  ::google::protobuf::uint64 daily_normal_zeny_;
  ::google::protobuf::uint64 daily_charge_zeny_;
  ::google::protobuf::uint64 tutorbattletime_;
  ::google::protobuf::uint64 usedtutorbattletime_;
  ::google::protobuf::uint32 last_offlinetime_;
  ::google::protobuf::uint32 last_baselv_;
  ::google::protobuf::uint32 last_joblv_;
  ::google::protobuf::uint32 dead_coin_;
  ::google::protobuf::uint32 dead_lv_;
  ::google::protobuf::uint32 dead_exp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobUser* default_instance_;
};
// -------------------------------------------------------------------

class SkillReplaceInfo : public ::google::protobuf::Message {
 public:
  SkillReplaceInfo();
  virtual ~SkillReplaceInfo();

  SkillReplaceInfo(const SkillReplaceInfo& from);

  inline SkillReplaceInfo& operator=(const SkillReplaceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillReplaceInfo& default_instance();

  void Swap(SkillReplaceInfo* other);

  // implements Message ----------------------------------------------

  SkillReplaceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillReplaceInfo& from);
  void MergeFrom(const SkillReplaceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 oldid = 1 [default = 0];
  inline bool has_oldid() const;
  inline void clear_oldid();
  static const int kOldidFieldNumber = 1;
  inline ::google::protobuf::uint32 oldid() const;
  inline void set_oldid(::google::protobuf::uint32 value);

  // optional uint32 newid = 2 [default = 0];
  inline bool has_newid() const;
  inline void clear_newid();
  static const int kNewidFieldNumber = 2;
  inline ::google::protobuf::uint32 newid() const;
  inline void set_newid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SkillReplaceInfo)
 private:
  inline void set_has_oldid();
  inline void clear_has_oldid();
  inline void set_has_newid();
  inline void clear_has_newid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 oldid_;
  ::google::protobuf::uint32 newid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static SkillReplaceInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillShortcutDB : public ::google::protobuf::Message {
 public:
  SkillShortcutDB();
  virtual ~SkillShortcutDB();

  SkillShortcutDB(const SkillShortcutDB& from);

  inline SkillShortcutDB& operator=(const SkillShortcutDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillShortcutDB& default_instance();

  void Swap(SkillShortcutDB* other);

  // implements Message ----------------------------------------------

  SkillShortcutDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillShortcutDB& from);
  void MergeFrom(const SkillShortcutDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::ESkillShortcut type() const;
  inline void set_type(::Cmd::ESkillShortcut value);

  // repeated .Cmd.SkillPos cuts = 2;
  inline int cuts_size() const;
  inline void clear_cuts();
  static const int kCutsFieldNumber = 2;
  inline const ::Cmd::SkillPos& cuts(int index) const;
  inline ::Cmd::SkillPos* mutable_cuts(int index);
  inline ::Cmd::SkillPos* add_cuts();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
      cuts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
      mutable_cuts();

  // @@protoc_insertion_point(class_scope:Cmd.SkillShortcutDB)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos > cuts_;
  int type_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static SkillShortcutDB* default_instance_;
};
// -------------------------------------------------------------------

class UserSkillData : public ::google::protobuf::Message {
 public:
  UserSkillData();
  virtual ~UserSkillData();

  UserSkillData(const UserSkillData& from);

  inline UserSkillData& operator=(const UserSkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSkillData& default_instance();

  void Swap(UserSkillData* other);

  // implements Message ----------------------------------------------

  UserSkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSkillData& from);
  void MergeFrom(const UserSkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 totalpoint = 1;
  inline bool has_totalpoint() const;
  inline void clear_totalpoint();
  static const int kTotalpointFieldNumber = 1;
  inline ::google::protobuf::uint32 totalpoint() const;
  inline void set_totalpoint(::google::protobuf::uint32 value);

  // optional uint32 maxpos = 2;
  inline bool has_maxpos() const;
  inline void clear_maxpos();
  static const int kMaxposFieldNumber = 2;
  inline ::google::protobuf::uint32 maxpos() const;
  inline void set_maxpos(::google::protobuf::uint32 value);

  // repeated .Cmd.SkillData datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::SkillData& datas(int index) const;
  inline ::Cmd::SkillData* mutable_datas(int index);
  inline ::Cmd::SkillData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >*
      mutable_datas();

  // repeated .Cmd.SkillPos pos = 4;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::Cmd::SkillPos& pos(int index) const;
  inline ::Cmd::SkillPos* mutable_pos(int index);
  inline ::Cmd::SkillPos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
      mutable_pos();

  // optional uint32 automaxpos = 5;
  inline bool has_automaxpos() const;
  inline void clear_automaxpos();
  static const int kAutomaxposFieldNumber = 5;
  inline ::google::protobuf::uint32 automaxpos() const;
  inline void set_automaxpos(::google::protobuf::uint32 value);

  // repeated .Cmd.SkillPos autopos = 6;
  inline int autopos_size() const;
  inline void clear_autopos();
  static const int kAutoposFieldNumber = 6;
  inline const ::Cmd::SkillPos& autopos(int index) const;
  inline ::Cmd::SkillPos* mutable_autopos(int index);
  inline ::Cmd::SkillPos* add_autopos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
      autopos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
      mutable_autopos();

  // repeated .Cmd.SkillPos extendpos = 7;
  inline int extendpos_size() const;
  inline void clear_extendpos();
  static const int kExtendposFieldNumber = 7;
  inline const ::Cmd::SkillPos& extendpos(int index) const;
  inline ::Cmd::SkillPos* mutable_extendpos(int index);
  inline ::Cmd::SkillPos* add_extendpos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
      extendpos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
      mutable_extendpos();

  // optional uint32 maxextendpos = 8;
  inline bool has_maxextendpos() const;
  inline void clear_maxextendpos();
  static const int kMaxextendposFieldNumber = 8;
  inline ::google::protobuf::uint32 maxextendpos() const;
  inline void set_maxextendpos(::google::protobuf::uint32 value);

  // optional bool reseted = 10 [default = false];
  inline bool has_reseted() const;
  inline void clear_reseted();
  static const int kResetedFieldNumber = 10;
  inline bool reseted() const;
  inline void set_reseted(bool value);

  // repeated .Cmd.SkillReplaceInfo replace = 11;
  inline int replace_size() const;
  inline void clear_replace();
  static const int kReplaceFieldNumber = 11;
  inline const ::Cmd::SkillReplaceInfo& replace(int index) const;
  inline ::Cmd::SkillReplaceInfo* mutable_replace(int index);
  inline ::Cmd::SkillReplaceInfo* add_replace();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillReplaceInfo >&
      replace() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillReplaceInfo >*
      mutable_replace();

  // repeated .Cmd.SkillShortcutDB shortcuts = 12;
  inline int shortcuts_size() const;
  inline void clear_shortcuts();
  static const int kShortcutsFieldNumber = 12;
  inline const ::Cmd::SkillShortcutDB& shortcuts(int index) const;
  inline ::Cmd::SkillShortcutDB* mutable_shortcuts(int index);
  inline ::Cmd::SkillShortcutDB* add_shortcuts();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillShortcutDB >&
      shortcuts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillShortcutDB >*
      mutable_shortcuts();

  // optional uint32 last_concert_skillid = 13 [default = 0];
  inline bool has_last_concert_skillid() const;
  inline void clear_last_concert_skillid();
  static const int kLastConcertSkillidFieldNumber = 13;
  inline ::google::protobuf::uint32 last_concert_skillid() const;
  inline void set_last_concert_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserSkillData)
 private:
  inline void set_has_totalpoint();
  inline void clear_has_totalpoint();
  inline void set_has_maxpos();
  inline void clear_has_maxpos();
  inline void set_has_automaxpos();
  inline void clear_has_automaxpos();
  inline void set_has_maxextendpos();
  inline void clear_has_maxextendpos();
  inline void set_has_reseted();
  inline void clear_has_reseted();
  inline void set_has_last_concert_skillid();
  inline void clear_has_last_concert_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 totalpoint_;
  ::google::protobuf::uint32 maxpos_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos > pos_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos > autopos_;
  ::google::protobuf::uint32 automaxpos_;
  ::google::protobuf::uint32 maxextendpos_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos > extendpos_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillReplaceInfo > replace_;
  bool reseted_;
  ::google::protobuf::uint32 last_concert_skillid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillShortcutDB > shortcuts_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserSkillData* default_instance_;
};
// -------------------------------------------------------------------

class BlobShareSkill : public ::google::protobuf::Message {
 public:
  BlobShareSkill();
  virtual ~BlobShareSkill();

  BlobShareSkill(const BlobShareSkill& from);

  inline BlobShareSkill& operator=(const BlobShareSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShareSkill& default_instance();

  void Swap(BlobShareSkill* other);

  // implements Message ----------------------------------------------

  BlobShareSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShareSkill& from);
  void MergeFrom(const BlobShareSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.SkillItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::SkillItem& items(int index) const;
  inline ::Cmd::SkillItem* mutable_items(int index);
  inline ::Cmd::SkillItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.BlobShareSkill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillItem > items_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobShareSkill* default_instance_;
};
// -------------------------------------------------------------------

class UserRoleData : public ::google::protobuf::Message {
 public:
  UserRoleData();
  virtual ~UserRoleData();

  UserRoleData(const UserRoleData& from);

  inline UserRoleData& operator=(const UserRoleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRoleData& default_instance();

  void Swap(UserRoleData* other);

  // implements Message ----------------------------------------------

  UserRoleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRoleData& from);
  void MergeFrom(const UserRoleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 jobExp = 1 [default = 0];
  inline bool has_jobexp() const;
  inline void clear_jobexp();
  static const int kJobExpFieldNumber = 1;
  inline ::google::protobuf::uint64 jobexp() const;
  inline void set_jobexp(::google::protobuf::uint64 value);

  // optional uint32 jobLv = 2 [default = 0];
  inline bool has_joblv() const;
  inline void clear_joblv();
  static const int kJobLvFieldNumber = 2;
  inline ::google::protobuf::uint32 joblv() const;
  inline void set_joblv(::google::protobuf::uint32 value);

  // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 3;
  inline ::Cmd::EProfession profession() const;
  inline void set_profession(::Cmd::EProfession value);

  // optional uint32 strPoint = 4 [default = 0];
  inline bool has_strpoint() const;
  inline void clear_strpoint();
  static const int kStrPointFieldNumber = 4;
  inline ::google::protobuf::uint32 strpoint() const;
  inline void set_strpoint(::google::protobuf::uint32 value);

  // optional uint32 intPoint = 5 [default = 0];
  inline bool has_intpoint() const;
  inline void clear_intpoint();
  static const int kIntPointFieldNumber = 5;
  inline ::google::protobuf::uint32 intpoint() const;
  inline void set_intpoint(::google::protobuf::uint32 value);

  // optional uint32 agiPoint = 6 [default = 0];
  inline bool has_agipoint() const;
  inline void clear_agipoint();
  static const int kAgiPointFieldNumber = 6;
  inline ::google::protobuf::uint32 agipoint() const;
  inline void set_agipoint(::google::protobuf::uint32 value);

  // optional uint32 dexPoint = 7 [default = 0];
  inline bool has_dexpoint() const;
  inline void clear_dexpoint();
  static const int kDexPointFieldNumber = 7;
  inline ::google::protobuf::uint32 dexpoint() const;
  inline void set_dexpoint(::google::protobuf::uint32 value);

  // optional uint32 vitPoint = 8 [default = 0];
  inline bool has_vitpoint() const;
  inline void clear_vitpoint();
  static const int kVitPointFieldNumber = 8;
  inline ::google::protobuf::uint32 vitpoint() const;
  inline void set_vitpoint(::google::protobuf::uint32 value);

  // optional uint32 lukPoint = 9 [default = 0];
  inline bool has_lukpoint() const;
  inline void clear_lukpoint();
  static const int kLukPointFieldNumber = 9;
  inline ::google::protobuf::uint32 lukpoint() const;
  inline void set_lukpoint(::google::protobuf::uint32 value);

  // optional uint32 totalPoint = 10 [default = 0];
  inline bool has_totalpoint() const;
  inline void clear_totalpoint();
  static const int kTotalPointFieldNumber = 10;
  inline ::google::protobuf::uint32 totalpoint() const;
  inline void set_totalpoint(::google::protobuf::uint32 value);

  // optional uint32 usedPoint = 11 [default = 0];
  inline bool has_usedpoint() const;
  inline void clear_usedpoint();
  static const int kUsedPointFieldNumber = 11;
  inline ::google::protobuf::uint32 usedpoint() const;
  inline void set_usedpoint(::google::protobuf::uint32 value);

  // optional uint32 hp = 12 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 12;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 sp = 13 [default = 0];
  inline bool has_sp() const;
  inline void clear_sp();
  static const int kSpFieldNumber = 13;
  inline ::google::protobuf::uint32 sp() const;
  inline void set_sp(::google::protobuf::uint32 value);

  // optional .Cmd.UserSkillData skill = 14;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 14;
  inline const ::Cmd::UserSkillData& skill() const;
  inline ::Cmd::UserSkillData* mutable_skill();
  inline ::Cmd::UserSkillData* release_skill();
  inline void set_allocated_skill(::Cmd::UserSkillData* skill);

  // repeated uint32 unlocklv = 15;
  inline int unlocklv_size() const;
  inline void clear_unlocklv();
  static const int kUnlocklvFieldNumber = 15;
  inline ::google::protobuf::uint32 unlocklv(int index) const;
  inline void set_unlocklv(int index, ::google::protobuf::uint32 value);
  inline void add_unlocklv(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlocklv() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlocklv();

  // optional uint32 maxjoblv = 16 [default = 0];
  inline bool has_maxjoblv() const;
  inline void clear_maxjoblv();
  static const int kMaxjoblvFieldNumber = 16;
  inline ::google::protobuf::uint32 maxjoblv() const;
  inline void set_maxjoblv(::google::protobuf::uint32 value);

  // optional uint32 branch = 17 [default = 0];
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 17;
  inline ::google::protobuf::uint32 branch() const;
  inline void set_branch(::google::protobuf::uint32 value);

  // optional bool isbuy = 18 [default = false];
  inline bool has_isbuy() const;
  inline void clear_isbuy();
  static const int kIsbuyFieldNumber = 18;
  inline bool isbuy() const;
  inline void set_isbuy(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.UserRoleData)
 private:
  inline void set_has_jobexp();
  inline void clear_has_jobexp();
  inline void set_has_joblv();
  inline void clear_has_joblv();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_strpoint();
  inline void clear_has_strpoint();
  inline void set_has_intpoint();
  inline void clear_has_intpoint();
  inline void set_has_agipoint();
  inline void clear_has_agipoint();
  inline void set_has_dexpoint();
  inline void clear_has_dexpoint();
  inline void set_has_vitpoint();
  inline void clear_has_vitpoint();
  inline void set_has_lukpoint();
  inline void clear_has_lukpoint();
  inline void set_has_totalpoint();
  inline void clear_has_totalpoint();
  inline void set_has_usedpoint();
  inline void clear_has_usedpoint();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_sp();
  inline void clear_has_sp();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_maxjoblv();
  inline void clear_has_maxjoblv();
  inline void set_has_branch();
  inline void clear_has_branch();
  inline void set_has_isbuy();
  inline void clear_has_isbuy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 jobexp_;
  ::google::protobuf::uint32 joblv_;
  int profession_;
  ::google::protobuf::uint32 strpoint_;
  ::google::protobuf::uint32 intpoint_;
  ::google::protobuf::uint32 agipoint_;
  ::google::protobuf::uint32 dexpoint_;
  ::google::protobuf::uint32 vitpoint_;
  ::google::protobuf::uint32 lukpoint_;
  ::google::protobuf::uint32 totalpoint_;
  ::google::protobuf::uint32 usedpoint_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 sp_;
  ::Cmd::UserSkillData* skill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlocklv_;
  ::google::protobuf::uint32 maxjoblv_;
  ::google::protobuf::uint32 branch_;
  bool isbuy_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserRoleData* default_instance_;
};
// -------------------------------------------------------------------

class BlobFighter : public ::google::protobuf::Message {
 public:
  BlobFighter();
  virtual ~BlobFighter();

  BlobFighter(const BlobFighter& from);

  inline BlobFighter& operator=(const BlobFighter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobFighter& default_instance();

  void Swap(BlobFighter* other);

  // implements Message ----------------------------------------------

  BlobFighter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobFighter& from);
  void MergeFrom(const BlobFighter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.UserRoleData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::UserRoleData& datas(int index) const;
  inline ::Cmd::UserRoleData* mutable_datas(int index);
  inline ::Cmd::UserRoleData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserRoleData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserRoleData >*
      mutable_datas();

  // optional uint32 totalpoint = 2 [default = 0];
  inline bool has_totalpoint() const;
  inline void clear_totalpoint();
  static const int kTotalpointFieldNumber = 2;
  inline ::google::protobuf::uint32 totalpoint() const;
  inline void set_totalpoint(::google::protobuf::uint32 value);

  // optional uint32 maxskillpos = 3 [default = 0];
  inline bool has_maxskillpos() const;
  inline void clear_maxskillpos();
  static const int kMaxskillposFieldNumber = 3;
  inline ::google::protobuf::uint32 maxskillpos() const;
  inline void set_maxskillpos(::google::protobuf::uint32 value);

  // optional uint32 maxautopos = 4 [default = 0];
  inline bool has_maxautopos() const;
  inline void clear_maxautopos();
  static const int kMaxautoposFieldNumber = 4;
  inline ::google::protobuf::uint32 maxautopos() const;
  inline void set_maxautopos(::google::protobuf::uint32 value);

  // optional uint32 maxextendpos = 5 [default = 0];
  inline bool has_maxextendpos() const;
  inline void clear_maxextendpos();
  static const int kMaxextendposFieldNumber = 5;
  inline ::google::protobuf::uint32 maxextendpos() const;
  inline void set_maxextendpos(::google::protobuf::uint32 value);

  // optional uint32 maxjoblv = 6 [default = 0];
  inline bool has_maxjoblv() const;
  inline void clear_maxjoblv();
  static const int kMaxjoblvFieldNumber = 6;
  inline ::google::protobuf::uint32 maxjoblv() const;
  inline void set_maxjoblv(::google::protobuf::uint32 value);

  // optional uint32 maxcurjoblv = 7 [default = 0];
  inline bool has_maxcurjoblv() const;
  inline void clear_maxcurjoblv();
  static const int kMaxcurjoblvFieldNumber = 7;
  inline ::google::protobuf::uint32 maxcurjoblv() const;
  inline void set_maxcurjoblv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobFighter)
 private:
  inline void set_has_totalpoint();
  inline void clear_has_totalpoint();
  inline void set_has_maxskillpos();
  inline void clear_has_maxskillpos();
  inline void set_has_maxautopos();
  inline void clear_has_maxautopos();
  inline void set_has_maxextendpos();
  inline void clear_has_maxextendpos();
  inline void set_has_maxjoblv();
  inline void clear_has_maxjoblv();
  inline void set_has_maxcurjoblv();
  inline void clear_has_maxcurjoblv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserRoleData > datas_;
  ::google::protobuf::uint32 totalpoint_;
  ::google::protobuf::uint32 maxskillpos_;
  ::google::protobuf::uint32 maxautopos_;
  ::google::protobuf::uint32 maxextendpos_;
  ::google::protobuf::uint32 maxjoblv_;
  ::google::protobuf::uint32 maxcurjoblv_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobFighter* default_instance_;
};
// -------------------------------------------------------------------

class StageStepNormalBlob : public ::google::protobuf::Message {
 public:
  StageStepNormalBlob();
  virtual ~StageStepNormalBlob();

  StageStepNormalBlob(const StageStepNormalBlob& from);

  inline StageStepNormalBlob& operator=(const StageStepNormalBlob& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageStepNormalBlob& default_instance();

  void Swap(StageStepNormalBlob* other);

  // implements Message ----------------------------------------------

  StageStepNormalBlob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageStepNormalBlob& from);
  void MergeFrom(const StageStepNormalBlob& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stepid = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepidFieldNumber = 1;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.StageStepNormalBlob)
 private:
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stepid_;
  ::google::protobuf::uint32 star_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static StageStepNormalBlob* default_instance_;
};
// -------------------------------------------------------------------

class StageStepHardBlob : public ::google::protobuf::Message {
 public:
  StageStepHardBlob();
  virtual ~StageStepHardBlob();

  StageStepHardBlob(const StageStepHardBlob& from);

  inline StageStepHardBlob& operator=(const StageStepHardBlob& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageStepHardBlob& default_instance();

  void Swap(StageStepHardBlob* other);

  // implements Message ----------------------------------------------

  StageStepHardBlob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageStepHardBlob& from);
  void MergeFrom(const StageStepHardBlob& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stepid = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepidFieldNumber = 1;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional uint32 finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline ::google::protobuf::uint32 finish() const;
  inline void set_finish(::google::protobuf::uint32 value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.StageStepHardBlob)
 private:
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_finish();
  inline void clear_has_finish();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stepid_;
  ::google::protobuf::uint32 finish_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static StageStepHardBlob* default_instance_;
};
// -------------------------------------------------------------------

class StageBlobItem : public ::google::protobuf::Message {
 public:
  StageBlobItem();
  virtual ~StageBlobItem();

  StageBlobItem(const StageBlobItem& from);

  inline StageBlobItem& operator=(const StageBlobItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageBlobItem& default_instance();

  void Swap(StageBlobItem* other);

  // implements Message ----------------------------------------------

  StageBlobItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageBlobItem& from);
  void MergeFrom(const StageBlobItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageID = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // repeated .Cmd.StageStepNormalBlob normalist = 2;
  inline int normalist_size() const;
  inline void clear_normalist();
  static const int kNormalistFieldNumber = 2;
  inline const ::Cmd::StageStepNormalBlob& normalist(int index) const;
  inline ::Cmd::StageStepNormalBlob* mutable_normalist(int index);
  inline ::Cmd::StageStepNormalBlob* add_normalist();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepNormalBlob >&
      normalist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepNormalBlob >*
      mutable_normalist();

  // repeated .Cmd.StageStepHardBlob hardlist = 3;
  inline int hardlist_size() const;
  inline void clear_hardlist();
  static const int kHardlistFieldNumber = 3;
  inline const ::Cmd::StageStepHardBlob& hardlist(int index) const;
  inline ::Cmd::StageStepHardBlob* mutable_hardlist(int index);
  inline ::Cmd::StageStepHardBlob* add_hardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepHardBlob >&
      hardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepHardBlob >*
      mutable_hardlist();

  // repeated uint32 gets = 4;
  inline int gets_size() const;
  inline void clear_gets();
  static const int kGetsFieldNumber = 4;
  inline ::google::protobuf::uint32 gets(int index) const;
  inline void set_gets(int index, ::google::protobuf::uint32 value);
  inline void add_gets(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      gets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_gets();

  // @@protoc_insertion_point(class_scope:Cmd.StageBlobItem)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepNormalBlob > normalist_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepHardBlob > hardlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > gets_;
  ::google::protobuf::uint32 stageid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static StageBlobItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobStage : public ::google::protobuf::Message {
 public:
  BlobStage();
  virtual ~BlobStage();

  BlobStage(const BlobStage& from);

  inline BlobStage& operator=(const BlobStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobStage& default_instance();

  void Swap(BlobStage* other);

  // implements Message ----------------------------------------------

  BlobStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobStage& from);
  void MergeFrom(const BlobStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.StageBlobItem list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Cmd::StageBlobItem& list(int index) const;
  inline ::Cmd::StageBlobItem* mutable_list(int index);
  inline ::Cmd::StageBlobItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageBlobItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageBlobItem >*
      mutable_list();

  // optional uint32 resetTime = 2;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 resettime() const;
  inline void set_resettime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobStage)
 private:
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StageBlobItem > list_;
  ::google::protobuf::uint32 resettime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobStage* default_instance_;
};
// -------------------------------------------------------------------

class QuestNpcData : public ::google::protobuf::Message {
 public:
  QuestNpcData();
  virtual ~QuestNpcData();

  QuestNpcData(const QuestNpcData& from);

  inline QuestNpcData& operator=(const QuestNpcData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestNpcData& default_instance();

  void Swap(QuestNpcData* other);

  // implements Message ----------------------------------------------

  QuestNpcData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestNpcData& from);
  void MergeFrom(const QuestNpcData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 questid = 2 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 2;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 groupid = 16 [default = 0];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 16;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 acc = 15 [default = 0];
  inline bool has_acc() const;
  inline void clear_acc();
  static const int kAccFieldNumber = 15;
  inline ::google::protobuf::uint32 acc() const;
  inline void set_acc(::google::protobuf::uint32 value);

  // optional uint32 hp = 12 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 12;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional .Cmd.NpcDefineData data = 14;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 14;
  inline const ::Cmd::NpcDefineData& data() const;
  inline ::Cmd::NpcDefineData* mutable_data();
  inline ::Cmd::NpcDefineData* release_data();
  inline void set_allocated_data(::Cmd::NpcDefineData* data);

  // @@protoc_insertion_point(class_scope:Cmd.QuestNpcData)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_acc();
  inline void clear_has_acc();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 acc_;
  ::Cmd::NpcDefineData* data_;
  ::google::protobuf::uint32 hp_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static QuestNpcData* default_instance_;
};
// -------------------------------------------------------------------

class BlobQuestNpc : public ::google::protobuf::Message {
 public:
  BlobQuestNpc();
  virtual ~BlobQuestNpc();

  BlobQuestNpc(const BlobQuestNpc& from);

  inline BlobQuestNpc& operator=(const BlobQuestNpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobQuestNpc& default_instance();

  void Swap(BlobQuestNpc* other);

  // implements Message ----------------------------------------------

  BlobQuestNpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobQuestNpc& from);
  void MergeFrom(const BlobQuestNpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.QuestNpcData list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::QuestNpcData& list(int index) const;
  inline ::Cmd::QuestNpcData* mutable_list(int index);
  inline ::Cmd::QuestNpcData* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestNpcData >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestNpcData >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobQuestNpc)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestNpcData > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobQuestNpc* default_instance_;
};
// -------------------------------------------------------------------

class BufferStateBlob : public ::google::protobuf::Message {
 public:
  BufferStateBlob();
  virtual ~BufferStateBlob();

  BufferStateBlob(const BufferStateBlob& from);

  inline BufferStateBlob& operator=(const BufferStateBlob& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BufferStateBlob& default_instance();

  void Swap(BufferStateBlob* other);

  // implements Message ----------------------------------------------

  BufferStateBlob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BufferStateBlob& from);
  void MergeFrom(const BufferStateBlob& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 endtime = 2 [default = 0];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 2;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint32 lv = 3 [default = 0];
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint64 fromid = 4 [default = 0];
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromidFieldNumber = 4;
  inline ::google::protobuf::uint64 fromid() const;
  inline void set_fromid(::google::protobuf::uint64 value);

  // optional uint32 hponadd = 5 [default = 0];
  inline bool has_hponadd() const;
  inline void clear_hponadd();
  static const int kHponaddFieldNumber = 5;
  inline ::google::protobuf::uint32 hponadd() const;
  inline void set_hponadd(::google::protobuf::uint32 value);

  // optional uint32 addtime = 6 [default = 0];
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 6;
  inline ::google::protobuf::uint32 addtime() const;
  inline void set_addtime(::google::protobuf::uint32 value);

  // optional uint32 count = 7 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 commmondata = 8 [default = 0];
  inline bool has_commmondata() const;
  inline void clear_commmondata();
  static const int kCommmondataFieldNumber = 8;
  inline ::google::protobuf::uint32 commmondata() const;
  inline void set_commmondata(::google::protobuf::uint32 value);

  // optional bool actflag = 9;
  inline bool has_actflag() const;
  inline void clear_actflag();
  static const int kActflagFieldNumber = 9;
  inline bool actflag() const;
  inline void set_actflag(bool value);

  // optional uint32 layers = 10 [default = 0];
  inline bool has_layers() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 10;
  inline ::google::protobuf::uint32 layers() const;
  inline void set_layers(::google::protobuf::uint32 value);

  // optional uint32 totaldamage = 11 [default = 0];
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotaldamageFieldNumber = 11;
  inline ::google::protobuf::uint32 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::uint32 value);

  // optional uint32 attackcount = 12 [default = 0];
  inline bool has_attackcount() const;
  inline void clear_attackcount();
  static const int kAttackcountFieldNumber = 12;
  inline ::google::protobuf::uint32 attackcount() const;
  inline void set_attackcount(::google::protobuf::uint32 value);

  // optional uint32 beatkcount = 13 [default = 0];
  inline bool has_beatkcount() const;
  inline void clear_beatkcount();
  static const int kBeatkcountFieldNumber = 13;
  inline ::google::protobuf::uint32 beatkcount() const;
  inline void set_beatkcount(::google::protobuf::uint32 value);

  // repeated .Cmd.UserAttrSvr attrs = 14;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 14;
  inline const ::Cmd::UserAttrSvr& attrs(int index) const;
  inline ::Cmd::UserAttrSvr* mutable_attrs(int index);
  inline ::Cmd::UserAttrSvr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >*
      mutable_attrs();

  // repeated uint32 vecdata = 15;
  inline int vecdata_size() const;
  inline void clear_vecdata();
  static const int kVecdataFieldNumber = 15;
  inline ::google::protobuf::uint32 vecdata(int index) const;
  inline void set_vecdata(int index, ::google::protobuf::uint32 value);
  inline void add_vecdata(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vecdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vecdata();

  // optional string fromname = 16;
  inline bool has_fromname() const;
  inline void clear_fromname();
  static const int kFromnameFieldNumber = 16;
  inline const ::std::string& fromname() const;
  inline void set_fromname(const ::std::string& value);
  inline void set_fromname(const char* value);
  inline void set_fromname(const char* value, size_t size);
  inline ::std::string* mutable_fromname();
  inline ::std::string* release_fromname();
  inline void set_allocated_fromname(::std::string* fromname);

  // optional uint64 sparetime = 17 [default = 0];
  inline bool has_sparetime() const;
  inline void clear_sparetime();
  static const int kSparetimeFieldNumber = 17;
  inline ::google::protobuf::uint64 sparetime() const;
  inline void set_sparetime(::google::protobuf::uint64 value);

  // repeated uint64 setendtime = 18;
  inline int setendtime_size() const;
  inline void clear_setendtime();
  static const int kSetendtimeFieldNumber = 18;
  inline ::google::protobuf::uint64 setendtime(int index) const;
  inline void set_setendtime(int index, ::google::protobuf::uint64 value);
  inline void add_setendtime(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      setendtime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_setendtime();

  // optional uint64 timetick = 19 [default = 0];
  inline bool has_timetick() const;
  inline void clear_timetick();
  static const int kTimetickFieldNumber = 19;
  inline ::google::protobuf::uint64 timetick() const;
  inline void set_timetick(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.BufferStateBlob)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_fromid();
  inline void clear_has_fromid();
  inline void set_has_hponadd();
  inline void clear_has_hponadd();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_commmondata();
  inline void clear_has_commmondata();
  inline void set_has_actflag();
  inline void clear_has_actflag();
  inline void set_has_layers();
  inline void clear_has_layers();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();
  inline void set_has_attackcount();
  inline void clear_has_attackcount();
  inline void set_has_beatkcount();
  inline void clear_has_beatkcount();
  inline void set_has_fromname();
  inline void clear_has_fromname();
  inline void set_has_sparetime();
  inline void clear_has_sparetime();
  inline void set_has_timetick();
  inline void clear_has_timetick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint64 fromid_;
  ::google::protobuf::uint32 hponadd_;
  ::google::protobuf::uint32 addtime_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 commmondata_;
  bool actflag_;
  ::google::protobuf::uint32 layers_;
  ::google::protobuf::uint32 totaldamage_;
  ::google::protobuf::uint32 attackcount_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr > attrs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vecdata_;
  ::std::string* fromname_;
  ::google::protobuf::uint64 sparetime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > setendtime_;
  ::google::protobuf::uint64 timetick_;
  ::google::protobuf::uint32 beatkcount_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BufferStateBlob* default_instance_;
};
// -------------------------------------------------------------------

class BlobBuffer : public ::google::protobuf::Message {
 public:
  BlobBuffer();
  virtual ~BlobBuffer();

  BlobBuffer(const BlobBuffer& from);

  inline BlobBuffer& operator=(const BlobBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobBuffer& default_instance();

  void Swap(BlobBuffer* other);

  // implements Message ----------------------------------------------

  BlobBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobBuffer& from);
  void MergeFrom(const BlobBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.BufferStateBlob list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::BufferStateBlob& list(int index) const;
  inline ::Cmd::BufferStateBlob* mutable_list(int index);
  inline ::Cmd::BufferStateBlob* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferStateBlob >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferStateBlob >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobBuffer)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BufferStateBlob > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobBuffer* default_instance_;
};
// -------------------------------------------------------------------

class BlobPortrait : public ::google::protobuf::Message {
 public:
  BlobPortrait();
  virtual ~BlobPortrait();

  BlobPortrait(const BlobPortrait& from);

  inline BlobPortrait& operator=(const BlobPortrait& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobPortrait& default_instance();

  void Swap(BlobPortrait* other);

  // implements Message ----------------------------------------------

  BlobPortrait* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobPortrait& from);
  void MergeFrom(const BlobPortrait& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 curportrait = 1 [default = 0];
  inline bool has_curportrait() const;
  inline void clear_curportrait();
  static const int kCurportraitFieldNumber = 1;
  inline ::google::protobuf::uint32 curportrait() const;
  inline void set_curportrait(::google::protobuf::uint32 value);

  // optional uint32 curframe = 2 [default = 0];
  inline bool has_curframe() const;
  inline void clear_curframe();
  static const int kCurframeFieldNumber = 2;
  inline ::google::protobuf::uint32 curframe() const;
  inline void set_curframe(::google::protobuf::uint32 value);

  // repeated uint32 unlockportrait = 3;
  inline int unlockportrait_size() const;
  inline void clear_unlockportrait();
  static const int kUnlockportraitFieldNumber = 3;
  inline ::google::protobuf::uint32 unlockportrait(int index) const;
  inline void set_unlockportrait(int index, ::google::protobuf::uint32 value);
  inline void add_unlockportrait(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlockportrait() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlockportrait();

  // repeated uint32 unlockframe = 4;
  inline int unlockframe_size() const;
  inline void clear_unlockframe();
  static const int kUnlockframeFieldNumber = 4;
  inline ::google::protobuf::uint32 unlockframe(int index) const;
  inline void set_unlockframe(int index, ::google::protobuf::uint32 value);
  inline void add_unlockframe(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlockframe() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlockframe();

  // @@protoc_insertion_point(class_scope:Cmd.BlobPortrait)
 private:
  inline void set_has_curportrait();
  inline void clear_has_curportrait();
  inline void set_has_curframe();
  inline void clear_has_curframe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curportrait_;
  ::google::protobuf::uint32 curframe_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlockportrait_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlockframe_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobPortrait* default_instance_;
};
// -------------------------------------------------------------------

class BlobHair : public ::google::protobuf::Message {
 public:
  BlobHair();
  virtual ~BlobHair();

  BlobHair(const BlobHair& from);

  inline BlobHair& operator=(const BlobHair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobHair& default_instance();

  void Swap(BlobHair* other);

  // implements Message ----------------------------------------------

  BlobHair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobHair& from);
  void MergeFrom(const BlobHair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 curhair = 1 [default = 0];
  inline bool has_curhair() const;
  inline void clear_curhair();
  static const int kCurhairFieldNumber = 1;
  inline ::google::protobuf::uint32 curhair() const;
  inline void set_curhair(::google::protobuf::uint32 value);

  // optional uint32 curcolor = 2 [default = 0];
  inline bool has_curcolor() const;
  inline void clear_curcolor();
  static const int kCurcolorFieldNumber = 2;
  inline ::google::protobuf::uint32 curcolor() const;
  inline void set_curcolor(::google::protobuf::uint32 value);

  // repeated uint32 unlockhair = 3;
  inline int unlockhair_size() const;
  inline void clear_unlockhair();
  static const int kUnlockhairFieldNumber = 3;
  inline ::google::protobuf::uint32 unlockhair(int index) const;
  inline void set_unlockhair(int index, ::google::protobuf::uint32 value);
  inline void add_unlockhair(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlockhair() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlockhair();

  // @@protoc_insertion_point(class_scope:Cmd.BlobHair)
 private:
  inline void set_has_curhair();
  inline void clear_has_curhair();
  inline void set_has_curcolor();
  inline void clear_has_curcolor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curhair_;
  ::google::protobuf::uint32 curcolor_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlockhair_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobHair* default_instance_;
};
// -------------------------------------------------------------------

class BlobGearItem : public ::google::protobuf::Message {
 public:
  BlobGearItem();
  virtual ~BlobGearItem();

  BlobGearItem(const BlobGearItem& from);

  inline BlobGearItem& operator=(const BlobGearItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGearItem& default_instance();

  void Swap(BlobGearItem* other);

  // implements Message ----------------------------------------------

  BlobGearItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGearItem& from);
  void MergeFrom(const BlobGearItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gearid = 1;
  inline bool has_gearid() const;
  inline void clear_gearid();
  static const int kGearidFieldNumber = 1;
  inline ::google::protobuf::uint32 gearid() const;
  inline void set_gearid(::google::protobuf::uint32 value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 sceneid = 3;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 3;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobGearItem)
 private:
  inline void set_has_gearid();
  inline void clear_has_gearid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gearid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 sceneid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGearItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobGears : public ::google::protobuf::Message {
 public:
  BlobGears();
  virtual ~BlobGears();

  BlobGears(const BlobGears& from);

  inline BlobGears& operator=(const BlobGears& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGears& default_instance();

  void Swap(BlobGears* other);

  // implements Message ----------------------------------------------

  BlobGears* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGears& from);
  void MergeFrom(const BlobGears& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.BlobGearItem list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::BlobGearItem& list(int index) const;
  inline ::Cmd::BlobGearItem* mutable_list(int index);
  inline ::Cmd::BlobGearItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >*
      mutable_list();

  // repeated .Cmd.BlobGearItem exitlist = 3;
  inline int exitlist_size() const;
  inline void clear_exitlist();
  static const int kExitlistFieldNumber = 3;
  inline const ::Cmd::BlobGearItem& exitlist(int index) const;
  inline ::Cmd::BlobGearItem* mutable_exitlist(int index);
  inline ::Cmd::BlobGearItem* add_exitlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >&
      exitlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >*
      mutable_exitlist();

  // @@protoc_insertion_point(class_scope:Cmd.BlobGears)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem > list_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem > exitlist_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGears* default_instance_;
};
// -------------------------------------------------------------------

class BlobTipItem : public ::google::protobuf::Message {
 public:
  BlobTipItem();
  virtual ~BlobTipItem();

  BlobTipItem(const BlobTipItem& from);

  inline BlobTipItem& operator=(const BlobTipItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTipItem& default_instance();

  void Swap(BlobTipItem* other);

  // implements Message ----------------------------------------------

  BlobTipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTipItem& from);
  void MergeFrom(const BlobTipItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ERedSys red = 1 [default = EREDSYS_MIN];
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline ::Cmd::ERedSys red() const;
  inline void set_red(::Cmd::ERedSys value);

  // repeated uint32 tipid = 2;
  inline int tipid_size() const;
  inline void clear_tipid();
  static const int kTipidFieldNumber = 2;
  inline ::google::protobuf::uint32 tipid(int index) const;
  inline void set_tipid(int index, ::google::protobuf::uint32 value);
  inline void add_tipid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tipid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tipid();

  // @@protoc_insertion_point(class_scope:Cmd.BlobTipItem)
 private:
  inline void set_has_red();
  inline void clear_has_red();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tipid_;
  int red_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTipItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobTips : public ::google::protobuf::Message {
 public:
  BlobTips();
  virtual ~BlobTips();

  BlobTips(const BlobTips& from);

  inline BlobTips& operator=(const BlobTips& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTips& default_instance();

  void Swap(BlobTips* other);

  // implements Message ----------------------------------------------

  BlobTips* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTips& from);
  void MergeFrom(const BlobTips& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.BlobTipItem list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::BlobTipItem& list(int index) const;
  inline ::Cmd::BlobTipItem* mutable_list(int index);
  inline ::Cmd::BlobTipItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTipItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTipItem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobTips)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTipItem > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTips* default_instance_;
};
// -------------------------------------------------------------------

class FollowerItem : public ::google::protobuf::Message {
 public:
  FollowerItem();
  virtual ~FollowerItem();

  FollowerItem(const FollowerItem& from);

  inline FollowerItem& operator=(const FollowerItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowerItem& default_instance();

  void Swap(FollowerItem* other);

  // implements Message ----------------------------------------------

  FollowerItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FollowerItem& from);
  void MergeFrom(const FollowerItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional float spdRatio = 2 [default = 0];
  inline bool has_spdratio() const;
  inline void clear_spdratio();
  static const int kSpdRatioFieldNumber = 2;
  inline float spdratio() const;
  inline void set_spdratio(float value);

  // optional uint32 behaviours = 3 [default = 0];
  inline bool has_behaviours() const;
  inline void clear_behaviours();
  static const int kBehavioursFieldNumber = 3;
  inline ::google::protobuf::uint32 behaviours() const;
  inline void set_behaviours(::google::protobuf::uint32 value);

  // optional uint32 questid = 4 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 4;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 cleartime = 5 [default = 0];
  inline bool has_cleartime() const;
  inline void clear_cleartime();
  static const int kCleartimeFieldNumber = 5;
  inline ::google::protobuf::uint32 cleartime() const;
  inline void set_cleartime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.FollowerItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_spdratio();
  inline void clear_has_spdratio();
  inline void set_has_behaviours();
  inline void clear_has_behaviours();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_cleartime();
  inline void clear_has_cleartime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  float spdratio_;
  ::google::protobuf::uint32 behaviours_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 cleartime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static FollowerItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobFollower : public ::google::protobuf::Message {
 public:
  BlobFollower();
  virtual ~BlobFollower();

  BlobFollower(const BlobFollower& from);

  inline BlobFollower& operator=(const BlobFollower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobFollower& default_instance();

  void Swap(BlobFollower* other);

  // implements Message ----------------------------------------------

  BlobFollower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobFollower& from);
  void MergeFrom(const BlobFollower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.FollowerItem list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::FollowerItem& list(int index) const;
  inline ::Cmd::FollowerItem* mutable_list(int index);
  inline ::Cmd::FollowerItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FollowerItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FollowerItem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobFollower)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FollowerItem > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobFollower* default_instance_;
};
// -------------------------------------------------------------------

class BlobCDTime : public ::google::protobuf::Message {
 public:
  BlobCDTime();
  virtual ~BlobCDTime();

  BlobCDTime(const BlobCDTime& from);

  inline BlobCDTime& operator=(const BlobCDTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobCDTime& default_instance();

  void Swap(BlobCDTime* other);

  // implements Message ----------------------------------------------

  BlobCDTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobCDTime& from);
  void MergeFrom(const BlobCDTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.CDTimeItem list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::CDTimeItem& list(int index) const;
  inline ::Cmd::CDTimeItem* mutable_list(int index);
  inline ::Cmd::CDTimeItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobCDTime)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobCDTime* default_instance_;
};
// -------------------------------------------------------------------

class BlobShortcut : public ::google::protobuf::Message {
 public:
  BlobShortcut();
  virtual ~BlobShortcut();

  BlobShortcut(const BlobShortcut& from);

  inline BlobShortcut& operator=(const BlobShortcut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShortcut& default_instance();

  void Swap(BlobShortcut* other);

  // implements Message ----------------------------------------------

  BlobShortcut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShortcut& from);
  void MergeFrom(const BlobShortcut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.ShortcutItem cut = 1;
  inline int cut_size() const;
  inline void clear_cut();
  static const int kCutFieldNumber = 1;
  inline const ::Cmd::ShortcutItem& cut(int index) const;
  inline ::Cmd::ShortcutItem* mutable_cut(int index);
  inline ::Cmd::ShortcutItem* add_cut();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >&
      cut() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >*
      mutable_cut();

  // repeated uint32 firstauto = 2;
  inline int firstauto_size() const;
  inline void clear_firstauto();
  static const int kFirstautoFieldNumber = 2;
  inline ::google::protobuf::uint32 firstauto(int index) const;
  inline void set_firstauto(int index, ::google::protobuf::uint32 value);
  inline void add_firstauto(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      firstauto() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_firstauto();

  // optional uint32 version = 3 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobShortcut)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem > cut_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > firstauto_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobShortcut* default_instance_;
};
// -------------------------------------------------------------------

class BlobGMEffectItem : public ::google::protobuf::Message {
 public:
  BlobGMEffectItem();
  virtual ~BlobGMEffectItem();

  BlobGMEffectItem(const BlobGMEffectItem& from);

  inline BlobGMEffectItem& operator=(const BlobGMEffectItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGMEffectItem& default_instance();

  void Swap(BlobGMEffectItem* other);

  // implements Message ----------------------------------------------

  BlobGMEffectItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGMEffectItem& from);
  void MergeFrom(const BlobGMEffectItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 index = 2 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional string gmcommand = 3;
  inline bool has_gmcommand() const;
  inline void clear_gmcommand();
  static const int kGmcommandFieldNumber = 3;
  inline const ::std::string& gmcommand() const;
  inline void set_gmcommand(const ::std::string& value);
  inline void set_gmcommand(const char* value);
  inline void set_gmcommand(const char* value, size_t size);
  inline ::std::string* mutable_gmcommand();
  inline ::std::string* release_gmcommand();
  inline void set_allocated_gmcommand(::std::string* gmcommand);

  // @@protoc_insertion_point(class_scope:Cmd.BlobGMEffectItem)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_gmcommand();
  inline void clear_has_gmcommand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 index_;
  ::std::string* gmcommand_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGMEffectItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobGMEffects : public ::google::protobuf::Message {
 public:
  BlobGMEffects();
  virtual ~BlobGMEffects();

  BlobGMEffects(const BlobGMEffects& from);

  inline BlobGMEffects& operator=(const BlobGMEffects& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGMEffects& default_instance();

  void Swap(BlobGMEffects* other);

  // implements Message ----------------------------------------------

  BlobGMEffects* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGMEffects& from);
  void MergeFrom(const BlobGMEffects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.BlobGMEffectItem list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::BlobGMEffectItem& list(int index) const;
  inline ::Cmd::BlobGMEffectItem* mutable_list(int index);
  inline ::Cmd::BlobGMEffectItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGMEffectItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGMEffectItem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobGMEffects)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGMEffectItem > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGMEffects* default_instance_;
};
// -------------------------------------------------------------------

class BlobFreyja : public ::google::protobuf::Message {
 public:
  BlobFreyja();
  virtual ~BlobFreyja();

  BlobFreyja(const BlobFreyja& from);

  inline BlobFreyja& operator=(const BlobFreyja& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobFreyja& default_instance();

  void Swap(BlobFreyja* other);

  // implements Message ----------------------------------------------

  BlobFreyja* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobFreyja& from);
  void MergeFrom(const BlobFreyja& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated uint32 mapid = 2;
  inline int mapid_size() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid(int index) const;
  inline void set_mapid(int index, ::google::protobuf::uint32 value);
  inline void add_mapid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mapid();

  // @@protoc_insertion_point(class_scope:Cmd.BlobFreyja)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mapid_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobFreyja* default_instance_;
};
// -------------------------------------------------------------------

class BlobTransfer : public ::google::protobuf::Message {
 public:
  BlobTransfer();
  virtual ~BlobTransfer();

  BlobTransfer(const BlobTransfer& from);

  inline BlobTransfer& operator=(const BlobTransfer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTransfer& default_instance();

  void Swap(BlobTransfer* other);

  // implements Message ----------------------------------------------

  BlobTransfer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTransfer& from);
  void MergeFrom(const BlobTransfer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 npcid = 1;
  inline int npcid_size() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid(int index) const;
  inline void set_npcid(int index, ::google::protobuf::uint32 value);
  inline void add_npcid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      npcid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_npcid();

  // optional bool map1AllActivated = 2 [default = false];
  inline bool has_map1allactivated() const;
  inline void clear_map1allactivated();
  static const int kMap1AllActivatedFieldNumber = 2;
  inline bool map1allactivated() const;
  inline void set_map1allactivated(bool value);

  // optional bool map2AllActivated = 3 [default = false];
  inline bool has_map2allactivated() const;
  inline void clear_map2allactivated();
  static const int kMap2AllActivatedFieldNumber = 3;
  inline bool map2allactivated() const;
  inline void set_map2allactivated(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobTransfer)
 private:
  inline void set_has_map1allactivated();
  inline void clear_has_map1allactivated();
  inline void set_has_map2allactivated();
  inline void clear_has_map2allactivated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > npcid_;
  bool map1allactivated_;
  bool map2allactivated_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTransfer* default_instance_;
};
// -------------------------------------------------------------------

class BlobLaboratory : public ::google::protobuf::Message {
 public:
  BlobLaboratory();
  virtual ~BlobLaboratory();

  BlobLaboratory(const BlobLaboratory& from);

  inline BlobLaboratory& operator=(const BlobLaboratory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobLaboratory& default_instance();

  void Swap(BlobLaboratory* other);

  // implements Message ----------------------------------------------

  BlobLaboratory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobLaboratory& from);
  void MergeFrom(const BlobLaboratory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 point = 2 [default = 0];
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // optional uint32 days = 3 [default = 0];
  inline bool has_days() const;
  inline void clear_days();
  static const int kDaysFieldNumber = 3;
  inline ::google::protobuf::uint32 days() const;
  inline void set_days(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobLaboratory)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_days();
  inline void clear_has_days();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 point_;
  ::google::protobuf::uint32 days_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobLaboratory* default_instance_;
};
// -------------------------------------------------------------------

class SceneryItem : public ::google::protobuf::Message {
 public:
  SceneryItem();
  virtual ~SceneryItem();

  SceneryItem(const SceneryItem& from);

  inline SceneryItem& operator=(const SceneryItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneryItem& default_instance();

  void Swap(SceneryItem* other);

  // implements Message ----------------------------------------------

  SceneryItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneryItem& from);
  void MergeFrom(const SceneryItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sceneryid = 1 [default = 0];
  inline bool has_sceneryid() const;
  inline void clear_sceneryid();
  static const int kSceneryidFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneryid() const;
  inline void set_sceneryid(::google::protobuf::uint32 value);

  // optional uint32 visited = 2 [default = 0];
  inline bool has_visited() const;
  inline void clear_visited();
  static const int kVisitedFieldNumber = 2;
  inline ::google::protobuf::uint32 visited() const;
  inline void set_visited(::google::protobuf::uint32 value);

  // optional uint32 upload = 3 [default = 0];
  inline bool has_upload() const;
  inline void clear_upload();
  static const int kUploadFieldNumber = 3;
  inline ::google::protobuf::uint32 upload() const;
  inline void set_upload(::google::protobuf::uint32 value);

  // optional uint32 anglez = 4 [default = 0];
  inline bool has_anglez() const;
  inline void clear_anglez();
  static const int kAnglezFieldNumber = 4;
  inline ::google::protobuf::uint32 anglez() const;
  inline void set_anglez(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SceneryItem)
 private:
  inline void set_has_sceneryid();
  inline void clear_has_sceneryid();
  inline void set_has_visited();
  inline void clear_has_visited();
  inline void set_has_upload();
  inline void clear_has_upload();
  inline void set_has_anglez();
  inline void clear_has_anglez();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sceneryid_;
  ::google::protobuf::uint32 visited_;
  ::google::protobuf::uint32 upload_;
  ::google::protobuf::uint32 anglez_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static SceneryItem* default_instance_;
};
// -------------------------------------------------------------------

class SceneryMapItem : public ::google::protobuf::Message {
 public:
  SceneryMapItem();
  virtual ~SceneryMapItem();

  SceneryMapItem(const SceneryMapItem& from);

  inline SceneryMapItem& operator=(const SceneryMapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneryMapItem& default_instance();

  void Swap(SceneryMapItem* other);

  // implements Message ----------------------------------------------

  SceneryMapItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneryMapItem& from);
  void MergeFrom(const SceneryMapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated .Cmd.SceneryItem scenerys = 2;
  inline int scenerys_size() const;
  inline void clear_scenerys();
  static const int kScenerysFieldNumber = 2;
  inline const ::Cmd::SceneryItem& scenerys(int index) const;
  inline ::Cmd::SceneryItem* mutable_scenerys(int index);
  inline ::Cmd::SceneryItem* add_scenerys();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >&
      scenerys() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >*
      mutable_scenerys();

  // @@protoc_insertion_point(class_scope:Cmd.SceneryMapItem)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem > scenerys_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static SceneryMapItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobScenery : public ::google::protobuf::Message {
 public:
  BlobScenery();
  virtual ~BlobScenery();

  BlobScenery(const BlobScenery& from);

  inline BlobScenery& operator=(const BlobScenery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobScenery& default_instance();

  void Swap(BlobScenery* other);

  // implements Message ----------------------------------------------

  BlobScenery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobScenery& from);
  void MergeFrom(const BlobScenery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.SceneryMapItem list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::SceneryMapItem& list(int index) const;
  inline ::Cmd::SceneryMapItem* mutable_list(int index);
  inline ::Cmd::SceneryMapItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryMapItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryMapItem >*
      mutable_list();

  // repeated .Cmd.SceneryItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::SceneryItem& items(int index) const;
  inline ::Cmd::SceneryItem* mutable_items(int index);
  inline ::Cmd::SceneryItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.BlobScenery)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryMapItem > list_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem > items_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobScenery* default_instance_;
};
// -------------------------------------------------------------------

class BlobCarrier : public ::google::protobuf::Message {
 public:
  BlobCarrier();
  virtual ~BlobCarrier();

  BlobCarrier(const BlobCarrier& from);

  inline BlobCarrier& operator=(const BlobCarrier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobCarrier& default_instance();

  void Swap(BlobCarrier* other);

  // implements Message ----------------------------------------------

  BlobCarrier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobCarrier& from);
  void MergeFrom(const BlobCarrier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 assemble = 2 [default = 0];
  inline bool has_assemble() const;
  inline void clear_assemble();
  static const int kAssembleFieldNumber = 2;
  inline ::google::protobuf::uint32 assemble() const;
  inline void set_assemble(::google::protobuf::uint32 value);

  // optional uint64 joinmaster = 3 [default = 0];
  inline bool has_joinmaster() const;
  inline void clear_joinmaster();
  static const int kJoinmasterFieldNumber = 3;
  inline ::google::protobuf::uint64 joinmaster() const;
  inline void set_joinmaster(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobCarrier)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_assemble();
  inline void clear_has_assemble();
  inline void set_has_joinmaster();
  inline void clear_has_joinmaster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 assemble_;
  ::google::protobuf::uint64 joinmaster_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobCarrier* default_instance_;
};
// -------------------------------------------------------------------

class BlobMenu : public ::google::protobuf::Message {
 public:
  BlobMenu();
  virtual ~BlobMenu();

  BlobMenu(const BlobMenu& from);

  inline BlobMenu& operator=(const BlobMenu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobMenu& default_instance();

  void Swap(BlobMenu* other);

  // implements Message ----------------------------------------------

  BlobMenu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobMenu& from);
  void MergeFrom(const BlobMenu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated uint32 list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline ::google::protobuf::uint32 list(int index) const;
  inline void set_list(int index, ::google::protobuf::uint32 value);
  inline void add_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobMenu)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobMenu* default_instance_;
};
// -------------------------------------------------------------------

class BlobShopGotItem : public ::google::protobuf::Message {
 public:
  BlobShopGotItem();
  virtual ~BlobShopGotItem();

  BlobShopGotItem(const BlobShopGotItem& from);

  inline BlobShopGotItem& operator=(const BlobShopGotItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShopGotItem& default_instance();

  void Swap(BlobShopGotItem* other);

  // implements Message ----------------------------------------------

  BlobShopGotItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShopGotItem& from);
  void MergeFrom(const BlobShopGotItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.ShopGotItem list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::ShopGotItem& list(int index) const;
  inline ::Cmd::ShopGotItem* mutable_list(int index);
  inline ::Cmd::ShopGotItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_list();

  // repeated .Cmd.ShopGotItem random = 3;
  inline int random_size() const;
  inline void clear_random();
  static const int kRandomFieldNumber = 3;
  inline const ::Cmd::ShopGotItem& random(int index) const;
  inline ::Cmd::ShopGotItem* mutable_random(int index);
  inline ::Cmd::ShopGotItem* add_random();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      random() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_random();

  // optional uint32 refreshlv = 4 [default = 0];
  inline bool has_refreshlv() const;
  inline void clear_refreshlv();
  static const int kRefreshlvFieldNumber = 4;
  inline ::google::protobuf::uint32 refreshlv() const;
  inline void set_refreshlv(::google::protobuf::uint32 value);

  // optional uint32 refreshlv_resettime = 5 [default = 0];
  inline bool has_refreshlv_resettime() const;
  inline void clear_refreshlv_resettime();
  static const int kRefreshlvResettimeFieldNumber = 5;
  inline ::google::protobuf::uint32 refreshlv_resettime() const;
  inline void set_refreshlv_resettime(::google::protobuf::uint32 value);

  // repeated .Cmd.ShopGotItem month = 6;
  inline int month_size() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 6;
  inline const ::Cmd::ShopGotItem& month(int index) const;
  inline ::Cmd::ShopGotItem* mutable_month(int index);
  inline ::Cmd::ShopGotItem* add_month();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      month() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_month();

  // repeated .Cmd.ShopGotItem randombylv = 7;
  inline int randombylv_size() const;
  inline void clear_randombylv();
  static const int kRandombylvFieldNumber = 7;
  inline const ::Cmd::ShopGotItem& randombylv(int index) const;
  inline ::Cmd::ShopGotItem* mutable_randombylv(int index);
  inline ::Cmd::ShopGotItem* add_randombylv();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      randombylv() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_randombylv();

  // repeated .Cmd.ShopGotItem discountact = 8;
  inline int discountact_size() const;
  inline void clear_discountact();
  static const int kDiscountactFieldNumber = 8;
  inline const ::Cmd::ShopGotItem& discountact(int index) const;
  inline ::Cmd::ShopGotItem* mutable_discountact(int index);
  inline ::Cmd::ShopGotItem* add_discountact();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      discountact() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_discountact();

  // repeated .Cmd.ShopGotItem randomacc = 9;
  inline int randomacc_size() const;
  inline void clear_randomacc();
  static const int kRandomaccFieldNumber = 9;
  inline const ::Cmd::ShopGotItem& randomacc(int index) const;
  inline ::Cmd::ShopGotItem* mutable_randomacc(int index);
  inline ::Cmd::ShopGotItem* add_randomacc();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      randomacc() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_randomacc();

  // repeated .Cmd.ShopGotItem listweek = 10;
  inline int listweek_size() const;
  inline void clear_listweek();
  static const int kListweekFieldNumber = 10;
  inline const ::Cmd::ShopGotItem& listweek(int index) const;
  inline ::Cmd::ShopGotItem* mutable_listweek(int index);
  inline ::Cmd::ShopGotItem* add_listweek();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      listweek() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_listweek();

  // repeated .Cmd.ShopGotItem limitmonth = 11;
  inline int limitmonth_size() const;
  inline void clear_limitmonth();
  static const int kLimitmonthFieldNumber = 11;
  inline const ::Cmd::ShopGotItem& limitmonth(int index) const;
  inline ::Cmd::ShopGotItem* mutable_limitmonth(int index);
  inline ::Cmd::ShopGotItem* add_limitmonth();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      limitmonth() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_limitmonth();

  // repeated .Cmd.ShopGotItem addcount = 12;
  inline int addcount_size() const;
  inline void clear_addcount();
  static const int kAddcountFieldNumber = 12;
  inline const ::Cmd::ShopGotItem& addcount(int index) const;
  inline ::Cmd::ShopGotItem* mutable_addcount(int index);
  inline ::Cmd::ShopGotItem* add_addcount();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      addcount() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_addcount();

  // repeated .Cmd.ShopGotItem limititem = 13;
  inline int limititem_size() const;
  inline void clear_limititem();
  static const int kLimititemFieldNumber = 13;
  inline const ::Cmd::ShopGotItem& limititem(int index) const;
  inline ::Cmd::ShopGotItem* mutable_limititem(int index);
  inline ::Cmd::ShopGotItem* add_limititem();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      limititem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_limititem();

  // @@protoc_insertion_point(class_scope:Cmd.BlobShopGotItem)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_refreshlv();
  inline void clear_has_refreshlv();
  inline void set_has_refreshlv_resettime();
  inline void clear_has_refreshlv_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > list_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 refreshlv_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > random_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > month_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > randombylv_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > discountact_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > randomacc_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > listweek_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > limitmonth_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > addcount_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > limititem_;
  ::google::protobuf::uint32 refreshlv_resettime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobShopGotItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobExchangeShop : public ::google::protobuf::Message {
 public:
  BlobExchangeShop();
  virtual ~BlobExchangeShop();

  BlobExchangeShop(const BlobExchangeShop& from);

  inline BlobExchangeShop& operator=(const BlobExchangeShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobExchangeShop& default_instance();

  void Swap(BlobExchangeShop* other);

  // implements Message ----------------------------------------------

  BlobExchangeShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobExchangeShop& from);
  void MergeFrom(const BlobExchangeShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional bool menuopen = 2 [default = false];
  inline bool has_menuopen() const;
  inline void clear_menuopen();
  static const int kMenuopenFieldNumber = 2;
  inline bool menuopen() const;
  inline void set_menuopen(bool value);

  // repeated .Cmd.ExchangeShopItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ExchangeShopItem& items(int index) const;
  inline ::Cmd::ExchangeShopItem* mutable_items(int index);
  inline ::Cmd::ExchangeShopItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >*
      mutable_items();

  // repeated .Cmd.ItemGetCount itemget = 4;
  inline int itemget_size() const;
  inline void clear_itemget();
  static const int kItemgetFieldNumber = 4;
  inline const ::Cmd::ItemGetCount& itemget(int index) const;
  inline ::Cmd::ItemGetCount* mutable_itemget(int index);
  inline ::Cmd::ItemGetCount* add_itemget();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >&
      itemget() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >*
      mutable_itemget();

  // repeated uint32 exchanged_goods = 5;
  inline int exchanged_goods_size() const;
  inline void clear_exchanged_goods();
  static const int kExchangedGoodsFieldNumber = 5;
  inline ::google::protobuf::uint32 exchanged_goods(int index) const;
  inline void set_exchanged_goods(int index, ::google::protobuf::uint32 value);
  inline void add_exchanged_goods(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      exchanged_goods() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_exchanged_goods();

  // @@protoc_insertion_point(class_scope:Cmd.BlobExchangeShop)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_menuopen();
  inline void clear_has_menuopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  bool menuopen_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem > items_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount > itemget_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > exchanged_goods_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobExchangeShop* default_instance_;
};
// -------------------------------------------------------------------

class BlobKnownMaps : public ::google::protobuf::Message {
 public:
  BlobKnownMaps();
  virtual ~BlobKnownMaps();

  BlobKnownMaps(const BlobKnownMaps& from);

  inline BlobKnownMaps& operator=(const BlobKnownMaps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobKnownMaps& default_instance();

  void Swap(BlobKnownMaps* other);

  // implements Message ----------------------------------------------

  BlobKnownMaps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobKnownMaps& from);
  void MergeFrom(const BlobKnownMaps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated uint32 list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline ::google::protobuf::uint32 list(int index) const;
  inline void set_list(int index, ::google::protobuf::uint32 value);
  inline void add_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobKnownMaps)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobKnownMaps* default_instance_;
};
// -------------------------------------------------------------------

class BlobInter : public ::google::protobuf::Message {
 public:
  BlobInter();
  virtual ~BlobInter();

  BlobInter(const BlobInter& from);

  inline BlobInter& operator=(const BlobInter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobInter& default_instance();

  void Swap(BlobInter* other);

  // implements Message ----------------------------------------------

  BlobInter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobInter& from);
  void MergeFrom(const BlobInter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.InterData list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cmd::InterData& list(int index) const;
  inline ::Cmd::InterData* mutable_list(int index);
  inline ::Cmd::InterData* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::InterData >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::InterData >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.BlobInter)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::InterData > list_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobInter* default_instance_;
};
// -------------------------------------------------------------------

class BlobHands : public ::google::protobuf::Message {
 public:
  BlobHands();
  virtual ~BlobHands();

  BlobHands(const BlobHands& from);

  inline BlobHands& operator=(const BlobHands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobHands& default_instance();

  void Swap(BlobHands* other);

  // implements Message ----------------------------------------------

  BlobHands* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobHands& from);
  void MergeFrom(const BlobHands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 ismaster = 2 [default = 0];
  inline bool has_ismaster() const;
  inline void clear_ismaster();
  static const int kIsmasterFieldNumber = 2;
  inline ::google::protobuf::uint32 ismaster() const;
  inline void set_ismaster(::google::protobuf::uint32 value);

  // optional uint64 otherid = 3 [default = 0];
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 3;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // optional uint64 forcejoinid = 4 [default = 0];
  inline bool has_forcejoinid() const;
  inline void clear_forcejoinid();
  static const int kForcejoinidFieldNumber = 4;
  inline ::google::protobuf::uint64 forcejoinid() const;
  inline void set_forcejoinid(::google::protobuf::uint64 value);

  // optional string last_handname = 5;
  inline bool has_last_handname() const;
  inline void clear_last_handname();
  static const int kLastHandnameFieldNumber = 5;
  inline const ::std::string& last_handname() const;
  inline void set_last_handname(const ::std::string& value);
  inline void set_last_handname(const char* value);
  inline void set_last_handname(const char* value, size_t size);
  inline ::std::string* mutable_last_handname();
  inline ::std::string* release_last_handname();
  inline void set_allocated_last_handname(::std::string* last_handname);

  // optional uint32 handtimelen = 6 [default = 0];
  inline bool has_handtimelen() const;
  inline void clear_handtimelen();
  static const int kHandtimelenFieldNumber = 6;
  inline ::google::protobuf::uint32 handtimelen() const;
  inline void set_handtimelen(::google::protobuf::uint32 value);

  // optional uint32 nextrewardtime = 7 [default = 0];
  inline bool has_nextrewardtime() const;
  inline void clear_nextrewardtime();
  static const int kNextrewardtimeFieldNumber = 7;
  inline ::google::protobuf::uint32 nextrewardtime() const;
  inline void set_nextrewardtime(::google::protobuf::uint32 value);

  // optional uint32 nexttiptime = 8 [default = 0];
  inline bool has_nexttiptime() const;
  inline void clear_nexttiptime();
  static const int kNexttiptimeFieldNumber = 8;
  inline ::google::protobuf::uint32 nexttiptime() const;
  inline void set_nexttiptime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobHands)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_ismaster();
  inline void clear_has_ismaster();
  inline void set_has_otherid();
  inline void clear_has_otherid();
  inline void set_has_forcejoinid();
  inline void clear_has_forcejoinid();
  inline void set_has_last_handname();
  inline void clear_has_last_handname();
  inline void set_has_handtimelen();
  inline void clear_has_handtimelen();
  inline void set_has_nextrewardtime();
  inline void clear_has_nextrewardtime();
  inline void set_has_nexttiptime();
  inline void clear_has_nexttiptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 ismaster_;
  ::google::protobuf::uint64 otherid_;
  ::google::protobuf::uint64 forcejoinid_;
  ::std::string* last_handname_;
  ::google::protobuf::uint32 handtimelen_;
  ::google::protobuf::uint32 nextrewardtime_;
  ::google::protobuf::uint32 nexttiptime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobHands* default_instance_;
};
// -------------------------------------------------------------------

class BlobShow : public ::google::protobuf::Message {
 public:
  BlobShow();
  virtual ~BlobShow();

  BlobShow(const BlobShow& from);

  inline BlobShow& operator=(const BlobShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShow& default_instance();

  void Swap(BlobShow* other);

  // implements Message ----------------------------------------------

  BlobShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShow& from);
  void MergeFrom(const BlobShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 actions = 1;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 1;
  inline ::google::protobuf::uint32 actions(int index) const;
  inline void set_actions(int index, ::google::protobuf::uint32 value);
  inline void add_actions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      actions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_actions();

  // repeated uint32 expressions = 2;
  inline int expressions_size() const;
  inline void clear_expressions();
  static const int kExpressionsFieldNumber = 2;
  inline ::google::protobuf::uint32 expressions(int index) const;
  inline void set_expressions(int index, ::google::protobuf::uint32 value);
  inline void add_expressions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      expressions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_expressions();

  // @@protoc_insertion_point(class_scope:Cmd.BlobShow)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > actions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > expressions_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobShow* default_instance_;
};
// -------------------------------------------------------------------

class BlobTrace : public ::google::protobuf::Message {
 public:
  BlobTrace();
  virtual ~BlobTrace();

  BlobTrace(const BlobTrace& from);

  inline BlobTrace& operator=(const BlobTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTrace& default_instance();

  void Swap(BlobTrace* other);

  // implements Message ----------------------------------------------

  BlobTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTrace& from);
  void MergeFrom(const BlobTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.TraceItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::TraceItem& items(int index) const;
  inline ::Cmd::TraceItem* mutable_items(int index);
  inline ::Cmd::TraceItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.BlobTrace)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem > items_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTrace* default_instance_;
};
// -------------------------------------------------------------------

class BlobOption : public ::google::protobuf::Message {
 public:
  BlobOption();
  virtual ~BlobOption();

  BlobOption(const BlobOption& from);

  inline BlobOption& operator=(const BlobOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobOption& default_instance();

  void Swap(BlobOption* other);

  // implements Message ----------------------------------------------

  BlobOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobOption& from);
  void MergeFrom(const BlobOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EQueryType type = 1 [default = EQUERYTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EQueryType type() const;
  inline void set_type(::Cmd::EQueryType value);

  // optional uint32 normalskill_option = 2 [default = 1];
  inline bool has_normalskill_option() const;
  inline void clear_normalskill_option();
  static const int kNormalskillOptionFieldNumber = 2;
  inline ::google::protobuf::uint32 normalskill_option() const;
  inline void set_normalskill_option(::google::protobuf::uint32 value);

  // optional uint32 fashionhide = 3 [default = 0];
  inline bool has_fashionhide() const;
  inline void clear_fashionhide();
  static const int kFashionhideFieldNumber = 3;
  inline ::google::protobuf::uint32 fashionhide() const;
  inline void set_fashionhide(::google::protobuf::uint32 value);

  // optional uint64 bitopt = 4 [default = 18446744073709551615];
  inline bool has_bitopt() const;
  inline void clear_bitopt();
  static const int kBitoptFieldNumber = 4;
  inline ::google::protobuf::uint64 bitopt() const;
  inline void set_bitopt(::google::protobuf::uint64 value);

  // repeated .Cmd.SkillOption skillopts = 5;
  inline int skillopts_size() const;
  inline void clear_skillopts();
  static const int kSkilloptsFieldNumber = 5;
  inline const ::Cmd::SkillOption& skillopts(int index) const;
  inline ::Cmd::SkillOption* mutable_skillopts(int index);
  inline ::Cmd::SkillOption* add_skillopts();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillOption >&
      skillopts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillOption >*
      mutable_skillopts();

  // optional .Cmd.EQueryType wedding_type = 6;
  inline bool has_wedding_type() const;
  inline void clear_wedding_type();
  static const int kWeddingTypeFieldNumber = 6;
  inline ::Cmd::EQueryType wedding_type() const;
  inline void set_wedding_type(::Cmd::EQueryType value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobOption)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_normalskill_option();
  inline void clear_has_normalskill_option();
  inline void set_has_fashionhide();
  inline void clear_has_fashionhide();
  inline void set_has_bitopt();
  inline void clear_has_bitopt();
  inline void set_has_wedding_type();
  inline void clear_has_wedding_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 normalskill_option_;
  ::google::protobuf::uint64 bitopt_;
  ::google::protobuf::uint32 fashionhide_;
  int wedding_type_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillOption > skillopts_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobOption* default_instance_;
};
// -------------------------------------------------------------------

class BlobDojo : public ::google::protobuf::Message {
 public:
  BlobDojo();
  virtual ~BlobDojo();

  BlobDojo(const BlobDojo& from);

  inline BlobDojo& operator=(const BlobDojo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobDojo& default_instance();

  void Swap(BlobDojo* other);

  // implements Message ----------------------------------------------

  BlobDojo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobDojo& from);
  void MergeFrom(const BlobDojo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 completedid = 1;
  inline int completedid_size() const;
  inline void clear_completedid();
  static const int kCompletedidFieldNumber = 1;
  inline ::google::protobuf::uint32 completedid(int index) const;
  inline void set_completedid(int index, ::google::protobuf::uint32 value);
  inline void add_completedid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      completedid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_completedid();

  // @@protoc_insertion_point(class_scope:Cmd.BlobDojo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > completedid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobDojo* default_instance_;
};
// -------------------------------------------------------------------

class FoodItemInfo : public ::google::protobuf::Message {
 public:
  FoodItemInfo();
  virtual ~FoodItemInfo();

  FoodItemInfo(const FoodItemInfo& from);

  inline FoodItemInfo& operator=(const FoodItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodItemInfo& default_instance();

  void Swap(FoodItemInfo* other);

  // implements Message ----------------------------------------------

  FoodItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodItemInfo& from);
  void MergeFrom(const FoodItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 invalid_time = 2;
  inline bool has_invalid_time() const;
  inline void clear_invalid_time();
  static const int kInvalidTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 invalid_time() const;
  inline void set_invalid_time(::google::protobuf::uint32 value);

  // repeated .Cmd.UserAttrSvr attrs = 3;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 3;
  inline const ::Cmd::UserAttrSvr& attrs(int index) const;
  inline ::Cmd::UserAttrSvr* mutable_attrs(int index);
  inline ::Cmd::UserAttrSvr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >*
      mutable_attrs();

  // @@protoc_insertion_point(class_scope:Cmd.FoodItemInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_invalid_time();
  inline void clear_has_invalid_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 invalid_time_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr > attrs_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static FoodItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class FoodLimitInfo : public ::google::protobuf::Message {
 public:
  FoodLimitInfo();
  virtual ~FoodLimitInfo();

  FoodLimitInfo(const FoodLimitInfo& from);

  inline FoodLimitInfo& operator=(const FoodLimitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FoodLimitInfo& default_instance();

  void Swap(FoodLimitInfo* other);

  // implements Message ----------------------------------------------

  FoodLimitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FoodLimitInfo& from);
  void MergeFrom(const FoodLimitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.FoodLimitInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static FoodLimitInfo* default_instance_;
};
// -------------------------------------------------------------------

class BlobFood : public ::google::protobuf::Message {
 public:
  BlobFood();
  virtual ~BlobFood();

  BlobFood(const BlobFood& from);

  inline BlobFood& operator=(const BlobFood& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobFood& default_instance();

  void Swap(BlobFood* other);

  // implements Message ----------------------------------------------

  BlobFood* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobFood& from);
  void MergeFrom(const BlobFood& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cookerexp = 1;
  inline bool has_cookerexp() const;
  inline void clear_cookerexp();
  static const int kCookerexpFieldNumber = 1;
  inline ::google::protobuf::uint32 cookerexp() const;
  inline void set_cookerexp(::google::protobuf::uint32 value);

  // optional uint32 cookerlv = 2;
  inline bool has_cookerlv() const;
  inline void clear_cookerlv();
  static const int kCookerlvFieldNumber = 2;
  inline ::google::protobuf::uint32 cookerlv() const;
  inline void set_cookerlv(::google::protobuf::uint32 value);

  // optional uint32 tasterexp = 3;
  inline bool has_tasterexp() const;
  inline void clear_tasterexp();
  static const int kTasterexpFieldNumber = 3;
  inline ::google::protobuf::uint32 tasterexp() const;
  inline void set_tasterexp(::google::protobuf::uint32 value);

  // optional uint32 tasterlv = 4;
  inline bool has_tasterlv() const;
  inline void clear_tasterlv();
  static const int kTasterlvFieldNumber = 4;
  inline ::google::protobuf::uint32 tasterlv() const;
  inline void set_tasterlv(::google::protobuf::uint32 value);

  // optional uint64 savehp = 5;
  inline bool has_savehp() const;
  inline void clear_savehp();
  static const int kSavehpFieldNumber = 5;
  inline ::google::protobuf::uint64 savehp() const;
  inline void set_savehp(::google::protobuf::uint64 value);

  // optional uint64 savesp = 6;
  inline bool has_savesp() const;
  inline void clear_savesp();
  static const int kSavespFieldNumber = 6;
  inline ::google::protobuf::uint64 savesp() const;
  inline void set_savesp(::google::protobuf::uint64 value);

  // optional uint32 height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 weight = 8;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 8;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // repeated uint32 recipes = 9;
  inline int recipes_size() const;
  inline void clear_recipes();
  static const int kRecipesFieldNumber = 9;
  inline ::google::protobuf::uint32 recipes(int index) const;
  inline void set_recipes(int index, ::google::protobuf::uint32 value);
  inline void add_recipes(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recipes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recipes();

  // repeated .Cmd.FoodManualData manualdata = 10;
  inline int manualdata_size() const;
  inline void clear_manualdata();
  static const int kManualdataFieldNumber = 10;
  inline const ::Cmd::FoodManualData& manualdata(int index) const;
  inline ::Cmd::FoodManualData* mutable_manualdata(int index);
  inline ::Cmd::FoodManualData* add_manualdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >&
      manualdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >*
      mutable_manualdata();

  // repeated .Cmd.FoodItemInfo iteminfo = 11;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 11;
  inline const ::Cmd::FoodItemInfo& iteminfo(int index) const;
  inline ::Cmd::FoodItemInfo* mutable_iteminfo(int index);
  inline ::Cmd::FoodItemInfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo >*
      mutable_iteminfo();

  // optional uint32 satiety = 12;
  inline bool has_satiety() const;
  inline void clear_satiety();
  static const int kSatietyFieldNumber = 12;
  inline ::google::protobuf::uint32 satiety() const;
  inline void set_satiety(::google::protobuf::uint32 value);

  // repeated uint32 last_cooked_ids = 13;
  inline int last_cooked_ids_size() const;
  inline void clear_last_cooked_ids();
  static const int kLastCookedIdsFieldNumber = 13;
  inline ::google::protobuf::uint32 last_cooked_ids(int index) const;
  inline void set_last_cooked_ids(int index, ::google::protobuf::uint32 value);
  inline void add_last_cooked_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      last_cooked_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_last_cooked_ids();

  // repeated .Cmd.FoodLimitInfo limitinfo = 14;
  inline int limitinfo_size() const;
  inline void clear_limitinfo();
  static const int kLimitinfoFieldNumber = 14;
  inline const ::Cmd::FoodLimitInfo& limitinfo(int index) const;
  inline ::Cmd::FoodLimitInfo* mutable_limitinfo(int index);
  inline ::Cmd::FoodLimitInfo* add_limitinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodLimitInfo >&
      limitinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodLimitInfo >*
      mutable_limitinfo();

  // @@protoc_insertion_point(class_scope:Cmd.BlobFood)
 private:
  inline void set_has_cookerexp();
  inline void clear_has_cookerexp();
  inline void set_has_cookerlv();
  inline void clear_has_cookerlv();
  inline void set_has_tasterexp();
  inline void clear_has_tasterexp();
  inline void set_has_tasterlv();
  inline void clear_has_tasterlv();
  inline void set_has_savehp();
  inline void clear_has_savehp();
  inline void set_has_savesp();
  inline void clear_has_savesp();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_satiety();
  inline void clear_has_satiety();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cookerexp_;
  ::google::protobuf::uint32 cookerlv_;
  ::google::protobuf::uint32 tasterexp_;
  ::google::protobuf::uint32 tasterlv_;
  ::google::protobuf::uint64 savehp_;
  ::google::protobuf::uint64 savesp_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recipes_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData > manualdata_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo > iteminfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > last_cooked_ids_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FoodLimitInfo > limitinfo_;
  ::google::protobuf::uint32 satiety_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobFood* default_instance_;
};
// -------------------------------------------------------------------

class BlobHighRefine : public ::google::protobuf::Message {
 public:
  BlobHighRefine();
  virtual ~BlobHighRefine();

  BlobHighRefine(const BlobHighRefine& from);

  inline BlobHighRefine& operator=(const BlobHighRefine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobHighRefine& default_instance();

  void Swap(BlobHighRefine* other);

  // implements Message ----------------------------------------------

  BlobHighRefine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobHighRefine& from);
  void MergeFrom(const BlobHighRefine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.HighRefineData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::HighRefineData& datas(int index) const;
  inline ::Cmd::HighRefineData* mutable_datas(int index);
  inline ::Cmd::HighRefineData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.BlobHighRefine)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData > datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobHighRefine* default_instance_;
};
// -------------------------------------------------------------------

class PackageData : public ::google::protobuf::Message {
 public:
  PackageData();
  virtual ~PackageData();

  PackageData(const PackageData& from);

  inline PackageData& operator=(const PackageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageData& default_instance();

  void Swap(PackageData* other);

  // implements Message ----------------------------------------------

  PackageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageData& from);
  void MergeFrom(const PackageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EPackType type = 1 [default = EPACKTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EPackType type() const;
  inline void set_type(::Cmd::EPackType value);

  // repeated .Cmd.ItemData items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Cmd::ItemData& items(int index) const;
  inline ::Cmd::ItemData* mutable_items(int index);
  inline ::Cmd::ItemData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.PackageData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > items_;
  int type_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static PackageData* default_instance_;
};
// -------------------------------------------------------------------

class ItemUseCount : public ::google::protobuf::Message {
 public:
  ItemUseCount();
  virtual ~ItemUseCount();

  ItemUseCount(const ItemUseCount& from);

  inline ItemUseCount& operator=(const ItemUseCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemUseCount& default_instance();

  void Swap(ItemUseCount* other);

  // implements Message ----------------------------------------------

  ItemUseCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemUseCount& from);
  void MergeFrom(const ItemUseCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 usecount = 2 [default = 0];
  inline bool has_usecount() const;
  inline void clear_usecount();
  static const int kUsecountFieldNumber = 2;
  inline ::google::protobuf::uint32 usecount() const;
  inline void set_usecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemUseCount)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_usecount();
  inline void clear_has_usecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 usecount_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ItemUseCount* default_instance_;
};
// -------------------------------------------------------------------

class ItemGetCount : public ::google::protobuf::Message {
 public:
  ItemGetCount();
  virtual ~ItemGetCount();

  ItemGetCount(const ItemGetCount& from);

  inline ItemGetCount& operator=(const ItemGetCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemGetCount& default_instance();

  void Swap(ItemGetCount* other);

  // implements Message ----------------------------------------------

  ItemGetCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemGetCount& from);
  void MergeFrom(const ItemGetCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 getcount = 2 [default = 0];
  inline bool has_getcount() const;
  inline void clear_getcount();
  static const int kGetcountFieldNumber = 2;
  inline ::google::protobuf::uint32 getcount() const;
  inline void set_getcount(::google::protobuf::uint32 value);

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 3;
  inline ::Cmd::ESource source() const;
  inline void set_source(::Cmd::ESource value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemGetCount)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_getcount();
  inline void clear_has_getcount();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 getcount_;
  int source_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ItemGetCount* default_instance_;
};
// -------------------------------------------------------------------

class RewardSafetyItem : public ::google::protobuf::Message {
 public:
  RewardSafetyItem();
  virtual ~RewardSafetyItem();

  RewardSafetyItem(const RewardSafetyItem& from);

  inline RewardSafetyItem& operator=(const RewardSafetyItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardSafetyItem& default_instance();

  void Swap(RewardSafetyItem* other);

  // implements Message ----------------------------------------------

  RewardSafetyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardSafetyItem& from);
  void MergeFrom(const RewardSafetyItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 expiretime = 2 [default = 0];
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpiretimeFieldNumber = 2;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // optional uint32 rollcount = 3 [default = 0];
  inline bool has_rollcount() const;
  inline void clear_rollcount();
  static const int kRollcountFieldNumber = 3;
  inline ::google::protobuf::uint32 rollcount() const;
  inline void set_rollcount(::google::protobuf::uint32 value);

  // optional uint32 rewardcount = 4 [default = 0];
  inline bool has_rewardcount() const;
  inline void clear_rewardcount();
  static const int kRewardcountFieldNumber = 4;
  inline ::google::protobuf::uint32 rewardcount() const;
  inline void set_rewardcount(::google::protobuf::uint32 value);

  // optional uint32 nextsafetycount = 5 [default = 0];
  inline bool has_nextsafetycount() const;
  inline void clear_nextsafetycount();
  static const int kNextsafetycountFieldNumber = 5;
  inline ::google::protobuf::uint32 nextsafetycount() const;
  inline void set_nextsafetycount(::google::protobuf::uint32 value);

  // optional uint32 version = 6 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RewardSafetyItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_rollcount();
  inline void clear_has_rollcount();
  inline void set_has_rewardcount();
  inline void clear_has_rewardcount();
  inline void set_has_nextsafetycount();
  inline void clear_has_nextsafetycount();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 expiretime_;
  ::google::protobuf::uint32 rollcount_;
  ::google::protobuf::uint32 rewardcount_;
  ::google::protobuf::uint32 nextsafetycount_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static RewardSafetyItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobPack : public ::google::protobuf::Message {
 public:
  BlobPack();
  virtual ~BlobPack();

  BlobPack(const BlobPack& from);

  inline BlobPack& operator=(const BlobPack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobPack& default_instance();

  void Swap(BlobPack* other);

  // implements Message ----------------------------------------------

  BlobPack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobPack& from);
  void MergeFrom(const BlobPack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.PackageData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::PackageData& datas(int index) const;
  inline ::Cmd::PackageData* mutable_datas(int index);
  inline ::Cmd::PackageData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PackageData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PackageData >*
      mutable_datas();

  // repeated uint32 hintitems = 2;
  inline int hintitems_size() const;
  inline void clear_hintitems();
  static const int kHintitemsFieldNumber = 2;
  inline ::google::protobuf::uint32 hintitems(int index) const;
  inline void set_hintitems(int index, ::google::protobuf::uint32 value);
  inline void add_hintitems(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hintitems() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hintitems();

  // repeated .Cmd.FrostItemInfo frost_item_infos = 3;
  inline int frost_item_infos_size() const;
  inline void clear_frost_item_infos();
  static const int kFrostItemInfosFieldNumber = 3;
  inline const ::Cmd::FrostItemInfo& frost_item_infos(int index) const;
  inline ::Cmd::FrostItemInfo* mutable_frost_item_infos(int index);
  inline ::Cmd::FrostItemInfo* add_frost_item_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >&
      frost_item_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >*
      mutable_frost_item_infos();

  // repeated .Cmd.ItemUseCount itemuse = 4;
  inline int itemuse_size() const;
  inline void clear_itemuse();
  static const int kItemuseFieldNumber = 4;
  inline const ::Cmd::ItemUseCount& itemuse(int index) const;
  inline ::Cmd::ItemUseCount* mutable_itemuse(int index);
  inline ::Cmd::ItemUseCount* add_itemuse();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemUseCount >&
      itemuse() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemUseCount >*
      mutable_itemuse();

  // repeated uint32 onceitems = 5;
  inline int onceitems_size() const;
  inline void clear_onceitems();
  static const int kOnceitemsFieldNumber = 5;
  inline ::google::protobuf::uint32 onceitems(int index) const;
  inline void set_onceitems(int index, ::google::protobuf::uint32 value);
  inline void add_onceitems(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      onceitems() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_onceitems();

  // repeated .Cmd.ItemGetCount itemget = 6;
  inline int itemget_size() const;
  inline void clear_itemget();
  static const int kItemgetFieldNumber = 6;
  inline const ::Cmd::ItemGetCount& itemget(int index) const;
  inline ::Cmd::ItemGetCount* mutable_itemget(int index);
  inline ::Cmd::ItemGetCount* add_itemget();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >&
      itemget() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >*
      mutable_itemget();

  // optional uint32 arrowid = 8;
  inline bool has_arrowid() const;
  inline void clear_arrowid();
  static const int kArrowidFieldNumber = 8;
  inline ::google::protobuf::uint32 arrowid() const;
  inline void set_arrowid(::google::protobuf::uint32 value);

  // optional uint32 version = 9 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 9;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.EquipPosData equipposdatas = 10;
  inline int equipposdatas_size() const;
  inline void clear_equipposdatas();
  static const int kEquipposdatasFieldNumber = 10;
  inline const ::Cmd::EquipPosData& equipposdatas(int index) const;
  inline ::Cmd::EquipPosData* mutable_equipposdatas(int index);
  inline ::Cmd::EquipPosData* add_equipposdatas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >&
      equipposdatas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >*
      mutable_equipposdatas();

  // repeated .Cmd.RewardSafetyItem rewardsafetyitems = 11;
  inline int rewardsafetyitems_size() const;
  inline void clear_rewardsafetyitems();
  static const int kRewardsafetyitemsFieldNumber = 11;
  inline const ::Cmd::RewardSafetyItem& rewardsafetyitems(int index) const;
  inline ::Cmd::RewardSafetyItem* mutable_rewardsafetyitems(int index);
  inline ::Cmd::RewardSafetyItem* add_rewardsafetyitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RewardSafetyItem >&
      rewardsafetyitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RewardSafetyItem >*
      mutable_rewardsafetyitems();

  // @@protoc_insertion_point(class_scope:Cmd.BlobPack)
 private:
  inline void set_has_arrowid();
  inline void clear_has_arrowid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PackageData > datas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hintitems_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo > frost_item_infos_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemUseCount > itemuse_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > onceitems_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount > itemget_;
  ::google::protobuf::uint32 arrowid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData > equipposdatas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RewardSafetyItem > rewardsafetyitems_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobPack* default_instance_;
};
// -------------------------------------------------------------------

class MapQuest : public ::google::protobuf::Message {
 public:
  MapQuest();
  virtual ~MapQuest();

  MapQuest(const MapQuest& from);

  inline MapQuest& operator=(const MapQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapQuest& default_instance();

  void Swap(MapQuest* other);

  // implements Message ----------------------------------------------

  MapQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapQuest& from);
  void MergeFrom(const MapQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated uint32 questids = 2;
  inline int questids_size() const;
  inline void clear_questids();
  static const int kQuestidsFieldNumber = 2;
  inline ::google::protobuf::uint32 questids(int index) const;
  inline void set_questids(int index, ::google::protobuf::uint32 value);
  inline void add_questids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      questids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_questids();

  // @@protoc_insertion_point(class_scope:Cmd.MapQuest)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > questids_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static MapQuest* default_instance_;
};
// -------------------------------------------------------------------

class BlobQuestPuzzle : public ::google::protobuf::Message {
 public:
  BlobQuestPuzzle();
  virtual ~BlobQuestPuzzle();

  BlobQuestPuzzle(const BlobQuestPuzzle& from);

  inline BlobQuestPuzzle& operator=(const BlobQuestPuzzle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobQuestPuzzle& default_instance();

  void Swap(BlobQuestPuzzle* other);

  // implements Message ----------------------------------------------

  BlobQuestPuzzle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobQuestPuzzle& from);
  void MergeFrom(const BlobQuestPuzzle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.QuestPuzzle puzzles = 1;
  inline int puzzles_size() const;
  inline void clear_puzzles();
  static const int kPuzzlesFieldNumber = 1;
  inline const ::Cmd::QuestPuzzle& puzzles(int index) const;
  inline ::Cmd::QuestPuzzle* mutable_puzzles(int index);
  inline ::Cmd::QuestPuzzle* add_puzzles();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPuzzle >&
      puzzles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPuzzle >*
      mutable_puzzles();

  // @@protoc_insertion_point(class_scope:Cmd.BlobQuestPuzzle)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPuzzle > puzzles_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobQuestPuzzle* default_instance_;
};
// -------------------------------------------------------------------

class BlobQuest : public ::google::protobuf::Message {
 public:
  BlobQuest();
  virtual ~BlobQuest();

  BlobQuest(const BlobQuest& from);

  inline BlobQuest& operator=(const BlobQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobQuest& default_instance();

  void Swap(BlobQuest* other);

  // implements Message ----------------------------------------------

  BlobQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobQuest& from);
  void MergeFrom(const BlobQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.QuestData accept = 1;
  inline int accept_size() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 1;
  inline const ::Cmd::QuestData& accept(int index) const;
  inline ::Cmd::QuestData* mutable_accept(int index);
  inline ::Cmd::QuestData* add_accept();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
      accept() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
      mutable_accept();

  // repeated .Cmd.QuestData submit = 2;
  inline int submit_size() const;
  inline void clear_submit();
  static const int kSubmitFieldNumber = 2;
  inline const ::Cmd::QuestData& submit(int index) const;
  inline ::Cmd::QuestData* mutable_submit(int index);
  inline ::Cmd::QuestData* add_submit();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
      submit() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
      mutable_submit();

  // repeated .Cmd.QuestDetail detail = 3;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 3;
  inline const ::Cmd::QuestDetail& detail(int index) const;
  inline ::Cmd::QuestDetail* mutable_detail(int index);
  inline ::Cmd::QuestDetail* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
      mutable_detail();

  // optional uint32 dailycount = 4 [default = 0];
  inline bool has_dailycount() const;
  inline void clear_dailycount();
  static const int kDailycountFieldNumber = 4;
  inline ::google::protobuf::uint32 dailycount() const;
  inline void set_dailycount(::google::protobuf::uint32 value);

  // optional uint32 dailytcount = 5 [default = 0];
  inline bool has_dailytcount() const;
  inline void clear_dailytcount();
  static const int kDailytcountFieldNumber = 5;
  inline ::google::protobuf::uint32 dailytcount() const;
  inline void set_dailytcount(::google::protobuf::uint32 value);

  // optional uint32 dailyexp = 6 [default = 0];
  inline bool has_dailyexp() const;
  inline void clear_dailyexp();
  static const int kDailyexpFieldNumber = 6;
  inline ::google::protobuf::uint32 dailyexp() const;
  inline void set_dailyexp(::google::protobuf::uint32 value);

  // optional uint32 dailylevel = 7 [default = 0];
  inline bool has_dailylevel() const;
  inline void clear_dailylevel();
  static const int kDailylevelFieldNumber = 7;
  inline ::google::protobuf::uint32 dailylevel() const;
  inline void set_dailylevel(::google::protobuf::uint32 value);

  // repeated uint32 dailygift = 8;
  inline int dailygift_size() const;
  inline void clear_dailygift();
  static const int kDailygiftFieldNumber = 8;
  inline ::google::protobuf::uint32 dailygift(int index) const;
  inline void set_dailygift(int index, ::google::protobuf::uint32 value);
  inline void add_dailygift(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dailygift() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dailygift();

  // optional uint32 lastcalcdailycounttime = 9 [default = 0];
  inline bool has_lastcalcdailycounttime() const;
  inline void clear_lastcalcdailycounttime();
  static const int kLastcalcdailycounttimeFieldNumber = 9;
  inline ::google::protobuf::uint32 lastcalcdailycounttime() const;
  inline void set_lastcalcdailycounttime(::google::protobuf::uint32 value);

  // repeated .Cmd.MapQuest mapquest = 10;
  inline int mapquest_size() const;
  inline void clear_mapquest();
  static const int kMapquestFieldNumber = 10;
  inline const ::Cmd::MapQuest& mapquest(int index) const;
  inline ::Cmd::MapQuest* mutable_mapquest(int index);
  inline ::Cmd::MapQuest* add_mapquest();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >&
      mapquest() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >*
      mutable_mapquest();

  // repeated .Cmd.MapQuest maprandquest = 14;
  inline int maprandquest_size() const;
  inline void clear_maprandquest();
  static const int kMaprandquestFieldNumber = 14;
  inline const ::Cmd::MapQuest& maprandquest(int index) const;
  inline ::Cmd::MapQuest* mutable_maprandquest(int index);
  inline ::Cmd::MapQuest* add_maprandquest();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >&
      maprandquest() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >*
      mutable_maprandquest();

  // repeated uint32 varreward = 11;
  inline int varreward_size() const;
  inline void clear_varreward();
  static const int kVarrewardFieldNumber = 11;
  inline ::google::protobuf::uint32 varreward(int index) const;
  inline void set_varreward(int index, ::google::protobuf::uint32 value);
  inline void add_varreward(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      varreward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_varreward();

  // repeated uint32 forbidquest = 12;
  inline int forbidquest_size() const;
  inline void clear_forbidquest();
  static const int kForbidquestFieldNumber = 12;
  inline ::google::protobuf::uint32 forbidquest(int index) const;
  inline void set_forbidquest(int index, ::google::protobuf::uint32 value);
  inline void add_forbidquest(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      forbidquest() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_forbidquest();

  // repeated uint32 process_acc = 13;
  inline int process_acc_size() const;
  inline void clear_process_acc();
  static const int kProcessAccFieldNumber = 13;
  inline ::google::protobuf::uint32 process_acc(int index) const;
  inline void set_process_acc(int index, ::google::protobuf::uint32 value);
  inline void add_process_acc(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      process_acc() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_process_acc();

  // optional .Cmd.BlobQuestPuzzle puzzle = 15;
  inline bool has_puzzle() const;
  inline void clear_puzzle();
  static const int kPuzzleFieldNumber = 15;
  inline const ::Cmd::BlobQuestPuzzle& puzzle() const;
  inline ::Cmd::BlobQuestPuzzle* mutable_puzzle();
  inline ::Cmd::BlobQuestPuzzle* release_puzzle();
  inline void set_allocated_puzzle(::Cmd::BlobQuestPuzzle* puzzle);

  // @@protoc_insertion_point(class_scope:Cmd.BlobQuest)
 private:
  inline void set_has_dailycount();
  inline void clear_has_dailycount();
  inline void set_has_dailytcount();
  inline void clear_has_dailytcount();
  inline void set_has_dailyexp();
  inline void clear_has_dailyexp();
  inline void set_has_dailylevel();
  inline void clear_has_dailylevel();
  inline void set_has_lastcalcdailycounttime();
  inline void clear_has_lastcalcdailycounttime();
  inline void set_has_puzzle();
  inline void clear_has_puzzle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData > accept_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData > submit_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail > detail_;
  ::google::protobuf::uint32 dailycount_;
  ::google::protobuf::uint32 dailytcount_;
  ::google::protobuf::uint32 dailyexp_;
  ::google::protobuf::uint32 dailylevel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dailygift_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest > mapquest_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest > maprandquest_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > varreward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > forbidquest_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > process_acc_;
  ::Cmd::BlobQuestPuzzle* puzzle_;
  ::google::protobuf::uint32 lastcalcdailycounttime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobQuest* default_instance_;
};
// -------------------------------------------------------------------

class BlobTitle : public ::google::protobuf::Message {
 public:
  BlobTitle();
  virtual ~BlobTitle();

  BlobTitle(const BlobTitle& from);

  inline BlobTitle& operator=(const BlobTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTitle& default_instance();

  void Swap(BlobTitle* other);

  // implements Message ----------------------------------------------

  BlobTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTitle& from);
  void MergeFrom(const BlobTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 curTitle = 1 [default = 0];
  inline bool has_curtitle() const;
  inline void clear_curtitle();
  static const int kCurTitleFieldNumber = 1;
  inline ::google::protobuf::uint32 curtitle() const;
  inline void set_curtitle(::google::protobuf::uint32 value);

  // repeated .Cmd.TitleData datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::TitleData& datas(int index) const;
  inline ::Cmd::TitleData* mutable_datas(int index);
  inline ::Cmd::TitleData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TitleData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TitleData >*
      mutable_datas();

  // optional uint32 curAchieveTitle = 3 [default = 0];
  inline bool has_curachievetitle() const;
  inline void clear_curachievetitle();
  static const int kCurAchieveTitleFieldNumber = 3;
  inline ::google::protobuf::uint32 curachievetitle() const;
  inline void set_curachievetitle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobTitle)
 private:
  inline void set_has_curtitle();
  inline void clear_has_curtitle();
  inline void set_has_curachievetitle();
  inline void clear_has_curachievetitle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TitleData > datas_;
  ::google::protobuf::uint32 curtitle_;
  ::google::protobuf::uint32 curachievetitle_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTitle* default_instance_;
};
// -------------------------------------------------------------------

class BlobLineData : public ::google::protobuf::Message {
 public:
  BlobLineData();
  virtual ~BlobLineData();

  BlobLineData(const BlobLineData& from);

  inline BlobLineData& operator=(const BlobLineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobLineData& default_instance();

  void Swap(BlobLineData* other);

  // implements Message ----------------------------------------------

  BlobLineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobLineData& from);
  void MergeFrom(const BlobLineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 otherid = 1;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 1;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // optional uint32 expireTime = 2;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobLineData)
 private:
  inline void set_has_otherid();
  inline void clear_has_otherid();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 otherid_;
  ::google::protobuf::uint32 expiretime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobLineData* default_instance_;
};
// -------------------------------------------------------------------

class BlobLine : public ::google::protobuf::Message {
 public:
  BlobLine();
  virtual ~BlobLine();

  BlobLine(const BlobLine& from);

  inline BlobLine& operator=(const BlobLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobLine& default_instance();

  void Swap(BlobLine* other);

  // implements Message ----------------------------------------------

  BlobLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobLine& from);
  void MergeFrom(const BlobLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.BlobLineData ilinewho = 1;
  inline int ilinewho_size() const;
  inline void clear_ilinewho();
  static const int kIlinewhoFieldNumber = 1;
  inline const ::Cmd::BlobLineData& ilinewho(int index) const;
  inline ::Cmd::BlobLineData* mutable_ilinewho(int index);
  inline ::Cmd::BlobLineData* add_ilinewho();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >&
      ilinewho() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >*
      mutable_ilinewho();

  // repeated .Cmd.BlobLineData wholineme = 2;
  inline int wholineme_size() const;
  inline void clear_wholineme();
  static const int kWholinemeFieldNumber = 2;
  inline const ::Cmd::BlobLineData& wholineme(int index) const;
  inline ::Cmd::BlobLineData* mutable_wholineme(int index);
  inline ::Cmd::BlobLineData* add_wholineme();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >&
      wholineme() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >*
      mutable_wholineme();

  // @@protoc_insertion_point(class_scope:Cmd.BlobLine)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData > ilinewho_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData > wholineme_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobLine* default_instance_;
};
// -------------------------------------------------------------------

class BlobSpEffect : public ::google::protobuf::Message {
 public:
  BlobSpEffect();
  virtual ~BlobSpEffect();

  BlobSpEffect(const BlobSpEffect& from);

  inline BlobSpEffect& operator=(const BlobSpEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobSpEffect& default_instance();

  void Swap(BlobSpEffect* other);

  // implements Message ----------------------------------------------

  BlobSpEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobSpEffect& from);
  void MergeFrom(const BlobSpEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.SpEffectData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Cmd::SpEffectData& data(int index) const;
  inline ::Cmd::SpEffectData* mutable_data(int index);
  inline ::Cmd::SpEffectData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >*
      mutable_data();

  // repeated .Cmd.BlobLineData wholineme = 2;
  inline int wholineme_size() const;
  inline void clear_wholineme();
  static const int kWholinemeFieldNumber = 2;
  inline const ::Cmd::BlobLineData& wholineme(int index) const;
  inline ::Cmd::BlobLineData* mutable_wholineme(int index);
  inline ::Cmd::BlobLineData* add_wholineme();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >&
      wholineme() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >*
      mutable_wholineme();

  // @@protoc_insertion_point(class_scope:Cmd.BlobSpEffect)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData > data_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData > wholineme_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobSpEffect* default_instance_;
};
// -------------------------------------------------------------------

class BlobHandNpc : public ::google::protobuf::Message {
 public:
  BlobHandNpc();
  virtual ~BlobHandNpc();

  BlobHandNpc(const BlobHandNpc& from);

  inline BlobHandNpc& operator=(const BlobHandNpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobHandNpc& default_instance();

  void Swap(BlobHandNpc* other);

  // implements Message ----------------------------------------------

  BlobHandNpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobHandNpc& from);
  void MergeFrom(const BlobHandNpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional .Cmd.HandNpcData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Cmd::HandNpcData& data() const;
  inline ::Cmd::HandNpcData* mutable_data();
  inline ::Cmd::HandNpcData* release_data();
  inline void set_allocated_data(::Cmd::HandNpcData* data);

  // optional uint32 endtime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobHandNpc)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::HandNpcData* data_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 endtime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobHandNpc* default_instance_;
};
// -------------------------------------------------------------------

class BlobPet : public ::google::protobuf::Message {
 public:
  BlobPet();
  virtual ~BlobPet();

  BlobPet(const BlobPet& from);

  inline BlobPet& operator=(const BlobPet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobPet& default_instance();

  void Swap(BlobPet* other);

  // implements Message ----------------------------------------------

  BlobPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobPet& from);
  void MergeFrom(const BlobPet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 activePet = 1 [default = 0];
  inline bool has_activepet() const;
  inline void clear_activepet();
  static const int kActivePetFieldNumber = 1;
  inline ::google::protobuf::uint32 activepet() const;
  inline void set_activepet(::google::protobuf::uint32 value);

  // optional uint32 activePartner = 2 [default = 0];
  inline bool has_activepartner() const;
  inline void clear_activepartner();
  static const int kActivePartnerFieldNumber = 2;
  inline ::google::protobuf::uint32 activepartner() const;
  inline void set_activepartner(::google::protobuf::uint32 value);

  // repeated .Cmd.PetData datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::PetData& datas(int index) const;
  inline ::Cmd::PetData* mutable_datas(int index);
  inline ::Cmd::PetData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.BlobPet)
 private:
  inline void set_has_activepet();
  inline void clear_has_activepet();
  inline void set_has_activepartner();
  inline void clear_has_activepartner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 activepet_;
  ::google::protobuf::uint32 activepartner_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetData > datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobPet* default_instance_;
};
// -------------------------------------------------------------------

class BlobWeaponPet : public ::google::protobuf::Message {
 public:
  BlobWeaponPet();
  virtual ~BlobWeaponPet();

  BlobWeaponPet(const BlobWeaponPet& from);

  inline BlobWeaponPet& operator=(const BlobWeaponPet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobWeaponPet& default_instance();

  void Swap(BlobWeaponPet* other);

  // implements Message ----------------------------------------------

  BlobWeaponPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobWeaponPet& from);
  void MergeFrom(const BlobWeaponPet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.WeaponPetData datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::WeaponPetData& datas(int index) const;
  inline ::Cmd::WeaponPetData* mutable_datas(int index);
  inline ::Cmd::WeaponPetData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeaponPetData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeaponPetData >*
      mutable_datas();

  // optional uint32 maxpetsize = 3 [default = 0];
  inline bool has_maxpetsize() const;
  inline void clear_maxpetsize();
  static const int kMaxpetsizeFieldNumber = 3;
  inline ::google::protobuf::uint32 maxpetsize() const;
  inline void set_maxpetsize(::google::protobuf::uint32 value);

  // repeated uint32 unlockids = 4;
  inline int unlockids_size() const;
  inline void clear_unlockids();
  static const int kUnlockidsFieldNumber = 4;
  inline ::google::protobuf::uint32 unlockids(int index) const;
  inline void set_unlockids(int index, ::google::protobuf::uint32 value);
  inline void add_unlockids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlockids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlockids();

  // @@protoc_insertion_point(class_scope:Cmd.BlobWeaponPet)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_maxpetsize();
  inline void clear_has_maxpetsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WeaponPetData > datas_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 maxpetsize_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlockids_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobWeaponPet* default_instance_;
};
// -------------------------------------------------------------------

class BlobVar : public ::google::protobuf::Message {
 public:
  BlobVar();
  virtual ~BlobVar();

  BlobVar(const BlobVar& from);

  inline BlobVar& operator=(const BlobVar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobVar& default_instance();

  void Swap(BlobVar* other);

  // implements Message ----------------------------------------------

  BlobVar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobVar& from);
  void MergeFrom(const BlobVar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.Var datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::Var& datas(int index) const;
  inline ::Cmd::Var* mutable_datas(int index);
  inline ::Cmd::Var* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Var >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::Var >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.BlobVar)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::Var > datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobVar* default_instance_;
};
// -------------------------------------------------------------------

class BlobAccVar : public ::google::protobuf::Message {
 public:
  BlobAccVar();
  virtual ~BlobAccVar();

  BlobAccVar(const BlobAccVar& from);

  inline BlobAccVar& operator=(const BlobAccVar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAccVar& default_instance();

  void Swap(BlobAccVar* other);

  // implements Message ----------------------------------------------

  BlobAccVar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAccVar& from);
  void MergeFrom(const BlobAccVar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.AccVar datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::AccVar& datas(int index) const;
  inline ::Cmd::AccVar* mutable_datas(int index);
  inline ::Cmd::AccVar* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AccVar >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AccVar >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.BlobAccVar)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AccVar > datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAccVar* default_instance_;
};
// -------------------------------------------------------------------

class SkillDamage : public ::google::protobuf::Message {
 public:
  SkillDamage();
  virtual ~SkillDamage();

  SkillDamage(const SkillDamage& from);

  inline SkillDamage& operator=(const SkillDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDamage& default_instance();

  void Swap(SkillDamage* other);

  // implements Message ----------------------------------------------

  SkillDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDamage& from);
  void MergeFrom(const SkillDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillid = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 targetid = 4;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 4;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.SkillDamage)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static SkillDamage* default_instance_;
};
// -------------------------------------------------------------------

class StatKillMonster : public ::google::protobuf::Message {
 public:
  StatKillMonster();
  virtual ~StatKillMonster();

  StatKillMonster(const StatKillMonster& from);

  inline StatKillMonster& operator=(const StatKillMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatKillMonster& default_instance();

  void Swap(StatKillMonster* other);

  // implements Message ----------------------------------------------

  StatKillMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatKillMonster& from);
  void MergeFrom(const StatKillMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 monsterid = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 1;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // required uint32 killnum = 2;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillnumFieldNumber = 2;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.StatKillMonster)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_killnum();
  inline void clear_has_killnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 monsterid_;
  ::google::protobuf::uint32 killnum_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static StatKillMonster* default_instance_;
};
// -------------------------------------------------------------------

class BlobStatVar : public ::google::protobuf::Message {
 public:
  BlobStatVar();
  virtual ~BlobStatVar();

  BlobStatVar(const BlobStatVar& from);

  inline BlobStatVar& operator=(const BlobStatVar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobStatVar& default_instance();

  void Swap(BlobStatVar* other);

  // implements Message ----------------------------------------------

  BlobStatVar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobStatVar& from);
  void MergeFrom(const BlobStatVar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.StatVar datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::StatVar& datas(int index) const;
  inline ::Cmd::StatVar* mutable_datas(int index);
  inline ::Cmd::StatVar* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StatVar >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StatVar >*
      mutable_datas();

  // repeated .Cmd.SkillDamage skilldamage = 2;
  inline int skilldamage_size() const;
  inline void clear_skilldamage();
  static const int kSkilldamageFieldNumber = 2;
  inline const ::Cmd::SkillDamage& skilldamage(int index) const;
  inline ::Cmd::SkillDamage* mutable_skilldamage(int index);
  inline ::Cmd::SkillDamage* add_skilldamage();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillDamage >&
      skilldamage() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillDamage >*
      mutable_skilldamage();

  // repeated .Cmd.StatKillMonster killmonster = 3;
  inline int killmonster_size() const;
  inline void clear_killmonster();
  static const int kKillmonsterFieldNumber = 3;
  inline const ::Cmd::StatKillMonster& killmonster(int index) const;
  inline ::Cmd::StatKillMonster* mutable_killmonster(int index);
  inline ::Cmd::StatKillMonster* add_killmonster();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >&
      killmonster() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >*
      mutable_killmonster();

  // @@protoc_insertion_point(class_scope:Cmd.BlobStatVar)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StatVar > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillDamage > skilldamage_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster > killmonster_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobStatVar* default_instance_;
};
// -------------------------------------------------------------------

class BlobChatMsg : public ::google::protobuf::Message {
 public:
  BlobChatMsg();
  virtual ~BlobChatMsg();

  BlobChatMsg(const BlobChatMsg& from);

  inline BlobChatMsg& operator=(const BlobChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobChatMsg& default_instance();

  void Swap(BlobChatMsg* other);

  // implements Message ----------------------------------------------

  BlobChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobChatMsg& from);
  void MergeFrom(const BlobChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.PresetMsg preset = 1;
  inline int preset_size() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 1;
  inline const ::Cmd::PresetMsg& preset(int index) const;
  inline ::Cmd::PresetMsg* mutable_preset(int index);
  inline ::Cmd::PresetMsg* add_preset();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PresetMsg >&
      preset() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PresetMsg >*
      mutable_preset();

  // @@protoc_insertion_point(class_scope:Cmd.BlobChatMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PresetMsg > preset_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class BlobUserTower : public ::google::protobuf::Message {
 public:
  BlobUserTower();
  virtual ~BlobUserTower();

  BlobUserTower(const BlobUserTower& from);

  inline BlobUserTower& operator=(const BlobUserTower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobUserTower& default_instance();

  void Swap(BlobUserTower* other);

  // implements Message ----------------------------------------------

  BlobUserTower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobUserTower& from);
  void MergeFrom(const BlobUserTower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.UserTowerInfo towerinfo = 1;
  inline bool has_towerinfo() const;
  inline void clear_towerinfo();
  static const int kTowerinfoFieldNumber = 1;
  inline const ::Cmd::UserTowerInfo& towerinfo() const;
  inline ::Cmd::UserTowerInfo* mutable_towerinfo();
  inline ::Cmd::UserTowerInfo* release_towerinfo();
  inline void set_allocated_towerinfo(::Cmd::UserTowerInfo* towerinfo);

  // optional uint32 cleartime = 2 [default = 0];
  inline bool has_cleartime() const;
  inline void clear_cleartime();
  static const int kCleartimeFieldNumber = 2;
  inline ::google::protobuf::uint32 cleartime() const;
  inline void set_cleartime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobUserTower)
 private:
  inline void set_has_towerinfo();
  inline void clear_has_towerinfo();
  inline void set_has_cleartime();
  inline void clear_has_cleartime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::UserTowerInfo* towerinfo_;
  ::google::protobuf::uint32 cleartime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobUserTower* default_instance_;
};
// -------------------------------------------------------------------

class BlobSeal : public ::google::protobuf::Message {
 public:
  BlobSeal();
  virtual ~BlobSeal();

  BlobSeal(const BlobSeal& from);

  inline BlobSeal& operator=(const BlobSeal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobSeal& default_instance();

  void Swap(BlobSeal* other);

  // implements Message ----------------------------------------------

  BlobSeal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobSeal& from);
  void MergeFrom(const BlobSeal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.SealData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::SealData& datas(int index) const;
  inline ::Cmd::SealData* mutable_datas(int index);
  inline ::Cmd::SealData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
      mutable_datas();

  // repeated .Cmd.SealData questseals = 2;
  inline int questseals_size() const;
  inline void clear_questseals();
  static const int kQuestsealsFieldNumber = 2;
  inline const ::Cmd::SealData& questseals(int index) const;
  inline ::Cmd::SealData* mutable_questseals(int index);
  inline ::Cmd::SealData* add_questseals();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
      questseals() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
      mutable_questseals();

  // optional uint32 nexttime = 3 [default = 0];
  inline bool has_nexttime() const;
  inline void clear_nexttime();
  static const int kNexttimeFieldNumber = 3;
  inline ::google::protobuf::uint32 nexttime() const;
  inline void set_nexttime(::google::protobuf::uint32 value);

  // repeated uint32 openseals = 4;
  inline int openseals_size() const;
  inline void clear_openseals();
  static const int kOpensealsFieldNumber = 4;
  inline ::google::protobuf::uint32 openseals(int index) const;
  inline void set_openseals(int index, ::google::protobuf::uint32 value);
  inline void add_openseals(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      openseals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_openseals();

  // @@protoc_insertion_point(class_scope:Cmd.BlobSeal)
 private:
  inline void set_has_nexttime();
  inline void clear_has_nexttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SealData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SealData > questseals_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > openseals_;
  ::google::protobuf::uint32 nexttime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobSeal* default_instance_;
};
// -------------------------------------------------------------------

class BlobManual : public ::google::protobuf::Message {
 public:
  BlobManual();
  virtual ~BlobManual();

  BlobManual(const BlobManual& from);

  inline BlobManual& operator=(const BlobManual& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobManual& default_instance();

  void Swap(BlobManual* other);

  // implements Message ----------------------------------------------

  BlobManual* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobManual& from);
  void MergeFrom(const BlobManual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ManualData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Cmd::ManualData& data() const;
  inline ::Cmd::ManualData* mutable_data();
  inline ::Cmd::ManualData* release_data();
  inline void set_allocated_data(::Cmd::ManualData* data);

  // optional bool isadd = 2;
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsaddFieldNumber = 2;
  inline bool isadd() const;
  inline void set_isadd(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobManual)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_isadd();
  inline void clear_has_isadd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::ManualData* data_;
  bool isadd_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobManual* default_instance_;
};
// -------------------------------------------------------------------

class BlobFirstActionDone : public ::google::protobuf::Message {
 public:
  BlobFirstActionDone();
  virtual ~BlobFirstActionDone();

  BlobFirstActionDone(const BlobFirstActionDone& from);

  inline BlobFirstActionDone& operator=(const BlobFirstActionDone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobFirstActionDone& default_instance();

  void Swap(BlobFirstActionDone* other);

  // implements Message ----------------------------------------------

  BlobFirstActionDone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobFirstActionDone& from);
  void MergeFrom(const BlobFirstActionDone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::google::protobuf::uint32 action() const;
  inline void set_action(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobFirstActionDone)
 private:
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 action_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobFirstActionDone* default_instance_;
};
// -------------------------------------------------------------------

class BlobAttr : public ::google::protobuf::Message {
 public:
  BlobAttr();
  virtual ~BlobAttr();

  BlobAttr(const BlobAttr& from);

  inline BlobAttr& operator=(const BlobAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAttr& default_instance();

  void Swap(BlobAttr* other);

  // implements Message ----------------------------------------------

  BlobAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAttr& from);
  void MergeFrom(const BlobAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.UserAttrSvr datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::UserAttrSvr& datas(int index) const;
  inline ::Cmd::UserAttrSvr* mutable_datas(int index);
  inline ::Cmd::UserAttrSvr* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.BlobAttr)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr > datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAttr* default_instance_;
};
// -------------------------------------------------------------------

class MonsterNum : public ::google::protobuf::Message {
 public:
  MonsterNum();
  virtual ~MonsterNum();

  MonsterNum(const MonsterNum& from);

  inline MonsterNum& operator=(const MonsterNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterNum& default_instance();

  void Swap(MonsterNum* other);

  // implements Message ----------------------------------------------

  MonsterNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterNum& from);
  void MergeFrom(const MonsterNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 monsterid = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 1;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.MonsterNum)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 monsterid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static MonsterNum* default_instance_;
};
// -------------------------------------------------------------------

class BlobCamera : public ::google::protobuf::Message {
 public:
  BlobCamera();
  virtual ~BlobCamera();

  BlobCamera(const BlobCamera& from);

  inline BlobCamera& operator=(const BlobCamera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobCamera& default_instance();

  void Swap(BlobCamera* other);

  // implements Message ----------------------------------------------

  BlobCamera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobCamera& from);
  void MergeFrom(const BlobCamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.MonsterNum monsters = 2;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 2;
  inline const ::Cmd::MonsterNum& monsters(int index) const;
  inline ::Cmd::MonsterNum* mutable_monsters(int index);
  inline ::Cmd::MonsterNum* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MonsterNum >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MonsterNum >*
      mutable_monsters();

  // @@protoc_insertion_point(class_scope:Cmd.BlobCamera)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MonsterNum > monsters_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobCamera* default_instance_;
};
// -------------------------------------------------------------------

class RaidZone : public ::google::protobuf::Message {
 public:
  RaidZone();
  virtual ~RaidZone();

  RaidZone(const RaidZone& from);

  inline RaidZone& operator=(const RaidZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaidZone& default_instance();

  void Swap(RaidZone* other);

  // implements Message ----------------------------------------------

  RaidZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaidZone& from);
  void MergeFrom(const RaidZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 raidid = 1 [default = 0];
  inline bool has_raidid() const;
  inline void clear_raidid();
  static const int kRaididFieldNumber = 1;
  inline ::google::protobuf::uint32 raidid() const;
  inline void set_raidid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 2 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RaidZone)
 private:
  inline void set_has_raidid();
  inline void clear_has_raidid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 raidid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static RaidZone* default_instance_;
};
// -------------------------------------------------------------------

class BlobZone : public ::google::protobuf::Message {
 public:
  BlobZone();
  virtual ~BlobZone();

  BlobZone(const BlobZone& from);

  inline BlobZone& operator=(const BlobZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobZone& default_instance();

  void Swap(BlobZone* other);

  // implements Message ----------------------------------------------

  BlobZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobZone& from);
  void MergeFrom(const BlobZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 2;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 mapid = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional bytes cmd = 4;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 4;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const void* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // optional uint32 pastzoneid = 5;
  inline bool has_pastzoneid() const;
  inline void clear_pastzoneid();
  static const int kPastzoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 pastzoneid() const;
  inline void set_pastzoneid(::google::protobuf::uint32 value);

  // repeated .Cmd.RaidZone raidzonelist = 6;
  inline int raidzonelist_size() const;
  inline void clear_raidzonelist();
  static const int kRaidzonelistFieldNumber = 6;
  inline const ::Cmd::RaidZone& raidzonelist(int index) const;
  inline ::Cmd::RaidZone* mutable_raidzonelist(int index);
  inline ::Cmd::RaidZone* add_raidzonelist();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RaidZone >&
      raidzonelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RaidZone >*
      mutable_raidzonelist();

  // optional uint32 effectivetime = 7;
  inline bool has_effectivetime() const;
  inline void clear_effectivetime();
  static const int kEffectivetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 effectivetime() const;
  inline void set_effectivetime(::google::protobuf::uint32 value);

  // optional uint32 type = 8 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 roomid = 9;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 9;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint32 colorindex = 10;
  inline bool has_colorindex() const;
  inline void clear_colorindex();
  static const int kColorindexFieldNumber = 10;
  inline ::google::protobuf::uint32 colorindex() const;
  inline void set_colorindex(::google::protobuf::uint32 value);

  // optional float x = 11 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 11;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 12 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 12;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 13 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 13;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobZone)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_pastzoneid();
  inline void clear_has_pastzoneid();
  inline void set_has_effectivetime();
  inline void clear_has_effectivetime();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_colorindex();
  inline void clear_has_colorindex();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* cmd_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 pastzoneid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RaidZone > raidzonelist_;
  ::google::protobuf::uint32 effectivetime_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 colorindex_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobZone* default_instance_;
};
// -------------------------------------------------------------------

class BlobGuild : public ::google::protobuf::Message {
 public:
  BlobGuild();
  virtual ~BlobGuild();

  BlobGuild(const BlobGuild& from);

  inline BlobGuild& operator=(const BlobGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGuild& default_instance();

  void Swap(BlobGuild* other);

  // implements Message ----------------------------------------------

  BlobGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGuild& from);
  void MergeFrom(const BlobGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.GuildInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Cmd::GuildInfo& info() const;
  inline ::Cmd::GuildInfo* mutable_info();
  inline ::Cmd::GuildInfo* release_info();
  inline void set_allocated_info(::Cmd::GuildInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.BlobGuild)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::GuildInfo* info_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGuild* default_instance_;
};
// -------------------------------------------------------------------

class BlobTeam : public ::google::protobuf::Message {
 public:
  BlobTeam();
  virtual ~BlobTeam();

  BlobTeam(const BlobTeam& from);

  inline BlobTeam& operator=(const BlobTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTeam& default_instance();

  void Swap(BlobTeam* other);

  // implements Message ----------------------------------------------

  BlobTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTeam& from);
  void MergeFrom(const BlobTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.TeamInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::Cmd::TeamInfo& info() const;
  inline ::Cmd::TeamInfo* mutable_info();
  inline ::Cmd::TeamInfo* release_info();
  inline void set_allocated_info(::Cmd::TeamInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.BlobTeam)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::TeamInfo* info_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTeam* default_instance_;
};
// -------------------------------------------------------------------

class BlobUserZone : public ::google::protobuf::Message {
 public:
  BlobUserZone();
  virtual ~BlobUserZone();

  BlobUserZone(const BlobUserZone& from);

  inline BlobUserZone& operator=(const BlobUserZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobUserZone& default_instance();

  void Swap(BlobUserZone* other);

  // implements Message ----------------------------------------------

  BlobUserZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobUserZone& from);
  void MergeFrom(const BlobUserZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.RecentZoneInfo infos = 3;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 3;
  inline const ::Cmd::RecentZoneInfo& infos(int index) const;
  inline ::Cmd::RecentZoneInfo* mutable_infos(int index);
  inline ::Cmd::RecentZoneInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:Cmd.BlobUserZone)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo > infos_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobUserZone* default_instance_;
};
// -------------------------------------------------------------------

class BlobAccQuest : public ::google::protobuf::Message {
 public:
  BlobAccQuest();
  virtual ~BlobAccQuest();

  BlobAccQuest(const BlobAccQuest& from);

  inline BlobAccQuest& operator=(const BlobAccQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAccQuest& default_instance();

  void Swap(BlobAccQuest* other);

  // implements Message ----------------------------------------------

  BlobAccQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAccQuest& from);
  void MergeFrom(const BlobAccQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 accept_ids = 1;
  inline int accept_ids_size() const;
  inline void clear_accept_ids();
  static const int kAcceptIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 accept_ids(int index) const;
  inline void set_accept_ids(int index, ::google::protobuf::uint32 value);
  inline void add_accept_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      accept_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_accept_ids();

  // repeated uint32 choice_ids = 2;
  inline int choice_ids_size() const;
  inline void clear_choice_ids();
  static const int kChoiceIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 choice_ids(int index) const;
  inline void set_choice_ids(int index, ::google::protobuf::uint32 value);
  inline void add_choice_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      choice_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_choice_ids();

  // optional uint32 version = 3 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobAccQuest)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > accept_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > choice_ids_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAccQuest* default_instance_;
};
// -------------------------------------------------------------------

class BlobGlobalTower : public ::google::protobuf::Message {
 public:
  BlobGlobalTower();
  virtual ~BlobGlobalTower();

  BlobGlobalTower(const BlobGlobalTower& from);

  inline BlobGlobalTower& operator=(const BlobGlobalTower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGlobalTower& default_instance();

  void Swap(BlobGlobalTower* other);

  // implements Message ----------------------------------------------

  BlobGlobalTower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGlobalTower& from);
  void MergeFrom(const BlobGlobalTower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.TowerInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Cmd::TowerInfo& info() const;
  inline ::Cmd::TowerInfo* mutable_info();
  inline ::Cmd::TowerInfo* release_info();
  inline void set_allocated_info(::Cmd::TowerInfo* info);

  // optional .Cmd.BlobVar var = 2;
  inline bool has_var() const;
  inline void clear_var();
  static const int kVarFieldNumber = 2;
  inline const ::Cmd::BlobVar& var() const;
  inline ::Cmd::BlobVar* mutable_var();
  inline ::Cmd::BlobVar* release_var();
  inline void set_allocated_var(::Cmd::BlobVar* var);

  // @@protoc_insertion_point(class_scope:Cmd.BlobGlobalTower)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_var();
  inline void clear_has_var();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::TowerInfo* info_;
  ::Cmd::BlobVar* var_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGlobalTower* default_instance_;
};
// -------------------------------------------------------------------

class GlobalSocialFocus : public ::google::protobuf::Message {
 public:
  GlobalSocialFocus();
  virtual ~GlobalSocialFocus();

  GlobalSocialFocus(const GlobalSocialFocus& from);

  inline GlobalSocialFocus& operator=(const GlobalSocialFocus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalSocialFocus& default_instance();

  void Swap(GlobalSocialFocus* other);

  // implements Message ----------------------------------------------

  GlobalSocialFocus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalSocialFocus& from);
  void MergeFrom(const GlobalSocialFocus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated uint64 guids = 2;
  inline int guids_size() const;
  inline void clear_guids();
  static const int kGuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 guids(int index) const;
  inline void set_guids(int index, ::google::protobuf::uint64 value);
  inline void add_guids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guids();

  // @@protoc_insertion_point(class_scope:Cmd.GlobalSocialFocus)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guids_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static GlobalSocialFocus* default_instance_;
};
// -------------------------------------------------------------------

class BlobGlobalSociality : public ::google::protobuf::Message {
 public:
  BlobGlobalSociality();
  virtual ~BlobGlobalSociality();

  BlobGlobalSociality(const BlobGlobalSociality& from);

  inline BlobGlobalSociality& operator=(const BlobGlobalSociality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGlobalSociality& default_instance();

  void Swap(BlobGlobalSociality* other);

  // implements Message ----------------------------------------------

  BlobGlobalSociality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGlobalSociality& from);
  void MergeFrom(const BlobGlobalSociality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 applys = 1;
  inline int applys_size() const;
  inline void clear_applys();
  static const int kApplysFieldNumber = 1;
  inline ::google::protobuf::uint64 applys(int index) const;
  inline void set_applys(int index, ::google::protobuf::uint64 value);
  inline void add_applys(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      applys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_applys();

  // repeated .Cmd.GlobalSocialFocus focuss = 2;
  inline int focuss_size() const;
  inline void clear_focuss();
  static const int kFocussFieldNumber = 2;
  inline const ::Cmd::GlobalSocialFocus& focuss(int index) const;
  inline ::Cmd::GlobalSocialFocus* mutable_focuss(int index);
  inline ::Cmd::GlobalSocialFocus* add_focuss();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GlobalSocialFocus >&
      focuss() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GlobalSocialFocus >*
      mutable_focuss();

  // @@protoc_insertion_point(class_scope:Cmd.BlobGlobalSociality)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > applys_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GlobalSocialFocus > focuss_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGlobalSociality* default_instance_;
};
// -------------------------------------------------------------------

class ChargeData : public ::google::protobuf::Message {
 public:
  ChargeData();
  virtual ~ChargeData();

  ChargeData(const ChargeData& from);

  inline ChargeData& operator=(const ChargeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeData& default_instance();

  void Swap(ChargeData* other);

  // implements Message ----------------------------------------------

  ChargeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeData& from);
  void MergeFrom(const ChargeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::uint64 money() const;
  inline void set_money(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ChargeData)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 money_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ChargeData* default_instance_;
};
// -------------------------------------------------------------------

class BlobDeposit : public ::google::protobuf::Message {
 public:
  BlobDeposit();
  virtual ~BlobDeposit();

  BlobDeposit(const BlobDeposit& from);

  inline BlobDeposit& operator=(const BlobDeposit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobDeposit& default_instance();

  void Swap(BlobDeposit* other);

  // implements Message ----------------------------------------------

  BlobDeposit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobDeposit& from);
  void MergeFrom(const BlobDeposit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.DepositTypeData typeDatas = 1;
  inline int typedatas_size() const;
  inline void clear_typedatas();
  static const int kTypeDatasFieldNumber = 1;
  inline const ::Cmd::DepositTypeData& typedatas(int index) const;
  inline ::Cmd::DepositTypeData* mutable_typedatas(int index);
  inline ::Cmd::DepositTypeData* add_typedatas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::DepositTypeData >&
      typedatas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::DepositTypeData >*
      mutable_typedatas();

  // repeated .Cmd.DepositCardData cardDatas = 2;
  inline int carddatas_size() const;
  inline void clear_carddatas();
  static const int kCardDatasFieldNumber = 2;
  inline const ::Cmd::DepositCardData& carddatas(int index) const;
  inline ::Cmd::DepositCardData* mutable_carddatas(int index);
  inline ::Cmd::DepositCardData* add_carddatas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::DepositCardData >&
      carddatas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::DepositCardData >*
      mutable_carddatas();

  // repeated .Cmd.ChargeData chargeDatas = 3;
  inline int chargedatas_size() const;
  inline void clear_chargedatas();
  static const int kChargeDatasFieldNumber = 3;
  inline const ::Cmd::ChargeData& chargedatas(int index) const;
  inline ::Cmd::ChargeData* mutable_chargedatas(int index);
  inline ::Cmd::ChargeData* add_chargedatas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChargeData >&
      chargedatas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChargeData >*
      mutable_chargedatas();

  // repeated uint32 usedcards = 4;
  inline int usedcards_size() const;
  inline void clear_usedcards();
  static const int kUsedcardsFieldNumber = 4;
  inline ::google::protobuf::uint32 usedcards(int index) const;
  inline void set_usedcards(int index, ::google::protobuf::uint32 value);
  inline void add_usedcards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      usedcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_usedcards();

  // optional bool hasquota = 5 [default = false];
  inline bool has_hasquota() const;
  inline void clear_hasquota();
  static const int kHasquotaFieldNumber = 5;
  inline bool hasquota() const;
  inline void set_hasquota(bool value);

  // repeated .Cmd.QuotaDetail quota_detail = 6;
  inline int quota_detail_size() const;
  inline void clear_quota_detail();
  static const int kQuotaDetailFieldNumber = 6;
  inline const ::Cmd::QuotaDetail& quota_detail(int index) const;
  inline ::Cmd::QuotaDetail* mutable_quota_detail(int index);
  inline ::Cmd::QuotaDetail* add_quota_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >&
      quota_detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >*
      mutable_quota_detail();

  // repeated .Cmd.QuotaLog quota_log = 7;
  inline int quota_log_size() const;
  inline void clear_quota_log();
  static const int kQuotaLogFieldNumber = 7;
  inline const ::Cmd::QuotaLog& quota_log(int index) const;
  inline ::Cmd::QuotaLog* mutable_quota_log(int index);
  inline ::Cmd::QuotaLog* add_quota_log();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >&
      quota_log() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >*
      mutable_quota_log();

  // optional bool getitem = 8 [default = false];
  inline bool has_getitem() const;
  inline void clear_getitem();
  static const int kGetitemFieldNumber = 8;
  inline bool getitem() const;
  inline void set_getitem(bool value);

  // optional uint64 quota_lock = 9 [default = 0];
  inline bool has_quota_lock() const;
  inline void clear_quota_lock();
  static const int kQuotaLockFieldNumber = 9;
  inline ::google::protobuf::uint64 quota_lock() const;
  inline void set_quota_lock(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobDeposit)
 private:
  inline void set_has_hasquota();
  inline void clear_has_hasquota();
  inline void set_has_getitem();
  inline void clear_has_getitem();
  inline void set_has_quota_lock();
  inline void clear_has_quota_lock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::DepositTypeData > typedatas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::DepositCardData > carddatas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ChargeData > chargedatas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > usedcards_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail > quota_detail_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog > quota_log_;
  ::google::protobuf::uint64 quota_lock_;
  bool hasquota_;
  bool getitem_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobDeposit* default_instance_;
};
// -------------------------------------------------------------------

class BlobTicketData : public ::google::protobuf::Message {
 public:
  BlobTicketData();
  virtual ~BlobTicketData();

  BlobTicketData(const BlobTicketData& from);

  inline BlobTicketData& operator=(const BlobTicketData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTicketData& default_instance();

  void Swap(BlobTicketData* other);

  // implements Message ----------------------------------------------

  BlobTicketData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTicketData& from);
  void MergeFrom(const BlobTicketData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ETicketType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::ETicketType type() const;
  inline void set_type(::Cmd::ETicketType value);

  // optional string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional .Cmd.ETicketRet ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::Cmd::ETicketRet ret() const;
  inline void set_ret(::Cmd::ETicketRet value);

  // optional uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobTicketData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  int type_;
  int ret_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTicketData* default_instance_;
};
// -------------------------------------------------------------------

class BlobTicketCacheCmd : public ::google::protobuf::Message {
 public:
  BlobTicketCacheCmd();
  virtual ~BlobTicketCacheCmd();

  BlobTicketCacheCmd(const BlobTicketCacheCmd& from);

  inline BlobTicketCacheCmd& operator=(const BlobTicketCacheCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTicketCacheCmd& default_instance();

  void Swap(BlobTicketCacheCmd* other);

  // implements Message ----------------------------------------------

  BlobTicketCacheCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTicketCacheCmd& from);
  void MergeFrom(const BlobTicketCacheCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ETicketCmdType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::ETicketCmdType type() const;
  inline void set_type(::Cmd::ETicketCmdType value);

  // optional string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobTicketCacheCmd)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  int type_;
  ::google::protobuf::uint32 len_;
  ::std::string* data_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTicketCacheCmd* default_instance_;
};
// -------------------------------------------------------------------

class BlobTicket : public ::google::protobuf::Message {
 public:
  BlobTicket();
  virtual ~BlobTicket();

  BlobTicket(const BlobTicket& from);

  inline BlobTicket& operator=(const BlobTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTicket& default_instance();

  void Swap(BlobTicket* other);

  // implements Message ----------------------------------------------

  BlobTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTicket& from);
  void MergeFrom(const BlobTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.BlobTicketData tickdata = 1;
  inline int tickdata_size() const;
  inline void clear_tickdata();
  static const int kTickdataFieldNumber = 1;
  inline const ::Cmd::BlobTicketData& tickdata(int index) const;
  inline ::Cmd::BlobTicketData* mutable_tickdata(int index);
  inline ::Cmd::BlobTicketData* add_tickdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketData >&
      tickdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketData >*
      mutable_tickdata();

  // repeated .Cmd.BlobTicketCacheCmd cache_cmds = 2;
  inline int cache_cmds_size() const;
  inline void clear_cache_cmds();
  static const int kCacheCmdsFieldNumber = 2;
  inline const ::Cmd::BlobTicketCacheCmd& cache_cmds(int index) const;
  inline ::Cmd::BlobTicketCacheCmd* mutable_cache_cmds(int index);
  inline ::Cmd::BlobTicketCacheCmd* add_cache_cmds();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketCacheCmd >&
      cache_cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketCacheCmd >*
      mutable_cache_cmds();

  // @@protoc_insertion_point(class_scope:Cmd.BlobTicket)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketData > tickdata_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketCacheCmd > cache_cmds_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTicket* default_instance_;
};
// -------------------------------------------------------------------

class BlobCredit : public ::google::protobuf::Message {
 public:
  BlobCredit();
  virtual ~BlobCredit();

  BlobCredit(const BlobCredit& from);

  inline BlobCredit& operator=(const BlobCredit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobCredit& default_instance();

  void Swap(BlobCredit* other);

  // implements Message ----------------------------------------------

  BlobCredit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobCredit& from);
  void MergeFrom(const BlobCredit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional int32 credit = 2 [default = 0];
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 2;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // optional uint32 monster_value = 3 [default = 0];
  inline bool has_monster_value() const;
  inline void clear_monster_value();
  static const int kMonsterValueFieldNumber = 3;
  inline ::google::protobuf::uint32 monster_value() const;
  inline void set_monster_value(::google::protobuf::uint32 value);

  // optional uint32 savedtime = 4 [default = 0];
  inline bool has_savedtime() const;
  inline void clear_savedtime();
  static const int kSavedtimeFieldNumber = 4;
  inline ::google::protobuf::uint32 savedtime() const;
  inline void set_savedtime(::google::protobuf::uint32 value);

  // optional uint32 forbidtime = 5 [default = 0];
  inline bool has_forbidtime() const;
  inline void clear_forbidtime();
  static const int kForbidtimeFieldNumber = 5;
  inline ::google::protobuf::uint32 forbidtime() const;
  inline void set_forbidtime(::google::protobuf::uint32 value);

  // optional uint32 auguryreward = 6 [default = 0];
  inline bool has_auguryreward() const;
  inline void clear_auguryreward();
  static const int kAuguryrewardFieldNumber = 6;
  inline ::google::protobuf::uint32 auguryreward() const;
  inline void set_auguryreward(::google::protobuf::uint32 value);

  // optional .Cmd.BlobShopGotItem shop = 7;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 7;
  inline const ::Cmd::BlobShopGotItem& shop() const;
  inline ::Cmd::BlobShopGotItem* mutable_shop();
  inline ::Cmd::BlobShopGotItem* release_shop();
  inline void set_allocated_shop(::Cmd::BlobShopGotItem* shop);

  // optional .Cmd.BlobAccVar var = 8;
  inline bool has_var() const;
  inline void clear_var();
  static const int kVarFieldNumber = 8;
  inline const ::Cmd::BlobAccVar& var() const;
  inline ::Cmd::BlobAccVar* mutable_var();
  inline ::Cmd::BlobAccVar* release_var();
  inline void set_allocated_var(::Cmd::BlobAccVar* var);

  // optional uint32 maxbaselv = 9 [default = 0];
  inline bool has_maxbaselv() const;
  inline void clear_maxbaselv();
  static const int kMaxbaselvFieldNumber = 9;
  inline ::google::protobuf::uint32 maxbaselv() const;
  inline void set_maxbaselv(::google::protobuf::uint32 value);

  // optional uint32 maxbaselv_resettime = 10 [default = 0];
  inline bool has_maxbaselv_resettime() const;
  inline void clear_maxbaselv_resettime();
  static const int kMaxbaselvResettimeFieldNumber = 10;
  inline ::google::protobuf::uint32 maxbaselv_resettime() const;
  inline void set_maxbaselv_resettime(::google::protobuf::uint32 value);

  // optional .Cmd.BlobActivityEvent acevent = 11;
  inline bool has_acevent() const;
  inline void clear_acevent();
  static const int kAceventFieldNumber = 11;
  inline const ::Cmd::BlobActivityEvent& acevent() const;
  inline ::Cmd::BlobActivityEvent* mutable_acevent();
  inline ::Cmd::BlobActivityEvent* release_acevent();
  inline void set_allocated_acevent(::Cmd::BlobActivityEvent* acevent);

  // @@protoc_insertion_point(class_scope:Cmd.BlobCredit)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_monster_value();
  inline void clear_has_monster_value();
  inline void set_has_savedtime();
  inline void clear_has_savedtime();
  inline void set_has_forbidtime();
  inline void clear_has_forbidtime();
  inline void set_has_auguryreward();
  inline void clear_has_auguryreward();
  inline void set_has_shop();
  inline void clear_has_shop();
  inline void set_has_var();
  inline void clear_has_var();
  inline void set_has_maxbaselv();
  inline void clear_has_maxbaselv();
  inline void set_has_maxbaselv_resettime();
  inline void clear_has_maxbaselv_resettime();
  inline void set_has_acevent();
  inline void clear_has_acevent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::uint32 monster_value_;
  ::google::protobuf::uint32 savedtime_;
  ::google::protobuf::uint32 forbidtime_;
  ::google::protobuf::uint32 auguryreward_;
  ::Cmd::BlobShopGotItem* shop_;
  ::Cmd::BlobAccVar* var_;
  ::google::protobuf::uint32 maxbaselv_;
  ::google::protobuf::uint32 maxbaselv_resettime_;
  ::Cmd::BlobActivityEvent* acevent_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobCredit* default_instance_;
};
// -------------------------------------------------------------------

class BlobNewCredit : public ::google::protobuf::Message {
 public:
  BlobNewCredit();
  virtual ~BlobNewCredit();

  BlobNewCredit(const BlobNewCredit& from);

  inline BlobNewCredit& operator=(const BlobNewCredit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobNewCredit& default_instance();

  void Swap(BlobNewCredit* other);

  // implements Message ----------------------------------------------

  BlobNewCredit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobNewCredit& from);
  void MergeFrom(const BlobNewCredit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional int32 credit = 2 [default = 0];
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 2;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // optional uint32 monster_value = 3 [default = 0];
  inline bool has_monster_value() const;
  inline void clear_monster_value();
  static const int kMonsterValueFieldNumber = 3;
  inline ::google::protobuf::uint32 monster_value() const;
  inline void set_monster_value(::google::protobuf::uint32 value);

  // optional uint32 savedtime = 4 [default = 0];
  inline bool has_savedtime() const;
  inline void clear_savedtime();
  static const int kSavedtimeFieldNumber = 4;
  inline ::google::protobuf::uint32 savedtime() const;
  inline void set_savedtime(::google::protobuf::uint32 value);

  // optional uint32 forbidtime = 5 [default = 0];
  inline bool has_forbidtime() const;
  inline void clear_forbidtime();
  static const int kForbidtimeFieldNumber = 5;
  inline ::google::protobuf::uint32 forbidtime() const;
  inline void set_forbidtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobNewCredit)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_monster_value();
  inline void clear_has_monster_value();
  inline void set_has_savedtime();
  inline void clear_has_savedtime();
  inline void set_has_forbidtime();
  inline void clear_has_forbidtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::uint32 monster_value_;
  ::google::protobuf::uint32 savedtime_;
  ::google::protobuf::uint32 forbidtime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobNewCredit* default_instance_;
};
// -------------------------------------------------------------------

class ChatCount : public ::google::protobuf::Message {
 public:
  ChatCount();
  virtual ~ChatCount();

  ChatCount(const ChatCount& from);

  inline ChatCount& operator=(const ChatCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatCount& default_instance();

  void Swap(ChatCount* other);

  // implements Message ----------------------------------------------

  ChatCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatCount& from);
  void MergeFrom(const ChatCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 targetid = 2 [default = 0];
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 2;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint32 to_chat = 3 [default = 0];
  inline bool has_to_chat() const;
  inline void clear_to_chat();
  static const int kToChatFieldNumber = 3;
  inline ::google::protobuf::uint32 to_chat() const;
  inline void set_to_chat(::google::protobuf::uint32 value);

  // optional uint32 from_chat = 4 [default = 0];
  inline bool has_from_chat() const;
  inline void clear_from_chat();
  static const int kFromChatFieldNumber = 4;
  inline ::google::protobuf::uint32 from_chat() const;
  inline void set_from_chat(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ChatCount)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_to_chat();
  inline void clear_has_to_chat();
  inline void set_has_from_chat();
  inline void clear_has_from_chat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 to_chat_;
  ::google::protobuf::uint32 from_chat_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatCount* default_instance_;
};
// -------------------------------------------------------------------

class ChatItem : public ::google::protobuf::Message {
 public:
  ChatItem();
  virtual ~ChatItem();

  ChatItem(const ChatItem& from);

  inline ChatItem& operator=(const ChatItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatItem& default_instance();

  void Swap(ChatItem* other);

  // implements Message ----------------------------------------------

  ChatItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatItem& from);
  void MergeFrom(const ChatItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 time = 2 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Cmd.ChatItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::std::string* msg_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobChat : public ::google::protobuf::Message {
 public:
  BlobChat();
  virtual ~BlobChat();

  BlobChat(const BlobChat& from);

  inline BlobChat& operator=(const BlobChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobChat& default_instance();

  void Swap(BlobChat* other);

  // implements Message ----------------------------------------------

  BlobChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobChat& from);
  void MergeFrom(const BlobChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.ChatCount counts = 1;
  inline int counts_size() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 1;
  inline const ::Cmd::ChatCount& counts(int index) const;
  inline ::Cmd::ChatCount* mutable_counts(int index);
  inline ::Cmd::ChatCount* add_counts();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatCount >&
      counts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatCount >*
      mutable_counts();

  // repeated uint64 savelist = 2;
  inline int savelist_size() const;
  inline void clear_savelist();
  static const int kSavelistFieldNumber = 2;
  inline ::google::protobuf::uint64 savelist(int index) const;
  inline void set_savelist(int index, ::google::protobuf::uint64 value);
  inline void add_savelist(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      savelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_savelist();

  // repeated .Cmd.ChatItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ChatItem& items(int index) const;
  inline ::Cmd::ChatItem* mutable_items(int index);
  inline ::Cmd::ChatItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.BlobChat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ChatCount > counts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > savelist_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem > items_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobChat* default_instance_;
};
// -------------------------------------------------------------------

class ActivityCommonData : public ::google::protobuf::Message {
 public:
  ActivityCommonData();
  virtual ~ActivityCommonData();

  ActivityCommonData(const ActivityCommonData& from);

  inline ActivityCommonData& operator=(const ActivityCommonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityCommonData& default_instance();

  void Swap(ActivityCommonData* other);

  // implements Message ----------------------------------------------

  ActivityCommonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityCommonData& from);
  void MergeFrom(const ActivityCommonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated uint32 params = 2;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline ::google::protobuf::uint32 params(int index) const;
  inline void set_params(int index, ::google::protobuf::uint32 value);
  inline void add_params(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:Cmd.ActivityCommonData)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > params_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ActivityCommonData* default_instance_;
};
// -------------------------------------------------------------------

class BlobActivity : public ::google::protobuf::Message {
 public:
  BlobActivity();
  virtual ~BlobActivity();

  BlobActivity(const BlobActivity& from);

  inline BlobActivity& operator=(const BlobActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobActivity& default_instance();

  void Swap(BlobActivity* other);

  // implements Message ----------------------------------------------

  BlobActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobActivity& from);
  void MergeFrom(const BlobActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.ActivityCommonData activitydatas = 2;
  inline int activitydatas_size() const;
  inline void clear_activitydatas();
  static const int kActivitydatasFieldNumber = 2;
  inline const ::Cmd::ActivityCommonData& activitydatas(int index) const;
  inline ::Cmd::ActivityCommonData* mutable_activitydatas(int index);
  inline ::Cmd::ActivityCommonData* add_activitydatas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityCommonData >&
      activitydatas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityCommonData >*
      mutable_activitydatas();

  // @@protoc_insertion_point(class_scope:Cmd.BlobActivity)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityCommonData > activitydatas_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobActivity* default_instance_;
};
// -------------------------------------------------------------------

class BlobRelation : public ::google::protobuf::Message {
 public:
  BlobRelation();
  virtual ~BlobRelation();

  BlobRelation(const BlobRelation& from);

  inline BlobRelation& operator=(const BlobRelation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobRelation& default_instance();

  void Swap(BlobRelation* other);

  // implements Message ----------------------------------------------

  BlobRelation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobRelation& from);
  void MergeFrom(const BlobRelation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated uint64 black = 2;
  inline int black_size() const;
  inline void clear_black();
  static const int kBlackFieldNumber = 2;
  inline ::google::protobuf::uint64 black(int index) const;
  inline void set_black(int index, ::google::protobuf::uint64 value);
  inline void add_black(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      black() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_black();

  // @@protoc_insertion_point(class_scope:Cmd.BlobRelation)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > black_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobRelation* default_instance_;
};
// -------------------------------------------------------------------

class ShareNormal : public ::google::protobuf::Message {
 public:
  ShareNormal();
  virtual ~ShareNormal();

  ShareNormal(const ShareNormal& from);

  inline ShareNormal& operator=(const ShareNormal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareNormal& default_instance();

  void Swap(ShareNormal* other);

  // implements Message ----------------------------------------------

  ShareNormal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareNormal& from);
  void MergeFrom(const ShareNormal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EShareDataType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EShareDataType type() const;
  inline void set_type(::Cmd::EShareDataType value);

  // optional uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShareNormal)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 value_;
  int type_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareNormal* default_instance_;
};
// -------------------------------------------------------------------

class ShareCalcItem : public ::google::protobuf::Message {
 public:
  ShareCalcItem();
  virtual ~ShareCalcItem();

  ShareCalcItem(const ShareCalcItem& from);

  inline ShareCalcItem& operator=(const ShareCalcItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareCalcItem& default_instance();

  void Swap(ShareCalcItem* other);

  // implements Message ----------------------------------------------

  ShareCalcItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareCalcItem& from);
  void MergeFrom(const ShareCalcItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 high_key = 1 [default = 0];
  inline bool has_high_key() const;
  inline void clear_high_key();
  static const int kHighKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 high_key() const;
  inline void set_high_key(::google::protobuf::uint32 value);

  // optional uint32 low_key = 2 [default = 0];
  inline bool has_low_key() const;
  inline void clear_low_key();
  static const int kLowKeyFieldNumber = 2;
  inline ::google::protobuf::uint32 low_key() const;
  inline void set_low_key(::google::protobuf::uint32 value);

  // optional uint32 high_value = 3 [default = 0];
  inline bool has_high_value() const;
  inline void clear_high_value();
  static const int kHighValueFieldNumber = 3;
  inline ::google::protobuf::uint32 high_value() const;
  inline void set_high_value(::google::protobuf::uint32 value);

  // optional uint32 low_value = 4 [default = 0];
  inline bool has_low_value() const;
  inline void clear_low_value();
  static const int kLowValueFieldNumber = 4;
  inline ::google::protobuf::uint32 low_value() const;
  inline void set_low_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShareCalcItem)
 private:
  inline void set_has_high_key();
  inline void clear_has_high_key();
  inline void set_has_low_key();
  inline void clear_has_low_key();
  inline void set_has_high_value();
  inline void clear_has_high_value();
  inline void set_has_low_value();
  inline void clear_has_low_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 high_key_;
  ::google::protobuf::uint32 low_key_;
  ::google::protobuf::uint32 high_value_;
  ::google::protobuf::uint32 low_value_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareCalcItem* default_instance_;
};
// -------------------------------------------------------------------

class ShareCalc : public ::google::protobuf::Message {
 public:
  ShareCalc();
  virtual ~ShareCalc();

  ShareCalc(const ShareCalc& from);

  inline ShareCalc& operator=(const ShareCalc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareCalc& default_instance();

  void Swap(ShareCalc* other);

  // implements Message ----------------------------------------------

  ShareCalc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareCalc& from);
  void MergeFrom(const ShareCalc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EShareDataType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EShareDataType type() const;
  inline void set_type(::Cmd::EShareDataType value);

  // repeated .Cmd.ShareCalcItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ShareCalcItem& items(int index) const;
  inline ::Cmd::ShareCalcItem* mutable_items(int index);
  inline ::Cmd::ShareCalcItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalcItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalcItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.ShareCalc)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalcItem > items_;
  int type_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareCalc* default_instance_;
};
// -------------------------------------------------------------------

class ShareFirstMvp : public ::google::protobuf::Message {
 public:
  ShareFirstMvp();
  virtual ~ShareFirstMvp();

  ShareFirstMvp(const ShareFirstMvp& from);

  inline ShareFirstMvp& operator=(const ShareFirstMvp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareFirstMvp& default_instance();

  void Swap(ShareFirstMvp* other);

  // implements Message ----------------------------------------------

  ShareFirstMvp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareFirstMvp& from);
  void MergeFrom(const ShareFirstMvp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mvpid = 2;
  inline bool has_mvpid() const;
  inline void clear_mvpid();
  static const int kMvpidFieldNumber = 2;
  inline ::google::protobuf::uint32 mvpid() const;
  inline void set_mvpid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShareFirstMvp)
 private:
  inline void set_has_mvpid();
  inline void clear_has_mvpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mvpid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareFirstMvp* default_instance_;
};
// -------------------------------------------------------------------

class ShareFirstHand : public ::google::protobuf::Message {
 public:
  ShareFirstHand();
  virtual ~ShareFirstHand();

  ShareFirstHand(const ShareFirstHand& from);

  inline ShareFirstHand& operator=(const ShareFirstHand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareFirstHand& default_instance();

  void Swap(ShareFirstHand* other);

  // implements Message ----------------------------------------------

  ShareFirstHand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareFirstHand& from);
  void MergeFrom(const ShareFirstHand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 otherid = 1;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 1;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShareFirstHand)
 private:
  inline void set_has_otherid();
  inline void clear_has_otherid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 otherid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareFirstHand* default_instance_;
};
// -------------------------------------------------------------------

class ShareFirstCarrier : public ::google::protobuf::Message {
 public:
  ShareFirstCarrier();
  virtual ~ShareFirstCarrier();

  ShareFirstCarrier(const ShareFirstCarrier& from);

  inline ShareFirstCarrier& operator=(const ShareFirstCarrier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareFirstCarrier& default_instance();

  void Swap(ShareFirstCarrier* other);

  // implements Message ----------------------------------------------

  ShareFirstCarrier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareFirstCarrier& from);
  void MergeFrom(const ShareFirstCarrier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 otherid = 1;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtheridFieldNumber = 1;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShareFirstCarrier)
 private:
  inline void set_has_otherid();
  inline void clear_has_otherid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 otherid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareFirstCarrier* default_instance_;
};
// -------------------------------------------------------------------

class ShareTrade : public ::google::protobuf::Message {
 public:
  ShareTrade();
  virtual ~ShareTrade();

  ShareTrade(const ShareTrade& from);

  inline ShareTrade& operator=(const ShareTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareTrade& default_instance();

  void Swap(ShareTrade* other);

  // implements Message ----------------------------------------------

  ShareTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareTrade& from);
  void MergeFrom(const ShareTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 total_price = 2;
  inline bool has_total_price() const;
  inline void clear_total_price();
  static const int kTotalPriceFieldNumber = 2;
  inline ::google::protobuf::uint64 total_price() const;
  inline void set_total_price(::google::protobuf::uint64 value);

  // optional uint32 refine_lv = 3;
  inline bool has_refine_lv() const;
  inline void clear_refine_lv();
  static const int kRefineLvFieldNumber = 3;
  inline ::google::protobuf::uint32 refine_lv() const;
  inline void set_refine_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShareTrade)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_total_price();
  inline void clear_has_total_price();
  inline void set_has_refine_lv();
  inline void clear_has_refine_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 total_price_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 refine_lv_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareTrade* default_instance_;
};
// -------------------------------------------------------------------

class ShareDamage : public ::google::protobuf::Message {
 public:
  ShareDamage();
  virtual ~ShareDamage();

  ShareDamage(const ShareDamage& from);

  inline ShareDamage& operator=(const ShareDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareDamage& default_instance();

  void Swap(ShareDamage* other);

  // implements Message ----------------------------------------------

  ShareDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareDamage& from);
  void MergeFrom(const ShareDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 damage = 1;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 1;
  inline ::google::protobuf::uint64 damage() const;
  inline void set_damage(::google::protobuf::uint64 value);

  // optional string target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // @@protoc_insertion_point(class_scope:Cmd.ShareDamage)
 private:
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_target();
  inline void clear_has_target();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 damage_;
  ::std::string* target_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ShareDamage* default_instance_;
};
// -------------------------------------------------------------------

class BlobShare : public ::google::protobuf::Message {
 public:
  BlobShare();
  virtual ~BlobShare();

  BlobShare(const BlobShare& from);

  inline BlobShare& operator=(const BlobShare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShare& default_instance();

  void Swap(BlobShare* other);

  // implements Message ----------------------------------------------

  BlobShare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShare& from);
  void MergeFrom(const BlobShare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.ShareNormal normaldata = 1;
  inline int normaldata_size() const;
  inline void clear_normaldata();
  static const int kNormaldataFieldNumber = 1;
  inline const ::Cmd::ShareNormal& normaldata(int index) const;
  inline ::Cmd::ShareNormal* mutable_normaldata(int index);
  inline ::Cmd::ShareNormal* add_normaldata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShareNormal >&
      normaldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShareNormal >*
      mutable_normaldata();

  // repeated .Cmd.ShareCalc calcdata = 2;
  inline int calcdata_size() const;
  inline void clear_calcdata();
  static const int kCalcdataFieldNumber = 2;
  inline const ::Cmd::ShareCalc& calcdata(int index) const;
  inline ::Cmd::ShareCalc* mutable_calcdata(int index);
  inline ::Cmd::ShareCalc* add_calcdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalc >&
      calcdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalc >*
      mutable_calcdata();

  // optional .Cmd.ShareFirstMvp firstmvp = 3;
  inline bool has_firstmvp() const;
  inline void clear_firstmvp();
  static const int kFirstmvpFieldNumber = 3;
  inline const ::Cmd::ShareFirstMvp& firstmvp() const;
  inline ::Cmd::ShareFirstMvp* mutable_firstmvp();
  inline ::Cmd::ShareFirstMvp* release_firstmvp();
  inline void set_allocated_firstmvp(::Cmd::ShareFirstMvp* firstmvp);

  // optional string firstphoto = 4;
  inline bool has_firstphoto() const;
  inline void clear_firstphoto();
  static const int kFirstphotoFieldNumber = 4;
  inline const ::std::string& firstphoto() const;
  inline void set_firstphoto(const ::std::string& value);
  inline void set_firstphoto(const char* value);
  inline void set_firstphoto(const char* value, size_t size);
  inline ::std::string* mutable_firstphoto();
  inline ::std::string* release_firstphoto();
  inline void set_allocated_firstphoto(::std::string* firstphoto);

  // optional .Cmd.ShareFirstHand firsthand = 5;
  inline bool has_firsthand() const;
  inline void clear_firsthand();
  static const int kFirsthandFieldNumber = 5;
  inline const ::Cmd::ShareFirstHand& firsthand() const;
  inline ::Cmd::ShareFirstHand* mutable_firsthand();
  inline ::Cmd::ShareFirstHand* release_firsthand();
  inline void set_allocated_firsthand(::Cmd::ShareFirstHand* firsthand);

  // optional .Cmd.ShareFirstCarrier firstcarrier = 6;
  inline bool has_firstcarrier() const;
  inline void clear_firstcarrier();
  static const int kFirstcarrierFieldNumber = 6;
  inline const ::Cmd::ShareFirstCarrier& firstcarrier() const;
  inline ::Cmd::ShareFirstCarrier* mutable_firstcarrier();
  inline ::Cmd::ShareFirstCarrier* release_firstcarrier();
  inline void set_allocated_firstcarrier(::Cmd::ShareFirstCarrier* firstcarrier);

  // optional .Cmd.ShareTrade tradebuy = 7;
  inline bool has_tradebuy() const;
  inline void clear_tradebuy();
  static const int kTradebuyFieldNumber = 7;
  inline const ::Cmd::ShareTrade& tradebuy() const;
  inline ::Cmd::ShareTrade* mutable_tradebuy();
  inline ::Cmd::ShareTrade* release_tradebuy();
  inline void set_allocated_tradebuy(::Cmd::ShareTrade* tradebuy);

  // optional .Cmd.ShareTrade tradesell = 8;
  inline bool has_tradesell() const;
  inline void clear_tradesell();
  static const int kTradesellFieldNumber = 8;
  inline const ::Cmd::ShareTrade& tradesell() const;
  inline ::Cmd::ShareTrade* mutable_tradesell();
  inline ::Cmd::ShareTrade* release_tradesell();
  inline void set_allocated_tradesell(::Cmd::ShareTrade* tradesell);

  // optional .Cmd.ShareDamage maxdamage = 9;
  inline bool has_maxdamage() const;
  inline void clear_maxdamage();
  static const int kMaxdamageFieldNumber = 9;
  inline const ::Cmd::ShareDamage& maxdamage() const;
  inline ::Cmd::ShareDamage* mutable_maxdamage();
  inline ::Cmd::ShareDamage* release_maxdamage();
  inline void set_allocated_maxdamage(::Cmd::ShareDamage* maxdamage);

  // repeated uint32 mystery_box = 10;
  inline int mystery_box_size() const;
  inline void clear_mystery_box();
  static const int kMysteryBoxFieldNumber = 10;
  inline ::google::protobuf::uint32 mystery_box(int index) const;
  inline void set_mystery_box(int index, ::google::protobuf::uint32 value);
  inline void add_mystery_box(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mystery_box() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mystery_box();

  // @@protoc_insertion_point(class_scope:Cmd.BlobShare)
 private:
  inline void set_has_firstmvp();
  inline void clear_has_firstmvp();
  inline void set_has_firstphoto();
  inline void clear_has_firstphoto();
  inline void set_has_firsthand();
  inline void clear_has_firsthand();
  inline void set_has_firstcarrier();
  inline void clear_has_firstcarrier();
  inline void set_has_tradebuy();
  inline void clear_has_tradebuy();
  inline void set_has_tradesell();
  inline void clear_has_tradesell();
  inline void set_has_maxdamage();
  inline void clear_has_maxdamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShareNormal > normaldata_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalc > calcdata_;
  ::Cmd::ShareFirstMvp* firstmvp_;
  ::std::string* firstphoto_;
  ::Cmd::ShareFirstHand* firsthand_;
  ::Cmd::ShareFirstCarrier* firstcarrier_;
  ::Cmd::ShareTrade* tradebuy_;
  ::Cmd::ShareTrade* tradesell_;
  ::Cmd::ShareDamage* maxdamage_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mystery_box_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobShare* default_instance_;
};
// -------------------------------------------------------------------

class AchieveDBItem : public ::google::protobuf::Message {
 public:
  AchieveDBItem();
  virtual ~AchieveDBItem();

  AchieveDBItem(const AchieveDBItem& from);

  inline AchieveDBItem& operator=(const AchieveDBItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveDBItem& default_instance();

  void Swap(AchieveDBItem* other);

  // implements Message ----------------------------------------------

  AchieveDBItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveDBItem& from);
  void MergeFrom(const AchieveDBItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 process = 2 [default = 0];
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 2;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // optional uint32 finishtime = 3 [default = 0];
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // optional bool reward_get = 4 [default = false];
  inline bool has_reward_get() const;
  inline void clear_reward_get();
  static const int kRewardGetFieldNumber = 4;
  inline bool reward_get() const;
  inline void set_reward_get(bool value);

  // repeated uint64 params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline ::google::protobuf::uint64 params(int index) const;
  inline void set_params(int index, ::google::protobuf::uint64 value);
  inline void add_params(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:Cmd.AchieveDBItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();
  inline void set_has_reward_get();
  inline void clear_has_reward_get();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 process_;
  ::google::protobuf::uint32 finishtime_;
  bool reward_get_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > params_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static AchieveDBItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobAchieve : public ::google::protobuf::Message {
 public:
  BlobAchieve();
  virtual ~BlobAchieve();

  BlobAchieve(const BlobAchieve& from);

  inline BlobAchieve& operator=(const BlobAchieve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAchieve& default_instance();

  void Swap(BlobAchieve* other);

  // implements Message ----------------------------------------------

  BlobAchieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAchieve& from);
  void MergeFrom(const BlobAchieve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.AchieveData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Cmd::AchieveData& data(int index) const;
  inline ::Cmd::AchieveData* mutable_data(int index);
  inline ::Cmd::AchieveData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveData >*
      mutable_data();

  // repeated .Cmd.MaxInfo max_cache = 2;
  inline int max_cache_size() const;
  inline void clear_max_cache();
  static const int kMaxCacheFieldNumber = 2;
  inline const ::Cmd::MaxInfo& max_cache(int index) const;
  inline ::Cmd::MaxInfo* mutable_max_cache(int index);
  inline ::Cmd::MaxInfo* add_max_cache();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MaxInfo >&
      max_cache() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MaxInfo >*
      mutable_max_cache();

  // optional uint32 version = 3 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .Cmd.AchieveDBItem items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::Cmd::AchieveDBItem& items(int index) const;
  inline ::Cmd::AchieveDBItem* mutable_items(int index);
  inline ::Cmd::AchieveDBItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveDBItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveDBItem >*
      mutable_items();

  // optional uint32 char_version = 5 [default = 0];
  inline bool has_char_version() const;
  inline void clear_char_version();
  static const int kCharVersionFieldNumber = 5;
  inline ::google::protobuf::uint32 char_version() const;
  inline void set_char_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobAchieve)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_char_version();
  inline void clear_has_char_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveData > data_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MaxInfo > max_cache_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveDBItem > items_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 char_version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAchieve* default_instance_;
};
// -------------------------------------------------------------------

class BlobAuthorize : public ::google::protobuf::Message {
 public:
  BlobAuthorize();
  virtual ~BlobAuthorize();

  BlobAuthorize(const BlobAuthorize& from);

  inline BlobAuthorize& operator=(const BlobAuthorize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAuthorize& default_instance();

  void Swap(BlobAuthorize* other);

  // implements Message ----------------------------------------------

  BlobAuthorize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAuthorize& from);
  void MergeFrom(const BlobAuthorize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string password = 1;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 1;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint32 resettime = 2;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResettimeFieldNumber = 2;
  inline ::google::protobuf::uint32 resettime() const;
  inline void set_resettime(::google::protobuf::uint32 value);

  // optional uint32 inputtime = 3;
  inline bool has_inputtime() const;
  inline void clear_inputtime();
  static const int kInputtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 inputtime() const;
  inline void set_inputtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobAuthorize)
 private:
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_inputtime();
  inline void clear_has_inputtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* password_;
  ::google::protobuf::uint32 resettime_;
  ::google::protobuf::uint32 inputtime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAuthorize* default_instance_;
};
// -------------------------------------------------------------------

class GuildRaid : public ::google::protobuf::Message {
 public:
  GuildRaid();
  virtual ~GuildRaid();

  GuildRaid(const GuildRaid& from);

  inline GuildRaid& operator=(const GuildRaid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRaid& default_instance();

  void Swap(GuildRaid* other);

  // implements Message ----------------------------------------------

  GuildRaid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRaid& from);
  void MergeFrom(const GuildRaid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 npcid = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 1;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional .Cmd.EGuildGateState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::Cmd::EGuildGateState state() const;
  inline void set_state(::Cmd::EGuildGateState value);

  // repeated uint32 killedboss = 3;
  inline int killedboss_size() const;
  inline void clear_killedboss();
  static const int kKilledbossFieldNumber = 3;
  inline ::google::protobuf::uint32 killedboss(int index) const;
  inline void set_killedboss(int index, ::google::protobuf::uint32 value);
  inline void add_killedboss(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      killedboss() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_killedboss();

  // @@protoc_insertion_point(class_scope:Cmd.GuildRaid)
 private:
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > killedboss_;
  int state_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static GuildRaid* default_instance_;
};
// -------------------------------------------------------------------

class BlobGuildRaid : public ::google::protobuf::Message {
 public:
  BlobGuildRaid();
  virtual ~BlobGuildRaid();

  BlobGuildRaid(const BlobGuildRaid& from);

  inline BlobGuildRaid& operator=(const BlobGuildRaid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGuildRaid& default_instance();

  void Swap(BlobGuildRaid* other);

  // implements Message ----------------------------------------------

  BlobGuildRaid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGuildRaid& from);
  void MergeFrom(const BlobGuildRaid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.GuildRaid raid = 1;
  inline int raid_size() const;
  inline void clear_raid();
  static const int kRaidFieldNumber = 1;
  inline const ::Cmd::GuildRaid& raid(int index) const;
  inline ::Cmd::GuildRaid* mutable_raid(int index);
  inline ::Cmd::GuildRaid* add_raid();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildRaid >&
      raid() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildRaid >*
      mutable_raid();

  // optional uint32 raidversion = 2;
  inline bool has_raidversion() const;
  inline void clear_raidversion();
  static const int kRaidversionFieldNumber = 2;
  inline ::google::protobuf::uint32 raidversion() const;
  inline void set_raidversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobGuildRaid)
 private:
  inline void set_has_raidversion();
  inline void clear_has_raidversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GuildRaid > raid_;
  ::google::protobuf::uint32 raidversion_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGuildRaid* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeStarData : public ::google::protobuf::Message {
 public:
  AstrolabeStarData();
  virtual ~AstrolabeStarData();

  AstrolabeStarData(const AstrolabeStarData& from);

  inline AstrolabeStarData& operator=(const AstrolabeStarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeStarData& default_instance();

  void Swap(AstrolabeStarData* other);

  // implements Message ----------------------------------------------

  AstrolabeStarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeStarData& from);
  void MergeFrom(const AstrolabeStarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeStarData)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeStarData* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeData : public ::google::protobuf::Message {
 public:
  AstrolabeData();
  virtual ~AstrolabeData();

  AstrolabeData(const AstrolabeData& from);

  inline AstrolabeData& operator=(const AstrolabeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeData& default_instance();

  void Swap(AstrolabeData* other);

  // implements Message ----------------------------------------------

  AstrolabeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeData& from);
  void MergeFrom(const AstrolabeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .Cmd.AstrolabeStarData stars = 2;
  inline int stars_size() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 2;
  inline const ::Cmd::AstrolabeStarData& stars(int index) const;
  inline ::Cmd::AstrolabeStarData* mutable_stars(int index);
  inline ::Cmd::AstrolabeStarData* add_stars();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeStarData >&
      stars() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeStarData >*
      mutable_stars();

  // repeated .Cmd.AstrolabeCostData costs = 3;
  inline int costs_size() const;
  inline void clear_costs();
  static const int kCostsFieldNumber = 3;
  inline const ::Cmd::AstrolabeCostData& costs(int index) const;
  inline ::Cmd::AstrolabeCostData* mutable_costs(int index);
  inline ::Cmd::AstrolabeCostData* add_costs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >&
      costs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >*
      mutable_costs();

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeData)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeStarData > stars_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData > costs_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeData* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeMainData : public ::google::protobuf::Message {
 public:
  AstrolabeMainData();
  virtual ~AstrolabeMainData();

  AstrolabeMainData(const AstrolabeMainData& from);

  inline AstrolabeMainData& operator=(const AstrolabeMainData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeMainData& default_instance();

  void Swap(AstrolabeMainData* other);

  // implements Message ----------------------------------------------

  AstrolabeMainData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeMainData& from);
  void MergeFrom(const AstrolabeMainData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EAstrolabeType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EAstrolabeType type() const;
  inline void set_type(::Cmd::EAstrolabeType value);

  // repeated .Cmd.AstrolabeData astrolabes = 2;
  inline int astrolabes_size() const;
  inline void clear_astrolabes();
  static const int kAstrolabesFieldNumber = 2;
  inline const ::Cmd::AstrolabeData& astrolabes(int index) const;
  inline ::Cmd::AstrolabeData* mutable_astrolabes(int index);
  inline ::Cmd::AstrolabeData* add_astrolabes();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeData >&
      astrolabes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeData >*
      mutable_astrolabes();

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeMainData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeData > astrolabes_;
  int type_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeMainData* default_instance_;
};
// -------------------------------------------------------------------

class BlobAstrolabe : public ::google::protobuf::Message {
 public:
  BlobAstrolabe();
  virtual ~BlobAstrolabe();

  BlobAstrolabe(const BlobAstrolabe& from);

  inline BlobAstrolabe& operator=(const BlobAstrolabe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobAstrolabe& default_instance();

  void Swap(BlobAstrolabe* other);

  // implements Message ----------------------------------------------

  BlobAstrolabe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobAstrolabe& from);
  void MergeFrom(const BlobAstrolabe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.AstrolabeMainData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::AstrolabeMainData& datas(int index) const;
  inline ::Cmd::AstrolabeMainData* mutable_datas(int index);
  inline ::Cmd::AstrolabeMainData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeMainData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeMainData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.BlobAstrolabe)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeMainData > datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobAstrolabe* default_instance_;
};
// -------------------------------------------------------------------

class PetAdventureDBItem : public ::google::protobuf::Message {
 public:
  PetAdventureDBItem();
  virtual ~PetAdventureDBItem();

  PetAdventureDBItem(const PetAdventureDBItem& from);

  inline PetAdventureDBItem& operator=(const PetAdventureDBItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetAdventureDBItem& default_instance();

  void Swap(PetAdventureDBItem* other);

  // implements Message ----------------------------------------------

  PetAdventureDBItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetAdventureDBItem& from);
  void MergeFrom(const PetAdventureDBItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 starttime = 2 [default = 0];
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 2;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::Cmd::EPetAdventureStatus status() const;
  inline void set_status(::Cmd::EPetAdventureStatus value);

  // repeated .Cmd.ItemData eggs = 4;
  inline int eggs_size() const;
  inline void clear_eggs();
  static const int kEggsFieldNumber = 4;
  inline const ::Cmd::ItemData& eggs(int index) const;
  inline ::Cmd::ItemData* mutable_eggs(int index);
  inline ::Cmd::ItemData* add_eggs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      eggs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_eggs();

  // repeated .Cmd.PetAdventureStep steps = 5;
  inline int steps_size() const;
  inline void clear_steps();
  static const int kStepsFieldNumber = 5;
  inline const ::Cmd::PetAdventureStep& steps(int index) const;
  inline ::Cmd::PetAdventureStep* mutable_steps(int index);
  inline ::Cmd::PetAdventureStep* add_steps();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureStep >&
      steps() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureStep >*
      mutable_steps();

  // repeated .Cmd.ItemData raresreward = 6;
  inline int raresreward_size() const;
  inline void clear_raresreward();
  static const int kRaresrewardFieldNumber = 6;
  inline const ::Cmd::ItemData& raresreward(int index) const;
  inline ::Cmd::ItemData* mutable_raresreward(int index);
  inline ::Cmd::ItemData* add_raresreward();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      raresreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_raresreward();

  // optional uint32 specid = 7 [default = 0];
  inline bool has_specid() const;
  inline void clear_specid();
  static const int kSpecidFieldNumber = 7;
  inline ::google::protobuf::uint32 specid() const;
  inline void set_specid(::google::protobuf::uint32 value);

  // repeated .Cmd.PetEfficiencyInfo eff = 8;
  inline int eff_size() const;
  inline void clear_eff();
  static const int kEffFieldNumber = 8;
  inline const ::Cmd::PetEfficiencyInfo& eff(int index) const;
  inline ::Cmd::PetEfficiencyInfo* mutable_eff(int index);
  inline ::Cmd::PetEfficiencyInfo* add_eff();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetEfficiencyInfo >&
      eff() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetEfficiencyInfo >*
      mutable_eff();

  // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
  inline int rewardinfo_size() const;
  inline void clear_rewardinfo();
  static const int kRewardinfoFieldNumber = 9;
  inline const ::Cmd::PetMonsterRewardInfo& rewardinfo(int index) const;
  inline ::Cmd::PetMonsterRewardInfo* mutable_rewardinfo(int index);
  inline ::Cmd::PetMonsterRewardInfo* add_rewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetMonsterRewardInfo >&
      rewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetMonsterRewardInfo >*
      mutable_rewardinfo();

  // repeated .Cmd.ItemData extrarewardinfo = 10;
  inline int extrarewardinfo_size() const;
  inline void clear_extrarewardinfo();
  static const int kExtrarewardinfoFieldNumber = 10;
  inline const ::Cmd::ItemData& extrarewardinfo(int index) const;
  inline ::Cmd::ItemData* mutable_extrarewardinfo(int index);
  inline ::Cmd::ItemData* add_extrarewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      extrarewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_extrarewardinfo();

  // @@protoc_insertion_point(class_scope:Cmd.PetAdventureDBItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_specid();
  inline void clear_has_specid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > eggs_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureStep > steps_;
  int status_;
  ::google::protobuf::uint32 specid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > raresreward_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetEfficiencyInfo > eff_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetMonsterRewardInfo > rewardinfo_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > extrarewardinfo_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static PetAdventureDBItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobPetAdventure : public ::google::protobuf::Message {
 public:
  BlobPetAdventure();
  virtual ~BlobPetAdventure();

  BlobPetAdventure(const BlobPetAdventure& from);

  inline BlobPetAdventure& operator=(const BlobPetAdventure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobPetAdventure& default_instance();

  void Swap(BlobPetAdventure* other);

  // implements Message ----------------------------------------------

  BlobPetAdventure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobPetAdventure& from);
  void MergeFrom(const BlobPetAdventure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.PetAdventureDBItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::PetAdventureDBItem& items(int index) const;
  inline ::Cmd::PetAdventureDBItem* mutable_items(int index);
  inline ::Cmd::PetAdventureDBItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureDBItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureDBItem >*
      mutable_items();

  // repeated uint32 unlockarea = 2;
  inline int unlockarea_size() const;
  inline void clear_unlockarea();
  static const int kUnlockareaFieldNumber = 2;
  inline ::google::protobuf::uint32 unlockarea(int index) const;
  inline void set_unlockarea(int index, ::google::protobuf::uint32 value);
  inline void add_unlockarea(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlockarea() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlockarea();

  // optional uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobPetAdventure)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureDBItem > items_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlockarea_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobPetAdventure* default_instance_;
};
// -------------------------------------------------------------------

class BlobPetWork : public ::google::protobuf::Message {
 public:
  BlobPetWork();
  virtual ~BlobPetWork();

  BlobPetWork(const BlobPetWork& from);

  inline BlobPetWork& operator=(const BlobPetWork& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobPetWork& default_instance();

  void Swap(BlobPetWork* other);

  // implements Message ----------------------------------------------

  BlobPetWork* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobPetWork& from);
  void MergeFrom(const BlobPetWork& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.WorkManual manual = 1;
  inline bool has_manual() const;
  inline void clear_manual();
  static const int kManualFieldNumber = 1;
  inline const ::Cmd::WorkManual& manual() const;
  inline ::Cmd::WorkManual* mutable_manual();
  inline ::Cmd::WorkManual* release_manual();
  inline void set_allocated_manual(::Cmd::WorkManual* manual);

  // repeated .Cmd.WorkSpace datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::WorkSpace& datas(int index) const;
  inline ::Cmd::WorkSpace* mutable_datas(int index);
  inline ::Cmd::WorkSpace* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorkSpace >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorkSpace >*
      mutable_datas();

  // repeated .Cmd.WorkPetExtra pets = 3;
  inline int pets_size() const;
  inline void clear_pets();
  static const int kPetsFieldNumber = 3;
  inline const ::Cmd::WorkPetExtra& pets(int index) const;
  inline ::Cmd::WorkPetExtra* mutable_pets(int index);
  inline ::Cmd::WorkPetExtra* add_pets();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorkPetExtra >&
      pets() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorkPetExtra >*
      mutable_pets();

  // repeated .Cmd.WorkDayReward rewards = 5;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 5;
  inline const ::Cmd::WorkDayReward& rewards(int index) const;
  inline ::Cmd::WorkDayReward* mutable_rewards(int index);
  inline ::Cmd::WorkDayReward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorkDayReward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorkDayReward >*
      mutable_rewards();

  // optional uint32 card_expiretime = 4 [default = 0];
  inline bool has_card_expiretime() const;
  inline void clear_card_expiretime();
  static const int kCardExpiretimeFieldNumber = 4;
  inline ::google::protobuf::uint32 card_expiretime() const;
  inline void set_card_expiretime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobPetWork)
 private:
  inline void set_has_manual();
  inline void clear_has_manual();
  inline void set_has_card_expiretime();
  inline void clear_has_card_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::WorkManual* manual_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WorkSpace > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WorkPetExtra > pets_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WorkDayReward > rewards_;
  ::google::protobuf::uint32 card_expiretime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobPetWork* default_instance_;
};
// -------------------------------------------------------------------

class BlobEye : public ::google::protobuf::Message {
 public:
  BlobEye();
  virtual ~BlobEye();

  BlobEye(const BlobEye& from);

  inline BlobEye& operator=(const BlobEye& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobEye& default_instance();

  void Swap(BlobEye* other);

  // implements Message ----------------------------------------------

  BlobEye* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobEye& from);
  void MergeFrom(const BlobEye& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 curid = 1 [default = 0];
  inline bool has_curid() const;
  inline void clear_curid();
  static const int kCuridFieldNumber = 1;
  inline ::google::protobuf::uint32 curid() const;
  inline void set_curid(::google::protobuf::uint32 value);

  // repeated uint32 unlockids = 2;
  inline int unlockids_size() const;
  inline void clear_unlockids();
  static const int kUnlockidsFieldNumber = 2;
  inline ::google::protobuf::uint32 unlockids(int index) const;
  inline void set_unlockids(int index, ::google::protobuf::uint32 value);
  inline void add_unlockids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlockids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlockids();

  // @@protoc_insertion_point(class_scope:Cmd.BlobEye)
 private:
  inline void set_has_curid();
  inline void clear_has_curid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlockids_;
  ::google::protobuf::uint32 curid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobEye* default_instance_;
};
// -------------------------------------------------------------------

class BlobTutorTask : public ::google::protobuf::Message {
 public:
  BlobTutorTask();
  virtual ~BlobTutorTask();

  BlobTutorTask(const BlobTutorTask& from);

  inline BlobTutorTask& operator=(const BlobTutorTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobTutorTask& default_instance();

  void Swap(BlobTutorTask* other);

  // implements Message ----------------------------------------------

  BlobTutorTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobTutorTask& from);
  void MergeFrom(const BlobTutorTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.TutorTaskItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::TutorTaskItem& items(int index) const;
  inline ::Cmd::TutorTaskItem* mutable_items(int index);
  inline ::Cmd::TutorTaskItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TutorTaskItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TutorTaskItem >*
      mutable_items();

  // optional uint32 proficiency = 2 [default = 0];
  inline bool has_proficiency() const;
  inline void clear_proficiency();
  static const int kProficiencyFieldNumber = 2;
  inline ::google::protobuf::uint32 proficiency() const;
  inline void set_proficiency(::google::protobuf::uint32 value);

  // repeated .Cmd.TutorReward tutorrewards = 3;
  inline int tutorrewards_size() const;
  inline void clear_tutorrewards();
  static const int kTutorrewardsFieldNumber = 3;
  inline const ::Cmd::TutorReward& tutorrewards(int index) const;
  inline ::Cmd::TutorReward* mutable_tutorrewards(int index);
  inline ::Cmd::TutorReward* add_tutorrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TutorReward >&
      tutorrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TutorReward >*
      mutable_tutorrewards();

  // repeated uint64 growreward = 4;
  inline int growreward_size() const;
  inline void clear_growreward();
  static const int kGrowrewardFieldNumber = 4;
  inline ::google::protobuf::uint64 growreward(int index) const;
  inline void set_growreward(int index, ::google::protobuf::uint64 value);
  inline void add_growreward(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      growreward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_growreward();

  // repeated uint64 tutorgrowreward = 5;
  inline int tutorgrowreward_size() const;
  inline void clear_tutorgrowreward();
  static const int kTutorgrowrewardFieldNumber = 5;
  inline ::google::protobuf::uint64 tutorgrowreward(int index) const;
  inline void set_tutorgrowreward(int index, ::google::protobuf::uint64 value);
  inline void add_tutorgrowreward(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tutorgrowreward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tutorgrowreward();

  // optional uint32 growrewardlv = 6 [default = 0];
  inline bool has_growrewardlv() const;
  inline void clear_growrewardlv();
  static const int kGrowrewardlvFieldNumber = 6;
  inline ::google::protobuf::uint32 growrewardlv() const;
  inline void set_growrewardlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobTutorTask)
 private:
  inline void set_has_proficiency();
  inline void clear_has_proficiency();
  inline void set_has_growrewardlv();
  inline void clear_has_growrewardlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TutorTaskItem > items_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TutorReward > tutorrewards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > growreward_;
  ::google::protobuf::uint32 proficiency_;
  ::google::protobuf::uint32 growrewardlv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tutorgrowreward_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobTutorTask* default_instance_;
};
// -------------------------------------------------------------------

class BlobActivityEvent : public ::google::protobuf::Message {
 public:
  BlobActivityEvent();
  virtual ~BlobActivityEvent();

  BlobActivityEvent(const BlobActivityEvent& from);

  inline BlobActivityEvent& operator=(const BlobActivityEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobActivityEvent& default_instance();

  void Swap(BlobActivityEvent* other);

  // implements Message ----------------------------------------------

  BlobActivityEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobActivityEvent& from);
  void MergeFrom(const BlobActivityEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.AERewardItem rewarditems = 1;
  inline int rewarditems_size() const;
  inline void clear_rewarditems();
  static const int kRewarditemsFieldNumber = 1;
  inline const ::Cmd::AERewardItem& rewarditems(int index) const;
  inline ::Cmd::AERewardItem* mutable_rewarditems(int index);
  inline ::Cmd::AERewardItem* add_rewarditems();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AERewardItem >&
      rewarditems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AERewardItem >*
      mutable_rewarditems();

  // repeated .Cmd.ActivityEventCnt eventcnt = 2;
  inline int eventcnt_size() const;
  inline void clear_eventcnt();
  static const int kEventcntFieldNumber = 2;
  inline const ::Cmd::ActivityEventCnt& eventcnt(int index) const;
  inline ::Cmd::ActivityEventCnt* mutable_eventcnt(int index);
  inline ::Cmd::ActivityEventCnt* add_eventcnt();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityEventCnt >&
      eventcnt() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityEventCnt >*
      mutable_eventcnt();

  // @@protoc_insertion_point(class_scope:Cmd.BlobActivityEvent)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AERewardItem > rewarditems_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityEventCnt > eventcnt_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobActivityEvent* default_instance_;
};
// -------------------------------------------------------------------

class BlobGuildChallenge : public ::google::protobuf::Message {
 public:
  BlobGuildChallenge();
  virtual ~BlobGuildChallenge();

  BlobGuildChallenge(const BlobGuildChallenge& from);

  inline BlobGuildChallenge& operator=(const BlobGuildChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGuildChallenge& default_instance();

  void Swap(BlobGuildChallenge* other);

  // implements Message ----------------------------------------------

  BlobGuildChallenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGuildChallenge& from);
  void MergeFrom(const BlobGuildChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.GuildChallengeItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::GuildChallengeItem& items(int index) const;
  inline ::Cmd::GuildChallengeItem* mutable_items(int index);
  inline ::Cmd::GuildChallengeItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildChallengeItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildChallengeItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.BlobGuildChallenge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GuildChallengeItem > items_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGuildChallenge* default_instance_;
};
// -------------------------------------------------------------------

class BlobGvgData : public ::google::protobuf::Message {
 public:
  BlobGvgData();
  virtual ~BlobGvgData();

  BlobGvgData(const BlobGvgData& from);

  inline BlobGvgData& operator=(const BlobGvgData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobGvgData& default_instance();

  void Swap(BlobGvgData* other);

  // implements Message ----------------------------------------------

  BlobGvgData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobGvgData& from);
  void MergeFrom(const BlobGvgData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.GvgData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::GvgData& datas(int index) const;
  inline ::Cmd::GvgData* mutable_datas(int index);
  inline ::Cmd::GvgData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GvgData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GvgData >*
      mutable_datas();

  // optional uint32 expiretime = 2 [default = 0];
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpiretimeFieldNumber = 2;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobGvgData)
 private:
  inline void set_has_expiretime();
  inline void clear_has_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GvgData > datas_;
  ::google::protobuf::uint32 expiretime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobGvgData* default_instance_;
};
// -------------------------------------------------------------------

class BlobUserData : public ::google::protobuf::Message {
 public:
  BlobUserData();
  virtual ~BlobUserData();

  BlobUserData(const BlobUserData& from);

  inline BlobUserData& operator=(const BlobUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobUserData& default_instance();

  void Swap(BlobUserData* other);

  // implements Message ----------------------------------------------

  BlobUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobUserData& from);
  void MergeFrom(const BlobUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional .Cmd.BlobCDTime cdtime = 4;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdtimeFieldNumber = 4;
  inline const ::Cmd::BlobCDTime& cdtime() const;
  inline ::Cmd::BlobCDTime* mutable_cdtime();
  inline ::Cmd::BlobCDTime* release_cdtime();
  inline void set_allocated_cdtime(::Cmd::BlobCDTime* cdtime);

  // optional .Cmd.BlobShortcut shortcuts = 5;
  inline bool has_shortcuts() const;
  inline void clear_shortcuts();
  static const int kShortcutsFieldNumber = 5;
  inline const ::Cmd::BlobShortcut& shortcuts() const;
  inline ::Cmd::BlobShortcut* mutable_shortcuts();
  inline ::Cmd::BlobShortcut* release_shortcuts();
  inline void set_allocated_shortcuts(::Cmd::BlobShortcut* shortcuts);

  // optional .Cmd.BlobFollower follower = 6;
  inline bool has_follower() const;
  inline void clear_follower();
  static const int kFollowerFieldNumber = 6;
  inline const ::Cmd::BlobFollower& follower() const;
  inline ::Cmd::BlobFollower* mutable_follower();
  inline ::Cmd::BlobFollower* release_follower();
  inline void set_allocated_follower(::Cmd::BlobFollower* follower);

  // optional .Cmd.BlobStage stage = 7;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 7;
  inline const ::Cmd::BlobStage& stage() const;
  inline ::Cmd::BlobStage* mutable_stage();
  inline ::Cmd::BlobStage* release_stage();
  inline void set_allocated_stage(::Cmd::BlobStage* stage);

  // optional .Cmd.BlobQuestNpc questnpc = 8;
  inline bool has_questnpc() const;
  inline void clear_questnpc();
  static const int kQuestnpcFieldNumber = 8;
  inline const ::Cmd::BlobQuestNpc& questnpc() const;
  inline ::Cmd::BlobQuestNpc* mutable_questnpc();
  inline ::Cmd::BlobQuestNpc* release_questnpc();
  inline void set_allocated_questnpc(::Cmd::BlobQuestNpc* questnpc);

  // optional .Cmd.BlobBuffer buffer = 9;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 9;
  inline const ::Cmd::BlobBuffer& buffer() const;
  inline ::Cmd::BlobBuffer* mutable_buffer();
  inline ::Cmd::BlobBuffer* release_buffer();
  inline void set_allocated_buffer(::Cmd::BlobBuffer* buffer);

  // optional .Cmd.BlobMenu menu = 10;
  inline bool has_menu() const;
  inline void clear_menu();
  static const int kMenuFieldNumber = 10;
  inline const ::Cmd::BlobMenu& menu() const;
  inline ::Cmd::BlobMenu* mutable_menu();
  inline ::Cmd::BlobMenu* release_menu();
  inline void set_allocated_menu(::Cmd::BlobMenu* menu);

  // optional uint32 clothcolor = 11 [default = 0];
  inline bool has_clothcolor() const;
  inline void clear_clothcolor();
  static const int kClothcolorFieldNumber = 11;
  inline ::google::protobuf::uint32 clothcolor() const;
  inline void set_clothcolor(::google::protobuf::uint32 value);

  // optional .Cmd.BlobPortrait port = 12;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 12;
  inline const ::Cmd::BlobPortrait& port() const;
  inline ::Cmd::BlobPortrait* mutable_port();
  inline ::Cmd::BlobPortrait* release_port();
  inline void set_allocated_port(::Cmd::BlobPortrait* port);

  // optional .Cmd.BlobShopGotItem items = 13;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 13;
  inline const ::Cmd::BlobShopGotItem& items() const;
  inline ::Cmd::BlobShopGotItem* mutable_items();
  inline ::Cmd::BlobShopGotItem* release_items();
  inline void set_allocated_items(::Cmd::BlobShopGotItem* items);

  // optional .Cmd.BlobHair hair = 14;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 14;
  inline const ::Cmd::BlobHair& hair() const;
  inline ::Cmd::BlobHair* mutable_hair();
  inline ::Cmd::BlobHair* release_hair();
  inline void set_allocated_hair(::Cmd::BlobHair* hair);

  // optional .Cmd.BlobKnownMaps maps = 15;
  inline bool has_maps() const;
  inline void clear_maps();
  static const int kMapsFieldNumber = 15;
  inline const ::Cmd::BlobKnownMaps& maps() const;
  inline ::Cmd::BlobKnownMaps* mutable_maps();
  inline ::Cmd::BlobKnownMaps* release_maps();
  inline void set_allocated_maps(::Cmd::BlobKnownMaps* maps);

  // optional .Cmd.BlobGears gear = 16;
  inline bool has_gear() const;
  inline void clear_gear();
  static const int kGearFieldNumber = 16;
  inline const ::Cmd::BlobGears& gear() const;
  inline ::Cmd::BlobGears* mutable_gear();
  inline ::Cmd::BlobGears* release_gear();
  inline void set_allocated_gear(::Cmd::BlobGears* gear);

  // optional uint32 garden = 17 [default = 0];
  inline bool has_garden() const;
  inline void clear_garden();
  static const int kGardenFieldNumber = 17;
  inline ::google::protobuf::uint32 garden() const;
  inline void set_garden(::google::protobuf::uint32 value);

  // optional uint32 purify = 18 [default = 0];
  inline bool has_purify() const;
  inline void clear_purify();
  static const int kPurifyFieldNumber = 18;
  inline ::google::protobuf::uint32 purify() const;
  inline void set_purify(::google::protobuf::uint32 value);

  // optional .Cmd.BlobTips tips = 19;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 19;
  inline const ::Cmd::BlobTips& tips() const;
  inline ::Cmd::BlobTips* mutable_tips();
  inline ::Cmd::BlobTips* release_tips();
  inline void set_allocated_tips(::Cmd::BlobTips* tips);

  // optional uint32 savemap = 20 [default = 0];
  inline bool has_savemap() const;
  inline void clear_savemap();
  static const int kSavemapFieldNumber = 20;
  inline ::google::protobuf::uint32 savemap() const;
  inline void set_savemap(::google::protobuf::uint32 value);

  // optional .Cmd.BlobGMEffects gms = 21;
  inline bool has_gms() const;
  inline void clear_gms();
  static const int kGmsFieldNumber = 21;
  inline const ::Cmd::BlobGMEffects& gms() const;
  inline ::Cmd::BlobGMEffects* mutable_gms();
  inline ::Cmd::BlobGMEffects* release_gms();
  inline void set_allocated_gms(::Cmd::BlobGMEffects* gms);

  // optional .Cmd.BlobFreyja freyja = 22;
  inline bool has_freyja() const;
  inline void clear_freyja();
  static const int kFreyjaFieldNumber = 22;
  inline const ::Cmd::BlobFreyja& freyja() const;
  inline ::Cmd::BlobFreyja* mutable_freyja();
  inline ::Cmd::BlobFreyja* release_freyja();
  inline void set_allocated_freyja(::Cmd::BlobFreyja* freyja);

  // optional .Cmd.BlobInter inters = 23;
  inline bool has_inters() const;
  inline void clear_inters();
  static const int kIntersFieldNumber = 23;
  inline const ::Cmd::BlobInter& inters() const;
  inline ::Cmd::BlobInter* mutable_inters();
  inline ::Cmd::BlobInter* release_inters();
  inline void set_allocated_inters(::Cmd::BlobInter* inters);

  // optional .Cmd.BlobLaboratory laboratory = 24;
  inline bool has_laboratory() const;
  inline void clear_laboratory();
  static const int kLaboratoryFieldNumber = 24;
  inline const ::Cmd::BlobLaboratory& laboratory() const;
  inline ::Cmd::BlobLaboratory* mutable_laboratory();
  inline ::Cmd::BlobLaboratory* release_laboratory();
  inline void set_allocated_laboratory(::Cmd::BlobLaboratory* laboratory);

  // optional .Cmd.BlobScenery scenery = 25;
  inline bool has_scenery() const;
  inline void clear_scenery();
  static const int kSceneryFieldNumber = 25;
  inline const ::Cmd::BlobScenery& scenery() const;
  inline ::Cmd::BlobScenery* mutable_scenery();
  inline ::Cmd::BlobScenery* release_scenery();
  inline void set_allocated_scenery(::Cmd::BlobScenery* scenery);

  // optional .Cmd.BlobCarrier carrier = 27;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 27;
  inline const ::Cmd::BlobCarrier& carrier() const;
  inline ::Cmd::BlobCarrier* mutable_carrier();
  inline ::Cmd::BlobCarrier* release_carrier();
  inline void set_allocated_carrier(::Cmd::BlobCarrier* carrier);

  // optional uint32 lastmapid = 28;
  inline bool has_lastmapid() const;
  inline void clear_lastmapid();
  static const int kLastmapidFieldNumber = 28;
  inline ::google::protobuf::uint32 lastmapid() const;
  inline void set_lastmapid(::google::protobuf::uint32 value);

  // repeated uint32 shownpcs = 29;
  inline int shownpcs_size() const;
  inline void clear_shownpcs();
  static const int kShownpcsFieldNumber = 29;
  inline ::google::protobuf::uint32 shownpcs(int index) const;
  inline void set_shownpcs(int index, ::google::protobuf::uint32 value);
  inline void add_shownpcs(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shownpcs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shownpcs();

  // repeated uint32 mapareas = 30;
  inline int mapareas_size() const;
  inline void clear_mapareas();
  static const int kMapareasFieldNumber = 30;
  inline ::google::protobuf::uint32 mapareas(int index) const;
  inline void set_mapareas(int index, ::google::protobuf::uint32 value);
  inline void add_mapareas(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mapareas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mapareas();

  // optional .Cmd.BlobHands hands = 31;
  inline bool has_hands() const;
  inline void clear_hands();
  static const int kHandsFieldNumber = 31;
  inline const ::Cmd::BlobHands& hands() const;
  inline ::Cmd::BlobHands* mutable_hands();
  inline ::Cmd::BlobHands* release_hands();
  inline void set_allocated_hands(::Cmd::BlobHands* hands);

  // optional .Cmd.BlobShow usershow = 32;
  inline bool has_usershow() const;
  inline void clear_usershow();
  static const int kUsershowFieldNumber = 32;
  inline const ::Cmd::BlobShow& usershow() const;
  inline ::Cmd::BlobShow* mutable_usershow();
  inline ::Cmd::BlobShow* release_usershow();
  inline void set_allocated_usershow(::Cmd::BlobShow* usershow);

  // optional uint32 lastrealmapid = 33;
  inline bool has_lastrealmapid() const;
  inline void clear_lastrealmapid();
  static const int kLastrealmapidFieldNumber = 33;
  inline ::google::protobuf::uint32 lastrealmapid() const;
  inline void set_lastrealmapid(::google::protobuf::uint32 value);

  // optional .Cmd.BlobTrace trace = 34;
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 34;
  inline const ::Cmd::BlobTrace& trace() const;
  inline ::Cmd::BlobTrace* mutable_trace();
  inline ::Cmd::BlobTrace* release_trace();
  inline void set_allocated_trace(::Cmd::BlobTrace* trace);

  // optional .Cmd.BlobOption option = 35;
  inline bool has_option() const;
  inline void clear_option();
  static const int kOptionFieldNumber = 35;
  inline const ::Cmd::BlobOption& option() const;
  inline ::Cmd::BlobOption* mutable_option();
  inline ::Cmd::BlobOption* release_option();
  inline void set_allocated_option(::Cmd::BlobOption* option);

  // optional .Cmd.BlobFirstActionDone firstaction = 36;
  inline bool has_firstaction() const;
  inline void clear_firstaction();
  static const int kFirstactionFieldNumber = 36;
  inline const ::Cmd::BlobFirstActionDone& firstaction() const;
  inline ::Cmd::BlobFirstActionDone* mutable_firstaction();
  inline ::Cmd::BlobFirstActionDone* release_firstaction();
  inline void set_allocated_firstaction(::Cmd::BlobFirstActionDone* firstaction);

  // optional .Cmd.BlobTitle title = 37;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 37;
  inline const ::Cmd::BlobTitle& title() const;
  inline ::Cmd::BlobTitle* mutable_title();
  inline ::Cmd::BlobTitle* release_title();
  inline void set_allocated_title(::Cmd::BlobTitle* title);

  // optional .Cmd.BlobLine lines = 38;
  inline bool has_lines() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 38;
  inline const ::Cmd::BlobLine& lines() const;
  inline ::Cmd::BlobLine* mutable_lines();
  inline ::Cmd::BlobLine* release_lines();
  inline void set_allocated_lines(::Cmd::BlobLine* lines);

  // optional .Cmd.BlobDojo dojo = 39;
  inline bool has_dojo() const;
  inline void clear_dojo();
  static const int kDojoFieldNumber = 39;
  inline const ::Cmd::BlobDojo& dojo() const;
  inline ::Cmd::BlobDojo* mutable_dojo();
  inline ::Cmd::BlobDojo* release_dojo();
  inline void set_allocated_dojo(::Cmd::BlobDojo* dojo);

  // repeated uint32 patchversion = 40;
  inline int patchversion_size() const;
  inline void clear_patchversion();
  static const int kPatchversionFieldNumber = 40;
  inline ::google::protobuf::uint32 patchversion(int index) const;
  inline void set_patchversion(int index, ::google::protobuf::uint32 value);
  inline void add_patchversion(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      patchversion() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_patchversion();

  // optional .Cmd.BlobFood food = 41;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 41;
  inline const ::Cmd::BlobFood& food() const;
  inline ::Cmd::BlobFood* mutable_food();
  inline ::Cmd::BlobFood* release_food();
  inline void set_allocated_food(::Cmd::BlobFood* food);

  // @@protoc_insertion_point(class_scope:Cmd.BlobUserData)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();
  inline void set_has_shortcuts();
  inline void clear_has_shortcuts();
  inline void set_has_follower();
  inline void clear_has_follower();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_questnpc();
  inline void clear_has_questnpc();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  inline void set_has_menu();
  inline void clear_has_menu();
  inline void set_has_clothcolor();
  inline void clear_has_clothcolor();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_maps();
  inline void clear_has_maps();
  inline void set_has_gear();
  inline void clear_has_gear();
  inline void set_has_garden();
  inline void clear_has_garden();
  inline void set_has_purify();
  inline void clear_has_purify();
  inline void set_has_tips();
  inline void clear_has_tips();
  inline void set_has_savemap();
  inline void clear_has_savemap();
  inline void set_has_gms();
  inline void clear_has_gms();
  inline void set_has_freyja();
  inline void clear_has_freyja();
  inline void set_has_inters();
  inline void clear_has_inters();
  inline void set_has_laboratory();
  inline void clear_has_laboratory();
  inline void set_has_scenery();
  inline void clear_has_scenery();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_lastmapid();
  inline void clear_has_lastmapid();
  inline void set_has_hands();
  inline void clear_has_hands();
  inline void set_has_usershow();
  inline void clear_has_usershow();
  inline void set_has_lastrealmapid();
  inline void clear_has_lastrealmapid();
  inline void set_has_trace();
  inline void clear_has_trace();
  inline void set_has_option();
  inline void clear_has_option();
  inline void set_has_firstaction();
  inline void clear_has_firstaction();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_lines();
  inline void clear_has_lines();
  inline void set_has_dojo();
  inline void clear_has_dojo();
  inline void set_has_food();
  inline void clear_has_food();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  float x_;
  float y_;
  ::Cmd::BlobCDTime* cdtime_;
  ::Cmd::BlobShortcut* shortcuts_;
  ::Cmd::BlobFollower* follower_;
  ::Cmd::BlobStage* stage_;
  float z_;
  ::google::protobuf::uint32 clothcolor_;
  ::Cmd::BlobQuestNpc* questnpc_;
  ::Cmd::BlobBuffer* buffer_;
  ::Cmd::BlobMenu* menu_;
  ::Cmd::BlobPortrait* port_;
  ::Cmd::BlobShopGotItem* items_;
  ::Cmd::BlobHair* hair_;
  ::Cmd::BlobKnownMaps* maps_;
  ::Cmd::BlobGears* gear_;
  ::google::protobuf::uint32 garden_;
  ::google::protobuf::uint32 purify_;
  ::Cmd::BlobTips* tips_;
  ::Cmd::BlobGMEffects* gms_;
  ::Cmd::BlobFreyja* freyja_;
  ::Cmd::BlobInter* inters_;
  ::google::protobuf::uint32 savemap_;
  ::google::protobuf::uint32 lastmapid_;
  ::Cmd::BlobLaboratory* laboratory_;
  ::Cmd::BlobScenery* scenery_;
  ::Cmd::BlobCarrier* carrier_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shownpcs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mapareas_;
  ::Cmd::BlobHands* hands_;
  ::Cmd::BlobShow* usershow_;
  ::Cmd::BlobTrace* trace_;
  ::Cmd::BlobOption* option_;
  ::Cmd::BlobFirstActionDone* firstaction_;
  ::Cmd::BlobTitle* title_;
  ::Cmd::BlobLine* lines_;
  ::Cmd::BlobDojo* dojo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > patchversion_;
  ::Cmd::BlobFood* food_;
  ::google::protobuf::uint32 lastrealmapid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobUserData* default_instance_;
};
// -------------------------------------------------------------------

class DelPatchCharRecordCmd : public ::google::protobuf::Message {
 public:
  DelPatchCharRecordCmd();
  virtual ~DelPatchCharRecordCmd();

  DelPatchCharRecordCmd(const DelPatchCharRecordCmd& from);

  inline DelPatchCharRecordCmd& operator=(const DelPatchCharRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelPatchCharRecordCmd& default_instance();

  void Swap(DelPatchCharRecordCmd* other);

  // implements Message ----------------------------------------------

  DelPatchCharRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelPatchCharRecordCmd& from);
  void MergeFrom(const DelPatchCharRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_DEL_PATCH_CHAR];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EPatchType type = 4 [default = EPATCHTYPE_QUEST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EPatchType type() const;
  inline void set_type(::Cmd::EPatchType value);

  // @@protoc_insertion_point(class_scope:Cmd.DelPatchCharRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int type_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static DelPatchCharRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class BlobChatItem : public ::google::protobuf::Message {
 public:
  BlobChatItem();
  virtual ~BlobChatItem();

  BlobChatItem(const BlobChatItem& from);

  inline BlobChatItem& operator=(const BlobChatItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobChatItem& default_instance();

  void Swap(BlobChatItem* other);

  // implements Message ----------------------------------------------

  BlobChatItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobChatItem& from);
  void MergeFrom(const BlobChatItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.ChatItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::ChatItem& items(int index) const;
  inline ::Cmd::ChatItem* mutable_items(int index);
  inline ::Cmd::ChatItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.BlobChatItem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem > items_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobChatItem* default_instance_;
};
// -------------------------------------------------------------------

class ChatSaveRecordCmd : public ::google::protobuf::Message {
 public:
  ChatSaveRecordCmd();
  virtual ~ChatSaveRecordCmd();

  ChatSaveRecordCmd(const ChatSaveRecordCmd& from);

  inline ChatSaveRecordCmd& operator=(const ChatSaveRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSaveRecordCmd& default_instance();

  void Swap(ChatSaveRecordCmd* other);

  // implements Message ----------------------------------------------

  ChatSaveRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatSaveRecordCmd& from);
  void MergeFrom(const ChatSaveRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_SAVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 portrait = 4 [default = 0];
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 4;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Cmd.ChatSaveRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 time_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatSaveRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryChatRecordCmd : public ::google::protobuf::Message {
 public:
  QueryChatRecordCmd();
  virtual ~QueryChatRecordCmd();

  QueryChatRecordCmd(const QueryChatRecordCmd& from);

  inline QueryChatRecordCmd& operator=(const QueryChatRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryChatRecordCmd& default_instance();

  void Swap(QueryChatRecordCmd* other);

  // implements Message ----------------------------------------------

  QueryChatRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryChatRecordCmd& from);
  void MergeFrom(const QueryChatRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 targetid = 4 [default = 0];
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 4;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint32 start = 5 [default = 0];
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 5;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // optional uint32 end = 6 [default = 0];
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 6;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);

  // optional uint32 selfport = 7 [default = 0];
  inline bool has_selfport() const;
  inline void clear_selfport();
  static const int kSelfportFieldNumber = 7;
  inline ::google::protobuf::uint32 selfport() const;
  inline void set_selfport(::google::protobuf::uint32 value);

  // optional uint32 targetport = 8 [default = 0];
  inline bool has_targetport() const;
  inline void clear_targetport();
  static const int kTargetportFieldNumber = 8;
  inline ::google::protobuf::uint32 targetport() const;
  inline void set_targetport(::google::protobuf::uint32 value);

  // optional string scenename = 9;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kScenenameFieldNumber = 9;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // repeated bytes datas = 10;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 10;
  inline const ::std::string& datas(int index) const;
  inline ::std::string* mutable_datas(int index);
  inline void set_datas(int index, const ::std::string& value);
  inline void set_datas(int index, const char* value);
  inline void set_datas(int index, const void* value, size_t size);
  inline ::std::string* add_datas();
  inline void add_datas(const ::std::string& value);
  inline void add_datas(const char* value);
  inline void add_datas(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.QueryChatRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_selfport();
  inline void clear_has_selfport();
  inline void set_has_targetport();
  inline void clear_has_targetport();
  inline void set_has_scenename();
  inline void clear_has_scenename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  ::google::protobuf::uint32 selfport_;
  ::google::protobuf::uint32 targetport_;
  ::std::string* scenename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryChatRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserRenameQueryRecordCmd : public ::google::protobuf::Message {
 public:
  UserRenameQueryRecordCmd();
  virtual ~UserRenameQueryRecordCmd();

  UserRenameQueryRecordCmd(const UserRenameQueryRecordCmd& from);

  inline UserRenameQueryRecordCmd& operator=(const UserRenameQueryRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRenameQueryRecordCmd& default_instance();

  void Swap(UserRenameQueryRecordCmd* other);

  // implements Message ----------------------------------------------

  UserRenameQueryRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRenameQueryRecordCmd& from);
  void MergeFrom(const UserRenameQueryRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 accid = 4;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string oldname = 5;
  inline bool has_oldname() const;
  inline void clear_oldname();
  static const int kOldnameFieldNumber = 5;
  inline const ::std::string& oldname() const;
  inline void set_oldname(const ::std::string& value);
  inline void set_oldname(const char* value);
  inline void set_oldname(const char* value, size_t size);
  inline ::std::string* mutable_oldname();
  inline ::std::string* release_oldname();
  inline void set_allocated_oldname(::std::string* oldname);

  // optional string newname = 6;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 6;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // optional string scenename = 7;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kScenenameFieldNumber = 7;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // optional .Cmd.ERenameErrCode code = 8 [default = ERENAME_SUCCESS];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 8;
  inline ::Cmd::ERenameErrCode code() const;
  inline void set_code(::Cmd::ERenameErrCode value);

  // @@protoc_insertion_point(class_scope:Cmd.UserRenameQueryRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_oldname();
  inline void clear_has_oldname();
  inline void set_has_newname();
  inline void clear_has_newname();
  inline void set_has_scenename();
  inline void clear_has_scenename();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 accid_;
  ::std::string* oldname_;
  ::std::string* newname_;
  ::std::string* scenename_;
  int code_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserRenameQueryRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserRenameResultRecordCmd : public ::google::protobuf::Message {
 public:
  UserRenameResultRecordCmd();
  virtual ~UserRenameResultRecordCmd();

  UserRenameResultRecordCmd(const UserRenameResultRecordCmd& from);

  inline UserRenameResultRecordCmd& operator=(const UserRenameResultRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRenameResultRecordCmd& default_instance();

  void Swap(UserRenameResultRecordCmd* other);

  // implements Message ----------------------------------------------

  UserRenameResultRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRenameResultRecordCmd& from);
  void MergeFrom(const UserRenameResultRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_RESULT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 accid = 4;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string newname = 5;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 5;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // optional string oldname = 6;
  inline bool has_oldname() const;
  inline void clear_oldname();
  static const int kOldnameFieldNumber = 6;
  inline const ::std::string& oldname() const;
  inline void set_oldname(const ::std::string& value);
  inline void set_oldname(const char* value);
  inline void set_oldname(const char* value, size_t size);
  inline ::std::string* mutable_oldname();
  inline ::std::string* release_oldname();
  inline void set_allocated_oldname(::std::string* oldname);

  // optional bool success = 7 [default = false];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 7;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.UserRenameResultRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_newname();
  inline void clear_has_newname();
  inline void set_has_oldname();
  inline void clear_has_oldname();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 accid_;
  ::std::string* newname_;
  ::std::string* oldname_;
  bool success_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserRenameResultRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class LotteryResultRecordCmd : public ::google::protobuf::Message {
 public:
  LotteryResultRecordCmd();
  virtual ~LotteryResultRecordCmd();

  LotteryResultRecordCmd(const LotteryResultRecordCmd& from);

  inline LotteryResultRecordCmd& operator=(const LotteryResultRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryResultRecordCmd& default_instance();

  void Swap(LotteryResultRecordCmd* other);

  // implements Message ----------------------------------------------

  LotteryResultRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryResultRecordCmd& from);
  void MergeFrom(const LotteryResultRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOTTERY_RESULT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint64 itemid() const;
  inline void set_itemid(::google::protobuf::uint64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string itemname = 6;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemnameFieldNumber = 6;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional uint32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 rate = 8;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 8;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryResultRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 itemid_;
  ::std::string* name_;
  ::std::string* itemname_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 rate_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static LotteryResultRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class BlobBattle : public ::google::protobuf::Message {
 public:
  BlobBattle();
  virtual ~BlobBattle();

  BlobBattle(const BlobBattle& from);

  inline BlobBattle& operator=(const BlobBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobBattle& default_instance();

  void Swap(BlobBattle* other);

  // implements Message ----------------------------------------------

  BlobBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobBattle& from);
  void MergeFrom(const BlobBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 totalbattletime = 1 [default = 0];
  inline bool has_totalbattletime() const;
  inline void clear_totalbattletime();
  static const int kTotalbattletimeFieldNumber = 1;
  inline ::google::protobuf::uint32 totalbattletime() const;
  inline void set_totalbattletime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobBattle)
 private:
  inline void set_has_totalbattletime();
  inline void clear_has_totalbattletime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 totalbattletime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobBattle* default_instance_;
};
// -------------------------------------------------------------------

class BlobSeeNpc : public ::google::protobuf::Message {
 public:
  BlobSeeNpc();
  virtual ~BlobSeeNpc();

  BlobSeeNpc(const BlobSeeNpc& from);

  inline BlobSeeNpc& operator=(const BlobSeeNpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobSeeNpc& default_instance();

  void Swap(BlobSeeNpc* other);

  // implements Message ----------------------------------------------

  BlobSeeNpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobSeeNpc& from);
  void MergeFrom(const BlobSeeNpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 see = 1;
  inline int see_size() const;
  inline void clear_see();
  static const int kSeeFieldNumber = 1;
  inline ::google::protobuf::uint32 see(int index) const;
  inline void set_see(int index, ::google::protobuf::uint32 value);
  inline void add_see(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      see() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_see();

  // repeated uint32 hide = 2;
  inline int hide_size() const;
  inline void clear_hide();
  static const int kHideFieldNumber = 2;
  inline ::google::protobuf::uint32 hide(int index) const;
  inline void set_hide(int index, ::google::protobuf::uint32 value);
  inline void add_hide(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hide() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hide();

  // @@protoc_insertion_point(class_scope:Cmd.BlobSeeNpc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > see_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hide_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobSeeNpc* default_instance_;
};
// -------------------------------------------------------------------

class BlobSettings : public ::google::protobuf::Message {
 public:
  BlobSettings();
  virtual ~BlobSettings();

  BlobSettings(const BlobSettings& from);

  inline BlobSettings& operator=(const BlobSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobSettings& default_instance();

  void Swap(BlobSettings* other);

  // implements Message ----------------------------------------------

  BlobSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobSettings& from);
  void MergeFrom(const BlobSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 transmap = 1 [default = 0];
  inline bool has_transmap() const;
  inline void clear_transmap();
  static const int kTransmapFieldNumber = 1;
  inline ::google::protobuf::uint32 transmap() const;
  inline void set_transmap(::google::protobuf::uint32 value);

  // optional float trans_x = 2 [default = 0];
  inline bool has_trans_x() const;
  inline void clear_trans_x();
  static const int kTransXFieldNumber = 2;
  inline float trans_x() const;
  inline void set_trans_x(float value);

  // optional float trans_y = 3 [default = 0];
  inline bool has_trans_y() const;
  inline void clear_trans_y();
  static const int kTransYFieldNumber = 3;
  inline float trans_y() const;
  inline void set_trans_y(float value);

  // optional float trans_z = 4 [default = 0];
  inline bool has_trans_z() const;
  inline void clear_trans_z();
  static const int kTransZFieldNumber = 4;
  inline float trans_z() const;
  inline void set_trans_z(float value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobSettings)
 private:
  inline void set_has_transmap();
  inline void clear_has_transmap();
  inline void set_has_trans_x();
  inline void clear_has_trans_x();
  inline void set_has_trans_y();
  inline void clear_has_trans_y();
  inline void set_has_trans_z();
  inline void clear_has_trans_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 transmap_;
  float trans_x_;
  float trans_y_;
  float trans_z_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobSettings* default_instance_;
};
// -------------------------------------------------------------------

class BlobPhoto : public ::google::protobuf::Message {
 public:
  BlobPhoto();
  virtual ~BlobPhoto();

  BlobPhoto(const BlobPhoto& from);

  inline BlobPhoto& operator=(const BlobPhoto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobPhoto& default_instance();

  void Swap(BlobPhoto* other);

  // implements Message ----------------------------------------------

  BlobPhoto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobPhoto& from);
  void MergeFrom(const BlobPhoto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.PhotoItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::PhotoItem& items(int index) const;
  inline ::Cmd::PhotoItem* mutable_items(int index);
  inline ::Cmd::PhotoItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.BlobPhoto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem > items_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobPhoto* default_instance_;
};
// -------------------------------------------------------------------

class BlobUserPet : public ::google::protobuf::Message {
 public:
  BlobUserPet();
  virtual ~BlobUserPet();

  BlobUserPet(const BlobUserPet& from);

  inline BlobUserPet& operator=(const BlobUserPet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobUserPet& default_instance();

  void Swap(BlobUserPet* other);

  // implements Message ----------------------------------------------

  BlobUserPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobUserPet& from);
  void MergeFrom(const BlobUserPet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.UserPetData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Cmd::UserPetData& data(int index) const;
  inline ::Cmd::UserPetData* mutable_data(int index);
  inline ::Cmd::UserPetData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserPetData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserPetData >*
      mutable_data();

  // optional .Cmd.PetEquipUnlockInfo unlockinfo = 2;
  inline bool has_unlockinfo() const;
  inline void clear_unlockinfo();
  static const int kUnlockinfoFieldNumber = 2;
  inline const ::Cmd::PetEquipUnlockInfo& unlockinfo() const;
  inline ::Cmd::PetEquipUnlockInfo* mutable_unlockinfo();
  inline ::Cmd::PetEquipUnlockInfo* release_unlockinfo();
  inline void set_allocated_unlockinfo(::Cmd::PetEquipUnlockInfo* unlockinfo);

  // @@protoc_insertion_point(class_scope:Cmd.BlobUserPet)
 private:
  inline void set_has_unlockinfo();
  inline void clear_has_unlockinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserPetData > data_;
  ::Cmd::PetEquipUnlockInfo* unlockinfo_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobUserPet* default_instance_;
};
// -------------------------------------------------------------------

class BlobUserBeing : public ::google::protobuf::Message {
 public:
  BlobUserBeing();
  virtual ~BlobUserBeing();

  BlobUserBeing(const BlobUserBeing& from);

  inline BlobUserBeing& operator=(const BlobUserBeing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobUserBeing& default_instance();

  void Swap(BlobUserBeing* other);

  // implements Message ----------------------------------------------

  BlobUserBeing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobUserBeing& from);
  void MergeFrom(const BlobUserBeing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.UserBeingData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Cmd::UserBeingData& data(int index) const;
  inline ::Cmd::UserBeingData* mutable_data(int index);
  inline ::Cmd::UserBeingData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserBeingData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserBeingData >*
      mutable_data();

  // optional uint32 curbeingid = 2;
  inline bool has_curbeingid() const;
  inline void clear_curbeingid();
  static const int kCurbeingidFieldNumber = 2;
  inline ::google::protobuf::uint32 curbeingid() const;
  inline void set_curbeingid(::google::protobuf::uint32 value);

  // optional uint32 skillpoint = 3;
  inline bool has_skillpoint() const;
  inline void clear_skillpoint();
  static const int kSkillpointFieldNumber = 3;
  inline ::google::protobuf::uint32 skillpoint() const;
  inline void set_skillpoint(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobUserBeing)
 private:
  inline void set_has_curbeingid();
  inline void clear_has_curbeingid();
  inline void set_has_skillpoint();
  inline void clear_has_skillpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserBeingData > data_;
  ::google::protobuf::uint32 curbeingid_;
  ::google::protobuf::uint32 skillpoint_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobUserBeing* default_instance_;
};
// -------------------------------------------------------------------

class BlobJoyData : public ::google::protobuf::Message {
 public:
  BlobJoyData();
  virtual ~BlobJoyData();

  BlobJoyData(const BlobJoyData& from);

  inline BlobJoyData& operator=(const BlobJoyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobJoyData& default_instance();

  void Swap(BlobJoyData* other);

  // implements Message ----------------------------------------------

  BlobJoyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobJoyData& from);
  void MergeFrom(const BlobJoyData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EJoyActivityType etype = 1 [default = JOY_ACTIVITY_MIN];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 1;
  inline ::Cmd::EJoyActivityType etype() const;
  inline void set_etype(::Cmd::EJoyActivityType value);

  // optional uint32 joyvalue = 2 [default = 0];
  inline bool has_joyvalue() const;
  inline void clear_joyvalue();
  static const int kJoyvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 joyvalue() const;
  inline void set_joyvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobJoyData)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_joyvalue();
  inline void clear_has_joyvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int etype_;
  ::google::protobuf::uint32 joyvalue_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobJoyData* default_instance_;
};
// -------------------------------------------------------------------

class LotteryPoolData : public ::google::protobuf::Message {
 public:
  LotteryPoolData();
  virtual ~LotteryPoolData();

  LotteryPoolData(const LotteryPoolData& from);

  inline LotteryPoolData& operator=(const LotteryPoolData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryPoolData& default_instance();

  void Swap(LotteryPoolData* other);

  // implements Message ----------------------------------------------

  LotteryPoolData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryPoolData& from);
  void MergeFrom(const LotteryPoolData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 poolid = 1;
  inline bool has_poolid() const;
  inline void clear_poolid();
  static const int kPoolidFieldNumber = 1;
  inline ::google::protobuf::uint32 poolid() const;
  inline void set_poolid(::google::protobuf::uint32 value);

  // optional uint32 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryPoolData)
 private:
  inline void set_has_poolid();
  inline void clear_has_poolid();
  inline void set_has_coin();
  inline void clear_has_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 poolid_;
  ::google::protobuf::uint32 coin_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static LotteryPoolData* default_instance_;
};
// -------------------------------------------------------------------

class BlobLottery : public ::google::protobuf::Message {
 public:
  BlobLottery();
  virtual ~BlobLottery();

  BlobLottery(const BlobLottery& from);

  inline BlobLottery& operator=(const BlobLottery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobLottery& default_instance();

  void Swap(BlobLottery* other);

  // implements Message ----------------------------------------------

  BlobLottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobLottery& from);
  void MergeFrom(const BlobLottery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline ::google::protobuf::uint32 items(int index) const;
  inline void set_items(int index, ::google::protobuf::uint32 value);
  inline void add_items(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // repeated .Cmd.LotteryPoolData pools = 2;
  inline int pools_size() const;
  inline void clear_pools();
  static const int kPoolsFieldNumber = 2;
  inline const ::Cmd::LotteryPoolData& pools(int index) const;
  inline ::Cmd::LotteryPoolData* mutable_pools(int index);
  inline ::Cmd::LotteryPoolData* add_pools();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryPoolData >&
      pools() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryPoolData >*
      mutable_pools();

  // optional uint32 pooltime = 3;
  inline bool has_pooltime() const;
  inline void clear_pooltime();
  static const int kPooltimeFieldNumber = 3;
  inline ::google::protobuf::uint32 pooltime() const;
  inline void set_pooltime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobLottery)
 private:
  inline void set_has_pooltime();
  inline void clear_has_pooltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryPoolData > pools_;
  ::google::protobuf::uint32 pooltime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobLottery* default_instance_;
};
// -------------------------------------------------------------------

class BlobServant : public ::google::protobuf::Message {
 public:
  BlobServant();
  virtual ~BlobServant();

  BlobServant(const BlobServant& from);

  inline BlobServant& operator=(const BlobServant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobServant& default_instance();

  void Swap(BlobServant* other);

  // implements Message ----------------------------------------------

  BlobServant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobServant& from);
  void MergeFrom(const BlobServant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 servantid = 1 [default = 0];
  inline bool has_servantid() const;
  inline void clear_servantid();
  static const int kServantidFieldNumber = 1;
  inline ::google::protobuf::uint32 servantid() const;
  inline void set_servantid(::google::protobuf::uint32 value);

  // repeated .Cmd.RecommendItemInfo recitem = 2;
  inline int recitem_size() const;
  inline void clear_recitem();
  static const int kRecitemFieldNumber = 2;
  inline const ::Cmd::RecommendItemInfo& recitem(int index) const;
  inline ::Cmd::RecommendItemInfo* mutable_recitem(int index);
  inline ::Cmd::RecommendItemInfo* add_recitem();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >&
      recitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >*
      mutable_recitem();

  // repeated uint32 ownservant = 3;
  inline int ownservant_size() const;
  inline void clear_ownservant();
  static const int kOwnservantFieldNumber = 3;
  inline ::google::protobuf::uint32 ownservant(int index) const;
  inline void set_ownservant(int index, ::google::protobuf::uint32 value);
  inline void add_ownservant(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ownservant() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ownservant();

  // repeated .Cmd.GrowthItemInfo growthitem = 4;
  inline int growthitem_size() const;
  inline void clear_growthitem();
  static const int kGrowthitemFieldNumber = 4;
  inline const ::Cmd::GrowthItemInfo& growthitem(int index) const;
  inline ::Cmd::GrowthItemInfo* mutable_growthitem(int index);
  inline ::Cmd::GrowthItemInfo* add_growthitem();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >&
      growthitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >*
      mutable_growthitem();

  // repeated .Cmd.GrowthValueInfo growthvalue = 5;
  inline int growthvalue_size() const;
  inline void clear_growthvalue();
  static const int kGrowthvalueFieldNumber = 5;
  inline const ::Cmd::GrowthValueInfo& growthvalue(int index) const;
  inline ::Cmd::GrowthValueInfo* mutable_growthvalue(int index);
  inline ::Cmd::GrowthValueInfo* add_growthvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthValueInfo >&
      growthvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthValueInfo >*
      mutable_growthvalue();

  // repeated .Cmd.GrowthCurInfo growthcurinfo = 6;
  inline int growthcurinfo_size() const;
  inline void clear_growthcurinfo();
  static const int kGrowthcurinfoFieldNumber = 6;
  inline const ::Cmd::GrowthCurInfo& growthcurinfo(int index) const;
  inline ::Cmd::GrowthCurInfo* mutable_growthcurinfo(int index);
  inline ::Cmd::GrowthCurInfo* add_growthcurinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthCurInfo >&
      growthcurinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthCurInfo >*
      mutable_growthcurinfo();

  // @@protoc_insertion_point(class_scope:Cmd.BlobServant)
 private:
  inline void set_has_servantid();
  inline void clear_has_servantid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo > recitem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ownservant_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo > growthitem_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthValueInfo > growthvalue_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthCurInfo > growthcurinfo_;
  ::google::protobuf::uint32 servantid_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobServant* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionData : public ::google::protobuf::Message {
 public:
  ProfessionData();
  virtual ~ProfessionData();

  ProfessionData(const ProfessionData& from);

  inline ProfessionData& operator=(const ProfessionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionData& default_instance();

  void Swap(ProfessionData* other);

  // implements Message ----------------------------------------------

  ProfessionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionData& from);
  void MergeFrom(const ProfessionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 profession = 2;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 2;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint32 joblv = 3;
  inline bool has_joblv() const;
  inline void clear_joblv();
  static const int kJoblvFieldNumber = 3;
  inline ::google::protobuf::uint32 joblv() const;
  inline void set_joblv(::google::protobuf::uint32 value);

  // optional uint32 jobexp = 4;
  inline bool has_jobexp() const;
  inline void clear_jobexp();
  static const int kJobexpFieldNumber = 4;
  inline ::google::protobuf::uint32 jobexp() const;
  inline void set_jobexp(::google::protobuf::uint32 value);

  // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Cmd::EProfressionDataType type() const;
  inline void set_type(::Cmd::EProfressionDataType value);

  // optional string recordname = 6;
  inline bool has_recordname() const;
  inline void clear_recordname();
  static const int kRecordnameFieldNumber = 6;
  inline const ::std::string& recordname() const;
  inline void set_recordname(const ::std::string& value);
  inline void set_recordname(const char* value);
  inline void set_recordname(const char* value, size_t size);
  inline ::std::string* mutable_recordname();
  inline ::std::string* release_recordname();
  inline void set_allocated_recordname(::std::string* recordname);

  // optional uint32 recordtime = 7;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordtimeFieldNumber = 7;
  inline ::google::protobuf::uint32 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint32 value);

  // optional uint64 charid = 8;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 8;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string charname = 9;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 9;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional uint32 pro_branch = 10;
  inline bool has_pro_branch() const;
  inline void clear_pro_branch();
  static const int kProBranchFieldNumber = 10;
  inline ::google::protobuf::uint32 pro_branch() const;
  inline void set_pro_branch(::google::protobuf::uint32 value);

  // optional .Cmd.BlobAstrolabe astrolabe_data = 11;
  inline bool has_astrolabe_data() const;
  inline void clear_astrolabe_data();
  static const int kAstrolabeDataFieldNumber = 11;
  inline const ::Cmd::BlobAstrolabe& astrolabe_data() const;
  inline ::Cmd::BlobAstrolabe* mutable_astrolabe_data();
  inline ::Cmd::BlobAstrolabe* release_astrolabe_data();
  inline void set_allocated_astrolabe_data(::Cmd::BlobAstrolabe* astrolabe_data);

  // repeated .Cmd.EquipPackData pack_data = 12;
  inline int pack_data_size() const;
  inline void clear_pack_data();
  static const int kPackDataFieldNumber = 12;
  inline const ::Cmd::EquipPackData& pack_data(int index) const;
  inline ::Cmd::EquipPackData* mutable_pack_data(int index);
  inline ::Cmd::EquipPackData* add_pack_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >&
      pack_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >*
      mutable_pack_data();

  // optional .Cmd.UserRoleData role_data = 13;
  inline bool has_role_data() const;
  inline void clear_role_data();
  static const int kRoleDataFieldNumber = 13;
  inline const ::Cmd::UserRoleData& role_data() const;
  inline ::Cmd::UserRoleData* mutable_role_data();
  inline ::Cmd::UserRoleData* release_role_data();
  inline void set_allocated_role_data(::Cmd::UserRoleData* role_data);

  // optional .Cmd.BlobUserBeing being_data = 14;
  inline bool has_being_data() const;
  inline void clear_being_data();
  static const int kBeingDataFieldNumber = 14;
  inline const ::Cmd::BlobUserBeing& being_data() const;
  inline ::Cmd::BlobUserBeing* mutable_being_data();
  inline ::Cmd::BlobUserBeing* release_being_data();
  inline void set_allocated_being_data(::Cmd::BlobUserBeing* being_data);

  // optional .Cmd.BlobAttr attr_data = 15;
  inline bool has_attr_data() const;
  inline void clear_attr_data();
  static const int kAttrDataFieldNumber = 15;
  inline const ::Cmd::BlobAttr& attr_data() const;
  inline ::Cmd::BlobAttr* mutable_attr_data();
  inline ::Cmd::BlobAttr* release_attr_data();
  inline void set_allocated_attr_data(::Cmd::BlobAttr* attr_data);

  // optional .Cmd.SkillData novice_data = 16;
  inline bool has_novice_data() const;
  inline void clear_novice_data();
  static const int kNoviceDataFieldNumber = 16;
  inline const ::Cmd::SkillData& novice_data() const;
  inline ::Cmd::SkillData* mutable_novice_data();
  inline ::Cmd::SkillData* release_novice_data();
  inline void set_allocated_novice_data(::Cmd::SkillData* novice_data);

  // optional .Cmd.BlobPet partner_data = 17;
  inline bool has_partner_data() const;
  inline void clear_partner_data();
  static const int kPartnerDataFieldNumber = 17;
  inline const ::Cmd::BlobPet& partner_data() const;
  inline ::Cmd::BlobPet* mutable_partner_data();
  inline ::Cmd::BlobPet* release_partner_data();
  inline void set_allocated_partner_data(::Cmd::BlobPet* partner_data);

  // optional bool isfirst = 18 [default = true];
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsfirstFieldNumber = 18;
  inline bool isfirst() const;
  inline void set_isfirst(bool value);

  // repeated .Cmd.UserData appearance_data = 19;
  inline int appearance_data_size() const;
  inline void clear_appearance_data();
  static const int kAppearanceDataFieldNumber = 19;
  inline const ::Cmd::UserData& appearance_data(int index) const;
  inline ::Cmd::UserData* mutable_appearance_data(int index);
  inline ::Cmd::UserData* add_appearance_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      appearance_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_appearance_data();

  // optional .Cmd.SkillValidPosData skillpos = 20;
  inline bool has_skillpos() const;
  inline void clear_skillpos();
  static const int kSkillposFieldNumber = 20;
  inline const ::Cmd::SkillValidPosData& skillpos() const;
  inline ::Cmd::SkillValidPosData* mutable_skillpos();
  inline ::Cmd::SkillValidPosData* release_skillpos();
  inline void set_allocated_skillpos(::Cmd::SkillValidPosData* skillpos);

  // optional uint32 opertime = 21;
  inline bool has_opertime() const;
  inline void clear_opertime();
  static const int kOpertimeFieldNumber = 21;
  inline ::google::protobuf::uint32 opertime() const;
  inline void set_opertime(::google::protobuf::uint32 value);

  // optional .Cmd.SkillValidPos shortcut = 22;
  inline bool has_shortcut() const;
  inline void clear_shortcut();
  static const int kShortcutFieldNumber = 22;
  inline const ::Cmd::SkillValidPos& shortcut() const;
  inline ::Cmd::SkillValidPos* mutable_shortcut();
  inline ::Cmd::SkillValidPos* release_shortcut();
  inline void set_allocated_shortcut(::Cmd::SkillValidPos* shortcut);

  // repeated .Cmd.ExchangeShopItem exchange_items = 23;
  inline int exchange_items_size() const;
  inline void clear_exchange_items();
  static const int kExchangeItemsFieldNumber = 23;
  inline const ::Cmd::ExchangeShopItem& exchange_items(int index) const;
  inline ::Cmd::ExchangeShopItem* mutable_exchange_items(int index);
  inline ::Cmd::ExchangeShopItem* add_exchange_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >&
      exchange_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >*
      mutable_exchange_items();

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_joblv();
  inline void clear_has_joblv();
  inline void set_has_jobexp();
  inline void clear_has_jobexp();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_recordname();
  inline void clear_has_recordname();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_pro_branch();
  inline void clear_has_pro_branch();
  inline void set_has_astrolabe_data();
  inline void clear_has_astrolabe_data();
  inline void set_has_role_data();
  inline void clear_has_role_data();
  inline void set_has_being_data();
  inline void clear_has_being_data();
  inline void set_has_attr_data();
  inline void clear_has_attr_data();
  inline void set_has_novice_data();
  inline void clear_has_novice_data();
  inline void set_has_partner_data();
  inline void clear_has_partner_data();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();
  inline void set_has_skillpos();
  inline void clear_has_skillpos();
  inline void set_has_opertime();
  inline void clear_has_opertime();
  inline void set_has_shortcut();
  inline void clear_has_shortcut();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 joblv_;
  ::google::protobuf::uint32 jobexp_;
  ::std::string* recordname_;
  int type_;
  ::google::protobuf::uint32 recordtime_;
  ::google::protobuf::uint64 charid_;
  ::std::string* charname_;
  ::Cmd::BlobAstrolabe* astrolabe_data_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData > pack_data_;
  ::Cmd::UserRoleData* role_data_;
  ::Cmd::BlobUserBeing* being_data_;
  ::google::protobuf::uint32 pro_branch_;
  bool isfirst_;
  ::Cmd::BlobAttr* attr_data_;
  ::Cmd::SkillData* novice_data_;
  ::Cmd::BlobPet* partner_data_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > appearance_data_;
  ::Cmd::SkillValidPosData* skillpos_;
  ::Cmd::SkillValidPos* shortcut_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem > exchange_items_;
  ::google::protobuf::uint32 opertime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ProfessionData* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionSvrData : public ::google::protobuf::Message {
 public:
  ProfessionSvrData();
  virtual ~ProfessionSvrData();

  ProfessionSvrData(const ProfessionSvrData& from);

  inline ProfessionSvrData& operator=(const ProfessionSvrData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionSvrData& default_instance();

  void Swap(ProfessionSvrData* other);

  // implements Message ----------------------------------------------

  ProfessionSvrData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionSvrData& from);
  void MergeFrom(const ProfessionSvrData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 bepro_1_time = 2 [default = 0];
  inline bool has_bepro_1_time() const;
  inline void clear_bepro_1_time();
  static const int kBepro1TimeFieldNumber = 2;
  inline ::google::protobuf::uint32 bepro_1_time() const;
  inline void set_bepro_1_time(::google::protobuf::uint32 value);

  // optional uint32 bepro_2_time = 3 [default = 0];
  inline bool has_bepro_2_time() const;
  inline void clear_bepro_2_time();
  static const int kBepro2TimeFieldNumber = 3;
  inline ::google::protobuf::uint32 bepro_2_time() const;
  inline void set_bepro_2_time(::google::protobuf::uint32 value);

  // optional uint32 bepro_3_time = 4 [default = 0];
  inline bool has_bepro_3_time() const;
  inline void clear_bepro_3_time();
  static const int kBepro3TimeFieldNumber = 4;
  inline ::google::protobuf::uint32 bepro_3_time() const;
  inline void set_bepro_3_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionSvrData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bepro_1_time();
  inline void clear_has_bepro_1_time();
  inline void set_has_bepro_2_time();
  inline void clear_has_bepro_2_time();
  inline void set_has_bepro_3_time();
  inline void clear_has_bepro_3_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 bepro_1_time_;
  ::google::protobuf::uint32 bepro_2_time_;
  ::google::protobuf::uint32 bepro_3_time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ProfessionSvrData* default_instance_;
};
// -------------------------------------------------------------------

class BlobProfession : public ::google::protobuf::Message {
 public:
  BlobProfession();
  virtual ~BlobProfession();

  BlobProfession(const BlobProfession& from);

  inline BlobProfession& operator=(const BlobProfession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProfession& default_instance();

  void Swap(BlobProfession* other);

  // implements Message ----------------------------------------------

  BlobProfession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProfession& from);
  void MergeFrom(const BlobProfession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.ProfessionData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::ProfessionData& datas(int index) const;
  inline ::Cmd::ProfessionData* mutable_datas(int index);
  inline ::Cmd::ProfessionData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >*
      mutable_datas();

  // repeated .Cmd.ProfessionSvrData svr_datas = 3;
  inline int svr_datas_size() const;
  inline void clear_svr_datas();
  static const int kSvrDatasFieldNumber = 3;
  inline const ::Cmd::ProfessionSvrData& svr_datas(int index) const;
  inline ::Cmd::ProfessionSvrData* mutable_svr_datas(int index);
  inline ::Cmd::ProfessionSvrData* add_svr_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionSvrData >&
      svr_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionSvrData >*
      mutable_svr_datas();

  // optional uint32 last_load_time = 2 [default = 0];
  inline bool has_last_load_time() const;
  inline void clear_last_load_time();
  static const int kLastLoadTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_load_time() const;
  inline void set_last_load_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobProfession)
 private:
  inline void set_has_last_load_time();
  inline void clear_has_last_load_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionSvrData > svr_datas_;
  ::google::protobuf::uint32 last_load_time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobProfession* default_instance_;
};
// -------------------------------------------------------------------

class BlobRecordInfo : public ::google::protobuf::Message {
 public:
  BlobRecordInfo();
  virtual ~BlobRecordInfo();

  BlobRecordInfo(const BlobRecordInfo& from);

  inline BlobRecordInfo& operator=(const BlobRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobRecordInfo& default_instance();

  void Swap(BlobRecordInfo* other);

  // implements Message ----------------------------------------------

  BlobRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobRecordInfo& from);
  void MergeFrom(const BlobRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 buytimes = 1;
  inline bool has_buytimes() const;
  inline void clear_buytimes();
  static const int kBuytimesFieldNumber = 1;
  inline ::google::protobuf::uint32 buytimes() const;
  inline void set_buytimes(::google::protobuf::uint32 value);

  // optional uint32 last_load_time = 2;
  inline bool has_last_load_time() const;
  inline void clear_last_load_time();
  static const int kLastLoadTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_load_time() const;
  inline void set_last_load_time(::google::protobuf::uint32 value);

  // repeated .Cmd.ProfessionData records = 3;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 3;
  inline const ::Cmd::ProfessionData& records(int index) const;
  inline ::Cmd::ProfessionData* mutable_records(int index);
  inline ::Cmd::ProfessionData* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >*
      mutable_records();

  // optional uint32 dest_charid = 4;
  inline bool has_dest_charid() const;
  inline void clear_dest_charid();
  static const int kDestCharidFieldNumber = 4;
  inline ::google::protobuf::uint32 dest_charid() const;
  inline void set_dest_charid(::google::protobuf::uint32 value);

  // optional uint32 dest_map = 5;
  inline bool has_dest_map() const;
  inline void clear_dest_map();
  static const int kDestMapFieldNumber = 5;
  inline ::google::protobuf::uint32 dest_map() const;
  inline void set_dest_map(::google::protobuf::uint32 value);

  // optional uint32 dest_slotid = 6;
  inline bool has_dest_slotid() const;
  inline void clear_dest_slotid();
  static const int kDestSlotidFieldNumber = 6;
  inline ::google::protobuf::uint32 dest_slotid() const;
  inline void set_dest_slotid(::google::protobuf::uint32 value);

  // optional uint32 card_expiretime = 7;
  inline bool has_card_expiretime() const;
  inline void clear_card_expiretime();
  static const int kCardExpiretimeFieldNumber = 7;
  inline ::google::protobuf::uint32 card_expiretime() const;
  inline void set_card_expiretime(::google::protobuf::uint32 value);

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 8;
  inline int astrol_data_size() const;
  inline void clear_astrol_data();
  static const int kAstrolDataFieldNumber = 8;
  inline const ::Cmd::UserAstrolMaterialData& astrol_data(int index) const;
  inline ::Cmd::UserAstrolMaterialData* mutable_astrol_data(int index);
  inline ::Cmd::UserAstrolMaterialData* add_astrol_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >&
      astrol_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >*
      mutable_astrol_data();

  // @@protoc_insertion_point(class_scope:Cmd.BlobRecordInfo)
 private:
  inline void set_has_buytimes();
  inline void clear_has_buytimes();
  inline void set_has_last_load_time();
  inline void clear_has_last_load_time();
  inline void set_has_dest_charid();
  inline void clear_has_dest_charid();
  inline void set_has_dest_map();
  inline void clear_has_dest_map();
  inline void set_has_dest_slotid();
  inline void clear_has_dest_slotid();
  inline void set_has_card_expiretime();
  inline void clear_has_card_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buytimes_;
  ::google::protobuf::uint32 last_load_time_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData > records_;
  ::google::protobuf::uint32 dest_charid_;
  ::google::protobuf::uint32 dest_map_;
  ::google::protobuf::uint32 dest_slotid_;
  ::google::protobuf::uint32 card_expiretime_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData > astrol_data_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserProfessionData : public ::google::protobuf::Message {
 public:
  UserProfessionData();
  virtual ~UserProfessionData();

  UserProfessionData(const UserProfessionData& from);

  inline UserProfessionData& operator=(const UserProfessionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserProfessionData& default_instance();

  void Swap(UserProfessionData* other);

  // implements Message ----------------------------------------------

  UserProfessionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserProfessionData& from);
  void MergeFrom(const UserProfessionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 profession = 1;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 1;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint32 joblv = 2;
  inline bool has_joblv() const;
  inline void clear_joblv();
  static const int kJoblvFieldNumber = 2;
  inline ::google::protobuf::uint32 joblv() const;
  inline void set_joblv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserProfessionData)
 private:
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_joblv();
  inline void clear_has_joblv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 joblv_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static UserProfessionData* default_instance_;
};
// -------------------------------------------------------------------

class ReqUserProfessionCmd : public ::google::protobuf::Message {
 public:
  ReqUserProfessionCmd();
  virtual ~ReqUserProfessionCmd();

  ReqUserProfessionCmd(const ReqUserProfessionCmd& from);

  inline ReqUserProfessionCmd& operator=(const ReqUserProfessionCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUserProfessionCmd& default_instance();

  void Swap(ReqUserProfessionCmd* other);

  // implements Message ----------------------------------------------

  ReqUserProfessionCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUserProfessionCmd& from);
  void MergeFrom(const ReqUserProfessionCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_PROFESSION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 accid = 4;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string scenename = 5;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kScenenameFieldNumber = 5;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // repeated .Cmd.UserProfessionData datas = 6;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 6;
  inline const ::Cmd::UserProfessionData& datas(int index) const;
  inline ::Cmd::UserProfessionData* mutable_datas(int index);
  inline ::Cmd::UserProfessionData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserProfessionData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserProfessionData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.ReqUserProfessionCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_scenename();
  inline void clear_has_scenename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 accid_;
  ::std::string* scenename_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserProfessionData > datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqUserProfessionCmd* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionSaveRecordCmd : public ::google::protobuf::Message {
 public:
  ProfessionSaveRecordCmd();
  virtual ~ProfessionSaveRecordCmd();

  ProfessionSaveRecordCmd(const ProfessionSaveRecordCmd& from);

  inline ProfessionSaveRecordCmd& operator=(const ProfessionSaveRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionSaveRecordCmd& default_instance();

  void Swap(ProfessionSaveRecordCmd* other);

  // implements Message ----------------------------------------------

  ProfessionSaveRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionSaveRecordCmd& from);
  void MergeFrom(const ProfessionSaveRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_SAVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 branch = 4 [default = 0];
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 4;
  inline ::google::protobuf::uint32 branch() const;
  inline void set_branch(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionSaveRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_branch();
  inline void clear_has_branch();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 branch_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ProfessionSaveRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionQueryRecordCmd : public ::google::protobuf::Message {
 public:
  ProfessionQueryRecordCmd();
  virtual ~ProfessionQueryRecordCmd();

  ProfessionQueryRecordCmd(const ProfessionQueryRecordCmd& from);

  inline ProfessionQueryRecordCmd& operator=(const ProfessionQueryRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionQueryRecordCmd& default_instance();

  void Swap(ProfessionQueryRecordCmd* other);

  // implements Message ----------------------------------------------

  ProfessionQueryRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionQueryRecordCmd& from);
  void MergeFrom(const ProfessionQueryRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string scenename = 4;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kScenenameFieldNumber = 4;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // repeated bytes datas = 5;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 5;
  inline const ::std::string& datas(int index) const;
  inline ::std::string* mutable_datas(int index);
  inline void set_datas(int index, const ::std::string& value);
  inline void set_datas(int index, const char* value);
  inline void set_datas(int index, const void* value, size_t size);
  inline ::std::string* add_datas();
  inline void add_datas(const ::std::string& value);
  inline void add_datas(const char* value);
  inline void add_datas(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionQueryRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_scenename();
  inline void clear_has_scenename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* scenename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datas_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ProfessionQueryRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class ActivityQuestItem : public ::google::protobuf::Message {
 public:
  ActivityQuestItem();
  virtual ~ActivityQuestItem();

  ActivityQuestItem(const ActivityQuestItem& from);

  inline ActivityQuestItem& operator=(const ActivityQuestItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityQuestItem& default_instance();

  void Swap(ActivityQuestItem* other);

  // implements Message ----------------------------------------------

  ActivityQuestItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityQuestItem& from);
  void MergeFrom(const ActivityQuestItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 questid = 1 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 1;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 finishcount = 2 [default = 0];
  inline bool has_finishcount() const;
  inline void clear_finishcount();
  static const int kFinishcountFieldNumber = 2;
  inline ::google::protobuf::uint32 finishcount() const;
  inline void set_finishcount(::google::protobuf::uint32 value);

  // optional uint32 lastquesttime = 3 [default = 0];
  inline bool has_lastquesttime() const;
  inline void clear_lastquesttime();
  static const int kLastquesttimeFieldNumber = 3;
  inline ::google::protobuf::uint32 lastquesttime() const;
  inline void set_lastquesttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ActivityQuestItem)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_finishcount();
  inline void clear_has_finishcount();
  inline void set_has_lastquesttime();
  inline void clear_has_lastquesttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 finishcount_;
  ::google::protobuf::uint32 lastquesttime_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static ActivityQuestItem* default_instance_;
};
// -------------------------------------------------------------------

class BlobActivityQuest : public ::google::protobuf::Message {
 public:
  BlobActivityQuest();
  virtual ~BlobActivityQuest();

  BlobActivityQuest(const BlobActivityQuest& from);

  inline BlobActivityQuest& operator=(const BlobActivityQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobActivityQuest& default_instance();

  void Swap(BlobActivityQuest* other);

  // implements Message ----------------------------------------------

  BlobActivityQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobActivityQuest& from);
  void MergeFrom(const BlobActivityQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.ActivityQuestItem activityitems = 1;
  inline int activityitems_size() const;
  inline void clear_activityitems();
  static const int kActivityitemsFieldNumber = 1;
  inline const ::Cmd::ActivityQuestItem& activityitems(int index) const;
  inline ::Cmd::ActivityQuestItem* mutable_activityitems(int index);
  inline ::Cmd::ActivityQuestItem* add_activityitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityQuestItem >&
      activityitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityQuestItem >*
      mutable_activityitems();

  // @@protoc_insertion_point(class_scope:Cmd.BlobActivityQuest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityQuestItem > activityitems_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobActivityQuest* default_instance_;
};
// -------------------------------------------------------------------

class BlobBooth : public ::google::protobuf::Message {
 public:
  BlobBooth();
  virtual ~BlobBooth();

  BlobBooth(const BlobBooth& from);

  inline BlobBooth& operator=(const BlobBooth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobBooth& default_instance();

  void Swap(BlobBooth* other);

  // implements Message ----------------------------------------------

  BlobBooth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobBooth& from);
  void MergeFrom(const BlobBooth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobBooth)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobBooth* default_instance_;
};
// -------------------------------------------------------------------

class BlobElementElfData : public ::google::protobuf::Message {
 public:
  BlobElementElfData();
  virtual ~BlobElementElfData();

  BlobElementElfData(const BlobElementElfData& from);

  inline BlobElementElfData& operator=(const BlobElementElfData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobElementElfData& default_instance();

  void Swap(BlobElementElfData* other);

  // implements Message ----------------------------------------------

  BlobElementElfData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobElementElfData& from);
  void MergeFrom(const BlobElementElfData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_element_id = 1;
  inline bool has_cur_element_id() const;
  inline void clear_cur_element_id();
  static const int kCurElementIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_element_id() const;
  inline void set_cur_element_id(::google::protobuf::uint32 value);

  // optional uint32 clear_time = 2;
  inline bool has_clear_time() const;
  inline void clear_clear_time();
  static const int kClearTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 clear_time() const;
  inline void set_clear_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BlobElementElfData)
 private:
  inline void set_has_cur_element_id();
  inline void clear_has_cur_element_id();
  inline void set_has_clear_time();
  inline void clear_has_clear_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cur_element_id_;
  ::google::protobuf::uint32 clear_time_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static BlobElementElfData* default_instance_;
};
// -------------------------------------------------------------------

class CheatTagRecordCmd : public ::google::protobuf::Message {
 public:
  CheatTagRecordCmd();
  virtual ~CheatTagRecordCmd();

  CheatTagRecordCmd(const CheatTagRecordCmd& from);

  inline CheatTagRecordCmd& operator=(const CheatTagRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheatTagRecordCmd& default_instance();

  void Swap(CheatTagRecordCmd* other);

  // implements Message ----------------------------------------------

  CheatTagRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheatTagRecordCmd& from);
  void MergeFrom(const CheatTagRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 mininterval = 4 [default = 0];
  inline bool has_mininterval() const;
  inline void clear_mininterval();
  static const int kMinintervalFieldNumber = 4;
  inline ::google::protobuf::uint32 mininterval() const;
  inline void set_mininterval(::google::protobuf::uint32 value);

  // optional uint32 frame = 5 [default = 0];
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 5;
  inline ::google::protobuf::uint32 frame() const;
  inline void set_frame(::google::protobuf::uint32 value);

  // optional uint32 count = 6 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CheatTagRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mininterval();
  inline void clear_has_mininterval();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 mininterval_;
  ::google::protobuf::uint32 frame_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static CheatTagRecordCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheatTagQueryRecordCmd : public ::google::protobuf::Message {
 public:
  CheatTagQueryRecordCmd();
  virtual ~CheatTagQueryRecordCmd();

  CheatTagQueryRecordCmd(const CheatTagQueryRecordCmd& from);

  inline CheatTagQueryRecordCmd& operator=(const CheatTagQueryRecordCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheatTagQueryRecordCmd& default_instance();

  void Swap(CheatTagQueryRecordCmd* other);

  // implements Message ----------------------------------------------

  CheatTagQueryRecordCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheatTagQueryRecordCmd& from);
  void MergeFrom(const CheatTagQueryRecordCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordParam param() const;
  inline void set_param(::Cmd::RecordParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string scenename = 4;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kScenenameFieldNumber = 4;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // @@protoc_insertion_point(class_scope:Cmd.CheatTagQueryRecordCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_scenename();
  inline void clear_has_scenename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* scenename_;
  friend void  protobuf_AddDesc_RecordCmd_2eproto();
  friend void protobuf_AssignDesc_RecordCmd_2eproto();
  friend void protobuf_ShutdownFile_RecordCmd_2eproto();

  void InitAsDefaultInstance();
  static CheatTagQueryRecordCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// NotifyLoginRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool NotifyLoginRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyLoginRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyLoginRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyLoginRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command NotifyLoginRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NotifyLoginRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NotifyLoginRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NotifyLoginRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_NOTIFYLOGIN];
inline bool NotifyLoginRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyLoginRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyLoginRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyLoginRecordCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::RecordParam NotifyLoginRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NotifyLoginRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void NotifyLoginRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NotifyLoginRecordCmd.param)
}

// optional uint64 id = 3 [default = 0];
inline bool NotifyLoginRecordCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyLoginRecordCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyLoginRecordCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyLoginRecordCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 NotifyLoginRecordCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.NotifyLoginRecordCmd.id)
  return id_;
}
inline void NotifyLoginRecordCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NotifyLoginRecordCmd.id)
}

// optional uint64 accid = 4 [default = 0];
inline bool NotifyLoginRecordCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyLoginRecordCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyLoginRecordCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyLoginRecordCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 NotifyLoginRecordCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.NotifyLoginRecordCmd.accid)
  return accid_;
}
inline void NotifyLoginRecordCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NotifyLoginRecordCmd.accid)
}

// optional string sceneName = 5;
inline bool NotifyLoginRecordCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyLoginRecordCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyLoginRecordCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyLoginRecordCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& NotifyLoginRecordCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.NotifyLoginRecordCmd.sceneName)
  return *scenename_;
}
inline void NotifyLoginRecordCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NotifyLoginRecordCmd.sceneName)
}
inline void NotifyLoginRecordCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NotifyLoginRecordCmd.sceneName)
}
inline void NotifyLoginRecordCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NotifyLoginRecordCmd.sceneName)
}
inline ::std::string* NotifyLoginRecordCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NotifyLoginRecordCmd.sceneName)
  return scenename_;
}
inline ::std::string* NotifyLoginRecordCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NotifyLoginRecordCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NotifyLoginRecordCmd.sceneName)
}

// -------------------------------------------------------------------

// RecordUserData

// optional .Cmd.UserAccData acc = 1;
inline bool RecordUserData::has_acc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordUserData::set_has_acc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordUserData::clear_has_acc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordUserData::clear_acc() {
  if (acc_ != NULL) acc_->::Cmd::UserAccData::Clear();
  clear_has_acc();
}
inline const ::Cmd::UserAccData& RecordUserData::acc() const {
  // @@protoc_insertion_point(field_get:Cmd.RecordUserData.acc)
  return acc_ != NULL ? *acc_ : *default_instance_->acc_;
}
inline ::Cmd::UserAccData* RecordUserData::mutable_acc() {
  set_has_acc();
  if (acc_ == NULL) acc_ = new ::Cmd::UserAccData;
  // @@protoc_insertion_point(field_mutable:Cmd.RecordUserData.acc)
  return acc_;
}
inline ::Cmd::UserAccData* RecordUserData::release_acc() {
  clear_has_acc();
  ::Cmd::UserAccData* temp = acc_;
  acc_ = NULL;
  return temp;
}
inline void RecordUserData::set_allocated_acc(::Cmd::UserAccData* acc) {
  delete acc_;
  acc_ = acc;
  if (acc) {
    set_has_acc();
  } else {
    clear_has_acc();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RecordUserData.acc)
}

// optional .Cmd.UserBaseData base = 2;
inline bool RecordUserData::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordUserData::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordUserData::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordUserData::clear_base() {
  if (base_ != NULL) base_->::Cmd::UserBaseData::Clear();
  clear_has_base();
}
inline const ::Cmd::UserBaseData& RecordUserData::base() const {
  // @@protoc_insertion_point(field_get:Cmd.RecordUserData.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::Cmd::UserBaseData* RecordUserData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::Cmd::UserBaseData;
  // @@protoc_insertion_point(field_mutable:Cmd.RecordUserData.base)
  return base_;
}
inline ::Cmd::UserBaseData* RecordUserData::release_base() {
  clear_has_base();
  ::Cmd::UserBaseData* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RecordUserData::set_allocated_base(::Cmd::UserBaseData* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RecordUserData.base)
}

// optional .Cmd.RedisUserData redis = 3;
inline bool RecordUserData::has_redis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordUserData::set_has_redis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordUserData::clear_has_redis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordUserData::clear_redis() {
  if (redis_ != NULL) redis_->::Cmd::RedisUserData::Clear();
  clear_has_redis();
}
inline const ::Cmd::RedisUserData& RecordUserData::redis() const {
  // @@protoc_insertion_point(field_get:Cmd.RecordUserData.redis)
  return redis_ != NULL ? *redis_ : *default_instance_->redis_;
}
inline ::Cmd::RedisUserData* RecordUserData::mutable_redis() {
  set_has_redis();
  if (redis_ == NULL) redis_ = new ::Cmd::RedisUserData;
  // @@protoc_insertion_point(field_mutable:Cmd.RecordUserData.redis)
  return redis_;
}
inline ::Cmd::RedisUserData* RecordUserData::release_redis() {
  clear_has_redis();
  ::Cmd::RedisUserData* temp = redis_;
  redis_ = NULL;
  return temp;
}
inline void RecordUserData::set_allocated_redis(::Cmd::RedisUserData* redis) {
  delete redis_;
  redis_ = redis;
  if (redis) {
    set_has_redis();
  } else {
    clear_has_redis();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RecordUserData.redis)
}

// optional bytes acc_data = 4;
inline bool RecordUserData::has_acc_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordUserData::set_has_acc_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordUserData::clear_has_acc_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordUserData::clear_acc_data() {
  if (acc_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_data_->clear();
  }
  clear_has_acc_data();
}
inline const ::std::string& RecordUserData::acc_data() const {
  // @@protoc_insertion_point(field_get:Cmd.RecordUserData.acc_data)
  return *acc_data_;
}
inline void RecordUserData::set_acc_data(const ::std::string& value) {
  set_has_acc_data();
  if (acc_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_data_ = new ::std::string;
  }
  acc_data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RecordUserData.acc_data)
}
inline void RecordUserData::set_acc_data(const char* value) {
  set_has_acc_data();
  if (acc_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_data_ = new ::std::string;
  }
  acc_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RecordUserData.acc_data)
}
inline void RecordUserData::set_acc_data(const void* value, size_t size) {
  set_has_acc_data();
  if (acc_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_data_ = new ::std::string;
  }
  acc_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RecordUserData.acc_data)
}
inline ::std::string* RecordUserData::mutable_acc_data() {
  set_has_acc_data();
  if (acc_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RecordUserData.acc_data)
  return acc_data_;
}
inline ::std::string* RecordUserData::release_acc_data() {
  clear_has_acc_data();
  if (acc_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = acc_data_;
    acc_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordUserData::set_allocated_acc_data(::std::string* acc_data) {
  if (acc_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_data_;
  }
  if (acc_data) {
    set_has_acc_data();
    acc_data_ = acc_data;
  } else {
    clear_has_acc_data();
    acc_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RecordUserData.acc_data)
}

// optional bytes char_data = 5;
inline bool RecordUserData::has_char_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordUserData::set_has_char_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordUserData::clear_has_char_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordUserData::clear_char_data() {
  if (char_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_data_->clear();
  }
  clear_has_char_data();
}
inline const ::std::string& RecordUserData::char_data() const {
  // @@protoc_insertion_point(field_get:Cmd.RecordUserData.char_data)
  return *char_data_;
}
inline void RecordUserData::set_char_data(const ::std::string& value) {
  set_has_char_data();
  if (char_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_data_ = new ::std::string;
  }
  char_data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RecordUserData.char_data)
}
inline void RecordUserData::set_char_data(const char* value) {
  set_has_char_data();
  if (char_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_data_ = new ::std::string;
  }
  char_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RecordUserData.char_data)
}
inline void RecordUserData::set_char_data(const void* value, size_t size) {
  set_has_char_data();
  if (char_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_data_ = new ::std::string;
  }
  char_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RecordUserData.char_data)
}
inline ::std::string* RecordUserData::mutable_char_data() {
  set_has_char_data();
  if (char_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RecordUserData.char_data)
  return char_data_;
}
inline ::std::string* RecordUserData::release_char_data() {
  clear_has_char_data();
  if (char_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = char_data_;
    char_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecordUserData::set_allocated_char_data(::std::string* char_data) {
  if (char_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete char_data_;
  }
  if (char_data) {
    set_has_char_data();
    char_data_ = char_data;
  } else {
    clear_has_char_data();
    char_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RecordUserData.char_data)
}

// -------------------------------------------------------------------

// RedisUserData

// optional uint32 portrait = 5 [default = 0];
inline bool RedisUserData::has_portrait() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisUserData::set_has_portrait() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisUserData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisUserData::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 RedisUserData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.portrait)
  return portrait_;
}
inline void RedisUserData::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.portrait)
}

// optional uint32 clothcolor = 13 [default = 0];
inline bool RedisUserData::has_clothcolor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisUserData::set_has_clothcolor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisUserData::clear_has_clothcolor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisUserData::clear_clothcolor() {
  clothcolor_ = 0u;
  clear_has_clothcolor();
}
inline ::google::protobuf::uint32 RedisUserData::clothcolor() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.clothcolor)
  return clothcolor_;
}
inline void RedisUserData::set_clothcolor(::google::protobuf::uint32 value) {
  set_has_clothcolor();
  clothcolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.clothcolor)
}

// optional uint32 manuallv = 20 [default = 0];
inline bool RedisUserData::has_manuallv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedisUserData::set_has_manuallv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedisUserData::clear_has_manuallv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedisUserData::clear_manuallv() {
  manuallv_ = 0u;
  clear_has_manuallv();
}
inline ::google::protobuf::uint32 RedisUserData::manuallv() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.manuallv)
  return manuallv_;
}
inline void RedisUserData::set_manuallv(::google::protobuf::uint32 value) {
  set_has_manuallv();
  manuallv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.manuallv)
}

// optional uint32 manualexp = 21 [default = 0];
inline bool RedisUserData::has_manualexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedisUserData::set_has_manualexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedisUserData::clear_has_manualexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedisUserData::clear_manualexp() {
  manualexp_ = 0u;
  clear_has_manualexp();
}
inline ::google::protobuf::uint32 RedisUserData::manualexp() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.manualexp)
  return manualexp_;
}
inline void RedisUserData::set_manualexp(::google::protobuf::uint32 value) {
  set_has_manualexp();
  manualexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.manualexp)
}

// optional uint32 querytype = 23 [default = 0];
inline bool RedisUserData::has_querytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedisUserData::set_has_querytype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedisUserData::clear_has_querytype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedisUserData::clear_querytype() {
  querytype_ = 0u;
  clear_has_querytype();
}
inline ::google::protobuf::uint32 RedisUserData::querytype() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.querytype)
  return querytype_;
}
inline void RedisUserData::set_querytype(::google::protobuf::uint32 value) {
  set_has_querytype();
  querytype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.querytype)
}

// optional uint32 profic = 24 [default = 0];
inline bool RedisUserData::has_profic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RedisUserData::set_has_profic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RedisUserData::clear_has_profic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RedisUserData::clear_profic() {
  profic_ = 0u;
  clear_has_profic();
}
inline ::google::protobuf::uint32 RedisUserData::profic() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.profic)
  return profic_;
}
inline void RedisUserData::set_profic(::google::protobuf::uint32 value) {
  set_has_profic();
  profic_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.profic)
}

// optional bool blink = 26 [default = false];
inline bool RedisUserData::has_blink() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RedisUserData::set_has_blink() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RedisUserData::clear_has_blink() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RedisUserData::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
inline bool RedisUserData::blink() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.blink)
  return blink_;
}
inline void RedisUserData::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.blink)
}

// optional bool canbetutor = 27 [default = false];
inline bool RedisUserData::has_canbetutor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RedisUserData::set_has_canbetutor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RedisUserData::clear_has_canbetutor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RedisUserData::clear_canbetutor() {
  canbetutor_ = false;
  clear_has_canbetutor();
}
inline bool RedisUserData::canbetutor() const {
  // @@protoc_insertion_point(field_get:Cmd.RedisUserData.canbetutor)
  return canbetutor_;
}
inline void RedisUserData::set_canbetutor(bool value) {
  set_has_canbetutor();
  canbetutor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedisUserData.canbetutor)
}

// -------------------------------------------------------------------

// UserDataRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool UserDataRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDataRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDataRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDataRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command UserDataRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserDataRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USERDATA];
inline bool UserDataRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDataRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDataRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDataRecordCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::RecordParam UserDataRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void UserDataRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.param)
}

// optional uint64 charid = 3;
inline bool UserDataRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDataRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDataRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDataRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserDataRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.charid)
  return charid_;
}
inline void UserDataRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.charid)
}

// optional uint64 accid = 4;
inline bool UserDataRecordCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDataRecordCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDataRecordCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDataRecordCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 UserDataRecordCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.accid)
  return accid_;
}
inline void UserDataRecordCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.accid)
}

// optional uint32 unregType = 5;
inline bool UserDataRecordCmd::has_unregtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDataRecordCmd::set_has_unregtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDataRecordCmd::clear_has_unregtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDataRecordCmd::clear_unregtype() {
  unregtype_ = 0u;
  clear_has_unregtype();
}
inline ::google::protobuf::uint32 UserDataRecordCmd::unregtype() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.unregType)
  return unregtype_;
}
inline void UserDataRecordCmd::set_unregtype(::google::protobuf::uint32 value) {
  set_has_unregtype();
  unregtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.unregType)
}

// optional bool first = 6 [default = false];
inline bool UserDataRecordCmd::has_first() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserDataRecordCmd::set_has_first() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserDataRecordCmd::clear_has_first() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserDataRecordCmd::clear_first() {
  first_ = false;
  clear_has_first();
}
inline bool UserDataRecordCmd::first() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.first)
  return first_;
}
inline void UserDataRecordCmd::set_first(bool value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.first)
}

// optional bool over = 7 [default = false];
inline bool UserDataRecordCmd::has_over() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserDataRecordCmd::set_has_over() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserDataRecordCmd::clear_has_over() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserDataRecordCmd::clear_over() {
  over_ = false;
  clear_has_over();
}
inline bool UserDataRecordCmd::over() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.over)
  return over_;
}
inline void UserDataRecordCmd::set_over(bool value) {
  set_has_over();
  over_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.over)
}

// optional bytes data = 8;
inline bool UserDataRecordCmd::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserDataRecordCmd::set_has_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserDataRecordCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserDataRecordCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& UserDataRecordCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.UserDataRecordCmd.data)
  return *data_;
}
inline void UserDataRecordCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserDataRecordCmd.data)
}
inline void UserDataRecordCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserDataRecordCmd.data)
}
inline void UserDataRecordCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserDataRecordCmd.data)
}
inline ::std::string* UserDataRecordCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserDataRecordCmd.data)
  return data_;
}
inline ::std::string* UserDataRecordCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserDataRecordCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserDataRecordCmd.data)
}

// -------------------------------------------------------------------

// ErrUserCharBaseRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool ErrUserCharBaseRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrUserCharBaseRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrUserCharBaseRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrUserCharBaseRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command ErrUserCharBaseRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ErrUserCharBaseRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ErrUserCharBaseRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ErrUserCharBaseRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_ERROR_USERDATA];
inline bool ErrUserCharBaseRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrUserCharBaseRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrUserCharBaseRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrUserCharBaseRecordCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::RecordParam ErrUserCharBaseRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ErrUserCharBaseRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void ErrUserCharBaseRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ErrUserCharBaseRecordCmd.param)
}

// optional uint64 id = 3 [default = 0];
inline bool ErrUserCharBaseRecordCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErrUserCharBaseRecordCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErrUserCharBaseRecordCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErrUserCharBaseRecordCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ErrUserCharBaseRecordCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ErrUserCharBaseRecordCmd.id)
  return id_;
}
inline void ErrUserCharBaseRecordCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ErrUserCharBaseRecordCmd.id)
}

// -------------------------------------------------------------------

// MusicUpdateCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool MusicUpdateCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MusicUpdateCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MusicUpdateCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MusicUpdateCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command MusicUpdateCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicUpdateCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MusicUpdateCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicUpdateCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_MUSIC_DATA];
inline bool MusicUpdateCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MusicUpdateCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MusicUpdateCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MusicUpdateCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::RecordParam MusicUpdateCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicUpdateCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void MusicUpdateCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicUpdateCmd.param)
}

// optional .Cmd.MusicItem item = 3;
inline bool MusicUpdateCmd::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MusicUpdateCmd::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MusicUpdateCmd::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MusicUpdateCmd::clear_item() {
  if (item_ != NULL) item_->::Cmd::MusicItem::Clear();
  clear_has_item();
}
inline const ::Cmd::MusicItem& MusicUpdateCmd::item() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicUpdateCmd.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Cmd::MusicItem* MusicUpdateCmd::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Cmd::MusicItem;
  // @@protoc_insertion_point(field_mutable:Cmd.MusicUpdateCmd.item)
  return item_;
}
inline ::Cmd::MusicItem* MusicUpdateCmd::release_item() {
  clear_has_item();
  ::Cmd::MusicItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void MusicUpdateCmd::set_allocated_item(::Cmd::MusicItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MusicUpdateCmd.item)
}

// -------------------------------------------------------------------

// LoadLuaSceneRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool LoadLuaSceneRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadLuaSceneRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadLuaSceneRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadLuaSceneRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command LoadLuaSceneRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadLuaSceneRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LoadLuaSceneRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoadLuaSceneRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOADLUA];
inline bool LoadLuaSceneRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoadLuaSceneRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoadLuaSceneRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoadLuaSceneRecordCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::RecordParam LoadLuaSceneRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadLuaSceneRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void LoadLuaSceneRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoadLuaSceneRecordCmd.param)
}

// optional string table = 3;
inline bool LoadLuaSceneRecordCmd::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoadLuaSceneRecordCmd::set_has_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoadLuaSceneRecordCmd::clear_has_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoadLuaSceneRecordCmd::clear_table() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& LoadLuaSceneRecordCmd::table() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadLuaSceneRecordCmd.table)
  return *table_;
}
inline void LoadLuaSceneRecordCmd::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoadLuaSceneRecordCmd.table)
}
inline void LoadLuaSceneRecordCmd::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoadLuaSceneRecordCmd.table)
}
inline void LoadLuaSceneRecordCmd::set_table(const char* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoadLuaSceneRecordCmd.table)
}
inline ::std::string* LoadLuaSceneRecordCmd::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoadLuaSceneRecordCmd.table)
  return table_;
}
inline ::std::string* LoadLuaSceneRecordCmd::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoadLuaSceneRecordCmd::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoadLuaSceneRecordCmd.table)
}

// optional string lua = 4;
inline bool LoadLuaSceneRecordCmd::has_lua() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoadLuaSceneRecordCmd::set_has_lua() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoadLuaSceneRecordCmd::clear_has_lua() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoadLuaSceneRecordCmd::clear_lua() {
  if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lua_->clear();
  }
  clear_has_lua();
}
inline const ::std::string& LoadLuaSceneRecordCmd::lua() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadLuaSceneRecordCmd.lua)
  return *lua_;
}
inline void LoadLuaSceneRecordCmd::set_lua(const ::std::string& value) {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lua_ = new ::std::string;
  }
  lua_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoadLuaSceneRecordCmd.lua)
}
inline void LoadLuaSceneRecordCmd::set_lua(const char* value) {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lua_ = new ::std::string;
  }
  lua_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoadLuaSceneRecordCmd.lua)
}
inline void LoadLuaSceneRecordCmd::set_lua(const char* value, size_t size) {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lua_ = new ::std::string;
  }
  lua_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoadLuaSceneRecordCmd.lua)
}
inline ::std::string* LoadLuaSceneRecordCmd::mutable_lua() {
  set_has_lua();
  if (lua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lua_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoadLuaSceneRecordCmd.lua)
  return lua_;
}
inline ::std::string* LoadLuaSceneRecordCmd::release_lua() {
  clear_has_lua();
  if (lua_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lua_;
    lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoadLuaSceneRecordCmd::set_allocated_lua(::std::string* lua) {
  if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lua_;
  }
  if (lua) {
    set_has_lua();
    lua_ = lua;
  } else {
    clear_has_lua();
    lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoadLuaSceneRecordCmd.lua)
}

// optional string log = 5;
inline bool LoadLuaSceneRecordCmd::has_log() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoadLuaSceneRecordCmd::set_has_log() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoadLuaSceneRecordCmd::clear_has_log() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoadLuaSceneRecordCmd::clear_log() {
  if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_->clear();
  }
  clear_has_log();
}
inline const ::std::string& LoadLuaSceneRecordCmd::log() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadLuaSceneRecordCmd.log)
  return *log_;
}
inline void LoadLuaSceneRecordCmd::set_log(const ::std::string& value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_ = new ::std::string;
  }
  log_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoadLuaSceneRecordCmd.log)
}
inline void LoadLuaSceneRecordCmd::set_log(const char* value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_ = new ::std::string;
  }
  log_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoadLuaSceneRecordCmd.log)
}
inline void LoadLuaSceneRecordCmd::set_log(const char* value, size_t size) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_ = new ::std::string;
  }
  log_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoadLuaSceneRecordCmd.log)
}
inline ::std::string* LoadLuaSceneRecordCmd::mutable_log() {
  set_has_log();
  if (log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoadLuaSceneRecordCmd.log)
  return log_;
}
inline ::std::string* LoadLuaSceneRecordCmd::release_log() {
  clear_has_log();
  if (log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_;
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoadLuaSceneRecordCmd::set_allocated_log(::std::string* log) {
  if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_;
  }
  if (log) {
    set_has_log();
    log_ = log;
  } else {
    clear_has_log();
    log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoadLuaSceneRecordCmd.log)
}

// -------------------------------------------------------------------

// ItemModifyRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool ItemModifyRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemModifyRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemModifyRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemModifyRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command ItemModifyRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemModifyRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemModifyRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemModifyRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_STORE_ITEMMODIFY];
inline bool ItemModifyRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemModifyRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemModifyRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemModifyRecordCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::RecordParam ItemModifyRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemModifyRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void ItemModifyRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemModifyRecordCmd.param)
}

// optional uint64 accid = 3 [default = 0];
inline bool ItemModifyRecordCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemModifyRecordCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemModifyRecordCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemModifyRecordCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 ItemModifyRecordCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemModifyRecordCmd.accid)
  return accid_;
}
inline void ItemModifyRecordCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemModifyRecordCmd.accid)
}

// optional uint64 charid = 4 [default = 0];
inline bool ItemModifyRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemModifyRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemModifyRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemModifyRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ItemModifyRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemModifyRecordCmd.charid)
  return charid_;
}
inline void ItemModifyRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemModifyRecordCmd.charid)
}

// optional uint32 newid = 7 [default = 0];
inline bool ItemModifyRecordCmd::has_newid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemModifyRecordCmd::set_has_newid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemModifyRecordCmd::clear_has_newid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemModifyRecordCmd::clear_newid() {
  newid_ = 0u;
  clear_has_newid();
}
inline ::google::protobuf::uint32 ItemModifyRecordCmd::newid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemModifyRecordCmd.newid)
  return newid_;
}
inline void ItemModifyRecordCmd::set_newid(::google::protobuf::uint32 value) {
  set_has_newid();
  newid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemModifyRecordCmd.newid)
}

// optional string scenename = 5;
inline bool ItemModifyRecordCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemModifyRecordCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemModifyRecordCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemModifyRecordCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& ItemModifyRecordCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemModifyRecordCmd.scenename)
  return *scenename_;
}
inline void ItemModifyRecordCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemModifyRecordCmd.scenename)
}
inline void ItemModifyRecordCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemModifyRecordCmd.scenename)
}
inline void ItemModifyRecordCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemModifyRecordCmd.scenename)
}
inline ::std::string* ItemModifyRecordCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemModifyRecordCmd.scenename)
  return scenename_;
}
inline ::std::string* ItemModifyRecordCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemModifyRecordCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemModifyRecordCmd.scenename)
}

// optional string guid = 6;
inline bool ItemModifyRecordCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemModifyRecordCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemModifyRecordCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemModifyRecordCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& ItemModifyRecordCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemModifyRecordCmd.guid)
  return *guid_;
}
inline void ItemModifyRecordCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemModifyRecordCmd.guid)
}
inline void ItemModifyRecordCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemModifyRecordCmd.guid)
}
inline void ItemModifyRecordCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemModifyRecordCmd.guid)
}
inline ::std::string* ItemModifyRecordCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemModifyRecordCmd.guid)
  return guid_;
}
inline ::std::string* ItemModifyRecordCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemModifyRecordCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemModifyRecordCmd.guid)
}

// -------------------------------------------------------------------

// ChangeAuthorizeRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool ChangeAuthorizeRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeAuthorizeRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeAuthorizeRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeAuthorizeRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command ChangeAuthorizeRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeAuthorizeRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChangeAuthorizeRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeAuthorizeRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_AUTHORIZE_CHANGE];
inline bool ChangeAuthorizeRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeAuthorizeRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeAuthorizeRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeAuthorizeRecordCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::RecordParam ChangeAuthorizeRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeAuthorizeRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void ChangeAuthorizeRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeAuthorizeRecordCmd.param)
}

// optional uint64 accid = 3 [default = 0];
inline bool ChangeAuthorizeRecordCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeAuthorizeRecordCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeAuthorizeRecordCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeAuthorizeRecordCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 ChangeAuthorizeRecordCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeAuthorizeRecordCmd.accid)
  return accid_;
}
inline void ChangeAuthorizeRecordCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeAuthorizeRecordCmd.accid)
}

// optional string password = 4;
inline bool ChangeAuthorizeRecordCmd::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeAuthorizeRecordCmd::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeAuthorizeRecordCmd::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeAuthorizeRecordCmd::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& ChangeAuthorizeRecordCmd::password() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeAuthorizeRecordCmd.password)
  return *password_;
}
inline void ChangeAuthorizeRecordCmd::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeAuthorizeRecordCmd.password)
}
inline void ChangeAuthorizeRecordCmd::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeAuthorizeRecordCmd.password)
}
inline void ChangeAuthorizeRecordCmd::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeAuthorizeRecordCmd.password)
}
inline ::std::string* ChangeAuthorizeRecordCmd::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeAuthorizeRecordCmd.password)
  return password_;
}
inline ::std::string* ChangeAuthorizeRecordCmd::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeAuthorizeRecordCmd::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeAuthorizeRecordCmd.password)
}

// optional uint32 resettime = 5;
inline bool ChangeAuthorizeRecordCmd::has_resettime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeAuthorizeRecordCmd::set_has_resettime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeAuthorizeRecordCmd::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeAuthorizeRecordCmd::clear_resettime() {
  resettime_ = 0u;
  clear_has_resettime();
}
inline ::google::protobuf::uint32 ChangeAuthorizeRecordCmd::resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeAuthorizeRecordCmd.resettime)
  return resettime_;
}
inline void ChangeAuthorizeRecordCmd::set_resettime(::google::protobuf::uint32 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeAuthorizeRecordCmd.resettime)
}

// -------------------------------------------------------------------

// GuildMusicQueryRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool GuildMusicQueryRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMusicQueryRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMusicQueryRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMusicQueryRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command GuildMusicQueryRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicQueryRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GuildMusicQueryRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicQueryRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_QUERY];
inline bool GuildMusicQueryRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMusicQueryRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMusicQueryRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMusicQueryRecordCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::RecordParam GuildMusicQueryRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicQueryRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void GuildMusicQueryRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicQueryRecordCmd.param)
}

// optional string scenename = 3;
inline bool GuildMusicQueryRecordCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildMusicQueryRecordCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildMusicQueryRecordCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildMusicQueryRecordCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& GuildMusicQueryRecordCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicQueryRecordCmd.scenename)
  return *scenename_;
}
inline void GuildMusicQueryRecordCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicQueryRecordCmd.scenename)
}
inline void GuildMusicQueryRecordCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GuildMusicQueryRecordCmd.scenename)
}
inline void GuildMusicQueryRecordCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GuildMusicQueryRecordCmd.scenename)
}
inline ::std::string* GuildMusicQueryRecordCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GuildMusicQueryRecordCmd.scenename)
  return scenename_;
}
inline ::std::string* GuildMusicQueryRecordCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GuildMusicQueryRecordCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GuildMusicQueryRecordCmd.scenename)
}

// optional uint32 sceneid = 4 [default = 0];
inline bool GuildMusicQueryRecordCmd::has_sceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildMusicQueryRecordCmd::set_has_sceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildMusicQueryRecordCmd::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildMusicQueryRecordCmd::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 GuildMusicQueryRecordCmd::sceneid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicQueryRecordCmd.sceneid)
  return sceneid_;
}
inline void GuildMusicQueryRecordCmd::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicQueryRecordCmd.sceneid)
}

// optional uint64 guildid = 5 [default = 0];
inline bool GuildMusicQueryRecordCmd::has_guildid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildMusicQueryRecordCmd::set_has_guildid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildMusicQueryRecordCmd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildMusicQueryRecordCmd::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 GuildMusicQueryRecordCmd::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicQueryRecordCmd.guildid)
  return guildid_;
}
inline void GuildMusicQueryRecordCmd::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicQueryRecordCmd.guildid)
}

// repeated .Cmd.MusicItem items = 6;
inline int GuildMusicQueryRecordCmd::items_size() const {
  return items_.size();
}
inline void GuildMusicQueryRecordCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::MusicItem& GuildMusicQueryRecordCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicQueryRecordCmd.items)
  return items_.Get(index);
}
inline ::Cmd::MusicItem* GuildMusicQueryRecordCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.GuildMusicQueryRecordCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::MusicItem* GuildMusicQueryRecordCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.GuildMusicQueryRecordCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >&
GuildMusicQueryRecordCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.GuildMusicQueryRecordCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >*
GuildMusicQueryRecordCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GuildMusicQueryRecordCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// GuildMusicUpdateCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool GuildMusicUpdateCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMusicUpdateCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMusicUpdateCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMusicUpdateCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command GuildMusicUpdateCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicUpdateCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GuildMusicUpdateCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicUpdateCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_UPDATE];
inline bool GuildMusicUpdateCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMusicUpdateCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMusicUpdateCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMusicUpdateCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::RecordParam GuildMusicUpdateCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicUpdateCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void GuildMusicUpdateCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicUpdateCmd.param)
}

// optional uint64 guildid = 3 [default = 0];
inline bool GuildMusicUpdateCmd::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildMusicUpdateCmd::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildMusicUpdateCmd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildMusicUpdateCmd::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 GuildMusicUpdateCmd::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicUpdateCmd.guildid)
  return guildid_;
}
inline void GuildMusicUpdateCmd::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicUpdateCmd.guildid)
}

// optional .Cmd.MusicItem item = 4;
inline bool GuildMusicUpdateCmd::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildMusicUpdateCmd::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildMusicUpdateCmd::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildMusicUpdateCmd::clear_item() {
  if (item_ != NULL) item_->::Cmd::MusicItem::Clear();
  clear_has_item();
}
inline const ::Cmd::MusicItem& GuildMusicUpdateCmd::item() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicUpdateCmd.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Cmd::MusicItem* GuildMusicUpdateCmd::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Cmd::MusicItem;
  // @@protoc_insertion_point(field_mutable:Cmd.GuildMusicUpdateCmd.item)
  return item_;
}
inline ::Cmd::MusicItem* GuildMusicUpdateCmd::release_item() {
  clear_has_item();
  ::Cmd::MusicItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void GuildMusicUpdateCmd::set_allocated_item(::Cmd::MusicItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GuildMusicUpdateCmd.item)
}

// -------------------------------------------------------------------

// GuildMusicDeleteRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool GuildMusicDeleteRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMusicDeleteRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMusicDeleteRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMusicDeleteRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command GuildMusicDeleteRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicDeleteRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GuildMusicDeleteRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicDeleteRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_DELETE];
inline bool GuildMusicDeleteRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMusicDeleteRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMusicDeleteRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMusicDeleteRecordCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::RecordParam GuildMusicDeleteRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicDeleteRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void GuildMusicDeleteRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicDeleteRecordCmd.param)
}

// optional uint64 guildid = 3 [default = 0];
inline bool GuildMusicDeleteRecordCmd::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildMusicDeleteRecordCmd::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildMusicDeleteRecordCmd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildMusicDeleteRecordCmd::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 GuildMusicDeleteRecordCmd::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildMusicDeleteRecordCmd.guildid)
  return guildid_;
}
inline void GuildMusicDeleteRecordCmd::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildMusicDeleteRecordCmd.guildid)
}

// -------------------------------------------------------------------

// UserBaseData

// optional uint32 platformid = 1 [default = 0];
inline bool UserBaseData::has_platformid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBaseData::set_has_platformid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBaseData::clear_has_platformid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBaseData::clear_platformid() {
  platformid_ = 0u;
  clear_has_platformid();
}
inline ::google::protobuf::uint32 UserBaseData::platformid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.platformid)
  return platformid_;
}
inline void UserBaseData::set_platformid(::google::protobuf::uint32 value) {
  set_has_platformid();
  platformid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.platformid)
}

// optional uint32 zoneid = 2 [default = 0];
inline bool UserBaseData::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBaseData::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBaseData::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBaseData::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 UserBaseData::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.zoneid)
  return zoneid_;
}
inline void UserBaseData::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.zoneid)
}

// optional uint64 accid = 3 [default = 0];
inline bool UserBaseData::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBaseData::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBaseData::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBaseData::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 UserBaseData::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.accid)
  return accid_;
}
inline void UserBaseData::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.accid)
}

// optional uint64 charid = 4 [default = 0];
inline bool UserBaseData::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBaseData::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBaseData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBaseData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserBaseData::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.charid)
  return charid_;
}
inline void UserBaseData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.charid)
}

// optional uint64 guildid = 5 [default = 0];
inline bool UserBaseData::has_guildid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBaseData::set_has_guildid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBaseData::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBaseData::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 UserBaseData::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.guildid)
  return guildid_;
}
inline void UserBaseData::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.guildid)
}

// optional string name = 6;
inline bool UserBaseData::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserBaseData::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserBaseData::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserBaseData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserBaseData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.name)
  return *name_;
}
inline void UserBaseData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.name)
}
inline void UserBaseData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserBaseData.name)
}
inline void UserBaseData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserBaseData.name)
}
inline ::std::string* UserBaseData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserBaseData.name)
  return name_;
}
inline ::std::string* UserBaseData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserBaseData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserBaseData.name)
}

// optional uint32 mapid = 7 [default = 0];
inline bool UserBaseData::has_mapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserBaseData::set_has_mapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserBaseData::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserBaseData::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 UserBaseData::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.mapid)
  return mapid_;
}
inline void UserBaseData::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.mapid)
}

// optional uint32 rolelv = 8 [default = 0];
inline bool UserBaseData::has_rolelv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserBaseData::set_has_rolelv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserBaseData::clear_has_rolelv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserBaseData::clear_rolelv() {
  rolelv_ = 0u;
  clear_has_rolelv();
}
inline ::google::protobuf::uint32 UserBaseData::rolelv() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.rolelv)
  return rolelv_;
}
inline void UserBaseData::set_rolelv(::google::protobuf::uint32 value) {
  set_has_rolelv();
  rolelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.rolelv)
}

// optional uint64 roleexp = 9 [default = 0];
inline bool UserBaseData::has_roleexp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserBaseData::set_has_roleexp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserBaseData::clear_has_roleexp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserBaseData::clear_roleexp() {
  roleexp_ = GOOGLE_ULONGLONG(0);
  clear_has_roleexp();
}
inline ::google::protobuf::uint64 UserBaseData::roleexp() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.roleexp)
  return roleexp_;
}
inline void UserBaseData::set_roleexp(::google::protobuf::uint64 value) {
  set_has_roleexp();
  roleexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.roleexp)
}

// optional uint32 charge = 10 [default = 0];
inline bool UserBaseData::has_charge() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserBaseData::set_has_charge() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserBaseData::clear_has_charge() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserBaseData::clear_charge() {
  charge_ = 0u;
  clear_has_charge();
}
inline ::google::protobuf::uint32 UserBaseData::charge() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.charge)
  return charge_;
}
inline void UserBaseData::set_charge(::google::protobuf::uint32 value) {
  set_has_charge();
  charge_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.charge)
}

// optional uint32 diamond = 11 [default = 0];
inline bool UserBaseData::has_diamond() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserBaseData::set_has_diamond() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserBaseData::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserBaseData::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 UserBaseData::diamond() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.diamond)
  return diamond_;
}
inline void UserBaseData::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.diamond)
}

// optional uint64 silver = 12 [default = 0];
inline bool UserBaseData::has_silver() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserBaseData::set_has_silver() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserBaseData::clear_has_silver() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserBaseData::clear_silver() {
  silver_ = GOOGLE_ULONGLONG(0);
  clear_has_silver();
}
inline ::google::protobuf::uint64 UserBaseData::silver() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.silver)
  return silver_;
}
inline void UserBaseData::set_silver(::google::protobuf::uint64 value) {
  set_has_silver();
  silver_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.silver)
}

// optional uint32 gold = 13 [default = 0];
inline bool UserBaseData::has_gold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserBaseData::set_has_gold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserBaseData::clear_has_gold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserBaseData::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 UserBaseData::gold() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.gold)
  return gold_;
}
inline void UserBaseData::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.gold)
}

// optional uint32 garden = 14 [default = 0];
inline bool UserBaseData::has_garden() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserBaseData::set_has_garden() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserBaseData::clear_has_garden() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserBaseData::clear_garden() {
  garden_ = 0u;
  clear_has_garden();
}
inline ::google::protobuf::uint32 UserBaseData::garden() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.garden)
  return garden_;
}
inline void UserBaseData::set_garden(::google::protobuf::uint32 value) {
  set_has_garden();
  garden_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.garden)
}

// optional uint32 friendship = 15 [default = 0];
inline bool UserBaseData::has_friendship() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserBaseData::set_has_friendship() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserBaseData::clear_has_friendship() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserBaseData::clear_friendship() {
  friendship_ = 0u;
  clear_has_friendship();
}
inline ::google::protobuf::uint32 UserBaseData::friendship() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.friendship)
  return friendship_;
}
inline void UserBaseData::set_friendship(::google::protobuf::uint32 value) {
  set_has_friendship();
  friendship_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.friendship)
}

// optional uint32 createTime = 16 [default = 0];
inline bool UserBaseData::has_createtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserBaseData::set_has_createtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserBaseData::clear_has_createtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserBaseData::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 UserBaseData::createtime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.createTime)
  return createtime_;
}
inline void UserBaseData::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.createTime)
}

// optional uint32 onlinetime = 17 [default = 0];
inline bool UserBaseData::has_onlinetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserBaseData::set_has_onlinetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserBaseData::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserBaseData::clear_onlinetime() {
  onlinetime_ = 0u;
  clear_has_onlinetime();
}
inline ::google::protobuf::uint32 UserBaseData::onlinetime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.onlinetime)
  return onlinetime_;
}
inline void UserBaseData::set_onlinetime(::google::protobuf::uint32 value) {
  set_has_onlinetime();
  onlinetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.onlinetime)
}

// optional uint32 offlinetime = 18 [default = 0];
inline bool UserBaseData::has_offlinetime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserBaseData::set_has_offlinetime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserBaseData::clear_has_offlinetime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserBaseData::clear_offlinetime() {
  offlinetime_ = 0u;
  clear_has_offlinetime();
}
inline ::google::protobuf::uint32 UserBaseData::offlinetime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.offlinetime)
  return offlinetime_;
}
inline void UserBaseData::set_offlinetime(::google::protobuf::uint32 value) {
  set_has_offlinetime();
  offlinetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.offlinetime)
}

// optional uint32 addict = 19 [default = 0];
inline bool UserBaseData::has_addict() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserBaseData::set_has_addict() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserBaseData::clear_has_addict() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserBaseData::clear_addict() {
  addict_ = 0u;
  clear_has_addict();
}
inline ::google::protobuf::uint32 UserBaseData::addict() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.addict)
  return addict_;
}
inline void UserBaseData::set_addict(::google::protobuf::uint32 value) {
  set_has_addict();
  addict_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.addict)
}

// optional uint32 battletime = 20 [default = 0];
inline bool UserBaseData::has_battletime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserBaseData::set_has_battletime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserBaseData::clear_has_battletime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserBaseData::clear_battletime() {
  battletime_ = 0u;
  clear_has_battletime();
}
inline ::google::protobuf::uint32 UserBaseData::battletime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.battletime)
  return battletime_;
}
inline void UserBaseData::set_battletime(::google::protobuf::uint32 value) {
  set_has_battletime();
  battletime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.battletime)
}

// optional uint32 body = 21 [default = 0];
inline bool UserBaseData::has_body() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserBaseData::set_has_body() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserBaseData::clear_has_body() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserBaseData::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 UserBaseData::body() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.body)
  return body_;
}
inline void UserBaseData::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.body)
}

// optional uint32 addictTipsTime = 22 [default = 0];
inline bool UserBaseData::has_addicttipstime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserBaseData::set_has_addicttipstime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserBaseData::clear_has_addicttipstime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserBaseData::clear_addicttipstime() {
  addicttipstime_ = 0u;
  clear_has_addicttipstime();
}
inline ::google::protobuf::uint32 UserBaseData::addicttipstime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.addictTipsTime)
  return addicttipstime_;
}
inline void UserBaseData::set_addicttipstime(::google::protobuf::uint32 value) {
  set_has_addicttipstime();
  addicttipstime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.addictTipsTime)
}

// optional uint32 gagtime = 23 [default = 0];
inline bool UserBaseData::has_gagtime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserBaseData::set_has_gagtime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserBaseData::clear_has_gagtime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserBaseData::clear_gagtime() {
  gagtime_ = 0u;
  clear_has_gagtime();
}
inline ::google::protobuf::uint32 UserBaseData::gagtime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.gagtime)
  return gagtime_;
}
inline void UserBaseData::set_gagtime(::google::protobuf::uint32 value) {
  set_has_gagtime();
  gagtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.gagtime)
}

// optional uint32 nologintime = 24 [default = 0];
inline bool UserBaseData::has_nologintime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UserBaseData::set_has_nologintime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UserBaseData::clear_has_nologintime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UserBaseData::clear_nologintime() {
  nologintime_ = 0u;
  clear_has_nologintime();
}
inline ::google::protobuf::uint32 UserBaseData::nologintime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.nologintime)
  return nologintime_;
}
inline void UserBaseData::set_nologintime(::google::protobuf::uint32 value) {
  set_has_nologintime();
  nologintime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.nologintime)
}

// optional uint32 rebattletime = 25 [default = 0];
inline bool UserBaseData::has_rebattletime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UserBaseData::set_has_rebattletime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UserBaseData::clear_has_rebattletime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UserBaseData::clear_rebattletime() {
  rebattletime_ = 0u;
  clear_has_rebattletime();
}
inline ::google::protobuf::uint32 UserBaseData::rebattletime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.rebattletime)
  return rebattletime_;
}
inline void UserBaseData::set_rebattletime(::google::protobuf::uint32 value) {
  set_has_rebattletime();
  rebattletime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.rebattletime)
}

// optional uint32 usedbattletime = 26 [default = 0];
inline bool UserBaseData::has_usedbattletime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UserBaseData::set_has_usedbattletime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UserBaseData::clear_has_usedbattletime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UserBaseData::clear_usedbattletime() {
  usedbattletime_ = 0u;
  clear_has_usedbattletime();
}
inline ::google::protobuf::uint32 UserBaseData::usedbattletime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.usedbattletime)
  return usedbattletime_;
}
inline void UserBaseData::set_usedbattletime(::google::protobuf::uint32 value) {
  set_has_usedbattletime();
  usedbattletime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.usedbattletime)
}

// optional uint32 hair = 27 [default = 0];
inline bool UserBaseData::has_hair() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UserBaseData::set_has_hair() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UserBaseData::clear_has_hair() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UserBaseData::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 UserBaseData::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.hair)
  return hair_;
}
inline void UserBaseData::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.hair)
}

// optional uint32 haircolor = 28 [default = 0];
inline bool UserBaseData::has_haircolor() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UserBaseData::set_has_haircolor() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UserBaseData::clear_has_haircolor() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UserBaseData::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 UserBaseData::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.haircolor)
  return haircolor_;
}
inline void UserBaseData::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.haircolor)
}

// optional uint32 lefthand = 29 [default = 0];
inline bool UserBaseData::has_lefthand() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UserBaseData::set_has_lefthand() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UserBaseData::clear_has_lefthand() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UserBaseData::clear_lefthand() {
  lefthand_ = 0u;
  clear_has_lefthand();
}
inline ::google::protobuf::uint32 UserBaseData::lefthand() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.lefthand)
  return lefthand_;
}
inline void UserBaseData::set_lefthand(::google::protobuf::uint32 value) {
  set_has_lefthand();
  lefthand_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.lefthand)
}

// optional uint32 righthand = 30 [default = 0];
inline bool UserBaseData::has_righthand() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void UserBaseData::set_has_righthand() {
  _has_bits_[0] |= 0x20000000u;
}
inline void UserBaseData::clear_has_righthand() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void UserBaseData::clear_righthand() {
  righthand_ = 0u;
  clear_has_righthand();
}
inline ::google::protobuf::uint32 UserBaseData::righthand() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.righthand)
  return righthand_;
}
inline void UserBaseData::set_righthand(::google::protobuf::uint32 value) {
  set_has_righthand();
  righthand_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.righthand)
}

// optional uint32 head = 31 [default = 0];
inline bool UserBaseData::has_head() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void UserBaseData::set_has_head() {
  _has_bits_[0] |= 0x40000000u;
}
inline void UserBaseData::clear_has_head() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void UserBaseData::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 UserBaseData::head() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.head)
  return head_;
}
inline void UserBaseData::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.head)
}

// optional uint32 back = 32 [default = 0];
inline bool UserBaseData::has_back() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void UserBaseData::set_has_back() {
  _has_bits_[0] |= 0x80000000u;
}
inline void UserBaseData::clear_has_back() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void UserBaseData::clear_back() {
  back_ = 0u;
  clear_has_back();
}
inline ::google::protobuf::uint32 UserBaseData::back() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.back)
  return back_;
}
inline void UserBaseData::set_back(::google::protobuf::uint32 value) {
  set_has_back();
  back_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.back)
}

// optional uint32 face = 33 [default = 0];
inline bool UserBaseData::has_face() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void UserBaseData::set_has_face() {
  _has_bits_[1] |= 0x00000001u;
}
inline void UserBaseData::clear_has_face() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void UserBaseData::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 UserBaseData::face() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.face)
  return face_;
}
inline void UserBaseData::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.face)
}

// optional uint32 tail = 34 [default = 0];
inline bool UserBaseData::has_tail() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void UserBaseData::set_has_tail() {
  _has_bits_[1] |= 0x00000002u;
}
inline void UserBaseData::clear_has_tail() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void UserBaseData::clear_tail() {
  tail_ = 0u;
  clear_has_tail();
}
inline ::google::protobuf::uint32 UserBaseData::tail() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.tail)
  return tail_;
}
inline void UserBaseData::set_tail(::google::protobuf::uint32 value) {
  set_has_tail();
  tail_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.tail)
}

// optional uint32 mount = 35 [default = 0];
inline bool UserBaseData::has_mount() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void UserBaseData::set_has_mount() {
  _has_bits_[1] |= 0x00000004u;
}
inline void UserBaseData::clear_has_mount() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void UserBaseData::clear_mount() {
  mount_ = 0u;
  clear_has_mount();
}
inline ::google::protobuf::uint32 UserBaseData::mount() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.mount)
  return mount_;
}
inline void UserBaseData::set_mount(::google::protobuf::uint32 value) {
  set_has_mount();
  mount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.mount)
}

// optional uint32 title = 36 [default = 0];
inline bool UserBaseData::has_title() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void UserBaseData::set_has_title() {
  _has_bits_[1] |= 0x00000008u;
}
inline void UserBaseData::clear_has_title() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void UserBaseData::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 UserBaseData::title() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.title)
  return title_;
}
inline void UserBaseData::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.title)
}

// optional uint32 eye = 37 [default = 0];
inline bool UserBaseData::has_eye() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void UserBaseData::set_has_eye() {
  _has_bits_[1] |= 0x00000010u;
}
inline void UserBaseData::clear_has_eye() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void UserBaseData::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 UserBaseData::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.eye)
  return eye_;
}
inline void UserBaseData::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.eye)
}

// optional uint32 partnerid = 38 [default = 0];
inline bool UserBaseData::has_partnerid() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void UserBaseData::set_has_partnerid() {
  _has_bits_[1] |= 0x00000020u;
}
inline void UserBaseData::clear_has_partnerid() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void UserBaseData::clear_partnerid() {
  partnerid_ = 0u;
  clear_has_partnerid();
}
inline ::google::protobuf::uint32 UserBaseData::partnerid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.partnerid)
  return partnerid_;
}
inline void UserBaseData::set_partnerid(::google::protobuf::uint32 value) {
  set_has_partnerid();
  partnerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.partnerid)
}

// optional uint32 portrait = 39 [default = 0];
inline bool UserBaseData::has_portrait() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void UserBaseData::set_has_portrait() {
  _has_bits_[1] |= 0x00000040u;
}
inline void UserBaseData::clear_has_portrait() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void UserBaseData::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 UserBaseData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.portrait)
  return portrait_;
}
inline void UserBaseData::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.portrait)
}

// optional uint32 mouth = 40 [default = 0];
inline bool UserBaseData::has_mouth() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void UserBaseData::set_has_mouth() {
  _has_bits_[1] |= 0x00000080u;
}
inline void UserBaseData::clear_has_mouth() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void UserBaseData::clear_mouth() {
  mouth_ = 0u;
  clear_has_mouth();
}
inline ::google::protobuf::uint32 UserBaseData::mouth() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.mouth)
  return mouth_;
}
inline void UserBaseData::set_mouth(::google::protobuf::uint32 value) {
  set_has_mouth();
  mouth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.mouth)
}

// optional uint32 clothcolor = 41 [default = 0];
inline bool UserBaseData::has_clothcolor() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void UserBaseData::set_has_clothcolor() {
  _has_bits_[1] |= 0x00000100u;
}
inline void UserBaseData::clear_has_clothcolor() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void UserBaseData::clear_clothcolor() {
  clothcolor_ = 0u;
  clear_has_clothcolor();
}
inline ::google::protobuf::uint32 UserBaseData::clothcolor() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.clothcolor)
  return clothcolor_;
}
inline void UserBaseData::set_clothcolor(::google::protobuf::uint32 value) {
  set_has_clothcolor();
  clothcolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.clothcolor)
}

// optional .Cmd.EGender gender = 42 [default = EGENDER_MIN];
inline bool UserBaseData::has_gender() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void UserBaseData::set_has_gender() {
  _has_bits_[1] |= 0x00000200u;
}
inline void UserBaseData::clear_has_gender() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void UserBaseData::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender UserBaseData::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void UserBaseData::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.gender)
}

// optional .Cmd.EProfession profession = 43 [default = EPROFESSION_MIN];
inline bool UserBaseData::has_profession() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void UserBaseData::set_has_profession() {
  _has_bits_[1] |= 0x00000400u;
}
inline void UserBaseData::clear_has_profession() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void UserBaseData::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::Cmd::EProfession UserBaseData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.profession)
  return static_cast< ::Cmd::EProfession >(profession_);
}
inline void UserBaseData::set_profession(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.profession)
}

// optional .Cmd.EProfession destprofession = 44 [default = EPROFESSION_MIN];
inline bool UserBaseData::has_destprofession() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void UserBaseData::set_has_destprofession() {
  _has_bits_[1] |= 0x00000800u;
}
inline void UserBaseData::clear_has_destprofession() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void UserBaseData::clear_destprofession() {
  destprofession_ = 0;
  clear_has_destprofession();
}
inline ::Cmd::EProfession UserBaseData::destprofession() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.destprofession)
  return static_cast< ::Cmd::EProfession >(destprofession_);
}
inline void UserBaseData::set_destprofession(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_destprofession();
  destprofession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.destprofession)
}

// optional uint32 destzoneid = 45 [default = 0];
inline bool UserBaseData::has_destzoneid() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void UserBaseData::set_has_destzoneid() {
  _has_bits_[1] |= 0x00001000u;
}
inline void UserBaseData::clear_has_destzoneid() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void UserBaseData::clear_destzoneid() {
  destzoneid_ = 0u;
  clear_has_destzoneid();
}
inline ::google::protobuf::uint32 UserBaseData::destzoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.destzoneid)
  return destzoneid_;
}
inline void UserBaseData::set_destzoneid(::google::protobuf::uint32 value) {
  set_has_destzoneid();
  destzoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.destzoneid)
}

// optional uint32 originalzoneid = 46 [default = 0];
inline bool UserBaseData::has_originalzoneid() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void UserBaseData::set_has_originalzoneid() {
  _has_bits_[1] |= 0x00002000u;
}
inline void UserBaseData::clear_has_originalzoneid() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void UserBaseData::clear_originalzoneid() {
  originalzoneid_ = 0u;
  clear_has_originalzoneid();
}
inline ::google::protobuf::uint32 UserBaseData::originalzoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.originalzoneid)
  return originalzoneid_;
}
inline void UserBaseData::set_originalzoneid(::google::protobuf::uint32 value) {
  set_has_originalzoneid();
  originalzoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.originalzoneid)
}

// optional uint32 maxbaselv = 47 [default = 0];
inline bool UserBaseData::has_maxbaselv() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void UserBaseData::set_has_maxbaselv() {
  _has_bits_[1] |= 0x00004000u;
}
inline void UserBaseData::clear_has_maxbaselv() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void UserBaseData::clear_maxbaselv() {
  maxbaselv_ = 0u;
  clear_has_maxbaselv();
}
inline ::google::protobuf::uint32 UserBaseData::maxbaselv() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.maxbaselv)
  return maxbaselv_;
}
inline void UserBaseData::set_maxbaselv(::google::protobuf::uint32 value) {
  set_has_maxbaselv();
  maxbaselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.maxbaselv)
}

// optional string lock_reason = 48;
inline bool UserBaseData::has_lock_reason() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void UserBaseData::set_has_lock_reason() {
  _has_bits_[1] |= 0x00008000u;
}
inline void UserBaseData::clear_has_lock_reason() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void UserBaseData::clear_lock_reason() {
  if (lock_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lock_reason_->clear();
  }
  clear_has_lock_reason();
}
inline const ::std::string& UserBaseData::lock_reason() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.lock_reason)
  return *lock_reason_;
}
inline void UserBaseData::set_lock_reason(const ::std::string& value) {
  set_has_lock_reason();
  if (lock_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lock_reason_ = new ::std::string;
  }
  lock_reason_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.lock_reason)
}
inline void UserBaseData::set_lock_reason(const char* value) {
  set_has_lock_reason();
  if (lock_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lock_reason_ = new ::std::string;
  }
  lock_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserBaseData.lock_reason)
}
inline void UserBaseData::set_lock_reason(const char* value, size_t size) {
  set_has_lock_reason();
  if (lock_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lock_reason_ = new ::std::string;
  }
  lock_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserBaseData.lock_reason)
}
inline ::std::string* UserBaseData::mutable_lock_reason() {
  set_has_lock_reason();
  if (lock_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lock_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserBaseData.lock_reason)
  return lock_reason_;
}
inline ::std::string* UserBaseData::release_lock_reason() {
  clear_has_lock_reason();
  if (lock_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lock_reason_;
    lock_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserBaseData::set_allocated_lock_reason(::std::string* lock_reason) {
  if (lock_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lock_reason_;
  }
  if (lock_reason) {
    set_has_lock_reason();
    lock_reason_ = lock_reason;
  } else {
    clear_has_lock_reason();
    lock_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserBaseData.lock_reason)
}

// optional string gag_reason = 49;
inline bool UserBaseData::has_gag_reason() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void UserBaseData::set_has_gag_reason() {
  _has_bits_[1] |= 0x00010000u;
}
inline void UserBaseData::clear_has_gag_reason() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void UserBaseData::clear_gag_reason() {
  if (gag_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gag_reason_->clear();
  }
  clear_has_gag_reason();
}
inline const ::std::string& UserBaseData::gag_reason() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.gag_reason)
  return *gag_reason_;
}
inline void UserBaseData::set_gag_reason(const ::std::string& value) {
  set_has_gag_reason();
  if (gag_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gag_reason_ = new ::std::string;
  }
  gag_reason_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.gag_reason)
}
inline void UserBaseData::set_gag_reason(const char* value) {
  set_has_gag_reason();
  if (gag_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gag_reason_ = new ::std::string;
  }
  gag_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserBaseData.gag_reason)
}
inline void UserBaseData::set_gag_reason(const char* value, size_t size) {
  set_has_gag_reason();
  if (gag_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gag_reason_ = new ::std::string;
  }
  gag_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserBaseData.gag_reason)
}
inline ::std::string* UserBaseData::mutable_gag_reason() {
  set_has_gag_reason();
  if (gag_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gag_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserBaseData.gag_reason)
  return gag_reason_;
}
inline ::std::string* UserBaseData::release_gag_reason() {
  clear_has_gag_reason();
  if (gag_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gag_reason_;
    gag_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserBaseData::set_allocated_gag_reason(::std::string* gag_reason) {
  if (gag_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gag_reason_;
  }
  if (gag_reason) {
    set_has_gag_reason();
    gag_reason_ = gag_reason;
  } else {
    clear_has_gag_reason();
    gag_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserBaseData.gag_reason)
}

// repeated uint32 questmapntf = 50;
inline int UserBaseData::questmapntf_size() const {
  return questmapntf_.size();
}
inline void UserBaseData::clear_questmapntf() {
  questmapntf_.Clear();
}
inline ::google::protobuf::uint32 UserBaseData::questmapntf(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.questmapntf)
  return questmapntf_.Get(index);
}
inline void UserBaseData::set_questmapntf(int index, ::google::protobuf::uint32 value) {
  questmapntf_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.questmapntf)
}
inline void UserBaseData::add_questmapntf(::google::protobuf::uint32 value) {
  questmapntf_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UserBaseData.questmapntf)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserBaseData::questmapntf() const {
  // @@protoc_insertion_point(field_list:Cmd.UserBaseData.questmapntf)
  return questmapntf_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserBaseData::mutable_questmapntf() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserBaseData.questmapntf)
  return &questmapntf_;
}

// optional uint64 maincharid = 51;
inline bool UserBaseData::has_maincharid() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void UserBaseData::set_has_maincharid() {
  _has_bits_[1] |= 0x00040000u;
}
inline void UserBaseData::clear_has_maincharid() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void UserBaseData::clear_maincharid() {
  maincharid_ = GOOGLE_ULONGLONG(0);
  clear_has_maincharid();
}
inline ::google::protobuf::uint64 UserBaseData::maincharid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.maincharid)
  return maincharid_;
}
inline void UserBaseData::set_maincharid(::google::protobuf::uint64 value) {
  set_has_maincharid();
  maincharid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.maincharid)
}

// optional uint32 maxpro = 52;
inline bool UserBaseData::has_maxpro() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void UserBaseData::set_has_maxpro() {
  _has_bits_[1] |= 0x00080000u;
}
inline void UserBaseData::clear_has_maxpro() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void UserBaseData::clear_maxpro() {
  maxpro_ = 0u;
  clear_has_maxpro();
}
inline ::google::protobuf::uint32 UserBaseData::maxpro() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBaseData.maxpro)
  return maxpro_;
}
inline void UserBaseData::set_maxpro(::google::protobuf::uint32 value) {
  set_has_maxpro();
  maxpro_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBaseData.maxpro)
}

// -------------------------------------------------------------------

// BlobData

// optional uint32 version = 1 [default = 0];
inline bool BlobData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobData::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.version)
  return version_;
}
inline void BlobData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobData.version)
}

// optional .Cmd.BlobUser user = 2;
inline bool BlobData::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobData::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobData::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobData::clear_user() {
  if (user_ != NULL) user_->::Cmd::BlobUser::Clear();
  clear_has_user();
}
inline const ::Cmd::BlobUser& BlobData::user() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Cmd::BlobUser* BlobData::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Cmd::BlobUser;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.user)
  return user_;
}
inline ::Cmd::BlobUser* BlobData::release_user() {
  clear_has_user();
  ::Cmd::BlobUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_user(::Cmd::BlobUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.user)
}

// optional .Cmd.BlobFighter fighter = 3;
inline bool BlobData::has_fighter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobData::set_has_fighter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobData::clear_has_fighter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobData::clear_fighter() {
  if (fighter_ != NULL) fighter_->::Cmd::BlobFighter::Clear();
  clear_has_fighter();
}
inline const ::Cmd::BlobFighter& BlobData::fighter() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.fighter)
  return fighter_ != NULL ? *fighter_ : *default_instance_->fighter_;
}
inline ::Cmd::BlobFighter* BlobData::mutable_fighter() {
  set_has_fighter();
  if (fighter_ == NULL) fighter_ = new ::Cmd::BlobFighter;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.fighter)
  return fighter_;
}
inline ::Cmd::BlobFighter* BlobData::release_fighter() {
  clear_has_fighter();
  ::Cmd::BlobFighter* temp = fighter_;
  fighter_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_fighter(::Cmd::BlobFighter* fighter) {
  delete fighter_;
  fighter_ = fighter;
  if (fighter) {
    set_has_fighter();
  } else {
    clear_has_fighter();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.fighter)
}

// optional .Cmd.BlobStage stage = 4;
inline bool BlobData::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobData::set_has_stage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobData::clear_has_stage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobData::clear_stage() {
  if (stage_ != NULL) stage_->::Cmd::BlobStage::Clear();
  clear_has_stage();
}
inline const ::Cmd::BlobStage& BlobData::stage() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.stage)
  return stage_ != NULL ? *stage_ : *default_instance_->stage_;
}
inline ::Cmd::BlobStage* BlobData::mutable_stage() {
  set_has_stage();
  if (stage_ == NULL) stage_ = new ::Cmd::BlobStage;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.stage)
  return stage_;
}
inline ::Cmd::BlobStage* BlobData::release_stage() {
  clear_has_stage();
  ::Cmd::BlobStage* temp = stage_;
  stage_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_stage(::Cmd::BlobStage* stage) {
  delete stage_;
  stage_ = stage;
  if (stage) {
    set_has_stage();
  } else {
    clear_has_stage();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.stage)
}

// optional .Cmd.BlobQuestNpc questnpc = 5;
inline bool BlobData::has_questnpc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobData::set_has_questnpc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobData::clear_has_questnpc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobData::clear_questnpc() {
  if (questnpc_ != NULL) questnpc_->::Cmd::BlobQuestNpc::Clear();
  clear_has_questnpc();
}
inline const ::Cmd::BlobQuestNpc& BlobData::questnpc() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.questnpc)
  return questnpc_ != NULL ? *questnpc_ : *default_instance_->questnpc_;
}
inline ::Cmd::BlobQuestNpc* BlobData::mutable_questnpc() {
  set_has_questnpc();
  if (questnpc_ == NULL) questnpc_ = new ::Cmd::BlobQuestNpc;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.questnpc)
  return questnpc_;
}
inline ::Cmd::BlobQuestNpc* BlobData::release_questnpc() {
  clear_has_questnpc();
  ::Cmd::BlobQuestNpc* temp = questnpc_;
  questnpc_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_questnpc(::Cmd::BlobQuestNpc* questnpc) {
  delete questnpc_;
  questnpc_ = questnpc;
  if (questnpc) {
    set_has_questnpc();
  } else {
    clear_has_questnpc();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.questnpc)
}

// optional .Cmd.BlobBuffer buffer = 6;
inline bool BlobData::has_buffer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobData::set_has_buffer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobData::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobData::clear_buffer() {
  if (buffer_ != NULL) buffer_->::Cmd::BlobBuffer::Clear();
  clear_has_buffer();
}
inline const ::Cmd::BlobBuffer& BlobData::buffer() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.buffer)
  return buffer_ != NULL ? *buffer_ : *default_instance_->buffer_;
}
inline ::Cmd::BlobBuffer* BlobData::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) buffer_ = new ::Cmd::BlobBuffer;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.buffer)
  return buffer_;
}
inline ::Cmd::BlobBuffer* BlobData::release_buffer() {
  clear_has_buffer();
  ::Cmd::BlobBuffer* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_buffer(::Cmd::BlobBuffer* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.buffer)
}

// optional .Cmd.BlobPortrait portrait = 7;
inline bool BlobData::has_portrait() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobData::set_has_portrait() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobData::clear_portrait() {
  if (portrait_ != NULL) portrait_->::Cmd::BlobPortrait::Clear();
  clear_has_portrait();
}
inline const ::Cmd::BlobPortrait& BlobData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.portrait)
  return portrait_ != NULL ? *portrait_ : *default_instance_->portrait_;
}
inline ::Cmd::BlobPortrait* BlobData::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == NULL) portrait_ = new ::Cmd::BlobPortrait;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.portrait)
  return portrait_;
}
inline ::Cmd::BlobPortrait* BlobData::release_portrait() {
  clear_has_portrait();
  ::Cmd::BlobPortrait* temp = portrait_;
  portrait_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_portrait(::Cmd::BlobPortrait* portrait) {
  delete portrait_;
  portrait_ = portrait;
  if (portrait) {
    set_has_portrait();
  } else {
    clear_has_portrait();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.portrait)
}

// optional .Cmd.BlobHair hair = 8;
inline bool BlobData::has_hair() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobData::set_has_hair() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobData::clear_has_hair() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobData::clear_hair() {
  if (hair_ != NULL) hair_->::Cmd::BlobHair::Clear();
  clear_has_hair();
}
inline const ::Cmd::BlobHair& BlobData::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.hair)
  return hair_ != NULL ? *hair_ : *default_instance_->hair_;
}
inline ::Cmd::BlobHair* BlobData::mutable_hair() {
  set_has_hair();
  if (hair_ == NULL) hair_ = new ::Cmd::BlobHair;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.hair)
  return hair_;
}
inline ::Cmd::BlobHair* BlobData::release_hair() {
  clear_has_hair();
  ::Cmd::BlobHair* temp = hair_;
  hair_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_hair(::Cmd::BlobHair* hair) {
  delete hair_;
  hair_ = hair;
  if (hair) {
    set_has_hair();
  } else {
    clear_has_hair();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.hair)
}

// optional .Cmd.BlobGears gear = 9;
inline bool BlobData::has_gear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobData::set_has_gear() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobData::clear_has_gear() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobData::clear_gear() {
  if (gear_ != NULL) gear_->::Cmd::BlobGears::Clear();
  clear_has_gear();
}
inline const ::Cmd::BlobGears& BlobData::gear() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.gear)
  return gear_ != NULL ? *gear_ : *default_instance_->gear_;
}
inline ::Cmd::BlobGears* BlobData::mutable_gear() {
  set_has_gear();
  if (gear_ == NULL) gear_ = new ::Cmd::BlobGears;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.gear)
  return gear_;
}
inline ::Cmd::BlobGears* BlobData::release_gear() {
  clear_has_gear();
  ::Cmd::BlobGears* temp = gear_;
  gear_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_gear(::Cmd::BlobGears* gear) {
  delete gear_;
  gear_ = gear;
  if (gear) {
    set_has_gear();
  } else {
    clear_has_gear();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.gear)
}

// optional .Cmd.BlobTips tip = 10;
inline bool BlobData::has_tip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlobData::set_has_tip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlobData::clear_has_tip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlobData::clear_tip() {
  if (tip_ != NULL) tip_->::Cmd::BlobTips::Clear();
  clear_has_tip();
}
inline const ::Cmd::BlobTips& BlobData::tip() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.tip)
  return tip_ != NULL ? *tip_ : *default_instance_->tip_;
}
inline ::Cmd::BlobTips* BlobData::mutable_tip() {
  set_has_tip();
  if (tip_ == NULL) tip_ = new ::Cmd::BlobTips;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.tip)
  return tip_;
}
inline ::Cmd::BlobTips* BlobData::release_tip() {
  clear_has_tip();
  ::Cmd::BlobTips* temp = tip_;
  tip_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_tip(::Cmd::BlobTips* tip) {
  delete tip_;
  tip_ = tip;
  if (tip) {
    set_has_tip();
  } else {
    clear_has_tip();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.tip)
}

// optional .Cmd.BlobFollower follower = 11;
inline bool BlobData::has_follower() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlobData::set_has_follower() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlobData::clear_has_follower() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlobData::clear_follower() {
  if (follower_ != NULL) follower_->::Cmd::BlobFollower::Clear();
  clear_has_follower();
}
inline const ::Cmd::BlobFollower& BlobData::follower() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.follower)
  return follower_ != NULL ? *follower_ : *default_instance_->follower_;
}
inline ::Cmd::BlobFollower* BlobData::mutable_follower() {
  set_has_follower();
  if (follower_ == NULL) follower_ = new ::Cmd::BlobFollower;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.follower)
  return follower_;
}
inline ::Cmd::BlobFollower* BlobData::release_follower() {
  clear_has_follower();
  ::Cmd::BlobFollower* temp = follower_;
  follower_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_follower(::Cmd::BlobFollower* follower) {
  delete follower_;
  follower_ = follower;
  if (follower) {
    set_has_follower();
  } else {
    clear_has_follower();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.follower)
}

// optional .Cmd.BlobCDTime cd = 12;
inline bool BlobData::has_cd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlobData::set_has_cd() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlobData::clear_has_cd() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlobData::clear_cd() {
  if (cd_ != NULL) cd_->::Cmd::BlobCDTime::Clear();
  clear_has_cd();
}
inline const ::Cmd::BlobCDTime& BlobData::cd() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.cd)
  return cd_ != NULL ? *cd_ : *default_instance_->cd_;
}
inline ::Cmd::BlobCDTime* BlobData::mutable_cd() {
  set_has_cd();
  if (cd_ == NULL) cd_ = new ::Cmd::BlobCDTime;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.cd)
  return cd_;
}
inline ::Cmd::BlobCDTime* BlobData::release_cd() {
  clear_has_cd();
  ::Cmd::BlobCDTime* temp = cd_;
  cd_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_cd(::Cmd::BlobCDTime* cd) {
  delete cd_;
  cd_ = cd;
  if (cd) {
    set_has_cd();
  } else {
    clear_has_cd();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.cd)
}

// optional .Cmd.BlobShortcut shortcut = 13;
inline bool BlobData::has_shortcut() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlobData::set_has_shortcut() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlobData::clear_has_shortcut() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlobData::clear_shortcut() {
  if (shortcut_ != NULL) shortcut_->::Cmd::BlobShortcut::Clear();
  clear_has_shortcut();
}
inline const ::Cmd::BlobShortcut& BlobData::shortcut() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.shortcut)
  return shortcut_ != NULL ? *shortcut_ : *default_instance_->shortcut_;
}
inline ::Cmd::BlobShortcut* BlobData::mutable_shortcut() {
  set_has_shortcut();
  if (shortcut_ == NULL) shortcut_ = new ::Cmd::BlobShortcut;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.shortcut)
  return shortcut_;
}
inline ::Cmd::BlobShortcut* BlobData::release_shortcut() {
  clear_has_shortcut();
  ::Cmd::BlobShortcut* temp = shortcut_;
  shortcut_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_shortcut(::Cmd::BlobShortcut* shortcut) {
  delete shortcut_;
  shortcut_ = shortcut;
  if (shortcut) {
    set_has_shortcut();
  } else {
    clear_has_shortcut();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.shortcut)
}

// optional .Cmd.BlobGMEffects effect = 14;
inline bool BlobData::has_effect() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BlobData::set_has_effect() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BlobData::clear_has_effect() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BlobData::clear_effect() {
  if (effect_ != NULL) effect_->::Cmd::BlobGMEffects::Clear();
  clear_has_effect();
}
inline const ::Cmd::BlobGMEffects& BlobData::effect() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.effect)
  return effect_ != NULL ? *effect_ : *default_instance_->effect_;
}
inline ::Cmd::BlobGMEffects* BlobData::mutable_effect() {
  set_has_effect();
  if (effect_ == NULL) effect_ = new ::Cmd::BlobGMEffects;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.effect)
  return effect_;
}
inline ::Cmd::BlobGMEffects* BlobData::release_effect() {
  clear_has_effect();
  ::Cmd::BlobGMEffects* temp = effect_;
  effect_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_effect(::Cmd::BlobGMEffects* effect) {
  delete effect_;
  effect_ = effect;
  if (effect) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.effect)
}

// optional .Cmd.BlobFreyja freyja = 15;
inline bool BlobData::has_freyja() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlobData::set_has_freyja() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlobData::clear_has_freyja() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlobData::clear_freyja() {
  if (freyja_ != NULL) freyja_->::Cmd::BlobFreyja::Clear();
  clear_has_freyja();
}
inline const ::Cmd::BlobFreyja& BlobData::freyja() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.freyja)
  return freyja_ != NULL ? *freyja_ : *default_instance_->freyja_;
}
inline ::Cmd::BlobFreyja* BlobData::mutable_freyja() {
  set_has_freyja();
  if (freyja_ == NULL) freyja_ = new ::Cmd::BlobFreyja;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.freyja)
  return freyja_;
}
inline ::Cmd::BlobFreyja* BlobData::release_freyja() {
  clear_has_freyja();
  ::Cmd::BlobFreyja* temp = freyja_;
  freyja_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_freyja(::Cmd::BlobFreyja* freyja) {
  delete freyja_;
  freyja_ = freyja;
  if (freyja) {
    set_has_freyja();
  } else {
    clear_has_freyja();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.freyja)
}

// optional .Cmd.BlobLaboratory lab = 16;
inline bool BlobData::has_lab() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BlobData::set_has_lab() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BlobData::clear_has_lab() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BlobData::clear_lab() {
  if (lab_ != NULL) lab_->::Cmd::BlobLaboratory::Clear();
  clear_has_lab();
}
inline const ::Cmd::BlobLaboratory& BlobData::lab() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.lab)
  return lab_ != NULL ? *lab_ : *default_instance_->lab_;
}
inline ::Cmd::BlobLaboratory* BlobData::mutable_lab() {
  set_has_lab();
  if (lab_ == NULL) lab_ = new ::Cmd::BlobLaboratory;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.lab)
  return lab_;
}
inline ::Cmd::BlobLaboratory* BlobData::release_lab() {
  clear_has_lab();
  ::Cmd::BlobLaboratory* temp = lab_;
  lab_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_lab(::Cmd::BlobLaboratory* lab) {
  delete lab_;
  lab_ = lab;
  if (lab) {
    set_has_lab();
  } else {
    clear_has_lab();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.lab)
}

// optional .Cmd.BlobScenery scenery = 17;
inline bool BlobData::has_scenery() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BlobData::set_has_scenery() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BlobData::clear_has_scenery() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BlobData::clear_scenery() {
  if (scenery_ != NULL) scenery_->::Cmd::BlobScenery::Clear();
  clear_has_scenery();
}
inline const ::Cmd::BlobScenery& BlobData::scenery() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.scenery)
  return scenery_ != NULL ? *scenery_ : *default_instance_->scenery_;
}
inline ::Cmd::BlobScenery* BlobData::mutable_scenery() {
  set_has_scenery();
  if (scenery_ == NULL) scenery_ = new ::Cmd::BlobScenery;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.scenery)
  return scenery_;
}
inline ::Cmd::BlobScenery* BlobData::release_scenery() {
  clear_has_scenery();
  ::Cmd::BlobScenery* temp = scenery_;
  scenery_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_scenery(::Cmd::BlobScenery* scenery) {
  delete scenery_;
  scenery_ = scenery;
  if (scenery) {
    set_has_scenery();
  } else {
    clear_has_scenery();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.scenery)
}

// optional .Cmd.BlobCarrier carrier = 18;
inline bool BlobData::has_carrier() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BlobData::set_has_carrier() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BlobData::clear_has_carrier() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BlobData::clear_carrier() {
  if (carrier_ != NULL) carrier_->::Cmd::BlobCarrier::Clear();
  clear_has_carrier();
}
inline const ::Cmd::BlobCarrier& BlobData::carrier() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.carrier)
  return carrier_ != NULL ? *carrier_ : *default_instance_->carrier_;
}
inline ::Cmd::BlobCarrier* BlobData::mutable_carrier() {
  set_has_carrier();
  if (carrier_ == NULL) carrier_ = new ::Cmd::BlobCarrier;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.carrier)
  return carrier_;
}
inline ::Cmd::BlobCarrier* BlobData::release_carrier() {
  clear_has_carrier();
  ::Cmd::BlobCarrier* temp = carrier_;
  carrier_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_carrier(::Cmd::BlobCarrier* carrier) {
  delete carrier_;
  carrier_ = carrier;
  if (carrier) {
    set_has_carrier();
  } else {
    clear_has_carrier();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.carrier)
}

// optional .Cmd.BlobMenu menu = 19;
inline bool BlobData::has_menu() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BlobData::set_has_menu() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BlobData::clear_has_menu() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BlobData::clear_menu() {
  if (menu_ != NULL) menu_->::Cmd::BlobMenu::Clear();
  clear_has_menu();
}
inline const ::Cmd::BlobMenu& BlobData::menu() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.menu)
  return menu_ != NULL ? *menu_ : *default_instance_->menu_;
}
inline ::Cmd::BlobMenu* BlobData::mutable_menu() {
  set_has_menu();
  if (menu_ == NULL) menu_ = new ::Cmd::BlobMenu;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.menu)
  return menu_;
}
inline ::Cmd::BlobMenu* BlobData::release_menu() {
  clear_has_menu();
  ::Cmd::BlobMenu* temp = menu_;
  menu_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_menu(::Cmd::BlobMenu* menu) {
  delete menu_;
  menu_ = menu;
  if (menu) {
    set_has_menu();
  } else {
    clear_has_menu();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.menu)
}

// optional .Cmd.BlobShopGotItem shop = 20;
inline bool BlobData::has_shop() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BlobData::set_has_shop() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BlobData::clear_has_shop() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BlobData::clear_shop() {
  if (shop_ != NULL) shop_->::Cmd::BlobShopGotItem::Clear();
  clear_has_shop();
}
inline const ::Cmd::BlobShopGotItem& BlobData::shop() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.shop)
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::Cmd::BlobShopGotItem* BlobData::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::Cmd::BlobShopGotItem;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.shop)
  return shop_;
}
inline ::Cmd::BlobShopGotItem* BlobData::release_shop() {
  clear_has_shop();
  ::Cmd::BlobShopGotItem* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_shop(::Cmd::BlobShopGotItem* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.shop)
}

// optional .Cmd.BlobKnownMaps knownmap = 21;
inline bool BlobData::has_knownmap() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BlobData::set_has_knownmap() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BlobData::clear_has_knownmap() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BlobData::clear_knownmap() {
  if (knownmap_ != NULL) knownmap_->::Cmd::BlobKnownMaps::Clear();
  clear_has_knownmap();
}
inline const ::Cmd::BlobKnownMaps& BlobData::knownmap() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.knownmap)
  return knownmap_ != NULL ? *knownmap_ : *default_instance_->knownmap_;
}
inline ::Cmd::BlobKnownMaps* BlobData::mutable_knownmap() {
  set_has_knownmap();
  if (knownmap_ == NULL) knownmap_ = new ::Cmd::BlobKnownMaps;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.knownmap)
  return knownmap_;
}
inline ::Cmd::BlobKnownMaps* BlobData::release_knownmap() {
  clear_has_knownmap();
  ::Cmd::BlobKnownMaps* temp = knownmap_;
  knownmap_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_knownmap(::Cmd::BlobKnownMaps* knownmap) {
  delete knownmap_;
  knownmap_ = knownmap;
  if (knownmap) {
    set_has_knownmap();
  } else {
    clear_has_knownmap();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.knownmap)
}

// optional .Cmd.BlobInter iter = 22;
inline bool BlobData::has_iter() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BlobData::set_has_iter() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BlobData::clear_has_iter() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BlobData::clear_iter() {
  if (iter_ != NULL) iter_->::Cmd::BlobInter::Clear();
  clear_has_iter();
}
inline const ::Cmd::BlobInter& BlobData::iter() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.iter)
  return iter_ != NULL ? *iter_ : *default_instance_->iter_;
}
inline ::Cmd::BlobInter* BlobData::mutable_iter() {
  set_has_iter();
  if (iter_ == NULL) iter_ = new ::Cmd::BlobInter;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.iter)
  return iter_;
}
inline ::Cmd::BlobInter* BlobData::release_iter() {
  clear_has_iter();
  ::Cmd::BlobInter* temp = iter_;
  iter_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_iter(::Cmd::BlobInter* iter) {
  delete iter_;
  iter_ = iter;
  if (iter) {
    set_has_iter();
  } else {
    clear_has_iter();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.iter)
}

// optional .Cmd.BlobHands hand = 23;
inline bool BlobData::has_hand() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BlobData::set_has_hand() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BlobData::clear_has_hand() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BlobData::clear_hand() {
  if (hand_ != NULL) hand_->::Cmd::BlobHands::Clear();
  clear_has_hand();
}
inline const ::Cmd::BlobHands& BlobData::hand() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.hand)
  return hand_ != NULL ? *hand_ : *default_instance_->hand_;
}
inline ::Cmd::BlobHands* BlobData::mutable_hand() {
  set_has_hand();
  if (hand_ == NULL) hand_ = new ::Cmd::BlobHands;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.hand)
  return hand_;
}
inline ::Cmd::BlobHands* BlobData::release_hand() {
  clear_has_hand();
  ::Cmd::BlobHands* temp = hand_;
  hand_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_hand(::Cmd::BlobHands* hand) {
  delete hand_;
  hand_ = hand;
  if (hand) {
    set_has_hand();
  } else {
    clear_has_hand();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.hand)
}

// optional .Cmd.BlobShow show = 24;
inline bool BlobData::has_show() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BlobData::set_has_show() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BlobData::clear_has_show() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BlobData::clear_show() {
  if (show_ != NULL) show_->::Cmd::BlobShow::Clear();
  clear_has_show();
}
inline const ::Cmd::BlobShow& BlobData::show() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.show)
  return show_ != NULL ? *show_ : *default_instance_->show_;
}
inline ::Cmd::BlobShow* BlobData::mutable_show() {
  set_has_show();
  if (show_ == NULL) show_ = new ::Cmd::BlobShow;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.show)
  return show_;
}
inline ::Cmd::BlobShow* BlobData::release_show() {
  clear_has_show();
  ::Cmd::BlobShow* temp = show_;
  show_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_show(::Cmd::BlobShow* show) {
  delete show_;
  show_ = show;
  if (show) {
    set_has_show();
  } else {
    clear_has_show();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.show)
}

// optional .Cmd.BlobTrace trace = 25;
inline bool BlobData::has_trace() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BlobData::set_has_trace() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BlobData::clear_has_trace() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BlobData::clear_trace() {
  if (trace_ != NULL) trace_->::Cmd::BlobTrace::Clear();
  clear_has_trace();
}
inline const ::Cmd::BlobTrace& BlobData::trace() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.trace)
  return trace_ != NULL ? *trace_ : *default_instance_->trace_;
}
inline ::Cmd::BlobTrace* BlobData::mutable_trace() {
  set_has_trace();
  if (trace_ == NULL) trace_ = new ::Cmd::BlobTrace;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.trace)
  return trace_;
}
inline ::Cmd::BlobTrace* BlobData::release_trace() {
  clear_has_trace();
  ::Cmd::BlobTrace* temp = trace_;
  trace_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_trace(::Cmd::BlobTrace* trace) {
  delete trace_;
  trace_ = trace;
  if (trace) {
    set_has_trace();
  } else {
    clear_has_trace();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.trace)
}

// optional .Cmd.BlobDojo dojo = 26;
inline bool BlobData::has_dojo() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BlobData::set_has_dojo() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BlobData::clear_has_dojo() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BlobData::clear_dojo() {
  if (dojo_ != NULL) dojo_->::Cmd::BlobDojo::Clear();
  clear_has_dojo();
}
inline const ::Cmd::BlobDojo& BlobData::dojo() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.dojo)
  return dojo_ != NULL ? *dojo_ : *default_instance_->dojo_;
}
inline ::Cmd::BlobDojo* BlobData::mutable_dojo() {
  set_has_dojo();
  if (dojo_ == NULL) dojo_ = new ::Cmd::BlobDojo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.dojo)
  return dojo_;
}
inline ::Cmd::BlobDojo* BlobData::release_dojo() {
  clear_has_dojo();
  ::Cmd::BlobDojo* temp = dojo_;
  dojo_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_dojo(::Cmd::BlobDojo* dojo) {
  delete dojo_;
  dojo_ = dojo;
  if (dojo) {
    set_has_dojo();
  } else {
    clear_has_dojo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.dojo)
}

// optional .Cmd.BlobPack pack = 27;
inline bool BlobData::has_pack() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BlobData::set_has_pack() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BlobData::clear_has_pack() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BlobData::clear_pack() {
  if (pack_ != NULL) pack_->::Cmd::BlobPack::Clear();
  clear_has_pack();
}
inline const ::Cmd::BlobPack& BlobData::pack() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.pack)
  return pack_ != NULL ? *pack_ : *default_instance_->pack_;
}
inline ::Cmd::BlobPack* BlobData::mutable_pack() {
  set_has_pack();
  if (pack_ == NULL) pack_ = new ::Cmd::BlobPack;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.pack)
  return pack_;
}
inline ::Cmd::BlobPack* BlobData::release_pack() {
  clear_has_pack();
  ::Cmd::BlobPack* temp = pack_;
  pack_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_pack(::Cmd::BlobPack* pack) {
  delete pack_;
  pack_ = pack;
  if (pack) {
    set_has_pack();
  } else {
    clear_has_pack();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.pack)
}

// optional .Cmd.BlobQuest quest = 28;
inline bool BlobData::has_quest() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BlobData::set_has_quest() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BlobData::clear_has_quest() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BlobData::clear_quest() {
  if (quest_ != NULL) quest_->::Cmd::BlobQuest::Clear();
  clear_has_quest();
}
inline const ::Cmd::BlobQuest& BlobData::quest() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.quest)
  return quest_ != NULL ? *quest_ : *default_instance_->quest_;
}
inline ::Cmd::BlobQuest* BlobData::mutable_quest() {
  set_has_quest();
  if (quest_ == NULL) quest_ = new ::Cmd::BlobQuest;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.quest)
  return quest_;
}
inline ::Cmd::BlobQuest* BlobData::release_quest() {
  clear_has_quest();
  ::Cmd::BlobQuest* temp = quest_;
  quest_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_quest(::Cmd::BlobQuest* quest) {
  delete quest_;
  quest_ = quest;
  if (quest) {
    set_has_quest();
  } else {
    clear_has_quest();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.quest)
}

// optional .Cmd.BlobTitle title = 29;
inline bool BlobData::has_title() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BlobData::set_has_title() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BlobData::clear_has_title() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BlobData::clear_title() {
  if (title_ != NULL) title_->::Cmd::BlobTitle::Clear();
  clear_has_title();
}
inline const ::Cmd::BlobTitle& BlobData::title() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.title)
  return title_ != NULL ? *title_ : *default_instance_->title_;
}
inline ::Cmd::BlobTitle* BlobData::mutable_title() {
  set_has_title();
  if (title_ == NULL) title_ = new ::Cmd::BlobTitle;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.title)
  return title_;
}
inline ::Cmd::BlobTitle* BlobData::release_title() {
  clear_has_title();
  ::Cmd::BlobTitle* temp = title_;
  title_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_title(::Cmd::BlobTitle* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.title)
}

// optional .Cmd.BlobLine line = 30;
inline bool BlobData::has_line() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BlobData::set_has_line() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BlobData::clear_has_line() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BlobData::clear_line() {
  if (line_ != NULL) line_->::Cmd::BlobLine::Clear();
  clear_has_line();
}
inline const ::Cmd::BlobLine& BlobData::line() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::Cmd::BlobLine* BlobData::mutable_line() {
  set_has_line();
  if (line_ == NULL) line_ = new ::Cmd::BlobLine;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.line)
  return line_;
}
inline ::Cmd::BlobLine* BlobData::release_line() {
  clear_has_line();
  ::Cmd::BlobLine* temp = line_;
  line_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_line(::Cmd::BlobLine* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.line)
}

// optional .Cmd.BlobPet pet = 31;
inline bool BlobData::has_pet() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BlobData::set_has_pet() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BlobData::clear_has_pet() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BlobData::clear_pet() {
  if (pet_ != NULL) pet_->::Cmd::BlobPet::Clear();
  clear_has_pet();
}
inline const ::Cmd::BlobPet& BlobData::pet() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.pet)
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::Cmd::BlobPet* BlobData::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::Cmd::BlobPet;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.pet)
  return pet_;
}
inline ::Cmd::BlobPet* BlobData::release_pet() {
  clear_has_pet();
  ::Cmd::BlobPet* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_pet(::Cmd::BlobPet* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.pet)
}

// optional .Cmd.BlobVar var = 32;
inline bool BlobData::has_var() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BlobData::set_has_var() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BlobData::clear_has_var() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BlobData::clear_var() {
  if (var_ != NULL) var_->::Cmd::BlobVar::Clear();
  clear_has_var();
}
inline const ::Cmd::BlobVar& BlobData::var() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.var)
  return var_ != NULL ? *var_ : *default_instance_->var_;
}
inline ::Cmd::BlobVar* BlobData::mutable_var() {
  set_has_var();
  if (var_ == NULL) var_ = new ::Cmd::BlobVar;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.var)
  return var_;
}
inline ::Cmd::BlobVar* BlobData::release_var() {
  clear_has_var();
  ::Cmd::BlobVar* temp = var_;
  var_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_var(::Cmd::BlobVar* var) {
  delete var_;
  var_ = var;
  if (var) {
    set_has_var();
  } else {
    clear_has_var();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.var)
}

// optional .Cmd.BlobChatMsg chatmsg = 33;
inline bool BlobData::has_chatmsg() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BlobData::set_has_chatmsg() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BlobData::clear_has_chatmsg() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BlobData::clear_chatmsg() {
  if (chatmsg_ != NULL) chatmsg_->::Cmd::BlobChatMsg::Clear();
  clear_has_chatmsg();
}
inline const ::Cmd::BlobChatMsg& BlobData::chatmsg() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.chatmsg)
  return chatmsg_ != NULL ? *chatmsg_ : *default_instance_->chatmsg_;
}
inline ::Cmd::BlobChatMsg* BlobData::mutable_chatmsg() {
  set_has_chatmsg();
  if (chatmsg_ == NULL) chatmsg_ = new ::Cmd::BlobChatMsg;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.chatmsg)
  return chatmsg_;
}
inline ::Cmd::BlobChatMsg* BlobData::release_chatmsg() {
  clear_has_chatmsg();
  ::Cmd::BlobChatMsg* temp = chatmsg_;
  chatmsg_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_chatmsg(::Cmd::BlobChatMsg* chatmsg) {
  delete chatmsg_;
  chatmsg_ = chatmsg;
  if (chatmsg) {
    set_has_chatmsg();
  } else {
    clear_has_chatmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.chatmsg)
}

// optional .Cmd.BlobUserTower tower = 34;
inline bool BlobData::has_tower() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BlobData::set_has_tower() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BlobData::clear_has_tower() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BlobData::clear_tower() {
  if (tower_ != NULL) tower_->::Cmd::BlobUserTower::Clear();
  clear_has_tower();
}
inline const ::Cmd::BlobUserTower& BlobData::tower() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.tower)
  return tower_ != NULL ? *tower_ : *default_instance_->tower_;
}
inline ::Cmd::BlobUserTower* BlobData::mutable_tower() {
  set_has_tower();
  if (tower_ == NULL) tower_ = new ::Cmd::BlobUserTower;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.tower)
  return tower_;
}
inline ::Cmd::BlobUserTower* BlobData::release_tower() {
  clear_has_tower();
  ::Cmd::BlobUserTower* temp = tower_;
  tower_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_tower(::Cmd::BlobUserTower* tower) {
  delete tower_;
  tower_ = tower;
  if (tower) {
    set_has_tower();
  } else {
    clear_has_tower();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.tower)
}

// optional .Cmd.BlobSeal seal = 35;
inline bool BlobData::has_seal() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BlobData::set_has_seal() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BlobData::clear_has_seal() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BlobData::clear_seal() {
  if (seal_ != NULL) seal_->::Cmd::BlobSeal::Clear();
  clear_has_seal();
}
inline const ::Cmd::BlobSeal& BlobData::seal() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.seal)
  return seal_ != NULL ? *seal_ : *default_instance_->seal_;
}
inline ::Cmd::BlobSeal* BlobData::mutable_seal() {
  set_has_seal();
  if (seal_ == NULL) seal_ = new ::Cmd::BlobSeal;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.seal)
  return seal_;
}
inline ::Cmd::BlobSeal* BlobData::release_seal() {
  clear_has_seal();
  ::Cmd::BlobSeal* temp = seal_;
  seal_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_seal(::Cmd::BlobSeal* seal) {
  delete seal_;
  seal_ = seal;
  if (seal) {
    set_has_seal();
  } else {
    clear_has_seal();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.seal)
}

// optional .Cmd.BlobManual manual = 36;
inline bool BlobData::has_manual() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BlobData::set_has_manual() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BlobData::clear_has_manual() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BlobData::clear_manual() {
  if (manual_ != NULL) manual_->::Cmd::BlobManual::Clear();
  clear_has_manual();
}
inline const ::Cmd::BlobManual& BlobData::manual() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.manual)
  return manual_ != NULL ? *manual_ : *default_instance_->manual_;
}
inline ::Cmd::BlobManual* BlobData::mutable_manual() {
  set_has_manual();
  if (manual_ == NULL) manual_ = new ::Cmd::BlobManual;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.manual)
  return manual_;
}
inline ::Cmd::BlobManual* BlobData::release_manual() {
  clear_has_manual();
  ::Cmd::BlobManual* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_manual(::Cmd::BlobManual* manual) {
  delete manual_;
  manual_ = manual;
  if (manual) {
    set_has_manual();
  } else {
    clear_has_manual();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.manual)
}

// optional .Cmd.BlobFirstActionDone action = 37;
inline bool BlobData::has_action() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BlobData::set_has_action() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BlobData::clear_has_action() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BlobData::clear_action() {
  if (action_ != NULL) action_->::Cmd::BlobFirstActionDone::Clear();
  clear_has_action();
}
inline const ::Cmd::BlobFirstActionDone& BlobData::action() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.action)
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::Cmd::BlobFirstActionDone* BlobData::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::Cmd::BlobFirstActionDone;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.action)
  return action_;
}
inline ::Cmd::BlobFirstActionDone* BlobData::release_action() {
  clear_has_action();
  ::Cmd::BlobFirstActionDone* temp = action_;
  action_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_action(::Cmd::BlobFirstActionDone* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.action)
}

// optional .Cmd.BlobAttr attr = 38;
inline bool BlobData::has_attr() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BlobData::set_has_attr() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BlobData::clear_has_attr() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BlobData::clear_attr() {
  if (attr_ != NULL) attr_->::Cmd::BlobAttr::Clear();
  clear_has_attr();
}
inline const ::Cmd::BlobAttr& BlobData::attr() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::Cmd::BlobAttr* BlobData::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::Cmd::BlobAttr;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.attr)
  return attr_;
}
inline ::Cmd::BlobAttr* BlobData::release_attr() {
  clear_has_attr();
  ::Cmd::BlobAttr* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_attr(::Cmd::BlobAttr* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.attr)
}

// optional .Cmd.BlobOption opt = 39;
inline bool BlobData::has_opt() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BlobData::set_has_opt() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BlobData::clear_has_opt() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BlobData::clear_opt() {
  if (opt_ != NULL) opt_->::Cmd::BlobOption::Clear();
  clear_has_opt();
}
inline const ::Cmd::BlobOption& BlobData::opt() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.opt)
  return opt_ != NULL ? *opt_ : *default_instance_->opt_;
}
inline ::Cmd::BlobOption* BlobData::mutable_opt() {
  set_has_opt();
  if (opt_ == NULL) opt_ = new ::Cmd::BlobOption;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.opt)
  return opt_;
}
inline ::Cmd::BlobOption* BlobData::release_opt() {
  clear_has_opt();
  ::Cmd::BlobOption* temp = opt_;
  opt_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_opt(::Cmd::BlobOption* opt) {
  delete opt_;
  opt_ = opt;
  if (opt) {
    set_has_opt();
  } else {
    clear_has_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.opt)
}

// optional .Cmd.BlobHandNpc handnpc = 40;
inline bool BlobData::has_handnpc() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BlobData::set_has_handnpc() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BlobData::clear_has_handnpc() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BlobData::clear_handnpc() {
  if (handnpc_ != NULL) handnpc_->::Cmd::BlobHandNpc::Clear();
  clear_has_handnpc();
}
inline const ::Cmd::BlobHandNpc& BlobData::handnpc() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.handnpc)
  return handnpc_ != NULL ? *handnpc_ : *default_instance_->handnpc_;
}
inline ::Cmd::BlobHandNpc* BlobData::mutable_handnpc() {
  set_has_handnpc();
  if (handnpc_ == NULL) handnpc_ = new ::Cmd::BlobHandNpc;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.handnpc)
  return handnpc_;
}
inline ::Cmd::BlobHandNpc* BlobData::release_handnpc() {
  clear_has_handnpc();
  ::Cmd::BlobHandNpc* temp = handnpc_;
  handnpc_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_handnpc(::Cmd::BlobHandNpc* handnpc) {
  delete handnpc_;
  handnpc_ = handnpc;
  if (handnpc) {
    set_has_handnpc();
  } else {
    clear_has_handnpc();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.handnpc)
}

// optional .Cmd.BlobCamera camera = 41;
inline bool BlobData::has_camera() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void BlobData::set_has_camera() {
  _has_bits_[1] |= 0x00000100u;
}
inline void BlobData::clear_has_camera() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void BlobData::clear_camera() {
  if (camera_ != NULL) camera_->::Cmd::BlobCamera::Clear();
  clear_has_camera();
}
inline const ::Cmd::BlobCamera& BlobData::camera() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.camera)
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
inline ::Cmd::BlobCamera* BlobData::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) camera_ = new ::Cmd::BlobCamera;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.camera)
  return camera_;
}
inline ::Cmd::BlobCamera* BlobData::release_camera() {
  clear_has_camera();
  ::Cmd::BlobCamera* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_camera(::Cmd::BlobCamera* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.camera)
}

// optional .Cmd.BlobZone zone = 42;
inline bool BlobData::has_zone() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void BlobData::set_has_zone() {
  _has_bits_[1] |= 0x00000200u;
}
inline void BlobData::clear_has_zone() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void BlobData::clear_zone() {
  if (zone_ != NULL) zone_->::Cmd::BlobZone::Clear();
  clear_has_zone();
}
inline const ::Cmd::BlobZone& BlobData::zone() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.zone)
  return zone_ != NULL ? *zone_ : *default_instance_->zone_;
}
inline ::Cmd::BlobZone* BlobData::mutable_zone() {
  set_has_zone();
  if (zone_ == NULL) zone_ = new ::Cmd::BlobZone;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.zone)
  return zone_;
}
inline ::Cmd::BlobZone* BlobData::release_zone() {
  clear_has_zone();
  ::Cmd::BlobZone* temp = zone_;
  zone_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_zone(::Cmd::BlobZone* zone) {
  delete zone_;
  zone_ = zone;
  if (zone) {
    set_has_zone();
  } else {
    clear_has_zone();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.zone)
}

// optional .Cmd.BlobGuild guild = 43;
inline bool BlobData::has_guild() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void BlobData::set_has_guild() {
  _has_bits_[1] |= 0x00000400u;
}
inline void BlobData::clear_has_guild() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void BlobData::clear_guild() {
  if (guild_ != NULL) guild_->::Cmd::BlobGuild::Clear();
  clear_has_guild();
}
inline const ::Cmd::BlobGuild& BlobData::guild() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.guild)
  return guild_ != NULL ? *guild_ : *default_instance_->guild_;
}
inline ::Cmd::BlobGuild* BlobData::mutable_guild() {
  set_has_guild();
  if (guild_ == NULL) guild_ = new ::Cmd::BlobGuild;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.guild)
  return guild_;
}
inline ::Cmd::BlobGuild* BlobData::release_guild() {
  clear_has_guild();
  ::Cmd::BlobGuild* temp = guild_;
  guild_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_guild(::Cmd::BlobGuild* guild) {
  delete guild_;
  guild_ = guild;
  if (guild) {
    set_has_guild();
  } else {
    clear_has_guild();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.guild)
}

// optional .Cmd.BlobTeam team = 44;
inline bool BlobData::has_team() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void BlobData::set_has_team() {
  _has_bits_[1] |= 0x00000800u;
}
inline void BlobData::clear_has_team() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void BlobData::clear_team() {
  if (team_ != NULL) team_->::Cmd::BlobTeam::Clear();
  clear_has_team();
}
inline const ::Cmd::BlobTeam& BlobData::team() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.team)
  return team_ != NULL ? *team_ : *default_instance_->team_;
}
inline ::Cmd::BlobTeam* BlobData::mutable_team() {
  set_has_team();
  if (team_ == NULL) team_ = new ::Cmd::BlobTeam;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.team)
  return team_;
}
inline ::Cmd::BlobTeam* BlobData::release_team() {
  clear_has_team();
  ::Cmd::BlobTeam* temp = team_;
  team_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_team(::Cmd::BlobTeam* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.team)
}

// optional .Cmd.BlobUserZone userzone = 45;
inline bool BlobData::has_userzone() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void BlobData::set_has_userzone() {
  _has_bits_[1] |= 0x00001000u;
}
inline void BlobData::clear_has_userzone() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void BlobData::clear_userzone() {
  if (userzone_ != NULL) userzone_->::Cmd::BlobUserZone::Clear();
  clear_has_userzone();
}
inline const ::Cmd::BlobUserZone& BlobData::userzone() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.userzone)
  return userzone_ != NULL ? *userzone_ : *default_instance_->userzone_;
}
inline ::Cmd::BlobUserZone* BlobData::mutable_userzone() {
  set_has_userzone();
  if (userzone_ == NULL) userzone_ = new ::Cmd::BlobUserZone;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.userzone)
  return userzone_;
}
inline ::Cmd::BlobUserZone* BlobData::release_userzone() {
  clear_has_userzone();
  ::Cmd::BlobUserZone* temp = userzone_;
  userzone_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_userzone(::Cmd::BlobUserZone* userzone) {
  delete userzone_;
  userzone_ = userzone;
  if (userzone) {
    set_has_userzone();
  } else {
    clear_has_userzone();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.userzone)
}

// optional .Cmd.BlobSpEffect speffect = 46;
inline bool BlobData::has_speffect() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void BlobData::set_has_speffect() {
  _has_bits_[1] |= 0x00002000u;
}
inline void BlobData::clear_has_speffect() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void BlobData::clear_speffect() {
  if (speffect_ != NULL) speffect_->::Cmd::BlobSpEffect::Clear();
  clear_has_speffect();
}
inline const ::Cmd::BlobSpEffect& BlobData::speffect() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.speffect)
  return speffect_ != NULL ? *speffect_ : *default_instance_->speffect_;
}
inline ::Cmd::BlobSpEffect* BlobData::mutable_speffect() {
  set_has_speffect();
  if (speffect_ == NULL) speffect_ = new ::Cmd::BlobSpEffect;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.speffect)
  return speffect_;
}
inline ::Cmd::BlobSpEffect* BlobData::release_speffect() {
  clear_has_speffect();
  ::Cmd::BlobSpEffect* temp = speffect_;
  speffect_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_speffect(::Cmd::BlobSpEffect* speffect) {
  delete speffect_;
  speffect_ = speffect;
  if (speffect) {
    set_has_speffect();
  } else {
    clear_has_speffect();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.speffect)
}

// optional .Cmd.BlobDeposit deposit = 47;
inline bool BlobData::has_deposit() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void BlobData::set_has_deposit() {
  _has_bits_[1] |= 0x00004000u;
}
inline void BlobData::clear_has_deposit() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void BlobData::clear_deposit() {
  if (deposit_ != NULL) deposit_->::Cmd::BlobDeposit::Clear();
  clear_has_deposit();
}
inline const ::Cmd::BlobDeposit& BlobData::deposit() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.deposit)
  return deposit_ != NULL ? *deposit_ : *default_instance_->deposit_;
}
inline ::Cmd::BlobDeposit* BlobData::mutable_deposit() {
  set_has_deposit();
  if (deposit_ == NULL) deposit_ = new ::Cmd::BlobDeposit;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.deposit)
  return deposit_;
}
inline ::Cmd::BlobDeposit* BlobData::release_deposit() {
  clear_has_deposit();
  ::Cmd::BlobDeposit* temp = deposit_;
  deposit_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_deposit(::Cmd::BlobDeposit* deposit) {
  delete deposit_;
  deposit_ = deposit;
  if (deposit) {
    set_has_deposit();
  } else {
    clear_has_deposit();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.deposit)
}

// optional .Cmd.BlobActivity activity = 48;
inline bool BlobData::has_activity() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void BlobData::set_has_activity() {
  _has_bits_[1] |= 0x00008000u;
}
inline void BlobData::clear_has_activity() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void BlobData::clear_activity() {
  if (activity_ != NULL) activity_->::Cmd::BlobActivity::Clear();
  clear_has_activity();
}
inline const ::Cmd::BlobActivity& BlobData::activity() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.activity)
  return activity_ != NULL ? *activity_ : *default_instance_->activity_;
}
inline ::Cmd::BlobActivity* BlobData::mutable_activity() {
  set_has_activity();
  if (activity_ == NULL) activity_ = new ::Cmd::BlobActivity;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.activity)
  return activity_;
}
inline ::Cmd::BlobActivity* BlobData::release_activity() {
  clear_has_activity();
  ::Cmd::BlobActivity* temp = activity_;
  activity_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_activity(::Cmd::BlobActivity* activity) {
  delete activity_;
  activity_ = activity;
  if (activity) {
    set_has_activity();
  } else {
    clear_has_activity();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.activity)
}

// optional .Cmd.BlobChat chat = 51;
inline bool BlobData::has_chat() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void BlobData::set_has_chat() {
  _has_bits_[1] |= 0x00010000u;
}
inline void BlobData::clear_has_chat() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void BlobData::clear_chat() {
  if (chat_ != NULL) chat_->::Cmd::BlobChat::Clear();
  clear_has_chat();
}
inline const ::Cmd::BlobChat& BlobData::chat() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.chat)
  return chat_ != NULL ? *chat_ : *default_instance_->chat_;
}
inline ::Cmd::BlobChat* BlobData::mutable_chat() {
  set_has_chat();
  if (chat_ == NULL) chat_ = new ::Cmd::BlobChat;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.chat)
  return chat_;
}
inline ::Cmd::BlobChat* BlobData::release_chat() {
  clear_has_chat();
  ::Cmd::BlobChat* temp = chat_;
  chat_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_chat(::Cmd::BlobChat* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.chat)
}

// optional .Cmd.BlobBattle battle = 52;
inline bool BlobData::has_battle() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void BlobData::set_has_battle() {
  _has_bits_[1] |= 0x00020000u;
}
inline void BlobData::clear_has_battle() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void BlobData::clear_battle() {
  if (battle_ != NULL) battle_->::Cmd::BlobBattle::Clear();
  clear_has_battle();
}
inline const ::Cmd::BlobBattle& BlobData::battle() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.battle)
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::Cmd::BlobBattle* BlobData::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::Cmd::BlobBattle;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.battle)
  return battle_;
}
inline ::Cmd::BlobBattle* BlobData::release_battle() {
  clear_has_battle();
  ::Cmd::BlobBattle* temp = battle_;
  battle_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_battle(::Cmd::BlobBattle* battle) {
  delete battle_;
  battle_ = battle;
  if (battle) {
    set_has_battle();
  } else {
    clear_has_battle();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.battle)
}

// optional .Cmd.BlobStatVar statvar = 53;
inline bool BlobData::has_statvar() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void BlobData::set_has_statvar() {
  _has_bits_[1] |= 0x00040000u;
}
inline void BlobData::clear_has_statvar() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void BlobData::clear_statvar() {
  if (statvar_ != NULL) statvar_->::Cmd::BlobStatVar::Clear();
  clear_has_statvar();
}
inline const ::Cmd::BlobStatVar& BlobData::statvar() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.statvar)
  return statvar_ != NULL ? *statvar_ : *default_instance_->statvar_;
}
inline ::Cmd::BlobStatVar* BlobData::mutable_statvar() {
  set_has_statvar();
  if (statvar_ == NULL) statvar_ = new ::Cmd::BlobStatVar;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.statvar)
  return statvar_;
}
inline ::Cmd::BlobStatVar* BlobData::release_statvar() {
  clear_has_statvar();
  ::Cmd::BlobStatVar* temp = statvar_;
  statvar_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_statvar(::Cmd::BlobStatVar* statvar) {
  delete statvar_;
  statvar_ = statvar;
  if (statvar) {
    set_has_statvar();
  } else {
    clear_has_statvar();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.statvar)
}

// optional .Cmd.BlobSeeNpc seenpc = 54;
inline bool BlobData::has_seenpc() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void BlobData::set_has_seenpc() {
  _has_bits_[1] |= 0x00080000u;
}
inline void BlobData::clear_has_seenpc() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void BlobData::clear_seenpc() {
  if (seenpc_ != NULL) seenpc_->::Cmd::BlobSeeNpc::Clear();
  clear_has_seenpc();
}
inline const ::Cmd::BlobSeeNpc& BlobData::seenpc() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.seenpc)
  return seenpc_ != NULL ? *seenpc_ : *default_instance_->seenpc_;
}
inline ::Cmd::BlobSeeNpc* BlobData::mutable_seenpc() {
  set_has_seenpc();
  if (seenpc_ == NULL) seenpc_ = new ::Cmd::BlobSeeNpc;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.seenpc)
  return seenpc_;
}
inline ::Cmd::BlobSeeNpc* BlobData::release_seenpc() {
  clear_has_seenpc();
  ::Cmd::BlobSeeNpc* temp = seenpc_;
  seenpc_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_seenpc(::Cmd::BlobSeeNpc* seenpc) {
  delete seenpc_;
  seenpc_ = seenpc;
  if (seenpc) {
    set_has_seenpc();
  } else {
    clear_has_seenpc();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.seenpc)
}

// optional .Cmd.BlobWeaponPet weaponpet = 55;
inline bool BlobData::has_weaponpet() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void BlobData::set_has_weaponpet() {
  _has_bits_[1] |= 0x00100000u;
}
inline void BlobData::clear_has_weaponpet() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void BlobData::clear_weaponpet() {
  if (weaponpet_ != NULL) weaponpet_->::Cmd::BlobWeaponPet::Clear();
  clear_has_weaponpet();
}
inline const ::Cmd::BlobWeaponPet& BlobData::weaponpet() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.weaponpet)
  return weaponpet_ != NULL ? *weaponpet_ : *default_instance_->weaponpet_;
}
inline ::Cmd::BlobWeaponPet* BlobData::mutable_weaponpet() {
  set_has_weaponpet();
  if (weaponpet_ == NULL) weaponpet_ = new ::Cmd::BlobWeaponPet;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.weaponpet)
  return weaponpet_;
}
inline ::Cmd::BlobWeaponPet* BlobData::release_weaponpet() {
  clear_has_weaponpet();
  ::Cmd::BlobWeaponPet* temp = weaponpet_;
  weaponpet_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_weaponpet(::Cmd::BlobWeaponPet* weaponpet) {
  delete weaponpet_;
  weaponpet_ = weaponpet;
  if (weaponpet) {
    set_has_weaponpet();
  } else {
    clear_has_weaponpet();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.weaponpet)
}

// optional .Cmd.BlobTicket ticket = 56;
inline bool BlobData::has_ticket() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void BlobData::set_has_ticket() {
  _has_bits_[1] |= 0x00200000u;
}
inline void BlobData::clear_has_ticket() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void BlobData::clear_ticket() {
  if (ticket_ != NULL) ticket_->::Cmd::BlobTicket::Clear();
  clear_has_ticket();
}
inline const ::Cmd::BlobTicket& BlobData::ticket() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.ticket)
  return ticket_ != NULL ? *ticket_ : *default_instance_->ticket_;
}
inline ::Cmd::BlobTicket* BlobData::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == NULL) ticket_ = new ::Cmd::BlobTicket;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.ticket)
  return ticket_;
}
inline ::Cmd::BlobTicket* BlobData::release_ticket() {
  clear_has_ticket();
  ::Cmd::BlobTicket* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_ticket(::Cmd::BlobTicket* ticket) {
  delete ticket_;
  ticket_ = ticket;
  if (ticket) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.ticket)
}

// optional .Cmd.BlobShare share = 57;
inline bool BlobData::has_share() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void BlobData::set_has_share() {
  _has_bits_[1] |= 0x00400000u;
}
inline void BlobData::clear_has_share() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void BlobData::clear_share() {
  if (share_ != NULL) share_->::Cmd::BlobShare::Clear();
  clear_has_share();
}
inline const ::Cmd::BlobShare& BlobData::share() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.share)
  return share_ != NULL ? *share_ : *default_instance_->share_;
}
inline ::Cmd::BlobShare* BlobData::mutable_share() {
  set_has_share();
  if (share_ == NULL) share_ = new ::Cmd::BlobShare;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.share)
  return share_;
}
inline ::Cmd::BlobShare* BlobData::release_share() {
  clear_has_share();
  ::Cmd::BlobShare* temp = share_;
  share_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_share(::Cmd::BlobShare* share) {
  delete share_;
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.share)
}

// optional .Cmd.BlobAchieve achieve = 58;
inline bool BlobData::has_achieve() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void BlobData::set_has_achieve() {
  _has_bits_[1] |= 0x00800000u;
}
inline void BlobData::clear_has_achieve() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void BlobData::clear_achieve() {
  if (achieve_ != NULL) achieve_->::Cmd::BlobAchieve::Clear();
  clear_has_achieve();
}
inline const ::Cmd::BlobAchieve& BlobData::achieve() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.achieve)
  return achieve_ != NULL ? *achieve_ : *default_instance_->achieve_;
}
inline ::Cmd::BlobAchieve* BlobData::mutable_achieve() {
  set_has_achieve();
  if (achieve_ == NULL) achieve_ = new ::Cmd::BlobAchieve;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.achieve)
  return achieve_;
}
inline ::Cmd::BlobAchieve* BlobData::release_achieve() {
  clear_has_achieve();
  ::Cmd::BlobAchieve* temp = achieve_;
  achieve_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_achieve(::Cmd::BlobAchieve* achieve) {
  delete achieve_;
  achieve_ = achieve;
  if (achieve) {
    set_has_achieve();
  } else {
    clear_has_achieve();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.achieve)
}

// optional .Cmd.BlobAuthorize authorize = 59;
inline bool BlobData::has_authorize() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void BlobData::set_has_authorize() {
  _has_bits_[1] |= 0x01000000u;
}
inline void BlobData::clear_has_authorize() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void BlobData::clear_authorize() {
  if (authorize_ != NULL) authorize_->::Cmd::BlobAuthorize::Clear();
  clear_has_authorize();
}
inline const ::Cmd::BlobAuthorize& BlobData::authorize() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.authorize)
  return authorize_ != NULL ? *authorize_ : *default_instance_->authorize_;
}
inline ::Cmd::BlobAuthorize* BlobData::mutable_authorize() {
  set_has_authorize();
  if (authorize_ == NULL) authorize_ = new ::Cmd::BlobAuthorize;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.authorize)
  return authorize_;
}
inline ::Cmd::BlobAuthorize* BlobData::release_authorize() {
  clear_has_authorize();
  ::Cmd::BlobAuthorize* temp = authorize_;
  authorize_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_authorize(::Cmd::BlobAuthorize* authorize) {
  delete authorize_;
  authorize_ = authorize;
  if (authorize) {
    set_has_authorize();
  } else {
    clear_has_authorize();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.authorize)
}

// optional .Cmd.BlobGuildRaid guildraid = 60;
inline bool BlobData::has_guildraid() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void BlobData::set_has_guildraid() {
  _has_bits_[1] |= 0x02000000u;
}
inline void BlobData::clear_has_guildraid() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void BlobData::clear_guildraid() {
  if (guildraid_ != NULL) guildraid_->::Cmd::BlobGuildRaid::Clear();
  clear_has_guildraid();
}
inline const ::Cmd::BlobGuildRaid& BlobData::guildraid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.guildraid)
  return guildraid_ != NULL ? *guildraid_ : *default_instance_->guildraid_;
}
inline ::Cmd::BlobGuildRaid* BlobData::mutable_guildraid() {
  set_has_guildraid();
  if (guildraid_ == NULL) guildraid_ = new ::Cmd::BlobGuildRaid;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.guildraid)
  return guildraid_;
}
inline ::Cmd::BlobGuildRaid* BlobData::release_guildraid() {
  clear_has_guildraid();
  ::Cmd::BlobGuildRaid* temp = guildraid_;
  guildraid_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_guildraid(::Cmd::BlobGuildRaid* guildraid) {
  delete guildraid_;
  guildraid_ = guildraid;
  if (guildraid) {
    set_has_guildraid();
  } else {
    clear_has_guildraid();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.guildraid)
}

// optional .Cmd.BlobAstrolabe astrolabe = 61;
inline bool BlobData::has_astrolabe() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void BlobData::set_has_astrolabe() {
  _has_bits_[1] |= 0x04000000u;
}
inline void BlobData::clear_has_astrolabe() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void BlobData::clear_astrolabe() {
  if (astrolabe_ != NULL) astrolabe_->::Cmd::BlobAstrolabe::Clear();
  clear_has_astrolabe();
}
inline const ::Cmd::BlobAstrolabe& BlobData::astrolabe() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.astrolabe)
  return astrolabe_ != NULL ? *astrolabe_ : *default_instance_->astrolabe_;
}
inline ::Cmd::BlobAstrolabe* BlobData::mutable_astrolabe() {
  set_has_astrolabe();
  if (astrolabe_ == NULL) astrolabe_ = new ::Cmd::BlobAstrolabe;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.astrolabe)
  return astrolabe_;
}
inline ::Cmd::BlobAstrolabe* BlobData::release_astrolabe() {
  clear_has_astrolabe();
  ::Cmd::BlobAstrolabe* temp = astrolabe_;
  astrolabe_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_astrolabe(::Cmd::BlobAstrolabe* astrolabe) {
  delete astrolabe_;
  astrolabe_ = astrolabe;
  if (astrolabe) {
    set_has_astrolabe();
  } else {
    clear_has_astrolabe();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.astrolabe)
}

// optional .Cmd.BlobSettings settings = 62;
inline bool BlobData::has_settings() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void BlobData::set_has_settings() {
  _has_bits_[1] |= 0x08000000u;
}
inline void BlobData::clear_has_settings() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void BlobData::clear_settings() {
  if (settings_ != NULL) settings_->::Cmd::BlobSettings::Clear();
  clear_has_settings();
}
inline const ::Cmd::BlobSettings& BlobData::settings() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::Cmd::BlobSettings* BlobData::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::Cmd::BlobSettings;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.settings)
  return settings_;
}
inline ::Cmd::BlobSettings* BlobData::release_settings() {
  clear_has_settings();
  ::Cmd::BlobSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_settings(::Cmd::BlobSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.settings)
}

// optional .Cmd.BlobPhoto photo = 63;
inline bool BlobData::has_photo() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void BlobData::set_has_photo() {
  _has_bits_[1] |= 0x10000000u;
}
inline void BlobData::clear_has_photo() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void BlobData::clear_photo() {
  if (photo_ != NULL) photo_->::Cmd::BlobPhoto::Clear();
  clear_has_photo();
}
inline const ::Cmd::BlobPhoto& BlobData::photo() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.photo)
  return photo_ != NULL ? *photo_ : *default_instance_->photo_;
}
inline ::Cmd::BlobPhoto* BlobData::mutable_photo() {
  set_has_photo();
  if (photo_ == NULL) photo_ = new ::Cmd::BlobPhoto;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.photo)
  return photo_;
}
inline ::Cmd::BlobPhoto* BlobData::release_photo() {
  clear_has_photo();
  ::Cmd::BlobPhoto* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_photo(::Cmd::BlobPhoto* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.photo)
}

// optional .Cmd.BlobFood food = 64;
inline bool BlobData::has_food() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void BlobData::set_has_food() {
  _has_bits_[1] |= 0x20000000u;
}
inline void BlobData::clear_has_food() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void BlobData::clear_food() {
  if (food_ != NULL) food_->::Cmd::BlobFood::Clear();
  clear_has_food();
}
inline const ::Cmd::BlobFood& BlobData::food() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.food)
  return food_ != NULL ? *food_ : *default_instance_->food_;
}
inline ::Cmd::BlobFood* BlobData::mutable_food() {
  set_has_food();
  if (food_ == NULL) food_ = new ::Cmd::BlobFood;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.food)
  return food_;
}
inline ::Cmd::BlobFood* BlobData::release_food() {
  clear_has_food();
  ::Cmd::BlobFood* temp = food_;
  food_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_food(::Cmd::BlobFood* food) {
  delete food_;
  food_ = food;
  if (food) {
    set_has_food();
  } else {
    clear_has_food();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.food)
}

// optional .Cmd.BlobUserPet userpet = 65;
inline bool BlobData::has_userpet() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void BlobData::set_has_userpet() {
  _has_bits_[1] |= 0x40000000u;
}
inline void BlobData::clear_has_userpet() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void BlobData::clear_userpet() {
  if (userpet_ != NULL) userpet_->::Cmd::BlobUserPet::Clear();
  clear_has_userpet();
}
inline const ::Cmd::BlobUserPet& BlobData::userpet() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.userpet)
  return userpet_ != NULL ? *userpet_ : *default_instance_->userpet_;
}
inline ::Cmd::BlobUserPet* BlobData::mutable_userpet() {
  set_has_userpet();
  if (userpet_ == NULL) userpet_ = new ::Cmd::BlobUserPet;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.userpet)
  return userpet_;
}
inline ::Cmd::BlobUserPet* BlobData::release_userpet() {
  clear_has_userpet();
  ::Cmd::BlobUserPet* temp = userpet_;
  userpet_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_userpet(::Cmd::BlobUserPet* userpet) {
  delete userpet_;
  userpet_ = userpet;
  if (userpet) {
    set_has_userpet();
  } else {
    clear_has_userpet();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.userpet)
}

// optional .Cmd.BlobPetAdventure petadventure = 66;
inline bool BlobData::has_petadventure() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void BlobData::set_has_petadventure() {
  _has_bits_[1] |= 0x80000000u;
}
inline void BlobData::clear_has_petadventure() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void BlobData::clear_petadventure() {
  if (petadventure_ != NULL) petadventure_->::Cmd::BlobPetAdventure::Clear();
  clear_has_petadventure();
}
inline const ::Cmd::BlobPetAdventure& BlobData::petadventure() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.petadventure)
  return petadventure_ != NULL ? *petadventure_ : *default_instance_->petadventure_;
}
inline ::Cmd::BlobPetAdventure* BlobData::mutable_petadventure() {
  set_has_petadventure();
  if (petadventure_ == NULL) petadventure_ = new ::Cmd::BlobPetAdventure;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.petadventure)
  return petadventure_;
}
inline ::Cmd::BlobPetAdventure* BlobData::release_petadventure() {
  clear_has_petadventure();
  ::Cmd::BlobPetAdventure* temp = petadventure_;
  petadventure_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_petadventure(::Cmd::BlobPetAdventure* petadventure) {
  delete petadventure_;
  petadventure_ = petadventure;
  if (petadventure) {
    set_has_petadventure();
  } else {
    clear_has_petadventure();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.petadventure)
}

// optional .Cmd.BlobTutorTask tutortask = 67;
inline bool BlobData::has_tutortask() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void BlobData::set_has_tutortask() {
  _has_bits_[2] |= 0x00000001u;
}
inline void BlobData::clear_has_tutortask() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void BlobData::clear_tutortask() {
  if (tutortask_ != NULL) tutortask_->::Cmd::BlobTutorTask::Clear();
  clear_has_tutortask();
}
inline const ::Cmd::BlobTutorTask& BlobData::tutortask() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.tutortask)
  return tutortask_ != NULL ? *tutortask_ : *default_instance_->tutortask_;
}
inline ::Cmd::BlobTutorTask* BlobData::mutable_tutortask() {
  set_has_tutortask();
  if (tutortask_ == NULL) tutortask_ = new ::Cmd::BlobTutorTask;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.tutortask)
  return tutortask_;
}
inline ::Cmd::BlobTutorTask* BlobData::release_tutortask() {
  clear_has_tutortask();
  ::Cmd::BlobTutorTask* temp = tutortask_;
  tutortask_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_tutortask(::Cmd::BlobTutorTask* tutortask) {
  delete tutortask_;
  tutortask_ = tutortask;
  if (tutortask) {
    set_has_tutortask();
  } else {
    clear_has_tutortask();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.tutortask)
}

// optional .Cmd.BlobEye eye = 68;
inline bool BlobData::has_eye() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void BlobData::set_has_eye() {
  _has_bits_[2] |= 0x00000002u;
}
inline void BlobData::clear_has_eye() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void BlobData::clear_eye() {
  if (eye_ != NULL) eye_->::Cmd::BlobEye::Clear();
  clear_has_eye();
}
inline const ::Cmd::BlobEye& BlobData::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.eye)
  return eye_ != NULL ? *eye_ : *default_instance_->eye_;
}
inline ::Cmd::BlobEye* BlobData::mutable_eye() {
  set_has_eye();
  if (eye_ == NULL) eye_ = new ::Cmd::BlobEye;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.eye)
  return eye_;
}
inline ::Cmd::BlobEye* BlobData::release_eye() {
  clear_has_eye();
  ::Cmd::BlobEye* temp = eye_;
  eye_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_eye(::Cmd::BlobEye* eye) {
  delete eye_;
  eye_ = eye;
  if (eye) {
    set_has_eye();
  } else {
    clear_has_eye();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.eye)
}

// optional .Cmd.BlobHighRefine highrefine = 69;
inline bool BlobData::has_highrefine() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void BlobData::set_has_highrefine() {
  _has_bits_[2] |= 0x00000004u;
}
inline void BlobData::clear_has_highrefine() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void BlobData::clear_highrefine() {
  if (highrefine_ != NULL) highrefine_->::Cmd::BlobHighRefine::Clear();
  clear_has_highrefine();
}
inline const ::Cmd::BlobHighRefine& BlobData::highrefine() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.highrefine)
  return highrefine_ != NULL ? *highrefine_ : *default_instance_->highrefine_;
}
inline ::Cmd::BlobHighRefine* BlobData::mutable_highrefine() {
  set_has_highrefine();
  if (highrefine_ == NULL) highrefine_ = new ::Cmd::BlobHighRefine;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.highrefine)
  return highrefine_;
}
inline ::Cmd::BlobHighRefine* BlobData::release_highrefine() {
  clear_has_highrefine();
  ::Cmd::BlobHighRefine* temp = highrefine_;
  highrefine_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_highrefine(::Cmd::BlobHighRefine* highrefine) {
  delete highrefine_;
  highrefine_ = highrefine;
  if (highrefine) {
    set_has_highrefine();
  } else {
    clear_has_highrefine();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.highrefine)
}

// optional .Cmd.BlobActivityEvent acevent = 70;
inline bool BlobData::has_acevent() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void BlobData::set_has_acevent() {
  _has_bits_[2] |= 0x00000008u;
}
inline void BlobData::clear_has_acevent() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void BlobData::clear_acevent() {
  if (acevent_ != NULL) acevent_->::Cmd::BlobActivityEvent::Clear();
  clear_has_acevent();
}
inline const ::Cmd::BlobActivityEvent& BlobData::acevent() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.acevent)
  return acevent_ != NULL ? *acevent_ : *default_instance_->acevent_;
}
inline ::Cmd::BlobActivityEvent* BlobData::mutable_acevent() {
  set_has_acevent();
  if (acevent_ == NULL) acevent_ = new ::Cmd::BlobActivityEvent;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.acevent)
  return acevent_;
}
inline ::Cmd::BlobActivityEvent* BlobData::release_acevent() {
  clear_has_acevent();
  ::Cmd::BlobActivityEvent* temp = acevent_;
  acevent_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_acevent(::Cmd::BlobActivityEvent* acevent) {
  delete acevent_;
  acevent_ = acevent;
  if (acevent) {
    set_has_acevent();
  } else {
    clear_has_acevent();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.acevent)
}

// optional .Cmd.BlobUserBeing being = 71;
inline bool BlobData::has_being() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void BlobData::set_has_being() {
  _has_bits_[2] |= 0x00000010u;
}
inline void BlobData::clear_has_being() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void BlobData::clear_being() {
  if (being_ != NULL) being_->::Cmd::BlobUserBeing::Clear();
  clear_has_being();
}
inline const ::Cmd::BlobUserBeing& BlobData::being() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.being)
  return being_ != NULL ? *being_ : *default_instance_->being_;
}
inline ::Cmd::BlobUserBeing* BlobData::mutable_being() {
  set_has_being();
  if (being_ == NULL) being_ = new ::Cmd::BlobUserBeing;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.being)
  return being_;
}
inline ::Cmd::BlobUserBeing* BlobData::release_being() {
  clear_has_being();
  ::Cmd::BlobUserBeing* temp = being_;
  being_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_being(::Cmd::BlobUserBeing* being) {
  delete being_;
  being_ = being;
  if (being) {
    set_has_being();
  } else {
    clear_has_being();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.being)
}

// optional .Cmd.BlobGuildChallenge gchallenge = 72;
inline bool BlobData::has_gchallenge() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void BlobData::set_has_gchallenge() {
  _has_bits_[2] |= 0x00000020u;
}
inline void BlobData::clear_has_gchallenge() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void BlobData::clear_gchallenge() {
  if (gchallenge_ != NULL) gchallenge_->::Cmd::BlobGuildChallenge::Clear();
  clear_has_gchallenge();
}
inline const ::Cmd::BlobGuildChallenge& BlobData::gchallenge() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.gchallenge)
  return gchallenge_ != NULL ? *gchallenge_ : *default_instance_->gchallenge_;
}
inline ::Cmd::BlobGuildChallenge* BlobData::mutable_gchallenge() {
  set_has_gchallenge();
  if (gchallenge_ == NULL) gchallenge_ = new ::Cmd::BlobGuildChallenge;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.gchallenge)
  return gchallenge_;
}
inline ::Cmd::BlobGuildChallenge* BlobData::release_gchallenge() {
  clear_has_gchallenge();
  ::Cmd::BlobGuildChallenge* temp = gchallenge_;
  gchallenge_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_gchallenge(::Cmd::BlobGuildChallenge* gchallenge) {
  delete gchallenge_;
  gchallenge_ = gchallenge;
  if (gchallenge) {
    set_has_gchallenge();
  } else {
    clear_has_gchallenge();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.gchallenge)
}

// optional .Cmd.BlobGvgData gvgdata = 73;
inline bool BlobData::has_gvgdata() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void BlobData::set_has_gvgdata() {
  _has_bits_[2] |= 0x00000040u;
}
inline void BlobData::clear_has_gvgdata() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void BlobData::clear_gvgdata() {
  if (gvgdata_ != NULL) gvgdata_->::Cmd::BlobGvgData::Clear();
  clear_has_gvgdata();
}
inline const ::Cmd::BlobGvgData& BlobData::gvgdata() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.gvgdata)
  return gvgdata_ != NULL ? *gvgdata_ : *default_instance_->gvgdata_;
}
inline ::Cmd::BlobGvgData* BlobData::mutable_gvgdata() {
  set_has_gvgdata();
  if (gvgdata_ == NULL) gvgdata_ = new ::Cmd::BlobGvgData;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.gvgdata)
  return gvgdata_;
}
inline ::Cmd::BlobGvgData* BlobData::release_gvgdata() {
  clear_has_gvgdata();
  ::Cmd::BlobGvgData* temp = gvgdata_;
  gvgdata_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_gvgdata(::Cmd::BlobGvgData* gvgdata) {
  delete gvgdata_;
  gvgdata_ = gvgdata;
  if (gvgdata) {
    set_has_gvgdata();
  } else {
    clear_has_gvgdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.gvgdata)
}

// optional .Cmd.BlobLottery lottery = 74;
inline bool BlobData::has_lottery() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void BlobData::set_has_lottery() {
  _has_bits_[2] |= 0x00000080u;
}
inline void BlobData::clear_has_lottery() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void BlobData::clear_lottery() {
  if (lottery_ != NULL) lottery_->::Cmd::BlobLottery::Clear();
  clear_has_lottery();
}
inline const ::Cmd::BlobLottery& BlobData::lottery() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.lottery)
  return lottery_ != NULL ? *lottery_ : *default_instance_->lottery_;
}
inline ::Cmd::BlobLottery* BlobData::mutable_lottery() {
  set_has_lottery();
  if (lottery_ == NULL) lottery_ = new ::Cmd::BlobLottery;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.lottery)
  return lottery_;
}
inline ::Cmd::BlobLottery* BlobData::release_lottery() {
  clear_has_lottery();
  ::Cmd::BlobLottery* temp = lottery_;
  lottery_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_lottery(::Cmd::BlobLottery* lottery) {
  delete lottery_;
  lottery_ = lottery;
  if (lottery) {
    set_has_lottery();
  } else {
    clear_has_lottery();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.lottery)
}

// optional .Cmd.BlobServant servant = 75;
inline bool BlobData::has_servant() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void BlobData::set_has_servant() {
  _has_bits_[2] |= 0x00000100u;
}
inline void BlobData::clear_has_servant() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void BlobData::clear_servant() {
  if (servant_ != NULL) servant_->::Cmd::BlobServant::Clear();
  clear_has_servant();
}
inline const ::Cmd::BlobServant& BlobData::servant() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.servant)
  return servant_ != NULL ? *servant_ : *default_instance_->servant_;
}
inline ::Cmd::BlobServant* BlobData::mutable_servant() {
  set_has_servant();
  if (servant_ == NULL) servant_ = new ::Cmd::BlobServant;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.servant)
  return servant_;
}
inline ::Cmd::BlobServant* BlobData::release_servant() {
  clear_has_servant();
  ::Cmd::BlobServant* temp = servant_;
  servant_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_servant(::Cmd::BlobServant* servant) {
  delete servant_;
  servant_ = servant;
  if (servant) {
    set_has_servant();
  } else {
    clear_has_servant();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.servant)
}

// optional .Cmd.BlobProfession profession = 76;
inline bool BlobData::has_profession() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void BlobData::set_has_profession() {
  _has_bits_[2] |= 0x00000200u;
}
inline void BlobData::clear_has_profession() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void BlobData::clear_profession() {
  if (profession_ != NULL) profession_->::Cmd::BlobProfession::Clear();
  clear_has_profession();
}
inline const ::Cmd::BlobProfession& BlobData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.profession)
  return profession_ != NULL ? *profession_ : *default_instance_->profession_;
}
inline ::Cmd::BlobProfession* BlobData::mutable_profession() {
  set_has_profession();
  if (profession_ == NULL) profession_ = new ::Cmd::BlobProfession;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.profession)
  return profession_;
}
inline ::Cmd::BlobProfession* BlobData::release_profession() {
  clear_has_profession();
  ::Cmd::BlobProfession* temp = profession_;
  profession_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_profession(::Cmd::BlobProfession* profession) {
  delete profession_;
  profession_ = profession;
  if (profession) {
    set_has_profession();
  } else {
    clear_has_profession();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.profession)
}

// optional .Cmd.BlobActivityQuest activityquest = 77;
inline bool BlobData::has_activityquest() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void BlobData::set_has_activityquest() {
  _has_bits_[2] |= 0x00000400u;
}
inline void BlobData::clear_has_activityquest() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void BlobData::clear_activityquest() {
  if (activityquest_ != NULL) activityquest_->::Cmd::BlobActivityQuest::Clear();
  clear_has_activityquest();
}
inline const ::Cmd::BlobActivityQuest& BlobData::activityquest() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.activityquest)
  return activityquest_ != NULL ? *activityquest_ : *default_instance_->activityquest_;
}
inline ::Cmd::BlobActivityQuest* BlobData::mutable_activityquest() {
  set_has_activityquest();
  if (activityquest_ == NULL) activityquest_ = new ::Cmd::BlobActivityQuest;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.activityquest)
  return activityquest_;
}
inline ::Cmd::BlobActivityQuest* BlobData::release_activityquest() {
  clear_has_activityquest();
  ::Cmd::BlobActivityQuest* temp = activityquest_;
  activityquest_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_activityquest(::Cmd::BlobActivityQuest* activityquest) {
  delete activityquest_;
  activityquest_ = activityquest;
  if (activityquest) {
    set_has_activityquest();
  } else {
    clear_has_activityquest();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.activityquest)
}

// optional .Cmd.BlobBooth booth = 79;
inline bool BlobData::has_booth() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void BlobData::set_has_booth() {
  _has_bits_[2] |= 0x00000800u;
}
inline void BlobData::clear_has_booth() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void BlobData::clear_booth() {
  if (booth_ != NULL) booth_->::Cmd::BlobBooth::Clear();
  clear_has_booth();
}
inline const ::Cmd::BlobBooth& BlobData::booth() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.booth)
  return booth_ != NULL ? *booth_ : *default_instance_->booth_;
}
inline ::Cmd::BlobBooth* BlobData::mutable_booth() {
  set_has_booth();
  if (booth_ == NULL) booth_ = new ::Cmd::BlobBooth;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.booth)
  return booth_;
}
inline ::Cmd::BlobBooth* BlobData::release_booth() {
  clear_has_booth();
  ::Cmd::BlobBooth* temp = booth_;
  booth_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_booth(::Cmd::BlobBooth* booth) {
  delete booth_;
  booth_ = booth;
  if (booth) {
    set_has_booth();
  } else {
    clear_has_booth();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.booth)
}

// optional .Cmd.BlobExchangeShop exchangeshop = 80;
inline bool BlobData::has_exchangeshop() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void BlobData::set_has_exchangeshop() {
  _has_bits_[2] |= 0x00001000u;
}
inline void BlobData::clear_has_exchangeshop() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void BlobData::clear_exchangeshop() {
  if (exchangeshop_ != NULL) exchangeshop_->::Cmd::BlobExchangeShop::Clear();
  clear_has_exchangeshop();
}
inline const ::Cmd::BlobExchangeShop& BlobData::exchangeshop() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.exchangeshop)
  return exchangeshop_ != NULL ? *exchangeshop_ : *default_instance_->exchangeshop_;
}
inline ::Cmd::BlobExchangeShop* BlobData::mutable_exchangeshop() {
  set_has_exchangeshop();
  if (exchangeshop_ == NULL) exchangeshop_ = new ::Cmd::BlobExchangeShop;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.exchangeshop)
  return exchangeshop_;
}
inline ::Cmd::BlobExchangeShop* BlobData::release_exchangeshop() {
  clear_has_exchangeshop();
  ::Cmd::BlobExchangeShop* temp = exchangeshop_;
  exchangeshop_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_exchangeshop(::Cmd::BlobExchangeShop* exchangeshop) {
  delete exchangeshop_;
  exchangeshop_ = exchangeshop;
  if (exchangeshop) {
    set_has_exchangeshop();
  } else {
    clear_has_exchangeshop();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.exchangeshop)
}

// optional .Cmd.BlobTransfer transfer = 81;
inline bool BlobData::has_transfer() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void BlobData::set_has_transfer() {
  _has_bits_[2] |= 0x00002000u;
}
inline void BlobData::clear_has_transfer() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void BlobData::clear_transfer() {
  if (transfer_ != NULL) transfer_->::Cmd::BlobTransfer::Clear();
  clear_has_transfer();
}
inline const ::Cmd::BlobTransfer& BlobData::transfer() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.transfer)
  return transfer_ != NULL ? *transfer_ : *default_instance_->transfer_;
}
inline ::Cmd::BlobTransfer* BlobData::mutable_transfer() {
  set_has_transfer();
  if (transfer_ == NULL) transfer_ = new ::Cmd::BlobTransfer;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.transfer)
  return transfer_;
}
inline ::Cmd::BlobTransfer* BlobData::release_transfer() {
  clear_has_transfer();
  ::Cmd::BlobTransfer* temp = transfer_;
  transfer_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_transfer(::Cmd::BlobTransfer* transfer) {
  delete transfer_;
  transfer_ = transfer;
  if (transfer) {
    set_has_transfer();
  } else {
    clear_has_transfer();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.transfer)
}

// optional .Cmd.BlobElementElfData element_elf = 82;
inline bool BlobData::has_element_elf() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void BlobData::set_has_element_elf() {
  _has_bits_[2] |= 0x00004000u;
}
inline void BlobData::clear_has_element_elf() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void BlobData::clear_element_elf() {
  if (element_elf_ != NULL) element_elf_->::Cmd::BlobElementElfData::Clear();
  clear_has_element_elf();
}
inline const ::Cmd::BlobElementElfData& BlobData::element_elf() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.element_elf)
  return element_elf_ != NULL ? *element_elf_ : *default_instance_->element_elf_;
}
inline ::Cmd::BlobElementElfData* BlobData::mutable_element_elf() {
  set_has_element_elf();
  if (element_elf_ == NULL) element_elf_ = new ::Cmd::BlobElementElfData;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.element_elf)
  return element_elf_;
}
inline ::Cmd::BlobElementElfData* BlobData::release_element_elf() {
  clear_has_element_elf();
  ::Cmd::BlobElementElfData* temp = element_elf_;
  element_elf_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_element_elf(::Cmd::BlobElementElfData* element_elf) {
  delete element_elf_;
  element_elf_ = element_elf;
  if (element_elf) {
    set_has_element_elf();
  } else {
    clear_has_element_elf();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.element_elf)
}

// optional .Cmd.BlobBoss boss = 83;
inline bool BlobData::has_boss() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void BlobData::set_has_boss() {
  _has_bits_[2] |= 0x00008000u;
}
inline void BlobData::clear_has_boss() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void BlobData::clear_boss() {
  if (boss_ != NULL) boss_->::Cmd::BlobBoss::Clear();
  clear_has_boss();
}
inline const ::Cmd::BlobBoss& BlobData::boss() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobData.boss)
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::Cmd::BlobBoss* BlobData::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::Cmd::BlobBoss;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobData.boss)
  return boss_;
}
inline ::Cmd::BlobBoss* BlobData::release_boss() {
  clear_has_boss();
  ::Cmd::BlobBoss* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void BlobData::set_allocated_boss(::Cmd::BlobBoss* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobData.boss)
}

// -------------------------------------------------------------------

// UserAccData

// optional uint32 nologintime = 1 [default = 0];
inline bool UserAccData::has_nologintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAccData::set_has_nologintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAccData::clear_has_nologintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAccData::clear_nologintime() {
  nologintime_ = 0u;
  clear_has_nologintime();
}
inline ::google::protobuf::uint32 UserAccData::nologintime() const {
  // @@protoc_insertion_point(field_get:Cmd.UserAccData.nologintime)
  return nologintime_;
}
inline void UserAccData::set_nologintime(::google::protobuf::uint32 value) {
  set_has_nologintime();
  nologintime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserAccData.nologintime)
}

// -------------------------------------------------------------------

// BlobAccData

// optional .Cmd.BlobAccUser user = 1;
inline bool BlobAccData::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobAccData::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobAccData::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobAccData::clear_user() {
  if (user_ != NULL) user_->::Cmd::BlobAccUser::Clear();
  clear_has_user();
}
inline const ::Cmd::BlobAccUser& BlobAccData::user() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Cmd::BlobAccUser* BlobAccData::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Cmd::BlobAccUser;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.user)
  return user_;
}
inline ::Cmd::BlobAccUser* BlobAccData::release_user() {
  clear_has_user();
  ::Cmd::BlobAccUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_user(::Cmd::BlobAccUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.user)
}

// optional .Cmd.BlobNewCredit credit = 2;
inline bool BlobAccData::has_credit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobAccData::set_has_credit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobAccData::clear_has_credit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobAccData::clear_credit() {
  if (credit_ != NULL) credit_->::Cmd::BlobNewCredit::Clear();
  clear_has_credit();
}
inline const ::Cmd::BlobNewCredit& BlobAccData::credit() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.credit)
  return credit_ != NULL ? *credit_ : *default_instance_->credit_;
}
inline ::Cmd::BlobNewCredit* BlobAccData::mutable_credit() {
  set_has_credit();
  if (credit_ == NULL) credit_ = new ::Cmd::BlobNewCredit;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.credit)
  return credit_;
}
inline ::Cmd::BlobNewCredit* BlobAccData::release_credit() {
  clear_has_credit();
  ::Cmd::BlobNewCredit* temp = credit_;
  credit_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_credit(::Cmd::BlobNewCredit* credit) {
  delete credit_;
  credit_ = credit;
  if (credit) {
    set_has_credit();
  } else {
    clear_has_credit();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.credit)
}

// optional .Cmd.BlobShopGotItem shop = 3;
inline bool BlobAccData::has_shop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobAccData::set_has_shop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobAccData::clear_has_shop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobAccData::clear_shop() {
  if (shop_ != NULL) shop_->::Cmd::BlobShopGotItem::Clear();
  clear_has_shop();
}
inline const ::Cmd::BlobShopGotItem& BlobAccData::shop() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.shop)
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::Cmd::BlobShopGotItem* BlobAccData::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::Cmd::BlobShopGotItem;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.shop)
  return shop_;
}
inline ::Cmd::BlobShopGotItem* BlobAccData::release_shop() {
  clear_has_shop();
  ::Cmd::BlobShopGotItem* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_shop(::Cmd::BlobShopGotItem* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.shop)
}

// optional .Cmd.BlobAccVar var = 4;
inline bool BlobAccData::has_var() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobAccData::set_has_var() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobAccData::clear_has_var() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobAccData::clear_var() {
  if (var_ != NULL) var_->::Cmd::BlobAccVar::Clear();
  clear_has_var();
}
inline const ::Cmd::BlobAccVar& BlobAccData::var() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.var)
  return var_ != NULL ? *var_ : *default_instance_->var_;
}
inline ::Cmd::BlobAccVar* BlobAccData::mutable_var() {
  set_has_var();
  if (var_ == NULL) var_ = new ::Cmd::BlobAccVar;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.var)
  return var_;
}
inline ::Cmd::BlobAccVar* BlobAccData::release_var() {
  clear_has_var();
  ::Cmd::BlobAccVar* temp = var_;
  var_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_var(::Cmd::BlobAccVar* var) {
  delete var_;
  var_ = var;
  if (var) {
    set_has_var();
  } else {
    clear_has_var();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.var)
}

// optional .Cmd.BlobManual manual = 5;
inline bool BlobAccData::has_manual() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobAccData::set_has_manual() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobAccData::clear_has_manual() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobAccData::clear_manual() {
  if (manual_ != NULL) manual_->::Cmd::BlobManual::Clear();
  clear_has_manual();
}
inline const ::Cmd::BlobManual& BlobAccData::manual() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.manual)
  return manual_ != NULL ? *manual_ : *default_instance_->manual_;
}
inline ::Cmd::BlobManual* BlobAccData::mutable_manual() {
  set_has_manual();
  if (manual_ == NULL) manual_ = new ::Cmd::BlobManual;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.manual)
  return manual_;
}
inline ::Cmd::BlobManual* BlobAccData::release_manual() {
  clear_has_manual();
  ::Cmd::BlobManual* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_manual(::Cmd::BlobManual* manual) {
  delete manual_;
  manual_ = manual;
  if (manual) {
    set_has_manual();
  } else {
    clear_has_manual();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.manual)
}

// optional .Cmd.BlobFood food = 6;
inline bool BlobAccData::has_food() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobAccData::set_has_food() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobAccData::clear_has_food() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobAccData::clear_food() {
  if (food_ != NULL) food_->::Cmd::BlobFood::Clear();
  clear_has_food();
}
inline const ::Cmd::BlobFood& BlobAccData::food() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.food)
  return food_ != NULL ? *food_ : *default_instance_->food_;
}
inline ::Cmd::BlobFood* BlobAccData::mutable_food() {
  set_has_food();
  if (food_ == NULL) food_ = new ::Cmd::BlobFood;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.food)
  return food_;
}
inline ::Cmd::BlobFood* BlobAccData::release_food() {
  clear_has_food();
  ::Cmd::BlobFood* temp = food_;
  food_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_food(::Cmd::BlobFood* food) {
  delete food_;
  food_ = food;
  if (food) {
    set_has_food();
  } else {
    clear_has_food();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.food)
}

// optional .Cmd.BlobQuest quest = 7;
inline bool BlobAccData::has_quest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobAccData::set_has_quest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobAccData::clear_has_quest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobAccData::clear_quest() {
  if (quest_ != NULL) quest_->::Cmd::BlobQuest::Clear();
  clear_has_quest();
}
inline const ::Cmd::BlobQuest& BlobAccData::quest() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.quest)
  return quest_ != NULL ? *quest_ : *default_instance_->quest_;
}
inline ::Cmd::BlobQuest* BlobAccData::mutable_quest() {
  set_has_quest();
  if (quest_ == NULL) quest_ = new ::Cmd::BlobQuest;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.quest)
  return quest_;
}
inline ::Cmd::BlobQuest* BlobAccData::release_quest() {
  clear_has_quest();
  ::Cmd::BlobQuest* temp = quest_;
  quest_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_quest(::Cmd::BlobQuest* quest) {
  delete quest_;
  quest_ = quest;
  if (quest) {
    set_has_quest();
  } else {
    clear_has_quest();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.quest)
}

// optional .Cmd.BlobAchieve achieve = 8;
inline bool BlobAccData::has_achieve() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobAccData::set_has_achieve() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobAccData::clear_has_achieve() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobAccData::clear_achieve() {
  if (achieve_ != NULL) achieve_->::Cmd::BlobAchieve::Clear();
  clear_has_achieve();
}
inline const ::Cmd::BlobAchieve& BlobAccData::achieve() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.achieve)
  return achieve_ != NULL ? *achieve_ : *default_instance_->achieve_;
}
inline ::Cmd::BlobAchieve* BlobAccData::mutable_achieve() {
  set_has_achieve();
  if (achieve_ == NULL) achieve_ = new ::Cmd::BlobAchieve;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.achieve)
  return achieve_;
}
inline ::Cmd::BlobAchieve* BlobAccData::release_achieve() {
  clear_has_achieve();
  ::Cmd::BlobAchieve* temp = achieve_;
  achieve_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_achieve(::Cmd::BlobAchieve* achieve) {
  delete achieve_;
  achieve_ = achieve;
  if (achieve) {
    set_has_achieve();
  } else {
    clear_has_achieve();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.achieve)
}

// optional .Cmd.BlobTitle title = 9;
inline bool BlobAccData::has_title() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobAccData::set_has_title() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobAccData::clear_has_title() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobAccData::clear_title() {
  if (title_ != NULL) title_->::Cmd::BlobTitle::Clear();
  clear_has_title();
}
inline const ::Cmd::BlobTitle& BlobAccData::title() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.title)
  return title_ != NULL ? *title_ : *default_instance_->title_;
}
inline ::Cmd::BlobTitle* BlobAccData::mutable_title() {
  set_has_title();
  if (title_ == NULL) title_ = new ::Cmd::BlobTitle;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.title)
  return title_;
}
inline ::Cmd::BlobTitle* BlobAccData::release_title() {
  clear_has_title();
  ::Cmd::BlobTitle* temp = title_;
  title_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_title(::Cmd::BlobTitle* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.title)
}

// optional .Cmd.BlobScenery scenery = 10;
inline bool BlobAccData::has_scenery() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlobAccData::set_has_scenery() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlobAccData::clear_has_scenery() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlobAccData::clear_scenery() {
  if (scenery_ != NULL) scenery_->::Cmd::BlobScenery::Clear();
  clear_has_scenery();
}
inline const ::Cmd::BlobScenery& BlobAccData::scenery() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.scenery)
  return scenery_ != NULL ? *scenery_ : *default_instance_->scenery_;
}
inline ::Cmd::BlobScenery* BlobAccData::mutable_scenery() {
  set_has_scenery();
  if (scenery_ == NULL) scenery_ = new ::Cmd::BlobScenery;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.scenery)
  return scenery_;
}
inline ::Cmd::BlobScenery* BlobAccData::release_scenery() {
  clear_has_scenery();
  ::Cmd::BlobScenery* temp = scenery_;
  scenery_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_scenery(::Cmd::BlobScenery* scenery) {
  delete scenery_;
  scenery_ = scenery;
  if (scenery) {
    set_has_scenery();
  } else {
    clear_has_scenery();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.scenery)
}

// optional .Cmd.BlobMenu menu = 11;
inline bool BlobAccData::has_menu() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlobAccData::set_has_menu() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlobAccData::clear_has_menu() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlobAccData::clear_menu() {
  if (menu_ != NULL) menu_->::Cmd::BlobMenu::Clear();
  clear_has_menu();
}
inline const ::Cmd::BlobMenu& BlobAccData::menu() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.menu)
  return menu_ != NULL ? *menu_ : *default_instance_->menu_;
}
inline ::Cmd::BlobMenu* BlobAccData::mutable_menu() {
  set_has_menu();
  if (menu_ == NULL) menu_ = new ::Cmd::BlobMenu;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.menu)
  return menu_;
}
inline ::Cmd::BlobMenu* BlobAccData::release_menu() {
  clear_has_menu();
  ::Cmd::BlobMenu* temp = menu_;
  menu_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_menu(::Cmd::BlobMenu* menu) {
  delete menu_;
  menu_ = menu;
  if (menu) {
    set_has_menu();
  } else {
    clear_has_menu();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.menu)
}

// optional .Cmd.BlobActivityEvent acevent = 12;
inline bool BlobAccData::has_acevent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlobAccData::set_has_acevent() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlobAccData::clear_has_acevent() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlobAccData::clear_acevent() {
  if (acevent_ != NULL) acevent_->::Cmd::BlobActivityEvent::Clear();
  clear_has_acevent();
}
inline const ::Cmd::BlobActivityEvent& BlobAccData::acevent() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.acevent)
  return acevent_ != NULL ? *acevent_ : *default_instance_->acevent_;
}
inline ::Cmd::BlobActivityEvent* BlobAccData::mutable_acevent() {
  set_has_acevent();
  if (acevent_ == NULL) acevent_ = new ::Cmd::BlobActivityEvent;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.acevent)
  return acevent_;
}
inline ::Cmd::BlobActivityEvent* BlobAccData::release_acevent() {
  clear_has_acevent();
  ::Cmd::BlobActivityEvent* temp = acevent_;
  acevent_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_acevent(::Cmd::BlobActivityEvent* acevent) {
  delete acevent_;
  acevent_ = acevent;
  if (acevent) {
    set_has_acevent();
  } else {
    clear_has_acevent();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.acevent)
}

// optional .Cmd.BlobUnsolvedPhoto photo = 13;
inline bool BlobAccData::has_photo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlobAccData::set_has_photo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlobAccData::clear_has_photo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlobAccData::clear_photo() {
  if (photo_ != NULL) photo_->::Cmd::BlobUnsolvedPhoto::Clear();
  clear_has_photo();
}
inline const ::Cmd::BlobUnsolvedPhoto& BlobAccData::photo() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.photo)
  return photo_ != NULL ? *photo_ : *default_instance_->photo_;
}
inline ::Cmd::BlobUnsolvedPhoto* BlobAccData::mutable_photo() {
  set_has_photo();
  if (photo_ == NULL) photo_ = new ::Cmd::BlobUnsolvedPhoto;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.photo)
  return photo_;
}
inline ::Cmd::BlobUnsolvedPhoto* BlobAccData::release_photo() {
  clear_has_photo();
  ::Cmd::BlobUnsolvedPhoto* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_photo(::Cmd::BlobUnsolvedPhoto* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.photo)
}

// optional .Cmd.BlobPortrait portrait = 14;
inline bool BlobAccData::has_portrait() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BlobAccData::set_has_portrait() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BlobAccData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BlobAccData::clear_portrait() {
  if (portrait_ != NULL) portrait_->::Cmd::BlobPortrait::Clear();
  clear_has_portrait();
}
inline const ::Cmd::BlobPortrait& BlobAccData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.portrait)
  return portrait_ != NULL ? *portrait_ : *default_instance_->portrait_;
}
inline ::Cmd::BlobPortrait* BlobAccData::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == NULL) portrait_ = new ::Cmd::BlobPortrait;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.portrait)
  return portrait_;
}
inline ::Cmd::BlobPortrait* BlobAccData::release_portrait() {
  clear_has_portrait();
  ::Cmd::BlobPortrait* temp = portrait_;
  portrait_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_portrait(::Cmd::BlobPortrait* portrait) {
  delete portrait_;
  portrait_ = portrait;
  if (portrait) {
    set_has_portrait();
  } else {
    clear_has_portrait();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.portrait)
}

// optional .Cmd.BlobQuestNpc questnpc = 15;
inline bool BlobAccData::has_questnpc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlobAccData::set_has_questnpc() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlobAccData::clear_has_questnpc() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlobAccData::clear_questnpc() {
  if (questnpc_ != NULL) questnpc_->::Cmd::BlobQuestNpc::Clear();
  clear_has_questnpc();
}
inline const ::Cmd::BlobQuestNpc& BlobAccData::questnpc() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.questnpc)
  return questnpc_ != NULL ? *questnpc_ : *default_instance_->questnpc_;
}
inline ::Cmd::BlobQuestNpc* BlobAccData::mutable_questnpc() {
  set_has_questnpc();
  if (questnpc_ == NULL) questnpc_ = new ::Cmd::BlobQuestNpc;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.questnpc)
  return questnpc_;
}
inline ::Cmd::BlobQuestNpc* BlobAccData::release_questnpc() {
  clear_has_questnpc();
  ::Cmd::BlobQuestNpc* temp = questnpc_;
  questnpc_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_questnpc(::Cmd::BlobQuestNpc* questnpc) {
  delete questnpc_;
  questnpc_ = questnpc;
  if (questnpc) {
    set_has_questnpc();
  } else {
    clear_has_questnpc();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.questnpc)
}

// optional .Cmd.BlobPetWork petwork = 16;
inline bool BlobAccData::has_petwork() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BlobAccData::set_has_petwork() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BlobAccData::clear_has_petwork() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BlobAccData::clear_petwork() {
  if (petwork_ != NULL) petwork_->::Cmd::BlobPetWork::Clear();
  clear_has_petwork();
}
inline const ::Cmd::BlobPetWork& BlobAccData::petwork() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.petwork)
  return petwork_ != NULL ? *petwork_ : *default_instance_->petwork_;
}
inline ::Cmd::BlobPetWork* BlobAccData::mutable_petwork() {
  set_has_petwork();
  if (petwork_ == NULL) petwork_ = new ::Cmd::BlobPetWork;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.petwork)
  return petwork_;
}
inline ::Cmd::BlobPetWork* BlobAccData::release_petwork() {
  clear_has_petwork();
  ::Cmd::BlobPetWork* temp = petwork_;
  petwork_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_petwork(::Cmd::BlobPetWork* petwork) {
  delete petwork_;
  petwork_ = petwork;
  if (petwork) {
    set_has_petwork();
  } else {
    clear_has_petwork();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.petwork)
}

// optional .Cmd.BlobShareSkill skill = 17;
inline bool BlobAccData::has_skill() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BlobAccData::set_has_skill() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BlobAccData::clear_has_skill() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BlobAccData::clear_skill() {
  if (skill_ != NULL) skill_->::Cmd::BlobShareSkill::Clear();
  clear_has_skill();
}
inline const ::Cmd::BlobShareSkill& BlobAccData::skill() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.skill)
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::Cmd::BlobShareSkill* BlobAccData::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::Cmd::BlobShareSkill;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.skill)
  return skill_;
}
inline ::Cmd::BlobShareSkill* BlobAccData::release_skill() {
  clear_has_skill();
  ::Cmd::BlobShareSkill* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_skill(::Cmd::BlobShareSkill* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.skill)
}

// optional .Cmd.BlobServant servant = 18;
inline bool BlobAccData::has_servant() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BlobAccData::set_has_servant() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BlobAccData::clear_has_servant() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BlobAccData::clear_servant() {
  if (servant_ != NULL) servant_->::Cmd::BlobServant::Clear();
  clear_has_servant();
}
inline const ::Cmd::BlobServant& BlobAccData::servant() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.servant)
  return servant_ != NULL ? *servant_ : *default_instance_->servant_;
}
inline ::Cmd::BlobServant* BlobAccData::mutable_servant() {
  set_has_servant();
  if (servant_ == NULL) servant_ = new ::Cmd::BlobServant;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.servant)
  return servant_;
}
inline ::Cmd::BlobServant* BlobAccData::release_servant() {
  clear_has_servant();
  ::Cmd::BlobServant* temp = servant_;
  servant_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_servant(::Cmd::BlobServant* servant) {
  delete servant_;
  servant_ = servant;
  if (servant) {
    set_has_servant();
  } else {
    clear_has_servant();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.servant)
}

// optional .Cmd.BlobRecordInfo record = 19;
inline bool BlobAccData::has_record() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BlobAccData::set_has_record() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BlobAccData::clear_has_record() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BlobAccData::clear_record() {
  if (record_ != NULL) record_->::Cmd::BlobRecordInfo::Clear();
  clear_has_record();
}
inline const ::Cmd::BlobRecordInfo& BlobAccData::record() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.record)
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::Cmd::BlobRecordInfo* BlobAccData::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::Cmd::BlobRecordInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.record)
  return record_;
}
inline ::Cmd::BlobRecordInfo* BlobAccData::release_record() {
  clear_has_record();
  ::Cmd::BlobRecordInfo* temp = record_;
  record_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_record(::Cmd::BlobRecordInfo* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.record)
}

// optional .Cmd.BlobPack pack = 20;
inline bool BlobAccData::has_pack() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BlobAccData::set_has_pack() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BlobAccData::clear_has_pack() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BlobAccData::clear_pack() {
  if (pack_ != NULL) pack_->::Cmd::BlobPack::Clear();
  clear_has_pack();
}
inline const ::Cmd::BlobPack& BlobAccData::pack() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.pack)
  return pack_ != NULL ? *pack_ : *default_instance_->pack_;
}
inline ::Cmd::BlobPack* BlobAccData::mutable_pack() {
  set_has_pack();
  if (pack_ == NULL) pack_ = new ::Cmd::BlobPack;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.pack)
  return pack_;
}
inline ::Cmd::BlobPack* BlobAccData::release_pack() {
  clear_has_pack();
  ::Cmd::BlobPack* temp = pack_;
  pack_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_pack(::Cmd::BlobPack* pack) {
  delete pack_;
  pack_ = pack;
  if (pack) {
    set_has_pack();
  } else {
    clear_has_pack();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.pack)
}

// optional .Cmd.BlobLottery lottery = 21;
inline bool BlobAccData::has_lottery() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BlobAccData::set_has_lottery() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BlobAccData::clear_has_lottery() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BlobAccData::clear_lottery() {
  if (lottery_ != NULL) lottery_->::Cmd::BlobLottery::Clear();
  clear_has_lottery();
}
inline const ::Cmd::BlobLottery& BlobAccData::lottery() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccData.lottery)
  return lottery_ != NULL ? *lottery_ : *default_instance_->lottery_;
}
inline ::Cmd::BlobLottery* BlobAccData::mutable_lottery() {
  set_has_lottery();
  if (lottery_ == NULL) lottery_ = new ::Cmd::BlobLottery;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccData.lottery)
  return lottery_;
}
inline ::Cmd::BlobLottery* BlobAccData::release_lottery() {
  clear_has_lottery();
  ::Cmd::BlobLottery* temp = lottery_;
  lottery_ = NULL;
  return temp;
}
inline void BlobAccData::set_allocated_lottery(::Cmd::BlobLottery* lottery) {
  delete lottery_;
  lottery_ = lottery;
  if (lottery) {
    set_has_lottery();
  } else {
    clear_has_lottery();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAccData.lottery)
}

// -------------------------------------------------------------------

// BlobAccUser

// optional uint32 auguryreward = 1 [default = 0];
inline bool BlobAccUser::has_auguryreward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobAccUser::set_has_auguryreward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobAccUser::clear_has_auguryreward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobAccUser::clear_auguryreward() {
  auguryreward_ = 0u;
  clear_has_auguryreward();
}
inline ::google::protobuf::uint32 BlobAccUser::auguryreward() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.auguryreward)
  return auguryreward_;
}
inline void BlobAccUser::set_auguryreward(::google::protobuf::uint32 value) {
  set_has_auguryreward();
  auguryreward_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAccUser.auguryreward)
}

// optional uint32 maxbaselv = 2 [default = 0];
inline bool BlobAccUser::has_maxbaselv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobAccUser::set_has_maxbaselv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobAccUser::clear_has_maxbaselv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobAccUser::clear_maxbaselv() {
  maxbaselv_ = 0u;
  clear_has_maxbaselv();
}
inline ::google::protobuf::uint32 BlobAccUser::maxbaselv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.maxbaselv)
  return maxbaselv_;
}
inline void BlobAccUser::set_maxbaselv(::google::protobuf::uint32 value) {
  set_has_maxbaselv();
  maxbaselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAccUser.maxbaselv)
}

// optional uint32 maxbaselv_resettime = 3 [default = 0];
inline bool BlobAccUser::has_maxbaselv_resettime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobAccUser::set_has_maxbaselv_resettime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobAccUser::clear_has_maxbaselv_resettime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobAccUser::clear_maxbaselv_resettime() {
  maxbaselv_resettime_ = 0u;
  clear_has_maxbaselv_resettime();
}
inline ::google::protobuf::uint32 BlobAccUser::maxbaselv_resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.maxbaselv_resettime)
  return maxbaselv_resettime_;
}
inline void BlobAccUser::set_maxbaselv_resettime(::google::protobuf::uint32 value) {
  set_has_maxbaselv_resettime();
  maxbaselv_resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAccUser.maxbaselv_resettime)
}

// repeated .Cmd.PhotoMd5 md5s = 4;
inline int BlobAccUser::md5s_size() const {
  return md5s_.size();
}
inline void BlobAccUser::clear_md5s() {
  md5s_.Clear();
}
inline const ::Cmd::PhotoMd5& BlobAccUser::md5s(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.md5s)
  return md5s_.Get(index);
}
inline ::Cmd::PhotoMd5* BlobAccUser::mutable_md5s(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccUser.md5s)
  return md5s_.Mutable(index);
}
inline ::Cmd::PhotoMd5* BlobAccUser::add_md5s() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAccUser.md5s)
  return md5s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >&
BlobAccUser::md5s() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAccUser.md5s)
  return md5s_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >*
BlobAccUser::mutable_md5s() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAccUser.md5s)
  return &md5s_;
}

// repeated .Cmd.BlobJoyData accjoy = 5;
inline int BlobAccUser::accjoy_size() const {
  return accjoy_.size();
}
inline void BlobAccUser::clear_accjoy() {
  accjoy_.Clear();
}
inline const ::Cmd::BlobJoyData& BlobAccUser::accjoy(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.accjoy)
  return accjoy_.Get(index);
}
inline ::Cmd::BlobJoyData* BlobAccUser::mutable_accjoy(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccUser.accjoy)
  return accjoy_.Mutable(index);
}
inline ::Cmd::BlobJoyData* BlobAccUser::add_accjoy() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAccUser.accjoy)
  return accjoy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobJoyData >&
BlobAccUser::accjoy() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAccUser.accjoy)
  return accjoy_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobJoyData >*
BlobAccUser::mutable_accjoy() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAccUser.accjoy)
  return &accjoy_;
}

// repeated uint32 shownpcs = 6;
inline int BlobAccUser::shownpcs_size() const {
  return shownpcs_.size();
}
inline void BlobAccUser::clear_shownpcs() {
  shownpcs_.Clear();
}
inline ::google::protobuf::uint32 BlobAccUser::shownpcs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.shownpcs)
  return shownpcs_.Get(index);
}
inline void BlobAccUser::set_shownpcs(int index, ::google::protobuf::uint32 value) {
  shownpcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobAccUser.shownpcs)
}
inline void BlobAccUser::add_shownpcs(::google::protobuf::uint32 value) {
  shownpcs_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobAccUser.shownpcs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobAccUser::shownpcs() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAccUser.shownpcs)
  return shownpcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobAccUser::mutable_shownpcs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAccUser.shownpcs)
  return &shownpcs_;
}

// optional uint64 char_primary_id = 7;
inline bool BlobAccUser::has_char_primary_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobAccUser::set_has_char_primary_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobAccUser::clear_has_char_primary_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobAccUser::clear_char_primary_id() {
  char_primary_id_ = GOOGLE_ULONGLONG(0);
  clear_has_char_primary_id();
}
inline ::google::protobuf::uint64 BlobAccUser::char_primary_id() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.char_primary_id)
  return char_primary_id_;
}
inline void BlobAccUser::set_char_primary_id(::google::protobuf::uint64 value) {
  set_has_char_primary_id();
  char_primary_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAccUser.char_primary_id)
}

// repeated uint64 patchversion = 8;
inline int BlobAccUser::patchversion_size() const {
  return patchversion_.size();
}
inline void BlobAccUser::clear_patchversion() {
  patchversion_.Clear();
}
inline ::google::protobuf::uint64 BlobAccUser::patchversion(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccUser.patchversion)
  return patchversion_.Get(index);
}
inline void BlobAccUser::set_patchversion(int index, ::google::protobuf::uint64 value) {
  patchversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobAccUser.patchversion)
}
inline void BlobAccUser::add_patchversion(::google::protobuf::uint64 value) {
  patchversion_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobAccUser.patchversion)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BlobAccUser::patchversion() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAccUser.patchversion)
  return patchversion_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BlobAccUser::mutable_patchversion() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAccUser.patchversion)
  return &patchversion_;
}

// -------------------------------------------------------------------

// BlobUnsolvedPhoto

// repeated .Cmd.UnsolvedUserPhoto photos = 1;
inline int BlobUnsolvedPhoto::photos_size() const {
  return photos_.size();
}
inline void BlobUnsolvedPhoto::clear_photos() {
  photos_.Clear();
}
inline const ::Cmd::UnsolvedUserPhoto& BlobUnsolvedPhoto::photos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUnsolvedPhoto.photos)
  return photos_.Get(index);
}
inline ::Cmd::UnsolvedUserPhoto* BlobUnsolvedPhoto::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUnsolvedPhoto.photos)
  return photos_.Mutable(index);
}
inline ::Cmd::UnsolvedUserPhoto* BlobUnsolvedPhoto::add_photos() {
  // @@protoc_insertion_point(field_add:Cmd.BlobUnsolvedPhoto.photos)
  return photos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UnsolvedUserPhoto >&
BlobUnsolvedPhoto::photos() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUnsolvedPhoto.photos)
  return photos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UnsolvedUserPhoto >*
BlobUnsolvedPhoto::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUnsolvedPhoto.photos)
  return &photos_;
}

// -------------------------------------------------------------------

// BlobBoss

// optional bool open_ntf = 1 [default = false];
inline bool BlobBoss::has_open_ntf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobBoss::set_has_open_ntf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobBoss::clear_has_open_ntf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobBoss::clear_open_ntf() {
  open_ntf_ = false;
  clear_has_open_ntf();
}
inline bool BlobBoss::open_ntf() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobBoss.open_ntf)
  return open_ntf_;
}
inline void BlobBoss::set_open_ntf(bool value) {
  set_has_open_ntf();
  open_ntf_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobBoss.open_ntf)
}

// -------------------------------------------------------------------

// BlobUser

// optional float x = 1 [default = 0];
inline bool BlobUser::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobUser::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobUser::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobUser::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BlobUser::x() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.x)
  return x_;
}
inline void BlobUser::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.x)
}

// optional float y = 2 [default = 0];
inline bool BlobUser::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobUser::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobUser::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobUser::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BlobUser::y() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.y)
  return y_;
}
inline void BlobUser::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.y)
}

// optional float z = 3 [default = 0];
inline bool BlobUser::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobUser::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobUser::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobUser::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float BlobUser::z() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.z)
  return z_;
}
inline void BlobUser::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.z)
}

// optional uint32 clothcolor = 4 [default = 0];
inline bool BlobUser::has_clothcolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobUser::set_has_clothcolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobUser::clear_has_clothcolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobUser::clear_clothcolor() {
  clothcolor_ = 0u;
  clear_has_clothcolor();
}
inline ::google::protobuf::uint32 BlobUser::clothcolor() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.clothcolor)
  return clothcolor_;
}
inline void BlobUser::set_clothcolor(::google::protobuf::uint32 value) {
  set_has_clothcolor();
  clothcolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.clothcolor)
}

// optional uint32 purify = 6 [default = 0];
inline bool BlobUser::has_purify() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobUser::set_has_purify() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobUser::clear_has_purify() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobUser::clear_purify() {
  purify_ = 0u;
  clear_has_purify();
}
inline ::google::protobuf::uint32 BlobUser::purify() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.purify)
  return purify_;
}
inline void BlobUser::set_purify(::google::protobuf::uint32 value) {
  set_has_purify();
  purify_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.purify)
}

// optional uint32 savemap = 7 [default = 0];
inline bool BlobUser::has_savemap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobUser::set_has_savemap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobUser::clear_has_savemap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobUser::clear_savemap() {
  savemap_ = 0u;
  clear_has_savemap();
}
inline ::google::protobuf::uint32 BlobUser::savemap() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.savemap)
  return savemap_;
}
inline void BlobUser::set_savemap(::google::protobuf::uint32 value) {
  set_has_savemap();
  savemap_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.savemap)
}

// optional uint32 lastmapid = 8;
inline bool BlobUser::has_lastmapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobUser::set_has_lastmapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobUser::clear_has_lastmapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobUser::clear_lastmapid() {
  lastmapid_ = 0u;
  clear_has_lastmapid();
}
inline ::google::protobuf::uint32 BlobUser::lastmapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.lastmapid)
  return lastmapid_;
}
inline void BlobUser::set_lastmapid(::google::protobuf::uint32 value) {
  set_has_lastmapid();
  lastmapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.lastmapid)
}

// optional uint32 lastrealmapid = 11;
inline bool BlobUser::has_lastrealmapid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobUser::set_has_lastrealmapid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobUser::clear_has_lastrealmapid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobUser::clear_lastrealmapid() {
  lastrealmapid_ = 0u;
  clear_has_lastrealmapid();
}
inline ::google::protobuf::uint32 BlobUser::lastrealmapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.lastrealmapid)
  return lastrealmapid_;
}
inline void BlobUser::set_lastrealmapid(::google::protobuf::uint32 value) {
  set_has_lastrealmapid();
  lastrealmapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.lastrealmapid)
}

// repeated uint32 shownpcs = 9;
inline int BlobUser::shownpcs_size() const {
  return shownpcs_.size();
}
inline void BlobUser::clear_shownpcs() {
  shownpcs_.Clear();
}
inline ::google::protobuf::uint32 BlobUser::shownpcs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.shownpcs)
  return shownpcs_.Get(index);
}
inline void BlobUser::set_shownpcs(int index, ::google::protobuf::uint32 value) {
  shownpcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.shownpcs)
}
inline void BlobUser::add_shownpcs(::google::protobuf::uint32 value) {
  shownpcs_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobUser.shownpcs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobUser::shownpcs() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUser.shownpcs)
  return shownpcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobUser::mutable_shownpcs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUser.shownpcs)
  return &shownpcs_;
}

// repeated uint32 mapareas = 10;
inline int BlobUser::mapareas_size() const {
  return mapareas_.size();
}
inline void BlobUser::clear_mapareas() {
  mapareas_.Clear();
}
inline ::google::protobuf::uint32 BlobUser::mapareas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.mapareas)
  return mapareas_.Get(index);
}
inline void BlobUser::set_mapareas(int index, ::google::protobuf::uint32 value) {
  mapareas_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.mapareas)
}
inline void BlobUser::add_mapareas(::google::protobuf::uint32 value) {
  mapareas_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobUser.mapareas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobUser::mapareas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUser.mapareas)
  return mapareas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobUser::mutable_mapareas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUser.mapareas)
  return &mapareas_;
}

// repeated uint32 patchversion = 12;
inline int BlobUser::patchversion_size() const {
  return patchversion_.size();
}
inline void BlobUser::clear_patchversion() {
  patchversion_.Clear();
}
inline ::google::protobuf::uint32 BlobUser::patchversion(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.patchversion)
  return patchversion_.Get(index);
}
inline void BlobUser::set_patchversion(int index, ::google::protobuf::uint32 value) {
  patchversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.patchversion)
}
inline void BlobUser::add_patchversion(::google::protobuf::uint32 value) {
  patchversion_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobUser.patchversion)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobUser::patchversion() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUser.patchversion)
  return patchversion_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobUser::mutable_patchversion() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUser.patchversion)
  return &patchversion_;
}

// optional uint32 teamtimelen = 13 [default = 0];
inline bool BlobUser::has_teamtimelen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlobUser::set_has_teamtimelen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlobUser::clear_has_teamtimelen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlobUser::clear_teamtimelen() {
  teamtimelen_ = 0u;
  clear_has_teamtimelen();
}
inline ::google::protobuf::uint32 BlobUser::teamtimelen() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.teamtimelen)
  return teamtimelen_;
}
inline void BlobUser::set_teamtimelen(::google::protobuf::uint32 value) {
  set_has_teamtimelen();
  teamtimelen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.teamtimelen)
}

// optional uint64 followerid = 14 [default = 0];
inline bool BlobUser::has_followerid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlobUser::set_has_followerid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlobUser::clear_has_followerid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlobUser::clear_followerid() {
  followerid_ = GOOGLE_ULONGLONG(0);
  clear_has_followerid();
}
inline ::google::protobuf::uint64 BlobUser::followerid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.followerid)
  return followerid_;
}
inline void BlobUser::set_followerid(::google::protobuf::uint64 value) {
  set_has_followerid();
  followerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.followerid)
}

// optional uint32 leveluptime = 15 [default = 0];
inline bool BlobUser::has_leveluptime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BlobUser::set_has_leveluptime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BlobUser::clear_has_leveluptime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BlobUser::clear_leveluptime() {
  leveluptime_ = 0u;
  clear_has_leveluptime();
}
inline ::google::protobuf::uint32 BlobUser::leveluptime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.leveluptime)
  return leveluptime_;
}
inline void BlobUser::set_leveluptime(::google::protobuf::uint32 value) {
  set_has_leveluptime();
  leveluptime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.leveluptime)
}

// optional uint32 lastsmapid = 16 [default = 0];
inline bool BlobUser::has_lastsmapid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlobUser::set_has_lastsmapid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlobUser::clear_has_lastsmapid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlobUser::clear_lastsmapid() {
  lastsmapid_ = 0u;
  clear_has_lastsmapid();
}
inline ::google::protobuf::uint32 BlobUser::lastsmapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.lastsmapid)
  return lastsmapid_;
}
inline void BlobUser::set_lastsmapid(::google::protobuf::uint32 value) {
  set_has_lastsmapid();
  lastsmapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.lastsmapid)
}

// optional float sx = 17 [default = 0];
inline bool BlobUser::has_sx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BlobUser::set_has_sx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BlobUser::clear_has_sx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BlobUser::clear_sx() {
  sx_ = 0;
  clear_has_sx();
}
inline float BlobUser::sx() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.sx)
  return sx_;
}
inline void BlobUser::set_sx(float value) {
  set_has_sx();
  sx_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.sx)
}

// optional float sy = 18 [default = 0];
inline bool BlobUser::has_sy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BlobUser::set_has_sy() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BlobUser::clear_has_sy() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BlobUser::clear_sy() {
  sy_ = 0;
  clear_has_sy();
}
inline float BlobUser::sy() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.sy)
  return sy_;
}
inline void BlobUser::set_sy(float value) {
  set_has_sy();
  sy_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.sy)
}

// optional float sz = 19 [default = 0];
inline bool BlobUser::has_sz() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BlobUser::set_has_sz() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BlobUser::clear_has_sz() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BlobUser::clear_sz() {
  sz_ = 0;
  clear_has_sz();
}
inline float BlobUser::sz() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.sz)
  return sz_;
}
inline void BlobUser::set_sz(float value) {
  set_has_sz();
  sz_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.sz)
}

// optional uint32 healcount = 20 [default = 0];
inline bool BlobUser::has_healcount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BlobUser::set_has_healcount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BlobUser::clear_has_healcount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BlobUser::clear_healcount() {
  healcount_ = 0u;
  clear_has_healcount();
}
inline ::google::protobuf::uint32 BlobUser::healcount() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.healcount)
  return healcount_;
}
inline void BlobUser::set_healcount(::google::protobuf::uint32 value) {
  set_has_healcount();
  healcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.healcount)
}

// optional uint32 zeny_max = 21 [default = 0];
inline bool BlobUser::has_zeny_max() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BlobUser::set_has_zeny_max() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BlobUser::clear_has_zeny_max() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BlobUser::clear_zeny_max() {
  zeny_max_ = 0u;
  clear_has_zeny_max();
}
inline ::google::protobuf::uint32 BlobUser::zeny_max() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.zeny_max)
  return zeny_max_;
}
inline void BlobUser::set_zeny_max(::google::protobuf::uint32 value) {
  set_has_zeny_max();
  zeny_max_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.zeny_max)
}

// optional uint32 zeny_debt = 22 [default = 0];
inline bool BlobUser::has_zeny_debt() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BlobUser::set_has_zeny_debt() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BlobUser::clear_has_zeny_debt() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BlobUser::clear_zeny_debt() {
  zeny_debt_ = 0u;
  clear_has_zeny_debt();
}
inline ::google::protobuf::uint32 BlobUser::zeny_debt() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.zeny_debt)
  return zeny_debt_;
}
inline void BlobUser::set_zeny_debt(::google::protobuf::uint32 value) {
  set_has_zeny_debt();
  zeny_debt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.zeny_debt)
}

// optional uint32 pvp_coin = 23 [default = 0];
inline bool BlobUser::has_pvp_coin() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BlobUser::set_has_pvp_coin() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BlobUser::clear_has_pvp_coin() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BlobUser::clear_pvp_coin() {
  pvp_coin_ = 0u;
  clear_has_pvp_coin();
}
inline ::google::protobuf::uint32 BlobUser::pvp_coin() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.pvp_coin)
  return pvp_coin_;
}
inline void BlobUser::set_pvp_coin(::google::protobuf::uint32 value) {
  set_has_pvp_coin();
  pvp_coin_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.pvp_coin)
}

// optional uint32 con = 24 [default = 0];
inline bool BlobUser::has_con() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BlobUser::set_has_con() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BlobUser::clear_has_con() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BlobUser::clear_con() {
  con_ = 0u;
  clear_has_con();
}
inline ::google::protobuf::uint32 BlobUser::con() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.con)
  return con_;
}
inline void BlobUser::set_con(::google::protobuf::uint32 value) {
  set_has_con();
  con_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.con)
}

// optional bool coninit = 25 [default = false];
inline bool BlobUser::has_coninit() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BlobUser::set_has_coninit() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BlobUser::clear_has_coninit() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BlobUser::clear_coninit() {
  coninit_ = false;
  clear_has_coninit();
}
inline bool BlobUser::coninit() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.coninit)
  return coninit_;
}
inline void BlobUser::set_coninit(bool value) {
  set_has_coninit();
  coninit_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.coninit)
}

// optional uint64 charge_zeny = 26;
inline bool BlobUser::has_charge_zeny() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BlobUser::set_has_charge_zeny() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BlobUser::clear_has_charge_zeny() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BlobUser::clear_charge_zeny() {
  charge_zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_charge_zeny();
}
inline ::google::protobuf::uint64 BlobUser::charge_zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.charge_zeny)
  return charge_zeny_;
}
inline void BlobUser::set_charge_zeny(::google::protobuf::uint64 value) {
  set_has_charge_zeny();
  charge_zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.charge_zeny)
}

// optional uint32 charge_lottery = 27;
inline bool BlobUser::has_charge_lottery() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BlobUser::set_has_charge_lottery() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BlobUser::clear_has_charge_lottery() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BlobUser::clear_charge_lottery() {
  charge_lottery_ = 0u;
  clear_has_charge_lottery();
}
inline ::google::protobuf::uint32 BlobUser::charge_lottery() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.charge_lottery)
  return charge_lottery_;
}
inline void BlobUser::set_charge_lottery(::google::protobuf::uint32 value) {
  set_has_charge_lottery();
  charge_lottery_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.charge_lottery)
}

// optional uint32 lottery_coin = 28 [default = 0];
inline bool BlobUser::has_lottery_coin() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BlobUser::set_has_lottery_coin() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BlobUser::clear_has_lottery_coin() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BlobUser::clear_lottery_coin() {
  lottery_coin_ = 0u;
  clear_has_lottery_coin();
}
inline ::google::protobuf::uint32 BlobUser::lottery_coin() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.lottery_coin)
  return lottery_coin_;
}
inline void BlobUser::set_lottery_coin(::google::protobuf::uint32 value) {
  set_has_lottery_coin();
  lottery_coin_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.lottery_coin)
}

// optional uint32 rename_time = 29 [default = 0];
inline bool BlobUser::has_rename_time() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BlobUser::set_has_rename_time() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BlobUser::clear_has_rename_time() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BlobUser::clear_rename_time() {
  rename_time_ = 0u;
  clear_has_rename_time();
}
inline ::google::protobuf::uint32 BlobUser::rename_time() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.rename_time)
  return rename_time_;
}
inline void BlobUser::set_rename_time(::google::protobuf::uint32 value) {
  set_has_rename_time();
  rename_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.rename_time)
}

// optional uint32 guild_honor = 30 [default = 0];
inline bool BlobUser::has_guild_honor() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BlobUser::set_has_guild_honor() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BlobUser::clear_has_guild_honor() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BlobUser::clear_guild_honor() {
  guild_honor_ = 0u;
  clear_has_guild_honor();
}
inline ::google::protobuf::uint32 BlobUser::guild_honor() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.guild_honor)
  return guild_honor_;
}
inline void BlobUser::set_guild_honor(::google::protobuf::uint32 value) {
  set_has_guild_honor();
  guild_honor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.guild_honor)
}

// optional uint64 save_index = 31 [default = 0];
inline bool BlobUser::has_save_index() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BlobUser::set_has_save_index() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BlobUser::clear_has_save_index() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BlobUser::clear_save_index() {
  save_index_ = GOOGLE_ULONGLONG(0);
  clear_has_save_index();
}
inline ::google::protobuf::uint64 BlobUser::save_index() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.save_index)
  return save_index_;
}
inline void BlobUser::set_save_index(::google::protobuf::uint64 value) {
  set_has_save_index();
  save_index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.save_index)
}

// optional bool divorce_roller_coaster = 32 [default = false];
inline bool BlobUser::has_divorce_roller_coaster() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BlobUser::set_has_divorce_roller_coaster() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BlobUser::clear_has_divorce_roller_coaster() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BlobUser::clear_divorce_roller_coaster() {
  divorce_roller_coaster_ = false;
  clear_has_divorce_roller_coaster();
}
inline bool BlobUser::divorce_roller_coaster() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.divorce_roller_coaster)
  return divorce_roller_coaster_;
}
inline void BlobUser::set_divorce_roller_coaster(bool value) {
  set_has_divorce_roller_coaster();
  divorce_roller_coaster_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.divorce_roller_coaster)
}

// optional uint64 daily_normal_zeny = 33;
inline bool BlobUser::has_daily_normal_zeny() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BlobUser::set_has_daily_normal_zeny() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BlobUser::clear_has_daily_normal_zeny() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BlobUser::clear_daily_normal_zeny() {
  daily_normal_zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_daily_normal_zeny();
}
inline ::google::protobuf::uint64 BlobUser::daily_normal_zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.daily_normal_zeny)
  return daily_normal_zeny_;
}
inline void BlobUser::set_daily_normal_zeny(::google::protobuf::uint64 value) {
  set_has_daily_normal_zeny();
  daily_normal_zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.daily_normal_zeny)
}

// optional uint64 daily_charge_zeny = 34;
inline bool BlobUser::has_daily_charge_zeny() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BlobUser::set_has_daily_charge_zeny() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BlobUser::clear_has_daily_charge_zeny() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BlobUser::clear_daily_charge_zeny() {
  daily_charge_zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_daily_charge_zeny();
}
inline ::google::protobuf::uint64 BlobUser::daily_charge_zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.daily_charge_zeny)
  return daily_charge_zeny_;
}
inline void BlobUser::set_daily_charge_zeny(::google::protobuf::uint64 value) {
  set_has_daily_charge_zeny();
  daily_charge_zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.daily_charge_zeny)
}

// optional uint64 tutorbattletime = 35 [default = 0];
inline bool BlobUser::has_tutorbattletime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BlobUser::set_has_tutorbattletime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BlobUser::clear_has_tutorbattletime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BlobUser::clear_tutorbattletime() {
  tutorbattletime_ = GOOGLE_ULONGLONG(0);
  clear_has_tutorbattletime();
}
inline ::google::protobuf::uint64 BlobUser::tutorbattletime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.tutorbattletime)
  return tutorbattletime_;
}
inline void BlobUser::set_tutorbattletime(::google::protobuf::uint64 value) {
  set_has_tutorbattletime();
  tutorbattletime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.tutorbattletime)
}

// optional uint64 usedtutorbattletime = 36 [default = 0];
inline bool BlobUser::has_usedtutorbattletime() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BlobUser::set_has_usedtutorbattletime() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BlobUser::clear_has_usedtutorbattletime() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BlobUser::clear_usedtutorbattletime() {
  usedtutorbattletime_ = GOOGLE_ULONGLONG(0);
  clear_has_usedtutorbattletime();
}
inline ::google::protobuf::uint64 BlobUser::usedtutorbattletime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.usedtutorbattletime)
  return usedtutorbattletime_;
}
inline void BlobUser::set_usedtutorbattletime(::google::protobuf::uint64 value) {
  set_has_usedtutorbattletime();
  usedtutorbattletime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.usedtutorbattletime)
}

// optional uint32 last_offlinetime = 37;
inline bool BlobUser::has_last_offlinetime() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BlobUser::set_has_last_offlinetime() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BlobUser::clear_has_last_offlinetime() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BlobUser::clear_last_offlinetime() {
  last_offlinetime_ = 0u;
  clear_has_last_offlinetime();
}
inline ::google::protobuf::uint32 BlobUser::last_offlinetime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.last_offlinetime)
  return last_offlinetime_;
}
inline void BlobUser::set_last_offlinetime(::google::protobuf::uint32 value) {
  set_has_last_offlinetime();
  last_offlinetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.last_offlinetime)
}

// optional uint32 last_baselv = 38;
inline bool BlobUser::has_last_baselv() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BlobUser::set_has_last_baselv() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BlobUser::clear_has_last_baselv() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BlobUser::clear_last_baselv() {
  last_baselv_ = 0u;
  clear_has_last_baselv();
}
inline ::google::protobuf::uint32 BlobUser::last_baselv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.last_baselv)
  return last_baselv_;
}
inline void BlobUser::set_last_baselv(::google::protobuf::uint32 value) {
  set_has_last_baselv();
  last_baselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.last_baselv)
}

// optional uint32 last_joblv = 39;
inline bool BlobUser::has_last_joblv() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BlobUser::set_has_last_joblv() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BlobUser::clear_has_last_joblv() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BlobUser::clear_last_joblv() {
  last_joblv_ = 0u;
  clear_has_last_joblv();
}
inline ::google::protobuf::uint32 BlobUser::last_joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.last_joblv)
  return last_joblv_;
}
inline void BlobUser::set_last_joblv(::google::protobuf::uint32 value) {
  set_has_last_joblv();
  last_joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.last_joblv)
}

// optional uint32 dead_coin = 40 [default = 0];
inline bool BlobUser::has_dead_coin() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BlobUser::set_has_dead_coin() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BlobUser::clear_has_dead_coin() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BlobUser::clear_dead_coin() {
  dead_coin_ = 0u;
  clear_has_dead_coin();
}
inline ::google::protobuf::uint32 BlobUser::dead_coin() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.dead_coin)
  return dead_coin_;
}
inline void BlobUser::set_dead_coin(::google::protobuf::uint32 value) {
  set_has_dead_coin();
  dead_coin_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.dead_coin)
}

// optional uint32 dead_lv = 41 [default = 0];
inline bool BlobUser::has_dead_lv() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BlobUser::set_has_dead_lv() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BlobUser::clear_has_dead_lv() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BlobUser::clear_dead_lv() {
  dead_lv_ = 0u;
  clear_has_dead_lv();
}
inline ::google::protobuf::uint32 BlobUser::dead_lv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.dead_lv)
  return dead_lv_;
}
inline void BlobUser::set_dead_lv(::google::protobuf::uint32 value) {
  set_has_dead_lv();
  dead_lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.dead_lv)
}

// optional uint32 dead_exp = 42 [default = 0];
inline bool BlobUser::has_dead_exp() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void BlobUser::set_has_dead_exp() {
  _has_bits_[1] |= 0x00000100u;
}
inline void BlobUser::clear_has_dead_exp() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void BlobUser::clear_dead_exp() {
  dead_exp_ = 0u;
  clear_has_dead_exp();
}
inline ::google::protobuf::uint32 BlobUser::dead_exp() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUser.dead_exp)
  return dead_exp_;
}
inline void BlobUser::set_dead_exp(::google::protobuf::uint32 value) {
  set_has_dead_exp();
  dead_exp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUser.dead_exp)
}

// -------------------------------------------------------------------

// SkillReplaceInfo

// optional uint32 oldid = 1 [default = 0];
inline bool SkillReplaceInfo::has_oldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillReplaceInfo::set_has_oldid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillReplaceInfo::clear_has_oldid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillReplaceInfo::clear_oldid() {
  oldid_ = 0u;
  clear_has_oldid();
}
inline ::google::protobuf::uint32 SkillReplaceInfo::oldid() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillReplaceInfo.oldid)
  return oldid_;
}
inline void SkillReplaceInfo::set_oldid(::google::protobuf::uint32 value) {
  set_has_oldid();
  oldid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillReplaceInfo.oldid)
}

// optional uint32 newid = 2 [default = 0];
inline bool SkillReplaceInfo::has_newid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillReplaceInfo::set_has_newid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillReplaceInfo::clear_has_newid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillReplaceInfo::clear_newid() {
  newid_ = 0u;
  clear_has_newid();
}
inline ::google::protobuf::uint32 SkillReplaceInfo::newid() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillReplaceInfo.newid)
  return newid_;
}
inline void SkillReplaceInfo::set_newid(::google::protobuf::uint32 value) {
  set_has_newid();
  newid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillReplaceInfo.newid)
}

// -------------------------------------------------------------------

// SkillShortcutDB

// optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
inline bool SkillShortcutDB::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillShortcutDB::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillShortcutDB::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillShortcutDB::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::ESkillShortcut SkillShortcutDB::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillShortcutDB.type)
  return static_cast< ::Cmd::ESkillShortcut >(type_);
}
inline void SkillShortcutDB::set_type(::Cmd::ESkillShortcut value) {
  assert(::Cmd::ESkillShortcut_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillShortcutDB.type)
}

// repeated .Cmd.SkillPos cuts = 2;
inline int SkillShortcutDB::cuts_size() const {
  return cuts_.size();
}
inline void SkillShortcutDB::clear_cuts() {
  cuts_.Clear();
}
inline const ::Cmd::SkillPos& SkillShortcutDB::cuts(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SkillShortcutDB.cuts)
  return cuts_.Get(index);
}
inline ::Cmd::SkillPos* SkillShortcutDB::mutable_cuts(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SkillShortcutDB.cuts)
  return cuts_.Mutable(index);
}
inline ::Cmd::SkillPos* SkillShortcutDB::add_cuts() {
  // @@protoc_insertion_point(field_add:Cmd.SkillShortcutDB.cuts)
  return cuts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
SkillShortcutDB::cuts() const {
  // @@protoc_insertion_point(field_list:Cmd.SkillShortcutDB.cuts)
  return cuts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
SkillShortcutDB::mutable_cuts() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SkillShortcutDB.cuts)
  return &cuts_;
}

// -------------------------------------------------------------------

// UserSkillData

// optional uint32 totalpoint = 1;
inline bool UserSkillData::has_totalpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSkillData::set_has_totalpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSkillData::clear_has_totalpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSkillData::clear_totalpoint() {
  totalpoint_ = 0u;
  clear_has_totalpoint();
}
inline ::google::protobuf::uint32 UserSkillData::totalpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.totalpoint)
  return totalpoint_;
}
inline void UserSkillData::set_totalpoint(::google::protobuf::uint32 value) {
  set_has_totalpoint();
  totalpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserSkillData.totalpoint)
}

// optional uint32 maxpos = 2;
inline bool UserSkillData::has_maxpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSkillData::set_has_maxpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSkillData::clear_has_maxpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSkillData::clear_maxpos() {
  maxpos_ = 0u;
  clear_has_maxpos();
}
inline ::google::protobuf::uint32 UserSkillData::maxpos() const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.maxpos)
  return maxpos_;
}
inline void UserSkillData::set_maxpos(::google::protobuf::uint32 value) {
  set_has_maxpos();
  maxpos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserSkillData.maxpos)
}

// repeated .Cmd.SkillData datas = 3;
inline int UserSkillData::datas_size() const {
  return datas_.size();
}
inline void UserSkillData::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::SkillData& UserSkillData::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.datas)
  return datas_.Get(index);
}
inline ::Cmd::SkillData* UserSkillData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserSkillData.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::SkillData* UserSkillData::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.UserSkillData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >&
UserSkillData::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.UserSkillData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >*
UserSkillData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserSkillData.datas)
  return &datas_;
}

// repeated .Cmd.SkillPos pos = 4;
inline int UserSkillData::pos_size() const {
  return pos_.size();
}
inline void UserSkillData::clear_pos() {
  pos_.Clear();
}
inline const ::Cmd::SkillPos& UserSkillData::pos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.pos)
  return pos_.Get(index);
}
inline ::Cmd::SkillPos* UserSkillData::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserSkillData.pos)
  return pos_.Mutable(index);
}
inline ::Cmd::SkillPos* UserSkillData::add_pos() {
  // @@protoc_insertion_point(field_add:Cmd.UserSkillData.pos)
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
UserSkillData::pos() const {
  // @@protoc_insertion_point(field_list:Cmd.UserSkillData.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
UserSkillData::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserSkillData.pos)
  return &pos_;
}

// optional uint32 automaxpos = 5;
inline bool UserSkillData::has_automaxpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSkillData::set_has_automaxpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSkillData::clear_has_automaxpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSkillData::clear_automaxpos() {
  automaxpos_ = 0u;
  clear_has_automaxpos();
}
inline ::google::protobuf::uint32 UserSkillData::automaxpos() const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.automaxpos)
  return automaxpos_;
}
inline void UserSkillData::set_automaxpos(::google::protobuf::uint32 value) {
  set_has_automaxpos();
  automaxpos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserSkillData.automaxpos)
}

// repeated .Cmd.SkillPos autopos = 6;
inline int UserSkillData::autopos_size() const {
  return autopos_.size();
}
inline void UserSkillData::clear_autopos() {
  autopos_.Clear();
}
inline const ::Cmd::SkillPos& UserSkillData::autopos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.autopos)
  return autopos_.Get(index);
}
inline ::Cmd::SkillPos* UserSkillData::mutable_autopos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserSkillData.autopos)
  return autopos_.Mutable(index);
}
inline ::Cmd::SkillPos* UserSkillData::add_autopos() {
  // @@protoc_insertion_point(field_add:Cmd.UserSkillData.autopos)
  return autopos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
UserSkillData::autopos() const {
  // @@protoc_insertion_point(field_list:Cmd.UserSkillData.autopos)
  return autopos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
UserSkillData::mutable_autopos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserSkillData.autopos)
  return &autopos_;
}

// repeated .Cmd.SkillPos extendpos = 7;
inline int UserSkillData::extendpos_size() const {
  return extendpos_.size();
}
inline void UserSkillData::clear_extendpos() {
  extendpos_.Clear();
}
inline const ::Cmd::SkillPos& UserSkillData::extendpos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.extendpos)
  return extendpos_.Get(index);
}
inline ::Cmd::SkillPos* UserSkillData::mutable_extendpos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserSkillData.extendpos)
  return extendpos_.Mutable(index);
}
inline ::Cmd::SkillPos* UserSkillData::add_extendpos() {
  // @@protoc_insertion_point(field_add:Cmd.UserSkillData.extendpos)
  return extendpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >&
UserSkillData::extendpos() const {
  // @@protoc_insertion_point(field_list:Cmd.UserSkillData.extendpos)
  return extendpos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillPos >*
UserSkillData::mutable_extendpos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserSkillData.extendpos)
  return &extendpos_;
}

// optional uint32 maxextendpos = 8;
inline bool UserSkillData::has_maxextendpos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserSkillData::set_has_maxextendpos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserSkillData::clear_has_maxextendpos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserSkillData::clear_maxextendpos() {
  maxextendpos_ = 0u;
  clear_has_maxextendpos();
}
inline ::google::protobuf::uint32 UserSkillData::maxextendpos() const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.maxextendpos)
  return maxextendpos_;
}
inline void UserSkillData::set_maxextendpos(::google::protobuf::uint32 value) {
  set_has_maxextendpos();
  maxextendpos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserSkillData.maxextendpos)
}

// optional bool reseted = 10 [default = false];
inline bool UserSkillData::has_reseted() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserSkillData::set_has_reseted() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserSkillData::clear_has_reseted() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserSkillData::clear_reseted() {
  reseted_ = false;
  clear_has_reseted();
}
inline bool UserSkillData::reseted() const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.reseted)
  return reseted_;
}
inline void UserSkillData::set_reseted(bool value) {
  set_has_reseted();
  reseted_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserSkillData.reseted)
}

// repeated .Cmd.SkillReplaceInfo replace = 11;
inline int UserSkillData::replace_size() const {
  return replace_.size();
}
inline void UserSkillData::clear_replace() {
  replace_.Clear();
}
inline const ::Cmd::SkillReplaceInfo& UserSkillData::replace(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.replace)
  return replace_.Get(index);
}
inline ::Cmd::SkillReplaceInfo* UserSkillData::mutable_replace(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserSkillData.replace)
  return replace_.Mutable(index);
}
inline ::Cmd::SkillReplaceInfo* UserSkillData::add_replace() {
  // @@protoc_insertion_point(field_add:Cmd.UserSkillData.replace)
  return replace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillReplaceInfo >&
UserSkillData::replace() const {
  // @@protoc_insertion_point(field_list:Cmd.UserSkillData.replace)
  return replace_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillReplaceInfo >*
UserSkillData::mutable_replace() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserSkillData.replace)
  return &replace_;
}

// repeated .Cmd.SkillShortcutDB shortcuts = 12;
inline int UserSkillData::shortcuts_size() const {
  return shortcuts_.size();
}
inline void UserSkillData::clear_shortcuts() {
  shortcuts_.Clear();
}
inline const ::Cmd::SkillShortcutDB& UserSkillData::shortcuts(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.shortcuts)
  return shortcuts_.Get(index);
}
inline ::Cmd::SkillShortcutDB* UserSkillData::mutable_shortcuts(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserSkillData.shortcuts)
  return shortcuts_.Mutable(index);
}
inline ::Cmd::SkillShortcutDB* UserSkillData::add_shortcuts() {
  // @@protoc_insertion_point(field_add:Cmd.UserSkillData.shortcuts)
  return shortcuts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillShortcutDB >&
UserSkillData::shortcuts() const {
  // @@protoc_insertion_point(field_list:Cmd.UserSkillData.shortcuts)
  return shortcuts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillShortcutDB >*
UserSkillData::mutable_shortcuts() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserSkillData.shortcuts)
  return &shortcuts_;
}

// optional uint32 last_concert_skillid = 13 [default = 0];
inline bool UserSkillData::has_last_concert_skillid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserSkillData::set_has_last_concert_skillid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserSkillData::clear_has_last_concert_skillid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserSkillData::clear_last_concert_skillid() {
  last_concert_skillid_ = 0u;
  clear_has_last_concert_skillid();
}
inline ::google::protobuf::uint32 UserSkillData::last_concert_skillid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserSkillData.last_concert_skillid)
  return last_concert_skillid_;
}
inline void UserSkillData::set_last_concert_skillid(::google::protobuf::uint32 value) {
  set_has_last_concert_skillid();
  last_concert_skillid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserSkillData.last_concert_skillid)
}

// -------------------------------------------------------------------

// BlobShareSkill

// repeated .Cmd.SkillItem items = 1;
inline int BlobShareSkill::items_size() const {
  return items_.size();
}
inline void BlobShareSkill::clear_items() {
  items_.Clear();
}
inline const ::Cmd::SkillItem& BlobShareSkill::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShareSkill.items)
  return items_.Get(index);
}
inline ::Cmd::SkillItem* BlobShareSkill::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShareSkill.items)
  return items_.Mutable(index);
}
inline ::Cmd::SkillItem* BlobShareSkill::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShareSkill.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillItem >&
BlobShareSkill::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShareSkill.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillItem >*
BlobShareSkill::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShareSkill.items)
  return &items_;
}

// -------------------------------------------------------------------

// UserRoleData

// optional uint64 jobExp = 1 [default = 0];
inline bool UserRoleData::has_jobexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRoleData::set_has_jobexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRoleData::clear_has_jobexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRoleData::clear_jobexp() {
  jobexp_ = GOOGLE_ULONGLONG(0);
  clear_has_jobexp();
}
inline ::google::protobuf::uint64 UserRoleData::jobexp() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.jobExp)
  return jobexp_;
}
inline void UserRoleData::set_jobexp(::google::protobuf::uint64 value) {
  set_has_jobexp();
  jobexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.jobExp)
}

// optional uint32 jobLv = 2 [default = 0];
inline bool UserRoleData::has_joblv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRoleData::set_has_joblv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRoleData::clear_has_joblv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRoleData::clear_joblv() {
  joblv_ = 0u;
  clear_has_joblv();
}
inline ::google::protobuf::uint32 UserRoleData::joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.jobLv)
  return joblv_;
}
inline void UserRoleData::set_joblv(::google::protobuf::uint32 value) {
  set_has_joblv();
  joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.jobLv)
}

// optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
inline bool UserRoleData::has_profession() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRoleData::set_has_profession() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRoleData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRoleData::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::Cmd::EProfession UserRoleData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.profession)
  return static_cast< ::Cmd::EProfession >(profession_);
}
inline void UserRoleData::set_profession(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.profession)
}

// optional uint32 strPoint = 4 [default = 0];
inline bool UserRoleData::has_strpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRoleData::set_has_strpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRoleData::clear_has_strpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRoleData::clear_strpoint() {
  strpoint_ = 0u;
  clear_has_strpoint();
}
inline ::google::protobuf::uint32 UserRoleData::strpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.strPoint)
  return strpoint_;
}
inline void UserRoleData::set_strpoint(::google::protobuf::uint32 value) {
  set_has_strpoint();
  strpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.strPoint)
}

// optional uint32 intPoint = 5 [default = 0];
inline bool UserRoleData::has_intpoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRoleData::set_has_intpoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRoleData::clear_has_intpoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRoleData::clear_intpoint() {
  intpoint_ = 0u;
  clear_has_intpoint();
}
inline ::google::protobuf::uint32 UserRoleData::intpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.intPoint)
  return intpoint_;
}
inline void UserRoleData::set_intpoint(::google::protobuf::uint32 value) {
  set_has_intpoint();
  intpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.intPoint)
}

// optional uint32 agiPoint = 6 [default = 0];
inline bool UserRoleData::has_agipoint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRoleData::set_has_agipoint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRoleData::clear_has_agipoint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRoleData::clear_agipoint() {
  agipoint_ = 0u;
  clear_has_agipoint();
}
inline ::google::protobuf::uint32 UserRoleData::agipoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.agiPoint)
  return agipoint_;
}
inline void UserRoleData::set_agipoint(::google::protobuf::uint32 value) {
  set_has_agipoint();
  agipoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.agiPoint)
}

// optional uint32 dexPoint = 7 [default = 0];
inline bool UserRoleData::has_dexpoint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserRoleData::set_has_dexpoint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserRoleData::clear_has_dexpoint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserRoleData::clear_dexpoint() {
  dexpoint_ = 0u;
  clear_has_dexpoint();
}
inline ::google::protobuf::uint32 UserRoleData::dexpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.dexPoint)
  return dexpoint_;
}
inline void UserRoleData::set_dexpoint(::google::protobuf::uint32 value) {
  set_has_dexpoint();
  dexpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.dexPoint)
}

// optional uint32 vitPoint = 8 [default = 0];
inline bool UserRoleData::has_vitpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserRoleData::set_has_vitpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserRoleData::clear_has_vitpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserRoleData::clear_vitpoint() {
  vitpoint_ = 0u;
  clear_has_vitpoint();
}
inline ::google::protobuf::uint32 UserRoleData::vitpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.vitPoint)
  return vitpoint_;
}
inline void UserRoleData::set_vitpoint(::google::protobuf::uint32 value) {
  set_has_vitpoint();
  vitpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.vitPoint)
}

// optional uint32 lukPoint = 9 [default = 0];
inline bool UserRoleData::has_lukpoint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserRoleData::set_has_lukpoint() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserRoleData::clear_has_lukpoint() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserRoleData::clear_lukpoint() {
  lukpoint_ = 0u;
  clear_has_lukpoint();
}
inline ::google::protobuf::uint32 UserRoleData::lukpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.lukPoint)
  return lukpoint_;
}
inline void UserRoleData::set_lukpoint(::google::protobuf::uint32 value) {
  set_has_lukpoint();
  lukpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.lukPoint)
}

// optional uint32 totalPoint = 10 [default = 0];
inline bool UserRoleData::has_totalpoint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserRoleData::set_has_totalpoint() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserRoleData::clear_has_totalpoint() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserRoleData::clear_totalpoint() {
  totalpoint_ = 0u;
  clear_has_totalpoint();
}
inline ::google::protobuf::uint32 UserRoleData::totalpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.totalPoint)
  return totalpoint_;
}
inline void UserRoleData::set_totalpoint(::google::protobuf::uint32 value) {
  set_has_totalpoint();
  totalpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.totalPoint)
}

// optional uint32 usedPoint = 11 [default = 0];
inline bool UserRoleData::has_usedpoint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserRoleData::set_has_usedpoint() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserRoleData::clear_has_usedpoint() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserRoleData::clear_usedpoint() {
  usedpoint_ = 0u;
  clear_has_usedpoint();
}
inline ::google::protobuf::uint32 UserRoleData::usedpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.usedPoint)
  return usedpoint_;
}
inline void UserRoleData::set_usedpoint(::google::protobuf::uint32 value) {
  set_has_usedpoint();
  usedpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.usedPoint)
}

// optional uint32 hp = 12 [default = 0];
inline bool UserRoleData::has_hp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserRoleData::set_has_hp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserRoleData::clear_has_hp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserRoleData::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 UserRoleData::hp() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.hp)
  return hp_;
}
inline void UserRoleData::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.hp)
}

// optional uint32 sp = 13 [default = 0];
inline bool UserRoleData::has_sp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserRoleData::set_has_sp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserRoleData::clear_has_sp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserRoleData::clear_sp() {
  sp_ = 0u;
  clear_has_sp();
}
inline ::google::protobuf::uint32 UserRoleData::sp() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.sp)
  return sp_;
}
inline void UserRoleData::set_sp(::google::protobuf::uint32 value) {
  set_has_sp();
  sp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.sp)
}

// optional .Cmd.UserSkillData skill = 14;
inline bool UserRoleData::has_skill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserRoleData::set_has_skill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserRoleData::clear_has_skill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserRoleData::clear_skill() {
  if (skill_ != NULL) skill_->::Cmd::UserSkillData::Clear();
  clear_has_skill();
}
inline const ::Cmd::UserSkillData& UserRoleData::skill() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.skill)
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::Cmd::UserSkillData* UserRoleData::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::Cmd::UserSkillData;
  // @@protoc_insertion_point(field_mutable:Cmd.UserRoleData.skill)
  return skill_;
}
inline ::Cmd::UserSkillData* UserRoleData::release_skill() {
  clear_has_skill();
  ::Cmd::UserSkillData* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void UserRoleData::set_allocated_skill(::Cmd::UserSkillData* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserRoleData.skill)
}

// repeated uint32 unlocklv = 15;
inline int UserRoleData::unlocklv_size() const {
  return unlocklv_.size();
}
inline void UserRoleData::clear_unlocklv() {
  unlocklv_.Clear();
}
inline ::google::protobuf::uint32 UserRoleData::unlocklv(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.unlocklv)
  return unlocklv_.Get(index);
}
inline void UserRoleData::set_unlocklv(int index, ::google::protobuf::uint32 value) {
  unlocklv_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.unlocklv)
}
inline void UserRoleData::add_unlocklv(::google::protobuf::uint32 value) {
  unlocklv_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UserRoleData.unlocklv)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserRoleData::unlocklv() const {
  // @@protoc_insertion_point(field_list:Cmd.UserRoleData.unlocklv)
  return unlocklv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserRoleData::mutable_unlocklv() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserRoleData.unlocklv)
  return &unlocklv_;
}

// optional uint32 maxjoblv = 16 [default = 0];
inline bool UserRoleData::has_maxjoblv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserRoleData::set_has_maxjoblv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserRoleData::clear_has_maxjoblv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserRoleData::clear_maxjoblv() {
  maxjoblv_ = 0u;
  clear_has_maxjoblv();
}
inline ::google::protobuf::uint32 UserRoleData::maxjoblv() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.maxjoblv)
  return maxjoblv_;
}
inline void UserRoleData::set_maxjoblv(::google::protobuf::uint32 value) {
  set_has_maxjoblv();
  maxjoblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.maxjoblv)
}

// optional uint32 branch = 17 [default = 0];
inline bool UserRoleData::has_branch() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserRoleData::set_has_branch() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserRoleData::clear_has_branch() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserRoleData::clear_branch() {
  branch_ = 0u;
  clear_has_branch();
}
inline ::google::protobuf::uint32 UserRoleData::branch() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.branch)
  return branch_;
}
inline void UserRoleData::set_branch(::google::protobuf::uint32 value) {
  set_has_branch();
  branch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.branch)
}

// optional bool isbuy = 18 [default = false];
inline bool UserRoleData::has_isbuy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserRoleData::set_has_isbuy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserRoleData::clear_has_isbuy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserRoleData::clear_isbuy() {
  isbuy_ = false;
  clear_has_isbuy();
}
inline bool UserRoleData::isbuy() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRoleData.isbuy)
  return isbuy_;
}
inline void UserRoleData::set_isbuy(bool value) {
  set_has_isbuy();
  isbuy_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRoleData.isbuy)
}

// -------------------------------------------------------------------

// BlobFighter

// repeated .Cmd.UserRoleData datas = 1;
inline int BlobFighter::datas_size() const {
  return datas_.size();
}
inline void BlobFighter::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserRoleData& BlobFighter::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFighter.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserRoleData* BlobFighter::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobFighter.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserRoleData* BlobFighter::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobFighter.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserRoleData >&
BlobFighter::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFighter.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserRoleData >*
BlobFighter::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFighter.datas)
  return &datas_;
}

// optional uint32 totalpoint = 2 [default = 0];
inline bool BlobFighter::has_totalpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobFighter::set_has_totalpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobFighter::clear_has_totalpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobFighter::clear_totalpoint() {
  totalpoint_ = 0u;
  clear_has_totalpoint();
}
inline ::google::protobuf::uint32 BlobFighter::totalpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFighter.totalpoint)
  return totalpoint_;
}
inline void BlobFighter::set_totalpoint(::google::protobuf::uint32 value) {
  set_has_totalpoint();
  totalpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFighter.totalpoint)
}

// optional uint32 maxskillpos = 3 [default = 0];
inline bool BlobFighter::has_maxskillpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobFighter::set_has_maxskillpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobFighter::clear_has_maxskillpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobFighter::clear_maxskillpos() {
  maxskillpos_ = 0u;
  clear_has_maxskillpos();
}
inline ::google::protobuf::uint32 BlobFighter::maxskillpos() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFighter.maxskillpos)
  return maxskillpos_;
}
inline void BlobFighter::set_maxskillpos(::google::protobuf::uint32 value) {
  set_has_maxskillpos();
  maxskillpos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFighter.maxskillpos)
}

// optional uint32 maxautopos = 4 [default = 0];
inline bool BlobFighter::has_maxautopos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobFighter::set_has_maxautopos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobFighter::clear_has_maxautopos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobFighter::clear_maxautopos() {
  maxautopos_ = 0u;
  clear_has_maxautopos();
}
inline ::google::protobuf::uint32 BlobFighter::maxautopos() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFighter.maxautopos)
  return maxautopos_;
}
inline void BlobFighter::set_maxautopos(::google::protobuf::uint32 value) {
  set_has_maxautopos();
  maxautopos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFighter.maxautopos)
}

// optional uint32 maxextendpos = 5 [default = 0];
inline bool BlobFighter::has_maxextendpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobFighter::set_has_maxextendpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobFighter::clear_has_maxextendpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobFighter::clear_maxextendpos() {
  maxextendpos_ = 0u;
  clear_has_maxextendpos();
}
inline ::google::protobuf::uint32 BlobFighter::maxextendpos() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFighter.maxextendpos)
  return maxextendpos_;
}
inline void BlobFighter::set_maxextendpos(::google::protobuf::uint32 value) {
  set_has_maxextendpos();
  maxextendpos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFighter.maxextendpos)
}

// optional uint32 maxjoblv = 6 [default = 0];
inline bool BlobFighter::has_maxjoblv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobFighter::set_has_maxjoblv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobFighter::clear_has_maxjoblv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobFighter::clear_maxjoblv() {
  maxjoblv_ = 0u;
  clear_has_maxjoblv();
}
inline ::google::protobuf::uint32 BlobFighter::maxjoblv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFighter.maxjoblv)
  return maxjoblv_;
}
inline void BlobFighter::set_maxjoblv(::google::protobuf::uint32 value) {
  set_has_maxjoblv();
  maxjoblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFighter.maxjoblv)
}

// optional uint32 maxcurjoblv = 7 [default = 0];
inline bool BlobFighter::has_maxcurjoblv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobFighter::set_has_maxcurjoblv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobFighter::clear_has_maxcurjoblv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobFighter::clear_maxcurjoblv() {
  maxcurjoblv_ = 0u;
  clear_has_maxcurjoblv();
}
inline ::google::protobuf::uint32 BlobFighter::maxcurjoblv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFighter.maxcurjoblv)
  return maxcurjoblv_;
}
inline void BlobFighter::set_maxcurjoblv(::google::protobuf::uint32 value) {
  set_has_maxcurjoblv();
  maxcurjoblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFighter.maxcurjoblv)
}

// -------------------------------------------------------------------

// StageStepNormalBlob

// optional uint32 stepid = 1;
inline bool StageStepNormalBlob::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageStepNormalBlob::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageStepNormalBlob::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageStepNormalBlob::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 StageStepNormalBlob::stepid() const {
  // @@protoc_insertion_point(field_get:Cmd.StageStepNormalBlob.stepid)
  return stepid_;
}
inline void StageStepNormalBlob::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageStepNormalBlob.stepid)
}

// optional uint32 star = 2;
inline bool StageStepNormalBlob::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StageStepNormalBlob::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StageStepNormalBlob::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StageStepNormalBlob::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 StageStepNormalBlob::star() const {
  // @@protoc_insertion_point(field_get:Cmd.StageStepNormalBlob.star)
  return star_;
}
inline void StageStepNormalBlob::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageStepNormalBlob.star)
}

// -------------------------------------------------------------------

// StageStepHardBlob

// optional uint32 stepid = 1;
inline bool StageStepHardBlob::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageStepHardBlob::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageStepHardBlob::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageStepHardBlob::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 StageStepHardBlob::stepid() const {
  // @@protoc_insertion_point(field_get:Cmd.StageStepHardBlob.stepid)
  return stepid_;
}
inline void StageStepHardBlob::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageStepHardBlob.stepid)
}

// optional uint32 finish = 2;
inline bool StageStepHardBlob::has_finish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StageStepHardBlob::set_has_finish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StageStepHardBlob::clear_has_finish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StageStepHardBlob::clear_finish() {
  finish_ = 0u;
  clear_has_finish();
}
inline ::google::protobuf::uint32 StageStepHardBlob::finish() const {
  // @@protoc_insertion_point(field_get:Cmd.StageStepHardBlob.finish)
  return finish_;
}
inline void StageStepHardBlob::set_finish(::google::protobuf::uint32 value) {
  set_has_finish();
  finish_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageStepHardBlob.finish)
}

// optional uint32 time = 3;
inline bool StageStepHardBlob::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StageStepHardBlob::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StageStepHardBlob::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StageStepHardBlob::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 StageStepHardBlob::time() const {
  // @@protoc_insertion_point(field_get:Cmd.StageStepHardBlob.time)
  return time_;
}
inline void StageStepHardBlob::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageStepHardBlob.time)
}

// -------------------------------------------------------------------

// StageBlobItem

// optional uint32 stageID = 1;
inline bool StageBlobItem::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageBlobItem::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageBlobItem::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageBlobItem::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 StageBlobItem::stageid() const {
  // @@protoc_insertion_point(field_get:Cmd.StageBlobItem.stageID)
  return stageid_;
}
inline void StageBlobItem::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageBlobItem.stageID)
}

// repeated .Cmd.StageStepNormalBlob normalist = 2;
inline int StageBlobItem::normalist_size() const {
  return normalist_.size();
}
inline void StageBlobItem::clear_normalist() {
  normalist_.Clear();
}
inline const ::Cmd::StageStepNormalBlob& StageBlobItem::normalist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.StageBlobItem.normalist)
  return normalist_.Get(index);
}
inline ::Cmd::StageStepNormalBlob* StageBlobItem::mutable_normalist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.StageBlobItem.normalist)
  return normalist_.Mutable(index);
}
inline ::Cmd::StageStepNormalBlob* StageBlobItem::add_normalist() {
  // @@protoc_insertion_point(field_add:Cmd.StageBlobItem.normalist)
  return normalist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepNormalBlob >&
StageBlobItem::normalist() const {
  // @@protoc_insertion_point(field_list:Cmd.StageBlobItem.normalist)
  return normalist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepNormalBlob >*
StageBlobItem::mutable_normalist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.StageBlobItem.normalist)
  return &normalist_;
}

// repeated .Cmd.StageStepHardBlob hardlist = 3;
inline int StageBlobItem::hardlist_size() const {
  return hardlist_.size();
}
inline void StageBlobItem::clear_hardlist() {
  hardlist_.Clear();
}
inline const ::Cmd::StageStepHardBlob& StageBlobItem::hardlist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.StageBlobItem.hardlist)
  return hardlist_.Get(index);
}
inline ::Cmd::StageStepHardBlob* StageBlobItem::mutable_hardlist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.StageBlobItem.hardlist)
  return hardlist_.Mutable(index);
}
inline ::Cmd::StageStepHardBlob* StageBlobItem::add_hardlist() {
  // @@protoc_insertion_point(field_add:Cmd.StageBlobItem.hardlist)
  return hardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepHardBlob >&
StageBlobItem::hardlist() const {
  // @@protoc_insertion_point(field_list:Cmd.StageBlobItem.hardlist)
  return hardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageStepHardBlob >*
StageBlobItem::mutable_hardlist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.StageBlobItem.hardlist)
  return &hardlist_;
}

// repeated uint32 gets = 4;
inline int StageBlobItem::gets_size() const {
  return gets_.size();
}
inline void StageBlobItem::clear_gets() {
  gets_.Clear();
}
inline ::google::protobuf::uint32 StageBlobItem::gets(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.StageBlobItem.gets)
  return gets_.Get(index);
}
inline void StageBlobItem::set_gets(int index, ::google::protobuf::uint32 value) {
  gets_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.StageBlobItem.gets)
}
inline void StageBlobItem::add_gets(::google::protobuf::uint32 value) {
  gets_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.StageBlobItem.gets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StageBlobItem::gets() const {
  // @@protoc_insertion_point(field_list:Cmd.StageBlobItem.gets)
  return gets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StageBlobItem::mutable_gets() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.StageBlobItem.gets)
  return &gets_;
}

// -------------------------------------------------------------------

// BlobStage

// repeated .Cmd.StageBlobItem list = 1;
inline int BlobStage::list_size() const {
  return list_.size();
}
inline void BlobStage::clear_list() {
  list_.Clear();
}
inline const ::Cmd::StageBlobItem& BlobStage::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobStage.list)
  return list_.Get(index);
}
inline ::Cmd::StageBlobItem* BlobStage::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobStage.list)
  return list_.Mutable(index);
}
inline ::Cmd::StageBlobItem* BlobStage::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobStage.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageBlobItem >&
BlobStage::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobStage.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageBlobItem >*
BlobStage::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobStage.list)
  return &list_;
}

// optional uint32 resetTime = 2;
inline bool BlobStage::has_resettime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobStage::set_has_resettime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobStage::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobStage::clear_resettime() {
  resettime_ = 0u;
  clear_has_resettime();
}
inline ::google::protobuf::uint32 BlobStage::resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobStage.resetTime)
  return resettime_;
}
inline void BlobStage::set_resettime(::google::protobuf::uint32 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobStage.resetTime)
}

// -------------------------------------------------------------------

// QuestNpcData

// optional uint32 mapid = 1 [default = 0];
inline bool QuestNpcData::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestNpcData::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestNpcData::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestNpcData::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 QuestNpcData::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestNpcData.mapid)
  return mapid_;
}
inline void QuestNpcData::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestNpcData.mapid)
}

// optional uint32 questid = 2 [default = 0];
inline bool QuestNpcData::has_questid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestNpcData::set_has_questid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestNpcData::clear_has_questid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestNpcData::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 QuestNpcData::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestNpcData.questid)
  return questid_;
}
inline void QuestNpcData::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestNpcData.questid)
}

// optional uint32 groupid = 16 [default = 0];
inline bool QuestNpcData::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestNpcData::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestNpcData::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestNpcData::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 QuestNpcData::groupid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestNpcData.groupid)
  return groupid_;
}
inline void QuestNpcData::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestNpcData.groupid)
}

// optional uint32 acc = 15 [default = 0];
inline bool QuestNpcData::has_acc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestNpcData::set_has_acc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestNpcData::clear_has_acc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestNpcData::clear_acc() {
  acc_ = 0u;
  clear_has_acc();
}
inline ::google::protobuf::uint32 QuestNpcData::acc() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestNpcData.acc)
  return acc_;
}
inline void QuestNpcData::set_acc(::google::protobuf::uint32 value) {
  set_has_acc();
  acc_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestNpcData.acc)
}

// optional uint32 hp = 12 [default = 0];
inline bool QuestNpcData::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestNpcData::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestNpcData::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestNpcData::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 QuestNpcData::hp() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestNpcData.hp)
  return hp_;
}
inline void QuestNpcData::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestNpcData.hp)
}

// optional .Cmd.NpcDefineData data = 14;
inline bool QuestNpcData::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestNpcData::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestNpcData::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestNpcData::clear_data() {
  if (data_ != NULL) data_->::Cmd::NpcDefineData::Clear();
  clear_has_data();
}
inline const ::Cmd::NpcDefineData& QuestNpcData::data() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestNpcData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::NpcDefineData* QuestNpcData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::NpcDefineData;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestNpcData.data)
  return data_;
}
inline ::Cmd::NpcDefineData* QuestNpcData::release_data() {
  clear_has_data();
  ::Cmd::NpcDefineData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void QuestNpcData::set_allocated_data(::Cmd::NpcDefineData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestNpcData.data)
}

// -------------------------------------------------------------------

// BlobQuestNpc

// optional uint32 version = 1 [default = 0];
inline bool BlobQuestNpc::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobQuestNpc::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobQuestNpc::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobQuestNpc::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobQuestNpc::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuestNpc.version)
  return version_;
}
inline void BlobQuestNpc::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobQuestNpc.version)
}

// repeated .Cmd.QuestNpcData list = 2;
inline int BlobQuestNpc::list_size() const {
  return list_.size();
}
inline void BlobQuestNpc::clear_list() {
  list_.Clear();
}
inline const ::Cmd::QuestNpcData& BlobQuestNpc::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuestNpc.list)
  return list_.Get(index);
}
inline ::Cmd::QuestNpcData* BlobQuestNpc::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuestNpc.list)
  return list_.Mutable(index);
}
inline ::Cmd::QuestNpcData* BlobQuestNpc::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobQuestNpc.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestNpcData >&
BlobQuestNpc::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuestNpc.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestNpcData >*
BlobQuestNpc::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuestNpc.list)
  return &list_;
}

// -------------------------------------------------------------------

// BufferStateBlob

// optional uint32 id = 1 [default = 0];
inline bool BufferStateBlob::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BufferStateBlob::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BufferStateBlob::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BufferStateBlob::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BufferStateBlob::id() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.id)
  return id_;
}
inline void BufferStateBlob::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.id)
}

// optional uint64 endtime = 2 [default = 0];
inline bool BufferStateBlob::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BufferStateBlob::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BufferStateBlob::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BufferStateBlob::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 BufferStateBlob::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.endtime)
  return endtime_;
}
inline void BufferStateBlob::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.endtime)
}

// optional uint32 lv = 3 [default = 0];
inline bool BufferStateBlob::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BufferStateBlob::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BufferStateBlob::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BufferStateBlob::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 BufferStateBlob::lv() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.lv)
  return lv_;
}
inline void BufferStateBlob::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.lv)
}

// optional uint64 fromid = 4 [default = 0];
inline bool BufferStateBlob::has_fromid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BufferStateBlob::set_has_fromid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BufferStateBlob::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BufferStateBlob::clear_fromid() {
  fromid_ = GOOGLE_ULONGLONG(0);
  clear_has_fromid();
}
inline ::google::protobuf::uint64 BufferStateBlob::fromid() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.fromid)
  return fromid_;
}
inline void BufferStateBlob::set_fromid(::google::protobuf::uint64 value) {
  set_has_fromid();
  fromid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.fromid)
}

// optional uint32 hponadd = 5 [default = 0];
inline bool BufferStateBlob::has_hponadd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BufferStateBlob::set_has_hponadd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BufferStateBlob::clear_has_hponadd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BufferStateBlob::clear_hponadd() {
  hponadd_ = 0u;
  clear_has_hponadd();
}
inline ::google::protobuf::uint32 BufferStateBlob::hponadd() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.hponadd)
  return hponadd_;
}
inline void BufferStateBlob::set_hponadd(::google::protobuf::uint32 value) {
  set_has_hponadd();
  hponadd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.hponadd)
}

// optional uint32 addtime = 6 [default = 0];
inline bool BufferStateBlob::has_addtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BufferStateBlob::set_has_addtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BufferStateBlob::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BufferStateBlob::clear_addtime() {
  addtime_ = 0u;
  clear_has_addtime();
}
inline ::google::protobuf::uint32 BufferStateBlob::addtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.addtime)
  return addtime_;
}
inline void BufferStateBlob::set_addtime(::google::protobuf::uint32 value) {
  set_has_addtime();
  addtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.addtime)
}

// optional uint32 count = 7 [default = 0];
inline bool BufferStateBlob::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BufferStateBlob::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BufferStateBlob::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BufferStateBlob::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BufferStateBlob::count() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.count)
  return count_;
}
inline void BufferStateBlob::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.count)
}

// optional uint32 commmondata = 8 [default = 0];
inline bool BufferStateBlob::has_commmondata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BufferStateBlob::set_has_commmondata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BufferStateBlob::clear_has_commmondata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BufferStateBlob::clear_commmondata() {
  commmondata_ = 0u;
  clear_has_commmondata();
}
inline ::google::protobuf::uint32 BufferStateBlob::commmondata() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.commmondata)
  return commmondata_;
}
inline void BufferStateBlob::set_commmondata(::google::protobuf::uint32 value) {
  set_has_commmondata();
  commmondata_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.commmondata)
}

// optional bool actflag = 9;
inline bool BufferStateBlob::has_actflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BufferStateBlob::set_has_actflag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BufferStateBlob::clear_has_actflag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BufferStateBlob::clear_actflag() {
  actflag_ = false;
  clear_has_actflag();
}
inline bool BufferStateBlob::actflag() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.actflag)
  return actflag_;
}
inline void BufferStateBlob::set_actflag(bool value) {
  set_has_actflag();
  actflag_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.actflag)
}

// optional uint32 layers = 10 [default = 0];
inline bool BufferStateBlob::has_layers() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BufferStateBlob::set_has_layers() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BufferStateBlob::clear_has_layers() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BufferStateBlob::clear_layers() {
  layers_ = 0u;
  clear_has_layers();
}
inline ::google::protobuf::uint32 BufferStateBlob::layers() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.layers)
  return layers_;
}
inline void BufferStateBlob::set_layers(::google::protobuf::uint32 value) {
  set_has_layers();
  layers_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.layers)
}

// optional uint32 totaldamage = 11 [default = 0];
inline bool BufferStateBlob::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BufferStateBlob::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BufferStateBlob::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BufferStateBlob::clear_totaldamage() {
  totaldamage_ = 0u;
  clear_has_totaldamage();
}
inline ::google::protobuf::uint32 BufferStateBlob::totaldamage() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.totaldamage)
  return totaldamage_;
}
inline void BufferStateBlob::set_totaldamage(::google::protobuf::uint32 value) {
  set_has_totaldamage();
  totaldamage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.totaldamage)
}

// optional uint32 attackcount = 12 [default = 0];
inline bool BufferStateBlob::has_attackcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BufferStateBlob::set_has_attackcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BufferStateBlob::clear_has_attackcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BufferStateBlob::clear_attackcount() {
  attackcount_ = 0u;
  clear_has_attackcount();
}
inline ::google::protobuf::uint32 BufferStateBlob::attackcount() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.attackcount)
  return attackcount_;
}
inline void BufferStateBlob::set_attackcount(::google::protobuf::uint32 value) {
  set_has_attackcount();
  attackcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.attackcount)
}

// optional uint32 beatkcount = 13 [default = 0];
inline bool BufferStateBlob::has_beatkcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BufferStateBlob::set_has_beatkcount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BufferStateBlob::clear_has_beatkcount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BufferStateBlob::clear_beatkcount() {
  beatkcount_ = 0u;
  clear_has_beatkcount();
}
inline ::google::protobuf::uint32 BufferStateBlob::beatkcount() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.beatkcount)
  return beatkcount_;
}
inline void BufferStateBlob::set_beatkcount(::google::protobuf::uint32 value) {
  set_has_beatkcount();
  beatkcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.beatkcount)
}

// repeated .Cmd.UserAttrSvr attrs = 14;
inline int BufferStateBlob::attrs_size() const {
  return attrs_.size();
}
inline void BufferStateBlob::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttrSvr& BufferStateBlob::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttrSvr* BufferStateBlob::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BufferStateBlob.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttrSvr* BufferStateBlob::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.BufferStateBlob.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >&
BufferStateBlob::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.BufferStateBlob.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >*
BufferStateBlob::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BufferStateBlob.attrs)
  return &attrs_;
}

// repeated uint32 vecdata = 15;
inline int BufferStateBlob::vecdata_size() const {
  return vecdata_.size();
}
inline void BufferStateBlob::clear_vecdata() {
  vecdata_.Clear();
}
inline ::google::protobuf::uint32 BufferStateBlob::vecdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.vecdata)
  return vecdata_.Get(index);
}
inline void BufferStateBlob::set_vecdata(int index, ::google::protobuf::uint32 value) {
  vecdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.vecdata)
}
inline void BufferStateBlob::add_vecdata(::google::protobuf::uint32 value) {
  vecdata_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BufferStateBlob.vecdata)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BufferStateBlob::vecdata() const {
  // @@protoc_insertion_point(field_list:Cmd.BufferStateBlob.vecdata)
  return vecdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BufferStateBlob::mutable_vecdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BufferStateBlob.vecdata)
  return &vecdata_;
}

// optional string fromname = 16;
inline bool BufferStateBlob::has_fromname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BufferStateBlob::set_has_fromname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BufferStateBlob::clear_has_fromname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BufferStateBlob::clear_fromname() {
  if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_->clear();
  }
  clear_has_fromname();
}
inline const ::std::string& BufferStateBlob::fromname() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.fromname)
  return *fromname_;
}
inline void BufferStateBlob::set_fromname(const ::std::string& value) {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  fromname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.fromname)
}
inline void BufferStateBlob::set_fromname(const char* value) {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  fromname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BufferStateBlob.fromname)
}
inline void BufferStateBlob::set_fromname(const char* value, size_t size) {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  fromname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BufferStateBlob.fromname)
}
inline ::std::string* BufferStateBlob::mutable_fromname() {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BufferStateBlob.fromname)
  return fromname_;
}
inline ::std::string* BufferStateBlob::release_fromname() {
  clear_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromname_;
    fromname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BufferStateBlob::set_allocated_fromname(::std::string* fromname) {
  if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromname_;
  }
  if (fromname) {
    set_has_fromname();
    fromname_ = fromname;
  } else {
    clear_has_fromname();
    fromname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BufferStateBlob.fromname)
}

// optional uint64 sparetime = 17 [default = 0];
inline bool BufferStateBlob::has_sparetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BufferStateBlob::set_has_sparetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BufferStateBlob::clear_has_sparetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BufferStateBlob::clear_sparetime() {
  sparetime_ = GOOGLE_ULONGLONG(0);
  clear_has_sparetime();
}
inline ::google::protobuf::uint64 BufferStateBlob::sparetime() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.sparetime)
  return sparetime_;
}
inline void BufferStateBlob::set_sparetime(::google::protobuf::uint64 value) {
  set_has_sparetime();
  sparetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.sparetime)
}

// repeated uint64 setendtime = 18;
inline int BufferStateBlob::setendtime_size() const {
  return setendtime_.size();
}
inline void BufferStateBlob::clear_setendtime() {
  setendtime_.Clear();
}
inline ::google::protobuf::uint64 BufferStateBlob::setendtime(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.setendtime)
  return setendtime_.Get(index);
}
inline void BufferStateBlob::set_setendtime(int index, ::google::protobuf::uint64 value) {
  setendtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.setendtime)
}
inline void BufferStateBlob::add_setendtime(::google::protobuf::uint64 value) {
  setendtime_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BufferStateBlob.setendtime)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BufferStateBlob::setendtime() const {
  // @@protoc_insertion_point(field_list:Cmd.BufferStateBlob.setendtime)
  return setendtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BufferStateBlob::mutable_setendtime() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BufferStateBlob.setendtime)
  return &setendtime_;
}

// optional uint64 timetick = 19 [default = 0];
inline bool BufferStateBlob::has_timetick() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BufferStateBlob::set_has_timetick() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BufferStateBlob::clear_has_timetick() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BufferStateBlob::clear_timetick() {
  timetick_ = GOOGLE_ULONGLONG(0);
  clear_has_timetick();
}
inline ::google::protobuf::uint64 BufferStateBlob::timetick() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferStateBlob.timetick)
  return timetick_;
}
inline void BufferStateBlob::set_timetick(::google::protobuf::uint64 value) {
  set_has_timetick();
  timetick_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferStateBlob.timetick)
}

// -------------------------------------------------------------------

// BlobBuffer

// optional uint32 version = 1 [default = 0];
inline bool BlobBuffer::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobBuffer::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobBuffer::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobBuffer::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobBuffer::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobBuffer.version)
  return version_;
}
inline void BlobBuffer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobBuffer.version)
}

// repeated .Cmd.BufferStateBlob list = 2;
inline int BlobBuffer::list_size() const {
  return list_.size();
}
inline void BlobBuffer::clear_list() {
  list_.Clear();
}
inline const ::Cmd::BufferStateBlob& BlobBuffer::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobBuffer.list)
  return list_.Get(index);
}
inline ::Cmd::BufferStateBlob* BlobBuffer::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobBuffer.list)
  return list_.Mutable(index);
}
inline ::Cmd::BufferStateBlob* BlobBuffer::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobBuffer.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferStateBlob >&
BlobBuffer::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobBuffer.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferStateBlob >*
BlobBuffer::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobBuffer.list)
  return &list_;
}

// -------------------------------------------------------------------

// BlobPortrait

// optional uint32 curportrait = 1 [default = 0];
inline bool BlobPortrait::has_curportrait() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobPortrait::set_has_curportrait() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobPortrait::clear_has_curportrait() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobPortrait::clear_curportrait() {
  curportrait_ = 0u;
  clear_has_curportrait();
}
inline ::google::protobuf::uint32 BlobPortrait::curportrait() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPortrait.curportrait)
  return curportrait_;
}
inline void BlobPortrait::set_curportrait(::google::protobuf::uint32 value) {
  set_has_curportrait();
  curportrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPortrait.curportrait)
}

// optional uint32 curframe = 2 [default = 0];
inline bool BlobPortrait::has_curframe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobPortrait::set_has_curframe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobPortrait::clear_has_curframe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobPortrait::clear_curframe() {
  curframe_ = 0u;
  clear_has_curframe();
}
inline ::google::protobuf::uint32 BlobPortrait::curframe() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPortrait.curframe)
  return curframe_;
}
inline void BlobPortrait::set_curframe(::google::protobuf::uint32 value) {
  set_has_curframe();
  curframe_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPortrait.curframe)
}

// repeated uint32 unlockportrait = 3;
inline int BlobPortrait::unlockportrait_size() const {
  return unlockportrait_.size();
}
inline void BlobPortrait::clear_unlockportrait() {
  unlockportrait_.Clear();
}
inline ::google::protobuf::uint32 BlobPortrait::unlockportrait(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPortrait.unlockportrait)
  return unlockportrait_.Get(index);
}
inline void BlobPortrait::set_unlockportrait(int index, ::google::protobuf::uint32 value) {
  unlockportrait_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobPortrait.unlockportrait)
}
inline void BlobPortrait::add_unlockportrait(::google::protobuf::uint32 value) {
  unlockportrait_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobPortrait.unlockportrait)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobPortrait::unlockportrait() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPortrait.unlockportrait)
  return unlockportrait_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobPortrait::mutable_unlockportrait() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPortrait.unlockportrait)
  return &unlockportrait_;
}

// repeated uint32 unlockframe = 4;
inline int BlobPortrait::unlockframe_size() const {
  return unlockframe_.size();
}
inline void BlobPortrait::clear_unlockframe() {
  unlockframe_.Clear();
}
inline ::google::protobuf::uint32 BlobPortrait::unlockframe(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPortrait.unlockframe)
  return unlockframe_.Get(index);
}
inline void BlobPortrait::set_unlockframe(int index, ::google::protobuf::uint32 value) {
  unlockframe_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobPortrait.unlockframe)
}
inline void BlobPortrait::add_unlockframe(::google::protobuf::uint32 value) {
  unlockframe_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobPortrait.unlockframe)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobPortrait::unlockframe() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPortrait.unlockframe)
  return unlockframe_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobPortrait::mutable_unlockframe() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPortrait.unlockframe)
  return &unlockframe_;
}

// -------------------------------------------------------------------

// BlobHair

// optional uint32 curhair = 1 [default = 0];
inline bool BlobHair::has_curhair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobHair::set_has_curhair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobHair::clear_has_curhair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobHair::clear_curhair() {
  curhair_ = 0u;
  clear_has_curhair();
}
inline ::google::protobuf::uint32 BlobHair::curhair() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHair.curhair)
  return curhair_;
}
inline void BlobHair::set_curhair(::google::protobuf::uint32 value) {
  set_has_curhair();
  curhair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHair.curhair)
}

// optional uint32 curcolor = 2 [default = 0];
inline bool BlobHair::has_curcolor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobHair::set_has_curcolor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobHair::clear_has_curcolor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobHair::clear_curcolor() {
  curcolor_ = 0u;
  clear_has_curcolor();
}
inline ::google::protobuf::uint32 BlobHair::curcolor() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHair.curcolor)
  return curcolor_;
}
inline void BlobHair::set_curcolor(::google::protobuf::uint32 value) {
  set_has_curcolor();
  curcolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHair.curcolor)
}

// repeated uint32 unlockhair = 3;
inline int BlobHair::unlockhair_size() const {
  return unlockhair_.size();
}
inline void BlobHair::clear_unlockhair() {
  unlockhair_.Clear();
}
inline ::google::protobuf::uint32 BlobHair::unlockhair(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHair.unlockhair)
  return unlockhair_.Get(index);
}
inline void BlobHair::set_unlockhair(int index, ::google::protobuf::uint32 value) {
  unlockhair_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobHair.unlockhair)
}
inline void BlobHair::add_unlockhair(::google::protobuf::uint32 value) {
  unlockhair_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobHair.unlockhair)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobHair::unlockhair() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobHair.unlockhair)
  return unlockhair_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobHair::mutable_unlockhair() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobHair.unlockhair)
  return &unlockhair_;
}

// -------------------------------------------------------------------

// BlobGearItem

// optional uint32 gearid = 1;
inline bool BlobGearItem::has_gearid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobGearItem::set_has_gearid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobGearItem::clear_has_gearid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobGearItem::clear_gearid() {
  gearid_ = 0u;
  clear_has_gearid();
}
inline ::google::protobuf::uint32 BlobGearItem::gearid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGearItem.gearid)
  return gearid_;
}
inline void BlobGearItem::set_gearid(::google::protobuf::uint32 value) {
  set_has_gearid();
  gearid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGearItem.gearid)
}

// optional uint32 state = 2;
inline bool BlobGearItem::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobGearItem::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobGearItem::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobGearItem::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 BlobGearItem::state() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGearItem.state)
  return state_;
}
inline void BlobGearItem::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGearItem.state)
}

// optional uint32 sceneid = 3;
inline bool BlobGearItem::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobGearItem::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobGearItem::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobGearItem::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 BlobGearItem::sceneid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGearItem.sceneid)
  return sceneid_;
}
inline void BlobGearItem::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGearItem.sceneid)
}

// -------------------------------------------------------------------

// BlobGears

// optional uint32 version = 1;
inline bool BlobGears::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobGears::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobGears::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobGears::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobGears::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGears.version)
  return version_;
}
inline void BlobGears::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGears.version)
}

// repeated .Cmd.BlobGearItem list = 2;
inline int BlobGears::list_size() const {
  return list_.size();
}
inline void BlobGears::clear_list() {
  list_.Clear();
}
inline const ::Cmd::BlobGearItem& BlobGears::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGears.list)
  return list_.Get(index);
}
inline ::Cmd::BlobGearItem* BlobGears::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGears.list)
  return list_.Mutable(index);
}
inline ::Cmd::BlobGearItem* BlobGears::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobGears.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >&
BlobGears::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGears.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >*
BlobGears::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGears.list)
  return &list_;
}

// repeated .Cmd.BlobGearItem exitlist = 3;
inline int BlobGears::exitlist_size() const {
  return exitlist_.size();
}
inline void BlobGears::clear_exitlist() {
  exitlist_.Clear();
}
inline const ::Cmd::BlobGearItem& BlobGears::exitlist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGears.exitlist)
  return exitlist_.Get(index);
}
inline ::Cmd::BlobGearItem* BlobGears::mutable_exitlist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGears.exitlist)
  return exitlist_.Mutable(index);
}
inline ::Cmd::BlobGearItem* BlobGears::add_exitlist() {
  // @@protoc_insertion_point(field_add:Cmd.BlobGears.exitlist)
  return exitlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >&
BlobGears::exitlist() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGears.exitlist)
  return exitlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGearItem >*
BlobGears::mutable_exitlist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGears.exitlist)
  return &exitlist_;
}

// -------------------------------------------------------------------

// BlobTipItem

// optional .Cmd.ERedSys red = 1 [default = EREDSYS_MIN];
inline bool BlobTipItem::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobTipItem::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobTipItem::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobTipItem::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline ::Cmd::ERedSys BlobTipItem::red() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTipItem.red)
  return static_cast< ::Cmd::ERedSys >(red_);
}
inline void BlobTipItem::set_red(::Cmd::ERedSys value) {
  assert(::Cmd::ERedSys_IsValid(value));
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTipItem.red)
}

// repeated uint32 tipid = 2;
inline int BlobTipItem::tipid_size() const {
  return tipid_.size();
}
inline void BlobTipItem::clear_tipid() {
  tipid_.Clear();
}
inline ::google::protobuf::uint32 BlobTipItem::tipid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTipItem.tipid)
  return tipid_.Get(index);
}
inline void BlobTipItem::set_tipid(int index, ::google::protobuf::uint32 value) {
  tipid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobTipItem.tipid)
}
inline void BlobTipItem::add_tipid(::google::protobuf::uint32 value) {
  tipid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobTipItem.tipid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobTipItem::tipid() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTipItem.tipid)
  return tipid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobTipItem::mutable_tipid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTipItem.tipid)
  return &tipid_;
}

// -------------------------------------------------------------------

// BlobTips

// optional uint32 version = 1;
inline bool BlobTips::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobTips::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobTips::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobTips::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobTips::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTips.version)
  return version_;
}
inline void BlobTips::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTips.version)
}

// repeated .Cmd.BlobTipItem list = 2;
inline int BlobTips::list_size() const {
  return list_.size();
}
inline void BlobTips::clear_list() {
  list_.Clear();
}
inline const ::Cmd::BlobTipItem& BlobTips::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTips.list)
  return list_.Get(index);
}
inline ::Cmd::BlobTipItem* BlobTips::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTips.list)
  return list_.Mutable(index);
}
inline ::Cmd::BlobTipItem* BlobTips::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobTips.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTipItem >&
BlobTips::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTips.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTipItem >*
BlobTips::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTips.list)
  return &list_;
}

// -------------------------------------------------------------------

// FollowerItem

// optional uint32 id = 1 [default = 0];
inline bool FollowerItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FollowerItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FollowerItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FollowerItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FollowerItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerItem.id)
  return id_;
}
inline void FollowerItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerItem.id)
}

// optional float spdRatio = 2 [default = 0];
inline bool FollowerItem::has_spdratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FollowerItem::set_has_spdratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FollowerItem::clear_has_spdratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FollowerItem::clear_spdratio() {
  spdratio_ = 0;
  clear_has_spdratio();
}
inline float FollowerItem::spdratio() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerItem.spdRatio)
  return spdratio_;
}
inline void FollowerItem::set_spdratio(float value) {
  set_has_spdratio();
  spdratio_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerItem.spdRatio)
}

// optional uint32 behaviours = 3 [default = 0];
inline bool FollowerItem::has_behaviours() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FollowerItem::set_has_behaviours() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FollowerItem::clear_has_behaviours() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FollowerItem::clear_behaviours() {
  behaviours_ = 0u;
  clear_has_behaviours();
}
inline ::google::protobuf::uint32 FollowerItem::behaviours() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerItem.behaviours)
  return behaviours_;
}
inline void FollowerItem::set_behaviours(::google::protobuf::uint32 value) {
  set_has_behaviours();
  behaviours_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerItem.behaviours)
}

// optional uint32 questid = 4 [default = 0];
inline bool FollowerItem::has_questid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FollowerItem::set_has_questid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FollowerItem::clear_has_questid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FollowerItem::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 FollowerItem::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerItem.questid)
  return questid_;
}
inline void FollowerItem::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerItem.questid)
}

// optional uint32 cleartime = 5 [default = 0];
inline bool FollowerItem::has_cleartime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FollowerItem::set_has_cleartime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FollowerItem::clear_has_cleartime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FollowerItem::clear_cleartime() {
  cleartime_ = 0u;
  clear_has_cleartime();
}
inline ::google::protobuf::uint32 FollowerItem::cleartime() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerItem.cleartime)
  return cleartime_;
}
inline void FollowerItem::set_cleartime(::google::protobuf::uint32 value) {
  set_has_cleartime();
  cleartime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerItem.cleartime)
}

// -------------------------------------------------------------------

// BlobFollower

// optional uint32 version = 1;
inline bool BlobFollower::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobFollower::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobFollower::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobFollower::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobFollower::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFollower.version)
  return version_;
}
inline void BlobFollower::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFollower.version)
}

// repeated .Cmd.FollowerItem list = 2;
inline int BlobFollower::list_size() const {
  return list_.size();
}
inline void BlobFollower::clear_list() {
  list_.Clear();
}
inline const ::Cmd::FollowerItem& BlobFollower::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFollower.list)
  return list_.Get(index);
}
inline ::Cmd::FollowerItem* BlobFollower::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobFollower.list)
  return list_.Mutable(index);
}
inline ::Cmd::FollowerItem* BlobFollower::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobFollower.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FollowerItem >&
BlobFollower::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFollower.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FollowerItem >*
BlobFollower::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFollower.list)
  return &list_;
}

// -------------------------------------------------------------------

// BlobCDTime

// optional uint32 version = 1;
inline bool BlobCDTime::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobCDTime::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobCDTime::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobCDTime::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobCDTime::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCDTime.version)
  return version_;
}
inline void BlobCDTime::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCDTime.version)
}

// repeated .Cmd.CDTimeItem list = 2;
inline int BlobCDTime::list_size() const {
  return list_.size();
}
inline void BlobCDTime::clear_list() {
  list_.Clear();
}
inline const ::Cmd::CDTimeItem& BlobCDTime::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCDTime.list)
  return list_.Get(index);
}
inline ::Cmd::CDTimeItem* BlobCDTime::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobCDTime.list)
  return list_.Mutable(index);
}
inline ::Cmd::CDTimeItem* BlobCDTime::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobCDTime.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >&
BlobCDTime::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobCDTime.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >*
BlobCDTime::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobCDTime.list)
  return &list_;
}

// -------------------------------------------------------------------

// BlobShortcut

// repeated .Cmd.ShortcutItem cut = 1;
inline int BlobShortcut::cut_size() const {
  return cut_.size();
}
inline void BlobShortcut::clear_cut() {
  cut_.Clear();
}
inline const ::Cmd::ShortcutItem& BlobShortcut::cut(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShortcut.cut)
  return cut_.Get(index);
}
inline ::Cmd::ShortcutItem* BlobShortcut::mutable_cut(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShortcut.cut)
  return cut_.Mutable(index);
}
inline ::Cmd::ShortcutItem* BlobShortcut::add_cut() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShortcut.cut)
  return cut_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >&
BlobShortcut::cut() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShortcut.cut)
  return cut_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >*
BlobShortcut::mutable_cut() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShortcut.cut)
  return &cut_;
}

// repeated uint32 firstauto = 2;
inline int BlobShortcut::firstauto_size() const {
  return firstauto_.size();
}
inline void BlobShortcut::clear_firstauto() {
  firstauto_.Clear();
}
inline ::google::protobuf::uint32 BlobShortcut::firstauto(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShortcut.firstauto)
  return firstauto_.Get(index);
}
inline void BlobShortcut::set_firstauto(int index, ::google::protobuf::uint32 value) {
  firstauto_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobShortcut.firstauto)
}
inline void BlobShortcut::add_firstauto(::google::protobuf::uint32 value) {
  firstauto_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobShortcut.firstauto)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobShortcut::firstauto() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShortcut.firstauto)
  return firstauto_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobShortcut::mutable_firstauto() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShortcut.firstauto)
  return &firstauto_;
}

// optional uint32 version = 3 [default = 0];
inline bool BlobShortcut::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobShortcut::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobShortcut::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobShortcut::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobShortcut::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShortcut.version)
  return version_;
}
inline void BlobShortcut::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobShortcut.version)
}

// -------------------------------------------------------------------

// BlobGMEffectItem

// optional uint32 mapid = 1 [default = 0];
inline bool BlobGMEffectItem::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobGMEffectItem::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobGMEffectItem::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobGMEffectItem::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 BlobGMEffectItem::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGMEffectItem.mapid)
  return mapid_;
}
inline void BlobGMEffectItem::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGMEffectItem.mapid)
}

// optional uint32 index = 2 [default = 0];
inline bool BlobGMEffectItem::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobGMEffectItem::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobGMEffectItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobGMEffectItem::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 BlobGMEffectItem::index() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGMEffectItem.index)
  return index_;
}
inline void BlobGMEffectItem::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGMEffectItem.index)
}

// optional string gmcommand = 3;
inline bool BlobGMEffectItem::has_gmcommand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobGMEffectItem::set_has_gmcommand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobGMEffectItem::clear_has_gmcommand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobGMEffectItem::clear_gmcommand() {
  if (gmcommand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcommand_->clear();
  }
  clear_has_gmcommand();
}
inline const ::std::string& BlobGMEffectItem::gmcommand() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGMEffectItem.gmcommand)
  return *gmcommand_;
}
inline void BlobGMEffectItem::set_gmcommand(const ::std::string& value) {
  set_has_gmcommand();
  if (gmcommand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcommand_ = new ::std::string;
  }
  gmcommand_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobGMEffectItem.gmcommand)
}
inline void BlobGMEffectItem::set_gmcommand(const char* value) {
  set_has_gmcommand();
  if (gmcommand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcommand_ = new ::std::string;
  }
  gmcommand_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobGMEffectItem.gmcommand)
}
inline void BlobGMEffectItem::set_gmcommand(const char* value, size_t size) {
  set_has_gmcommand();
  if (gmcommand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcommand_ = new ::std::string;
  }
  gmcommand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobGMEffectItem.gmcommand)
}
inline ::std::string* BlobGMEffectItem::mutable_gmcommand() {
  set_has_gmcommand();
  if (gmcommand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcommand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGMEffectItem.gmcommand)
  return gmcommand_;
}
inline ::std::string* BlobGMEffectItem::release_gmcommand() {
  clear_has_gmcommand();
  if (gmcommand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gmcommand_;
    gmcommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobGMEffectItem::set_allocated_gmcommand(::std::string* gmcommand) {
  if (gmcommand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmcommand_;
  }
  if (gmcommand) {
    set_has_gmcommand();
    gmcommand_ = gmcommand;
  } else {
    clear_has_gmcommand();
    gmcommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobGMEffectItem.gmcommand)
}

// -------------------------------------------------------------------

// BlobGMEffects

// optional uint32 version = 1 [default = 0];
inline bool BlobGMEffects::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobGMEffects::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobGMEffects::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobGMEffects::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobGMEffects::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGMEffects.version)
  return version_;
}
inline void BlobGMEffects::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGMEffects.version)
}

// repeated .Cmd.BlobGMEffectItem list = 2;
inline int BlobGMEffects::list_size() const {
  return list_.size();
}
inline void BlobGMEffects::clear_list() {
  list_.Clear();
}
inline const ::Cmd::BlobGMEffectItem& BlobGMEffects::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGMEffects.list)
  return list_.Get(index);
}
inline ::Cmd::BlobGMEffectItem* BlobGMEffects::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGMEffects.list)
  return list_.Mutable(index);
}
inline ::Cmd::BlobGMEffectItem* BlobGMEffects::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobGMEffects.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGMEffectItem >&
BlobGMEffects::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGMEffects.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobGMEffectItem >*
BlobGMEffects::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGMEffects.list)
  return &list_;
}

// -------------------------------------------------------------------

// BlobFreyja

// optional uint32 version = 1 [default = 0];
inline bool BlobFreyja::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobFreyja::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobFreyja::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobFreyja::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobFreyja::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFreyja.version)
  return version_;
}
inline void BlobFreyja::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFreyja.version)
}

// repeated uint32 mapid = 2;
inline int BlobFreyja::mapid_size() const {
  return mapid_.size();
}
inline void BlobFreyja::clear_mapid() {
  mapid_.Clear();
}
inline ::google::protobuf::uint32 BlobFreyja::mapid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFreyja.mapid)
  return mapid_.Get(index);
}
inline void BlobFreyja::set_mapid(int index, ::google::protobuf::uint32 value) {
  mapid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobFreyja.mapid)
}
inline void BlobFreyja::add_mapid(::google::protobuf::uint32 value) {
  mapid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobFreyja.mapid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobFreyja::mapid() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFreyja.mapid)
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobFreyja::mutable_mapid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFreyja.mapid)
  return &mapid_;
}

// -------------------------------------------------------------------

// BlobTransfer

// repeated uint32 npcid = 1;
inline int BlobTransfer::npcid_size() const {
  return npcid_.size();
}
inline void BlobTransfer::clear_npcid() {
  npcid_.Clear();
}
inline ::google::protobuf::uint32 BlobTransfer::npcid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTransfer.npcid)
  return npcid_.Get(index);
}
inline void BlobTransfer::set_npcid(int index, ::google::protobuf::uint32 value) {
  npcid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobTransfer.npcid)
}
inline void BlobTransfer::add_npcid(::google::protobuf::uint32 value) {
  npcid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobTransfer.npcid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobTransfer::npcid() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTransfer.npcid)
  return npcid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobTransfer::mutable_npcid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTransfer.npcid)
  return &npcid_;
}

// optional bool map1AllActivated = 2 [default = false];
inline bool BlobTransfer::has_map1allactivated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobTransfer::set_has_map1allactivated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobTransfer::clear_has_map1allactivated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobTransfer::clear_map1allactivated() {
  map1allactivated_ = false;
  clear_has_map1allactivated();
}
inline bool BlobTransfer::map1allactivated() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTransfer.map1AllActivated)
  return map1allactivated_;
}
inline void BlobTransfer::set_map1allactivated(bool value) {
  set_has_map1allactivated();
  map1allactivated_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTransfer.map1AllActivated)
}

// optional bool map2AllActivated = 3 [default = false];
inline bool BlobTransfer::has_map2allactivated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobTransfer::set_has_map2allactivated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobTransfer::clear_has_map2allactivated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobTransfer::clear_map2allactivated() {
  map2allactivated_ = false;
  clear_has_map2allactivated();
}
inline bool BlobTransfer::map2allactivated() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTransfer.map2AllActivated)
  return map2allactivated_;
}
inline void BlobTransfer::set_map2allactivated(bool value) {
  set_has_map2allactivated();
  map2allactivated_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTransfer.map2AllActivated)
}

// -------------------------------------------------------------------

// BlobLaboratory

// optional uint32 version = 1 [default = 0];
inline bool BlobLaboratory::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobLaboratory::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobLaboratory::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobLaboratory::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobLaboratory::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLaboratory.version)
  return version_;
}
inline void BlobLaboratory::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobLaboratory.version)
}

// optional uint32 point = 2 [default = 0];
inline bool BlobLaboratory::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobLaboratory::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobLaboratory::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobLaboratory::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 BlobLaboratory::point() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLaboratory.point)
  return point_;
}
inline void BlobLaboratory::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobLaboratory.point)
}

// optional uint32 days = 3 [default = 0];
inline bool BlobLaboratory::has_days() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobLaboratory::set_has_days() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobLaboratory::clear_has_days() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobLaboratory::clear_days() {
  days_ = 0u;
  clear_has_days();
}
inline ::google::protobuf::uint32 BlobLaboratory::days() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLaboratory.days)
  return days_;
}
inline void BlobLaboratory::set_days(::google::protobuf::uint32 value) {
  set_has_days();
  days_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobLaboratory.days)
}

// -------------------------------------------------------------------

// SceneryItem

// optional uint32 sceneryid = 1 [default = 0];
inline bool SceneryItem::has_sceneryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneryItem::set_has_sceneryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneryItem::clear_has_sceneryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneryItem::clear_sceneryid() {
  sceneryid_ = 0u;
  clear_has_sceneryid();
}
inline ::google::protobuf::uint32 SceneryItem::sceneryid() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryItem.sceneryid)
  return sceneryid_;
}
inline void SceneryItem::set_sceneryid(::google::protobuf::uint32 value) {
  set_has_sceneryid();
  sceneryid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryItem.sceneryid)
}

// optional uint32 visited = 2 [default = 0];
inline bool SceneryItem::has_visited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneryItem::set_has_visited() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneryItem::clear_has_visited() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneryItem::clear_visited() {
  visited_ = 0u;
  clear_has_visited();
}
inline ::google::protobuf::uint32 SceneryItem::visited() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryItem.visited)
  return visited_;
}
inline void SceneryItem::set_visited(::google::protobuf::uint32 value) {
  set_has_visited();
  visited_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryItem.visited)
}

// optional uint32 upload = 3 [default = 0];
inline bool SceneryItem::has_upload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneryItem::set_has_upload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneryItem::clear_has_upload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneryItem::clear_upload() {
  upload_ = 0u;
  clear_has_upload();
}
inline ::google::protobuf::uint32 SceneryItem::upload() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryItem.upload)
  return upload_;
}
inline void SceneryItem::set_upload(::google::protobuf::uint32 value) {
  set_has_upload();
  upload_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryItem.upload)
}

// optional uint32 anglez = 4 [default = 0];
inline bool SceneryItem::has_anglez() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneryItem::set_has_anglez() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneryItem::clear_has_anglez() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneryItem::clear_anglez() {
  anglez_ = 0u;
  clear_has_anglez();
}
inline ::google::protobuf::uint32 SceneryItem::anglez() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryItem.anglez)
  return anglez_;
}
inline void SceneryItem::set_anglez(::google::protobuf::uint32 value) {
  set_has_anglez();
  anglez_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryItem.anglez)
}

// optional uint32 time = 5 [default = 0];
inline bool SceneryItem::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneryItem::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneryItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneryItem::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 SceneryItem::time() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryItem.time)
  return time_;
}
inline void SceneryItem::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryItem.time)
}

// -------------------------------------------------------------------

// SceneryMapItem

// optional uint32 mapid = 1 [default = 0];
inline bool SceneryMapItem::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneryMapItem::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneryMapItem::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneryMapItem::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 SceneryMapItem::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryMapItem.mapid)
  return mapid_;
}
inline void SceneryMapItem::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryMapItem.mapid)
}

// repeated .Cmd.SceneryItem scenerys = 2;
inline int SceneryMapItem::scenerys_size() const {
  return scenerys_.size();
}
inline void SceneryMapItem::clear_scenerys() {
  scenerys_.Clear();
}
inline const ::Cmd::SceneryItem& SceneryMapItem::scenerys(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryMapItem.scenerys)
  return scenerys_.Get(index);
}
inline ::Cmd::SceneryItem* SceneryMapItem::mutable_scenerys(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SceneryMapItem.scenerys)
  return scenerys_.Mutable(index);
}
inline ::Cmd::SceneryItem* SceneryMapItem::add_scenerys() {
  // @@protoc_insertion_point(field_add:Cmd.SceneryMapItem.scenerys)
  return scenerys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >&
SceneryMapItem::scenerys() const {
  // @@protoc_insertion_point(field_list:Cmd.SceneryMapItem.scenerys)
  return scenerys_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >*
SceneryMapItem::mutable_scenerys() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SceneryMapItem.scenerys)
  return &scenerys_;
}

// -------------------------------------------------------------------

// BlobScenery

// optional uint32 version = 1 [default = 0];
inline bool BlobScenery::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobScenery::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobScenery::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobScenery::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobScenery::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobScenery.version)
  return version_;
}
inline void BlobScenery::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobScenery.version)
}

// repeated .Cmd.SceneryMapItem list = 2;
inline int BlobScenery::list_size() const {
  return list_.size();
}
inline void BlobScenery::clear_list() {
  list_.Clear();
}
inline const ::Cmd::SceneryMapItem& BlobScenery::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobScenery.list)
  return list_.Get(index);
}
inline ::Cmd::SceneryMapItem* BlobScenery::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobScenery.list)
  return list_.Mutable(index);
}
inline ::Cmd::SceneryMapItem* BlobScenery::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobScenery.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryMapItem >&
BlobScenery::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobScenery.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryMapItem >*
BlobScenery::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobScenery.list)
  return &list_;
}

// repeated .Cmd.SceneryItem items = 3;
inline int BlobScenery::items_size() const {
  return items_.size();
}
inline void BlobScenery::clear_items() {
  items_.Clear();
}
inline const ::Cmd::SceneryItem& BlobScenery::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobScenery.items)
  return items_.Get(index);
}
inline ::Cmd::SceneryItem* BlobScenery::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobScenery.items)
  return items_.Mutable(index);
}
inline ::Cmd::SceneryItem* BlobScenery::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobScenery.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >&
BlobScenery::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobScenery.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SceneryItem >*
BlobScenery::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobScenery.items)
  return &items_;
}

// -------------------------------------------------------------------

// BlobCarrier

// optional uint32 version = 1 [default = 0];
inline bool BlobCarrier::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobCarrier::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobCarrier::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobCarrier::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobCarrier::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCarrier.version)
  return version_;
}
inline void BlobCarrier::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCarrier.version)
}

// optional uint32 assemble = 2 [default = 0];
inline bool BlobCarrier::has_assemble() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobCarrier::set_has_assemble() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobCarrier::clear_has_assemble() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobCarrier::clear_assemble() {
  assemble_ = 0u;
  clear_has_assemble();
}
inline ::google::protobuf::uint32 BlobCarrier::assemble() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCarrier.assemble)
  return assemble_;
}
inline void BlobCarrier::set_assemble(::google::protobuf::uint32 value) {
  set_has_assemble();
  assemble_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCarrier.assemble)
}

// optional uint64 joinmaster = 3 [default = 0];
inline bool BlobCarrier::has_joinmaster() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobCarrier::set_has_joinmaster() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobCarrier::clear_has_joinmaster() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobCarrier::clear_joinmaster() {
  joinmaster_ = GOOGLE_ULONGLONG(0);
  clear_has_joinmaster();
}
inline ::google::protobuf::uint64 BlobCarrier::joinmaster() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCarrier.joinmaster)
  return joinmaster_;
}
inline void BlobCarrier::set_joinmaster(::google::protobuf::uint64 value) {
  set_has_joinmaster();
  joinmaster_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCarrier.joinmaster)
}

// -------------------------------------------------------------------

// BlobMenu

// optional uint32 version = 1 [default = 0];
inline bool BlobMenu::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobMenu::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobMenu::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobMenu::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobMenu::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobMenu.version)
  return version_;
}
inline void BlobMenu::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobMenu.version)
}

// repeated uint32 list = 2;
inline int BlobMenu::list_size() const {
  return list_.size();
}
inline void BlobMenu::clear_list() {
  list_.Clear();
}
inline ::google::protobuf::uint32 BlobMenu::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobMenu.list)
  return list_.Get(index);
}
inline void BlobMenu::set_list(int index, ::google::protobuf::uint32 value) {
  list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobMenu.list)
}
inline void BlobMenu::add_list(::google::protobuf::uint32 value) {
  list_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobMenu.list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobMenu::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobMenu.list)
  return list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobMenu::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobMenu.list)
  return &list_;
}

// -------------------------------------------------------------------

// BlobShopGotItem

// optional uint32 version = 1 [default = 0];
inline bool BlobShopGotItem::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobShopGotItem::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobShopGotItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobShopGotItem::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobShopGotItem::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.version)
  return version_;
}
inline void BlobShopGotItem::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobShopGotItem.version)
}

// repeated .Cmd.ShopGotItem list = 2;
inline int BlobShopGotItem::list_size() const {
  return list_.size();
}
inline void BlobShopGotItem::clear_list() {
  list_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.list)
  return list_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.list)
  return list_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.list)
  return &list_;
}

// repeated .Cmd.ShopGotItem random = 3;
inline int BlobShopGotItem::random_size() const {
  return random_.size();
}
inline void BlobShopGotItem::clear_random() {
  random_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::random(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.random)
  return random_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_random(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.random)
  return random_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_random() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.random)
  return random_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::random() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.random)
  return random_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_random() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.random)
  return &random_;
}

// optional uint32 refreshlv = 4 [default = 0];
inline bool BlobShopGotItem::has_refreshlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobShopGotItem::set_has_refreshlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobShopGotItem::clear_has_refreshlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobShopGotItem::clear_refreshlv() {
  refreshlv_ = 0u;
  clear_has_refreshlv();
}
inline ::google::protobuf::uint32 BlobShopGotItem::refreshlv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.refreshlv)
  return refreshlv_;
}
inline void BlobShopGotItem::set_refreshlv(::google::protobuf::uint32 value) {
  set_has_refreshlv();
  refreshlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobShopGotItem.refreshlv)
}

// optional uint32 refreshlv_resettime = 5 [default = 0];
inline bool BlobShopGotItem::has_refreshlv_resettime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobShopGotItem::set_has_refreshlv_resettime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobShopGotItem::clear_has_refreshlv_resettime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobShopGotItem::clear_refreshlv_resettime() {
  refreshlv_resettime_ = 0u;
  clear_has_refreshlv_resettime();
}
inline ::google::protobuf::uint32 BlobShopGotItem::refreshlv_resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.refreshlv_resettime)
  return refreshlv_resettime_;
}
inline void BlobShopGotItem::set_refreshlv_resettime(::google::protobuf::uint32 value) {
  set_has_refreshlv_resettime();
  refreshlv_resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobShopGotItem.refreshlv_resettime)
}

// repeated .Cmd.ShopGotItem month = 6;
inline int BlobShopGotItem::month_size() const {
  return month_.size();
}
inline void BlobShopGotItem::clear_month() {
  month_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::month(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.month)
  return month_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_month(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.month)
  return month_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_month() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.month)
  return month_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::month() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.month)
  return month_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_month() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.month)
  return &month_;
}

// repeated .Cmd.ShopGotItem randombylv = 7;
inline int BlobShopGotItem::randombylv_size() const {
  return randombylv_.size();
}
inline void BlobShopGotItem::clear_randombylv() {
  randombylv_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::randombylv(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.randombylv)
  return randombylv_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_randombylv(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.randombylv)
  return randombylv_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_randombylv() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.randombylv)
  return randombylv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::randombylv() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.randombylv)
  return randombylv_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_randombylv() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.randombylv)
  return &randombylv_;
}

// repeated .Cmd.ShopGotItem discountact = 8;
inline int BlobShopGotItem::discountact_size() const {
  return discountact_.size();
}
inline void BlobShopGotItem::clear_discountact() {
  discountact_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::discountact(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.discountact)
  return discountact_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_discountact(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.discountact)
  return discountact_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_discountact() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.discountact)
  return discountact_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::discountact() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.discountact)
  return discountact_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_discountact() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.discountact)
  return &discountact_;
}

// repeated .Cmd.ShopGotItem randomacc = 9;
inline int BlobShopGotItem::randomacc_size() const {
  return randomacc_.size();
}
inline void BlobShopGotItem::clear_randomacc() {
  randomacc_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::randomacc(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.randomacc)
  return randomacc_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_randomacc(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.randomacc)
  return randomacc_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_randomacc() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.randomacc)
  return randomacc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::randomacc() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.randomacc)
  return randomacc_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_randomacc() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.randomacc)
  return &randomacc_;
}

// repeated .Cmd.ShopGotItem listweek = 10;
inline int BlobShopGotItem::listweek_size() const {
  return listweek_.size();
}
inline void BlobShopGotItem::clear_listweek() {
  listweek_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::listweek(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.listweek)
  return listweek_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_listweek(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.listweek)
  return listweek_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_listweek() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.listweek)
  return listweek_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::listweek() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.listweek)
  return listweek_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_listweek() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.listweek)
  return &listweek_;
}

// repeated .Cmd.ShopGotItem limitmonth = 11;
inline int BlobShopGotItem::limitmonth_size() const {
  return limitmonth_.size();
}
inline void BlobShopGotItem::clear_limitmonth() {
  limitmonth_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::limitmonth(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.limitmonth)
  return limitmonth_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_limitmonth(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.limitmonth)
  return limitmonth_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_limitmonth() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.limitmonth)
  return limitmonth_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::limitmonth() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.limitmonth)
  return limitmonth_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_limitmonth() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.limitmonth)
  return &limitmonth_;
}

// repeated .Cmd.ShopGotItem addcount = 12;
inline int BlobShopGotItem::addcount_size() const {
  return addcount_.size();
}
inline void BlobShopGotItem::clear_addcount() {
  addcount_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::addcount(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.addcount)
  return addcount_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_addcount(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.addcount)
  return addcount_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_addcount() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.addcount)
  return addcount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::addcount() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.addcount)
  return addcount_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_addcount() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.addcount)
  return &addcount_;
}

// repeated .Cmd.ShopGotItem limititem = 13;
inline int BlobShopGotItem::limititem_size() const {
  return limititem_.size();
}
inline void BlobShopGotItem::clear_limititem() {
  limititem_.Clear();
}
inline const ::Cmd::ShopGotItem& BlobShopGotItem::limititem(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShopGotItem.limititem)
  return limititem_.Get(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::mutable_limititem(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShopGotItem.limititem)
  return limititem_.Mutable(index);
}
inline ::Cmd::ShopGotItem* BlobShopGotItem::add_limititem() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShopGotItem.limititem)
  return limititem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
BlobShopGotItem::limititem() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShopGotItem.limititem)
  return limititem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
BlobShopGotItem::mutable_limititem() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShopGotItem.limititem)
  return &limititem_;
}

// -------------------------------------------------------------------

// BlobExchangeShop

// optional uint32 version = 1 [default = 0];
inline bool BlobExchangeShop::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobExchangeShop::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobExchangeShop::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobExchangeShop::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobExchangeShop::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobExchangeShop.version)
  return version_;
}
inline void BlobExchangeShop::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobExchangeShop.version)
}

// optional bool menuopen = 2 [default = false];
inline bool BlobExchangeShop::has_menuopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobExchangeShop::set_has_menuopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobExchangeShop::clear_has_menuopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobExchangeShop::clear_menuopen() {
  menuopen_ = false;
  clear_has_menuopen();
}
inline bool BlobExchangeShop::menuopen() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobExchangeShop.menuopen)
  return menuopen_;
}
inline void BlobExchangeShop::set_menuopen(bool value) {
  set_has_menuopen();
  menuopen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobExchangeShop.menuopen)
}

// repeated .Cmd.ExchangeShopItem items = 3;
inline int BlobExchangeShop::items_size() const {
  return items_.size();
}
inline void BlobExchangeShop::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ExchangeShopItem& BlobExchangeShop::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobExchangeShop.items)
  return items_.Get(index);
}
inline ::Cmd::ExchangeShopItem* BlobExchangeShop::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobExchangeShop.items)
  return items_.Mutable(index);
}
inline ::Cmd::ExchangeShopItem* BlobExchangeShop::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobExchangeShop.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >&
BlobExchangeShop::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobExchangeShop.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >*
BlobExchangeShop::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobExchangeShop.items)
  return &items_;
}

// repeated .Cmd.ItemGetCount itemget = 4;
inline int BlobExchangeShop::itemget_size() const {
  return itemget_.size();
}
inline void BlobExchangeShop::clear_itemget() {
  itemget_.Clear();
}
inline const ::Cmd::ItemGetCount& BlobExchangeShop::itemget(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobExchangeShop.itemget)
  return itemget_.Get(index);
}
inline ::Cmd::ItemGetCount* BlobExchangeShop::mutable_itemget(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobExchangeShop.itemget)
  return itemget_.Mutable(index);
}
inline ::Cmd::ItemGetCount* BlobExchangeShop::add_itemget() {
  // @@protoc_insertion_point(field_add:Cmd.BlobExchangeShop.itemget)
  return itemget_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >&
BlobExchangeShop::itemget() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobExchangeShop.itemget)
  return itemget_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >*
BlobExchangeShop::mutable_itemget() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobExchangeShop.itemget)
  return &itemget_;
}

// repeated uint32 exchanged_goods = 5;
inline int BlobExchangeShop::exchanged_goods_size() const {
  return exchanged_goods_.size();
}
inline void BlobExchangeShop::clear_exchanged_goods() {
  exchanged_goods_.Clear();
}
inline ::google::protobuf::uint32 BlobExchangeShop::exchanged_goods(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobExchangeShop.exchanged_goods)
  return exchanged_goods_.Get(index);
}
inline void BlobExchangeShop::set_exchanged_goods(int index, ::google::protobuf::uint32 value) {
  exchanged_goods_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobExchangeShop.exchanged_goods)
}
inline void BlobExchangeShop::add_exchanged_goods(::google::protobuf::uint32 value) {
  exchanged_goods_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobExchangeShop.exchanged_goods)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobExchangeShop::exchanged_goods() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobExchangeShop.exchanged_goods)
  return exchanged_goods_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobExchangeShop::mutable_exchanged_goods() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobExchangeShop.exchanged_goods)
  return &exchanged_goods_;
}

// -------------------------------------------------------------------

// BlobKnownMaps

// optional uint32 version = 1 [default = 0];
inline bool BlobKnownMaps::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobKnownMaps::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobKnownMaps::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobKnownMaps::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobKnownMaps::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobKnownMaps.version)
  return version_;
}
inline void BlobKnownMaps::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobKnownMaps.version)
}

// repeated uint32 list = 2;
inline int BlobKnownMaps::list_size() const {
  return list_.size();
}
inline void BlobKnownMaps::clear_list() {
  list_.Clear();
}
inline ::google::protobuf::uint32 BlobKnownMaps::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobKnownMaps.list)
  return list_.Get(index);
}
inline void BlobKnownMaps::set_list(int index, ::google::protobuf::uint32 value) {
  list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobKnownMaps.list)
}
inline void BlobKnownMaps::add_list(::google::protobuf::uint32 value) {
  list_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobKnownMaps.list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobKnownMaps::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobKnownMaps.list)
  return list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobKnownMaps::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobKnownMaps.list)
  return &list_;
}

// -------------------------------------------------------------------

// BlobInter

// optional uint32 version = 1 [default = 0];
inline bool BlobInter::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobInter::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobInter::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobInter::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobInter::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobInter.version)
  return version_;
}
inline void BlobInter::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobInter.version)
}

// repeated .Cmd.InterData list = 2;
inline int BlobInter::list_size() const {
  return list_.size();
}
inline void BlobInter::clear_list() {
  list_.Clear();
}
inline const ::Cmd::InterData& BlobInter::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobInter.list)
  return list_.Get(index);
}
inline ::Cmd::InterData* BlobInter::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobInter.list)
  return list_.Mutable(index);
}
inline ::Cmd::InterData* BlobInter::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.BlobInter.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::InterData >&
BlobInter::list() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobInter.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::InterData >*
BlobInter::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobInter.list)
  return &list_;
}

// -------------------------------------------------------------------

// BlobHands

// optional uint32 version = 1 [default = 0];
inline bool BlobHands::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobHands::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobHands::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobHands::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobHands::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.version)
  return version_;
}
inline void BlobHands::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.version)
}

// optional uint32 ismaster = 2 [default = 0];
inline bool BlobHands::has_ismaster() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobHands::set_has_ismaster() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobHands::clear_has_ismaster() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobHands::clear_ismaster() {
  ismaster_ = 0u;
  clear_has_ismaster();
}
inline ::google::protobuf::uint32 BlobHands::ismaster() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.ismaster)
  return ismaster_;
}
inline void BlobHands::set_ismaster(::google::protobuf::uint32 value) {
  set_has_ismaster();
  ismaster_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.ismaster)
}

// optional uint64 otherid = 3 [default = 0];
inline bool BlobHands::has_otherid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobHands::set_has_otherid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobHands::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobHands::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 BlobHands::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.otherid)
  return otherid_;
}
inline void BlobHands::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.otherid)
}

// optional uint64 forcejoinid = 4 [default = 0];
inline bool BlobHands::has_forcejoinid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobHands::set_has_forcejoinid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobHands::clear_has_forcejoinid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobHands::clear_forcejoinid() {
  forcejoinid_ = GOOGLE_ULONGLONG(0);
  clear_has_forcejoinid();
}
inline ::google::protobuf::uint64 BlobHands::forcejoinid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.forcejoinid)
  return forcejoinid_;
}
inline void BlobHands::set_forcejoinid(::google::protobuf::uint64 value) {
  set_has_forcejoinid();
  forcejoinid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.forcejoinid)
}

// optional string last_handname = 5;
inline bool BlobHands::has_last_handname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobHands::set_has_last_handname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobHands::clear_has_last_handname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobHands::clear_last_handname() {
  if (last_handname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_handname_->clear();
  }
  clear_has_last_handname();
}
inline const ::std::string& BlobHands::last_handname() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.last_handname)
  return *last_handname_;
}
inline void BlobHands::set_last_handname(const ::std::string& value) {
  set_has_last_handname();
  if (last_handname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_handname_ = new ::std::string;
  }
  last_handname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.last_handname)
}
inline void BlobHands::set_last_handname(const char* value) {
  set_has_last_handname();
  if (last_handname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_handname_ = new ::std::string;
  }
  last_handname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobHands.last_handname)
}
inline void BlobHands::set_last_handname(const char* value, size_t size) {
  set_has_last_handname();
  if (last_handname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_handname_ = new ::std::string;
  }
  last_handname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobHands.last_handname)
}
inline ::std::string* BlobHands::mutable_last_handname() {
  set_has_last_handname();
  if (last_handname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_handname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobHands.last_handname)
  return last_handname_;
}
inline ::std::string* BlobHands::release_last_handname() {
  clear_has_last_handname();
  if (last_handname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_handname_;
    last_handname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobHands::set_allocated_last_handname(::std::string* last_handname) {
  if (last_handname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_handname_;
  }
  if (last_handname) {
    set_has_last_handname();
    last_handname_ = last_handname;
  } else {
    clear_has_last_handname();
    last_handname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobHands.last_handname)
}

// optional uint32 handtimelen = 6 [default = 0];
inline bool BlobHands::has_handtimelen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobHands::set_has_handtimelen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobHands::clear_has_handtimelen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobHands::clear_handtimelen() {
  handtimelen_ = 0u;
  clear_has_handtimelen();
}
inline ::google::protobuf::uint32 BlobHands::handtimelen() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.handtimelen)
  return handtimelen_;
}
inline void BlobHands::set_handtimelen(::google::protobuf::uint32 value) {
  set_has_handtimelen();
  handtimelen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.handtimelen)
}

// optional uint32 nextrewardtime = 7 [default = 0];
inline bool BlobHands::has_nextrewardtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobHands::set_has_nextrewardtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobHands::clear_has_nextrewardtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobHands::clear_nextrewardtime() {
  nextrewardtime_ = 0u;
  clear_has_nextrewardtime();
}
inline ::google::protobuf::uint32 BlobHands::nextrewardtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.nextrewardtime)
  return nextrewardtime_;
}
inline void BlobHands::set_nextrewardtime(::google::protobuf::uint32 value) {
  set_has_nextrewardtime();
  nextrewardtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.nextrewardtime)
}

// optional uint32 nexttiptime = 8 [default = 0];
inline bool BlobHands::has_nexttiptime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobHands::set_has_nexttiptime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobHands::clear_has_nexttiptime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobHands::clear_nexttiptime() {
  nexttiptime_ = 0u;
  clear_has_nexttiptime();
}
inline ::google::protobuf::uint32 BlobHands::nexttiptime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHands.nexttiptime)
  return nexttiptime_;
}
inline void BlobHands::set_nexttiptime(::google::protobuf::uint32 value) {
  set_has_nexttiptime();
  nexttiptime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHands.nexttiptime)
}

// -------------------------------------------------------------------

// BlobShow

// repeated uint32 actions = 1;
inline int BlobShow::actions_size() const {
  return actions_.size();
}
inline void BlobShow::clear_actions() {
  actions_.Clear();
}
inline ::google::protobuf::uint32 BlobShow::actions(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShow.actions)
  return actions_.Get(index);
}
inline void BlobShow::set_actions(int index, ::google::protobuf::uint32 value) {
  actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobShow.actions)
}
inline void BlobShow::add_actions(::google::protobuf::uint32 value) {
  actions_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobShow.actions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobShow::actions() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShow.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobShow::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShow.actions)
  return &actions_;
}

// repeated uint32 expressions = 2;
inline int BlobShow::expressions_size() const {
  return expressions_.size();
}
inline void BlobShow::clear_expressions() {
  expressions_.Clear();
}
inline ::google::protobuf::uint32 BlobShow::expressions(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShow.expressions)
  return expressions_.Get(index);
}
inline void BlobShow::set_expressions(int index, ::google::protobuf::uint32 value) {
  expressions_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobShow.expressions)
}
inline void BlobShow::add_expressions(::google::protobuf::uint32 value) {
  expressions_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobShow.expressions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobShow::expressions() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShow.expressions)
  return expressions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobShow::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShow.expressions)
  return &expressions_;
}

// -------------------------------------------------------------------

// BlobTrace

// repeated .Cmd.TraceItem items = 1;
inline int BlobTrace::items_size() const {
  return items_.size();
}
inline void BlobTrace::clear_items() {
  items_.Clear();
}
inline const ::Cmd::TraceItem& BlobTrace::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTrace.items)
  return items_.Get(index);
}
inline ::Cmd::TraceItem* BlobTrace::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTrace.items)
  return items_.Mutable(index);
}
inline ::Cmd::TraceItem* BlobTrace::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobTrace.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >&
BlobTrace::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTrace.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >*
BlobTrace::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTrace.items)
  return &items_;
}

// -------------------------------------------------------------------

// BlobOption

// optional .Cmd.EQueryType type = 1 [default = EQUERYTYPE_MIN];
inline bool BlobOption::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobOption::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobOption::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobOption::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EQueryType BlobOption::type() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobOption.type)
  return static_cast< ::Cmd::EQueryType >(type_);
}
inline void BlobOption::set_type(::Cmd::EQueryType value) {
  assert(::Cmd::EQueryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobOption.type)
}

// optional uint32 normalskill_option = 2 [default = 1];
inline bool BlobOption::has_normalskill_option() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobOption::set_has_normalskill_option() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobOption::clear_has_normalskill_option() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobOption::clear_normalskill_option() {
  normalskill_option_ = 1u;
  clear_has_normalskill_option();
}
inline ::google::protobuf::uint32 BlobOption::normalskill_option() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobOption.normalskill_option)
  return normalskill_option_;
}
inline void BlobOption::set_normalskill_option(::google::protobuf::uint32 value) {
  set_has_normalskill_option();
  normalskill_option_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobOption.normalskill_option)
}

// optional uint32 fashionhide = 3 [default = 0];
inline bool BlobOption::has_fashionhide() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobOption::set_has_fashionhide() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobOption::clear_has_fashionhide() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobOption::clear_fashionhide() {
  fashionhide_ = 0u;
  clear_has_fashionhide();
}
inline ::google::protobuf::uint32 BlobOption::fashionhide() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobOption.fashionhide)
  return fashionhide_;
}
inline void BlobOption::set_fashionhide(::google::protobuf::uint32 value) {
  set_has_fashionhide();
  fashionhide_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobOption.fashionhide)
}

// optional uint64 bitopt = 4 [default = 18446744073709551615];
inline bool BlobOption::has_bitopt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobOption::set_has_bitopt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobOption::clear_has_bitopt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobOption::clear_bitopt() {
  bitopt_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_bitopt();
}
inline ::google::protobuf::uint64 BlobOption::bitopt() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobOption.bitopt)
  return bitopt_;
}
inline void BlobOption::set_bitopt(::google::protobuf::uint64 value) {
  set_has_bitopt();
  bitopt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobOption.bitopt)
}

// repeated .Cmd.SkillOption skillopts = 5;
inline int BlobOption::skillopts_size() const {
  return skillopts_.size();
}
inline void BlobOption::clear_skillopts() {
  skillopts_.Clear();
}
inline const ::Cmd::SkillOption& BlobOption::skillopts(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobOption.skillopts)
  return skillopts_.Get(index);
}
inline ::Cmd::SkillOption* BlobOption::mutable_skillopts(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobOption.skillopts)
  return skillopts_.Mutable(index);
}
inline ::Cmd::SkillOption* BlobOption::add_skillopts() {
  // @@protoc_insertion_point(field_add:Cmd.BlobOption.skillopts)
  return skillopts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillOption >&
BlobOption::skillopts() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobOption.skillopts)
  return skillopts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillOption >*
BlobOption::mutable_skillopts() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobOption.skillopts)
  return &skillopts_;
}

// optional .Cmd.EQueryType wedding_type = 6;
inline bool BlobOption::has_wedding_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobOption::set_has_wedding_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobOption::clear_has_wedding_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobOption::clear_wedding_type() {
  wedding_type_ = 0;
  clear_has_wedding_type();
}
inline ::Cmd::EQueryType BlobOption::wedding_type() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobOption.wedding_type)
  return static_cast< ::Cmd::EQueryType >(wedding_type_);
}
inline void BlobOption::set_wedding_type(::Cmd::EQueryType value) {
  assert(::Cmd::EQueryType_IsValid(value));
  set_has_wedding_type();
  wedding_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobOption.wedding_type)
}

// -------------------------------------------------------------------

// BlobDojo

// repeated uint32 completedid = 1;
inline int BlobDojo::completedid_size() const {
  return completedid_.size();
}
inline void BlobDojo::clear_completedid() {
  completedid_.Clear();
}
inline ::google::protobuf::uint32 BlobDojo::completedid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDojo.completedid)
  return completedid_.Get(index);
}
inline void BlobDojo::set_completedid(int index, ::google::protobuf::uint32 value) {
  completedid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobDojo.completedid)
}
inline void BlobDojo::add_completedid(::google::protobuf::uint32 value) {
  completedid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobDojo.completedid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobDojo::completedid() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobDojo.completedid)
  return completedid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobDojo::mutable_completedid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobDojo.completedid)
  return &completedid_;
}

// -------------------------------------------------------------------

// FoodItemInfo

// optional uint32 itemid = 1;
inline bool FoodItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FoodItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FoodItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FoodItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 FoodItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodItemInfo.itemid)
  return itemid_;
}
inline void FoodItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodItemInfo.itemid)
}

// optional uint32 invalid_time = 2;
inline bool FoodItemInfo::has_invalid_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FoodItemInfo::set_has_invalid_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FoodItemInfo::clear_has_invalid_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FoodItemInfo::clear_invalid_time() {
  invalid_time_ = 0u;
  clear_has_invalid_time();
}
inline ::google::protobuf::uint32 FoodItemInfo::invalid_time() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodItemInfo.invalid_time)
  return invalid_time_;
}
inline void FoodItemInfo::set_invalid_time(::google::protobuf::uint32 value) {
  set_has_invalid_time();
  invalid_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodItemInfo.invalid_time)
}

// repeated .Cmd.UserAttrSvr attrs = 3;
inline int FoodItemInfo::attrs_size() const {
  return attrs_.size();
}
inline void FoodItemInfo::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttrSvr& FoodItemInfo::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FoodItemInfo.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttrSvr* FoodItemInfo::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.FoodItemInfo.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttrSvr* FoodItemInfo::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.FoodItemInfo.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >&
FoodItemInfo::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.FoodItemInfo.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >*
FoodItemInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FoodItemInfo.attrs)
  return &attrs_;
}

// -------------------------------------------------------------------

// FoodLimitInfo

// optional uint32 itemid = 1;
inline bool FoodLimitInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FoodLimitInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FoodLimitInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FoodLimitInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 FoodLimitInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodLimitInfo.itemid)
  return itemid_;
}
inline void FoodLimitInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodLimitInfo.itemid)
}

// optional uint32 num = 2;
inline bool FoodLimitInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FoodLimitInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FoodLimitInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FoodLimitInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 FoodLimitInfo::num() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodLimitInfo.num)
  return num_;
}
inline void FoodLimitInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodLimitInfo.num)
}

// optional uint32 time = 3;
inline bool FoodLimitInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FoodLimitInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FoodLimitInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FoodLimitInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 FoodLimitInfo::time() const {
  // @@protoc_insertion_point(field_get:Cmd.FoodLimitInfo.time)
  return time_;
}
inline void FoodLimitInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FoodLimitInfo.time)
}

// -------------------------------------------------------------------

// BlobFood

// optional uint32 cookerexp = 1;
inline bool BlobFood::has_cookerexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobFood::set_has_cookerexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobFood::clear_has_cookerexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobFood::clear_cookerexp() {
  cookerexp_ = 0u;
  clear_has_cookerexp();
}
inline ::google::protobuf::uint32 BlobFood::cookerexp() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.cookerexp)
  return cookerexp_;
}
inline void BlobFood::set_cookerexp(::google::protobuf::uint32 value) {
  set_has_cookerexp();
  cookerexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.cookerexp)
}

// optional uint32 cookerlv = 2;
inline bool BlobFood::has_cookerlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobFood::set_has_cookerlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobFood::clear_has_cookerlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobFood::clear_cookerlv() {
  cookerlv_ = 0u;
  clear_has_cookerlv();
}
inline ::google::protobuf::uint32 BlobFood::cookerlv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.cookerlv)
  return cookerlv_;
}
inline void BlobFood::set_cookerlv(::google::protobuf::uint32 value) {
  set_has_cookerlv();
  cookerlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.cookerlv)
}

// optional uint32 tasterexp = 3;
inline bool BlobFood::has_tasterexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobFood::set_has_tasterexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobFood::clear_has_tasterexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobFood::clear_tasterexp() {
  tasterexp_ = 0u;
  clear_has_tasterexp();
}
inline ::google::protobuf::uint32 BlobFood::tasterexp() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.tasterexp)
  return tasterexp_;
}
inline void BlobFood::set_tasterexp(::google::protobuf::uint32 value) {
  set_has_tasterexp();
  tasterexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.tasterexp)
}

// optional uint32 tasterlv = 4;
inline bool BlobFood::has_tasterlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobFood::set_has_tasterlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobFood::clear_has_tasterlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobFood::clear_tasterlv() {
  tasterlv_ = 0u;
  clear_has_tasterlv();
}
inline ::google::protobuf::uint32 BlobFood::tasterlv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.tasterlv)
  return tasterlv_;
}
inline void BlobFood::set_tasterlv(::google::protobuf::uint32 value) {
  set_has_tasterlv();
  tasterlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.tasterlv)
}

// optional uint64 savehp = 5;
inline bool BlobFood::has_savehp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobFood::set_has_savehp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobFood::clear_has_savehp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobFood::clear_savehp() {
  savehp_ = GOOGLE_ULONGLONG(0);
  clear_has_savehp();
}
inline ::google::protobuf::uint64 BlobFood::savehp() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.savehp)
  return savehp_;
}
inline void BlobFood::set_savehp(::google::protobuf::uint64 value) {
  set_has_savehp();
  savehp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.savehp)
}

// optional uint64 savesp = 6;
inline bool BlobFood::has_savesp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobFood::set_has_savesp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobFood::clear_has_savesp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobFood::clear_savesp() {
  savesp_ = GOOGLE_ULONGLONG(0);
  clear_has_savesp();
}
inline ::google::protobuf::uint64 BlobFood::savesp() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.savesp)
  return savesp_;
}
inline void BlobFood::set_savesp(::google::protobuf::uint64 value) {
  set_has_savesp();
  savesp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.savesp)
}

// optional uint32 height = 7;
inline bool BlobFood::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobFood::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobFood::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobFood::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 BlobFood::height() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.height)
  return height_;
}
inline void BlobFood::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.height)
}

// optional uint32 weight = 8;
inline bool BlobFood::has_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobFood::set_has_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobFood::clear_has_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobFood::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 BlobFood::weight() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.weight)
  return weight_;
}
inline void BlobFood::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.weight)
}

// repeated uint32 recipes = 9;
inline int BlobFood::recipes_size() const {
  return recipes_.size();
}
inline void BlobFood::clear_recipes() {
  recipes_.Clear();
}
inline ::google::protobuf::uint32 BlobFood::recipes(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.recipes)
  return recipes_.Get(index);
}
inline void BlobFood::set_recipes(int index, ::google::protobuf::uint32 value) {
  recipes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.recipes)
}
inline void BlobFood::add_recipes(::google::protobuf::uint32 value) {
  recipes_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobFood.recipes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobFood::recipes() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFood.recipes)
  return recipes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobFood::mutable_recipes() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFood.recipes)
  return &recipes_;
}

// repeated .Cmd.FoodManualData manualdata = 10;
inline int BlobFood::manualdata_size() const {
  return manualdata_.size();
}
inline void BlobFood::clear_manualdata() {
  manualdata_.Clear();
}
inline const ::Cmd::FoodManualData& BlobFood::manualdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.manualdata)
  return manualdata_.Get(index);
}
inline ::Cmd::FoodManualData* BlobFood::mutable_manualdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobFood.manualdata)
  return manualdata_.Mutable(index);
}
inline ::Cmd::FoodManualData* BlobFood::add_manualdata() {
  // @@protoc_insertion_point(field_add:Cmd.BlobFood.manualdata)
  return manualdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >&
BlobFood::manualdata() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFood.manualdata)
  return manualdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodManualData >*
BlobFood::mutable_manualdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFood.manualdata)
  return &manualdata_;
}

// repeated .Cmd.FoodItemInfo iteminfo = 11;
inline int BlobFood::iteminfo_size() const {
  return iteminfo_.size();
}
inline void BlobFood::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::Cmd::FoodItemInfo& BlobFood::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.iteminfo)
  return iteminfo_.Get(index);
}
inline ::Cmd::FoodItemInfo* BlobFood::mutable_iteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobFood.iteminfo)
  return iteminfo_.Mutable(index);
}
inline ::Cmd::FoodItemInfo* BlobFood::add_iteminfo() {
  // @@protoc_insertion_point(field_add:Cmd.BlobFood.iteminfo)
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo >&
BlobFood::iteminfo() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFood.iteminfo)
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodItemInfo >*
BlobFood::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFood.iteminfo)
  return &iteminfo_;
}

// optional uint32 satiety = 12;
inline bool BlobFood::has_satiety() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlobFood::set_has_satiety() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlobFood::clear_has_satiety() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlobFood::clear_satiety() {
  satiety_ = 0u;
  clear_has_satiety();
}
inline ::google::protobuf::uint32 BlobFood::satiety() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.satiety)
  return satiety_;
}
inline void BlobFood::set_satiety(::google::protobuf::uint32 value) {
  set_has_satiety();
  satiety_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.satiety)
}

// repeated uint32 last_cooked_ids = 13;
inline int BlobFood::last_cooked_ids_size() const {
  return last_cooked_ids_.size();
}
inline void BlobFood::clear_last_cooked_ids() {
  last_cooked_ids_.Clear();
}
inline ::google::protobuf::uint32 BlobFood::last_cooked_ids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.last_cooked_ids)
  return last_cooked_ids_.Get(index);
}
inline void BlobFood::set_last_cooked_ids(int index, ::google::protobuf::uint32 value) {
  last_cooked_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobFood.last_cooked_ids)
}
inline void BlobFood::add_last_cooked_ids(::google::protobuf::uint32 value) {
  last_cooked_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobFood.last_cooked_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobFood::last_cooked_ids() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFood.last_cooked_ids)
  return last_cooked_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobFood::mutable_last_cooked_ids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFood.last_cooked_ids)
  return &last_cooked_ids_;
}

// repeated .Cmd.FoodLimitInfo limitinfo = 14;
inline int BlobFood::limitinfo_size() const {
  return limitinfo_.size();
}
inline void BlobFood::clear_limitinfo() {
  limitinfo_.Clear();
}
inline const ::Cmd::FoodLimitInfo& BlobFood::limitinfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFood.limitinfo)
  return limitinfo_.Get(index);
}
inline ::Cmd::FoodLimitInfo* BlobFood::mutable_limitinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobFood.limitinfo)
  return limitinfo_.Mutable(index);
}
inline ::Cmd::FoodLimitInfo* BlobFood::add_limitinfo() {
  // @@protoc_insertion_point(field_add:Cmd.BlobFood.limitinfo)
  return limitinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FoodLimitInfo >&
BlobFood::limitinfo() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobFood.limitinfo)
  return limitinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FoodLimitInfo >*
BlobFood::mutable_limitinfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobFood.limitinfo)
  return &limitinfo_;
}

// -------------------------------------------------------------------

// BlobHighRefine

// repeated .Cmd.HighRefineData datas = 1;
inline int BlobHighRefine::datas_size() const {
  return datas_.size();
}
inline void BlobHighRefine::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::HighRefineData& BlobHighRefine::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHighRefine.datas)
  return datas_.Get(index);
}
inline ::Cmd::HighRefineData* BlobHighRefine::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobHighRefine.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::HighRefineData* BlobHighRefine::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobHighRefine.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >&
BlobHighRefine::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobHighRefine.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >*
BlobHighRefine::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobHighRefine.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// PackageData

// optional .Cmd.EPackType type = 1 [default = EPACKTYPE_MIN];
inline bool PackageData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPackType PackageData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageData.type)
  return static_cast< ::Cmd::EPackType >(type_);
}
inline void PackageData::set_type(::Cmd::EPackType value) {
  assert(::Cmd::EPackType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageData.type)
}

// repeated .Cmd.ItemData items = 2;
inline int PackageData::items_size() const {
  return items_.size();
}
inline void PackageData::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemData& PackageData::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PackageData.items)
  return items_.Get(index);
}
inline ::Cmd::ItemData* PackageData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PackageData.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemData* PackageData::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.PackageData.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
PackageData::items() const {
  // @@protoc_insertion_point(field_list:Cmd.PackageData.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
PackageData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PackageData.items)
  return &items_;
}

// -------------------------------------------------------------------

// ItemUseCount

// optional uint32 itemid = 1 [default = 0];
inline bool ItemUseCount::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemUseCount::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemUseCount::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemUseCount::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ItemUseCount::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemUseCount.itemid)
  return itemid_;
}
inline void ItemUseCount::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemUseCount.itemid)
}

// optional uint32 usecount = 2 [default = 0];
inline bool ItemUseCount::has_usecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemUseCount::set_has_usecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemUseCount::clear_has_usecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemUseCount::clear_usecount() {
  usecount_ = 0u;
  clear_has_usecount();
}
inline ::google::protobuf::uint32 ItemUseCount::usecount() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemUseCount.usecount)
  return usecount_;
}
inline void ItemUseCount::set_usecount(::google::protobuf::uint32 value) {
  set_has_usecount();
  usecount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemUseCount.usecount)
}

// -------------------------------------------------------------------

// ItemGetCount

// optional uint32 itemid = 1 [default = 0];
inline bool ItemGetCount::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemGetCount::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemGetCount::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemGetCount::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ItemGetCount::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemGetCount.itemid)
  return itemid_;
}
inline void ItemGetCount::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemGetCount.itemid)
}

// optional uint32 getcount = 2 [default = 0];
inline bool ItemGetCount::has_getcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemGetCount::set_has_getcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemGetCount::clear_has_getcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemGetCount::clear_getcount() {
  getcount_ = 0u;
  clear_has_getcount();
}
inline ::google::protobuf::uint32 ItemGetCount::getcount() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemGetCount.getcount)
  return getcount_;
}
inline void ItemGetCount::set_getcount(::google::protobuf::uint32 value) {
  set_has_getcount();
  getcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemGetCount.getcount)
}

// optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
inline bool ItemGetCount::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemGetCount::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemGetCount::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemGetCount::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::Cmd::ESource ItemGetCount::source() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemGetCount.source)
  return static_cast< ::Cmd::ESource >(source_);
}
inline void ItemGetCount::set_source(::Cmd::ESource value) {
  assert(::Cmd::ESource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemGetCount.source)
}

// -------------------------------------------------------------------

// RewardSafetyItem

// optional uint32 id = 1 [default = 0];
inline bool RewardSafetyItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardSafetyItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardSafetyItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardSafetyItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RewardSafetyItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardSafetyItem.id)
  return id_;
}
inline void RewardSafetyItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardSafetyItem.id)
}

// optional uint32 expiretime = 2 [default = 0];
inline bool RewardSafetyItem::has_expiretime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardSafetyItem::set_has_expiretime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardSafetyItem::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardSafetyItem::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 RewardSafetyItem::expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardSafetyItem.expiretime)
  return expiretime_;
}
inline void RewardSafetyItem::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardSafetyItem.expiretime)
}

// optional uint32 rollcount = 3 [default = 0];
inline bool RewardSafetyItem::has_rollcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardSafetyItem::set_has_rollcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardSafetyItem::clear_has_rollcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardSafetyItem::clear_rollcount() {
  rollcount_ = 0u;
  clear_has_rollcount();
}
inline ::google::protobuf::uint32 RewardSafetyItem::rollcount() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardSafetyItem.rollcount)
  return rollcount_;
}
inline void RewardSafetyItem::set_rollcount(::google::protobuf::uint32 value) {
  set_has_rollcount();
  rollcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardSafetyItem.rollcount)
}

// optional uint32 rewardcount = 4 [default = 0];
inline bool RewardSafetyItem::has_rewardcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RewardSafetyItem::set_has_rewardcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RewardSafetyItem::clear_has_rewardcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RewardSafetyItem::clear_rewardcount() {
  rewardcount_ = 0u;
  clear_has_rewardcount();
}
inline ::google::protobuf::uint32 RewardSafetyItem::rewardcount() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardSafetyItem.rewardcount)
  return rewardcount_;
}
inline void RewardSafetyItem::set_rewardcount(::google::protobuf::uint32 value) {
  set_has_rewardcount();
  rewardcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardSafetyItem.rewardcount)
}

// optional uint32 nextsafetycount = 5 [default = 0];
inline bool RewardSafetyItem::has_nextsafetycount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RewardSafetyItem::set_has_nextsafetycount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RewardSafetyItem::clear_has_nextsafetycount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RewardSafetyItem::clear_nextsafetycount() {
  nextsafetycount_ = 0u;
  clear_has_nextsafetycount();
}
inline ::google::protobuf::uint32 RewardSafetyItem::nextsafetycount() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardSafetyItem.nextsafetycount)
  return nextsafetycount_;
}
inline void RewardSafetyItem::set_nextsafetycount(::google::protobuf::uint32 value) {
  set_has_nextsafetycount();
  nextsafetycount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardSafetyItem.nextsafetycount)
}

// optional uint32 version = 6 [default = 0];
inline bool RewardSafetyItem::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RewardSafetyItem::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RewardSafetyItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RewardSafetyItem::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 RewardSafetyItem::version() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardSafetyItem.version)
  return version_;
}
inline void RewardSafetyItem::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardSafetyItem.version)
}

// -------------------------------------------------------------------

// BlobPack

// repeated .Cmd.PackageData datas = 1;
inline int BlobPack::datas_size() const {
  return datas_.size();
}
inline void BlobPack::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::PackageData& BlobPack::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.datas)
  return datas_.Get(index);
}
inline ::Cmd::PackageData* BlobPack::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPack.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::PackageData* BlobPack::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PackageData >&
BlobPack::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PackageData >*
BlobPack::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.datas)
  return &datas_;
}

// repeated uint32 hintitems = 2;
inline int BlobPack::hintitems_size() const {
  return hintitems_.size();
}
inline void BlobPack::clear_hintitems() {
  hintitems_.Clear();
}
inline ::google::protobuf::uint32 BlobPack::hintitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.hintitems)
  return hintitems_.Get(index);
}
inline void BlobPack::set_hintitems(int index, ::google::protobuf::uint32 value) {
  hintitems_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobPack.hintitems)
}
inline void BlobPack::add_hintitems(::google::protobuf::uint32 value) {
  hintitems_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.hintitems)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobPack::hintitems() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.hintitems)
  return hintitems_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobPack::mutable_hintitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.hintitems)
  return &hintitems_;
}

// repeated .Cmd.FrostItemInfo frost_item_infos = 3;
inline int BlobPack::frost_item_infos_size() const {
  return frost_item_infos_.size();
}
inline void BlobPack::clear_frost_item_infos() {
  frost_item_infos_.Clear();
}
inline const ::Cmd::FrostItemInfo& BlobPack::frost_item_infos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.frost_item_infos)
  return frost_item_infos_.Get(index);
}
inline ::Cmd::FrostItemInfo* BlobPack::mutable_frost_item_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPack.frost_item_infos)
  return frost_item_infos_.Mutable(index);
}
inline ::Cmd::FrostItemInfo* BlobPack::add_frost_item_infos() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.frost_item_infos)
  return frost_item_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >&
BlobPack::frost_item_infos() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.frost_item_infos)
  return frost_item_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FrostItemInfo >*
BlobPack::mutable_frost_item_infos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.frost_item_infos)
  return &frost_item_infos_;
}

// repeated .Cmd.ItemUseCount itemuse = 4;
inline int BlobPack::itemuse_size() const {
  return itemuse_.size();
}
inline void BlobPack::clear_itemuse() {
  itemuse_.Clear();
}
inline const ::Cmd::ItemUseCount& BlobPack::itemuse(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.itemuse)
  return itemuse_.Get(index);
}
inline ::Cmd::ItemUseCount* BlobPack::mutable_itemuse(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPack.itemuse)
  return itemuse_.Mutable(index);
}
inline ::Cmd::ItemUseCount* BlobPack::add_itemuse() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.itemuse)
  return itemuse_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemUseCount >&
BlobPack::itemuse() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.itemuse)
  return itemuse_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemUseCount >*
BlobPack::mutable_itemuse() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.itemuse)
  return &itemuse_;
}

// repeated uint32 onceitems = 5;
inline int BlobPack::onceitems_size() const {
  return onceitems_.size();
}
inline void BlobPack::clear_onceitems() {
  onceitems_.Clear();
}
inline ::google::protobuf::uint32 BlobPack::onceitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.onceitems)
  return onceitems_.Get(index);
}
inline void BlobPack::set_onceitems(int index, ::google::protobuf::uint32 value) {
  onceitems_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobPack.onceitems)
}
inline void BlobPack::add_onceitems(::google::protobuf::uint32 value) {
  onceitems_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.onceitems)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobPack::onceitems() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.onceitems)
  return onceitems_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobPack::mutable_onceitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.onceitems)
  return &onceitems_;
}

// repeated .Cmd.ItemGetCount itemget = 6;
inline int BlobPack::itemget_size() const {
  return itemget_.size();
}
inline void BlobPack::clear_itemget() {
  itemget_.Clear();
}
inline const ::Cmd::ItemGetCount& BlobPack::itemget(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.itemget)
  return itemget_.Get(index);
}
inline ::Cmd::ItemGetCount* BlobPack::mutable_itemget(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPack.itemget)
  return itemget_.Mutable(index);
}
inline ::Cmd::ItemGetCount* BlobPack::add_itemget() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.itemget)
  return itemget_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >&
BlobPack::itemget() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.itemget)
  return itemget_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemGetCount >*
BlobPack::mutable_itemget() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.itemget)
  return &itemget_;
}

// optional uint32 arrowid = 8;
inline bool BlobPack::has_arrowid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobPack::set_has_arrowid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobPack::clear_has_arrowid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobPack::clear_arrowid() {
  arrowid_ = 0u;
  clear_has_arrowid();
}
inline ::google::protobuf::uint32 BlobPack::arrowid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.arrowid)
  return arrowid_;
}
inline void BlobPack::set_arrowid(::google::protobuf::uint32 value) {
  set_has_arrowid();
  arrowid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPack.arrowid)
}

// optional uint32 version = 9 [default = 0];
inline bool BlobPack::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobPack::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobPack::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobPack::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobPack::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.version)
  return version_;
}
inline void BlobPack::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPack.version)
}

// repeated .Cmd.EquipPosData equipposdatas = 10;
inline int BlobPack::equipposdatas_size() const {
  return equipposdatas_.size();
}
inline void BlobPack::clear_equipposdatas() {
  equipposdatas_.Clear();
}
inline const ::Cmd::EquipPosData& BlobPack::equipposdatas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.equipposdatas)
  return equipposdatas_.Get(index);
}
inline ::Cmd::EquipPosData* BlobPack::mutable_equipposdatas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPack.equipposdatas)
  return equipposdatas_.Mutable(index);
}
inline ::Cmd::EquipPosData* BlobPack::add_equipposdatas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.equipposdatas)
  return equipposdatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >&
BlobPack::equipposdatas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.equipposdatas)
  return equipposdatas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >*
BlobPack::mutable_equipposdatas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.equipposdatas)
  return &equipposdatas_;
}

// repeated .Cmd.RewardSafetyItem rewardsafetyitems = 11;
inline int BlobPack::rewardsafetyitems_size() const {
  return rewardsafetyitems_.size();
}
inline void BlobPack::clear_rewardsafetyitems() {
  rewardsafetyitems_.Clear();
}
inline const ::Cmd::RewardSafetyItem& BlobPack::rewardsafetyitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPack.rewardsafetyitems)
  return rewardsafetyitems_.Get(index);
}
inline ::Cmd::RewardSafetyItem* BlobPack::mutable_rewardsafetyitems(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPack.rewardsafetyitems)
  return rewardsafetyitems_.Mutable(index);
}
inline ::Cmd::RewardSafetyItem* BlobPack::add_rewardsafetyitems() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPack.rewardsafetyitems)
  return rewardsafetyitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RewardSafetyItem >&
BlobPack::rewardsafetyitems() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPack.rewardsafetyitems)
  return rewardsafetyitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RewardSafetyItem >*
BlobPack::mutable_rewardsafetyitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPack.rewardsafetyitems)
  return &rewardsafetyitems_;
}

// -------------------------------------------------------------------

// MapQuest

// optional uint32 mapid = 1 [default = 0];
inline bool MapQuest::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapQuest::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapQuest::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapQuest::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 MapQuest::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapQuest.mapid)
  return mapid_;
}
inline void MapQuest::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapQuest.mapid)
}

// repeated uint32 questids = 2;
inline int MapQuest::questids_size() const {
  return questids_.size();
}
inline void MapQuest::clear_questids() {
  questids_.Clear();
}
inline ::google::protobuf::uint32 MapQuest::questids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapQuest.questids)
  return questids_.Get(index);
}
inline void MapQuest::set_questids(int index, ::google::protobuf::uint32 value) {
  questids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.MapQuest.questids)
}
inline void MapQuest::add_questids(::google::protobuf::uint32 value) {
  questids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.MapQuest.questids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MapQuest::questids() const {
  // @@protoc_insertion_point(field_list:Cmd.MapQuest.questids)
  return questids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MapQuest::mutable_questids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapQuest.questids)
  return &questids_;
}

// -------------------------------------------------------------------

// BlobQuestPuzzle

// repeated .Cmd.QuestPuzzle puzzles = 1;
inline int BlobQuestPuzzle::puzzles_size() const {
  return puzzles_.size();
}
inline void BlobQuestPuzzle::clear_puzzles() {
  puzzles_.Clear();
}
inline const ::Cmd::QuestPuzzle& BlobQuestPuzzle::puzzles(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuestPuzzle.puzzles)
  return puzzles_.Get(index);
}
inline ::Cmd::QuestPuzzle* BlobQuestPuzzle::mutable_puzzles(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuestPuzzle.puzzles)
  return puzzles_.Mutable(index);
}
inline ::Cmd::QuestPuzzle* BlobQuestPuzzle::add_puzzles() {
  // @@protoc_insertion_point(field_add:Cmd.BlobQuestPuzzle.puzzles)
  return puzzles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPuzzle >&
BlobQuestPuzzle::puzzles() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuestPuzzle.puzzles)
  return puzzles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPuzzle >*
BlobQuestPuzzle::mutable_puzzles() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuestPuzzle.puzzles)
  return &puzzles_;
}

// -------------------------------------------------------------------

// BlobQuest

// repeated .Cmd.QuestData accept = 1;
inline int BlobQuest::accept_size() const {
  return accept_.size();
}
inline void BlobQuest::clear_accept() {
  accept_.Clear();
}
inline const ::Cmd::QuestData& BlobQuest::accept(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.accept)
  return accept_.Get(index);
}
inline ::Cmd::QuestData* BlobQuest::mutable_accept(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuest.accept)
  return accept_.Mutable(index);
}
inline ::Cmd::QuestData* BlobQuest::add_accept() {
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.accept)
  return accept_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
BlobQuest::accept() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.accept)
  return accept_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
BlobQuest::mutable_accept() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.accept)
  return &accept_;
}

// repeated .Cmd.QuestData submit = 2;
inline int BlobQuest::submit_size() const {
  return submit_.size();
}
inline void BlobQuest::clear_submit() {
  submit_.Clear();
}
inline const ::Cmd::QuestData& BlobQuest::submit(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.submit)
  return submit_.Get(index);
}
inline ::Cmd::QuestData* BlobQuest::mutable_submit(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuest.submit)
  return submit_.Mutable(index);
}
inline ::Cmd::QuestData* BlobQuest::add_submit() {
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.submit)
  return submit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
BlobQuest::submit() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.submit)
  return submit_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
BlobQuest::mutable_submit() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.submit)
  return &submit_;
}

// repeated .Cmd.QuestDetail detail = 3;
inline int BlobQuest::detail_size() const {
  return detail_.size();
}
inline void BlobQuest::clear_detail() {
  detail_.Clear();
}
inline const ::Cmd::QuestDetail& BlobQuest::detail(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.detail)
  return detail_.Get(index);
}
inline ::Cmd::QuestDetail* BlobQuest::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuest.detail)
  return detail_.Mutable(index);
}
inline ::Cmd::QuestDetail* BlobQuest::add_detail() {
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.detail)
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
BlobQuest::detail() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.detail)
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
BlobQuest::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.detail)
  return &detail_;
}

// optional uint32 dailycount = 4 [default = 0];
inline bool BlobQuest::has_dailycount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobQuest::set_has_dailycount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobQuest::clear_has_dailycount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobQuest::clear_dailycount() {
  dailycount_ = 0u;
  clear_has_dailycount();
}
inline ::google::protobuf::uint32 BlobQuest::dailycount() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.dailycount)
  return dailycount_;
}
inline void BlobQuest::set_dailycount(::google::protobuf::uint32 value) {
  set_has_dailycount();
  dailycount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.dailycount)
}

// optional uint32 dailytcount = 5 [default = 0];
inline bool BlobQuest::has_dailytcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobQuest::set_has_dailytcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobQuest::clear_has_dailytcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobQuest::clear_dailytcount() {
  dailytcount_ = 0u;
  clear_has_dailytcount();
}
inline ::google::protobuf::uint32 BlobQuest::dailytcount() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.dailytcount)
  return dailytcount_;
}
inline void BlobQuest::set_dailytcount(::google::protobuf::uint32 value) {
  set_has_dailytcount();
  dailytcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.dailytcount)
}

// optional uint32 dailyexp = 6 [default = 0];
inline bool BlobQuest::has_dailyexp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobQuest::set_has_dailyexp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobQuest::clear_has_dailyexp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobQuest::clear_dailyexp() {
  dailyexp_ = 0u;
  clear_has_dailyexp();
}
inline ::google::protobuf::uint32 BlobQuest::dailyexp() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.dailyexp)
  return dailyexp_;
}
inline void BlobQuest::set_dailyexp(::google::protobuf::uint32 value) {
  set_has_dailyexp();
  dailyexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.dailyexp)
}

// optional uint32 dailylevel = 7 [default = 0];
inline bool BlobQuest::has_dailylevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobQuest::set_has_dailylevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobQuest::clear_has_dailylevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobQuest::clear_dailylevel() {
  dailylevel_ = 0u;
  clear_has_dailylevel();
}
inline ::google::protobuf::uint32 BlobQuest::dailylevel() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.dailylevel)
  return dailylevel_;
}
inline void BlobQuest::set_dailylevel(::google::protobuf::uint32 value) {
  set_has_dailylevel();
  dailylevel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.dailylevel)
}

// repeated uint32 dailygift = 8;
inline int BlobQuest::dailygift_size() const {
  return dailygift_.size();
}
inline void BlobQuest::clear_dailygift() {
  dailygift_.Clear();
}
inline ::google::protobuf::uint32 BlobQuest::dailygift(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.dailygift)
  return dailygift_.Get(index);
}
inline void BlobQuest::set_dailygift(int index, ::google::protobuf::uint32 value) {
  dailygift_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.dailygift)
}
inline void BlobQuest::add_dailygift(::google::protobuf::uint32 value) {
  dailygift_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.dailygift)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobQuest::dailygift() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.dailygift)
  return dailygift_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobQuest::mutable_dailygift() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.dailygift)
  return &dailygift_;
}

// optional uint32 lastcalcdailycounttime = 9 [default = 0];
inline bool BlobQuest::has_lastcalcdailycounttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobQuest::set_has_lastcalcdailycounttime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobQuest::clear_has_lastcalcdailycounttime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobQuest::clear_lastcalcdailycounttime() {
  lastcalcdailycounttime_ = 0u;
  clear_has_lastcalcdailycounttime();
}
inline ::google::protobuf::uint32 BlobQuest::lastcalcdailycounttime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.lastcalcdailycounttime)
  return lastcalcdailycounttime_;
}
inline void BlobQuest::set_lastcalcdailycounttime(::google::protobuf::uint32 value) {
  set_has_lastcalcdailycounttime();
  lastcalcdailycounttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.lastcalcdailycounttime)
}

// repeated .Cmd.MapQuest mapquest = 10;
inline int BlobQuest::mapquest_size() const {
  return mapquest_.size();
}
inline void BlobQuest::clear_mapquest() {
  mapquest_.Clear();
}
inline const ::Cmd::MapQuest& BlobQuest::mapquest(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.mapquest)
  return mapquest_.Get(index);
}
inline ::Cmd::MapQuest* BlobQuest::mutable_mapquest(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuest.mapquest)
  return mapquest_.Mutable(index);
}
inline ::Cmd::MapQuest* BlobQuest::add_mapquest() {
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.mapquest)
  return mapquest_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >&
BlobQuest::mapquest() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.mapquest)
  return mapquest_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >*
BlobQuest::mutable_mapquest() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.mapquest)
  return &mapquest_;
}

// repeated .Cmd.MapQuest maprandquest = 14;
inline int BlobQuest::maprandquest_size() const {
  return maprandquest_.size();
}
inline void BlobQuest::clear_maprandquest() {
  maprandquest_.Clear();
}
inline const ::Cmd::MapQuest& BlobQuest::maprandquest(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.maprandquest)
  return maprandquest_.Get(index);
}
inline ::Cmd::MapQuest* BlobQuest::mutable_maprandquest(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuest.maprandquest)
  return maprandquest_.Mutable(index);
}
inline ::Cmd::MapQuest* BlobQuest::add_maprandquest() {
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.maprandquest)
  return maprandquest_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >&
BlobQuest::maprandquest() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.maprandquest)
  return maprandquest_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapQuest >*
BlobQuest::mutable_maprandquest() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.maprandquest)
  return &maprandquest_;
}

// repeated uint32 varreward = 11;
inline int BlobQuest::varreward_size() const {
  return varreward_.size();
}
inline void BlobQuest::clear_varreward() {
  varreward_.Clear();
}
inline ::google::protobuf::uint32 BlobQuest::varreward(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.varreward)
  return varreward_.Get(index);
}
inline void BlobQuest::set_varreward(int index, ::google::protobuf::uint32 value) {
  varreward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.varreward)
}
inline void BlobQuest::add_varreward(::google::protobuf::uint32 value) {
  varreward_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.varreward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobQuest::varreward() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.varreward)
  return varreward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobQuest::mutable_varreward() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.varreward)
  return &varreward_;
}

// repeated uint32 forbidquest = 12;
inline int BlobQuest::forbidquest_size() const {
  return forbidquest_.size();
}
inline void BlobQuest::clear_forbidquest() {
  forbidquest_.Clear();
}
inline ::google::protobuf::uint32 BlobQuest::forbidquest(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.forbidquest)
  return forbidquest_.Get(index);
}
inline void BlobQuest::set_forbidquest(int index, ::google::protobuf::uint32 value) {
  forbidquest_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.forbidquest)
}
inline void BlobQuest::add_forbidquest(::google::protobuf::uint32 value) {
  forbidquest_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.forbidquest)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobQuest::forbidquest() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.forbidquest)
  return forbidquest_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobQuest::mutable_forbidquest() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.forbidquest)
  return &forbidquest_;
}

// repeated uint32 process_acc = 13;
inline int BlobQuest::process_acc_size() const {
  return process_acc_.size();
}
inline void BlobQuest::clear_process_acc() {
  process_acc_.Clear();
}
inline ::google::protobuf::uint32 BlobQuest::process_acc(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.process_acc)
  return process_acc_.Get(index);
}
inline void BlobQuest::set_process_acc(int index, ::google::protobuf::uint32 value) {
  process_acc_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobQuest.process_acc)
}
inline void BlobQuest::add_process_acc(::google::protobuf::uint32 value) {
  process_acc_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobQuest.process_acc)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobQuest::process_acc() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobQuest.process_acc)
  return process_acc_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobQuest::mutable_process_acc() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobQuest.process_acc)
  return &process_acc_;
}

// optional .Cmd.BlobQuestPuzzle puzzle = 15;
inline bool BlobQuest::has_puzzle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlobQuest::set_has_puzzle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlobQuest::clear_has_puzzle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlobQuest::clear_puzzle() {
  if (puzzle_ != NULL) puzzle_->::Cmd::BlobQuestPuzzle::Clear();
  clear_has_puzzle();
}
inline const ::Cmd::BlobQuestPuzzle& BlobQuest::puzzle() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobQuest.puzzle)
  return puzzle_ != NULL ? *puzzle_ : *default_instance_->puzzle_;
}
inline ::Cmd::BlobQuestPuzzle* BlobQuest::mutable_puzzle() {
  set_has_puzzle();
  if (puzzle_ == NULL) puzzle_ = new ::Cmd::BlobQuestPuzzle;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobQuest.puzzle)
  return puzzle_;
}
inline ::Cmd::BlobQuestPuzzle* BlobQuest::release_puzzle() {
  clear_has_puzzle();
  ::Cmd::BlobQuestPuzzle* temp = puzzle_;
  puzzle_ = NULL;
  return temp;
}
inline void BlobQuest::set_allocated_puzzle(::Cmd::BlobQuestPuzzle* puzzle) {
  delete puzzle_;
  puzzle_ = puzzle;
  if (puzzle) {
    set_has_puzzle();
  } else {
    clear_has_puzzle();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobQuest.puzzle)
}

// -------------------------------------------------------------------

// BlobTitle

// optional uint32 curTitle = 1 [default = 0];
inline bool BlobTitle::has_curtitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobTitle::set_has_curtitle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobTitle::clear_has_curtitle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobTitle::clear_curtitle() {
  curtitle_ = 0u;
  clear_has_curtitle();
}
inline ::google::protobuf::uint32 BlobTitle::curtitle() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTitle.curTitle)
  return curtitle_;
}
inline void BlobTitle::set_curtitle(::google::protobuf::uint32 value) {
  set_has_curtitle();
  curtitle_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTitle.curTitle)
}

// repeated .Cmd.TitleData datas = 2;
inline int BlobTitle::datas_size() const {
  return datas_.size();
}
inline void BlobTitle::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::TitleData& BlobTitle::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTitle.datas)
  return datas_.Get(index);
}
inline ::Cmd::TitleData* BlobTitle::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTitle.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::TitleData* BlobTitle::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobTitle.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TitleData >&
BlobTitle::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTitle.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TitleData >*
BlobTitle::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTitle.datas)
  return &datas_;
}

// optional uint32 curAchieveTitle = 3 [default = 0];
inline bool BlobTitle::has_curachievetitle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobTitle::set_has_curachievetitle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobTitle::clear_has_curachievetitle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobTitle::clear_curachievetitle() {
  curachievetitle_ = 0u;
  clear_has_curachievetitle();
}
inline ::google::protobuf::uint32 BlobTitle::curachievetitle() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTitle.curAchieveTitle)
  return curachievetitle_;
}
inline void BlobTitle::set_curachievetitle(::google::protobuf::uint32 value) {
  set_has_curachievetitle();
  curachievetitle_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTitle.curAchieveTitle)
}

// -------------------------------------------------------------------

// BlobLineData

// optional uint64 otherid = 1;
inline bool BlobLineData::has_otherid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobLineData::set_has_otherid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobLineData::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobLineData::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 BlobLineData::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLineData.otherid)
  return otherid_;
}
inline void BlobLineData::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobLineData.otherid)
}

// optional uint32 expireTime = 2;
inline bool BlobLineData::has_expiretime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobLineData::set_has_expiretime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobLineData::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobLineData::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 BlobLineData::expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLineData.expireTime)
  return expiretime_;
}
inline void BlobLineData::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobLineData.expireTime)
}

// -------------------------------------------------------------------

// BlobLine

// repeated .Cmd.BlobLineData ilinewho = 1;
inline int BlobLine::ilinewho_size() const {
  return ilinewho_.size();
}
inline void BlobLine::clear_ilinewho() {
  ilinewho_.Clear();
}
inline const ::Cmd::BlobLineData& BlobLine::ilinewho(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLine.ilinewho)
  return ilinewho_.Get(index);
}
inline ::Cmd::BlobLineData* BlobLine::mutable_ilinewho(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobLine.ilinewho)
  return ilinewho_.Mutable(index);
}
inline ::Cmd::BlobLineData* BlobLine::add_ilinewho() {
  // @@protoc_insertion_point(field_add:Cmd.BlobLine.ilinewho)
  return ilinewho_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >&
BlobLine::ilinewho() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobLine.ilinewho)
  return ilinewho_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >*
BlobLine::mutable_ilinewho() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobLine.ilinewho)
  return &ilinewho_;
}

// repeated .Cmd.BlobLineData wholineme = 2;
inline int BlobLine::wholineme_size() const {
  return wholineme_.size();
}
inline void BlobLine::clear_wholineme() {
  wholineme_.Clear();
}
inline const ::Cmd::BlobLineData& BlobLine::wholineme(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLine.wholineme)
  return wholineme_.Get(index);
}
inline ::Cmd::BlobLineData* BlobLine::mutable_wholineme(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobLine.wholineme)
  return wholineme_.Mutable(index);
}
inline ::Cmd::BlobLineData* BlobLine::add_wholineme() {
  // @@protoc_insertion_point(field_add:Cmd.BlobLine.wholineme)
  return wholineme_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >&
BlobLine::wholineme() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobLine.wholineme)
  return wholineme_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >*
BlobLine::mutable_wholineme() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobLine.wholineme)
  return &wholineme_;
}

// -------------------------------------------------------------------

// BlobSpEffect

// repeated .Cmd.SpEffectData data = 1;
inline int BlobSpEffect::data_size() const {
  return data_.size();
}
inline void BlobSpEffect::clear_data() {
  data_.Clear();
}
inline const ::Cmd::SpEffectData& BlobSpEffect::data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSpEffect.data)
  return data_.Get(index);
}
inline ::Cmd::SpEffectData* BlobSpEffect::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobSpEffect.data)
  return data_.Mutable(index);
}
inline ::Cmd::SpEffectData* BlobSpEffect::add_data() {
  // @@protoc_insertion_point(field_add:Cmd.BlobSpEffect.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >&
BlobSpEffect::data() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobSpEffect.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >*
BlobSpEffect::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobSpEffect.data)
  return &data_;
}

// repeated .Cmd.BlobLineData wholineme = 2;
inline int BlobSpEffect::wholineme_size() const {
  return wholineme_.size();
}
inline void BlobSpEffect::clear_wholineme() {
  wholineme_.Clear();
}
inline const ::Cmd::BlobLineData& BlobSpEffect::wholineme(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSpEffect.wholineme)
  return wholineme_.Get(index);
}
inline ::Cmd::BlobLineData* BlobSpEffect::mutable_wholineme(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobSpEffect.wholineme)
  return wholineme_.Mutable(index);
}
inline ::Cmd::BlobLineData* BlobSpEffect::add_wholineme() {
  // @@protoc_insertion_point(field_add:Cmd.BlobSpEffect.wholineme)
  return wholineme_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >&
BlobSpEffect::wholineme() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobSpEffect.wholineme)
  return wholineme_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobLineData >*
BlobSpEffect::mutable_wholineme() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobSpEffect.wholineme)
  return &wholineme_;
}

// -------------------------------------------------------------------

// BlobHandNpc

// optional uint32 version = 1 [default = 0];
inline bool BlobHandNpc::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobHandNpc::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobHandNpc::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobHandNpc::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobHandNpc::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHandNpc.version)
  return version_;
}
inline void BlobHandNpc::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHandNpc.version)
}

// optional .Cmd.HandNpcData data = 2;
inline bool BlobHandNpc::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobHandNpc::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobHandNpc::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobHandNpc::clear_data() {
  if (data_ != NULL) data_->::Cmd::HandNpcData::Clear();
  clear_has_data();
}
inline const ::Cmd::HandNpcData& BlobHandNpc::data() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHandNpc.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::HandNpcData* BlobHandNpc::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::HandNpcData;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobHandNpc.data)
  return data_;
}
inline ::Cmd::HandNpcData* BlobHandNpc::release_data() {
  clear_has_data();
  ::Cmd::HandNpcData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void BlobHandNpc::set_allocated_data(::Cmd::HandNpcData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobHandNpc.data)
}

// optional uint32 endtime = 3;
inline bool BlobHandNpc::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobHandNpc::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobHandNpc::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobHandNpc::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 BlobHandNpc::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobHandNpc.endtime)
  return endtime_;
}
inline void BlobHandNpc::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobHandNpc.endtime)
}

// -------------------------------------------------------------------

// BlobPet

// optional uint32 activePet = 1 [default = 0];
inline bool BlobPet::has_activepet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobPet::set_has_activepet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobPet::clear_has_activepet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobPet::clear_activepet() {
  activepet_ = 0u;
  clear_has_activepet();
}
inline ::google::protobuf::uint32 BlobPet::activepet() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPet.activePet)
  return activepet_;
}
inline void BlobPet::set_activepet(::google::protobuf::uint32 value) {
  set_has_activepet();
  activepet_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPet.activePet)
}

// optional uint32 activePartner = 2 [default = 0];
inline bool BlobPet::has_activepartner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobPet::set_has_activepartner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobPet::clear_has_activepartner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobPet::clear_activepartner() {
  activepartner_ = 0u;
  clear_has_activepartner();
}
inline ::google::protobuf::uint32 BlobPet::activepartner() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPet.activePartner)
  return activepartner_;
}
inline void BlobPet::set_activepartner(::google::protobuf::uint32 value) {
  set_has_activepartner();
  activepartner_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPet.activePartner)
}

// repeated .Cmd.PetData datas = 3;
inline int BlobPet::datas_size() const {
  return datas_.size();
}
inline void BlobPet::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::PetData& BlobPet::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPet.datas)
  return datas_.Get(index);
}
inline ::Cmd::PetData* BlobPet::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPet.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::PetData* BlobPet::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPet.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetData >&
BlobPet::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPet.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetData >*
BlobPet::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPet.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// BlobWeaponPet

// optional uint32 version = 1 [default = 0];
inline bool BlobWeaponPet::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobWeaponPet::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobWeaponPet::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobWeaponPet::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobWeaponPet::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobWeaponPet.version)
  return version_;
}
inline void BlobWeaponPet::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobWeaponPet.version)
}

// repeated .Cmd.WeaponPetData datas = 2;
inline int BlobWeaponPet::datas_size() const {
  return datas_.size();
}
inline void BlobWeaponPet::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::WeaponPetData& BlobWeaponPet::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobWeaponPet.datas)
  return datas_.Get(index);
}
inline ::Cmd::WeaponPetData* BlobWeaponPet::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobWeaponPet.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::WeaponPetData* BlobWeaponPet::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobWeaponPet.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeaponPetData >&
BlobWeaponPet::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobWeaponPet.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeaponPetData >*
BlobWeaponPet::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobWeaponPet.datas)
  return &datas_;
}

// optional uint32 maxpetsize = 3 [default = 0];
inline bool BlobWeaponPet::has_maxpetsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobWeaponPet::set_has_maxpetsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobWeaponPet::clear_has_maxpetsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobWeaponPet::clear_maxpetsize() {
  maxpetsize_ = 0u;
  clear_has_maxpetsize();
}
inline ::google::protobuf::uint32 BlobWeaponPet::maxpetsize() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobWeaponPet.maxpetsize)
  return maxpetsize_;
}
inline void BlobWeaponPet::set_maxpetsize(::google::protobuf::uint32 value) {
  set_has_maxpetsize();
  maxpetsize_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobWeaponPet.maxpetsize)
}

// repeated uint32 unlockids = 4;
inline int BlobWeaponPet::unlockids_size() const {
  return unlockids_.size();
}
inline void BlobWeaponPet::clear_unlockids() {
  unlockids_.Clear();
}
inline ::google::protobuf::uint32 BlobWeaponPet::unlockids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobWeaponPet.unlockids)
  return unlockids_.Get(index);
}
inline void BlobWeaponPet::set_unlockids(int index, ::google::protobuf::uint32 value) {
  unlockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobWeaponPet.unlockids)
}
inline void BlobWeaponPet::add_unlockids(::google::protobuf::uint32 value) {
  unlockids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobWeaponPet.unlockids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobWeaponPet::unlockids() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobWeaponPet.unlockids)
  return unlockids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobWeaponPet::mutable_unlockids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobWeaponPet.unlockids)
  return &unlockids_;
}

// -------------------------------------------------------------------

// BlobVar

// repeated .Cmd.Var datas = 1;
inline int BlobVar::datas_size() const {
  return datas_.size();
}
inline void BlobVar::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::Var& BlobVar::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobVar.datas)
  return datas_.Get(index);
}
inline ::Cmd::Var* BlobVar::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobVar.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::Var* BlobVar::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobVar.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Var >&
BlobVar::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobVar.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::Var >*
BlobVar::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobVar.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// BlobAccVar

// repeated .Cmd.AccVar datas = 1;
inline int BlobAccVar::datas_size() const {
  return datas_.size();
}
inline void BlobAccVar::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::AccVar& BlobAccVar::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccVar.datas)
  return datas_.Get(index);
}
inline ::Cmd::AccVar* BlobAccVar::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAccVar.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::AccVar* BlobAccVar::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAccVar.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AccVar >&
BlobAccVar::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAccVar.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AccVar >*
BlobAccVar::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAccVar.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// SkillDamage

// optional uint32 skillid = 1;
inline bool SkillDamage::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDamage::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDamage::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDamage::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 SkillDamage::skillid() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillDamage.skillid)
  return skillid_;
}
inline void SkillDamage::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillDamage.skillid)
}

// optional uint32 damage = 2;
inline bool SkillDamage::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDamage::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDamage::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDamage::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 SkillDamage::damage() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillDamage.damage)
  return damage_;
}
inline void SkillDamage::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillDamage.damage)
}

// optional uint32 type = 3;
inline bool SkillDamage::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillDamage::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillDamage::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillDamage::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SkillDamage::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillDamage.type)
  return type_;
}
inline void SkillDamage::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillDamage.type)
}

// optional uint64 targetid = 4;
inline bool SkillDamage::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillDamage::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillDamage::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillDamage::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 SkillDamage::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillDamage.targetid)
  return targetid_;
}
inline void SkillDamage::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillDamage.targetid)
}

// -------------------------------------------------------------------

// StatKillMonster

// required uint32 monsterid = 1;
inline bool StatKillMonster::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatKillMonster::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatKillMonster::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatKillMonster::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 StatKillMonster::monsterid() const {
  // @@protoc_insertion_point(field_get:Cmd.StatKillMonster.monsterid)
  return monsterid_;
}
inline void StatKillMonster::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatKillMonster.monsterid)
}

// required uint32 killnum = 2;
inline bool StatKillMonster::has_killnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatKillMonster::set_has_killnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatKillMonster::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatKillMonster::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 StatKillMonster::killnum() const {
  // @@protoc_insertion_point(field_get:Cmd.StatKillMonster.killnum)
  return killnum_;
}
inline void StatKillMonster::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatKillMonster.killnum)
}

// -------------------------------------------------------------------

// BlobStatVar

// repeated .Cmd.StatVar datas = 1;
inline int BlobStatVar::datas_size() const {
  return datas_.size();
}
inline void BlobStatVar::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::StatVar& BlobStatVar::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobStatVar.datas)
  return datas_.Get(index);
}
inline ::Cmd::StatVar* BlobStatVar::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobStatVar.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::StatVar* BlobStatVar::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobStatVar.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StatVar >&
BlobStatVar::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobStatVar.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StatVar >*
BlobStatVar::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobStatVar.datas)
  return &datas_;
}

// repeated .Cmd.SkillDamage skilldamage = 2;
inline int BlobStatVar::skilldamage_size() const {
  return skilldamage_.size();
}
inline void BlobStatVar::clear_skilldamage() {
  skilldamage_.Clear();
}
inline const ::Cmd::SkillDamage& BlobStatVar::skilldamage(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobStatVar.skilldamage)
  return skilldamage_.Get(index);
}
inline ::Cmd::SkillDamage* BlobStatVar::mutable_skilldamage(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobStatVar.skilldamage)
  return skilldamage_.Mutable(index);
}
inline ::Cmd::SkillDamage* BlobStatVar::add_skilldamage() {
  // @@protoc_insertion_point(field_add:Cmd.BlobStatVar.skilldamage)
  return skilldamage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillDamage >&
BlobStatVar::skilldamage() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobStatVar.skilldamage)
  return skilldamage_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillDamage >*
BlobStatVar::mutable_skilldamage() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobStatVar.skilldamage)
  return &skilldamage_;
}

// repeated .Cmd.StatKillMonster killmonster = 3;
inline int BlobStatVar::killmonster_size() const {
  return killmonster_.size();
}
inline void BlobStatVar::clear_killmonster() {
  killmonster_.Clear();
}
inline const ::Cmd::StatKillMonster& BlobStatVar::killmonster(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobStatVar.killmonster)
  return killmonster_.Get(index);
}
inline ::Cmd::StatKillMonster* BlobStatVar::mutable_killmonster(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobStatVar.killmonster)
  return killmonster_.Mutable(index);
}
inline ::Cmd::StatKillMonster* BlobStatVar::add_killmonster() {
  // @@protoc_insertion_point(field_add:Cmd.BlobStatVar.killmonster)
  return killmonster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >&
BlobStatVar::killmonster() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobStatVar.killmonster)
  return killmonster_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >*
BlobStatVar::mutable_killmonster() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobStatVar.killmonster)
  return &killmonster_;
}

// -------------------------------------------------------------------

// BlobChatMsg

// repeated .Cmd.PresetMsg preset = 1;
inline int BlobChatMsg::preset_size() const {
  return preset_.size();
}
inline void BlobChatMsg::clear_preset() {
  preset_.Clear();
}
inline const ::Cmd::PresetMsg& BlobChatMsg::preset(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobChatMsg.preset)
  return preset_.Get(index);
}
inline ::Cmd::PresetMsg* BlobChatMsg::mutable_preset(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobChatMsg.preset)
  return preset_.Mutable(index);
}
inline ::Cmd::PresetMsg* BlobChatMsg::add_preset() {
  // @@protoc_insertion_point(field_add:Cmd.BlobChatMsg.preset)
  return preset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PresetMsg >&
BlobChatMsg::preset() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobChatMsg.preset)
  return preset_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PresetMsg >*
BlobChatMsg::mutable_preset() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobChatMsg.preset)
  return &preset_;
}

// -------------------------------------------------------------------

// BlobUserTower

// optional .Cmd.UserTowerInfo towerinfo = 1;
inline bool BlobUserTower::has_towerinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobUserTower::set_has_towerinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobUserTower::clear_has_towerinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobUserTower::clear_towerinfo() {
  if (towerinfo_ != NULL) towerinfo_->::Cmd::UserTowerInfo::Clear();
  clear_has_towerinfo();
}
inline const ::Cmd::UserTowerInfo& BlobUserTower::towerinfo() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserTower.towerinfo)
  return towerinfo_ != NULL ? *towerinfo_ : *default_instance_->towerinfo_;
}
inline ::Cmd::UserTowerInfo* BlobUserTower::mutable_towerinfo() {
  set_has_towerinfo();
  if (towerinfo_ == NULL) towerinfo_ = new ::Cmd::UserTowerInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserTower.towerinfo)
  return towerinfo_;
}
inline ::Cmd::UserTowerInfo* BlobUserTower::release_towerinfo() {
  clear_has_towerinfo();
  ::Cmd::UserTowerInfo* temp = towerinfo_;
  towerinfo_ = NULL;
  return temp;
}
inline void BlobUserTower::set_allocated_towerinfo(::Cmd::UserTowerInfo* towerinfo) {
  delete towerinfo_;
  towerinfo_ = towerinfo;
  if (towerinfo) {
    set_has_towerinfo();
  } else {
    clear_has_towerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserTower.towerinfo)
}

// optional uint32 cleartime = 2 [default = 0];
inline bool BlobUserTower::has_cleartime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobUserTower::set_has_cleartime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobUserTower::clear_has_cleartime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobUserTower::clear_cleartime() {
  cleartime_ = 0u;
  clear_has_cleartime();
}
inline ::google::protobuf::uint32 BlobUserTower::cleartime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserTower.cleartime)
  return cleartime_;
}
inline void BlobUserTower::set_cleartime(::google::protobuf::uint32 value) {
  set_has_cleartime();
  cleartime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserTower.cleartime)
}

// -------------------------------------------------------------------

// BlobSeal

// repeated .Cmd.SealData datas = 1;
inline int BlobSeal::datas_size() const {
  return datas_.size();
}
inline void BlobSeal::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::SealData& BlobSeal::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSeal.datas)
  return datas_.Get(index);
}
inline ::Cmd::SealData* BlobSeal::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobSeal.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::SealData* BlobSeal::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobSeal.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
BlobSeal::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobSeal.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
BlobSeal::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobSeal.datas)
  return &datas_;
}

// repeated .Cmd.SealData questseals = 2;
inline int BlobSeal::questseals_size() const {
  return questseals_.size();
}
inline void BlobSeal::clear_questseals() {
  questseals_.Clear();
}
inline const ::Cmd::SealData& BlobSeal::questseals(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSeal.questseals)
  return questseals_.Get(index);
}
inline ::Cmd::SealData* BlobSeal::mutable_questseals(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobSeal.questseals)
  return questseals_.Mutable(index);
}
inline ::Cmd::SealData* BlobSeal::add_questseals() {
  // @@protoc_insertion_point(field_add:Cmd.BlobSeal.questseals)
  return questseals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
BlobSeal::questseals() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobSeal.questseals)
  return questseals_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
BlobSeal::mutable_questseals() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobSeal.questseals)
  return &questseals_;
}

// optional uint32 nexttime = 3 [default = 0];
inline bool BlobSeal::has_nexttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobSeal::set_has_nexttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobSeal::clear_has_nexttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobSeal::clear_nexttime() {
  nexttime_ = 0u;
  clear_has_nexttime();
}
inline ::google::protobuf::uint32 BlobSeal::nexttime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSeal.nexttime)
  return nexttime_;
}
inline void BlobSeal::set_nexttime(::google::protobuf::uint32 value) {
  set_has_nexttime();
  nexttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobSeal.nexttime)
}

// repeated uint32 openseals = 4;
inline int BlobSeal::openseals_size() const {
  return openseals_.size();
}
inline void BlobSeal::clear_openseals() {
  openseals_.Clear();
}
inline ::google::protobuf::uint32 BlobSeal::openseals(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSeal.openseals)
  return openseals_.Get(index);
}
inline void BlobSeal::set_openseals(int index, ::google::protobuf::uint32 value) {
  openseals_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobSeal.openseals)
}
inline void BlobSeal::add_openseals(::google::protobuf::uint32 value) {
  openseals_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobSeal.openseals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobSeal::openseals() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobSeal.openseals)
  return openseals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobSeal::mutable_openseals() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobSeal.openseals)
  return &openseals_;
}

// -------------------------------------------------------------------

// BlobManual

// optional .Cmd.ManualData data = 1;
inline bool BlobManual::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobManual::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobManual::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobManual::clear_data() {
  if (data_ != NULL) data_->::Cmd::ManualData::Clear();
  clear_has_data();
}
inline const ::Cmd::ManualData& BlobManual::data() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobManual.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::ManualData* BlobManual::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::ManualData;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobManual.data)
  return data_;
}
inline ::Cmd::ManualData* BlobManual::release_data() {
  clear_has_data();
  ::Cmd::ManualData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void BlobManual::set_allocated_data(::Cmd::ManualData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobManual.data)
}

// optional bool isadd = 2;
inline bool BlobManual::has_isadd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobManual::set_has_isadd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobManual::clear_has_isadd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobManual::clear_isadd() {
  isadd_ = false;
  clear_has_isadd();
}
inline bool BlobManual::isadd() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobManual.isadd)
  return isadd_;
}
inline void BlobManual::set_isadd(bool value) {
  set_has_isadd();
  isadd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobManual.isadd)
}

// -------------------------------------------------------------------

// BlobFirstActionDone

// optional uint32 action = 1;
inline bool BlobFirstActionDone::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobFirstActionDone::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobFirstActionDone::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobFirstActionDone::clear_action() {
  action_ = 0u;
  clear_has_action();
}
inline ::google::protobuf::uint32 BlobFirstActionDone::action() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobFirstActionDone.action)
  return action_;
}
inline void BlobFirstActionDone::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobFirstActionDone.action)
}

// -------------------------------------------------------------------

// BlobAttr

// repeated .Cmd.UserAttrSvr datas = 1;
inline int BlobAttr::datas_size() const {
  return datas_.size();
}
inline void BlobAttr::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserAttrSvr& BlobAttr::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAttr.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserAttrSvr* BlobAttr::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAttr.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserAttrSvr* BlobAttr::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAttr.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >&
BlobAttr::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAttr.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttrSvr >*
BlobAttr::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAttr.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// MonsterNum

// optional uint32 monsterid = 1;
inline bool MonsterNum::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterNum::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterNum::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterNum::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 MonsterNum::monsterid() const {
  // @@protoc_insertion_point(field_get:Cmd.MonsterNum.monsterid)
  return monsterid_;
}
inline void MonsterNum::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MonsterNum.monsterid)
}

// optional uint32 count = 2;
inline bool MonsterNum::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterNum::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterNum::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterNum::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 MonsterNum::count() const {
  // @@protoc_insertion_point(field_get:Cmd.MonsterNum.count)
  return count_;
}
inline void MonsterNum::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MonsterNum.count)
}

// -------------------------------------------------------------------

// BlobCamera

// optional uint32 version = 1;
inline bool BlobCamera::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobCamera::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobCamera::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobCamera::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobCamera::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCamera.version)
  return version_;
}
inline void BlobCamera::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCamera.version)
}

// repeated .Cmd.MonsterNum monsters = 2;
inline int BlobCamera::monsters_size() const {
  return monsters_.size();
}
inline void BlobCamera::clear_monsters() {
  monsters_.Clear();
}
inline const ::Cmd::MonsterNum& BlobCamera::monsters(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCamera.monsters)
  return monsters_.Get(index);
}
inline ::Cmd::MonsterNum* BlobCamera::mutable_monsters(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobCamera.monsters)
  return monsters_.Mutable(index);
}
inline ::Cmd::MonsterNum* BlobCamera::add_monsters() {
  // @@protoc_insertion_point(field_add:Cmd.BlobCamera.monsters)
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MonsterNum >&
BlobCamera::monsters() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobCamera.monsters)
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MonsterNum >*
BlobCamera::mutable_monsters() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobCamera.monsters)
  return &monsters_;
}

// -------------------------------------------------------------------

// RaidZone

// optional uint32 raidid = 1 [default = 0];
inline bool RaidZone::has_raidid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaidZone::set_has_raidid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaidZone::clear_has_raidid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaidZone::clear_raidid() {
  raidid_ = 0u;
  clear_has_raidid();
}
inline ::google::protobuf::uint32 RaidZone::raidid() const {
  // @@protoc_insertion_point(field_get:Cmd.RaidZone.raidid)
  return raidid_;
}
inline void RaidZone::set_raidid(::google::protobuf::uint32 value) {
  set_has_raidid();
  raidid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RaidZone.raidid)
}

// optional uint32 zoneid = 2 [default = 0];
inline bool RaidZone::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaidZone::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaidZone::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaidZone::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 RaidZone::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.RaidZone.zoneid)
  return zoneid_;
}
inline void RaidZone::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RaidZone.zoneid)
}

// -------------------------------------------------------------------

// BlobZone

// optional uint32 version = 1;
inline bool BlobZone::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobZone::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobZone::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobZone::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobZone::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.version)
  return version_;
}
inline void BlobZone::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.version)
}

// optional uint32 zoneid = 2;
inline bool BlobZone::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobZone::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobZone::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobZone::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 BlobZone::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.zoneid)
  return zoneid_;
}
inline void BlobZone::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.zoneid)
}

// optional uint32 mapid = 3;
inline bool BlobZone::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobZone::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobZone::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobZone::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 BlobZone::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.mapid)
  return mapid_;
}
inline void BlobZone::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.mapid)
}

// optional bytes cmd = 4;
inline bool BlobZone::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobZone::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobZone::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobZone::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& BlobZone::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.cmd)
  return *cmd_;
}
inline void BlobZone::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.cmd)
}
inline void BlobZone::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobZone.cmd)
}
inline void BlobZone::set_cmd(const void* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobZone.cmd)
}
inline ::std::string* BlobZone::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobZone.cmd)
  return cmd_;
}
inline ::std::string* BlobZone::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobZone::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobZone.cmd)
}

// optional uint32 pastzoneid = 5;
inline bool BlobZone::has_pastzoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobZone::set_has_pastzoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobZone::clear_has_pastzoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobZone::clear_pastzoneid() {
  pastzoneid_ = 0u;
  clear_has_pastzoneid();
}
inline ::google::protobuf::uint32 BlobZone::pastzoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.pastzoneid)
  return pastzoneid_;
}
inline void BlobZone::set_pastzoneid(::google::protobuf::uint32 value) {
  set_has_pastzoneid();
  pastzoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.pastzoneid)
}

// repeated .Cmd.RaidZone raidzonelist = 6;
inline int BlobZone::raidzonelist_size() const {
  return raidzonelist_.size();
}
inline void BlobZone::clear_raidzonelist() {
  raidzonelist_.Clear();
}
inline const ::Cmd::RaidZone& BlobZone::raidzonelist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.raidzonelist)
  return raidzonelist_.Get(index);
}
inline ::Cmd::RaidZone* BlobZone::mutable_raidzonelist(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobZone.raidzonelist)
  return raidzonelist_.Mutable(index);
}
inline ::Cmd::RaidZone* BlobZone::add_raidzonelist() {
  // @@protoc_insertion_point(field_add:Cmd.BlobZone.raidzonelist)
  return raidzonelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RaidZone >&
BlobZone::raidzonelist() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobZone.raidzonelist)
  return raidzonelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RaidZone >*
BlobZone::mutable_raidzonelist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobZone.raidzonelist)
  return &raidzonelist_;
}

// optional uint32 effectivetime = 7;
inline bool BlobZone::has_effectivetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobZone::set_has_effectivetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobZone::clear_has_effectivetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobZone::clear_effectivetime() {
  effectivetime_ = 0u;
  clear_has_effectivetime();
}
inline ::google::protobuf::uint32 BlobZone::effectivetime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.effectivetime)
  return effectivetime_;
}
inline void BlobZone::set_effectivetime(::google::protobuf::uint32 value) {
  set_has_effectivetime();
  effectivetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.effectivetime)
}

// optional uint32 type = 8 [default = 0];
inline bool BlobZone::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobZone::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobZone::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobZone::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 BlobZone::type() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.type)
  return type_;
}
inline void BlobZone::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.type)
}

// optional uint64 roomid = 9;
inline bool BlobZone::has_roomid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobZone::set_has_roomid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobZone::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobZone::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 BlobZone::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.roomid)
  return roomid_;
}
inline void BlobZone::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.roomid)
}

// optional uint32 colorindex = 10;
inline bool BlobZone::has_colorindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlobZone::set_has_colorindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlobZone::clear_has_colorindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlobZone::clear_colorindex() {
  colorindex_ = 0u;
  clear_has_colorindex();
}
inline ::google::protobuf::uint32 BlobZone::colorindex() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.colorindex)
  return colorindex_;
}
inline void BlobZone::set_colorindex(::google::protobuf::uint32 value) {
  set_has_colorindex();
  colorindex_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.colorindex)
}

// optional float x = 11 [default = 0];
inline bool BlobZone::has_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlobZone::set_has_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlobZone::clear_has_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlobZone::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BlobZone::x() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.x)
  return x_;
}
inline void BlobZone::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.x)
}

// optional float y = 12 [default = 0];
inline bool BlobZone::has_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlobZone::set_has_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlobZone::clear_has_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlobZone::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BlobZone::y() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.y)
  return y_;
}
inline void BlobZone::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.y)
}

// optional float z = 13 [default = 0];
inline bool BlobZone::has_z() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlobZone::set_has_z() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlobZone::clear_has_z() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlobZone::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float BlobZone::z() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobZone.z)
  return z_;
}
inline void BlobZone::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobZone.z)
}

// -------------------------------------------------------------------

// BlobGuild

// optional .Cmd.GuildInfo info = 1;
inline bool BlobGuild::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobGuild::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobGuild::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobGuild::clear_info() {
  if (info_ != NULL) info_->::Cmd::GuildInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::GuildInfo& BlobGuild::info() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGuild.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::GuildInfo* BlobGuild::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::GuildInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGuild.info)
  return info_;
}
inline ::Cmd::GuildInfo* BlobGuild::release_info() {
  clear_has_info();
  ::Cmd::GuildInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void BlobGuild::set_allocated_info(::Cmd::GuildInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobGuild.info)
}

// -------------------------------------------------------------------

// BlobTeam

// optional .Cmd.TeamInfo info = 2;
inline bool BlobTeam::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobTeam::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobTeam::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobTeam::clear_info() {
  if (info_ != NULL) info_->::Cmd::TeamInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::TeamInfo& BlobTeam::info() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTeam.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::TeamInfo* BlobTeam::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::TeamInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTeam.info)
  return info_;
}
inline ::Cmd::TeamInfo* BlobTeam::release_info() {
  clear_has_info();
  ::Cmd::TeamInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void BlobTeam::set_allocated_info(::Cmd::TeamInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobTeam.info)
}

// -------------------------------------------------------------------

// BlobUserZone

// repeated .Cmd.RecentZoneInfo infos = 3;
inline int BlobUserZone::infos_size() const {
  return infos_.size();
}
inline void BlobUserZone::clear_infos() {
  infos_.Clear();
}
inline const ::Cmd::RecentZoneInfo& BlobUserZone::infos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserZone.infos)
  return infos_.Get(index);
}
inline ::Cmd::RecentZoneInfo* BlobUserZone::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserZone.infos)
  return infos_.Mutable(index);
}
inline ::Cmd::RecentZoneInfo* BlobUserZone::add_infos() {
  // @@protoc_insertion_point(field_add:Cmd.BlobUserZone.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >&
BlobUserZone::infos() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUserZone.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >*
BlobUserZone::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUserZone.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// BlobAccQuest

// repeated uint32 accept_ids = 1;
inline int BlobAccQuest::accept_ids_size() const {
  return accept_ids_.size();
}
inline void BlobAccQuest::clear_accept_ids() {
  accept_ids_.Clear();
}
inline ::google::protobuf::uint32 BlobAccQuest::accept_ids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccQuest.accept_ids)
  return accept_ids_.Get(index);
}
inline void BlobAccQuest::set_accept_ids(int index, ::google::protobuf::uint32 value) {
  accept_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobAccQuest.accept_ids)
}
inline void BlobAccQuest::add_accept_ids(::google::protobuf::uint32 value) {
  accept_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobAccQuest.accept_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobAccQuest::accept_ids() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAccQuest.accept_ids)
  return accept_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobAccQuest::mutable_accept_ids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAccQuest.accept_ids)
  return &accept_ids_;
}

// repeated uint32 choice_ids = 2;
inline int BlobAccQuest::choice_ids_size() const {
  return choice_ids_.size();
}
inline void BlobAccQuest::clear_choice_ids() {
  choice_ids_.Clear();
}
inline ::google::protobuf::uint32 BlobAccQuest::choice_ids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccQuest.choice_ids)
  return choice_ids_.Get(index);
}
inline void BlobAccQuest::set_choice_ids(int index, ::google::protobuf::uint32 value) {
  choice_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobAccQuest.choice_ids)
}
inline void BlobAccQuest::add_choice_ids(::google::protobuf::uint32 value) {
  choice_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobAccQuest.choice_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobAccQuest::choice_ids() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAccQuest.choice_ids)
  return choice_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobAccQuest::mutable_choice_ids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAccQuest.choice_ids)
  return &choice_ids_;
}

// optional uint32 version = 3 [default = 0];
inline bool BlobAccQuest::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobAccQuest::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobAccQuest::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobAccQuest::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobAccQuest::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAccQuest.version)
  return version_;
}
inline void BlobAccQuest::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAccQuest.version)
}

// -------------------------------------------------------------------

// BlobGlobalTower

// optional .Cmd.TowerInfo info = 1;
inline bool BlobGlobalTower::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobGlobalTower::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobGlobalTower::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobGlobalTower::clear_info() {
  if (info_ != NULL) info_->::Cmd::TowerInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::TowerInfo& BlobGlobalTower::info() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGlobalTower.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::TowerInfo* BlobGlobalTower::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::TowerInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGlobalTower.info)
  return info_;
}
inline ::Cmd::TowerInfo* BlobGlobalTower::release_info() {
  clear_has_info();
  ::Cmd::TowerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void BlobGlobalTower::set_allocated_info(::Cmd::TowerInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobGlobalTower.info)
}

// optional .Cmd.BlobVar var = 2;
inline bool BlobGlobalTower::has_var() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobGlobalTower::set_has_var() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobGlobalTower::clear_has_var() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobGlobalTower::clear_var() {
  if (var_ != NULL) var_->::Cmd::BlobVar::Clear();
  clear_has_var();
}
inline const ::Cmd::BlobVar& BlobGlobalTower::var() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGlobalTower.var)
  return var_ != NULL ? *var_ : *default_instance_->var_;
}
inline ::Cmd::BlobVar* BlobGlobalTower::mutable_var() {
  set_has_var();
  if (var_ == NULL) var_ = new ::Cmd::BlobVar;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGlobalTower.var)
  return var_;
}
inline ::Cmd::BlobVar* BlobGlobalTower::release_var() {
  clear_has_var();
  ::Cmd::BlobVar* temp = var_;
  var_ = NULL;
  return temp;
}
inline void BlobGlobalTower::set_allocated_var(::Cmd::BlobVar* var) {
  delete var_;
  var_ = var;
  if (var) {
    set_has_var();
  } else {
    clear_has_var();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobGlobalTower.var)
}

// -------------------------------------------------------------------

// GlobalSocialFocus

// optional uint64 guid = 1 [default = 0];
inline bool GlobalSocialFocus::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalSocialFocus::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalSocialFocus::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalSocialFocus::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GlobalSocialFocus::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.GlobalSocialFocus.guid)
  return guid_;
}
inline void GlobalSocialFocus::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GlobalSocialFocus.guid)
}

// repeated uint64 guids = 2;
inline int GlobalSocialFocus::guids_size() const {
  return guids_.size();
}
inline void GlobalSocialFocus::clear_guids() {
  guids_.Clear();
}
inline ::google::protobuf::uint64 GlobalSocialFocus::guids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GlobalSocialFocus.guids)
  return guids_.Get(index);
}
inline void GlobalSocialFocus::set_guids(int index, ::google::protobuf::uint64 value) {
  guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.GlobalSocialFocus.guids)
}
inline void GlobalSocialFocus::add_guids(::google::protobuf::uint64 value) {
  guids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.GlobalSocialFocus.guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GlobalSocialFocus::guids() const {
  // @@protoc_insertion_point(field_list:Cmd.GlobalSocialFocus.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GlobalSocialFocus::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GlobalSocialFocus.guids)
  return &guids_;
}

// -------------------------------------------------------------------

// BlobGlobalSociality

// repeated uint64 applys = 1;
inline int BlobGlobalSociality::applys_size() const {
  return applys_.size();
}
inline void BlobGlobalSociality::clear_applys() {
  applys_.Clear();
}
inline ::google::protobuf::uint64 BlobGlobalSociality::applys(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGlobalSociality.applys)
  return applys_.Get(index);
}
inline void BlobGlobalSociality::set_applys(int index, ::google::protobuf::uint64 value) {
  applys_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobGlobalSociality.applys)
}
inline void BlobGlobalSociality::add_applys(::google::protobuf::uint64 value) {
  applys_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobGlobalSociality.applys)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BlobGlobalSociality::applys() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGlobalSociality.applys)
  return applys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BlobGlobalSociality::mutable_applys() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGlobalSociality.applys)
  return &applys_;
}

// repeated .Cmd.GlobalSocialFocus focuss = 2;
inline int BlobGlobalSociality::focuss_size() const {
  return focuss_.size();
}
inline void BlobGlobalSociality::clear_focuss() {
  focuss_.Clear();
}
inline const ::Cmd::GlobalSocialFocus& BlobGlobalSociality::focuss(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGlobalSociality.focuss)
  return focuss_.Get(index);
}
inline ::Cmd::GlobalSocialFocus* BlobGlobalSociality::mutable_focuss(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGlobalSociality.focuss)
  return focuss_.Mutable(index);
}
inline ::Cmd::GlobalSocialFocus* BlobGlobalSociality::add_focuss() {
  // @@protoc_insertion_point(field_add:Cmd.BlobGlobalSociality.focuss)
  return focuss_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GlobalSocialFocus >&
BlobGlobalSociality::focuss() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGlobalSociality.focuss)
  return focuss_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GlobalSocialFocus >*
BlobGlobalSociality::mutable_focuss() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGlobalSociality.focuss)
  return &focuss_;
}

// -------------------------------------------------------------------

// ChargeData

// optional uint32 time = 1;
inline bool ChargeData::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeData::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeData::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChargeData::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeData.time)
  return time_;
}
inline void ChargeData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeData.time)
}

// optional uint64 money = 2;
inline bool ChargeData::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargeData::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargeData::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargeData::clear_money() {
  money_ = GOOGLE_ULONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::uint64 ChargeData::money() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargeData.money)
  return money_;
}
inline void ChargeData::set_money(::google::protobuf::uint64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargeData.money)
}

// -------------------------------------------------------------------

// BlobDeposit

// repeated .Cmd.DepositTypeData typeDatas = 1;
inline int BlobDeposit::typedatas_size() const {
  return typedatas_.size();
}
inline void BlobDeposit::clear_typedatas() {
  typedatas_.Clear();
}
inline const ::Cmd::DepositTypeData& BlobDeposit::typedatas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.typeDatas)
  return typedatas_.Get(index);
}
inline ::Cmd::DepositTypeData* BlobDeposit::mutable_typedatas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobDeposit.typeDatas)
  return typedatas_.Mutable(index);
}
inline ::Cmd::DepositTypeData* BlobDeposit::add_typedatas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobDeposit.typeDatas)
  return typedatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::DepositTypeData >&
BlobDeposit::typedatas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobDeposit.typeDatas)
  return typedatas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::DepositTypeData >*
BlobDeposit::mutable_typedatas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobDeposit.typeDatas)
  return &typedatas_;
}

// repeated .Cmd.DepositCardData cardDatas = 2;
inline int BlobDeposit::carddatas_size() const {
  return carddatas_.size();
}
inline void BlobDeposit::clear_carddatas() {
  carddatas_.Clear();
}
inline const ::Cmd::DepositCardData& BlobDeposit::carddatas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.cardDatas)
  return carddatas_.Get(index);
}
inline ::Cmd::DepositCardData* BlobDeposit::mutable_carddatas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobDeposit.cardDatas)
  return carddatas_.Mutable(index);
}
inline ::Cmd::DepositCardData* BlobDeposit::add_carddatas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobDeposit.cardDatas)
  return carddatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::DepositCardData >&
BlobDeposit::carddatas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobDeposit.cardDatas)
  return carddatas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::DepositCardData >*
BlobDeposit::mutable_carddatas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobDeposit.cardDatas)
  return &carddatas_;
}

// repeated .Cmd.ChargeData chargeDatas = 3;
inline int BlobDeposit::chargedatas_size() const {
  return chargedatas_.size();
}
inline void BlobDeposit::clear_chargedatas() {
  chargedatas_.Clear();
}
inline const ::Cmd::ChargeData& BlobDeposit::chargedatas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.chargeDatas)
  return chargedatas_.Get(index);
}
inline ::Cmd::ChargeData* BlobDeposit::mutable_chargedatas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobDeposit.chargeDatas)
  return chargedatas_.Mutable(index);
}
inline ::Cmd::ChargeData* BlobDeposit::add_chargedatas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobDeposit.chargeDatas)
  return chargedatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChargeData >&
BlobDeposit::chargedatas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobDeposit.chargeDatas)
  return chargedatas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChargeData >*
BlobDeposit::mutable_chargedatas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobDeposit.chargeDatas)
  return &chargedatas_;
}

// repeated uint32 usedcards = 4;
inline int BlobDeposit::usedcards_size() const {
  return usedcards_.size();
}
inline void BlobDeposit::clear_usedcards() {
  usedcards_.Clear();
}
inline ::google::protobuf::uint32 BlobDeposit::usedcards(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.usedcards)
  return usedcards_.Get(index);
}
inline void BlobDeposit::set_usedcards(int index, ::google::protobuf::uint32 value) {
  usedcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobDeposit.usedcards)
}
inline void BlobDeposit::add_usedcards(::google::protobuf::uint32 value) {
  usedcards_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobDeposit.usedcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobDeposit::usedcards() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobDeposit.usedcards)
  return usedcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobDeposit::mutable_usedcards() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobDeposit.usedcards)
  return &usedcards_;
}

// optional bool hasquota = 5 [default = false];
inline bool BlobDeposit::has_hasquota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobDeposit::set_has_hasquota() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobDeposit::clear_has_hasquota() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobDeposit::clear_hasquota() {
  hasquota_ = false;
  clear_has_hasquota();
}
inline bool BlobDeposit::hasquota() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.hasquota)
  return hasquota_;
}
inline void BlobDeposit::set_hasquota(bool value) {
  set_has_hasquota();
  hasquota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobDeposit.hasquota)
}

// repeated .Cmd.QuotaDetail quota_detail = 6;
inline int BlobDeposit::quota_detail_size() const {
  return quota_detail_.size();
}
inline void BlobDeposit::clear_quota_detail() {
  quota_detail_.Clear();
}
inline const ::Cmd::QuotaDetail& BlobDeposit::quota_detail(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.quota_detail)
  return quota_detail_.Get(index);
}
inline ::Cmd::QuotaDetail* BlobDeposit::mutable_quota_detail(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobDeposit.quota_detail)
  return quota_detail_.Mutable(index);
}
inline ::Cmd::QuotaDetail* BlobDeposit::add_quota_detail() {
  // @@protoc_insertion_point(field_add:Cmd.BlobDeposit.quota_detail)
  return quota_detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >&
BlobDeposit::quota_detail() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobDeposit.quota_detail)
  return quota_detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >*
BlobDeposit::mutable_quota_detail() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobDeposit.quota_detail)
  return &quota_detail_;
}

// repeated .Cmd.QuotaLog quota_log = 7;
inline int BlobDeposit::quota_log_size() const {
  return quota_log_.size();
}
inline void BlobDeposit::clear_quota_log() {
  quota_log_.Clear();
}
inline const ::Cmd::QuotaLog& BlobDeposit::quota_log(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.quota_log)
  return quota_log_.Get(index);
}
inline ::Cmd::QuotaLog* BlobDeposit::mutable_quota_log(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobDeposit.quota_log)
  return quota_log_.Mutable(index);
}
inline ::Cmd::QuotaLog* BlobDeposit::add_quota_log() {
  // @@protoc_insertion_point(field_add:Cmd.BlobDeposit.quota_log)
  return quota_log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >&
BlobDeposit::quota_log() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobDeposit.quota_log)
  return quota_log_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >*
BlobDeposit::mutable_quota_log() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobDeposit.quota_log)
  return &quota_log_;
}

// optional bool getitem = 8 [default = false];
inline bool BlobDeposit::has_getitem() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobDeposit::set_has_getitem() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobDeposit::clear_has_getitem() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobDeposit::clear_getitem() {
  getitem_ = false;
  clear_has_getitem();
}
inline bool BlobDeposit::getitem() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.getitem)
  return getitem_;
}
inline void BlobDeposit::set_getitem(bool value) {
  set_has_getitem();
  getitem_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobDeposit.getitem)
}

// optional uint64 quota_lock = 9 [default = 0];
inline bool BlobDeposit::has_quota_lock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobDeposit::set_has_quota_lock() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobDeposit::clear_has_quota_lock() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobDeposit::clear_quota_lock() {
  quota_lock_ = GOOGLE_ULONGLONG(0);
  clear_has_quota_lock();
}
inline ::google::protobuf::uint64 BlobDeposit::quota_lock() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobDeposit.quota_lock)
  return quota_lock_;
}
inline void BlobDeposit::set_quota_lock(::google::protobuf::uint64 value) {
  set_has_quota_lock();
  quota_lock_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobDeposit.quota_lock)
}

// -------------------------------------------------------------------

// BlobTicketData

// optional .Cmd.ETicketType type = 1;
inline bool BlobTicketData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobTicketData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobTicketData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobTicketData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETicketType BlobTicketData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketData.type)
  return static_cast< ::Cmd::ETicketType >(type_);
}
inline void BlobTicketData::set_type(::Cmd::ETicketType value) {
  assert(::Cmd::ETicketType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketData.type)
}

// optional string guid = 2;
inline bool BlobTicketData::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobTicketData::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobTicketData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobTicketData::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& BlobTicketData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketData.guid)
  return *guid_;
}
inline void BlobTicketData::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketData.guid)
}
inline void BlobTicketData::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobTicketData.guid)
}
inline void BlobTicketData::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobTicketData.guid)
}
inline ::std::string* BlobTicketData::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTicketData.guid)
  return guid_;
}
inline ::std::string* BlobTicketData::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobTicketData::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobTicketData.guid)
}

// optional .Cmd.ETicketRet ret = 3;
inline bool BlobTicketData::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobTicketData::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobTicketData::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobTicketData::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::ETicketRet BlobTicketData::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketData.ret)
  return static_cast< ::Cmd::ETicketRet >(ret_);
}
inline void BlobTicketData::set_ret(::Cmd::ETicketRet value) {
  assert(::Cmd::ETicketRet_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketData.ret)
}

// optional uint32 time = 4;
inline bool BlobTicketData::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobTicketData::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobTicketData::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobTicketData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 BlobTicketData::time() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketData.time)
  return time_;
}
inline void BlobTicketData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketData.time)
}

// -------------------------------------------------------------------

// BlobTicketCacheCmd

// optional .Cmd.ETicketCmdType type = 1;
inline bool BlobTicketCacheCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobTicketCacheCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobTicketCacheCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobTicketCacheCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETicketCmdType BlobTicketCacheCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketCacheCmd.type)
  return static_cast< ::Cmd::ETicketCmdType >(type_);
}
inline void BlobTicketCacheCmd::set_type(::Cmd::ETicketCmdType value) {
  assert(::Cmd::ETicketCmdType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketCacheCmd.type)
}

// optional string guid = 2;
inline bool BlobTicketCacheCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobTicketCacheCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobTicketCacheCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobTicketCacheCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& BlobTicketCacheCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketCacheCmd.guid)
  return *guid_;
}
inline void BlobTicketCacheCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketCacheCmd.guid)
}
inline void BlobTicketCacheCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobTicketCacheCmd.guid)
}
inline void BlobTicketCacheCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobTicketCacheCmd.guid)
}
inline ::std::string* BlobTicketCacheCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTicketCacheCmd.guid)
  return guid_;
}
inline ::std::string* BlobTicketCacheCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobTicketCacheCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobTicketCacheCmd.guid)
}

// optional bytes data = 3;
inline bool BlobTicketCacheCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobTicketCacheCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobTicketCacheCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobTicketCacheCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& BlobTicketCacheCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketCacheCmd.data)
  return *data_;
}
inline void BlobTicketCacheCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketCacheCmd.data)
}
inline void BlobTicketCacheCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobTicketCacheCmd.data)
}
inline void BlobTicketCacheCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobTicketCacheCmd.data)
}
inline ::std::string* BlobTicketCacheCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTicketCacheCmd.data)
  return data_;
}
inline ::std::string* BlobTicketCacheCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobTicketCacheCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobTicketCacheCmd.data)
}

// optional uint32 len = 4;
inline bool BlobTicketCacheCmd::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobTicketCacheCmd::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobTicketCacheCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobTicketCacheCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 BlobTicketCacheCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketCacheCmd.len)
  return len_;
}
inline void BlobTicketCacheCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketCacheCmd.len)
}

// optional uint32 time = 5;
inline bool BlobTicketCacheCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobTicketCacheCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobTicketCacheCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobTicketCacheCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 BlobTicketCacheCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicketCacheCmd.time)
  return time_;
}
inline void BlobTicketCacheCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTicketCacheCmd.time)
}

// -------------------------------------------------------------------

// BlobTicket

// repeated .Cmd.BlobTicketData tickdata = 1;
inline int BlobTicket::tickdata_size() const {
  return tickdata_.size();
}
inline void BlobTicket::clear_tickdata() {
  tickdata_.Clear();
}
inline const ::Cmd::BlobTicketData& BlobTicket::tickdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicket.tickdata)
  return tickdata_.Get(index);
}
inline ::Cmd::BlobTicketData* BlobTicket::mutable_tickdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTicket.tickdata)
  return tickdata_.Mutable(index);
}
inline ::Cmd::BlobTicketData* BlobTicket::add_tickdata() {
  // @@protoc_insertion_point(field_add:Cmd.BlobTicket.tickdata)
  return tickdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketData >&
BlobTicket::tickdata() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTicket.tickdata)
  return tickdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketData >*
BlobTicket::mutable_tickdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTicket.tickdata)
  return &tickdata_;
}

// repeated .Cmd.BlobTicketCacheCmd cache_cmds = 2;
inline int BlobTicket::cache_cmds_size() const {
  return cache_cmds_.size();
}
inline void BlobTicket::clear_cache_cmds() {
  cache_cmds_.Clear();
}
inline const ::Cmd::BlobTicketCacheCmd& BlobTicket::cache_cmds(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTicket.cache_cmds)
  return cache_cmds_.Get(index);
}
inline ::Cmd::BlobTicketCacheCmd* BlobTicket::mutable_cache_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTicket.cache_cmds)
  return cache_cmds_.Mutable(index);
}
inline ::Cmd::BlobTicketCacheCmd* BlobTicket::add_cache_cmds() {
  // @@protoc_insertion_point(field_add:Cmd.BlobTicket.cache_cmds)
  return cache_cmds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketCacheCmd >&
BlobTicket::cache_cmds() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTicket.cache_cmds)
  return cache_cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BlobTicketCacheCmd >*
BlobTicket::mutable_cache_cmds() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTicket.cache_cmds)
  return &cache_cmds_;
}

// -------------------------------------------------------------------

// BlobCredit

// optional uint32 version = 1 [default = 0];
inline bool BlobCredit::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobCredit::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobCredit::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobCredit::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobCredit::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.version)
  return version_;
}
inline void BlobCredit::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.version)
}

// optional int32 credit = 2 [default = 0];
inline bool BlobCredit::has_credit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobCredit::set_has_credit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobCredit::clear_has_credit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobCredit::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 BlobCredit::credit() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.credit)
  return credit_;
}
inline void BlobCredit::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.credit)
}

// optional uint32 monster_value = 3 [default = 0];
inline bool BlobCredit::has_monster_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobCredit::set_has_monster_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobCredit::clear_has_monster_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobCredit::clear_monster_value() {
  monster_value_ = 0u;
  clear_has_monster_value();
}
inline ::google::protobuf::uint32 BlobCredit::monster_value() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.monster_value)
  return monster_value_;
}
inline void BlobCredit::set_monster_value(::google::protobuf::uint32 value) {
  set_has_monster_value();
  monster_value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.monster_value)
}

// optional uint32 savedtime = 4 [default = 0];
inline bool BlobCredit::has_savedtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobCredit::set_has_savedtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobCredit::clear_has_savedtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobCredit::clear_savedtime() {
  savedtime_ = 0u;
  clear_has_savedtime();
}
inline ::google::protobuf::uint32 BlobCredit::savedtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.savedtime)
  return savedtime_;
}
inline void BlobCredit::set_savedtime(::google::protobuf::uint32 value) {
  set_has_savedtime();
  savedtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.savedtime)
}

// optional uint32 forbidtime = 5 [default = 0];
inline bool BlobCredit::has_forbidtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobCredit::set_has_forbidtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobCredit::clear_has_forbidtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobCredit::clear_forbidtime() {
  forbidtime_ = 0u;
  clear_has_forbidtime();
}
inline ::google::protobuf::uint32 BlobCredit::forbidtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.forbidtime)
  return forbidtime_;
}
inline void BlobCredit::set_forbidtime(::google::protobuf::uint32 value) {
  set_has_forbidtime();
  forbidtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.forbidtime)
}

// optional uint32 auguryreward = 6 [default = 0];
inline bool BlobCredit::has_auguryreward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobCredit::set_has_auguryreward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobCredit::clear_has_auguryreward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobCredit::clear_auguryreward() {
  auguryreward_ = 0u;
  clear_has_auguryreward();
}
inline ::google::protobuf::uint32 BlobCredit::auguryreward() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.auguryreward)
  return auguryreward_;
}
inline void BlobCredit::set_auguryreward(::google::protobuf::uint32 value) {
  set_has_auguryreward();
  auguryreward_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.auguryreward)
}

// optional .Cmd.BlobShopGotItem shop = 7;
inline bool BlobCredit::has_shop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobCredit::set_has_shop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobCredit::clear_has_shop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobCredit::clear_shop() {
  if (shop_ != NULL) shop_->::Cmd::BlobShopGotItem::Clear();
  clear_has_shop();
}
inline const ::Cmd::BlobShopGotItem& BlobCredit::shop() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.shop)
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::Cmd::BlobShopGotItem* BlobCredit::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::Cmd::BlobShopGotItem;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobCredit.shop)
  return shop_;
}
inline ::Cmd::BlobShopGotItem* BlobCredit::release_shop() {
  clear_has_shop();
  ::Cmd::BlobShopGotItem* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void BlobCredit::set_allocated_shop(::Cmd::BlobShopGotItem* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobCredit.shop)
}

// optional .Cmd.BlobAccVar var = 8;
inline bool BlobCredit::has_var() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobCredit::set_has_var() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobCredit::clear_has_var() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobCredit::clear_var() {
  if (var_ != NULL) var_->::Cmd::BlobAccVar::Clear();
  clear_has_var();
}
inline const ::Cmd::BlobAccVar& BlobCredit::var() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.var)
  return var_ != NULL ? *var_ : *default_instance_->var_;
}
inline ::Cmd::BlobAccVar* BlobCredit::mutable_var() {
  set_has_var();
  if (var_ == NULL) var_ = new ::Cmd::BlobAccVar;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobCredit.var)
  return var_;
}
inline ::Cmd::BlobAccVar* BlobCredit::release_var() {
  clear_has_var();
  ::Cmd::BlobAccVar* temp = var_;
  var_ = NULL;
  return temp;
}
inline void BlobCredit::set_allocated_var(::Cmd::BlobAccVar* var) {
  delete var_;
  var_ = var;
  if (var) {
    set_has_var();
  } else {
    clear_has_var();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobCredit.var)
}

// optional uint32 maxbaselv = 9 [default = 0];
inline bool BlobCredit::has_maxbaselv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobCredit::set_has_maxbaselv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobCredit::clear_has_maxbaselv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobCredit::clear_maxbaselv() {
  maxbaselv_ = 0u;
  clear_has_maxbaselv();
}
inline ::google::protobuf::uint32 BlobCredit::maxbaselv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.maxbaselv)
  return maxbaselv_;
}
inline void BlobCredit::set_maxbaselv(::google::protobuf::uint32 value) {
  set_has_maxbaselv();
  maxbaselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.maxbaselv)
}

// optional uint32 maxbaselv_resettime = 10 [default = 0];
inline bool BlobCredit::has_maxbaselv_resettime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlobCredit::set_has_maxbaselv_resettime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlobCredit::clear_has_maxbaselv_resettime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlobCredit::clear_maxbaselv_resettime() {
  maxbaselv_resettime_ = 0u;
  clear_has_maxbaselv_resettime();
}
inline ::google::protobuf::uint32 BlobCredit::maxbaselv_resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.maxbaselv_resettime)
  return maxbaselv_resettime_;
}
inline void BlobCredit::set_maxbaselv_resettime(::google::protobuf::uint32 value) {
  set_has_maxbaselv_resettime();
  maxbaselv_resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobCredit.maxbaselv_resettime)
}

// optional .Cmd.BlobActivityEvent acevent = 11;
inline bool BlobCredit::has_acevent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlobCredit::set_has_acevent() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlobCredit::clear_has_acevent() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlobCredit::clear_acevent() {
  if (acevent_ != NULL) acevent_->::Cmd::BlobActivityEvent::Clear();
  clear_has_acevent();
}
inline const ::Cmd::BlobActivityEvent& BlobCredit::acevent() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobCredit.acevent)
  return acevent_ != NULL ? *acevent_ : *default_instance_->acevent_;
}
inline ::Cmd::BlobActivityEvent* BlobCredit::mutable_acevent() {
  set_has_acevent();
  if (acevent_ == NULL) acevent_ = new ::Cmd::BlobActivityEvent;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobCredit.acevent)
  return acevent_;
}
inline ::Cmd::BlobActivityEvent* BlobCredit::release_acevent() {
  clear_has_acevent();
  ::Cmd::BlobActivityEvent* temp = acevent_;
  acevent_ = NULL;
  return temp;
}
inline void BlobCredit::set_allocated_acevent(::Cmd::BlobActivityEvent* acevent) {
  delete acevent_;
  acevent_ = acevent;
  if (acevent) {
    set_has_acevent();
  } else {
    clear_has_acevent();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobCredit.acevent)
}

// -------------------------------------------------------------------

// BlobNewCredit

// optional uint32 version = 1 [default = 0];
inline bool BlobNewCredit::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobNewCredit::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobNewCredit::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobNewCredit::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobNewCredit::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobNewCredit.version)
  return version_;
}
inline void BlobNewCredit::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobNewCredit.version)
}

// optional int32 credit = 2 [default = 0];
inline bool BlobNewCredit::has_credit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobNewCredit::set_has_credit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobNewCredit::clear_has_credit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobNewCredit::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 BlobNewCredit::credit() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobNewCredit.credit)
  return credit_;
}
inline void BlobNewCredit::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobNewCredit.credit)
}

// optional uint32 monster_value = 3 [default = 0];
inline bool BlobNewCredit::has_monster_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobNewCredit::set_has_monster_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobNewCredit::clear_has_monster_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobNewCredit::clear_monster_value() {
  monster_value_ = 0u;
  clear_has_monster_value();
}
inline ::google::protobuf::uint32 BlobNewCredit::monster_value() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobNewCredit.monster_value)
  return monster_value_;
}
inline void BlobNewCredit::set_monster_value(::google::protobuf::uint32 value) {
  set_has_monster_value();
  monster_value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobNewCredit.monster_value)
}

// optional uint32 savedtime = 4 [default = 0];
inline bool BlobNewCredit::has_savedtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobNewCredit::set_has_savedtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobNewCredit::clear_has_savedtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobNewCredit::clear_savedtime() {
  savedtime_ = 0u;
  clear_has_savedtime();
}
inline ::google::protobuf::uint32 BlobNewCredit::savedtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobNewCredit.savedtime)
  return savedtime_;
}
inline void BlobNewCredit::set_savedtime(::google::protobuf::uint32 value) {
  set_has_savedtime();
  savedtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobNewCredit.savedtime)
}

// optional uint32 forbidtime = 5 [default = 0];
inline bool BlobNewCredit::has_forbidtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobNewCredit::set_has_forbidtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobNewCredit::clear_has_forbidtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobNewCredit::clear_forbidtime() {
  forbidtime_ = 0u;
  clear_has_forbidtime();
}
inline ::google::protobuf::uint32 BlobNewCredit::forbidtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobNewCredit.forbidtime)
  return forbidtime_;
}
inline void BlobNewCredit::set_forbidtime(::google::protobuf::uint32 value) {
  set_has_forbidtime();
  forbidtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobNewCredit.forbidtime)
}

// -------------------------------------------------------------------

// ChatCount

// optional uint64 targetid = 2 [default = 0];
inline bool ChatCount::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatCount::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatCount::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatCount::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 ChatCount::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCount.targetid)
  return targetid_;
}
inline void ChatCount::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCount.targetid)
}

// optional uint32 to_chat = 3 [default = 0];
inline bool ChatCount::has_to_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatCount::set_has_to_chat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatCount::clear_has_to_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatCount::clear_to_chat() {
  to_chat_ = 0u;
  clear_has_to_chat();
}
inline ::google::protobuf::uint32 ChatCount::to_chat() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCount.to_chat)
  return to_chat_;
}
inline void ChatCount::set_to_chat(::google::protobuf::uint32 value) {
  set_has_to_chat();
  to_chat_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCount.to_chat)
}

// optional uint32 from_chat = 4 [default = 0];
inline bool ChatCount::has_from_chat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatCount::set_has_from_chat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatCount::clear_has_from_chat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatCount::clear_from_chat() {
  from_chat_ = 0u;
  clear_has_from_chat();
}
inline ::google::protobuf::uint32 ChatCount::from_chat() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCount.from_chat)
  return from_chat_;
}
inline void ChatCount::set_from_chat(::google::protobuf::uint32 value) {
  set_has_from_chat();
  from_chat_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCount.from_chat)
}

// -------------------------------------------------------------------

// ChatItem

// optional uint64 charid = 1 [default = 0];
inline bool ChatItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatItem::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ChatItem::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatItem.charid)
  return charid_;
}
inline void ChatItem::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatItem.charid)
}

// optional uint32 time = 2 [default = 0];
inline bool ChatItem::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatItem::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatItem::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChatItem::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatItem.time)
  return time_;
}
inline void ChatItem::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatItem.time)
}

// optional string name = 3;
inline bool ChatItem::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatItem::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatItem::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatItem.name)
  return *name_;
}
inline void ChatItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatItem.name)
}
inline void ChatItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatItem.name)
}
inline void ChatItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatItem.name)
}
inline ::std::string* ChatItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatItem.name)
  return name_;
}
inline ::std::string* ChatItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatItem.name)
}

// optional string msg = 4;
inline bool ChatItem::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatItem::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatItem::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatItem::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ChatItem::msg() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatItem.msg)
  return *msg_;
}
inline void ChatItem::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatItem.msg)
}
inline void ChatItem::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatItem.msg)
}
inline void ChatItem::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatItem.msg)
}
inline ::std::string* ChatItem::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatItem.msg)
  return msg_;
}
inline ::std::string* ChatItem::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatItem::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatItem.msg)
}

// -------------------------------------------------------------------

// BlobChat

// repeated .Cmd.ChatCount counts = 1;
inline int BlobChat::counts_size() const {
  return counts_.size();
}
inline void BlobChat::clear_counts() {
  counts_.Clear();
}
inline const ::Cmd::ChatCount& BlobChat::counts(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobChat.counts)
  return counts_.Get(index);
}
inline ::Cmd::ChatCount* BlobChat::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobChat.counts)
  return counts_.Mutable(index);
}
inline ::Cmd::ChatCount* BlobChat::add_counts() {
  // @@protoc_insertion_point(field_add:Cmd.BlobChat.counts)
  return counts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatCount >&
BlobChat::counts() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobChat.counts)
  return counts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatCount >*
BlobChat::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobChat.counts)
  return &counts_;
}

// repeated uint64 savelist = 2;
inline int BlobChat::savelist_size() const {
  return savelist_.size();
}
inline void BlobChat::clear_savelist() {
  savelist_.Clear();
}
inline ::google::protobuf::uint64 BlobChat::savelist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobChat.savelist)
  return savelist_.Get(index);
}
inline void BlobChat::set_savelist(int index, ::google::protobuf::uint64 value) {
  savelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobChat.savelist)
}
inline void BlobChat::add_savelist(::google::protobuf::uint64 value) {
  savelist_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobChat.savelist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BlobChat::savelist() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobChat.savelist)
  return savelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BlobChat::mutable_savelist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobChat.savelist)
  return &savelist_;
}

// repeated .Cmd.ChatItem items = 3;
inline int BlobChat::items_size() const {
  return items_.size();
}
inline void BlobChat::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ChatItem& BlobChat::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobChat.items)
  return items_.Get(index);
}
inline ::Cmd::ChatItem* BlobChat::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobChat.items)
  return items_.Mutable(index);
}
inline ::Cmd::ChatItem* BlobChat::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobChat.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >&
BlobChat::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobChat.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >*
BlobChat::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobChat.items)
  return &items_;
}

// -------------------------------------------------------------------

// ActivityCommonData

// optional string name = 1;
inline bool ActivityCommonData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityCommonData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityCommonData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityCommonData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActivityCommonData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityCommonData.name)
  return *name_;
}
inline void ActivityCommonData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ActivityCommonData.name)
}
inline void ActivityCommonData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ActivityCommonData.name)
}
inline void ActivityCommonData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ActivityCommonData.name)
}
inline ::std::string* ActivityCommonData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ActivityCommonData.name)
  return name_;
}
inline ::std::string* ActivityCommonData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityCommonData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ActivityCommonData.name)
}

// repeated uint32 params = 2;
inline int ActivityCommonData::params_size() const {
  return params_.size();
}
inline void ActivityCommonData::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::uint32 ActivityCommonData::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityCommonData.params)
  return params_.Get(index);
}
inline void ActivityCommonData::set_params(int index, ::google::protobuf::uint32 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ActivityCommonData.params)
}
inline void ActivityCommonData::add_params(::google::protobuf::uint32 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ActivityCommonData.params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ActivityCommonData::params() const {
  // @@protoc_insertion_point(field_list:Cmd.ActivityCommonData.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ActivityCommonData::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ActivityCommonData.params)
  return &params_;
}

// -------------------------------------------------------------------

// BlobActivity

// optional uint32 version = 1 [default = 0];
inline bool BlobActivity::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobActivity::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobActivity::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobActivity::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobActivity::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobActivity.version)
  return version_;
}
inline void BlobActivity::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobActivity.version)
}

// repeated .Cmd.ActivityCommonData activitydatas = 2;
inline int BlobActivity::activitydatas_size() const {
  return activitydatas_.size();
}
inline void BlobActivity::clear_activitydatas() {
  activitydatas_.Clear();
}
inline const ::Cmd::ActivityCommonData& BlobActivity::activitydatas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobActivity.activitydatas)
  return activitydatas_.Get(index);
}
inline ::Cmd::ActivityCommonData* BlobActivity::mutable_activitydatas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobActivity.activitydatas)
  return activitydatas_.Mutable(index);
}
inline ::Cmd::ActivityCommonData* BlobActivity::add_activitydatas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobActivity.activitydatas)
  return activitydatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityCommonData >&
BlobActivity::activitydatas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobActivity.activitydatas)
  return activitydatas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityCommonData >*
BlobActivity::mutable_activitydatas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobActivity.activitydatas)
  return &activitydatas_;
}

// -------------------------------------------------------------------

// BlobRelation

// optional uint32 version = 1 [default = 0];
inline bool BlobRelation::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobRelation::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobRelation::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobRelation::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobRelation::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRelation.version)
  return version_;
}
inline void BlobRelation::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobRelation.version)
}

// repeated uint64 black = 2;
inline int BlobRelation::black_size() const {
  return black_.size();
}
inline void BlobRelation::clear_black() {
  black_.Clear();
}
inline ::google::protobuf::uint64 BlobRelation::black(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRelation.black)
  return black_.Get(index);
}
inline void BlobRelation::set_black(int index, ::google::protobuf::uint64 value) {
  black_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobRelation.black)
}
inline void BlobRelation::add_black(::google::protobuf::uint64 value) {
  black_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobRelation.black)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BlobRelation::black() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobRelation.black)
  return black_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BlobRelation::mutable_black() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobRelation.black)
  return &black_;
}

// -------------------------------------------------------------------

// ShareNormal

// optional .Cmd.EShareDataType type = 1;
inline bool ShareNormal::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareNormal::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareNormal::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareNormal::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EShareDataType ShareNormal::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareNormal.type)
  return static_cast< ::Cmd::EShareDataType >(type_);
}
inline void ShareNormal::set_type(::Cmd::EShareDataType value) {
  assert(::Cmd::EShareDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareNormal.type)
}

// optional uint64 value = 2;
inline bool ShareNormal::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShareNormal::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShareNormal::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShareNormal::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 ShareNormal::value() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareNormal.value)
  return value_;
}
inline void ShareNormal::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareNormal.value)
}

// -------------------------------------------------------------------

// ShareCalcItem

// optional uint32 high_key = 1 [default = 0];
inline bool ShareCalcItem::has_high_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareCalcItem::set_has_high_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareCalcItem::clear_has_high_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareCalcItem::clear_high_key() {
  high_key_ = 0u;
  clear_has_high_key();
}
inline ::google::protobuf::uint32 ShareCalcItem::high_key() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareCalcItem.high_key)
  return high_key_;
}
inline void ShareCalcItem::set_high_key(::google::protobuf::uint32 value) {
  set_has_high_key();
  high_key_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareCalcItem.high_key)
}

// optional uint32 low_key = 2 [default = 0];
inline bool ShareCalcItem::has_low_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShareCalcItem::set_has_low_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShareCalcItem::clear_has_low_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShareCalcItem::clear_low_key() {
  low_key_ = 0u;
  clear_has_low_key();
}
inline ::google::protobuf::uint32 ShareCalcItem::low_key() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareCalcItem.low_key)
  return low_key_;
}
inline void ShareCalcItem::set_low_key(::google::protobuf::uint32 value) {
  set_has_low_key();
  low_key_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareCalcItem.low_key)
}

// optional uint32 high_value = 3 [default = 0];
inline bool ShareCalcItem::has_high_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShareCalcItem::set_has_high_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShareCalcItem::clear_has_high_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShareCalcItem::clear_high_value() {
  high_value_ = 0u;
  clear_has_high_value();
}
inline ::google::protobuf::uint32 ShareCalcItem::high_value() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareCalcItem.high_value)
  return high_value_;
}
inline void ShareCalcItem::set_high_value(::google::protobuf::uint32 value) {
  set_has_high_value();
  high_value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareCalcItem.high_value)
}

// optional uint32 low_value = 4 [default = 0];
inline bool ShareCalcItem::has_low_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShareCalcItem::set_has_low_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShareCalcItem::clear_has_low_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShareCalcItem::clear_low_value() {
  low_value_ = 0u;
  clear_has_low_value();
}
inline ::google::protobuf::uint32 ShareCalcItem::low_value() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareCalcItem.low_value)
  return low_value_;
}
inline void ShareCalcItem::set_low_value(::google::protobuf::uint32 value) {
  set_has_low_value();
  low_value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareCalcItem.low_value)
}

// -------------------------------------------------------------------

// ShareCalc

// optional .Cmd.EShareDataType type = 1;
inline bool ShareCalc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareCalc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareCalc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareCalc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EShareDataType ShareCalc::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareCalc.type)
  return static_cast< ::Cmd::EShareDataType >(type_);
}
inline void ShareCalc::set_type(::Cmd::EShareDataType value) {
  assert(::Cmd::EShareDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareCalc.type)
}

// repeated .Cmd.ShareCalcItem items = 3;
inline int ShareCalc::items_size() const {
  return items_.size();
}
inline void ShareCalc::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ShareCalcItem& ShareCalc::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ShareCalc.items)
  return items_.Get(index);
}
inline ::Cmd::ShareCalcItem* ShareCalc::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ShareCalc.items)
  return items_.Mutable(index);
}
inline ::Cmd::ShareCalcItem* ShareCalc::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.ShareCalc.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalcItem >&
ShareCalc::items() const {
  // @@protoc_insertion_point(field_list:Cmd.ShareCalc.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalcItem >*
ShareCalc::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ShareCalc.items)
  return &items_;
}

// -------------------------------------------------------------------

// ShareFirstMvp

// optional uint32 mvpid = 2;
inline bool ShareFirstMvp::has_mvpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareFirstMvp::set_has_mvpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareFirstMvp::clear_has_mvpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareFirstMvp::clear_mvpid() {
  mvpid_ = 0u;
  clear_has_mvpid();
}
inline ::google::protobuf::uint32 ShareFirstMvp::mvpid() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareFirstMvp.mvpid)
  return mvpid_;
}
inline void ShareFirstMvp::set_mvpid(::google::protobuf::uint32 value) {
  set_has_mvpid();
  mvpid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareFirstMvp.mvpid)
}

// -------------------------------------------------------------------

// ShareFirstHand

// optional uint64 otherid = 1;
inline bool ShareFirstHand::has_otherid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareFirstHand::set_has_otherid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareFirstHand::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareFirstHand::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 ShareFirstHand::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareFirstHand.otherid)
  return otherid_;
}
inline void ShareFirstHand::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareFirstHand.otherid)
}

// -------------------------------------------------------------------

// ShareFirstCarrier

// optional uint64 otherid = 1;
inline bool ShareFirstCarrier::has_otherid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareFirstCarrier::set_has_otherid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareFirstCarrier::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareFirstCarrier::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 ShareFirstCarrier::otherid() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareFirstCarrier.otherid)
  return otherid_;
}
inline void ShareFirstCarrier::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareFirstCarrier.otherid)
}

// -------------------------------------------------------------------

// ShareTrade

// optional uint32 itemid = 1;
inline bool ShareTrade::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareTrade::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareTrade::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareTrade::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ShareTrade::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareTrade.itemid)
  return itemid_;
}
inline void ShareTrade::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareTrade.itemid)
}

// optional uint64 total_price = 2;
inline bool ShareTrade::has_total_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShareTrade::set_has_total_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShareTrade::clear_has_total_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShareTrade::clear_total_price() {
  total_price_ = GOOGLE_ULONGLONG(0);
  clear_has_total_price();
}
inline ::google::protobuf::uint64 ShareTrade::total_price() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareTrade.total_price)
  return total_price_;
}
inline void ShareTrade::set_total_price(::google::protobuf::uint64 value) {
  set_has_total_price();
  total_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareTrade.total_price)
}

// optional uint32 refine_lv = 3;
inline bool ShareTrade::has_refine_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShareTrade::set_has_refine_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShareTrade::clear_has_refine_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShareTrade::clear_refine_lv() {
  refine_lv_ = 0u;
  clear_has_refine_lv();
}
inline ::google::protobuf::uint32 ShareTrade::refine_lv() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareTrade.refine_lv)
  return refine_lv_;
}
inline void ShareTrade::set_refine_lv(::google::protobuf::uint32 value) {
  set_has_refine_lv();
  refine_lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareTrade.refine_lv)
}

// -------------------------------------------------------------------

// ShareDamage

// optional uint64 damage = 1;
inline bool ShareDamage::has_damage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareDamage::set_has_damage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareDamage::clear_has_damage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareDamage::clear_damage() {
  damage_ = GOOGLE_ULONGLONG(0);
  clear_has_damage();
}
inline ::google::protobuf::uint64 ShareDamage::damage() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareDamage.damage)
  return damage_;
}
inline void ShareDamage::set_damage(::google::protobuf::uint64 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShareDamage.damage)
}

// optional string target = 2;
inline bool ShareDamage::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShareDamage::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShareDamage::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShareDamage::clear_target() {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& ShareDamage::target() const {
  // @@protoc_insertion_point(field_get:Cmd.ShareDamage.target)
  return *target_;
}
inline void ShareDamage::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ShareDamage.target)
}
inline void ShareDamage::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ShareDamage.target)
}
inline void ShareDamage::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ShareDamage.target)
}
inline ::std::string* ShareDamage::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ShareDamage.target)
  return target_;
}
inline ::std::string* ShareDamage::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShareDamage::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ShareDamage.target)
}

// -------------------------------------------------------------------

// BlobShare

// repeated .Cmd.ShareNormal normaldata = 1;
inline int BlobShare::normaldata_size() const {
  return normaldata_.size();
}
inline void BlobShare::clear_normaldata() {
  normaldata_.Clear();
}
inline const ::Cmd::ShareNormal& BlobShare::normaldata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.normaldata)
  return normaldata_.Get(index);
}
inline ::Cmd::ShareNormal* BlobShare::mutable_normaldata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.normaldata)
  return normaldata_.Mutable(index);
}
inline ::Cmd::ShareNormal* BlobShare::add_normaldata() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShare.normaldata)
  return normaldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShareNormal >&
BlobShare::normaldata() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShare.normaldata)
  return normaldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShareNormal >*
BlobShare::mutable_normaldata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShare.normaldata)
  return &normaldata_;
}

// repeated .Cmd.ShareCalc calcdata = 2;
inline int BlobShare::calcdata_size() const {
  return calcdata_.size();
}
inline void BlobShare::clear_calcdata() {
  calcdata_.Clear();
}
inline const ::Cmd::ShareCalc& BlobShare::calcdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.calcdata)
  return calcdata_.Get(index);
}
inline ::Cmd::ShareCalc* BlobShare::mutable_calcdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.calcdata)
  return calcdata_.Mutable(index);
}
inline ::Cmd::ShareCalc* BlobShare::add_calcdata() {
  // @@protoc_insertion_point(field_add:Cmd.BlobShare.calcdata)
  return calcdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalc >&
BlobShare::calcdata() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShare.calcdata)
  return calcdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShareCalc >*
BlobShare::mutable_calcdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShare.calcdata)
  return &calcdata_;
}

// optional .Cmd.ShareFirstMvp firstmvp = 3;
inline bool BlobShare::has_firstmvp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobShare::set_has_firstmvp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobShare::clear_has_firstmvp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobShare::clear_firstmvp() {
  if (firstmvp_ != NULL) firstmvp_->::Cmd::ShareFirstMvp::Clear();
  clear_has_firstmvp();
}
inline const ::Cmd::ShareFirstMvp& BlobShare::firstmvp() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.firstmvp)
  return firstmvp_ != NULL ? *firstmvp_ : *default_instance_->firstmvp_;
}
inline ::Cmd::ShareFirstMvp* BlobShare::mutable_firstmvp() {
  set_has_firstmvp();
  if (firstmvp_ == NULL) firstmvp_ = new ::Cmd::ShareFirstMvp;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.firstmvp)
  return firstmvp_;
}
inline ::Cmd::ShareFirstMvp* BlobShare::release_firstmvp() {
  clear_has_firstmvp();
  ::Cmd::ShareFirstMvp* temp = firstmvp_;
  firstmvp_ = NULL;
  return temp;
}
inline void BlobShare::set_allocated_firstmvp(::Cmd::ShareFirstMvp* firstmvp) {
  delete firstmvp_;
  firstmvp_ = firstmvp;
  if (firstmvp) {
    set_has_firstmvp();
  } else {
    clear_has_firstmvp();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobShare.firstmvp)
}

// optional string firstphoto = 4;
inline bool BlobShare::has_firstphoto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobShare::set_has_firstphoto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobShare::clear_has_firstphoto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobShare::clear_firstphoto() {
  if (firstphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstphoto_->clear();
  }
  clear_has_firstphoto();
}
inline const ::std::string& BlobShare::firstphoto() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.firstphoto)
  return *firstphoto_;
}
inline void BlobShare::set_firstphoto(const ::std::string& value) {
  set_has_firstphoto();
  if (firstphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstphoto_ = new ::std::string;
  }
  firstphoto_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobShare.firstphoto)
}
inline void BlobShare::set_firstphoto(const char* value) {
  set_has_firstphoto();
  if (firstphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstphoto_ = new ::std::string;
  }
  firstphoto_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobShare.firstphoto)
}
inline void BlobShare::set_firstphoto(const char* value, size_t size) {
  set_has_firstphoto();
  if (firstphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstphoto_ = new ::std::string;
  }
  firstphoto_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobShare.firstphoto)
}
inline ::std::string* BlobShare::mutable_firstphoto() {
  set_has_firstphoto();
  if (firstphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstphoto_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.firstphoto)
  return firstphoto_;
}
inline ::std::string* BlobShare::release_firstphoto() {
  clear_has_firstphoto();
  if (firstphoto_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = firstphoto_;
    firstphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobShare::set_allocated_firstphoto(::std::string* firstphoto) {
  if (firstphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstphoto_;
  }
  if (firstphoto) {
    set_has_firstphoto();
    firstphoto_ = firstphoto;
  } else {
    clear_has_firstphoto();
    firstphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobShare.firstphoto)
}

// optional .Cmd.ShareFirstHand firsthand = 5;
inline bool BlobShare::has_firsthand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobShare::set_has_firsthand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobShare::clear_has_firsthand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobShare::clear_firsthand() {
  if (firsthand_ != NULL) firsthand_->::Cmd::ShareFirstHand::Clear();
  clear_has_firsthand();
}
inline const ::Cmd::ShareFirstHand& BlobShare::firsthand() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.firsthand)
  return firsthand_ != NULL ? *firsthand_ : *default_instance_->firsthand_;
}
inline ::Cmd::ShareFirstHand* BlobShare::mutable_firsthand() {
  set_has_firsthand();
  if (firsthand_ == NULL) firsthand_ = new ::Cmd::ShareFirstHand;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.firsthand)
  return firsthand_;
}
inline ::Cmd::ShareFirstHand* BlobShare::release_firsthand() {
  clear_has_firsthand();
  ::Cmd::ShareFirstHand* temp = firsthand_;
  firsthand_ = NULL;
  return temp;
}
inline void BlobShare::set_allocated_firsthand(::Cmd::ShareFirstHand* firsthand) {
  delete firsthand_;
  firsthand_ = firsthand;
  if (firsthand) {
    set_has_firsthand();
  } else {
    clear_has_firsthand();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobShare.firsthand)
}

// optional .Cmd.ShareFirstCarrier firstcarrier = 6;
inline bool BlobShare::has_firstcarrier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobShare::set_has_firstcarrier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobShare::clear_has_firstcarrier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobShare::clear_firstcarrier() {
  if (firstcarrier_ != NULL) firstcarrier_->::Cmd::ShareFirstCarrier::Clear();
  clear_has_firstcarrier();
}
inline const ::Cmd::ShareFirstCarrier& BlobShare::firstcarrier() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.firstcarrier)
  return firstcarrier_ != NULL ? *firstcarrier_ : *default_instance_->firstcarrier_;
}
inline ::Cmd::ShareFirstCarrier* BlobShare::mutable_firstcarrier() {
  set_has_firstcarrier();
  if (firstcarrier_ == NULL) firstcarrier_ = new ::Cmd::ShareFirstCarrier;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.firstcarrier)
  return firstcarrier_;
}
inline ::Cmd::ShareFirstCarrier* BlobShare::release_firstcarrier() {
  clear_has_firstcarrier();
  ::Cmd::ShareFirstCarrier* temp = firstcarrier_;
  firstcarrier_ = NULL;
  return temp;
}
inline void BlobShare::set_allocated_firstcarrier(::Cmd::ShareFirstCarrier* firstcarrier) {
  delete firstcarrier_;
  firstcarrier_ = firstcarrier;
  if (firstcarrier) {
    set_has_firstcarrier();
  } else {
    clear_has_firstcarrier();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobShare.firstcarrier)
}

// optional .Cmd.ShareTrade tradebuy = 7;
inline bool BlobShare::has_tradebuy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobShare::set_has_tradebuy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobShare::clear_has_tradebuy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobShare::clear_tradebuy() {
  if (tradebuy_ != NULL) tradebuy_->::Cmd::ShareTrade::Clear();
  clear_has_tradebuy();
}
inline const ::Cmd::ShareTrade& BlobShare::tradebuy() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.tradebuy)
  return tradebuy_ != NULL ? *tradebuy_ : *default_instance_->tradebuy_;
}
inline ::Cmd::ShareTrade* BlobShare::mutable_tradebuy() {
  set_has_tradebuy();
  if (tradebuy_ == NULL) tradebuy_ = new ::Cmd::ShareTrade;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.tradebuy)
  return tradebuy_;
}
inline ::Cmd::ShareTrade* BlobShare::release_tradebuy() {
  clear_has_tradebuy();
  ::Cmd::ShareTrade* temp = tradebuy_;
  tradebuy_ = NULL;
  return temp;
}
inline void BlobShare::set_allocated_tradebuy(::Cmd::ShareTrade* tradebuy) {
  delete tradebuy_;
  tradebuy_ = tradebuy;
  if (tradebuy) {
    set_has_tradebuy();
  } else {
    clear_has_tradebuy();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobShare.tradebuy)
}

// optional .Cmd.ShareTrade tradesell = 8;
inline bool BlobShare::has_tradesell() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobShare::set_has_tradesell() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobShare::clear_has_tradesell() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobShare::clear_tradesell() {
  if (tradesell_ != NULL) tradesell_->::Cmd::ShareTrade::Clear();
  clear_has_tradesell();
}
inline const ::Cmd::ShareTrade& BlobShare::tradesell() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.tradesell)
  return tradesell_ != NULL ? *tradesell_ : *default_instance_->tradesell_;
}
inline ::Cmd::ShareTrade* BlobShare::mutable_tradesell() {
  set_has_tradesell();
  if (tradesell_ == NULL) tradesell_ = new ::Cmd::ShareTrade;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.tradesell)
  return tradesell_;
}
inline ::Cmd::ShareTrade* BlobShare::release_tradesell() {
  clear_has_tradesell();
  ::Cmd::ShareTrade* temp = tradesell_;
  tradesell_ = NULL;
  return temp;
}
inline void BlobShare::set_allocated_tradesell(::Cmd::ShareTrade* tradesell) {
  delete tradesell_;
  tradesell_ = tradesell;
  if (tradesell) {
    set_has_tradesell();
  } else {
    clear_has_tradesell();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobShare.tradesell)
}

// optional .Cmd.ShareDamage maxdamage = 9;
inline bool BlobShare::has_maxdamage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobShare::set_has_maxdamage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobShare::clear_has_maxdamage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobShare::clear_maxdamage() {
  if (maxdamage_ != NULL) maxdamage_->::Cmd::ShareDamage::Clear();
  clear_has_maxdamage();
}
inline const ::Cmd::ShareDamage& BlobShare::maxdamage() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.maxdamage)
  return maxdamage_ != NULL ? *maxdamage_ : *default_instance_->maxdamage_;
}
inline ::Cmd::ShareDamage* BlobShare::mutable_maxdamage() {
  set_has_maxdamage();
  if (maxdamage_ == NULL) maxdamage_ = new ::Cmd::ShareDamage;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobShare.maxdamage)
  return maxdamage_;
}
inline ::Cmd::ShareDamage* BlobShare::release_maxdamage() {
  clear_has_maxdamage();
  ::Cmd::ShareDamage* temp = maxdamage_;
  maxdamage_ = NULL;
  return temp;
}
inline void BlobShare::set_allocated_maxdamage(::Cmd::ShareDamage* maxdamage) {
  delete maxdamage_;
  maxdamage_ = maxdamage;
  if (maxdamage) {
    set_has_maxdamage();
  } else {
    clear_has_maxdamage();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobShare.maxdamage)
}

// repeated uint32 mystery_box = 10;
inline int BlobShare::mystery_box_size() const {
  return mystery_box_.size();
}
inline void BlobShare::clear_mystery_box() {
  mystery_box_.Clear();
}
inline ::google::protobuf::uint32 BlobShare::mystery_box(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobShare.mystery_box)
  return mystery_box_.Get(index);
}
inline void BlobShare::set_mystery_box(int index, ::google::protobuf::uint32 value) {
  mystery_box_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobShare.mystery_box)
}
inline void BlobShare::add_mystery_box(::google::protobuf::uint32 value) {
  mystery_box_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobShare.mystery_box)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobShare::mystery_box() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobShare.mystery_box)
  return mystery_box_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobShare::mutable_mystery_box() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobShare.mystery_box)
  return &mystery_box_;
}

// -------------------------------------------------------------------

// AchieveDBItem

// optional uint32 id = 1 [default = 0];
inline bool AchieveDBItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchieveDBItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchieveDBItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchieveDBItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AchieveDBItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveDBItem.id)
  return id_;
}
inline void AchieveDBItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveDBItem.id)
}

// optional uint32 process = 2 [default = 0];
inline bool AchieveDBItem::has_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchieveDBItem::set_has_process() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchieveDBItem::clear_has_process() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchieveDBItem::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 AchieveDBItem::process() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveDBItem.process)
  return process_;
}
inline void AchieveDBItem::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveDBItem.process)
}

// optional uint32 finishtime = 3 [default = 0];
inline bool AchieveDBItem::has_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchieveDBItem::set_has_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchieveDBItem::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchieveDBItem::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 AchieveDBItem::finishtime() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveDBItem.finishtime)
  return finishtime_;
}
inline void AchieveDBItem::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveDBItem.finishtime)
}

// optional bool reward_get = 4 [default = false];
inline bool AchieveDBItem::has_reward_get() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AchieveDBItem::set_has_reward_get() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AchieveDBItem::clear_has_reward_get() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AchieveDBItem::clear_reward_get() {
  reward_get_ = false;
  clear_has_reward_get();
}
inline bool AchieveDBItem::reward_get() const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveDBItem.reward_get)
  return reward_get_;
}
inline void AchieveDBItem::set_reward_get(bool value) {
  set_has_reward_get();
  reward_get_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AchieveDBItem.reward_get)
}

// repeated uint64 params = 5;
inline int AchieveDBItem::params_size() const {
  return params_.size();
}
inline void AchieveDBItem::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::uint64 AchieveDBItem::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AchieveDBItem.params)
  return params_.Get(index);
}
inline void AchieveDBItem::set_params(int index, ::google::protobuf::uint64 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.AchieveDBItem.params)
}
inline void AchieveDBItem::add_params(::google::protobuf::uint64 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.AchieveDBItem.params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AchieveDBItem::params() const {
  // @@protoc_insertion_point(field_list:Cmd.AchieveDBItem.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AchieveDBItem::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AchieveDBItem.params)
  return &params_;
}

// -------------------------------------------------------------------

// BlobAchieve

// repeated .Cmd.AchieveData data = 1;
inline int BlobAchieve::data_size() const {
  return data_.size();
}
inline void BlobAchieve::clear_data() {
  data_.Clear();
}
inline const ::Cmd::AchieveData& BlobAchieve::data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAchieve.data)
  return data_.Get(index);
}
inline ::Cmd::AchieveData* BlobAchieve::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAchieve.data)
  return data_.Mutable(index);
}
inline ::Cmd::AchieveData* BlobAchieve::add_data() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAchieve.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveData >&
BlobAchieve::data() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAchieve.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveData >*
BlobAchieve::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAchieve.data)
  return &data_;
}

// repeated .Cmd.MaxInfo max_cache = 2;
inline int BlobAchieve::max_cache_size() const {
  return max_cache_.size();
}
inline void BlobAchieve::clear_max_cache() {
  max_cache_.Clear();
}
inline const ::Cmd::MaxInfo& BlobAchieve::max_cache(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAchieve.max_cache)
  return max_cache_.Get(index);
}
inline ::Cmd::MaxInfo* BlobAchieve::mutable_max_cache(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAchieve.max_cache)
  return max_cache_.Mutable(index);
}
inline ::Cmd::MaxInfo* BlobAchieve::add_max_cache() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAchieve.max_cache)
  return max_cache_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MaxInfo >&
BlobAchieve::max_cache() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAchieve.max_cache)
  return max_cache_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MaxInfo >*
BlobAchieve::mutable_max_cache() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAchieve.max_cache)
  return &max_cache_;
}

// optional uint32 version = 3 [default = 0];
inline bool BlobAchieve::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobAchieve::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobAchieve::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobAchieve::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobAchieve::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAchieve.version)
  return version_;
}
inline void BlobAchieve::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAchieve.version)
}

// repeated .Cmd.AchieveDBItem items = 4;
inline int BlobAchieve::items_size() const {
  return items_.size();
}
inline void BlobAchieve::clear_items() {
  items_.Clear();
}
inline const ::Cmd::AchieveDBItem& BlobAchieve::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAchieve.items)
  return items_.Get(index);
}
inline ::Cmd::AchieveDBItem* BlobAchieve::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAchieve.items)
  return items_.Mutable(index);
}
inline ::Cmd::AchieveDBItem* BlobAchieve::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAchieve.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveDBItem >&
BlobAchieve::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAchieve.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AchieveDBItem >*
BlobAchieve::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAchieve.items)
  return &items_;
}

// optional uint32 char_version = 5 [default = 0];
inline bool BlobAchieve::has_char_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobAchieve::set_has_char_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobAchieve::clear_has_char_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobAchieve::clear_char_version() {
  char_version_ = 0u;
  clear_has_char_version();
}
inline ::google::protobuf::uint32 BlobAchieve::char_version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAchieve.char_version)
  return char_version_;
}
inline void BlobAchieve::set_char_version(::google::protobuf::uint32 value) {
  set_has_char_version();
  char_version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAchieve.char_version)
}

// -------------------------------------------------------------------

// BlobAuthorize

// optional string password = 1;
inline bool BlobAuthorize::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobAuthorize::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobAuthorize::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobAuthorize::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& BlobAuthorize::password() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAuthorize.password)
  return *password_;
}
inline void BlobAuthorize::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BlobAuthorize.password)
}
inline void BlobAuthorize::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BlobAuthorize.password)
}
inline void BlobAuthorize::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BlobAuthorize.password)
}
inline ::std::string* BlobAuthorize::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAuthorize.password)
  return password_;
}
inline ::std::string* BlobAuthorize::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobAuthorize::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobAuthorize.password)
}

// optional uint32 resettime = 2;
inline bool BlobAuthorize::has_resettime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobAuthorize::set_has_resettime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobAuthorize::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobAuthorize::clear_resettime() {
  resettime_ = 0u;
  clear_has_resettime();
}
inline ::google::protobuf::uint32 BlobAuthorize::resettime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAuthorize.resettime)
  return resettime_;
}
inline void BlobAuthorize::set_resettime(::google::protobuf::uint32 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAuthorize.resettime)
}

// optional uint32 inputtime = 3;
inline bool BlobAuthorize::has_inputtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobAuthorize::set_has_inputtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobAuthorize::clear_has_inputtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobAuthorize::clear_inputtime() {
  inputtime_ = 0u;
  clear_has_inputtime();
}
inline ::google::protobuf::uint32 BlobAuthorize::inputtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAuthorize.inputtime)
  return inputtime_;
}
inline void BlobAuthorize::set_inputtime(::google::protobuf::uint32 value) {
  set_has_inputtime();
  inputtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobAuthorize.inputtime)
}

// -------------------------------------------------------------------

// GuildRaid

// optional uint64 npcid = 1;
inline bool GuildRaid::has_npcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRaid::set_has_npcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRaid::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRaid::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 GuildRaid::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildRaid.npcid)
  return npcid_;
}
inline void GuildRaid::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildRaid.npcid)
}

// optional .Cmd.EGuildGateState state = 2;
inline bool GuildRaid::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRaid::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRaid::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRaid::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::Cmd::EGuildGateState GuildRaid::state() const {
  // @@protoc_insertion_point(field_get:Cmd.GuildRaid.state)
  return static_cast< ::Cmd::EGuildGateState >(state_);
}
inline void GuildRaid::set_state(::Cmd::EGuildGateState value) {
  assert(::Cmd::EGuildGateState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GuildRaid.state)
}

// repeated uint32 killedboss = 3;
inline int GuildRaid::killedboss_size() const {
  return killedboss_.size();
}
inline void GuildRaid::clear_killedboss() {
  killedboss_.Clear();
}
inline ::google::protobuf::uint32 GuildRaid::killedboss(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GuildRaid.killedboss)
  return killedboss_.Get(index);
}
inline void GuildRaid::set_killedboss(int index, ::google::protobuf::uint32 value) {
  killedboss_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.GuildRaid.killedboss)
}
inline void GuildRaid::add_killedboss(::google::protobuf::uint32 value) {
  killedboss_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.GuildRaid.killedboss)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GuildRaid::killedboss() const {
  // @@protoc_insertion_point(field_list:Cmd.GuildRaid.killedboss)
  return killedboss_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GuildRaid::mutable_killedboss() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GuildRaid.killedboss)
  return &killedboss_;
}

// -------------------------------------------------------------------

// BlobGuildRaid

// repeated .Cmd.GuildRaid raid = 1;
inline int BlobGuildRaid::raid_size() const {
  return raid_.size();
}
inline void BlobGuildRaid::clear_raid() {
  raid_.Clear();
}
inline const ::Cmd::GuildRaid& BlobGuildRaid::raid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGuildRaid.raid)
  return raid_.Get(index);
}
inline ::Cmd::GuildRaid* BlobGuildRaid::mutable_raid(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGuildRaid.raid)
  return raid_.Mutable(index);
}
inline ::Cmd::GuildRaid* BlobGuildRaid::add_raid() {
  // @@protoc_insertion_point(field_add:Cmd.BlobGuildRaid.raid)
  return raid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildRaid >&
BlobGuildRaid::raid() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGuildRaid.raid)
  return raid_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildRaid >*
BlobGuildRaid::mutable_raid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGuildRaid.raid)
  return &raid_;
}

// optional uint32 raidversion = 2;
inline bool BlobGuildRaid::has_raidversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobGuildRaid::set_has_raidversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobGuildRaid::clear_has_raidversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobGuildRaid::clear_raidversion() {
  raidversion_ = 0u;
  clear_has_raidversion();
}
inline ::google::protobuf::uint32 BlobGuildRaid::raidversion() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGuildRaid.raidversion)
  return raidversion_;
}
inline void BlobGuildRaid::set_raidversion(::google::protobuf::uint32 value) {
  set_has_raidversion();
  raidversion_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGuildRaid.raidversion)
}

// -------------------------------------------------------------------

// AstrolabeStarData

// optional uint32 id = 1 [default = 0];
inline bool AstrolabeStarData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeStarData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeStarData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeStarData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AstrolabeStarData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeStarData.id)
  return id_;
}
inline void AstrolabeStarData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeStarData.id)
}

// -------------------------------------------------------------------

// AstrolabeData

// optional uint32 id = 1;
inline bool AstrolabeData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AstrolabeData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeData.id)
  return id_;
}
inline void AstrolabeData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeData.id)
}

// repeated .Cmd.AstrolabeStarData stars = 2;
inline int AstrolabeData::stars_size() const {
  return stars_.size();
}
inline void AstrolabeData::clear_stars() {
  stars_.Clear();
}
inline const ::Cmd::AstrolabeStarData& AstrolabeData::stars(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeData.stars)
  return stars_.Get(index);
}
inline ::Cmd::AstrolabeStarData* AstrolabeData::mutable_stars(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AstrolabeData.stars)
  return stars_.Mutable(index);
}
inline ::Cmd::AstrolabeStarData* AstrolabeData::add_stars() {
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeData.stars)
  return stars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeStarData >&
AstrolabeData::stars() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeData.stars)
  return stars_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeStarData >*
AstrolabeData::mutable_stars() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeData.stars)
  return &stars_;
}

// repeated .Cmd.AstrolabeCostData costs = 3;
inline int AstrolabeData::costs_size() const {
  return costs_.size();
}
inline void AstrolabeData::clear_costs() {
  costs_.Clear();
}
inline const ::Cmd::AstrolabeCostData& AstrolabeData::costs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeData.costs)
  return costs_.Get(index);
}
inline ::Cmd::AstrolabeCostData* AstrolabeData::mutable_costs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AstrolabeData.costs)
  return costs_.Mutable(index);
}
inline ::Cmd::AstrolabeCostData* AstrolabeData::add_costs() {
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeData.costs)
  return costs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >&
AstrolabeData::costs() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeData.costs)
  return costs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >*
AstrolabeData::mutable_costs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeData.costs)
  return &costs_;
}

// -------------------------------------------------------------------

// AstrolabeMainData

// optional .Cmd.EAstrolabeType type = 1;
inline bool AstrolabeMainData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeMainData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeMainData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeMainData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EAstrolabeType AstrolabeMainData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeMainData.type)
  return static_cast< ::Cmd::EAstrolabeType >(type_);
}
inline void AstrolabeMainData::set_type(::Cmd::EAstrolabeType value) {
  assert(::Cmd::EAstrolabeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeMainData.type)
}

// repeated .Cmd.AstrolabeData astrolabes = 2;
inline int AstrolabeMainData::astrolabes_size() const {
  return astrolabes_.size();
}
inline void AstrolabeMainData::clear_astrolabes() {
  astrolabes_.Clear();
}
inline const ::Cmd::AstrolabeData& AstrolabeMainData::astrolabes(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeMainData.astrolabes)
  return astrolabes_.Get(index);
}
inline ::Cmd::AstrolabeData* AstrolabeMainData::mutable_astrolabes(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AstrolabeMainData.astrolabes)
  return astrolabes_.Mutable(index);
}
inline ::Cmd::AstrolabeData* AstrolabeMainData::add_astrolabes() {
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeMainData.astrolabes)
  return astrolabes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeData >&
AstrolabeMainData::astrolabes() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeMainData.astrolabes)
  return astrolabes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeData >*
AstrolabeMainData::mutable_astrolabes() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeMainData.astrolabes)
  return &astrolabes_;
}

// -------------------------------------------------------------------

// BlobAstrolabe

// repeated .Cmd.AstrolabeMainData datas = 1;
inline int BlobAstrolabe::datas_size() const {
  return datas_.size();
}
inline void BlobAstrolabe::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::AstrolabeMainData& BlobAstrolabe::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobAstrolabe.datas)
  return datas_.Get(index);
}
inline ::Cmd::AstrolabeMainData* BlobAstrolabe::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobAstrolabe.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::AstrolabeMainData* BlobAstrolabe::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobAstrolabe.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeMainData >&
BlobAstrolabe::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobAstrolabe.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeMainData >*
BlobAstrolabe::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobAstrolabe.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// PetAdventureDBItem

// optional uint32 id = 1 [default = 0];
inline bool PetAdventureDBItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetAdventureDBItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetAdventureDBItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetAdventureDBItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PetAdventureDBItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.id)
  return id_;
}
inline void PetAdventureDBItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureDBItem.id)
}

// optional uint32 starttime = 2 [default = 0];
inline bool PetAdventureDBItem::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetAdventureDBItem::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetAdventureDBItem::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetAdventureDBItem::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 PetAdventureDBItem::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.starttime)
  return starttime_;
}
inline void PetAdventureDBItem::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureDBItem.starttime)
}

// optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
inline bool PetAdventureDBItem::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PetAdventureDBItem::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PetAdventureDBItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PetAdventureDBItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EPetAdventureStatus PetAdventureDBItem::status() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.status)
  return static_cast< ::Cmd::EPetAdventureStatus >(status_);
}
inline void PetAdventureDBItem::set_status(::Cmd::EPetAdventureStatus value) {
  assert(::Cmd::EPetAdventureStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureDBItem.status)
}

// repeated .Cmd.ItemData eggs = 4;
inline int PetAdventureDBItem::eggs_size() const {
  return eggs_.size();
}
inline void PetAdventureDBItem::clear_eggs() {
  eggs_.Clear();
}
inline const ::Cmd::ItemData& PetAdventureDBItem::eggs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.eggs)
  return eggs_.Get(index);
}
inline ::Cmd::ItemData* PetAdventureDBItem::mutable_eggs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureDBItem.eggs)
  return eggs_.Mutable(index);
}
inline ::Cmd::ItemData* PetAdventureDBItem::add_eggs() {
  // @@protoc_insertion_point(field_add:Cmd.PetAdventureDBItem.eggs)
  return eggs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
PetAdventureDBItem::eggs() const {
  // @@protoc_insertion_point(field_list:Cmd.PetAdventureDBItem.eggs)
  return eggs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
PetAdventureDBItem::mutable_eggs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetAdventureDBItem.eggs)
  return &eggs_;
}

// repeated .Cmd.PetAdventureStep steps = 5;
inline int PetAdventureDBItem::steps_size() const {
  return steps_.size();
}
inline void PetAdventureDBItem::clear_steps() {
  steps_.Clear();
}
inline const ::Cmd::PetAdventureStep& PetAdventureDBItem::steps(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.steps)
  return steps_.Get(index);
}
inline ::Cmd::PetAdventureStep* PetAdventureDBItem::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureDBItem.steps)
  return steps_.Mutable(index);
}
inline ::Cmd::PetAdventureStep* PetAdventureDBItem::add_steps() {
  // @@protoc_insertion_point(field_add:Cmd.PetAdventureDBItem.steps)
  return steps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureStep >&
PetAdventureDBItem::steps() const {
  // @@protoc_insertion_point(field_list:Cmd.PetAdventureDBItem.steps)
  return steps_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureStep >*
PetAdventureDBItem::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetAdventureDBItem.steps)
  return &steps_;
}

// repeated .Cmd.ItemData raresreward = 6;
inline int PetAdventureDBItem::raresreward_size() const {
  return raresreward_.size();
}
inline void PetAdventureDBItem::clear_raresreward() {
  raresreward_.Clear();
}
inline const ::Cmd::ItemData& PetAdventureDBItem::raresreward(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.raresreward)
  return raresreward_.Get(index);
}
inline ::Cmd::ItemData* PetAdventureDBItem::mutable_raresreward(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureDBItem.raresreward)
  return raresreward_.Mutable(index);
}
inline ::Cmd::ItemData* PetAdventureDBItem::add_raresreward() {
  // @@protoc_insertion_point(field_add:Cmd.PetAdventureDBItem.raresreward)
  return raresreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
PetAdventureDBItem::raresreward() const {
  // @@protoc_insertion_point(field_list:Cmd.PetAdventureDBItem.raresreward)
  return raresreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
PetAdventureDBItem::mutable_raresreward() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetAdventureDBItem.raresreward)
  return &raresreward_;
}

// optional uint32 specid = 7 [default = 0];
inline bool PetAdventureDBItem::has_specid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PetAdventureDBItem::set_has_specid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PetAdventureDBItem::clear_has_specid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PetAdventureDBItem::clear_specid() {
  specid_ = 0u;
  clear_has_specid();
}
inline ::google::protobuf::uint32 PetAdventureDBItem::specid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.specid)
  return specid_;
}
inline void PetAdventureDBItem::set_specid(::google::protobuf::uint32 value) {
  set_has_specid();
  specid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetAdventureDBItem.specid)
}

// repeated .Cmd.PetEfficiencyInfo eff = 8;
inline int PetAdventureDBItem::eff_size() const {
  return eff_.size();
}
inline void PetAdventureDBItem::clear_eff() {
  eff_.Clear();
}
inline const ::Cmd::PetEfficiencyInfo& PetAdventureDBItem::eff(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.eff)
  return eff_.Get(index);
}
inline ::Cmd::PetEfficiencyInfo* PetAdventureDBItem::mutable_eff(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureDBItem.eff)
  return eff_.Mutable(index);
}
inline ::Cmd::PetEfficiencyInfo* PetAdventureDBItem::add_eff() {
  // @@protoc_insertion_point(field_add:Cmd.PetAdventureDBItem.eff)
  return eff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetEfficiencyInfo >&
PetAdventureDBItem::eff() const {
  // @@protoc_insertion_point(field_list:Cmd.PetAdventureDBItem.eff)
  return eff_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetEfficiencyInfo >*
PetAdventureDBItem::mutable_eff() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetAdventureDBItem.eff)
  return &eff_;
}

// repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
inline int PetAdventureDBItem::rewardinfo_size() const {
  return rewardinfo_.size();
}
inline void PetAdventureDBItem::clear_rewardinfo() {
  rewardinfo_.Clear();
}
inline const ::Cmd::PetMonsterRewardInfo& PetAdventureDBItem::rewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.rewardinfo)
  return rewardinfo_.Get(index);
}
inline ::Cmd::PetMonsterRewardInfo* PetAdventureDBItem::mutable_rewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureDBItem.rewardinfo)
  return rewardinfo_.Mutable(index);
}
inline ::Cmd::PetMonsterRewardInfo* PetAdventureDBItem::add_rewardinfo() {
  // @@protoc_insertion_point(field_add:Cmd.PetAdventureDBItem.rewardinfo)
  return rewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetMonsterRewardInfo >&
PetAdventureDBItem::rewardinfo() const {
  // @@protoc_insertion_point(field_list:Cmd.PetAdventureDBItem.rewardinfo)
  return rewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetMonsterRewardInfo >*
PetAdventureDBItem::mutable_rewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetAdventureDBItem.rewardinfo)
  return &rewardinfo_;
}

// repeated .Cmd.ItemData extrarewardinfo = 10;
inline int PetAdventureDBItem::extrarewardinfo_size() const {
  return extrarewardinfo_.size();
}
inline void PetAdventureDBItem::clear_extrarewardinfo() {
  extrarewardinfo_.Clear();
}
inline const ::Cmd::ItemData& PetAdventureDBItem::extrarewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetAdventureDBItem.extrarewardinfo)
  return extrarewardinfo_.Get(index);
}
inline ::Cmd::ItemData* PetAdventureDBItem::mutable_extrarewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PetAdventureDBItem.extrarewardinfo)
  return extrarewardinfo_.Mutable(index);
}
inline ::Cmd::ItemData* PetAdventureDBItem::add_extrarewardinfo() {
  // @@protoc_insertion_point(field_add:Cmd.PetAdventureDBItem.extrarewardinfo)
  return extrarewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
PetAdventureDBItem::extrarewardinfo() const {
  // @@protoc_insertion_point(field_list:Cmd.PetAdventureDBItem.extrarewardinfo)
  return extrarewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
PetAdventureDBItem::mutable_extrarewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetAdventureDBItem.extrarewardinfo)
  return &extrarewardinfo_;
}

// -------------------------------------------------------------------

// BlobPetAdventure

// repeated .Cmd.PetAdventureDBItem items = 1;
inline int BlobPetAdventure::items_size() const {
  return items_.size();
}
inline void BlobPetAdventure::clear_items() {
  items_.Clear();
}
inline const ::Cmd::PetAdventureDBItem& BlobPetAdventure::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetAdventure.items)
  return items_.Get(index);
}
inline ::Cmd::PetAdventureDBItem* BlobPetAdventure::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPetAdventure.items)
  return items_.Mutable(index);
}
inline ::Cmd::PetAdventureDBItem* BlobPetAdventure::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPetAdventure.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureDBItem >&
BlobPetAdventure::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPetAdventure.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetAdventureDBItem >*
BlobPetAdventure::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPetAdventure.items)
  return &items_;
}

// repeated uint32 unlockarea = 2;
inline int BlobPetAdventure::unlockarea_size() const {
  return unlockarea_.size();
}
inline void BlobPetAdventure::clear_unlockarea() {
  unlockarea_.Clear();
}
inline ::google::protobuf::uint32 BlobPetAdventure::unlockarea(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetAdventure.unlockarea)
  return unlockarea_.Get(index);
}
inline void BlobPetAdventure::set_unlockarea(int index, ::google::protobuf::uint32 value) {
  unlockarea_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobPetAdventure.unlockarea)
}
inline void BlobPetAdventure::add_unlockarea(::google::protobuf::uint32 value) {
  unlockarea_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobPetAdventure.unlockarea)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobPetAdventure::unlockarea() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPetAdventure.unlockarea)
  return unlockarea_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobPetAdventure::mutable_unlockarea() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPetAdventure.unlockarea)
  return &unlockarea_;
}

// optional uint32 version = 3;
inline bool BlobPetAdventure::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobPetAdventure::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobPetAdventure::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobPetAdventure::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BlobPetAdventure::version() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetAdventure.version)
  return version_;
}
inline void BlobPetAdventure::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPetAdventure.version)
}

// -------------------------------------------------------------------

// BlobPetWork

// optional .Cmd.WorkManual manual = 1;
inline bool BlobPetWork::has_manual() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobPetWork::set_has_manual() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobPetWork::clear_has_manual() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobPetWork::clear_manual() {
  if (manual_ != NULL) manual_->::Cmd::WorkManual::Clear();
  clear_has_manual();
}
inline const ::Cmd::WorkManual& BlobPetWork::manual() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetWork.manual)
  return manual_ != NULL ? *manual_ : *default_instance_->manual_;
}
inline ::Cmd::WorkManual* BlobPetWork::mutable_manual() {
  set_has_manual();
  if (manual_ == NULL) manual_ = new ::Cmd::WorkManual;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPetWork.manual)
  return manual_;
}
inline ::Cmd::WorkManual* BlobPetWork::release_manual() {
  clear_has_manual();
  ::Cmd::WorkManual* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline void BlobPetWork::set_allocated_manual(::Cmd::WorkManual* manual) {
  delete manual_;
  manual_ = manual;
  if (manual) {
    set_has_manual();
  } else {
    clear_has_manual();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobPetWork.manual)
}

// repeated .Cmd.WorkSpace datas = 2;
inline int BlobPetWork::datas_size() const {
  return datas_.size();
}
inline void BlobPetWork::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::WorkSpace& BlobPetWork::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetWork.datas)
  return datas_.Get(index);
}
inline ::Cmd::WorkSpace* BlobPetWork::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPetWork.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::WorkSpace* BlobPetWork::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPetWork.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorkSpace >&
BlobPetWork::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPetWork.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorkSpace >*
BlobPetWork::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPetWork.datas)
  return &datas_;
}

// repeated .Cmd.WorkPetExtra pets = 3;
inline int BlobPetWork::pets_size() const {
  return pets_.size();
}
inline void BlobPetWork::clear_pets() {
  pets_.Clear();
}
inline const ::Cmd::WorkPetExtra& BlobPetWork::pets(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetWork.pets)
  return pets_.Get(index);
}
inline ::Cmd::WorkPetExtra* BlobPetWork::mutable_pets(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPetWork.pets)
  return pets_.Mutable(index);
}
inline ::Cmd::WorkPetExtra* BlobPetWork::add_pets() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPetWork.pets)
  return pets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorkPetExtra >&
BlobPetWork::pets() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPetWork.pets)
  return pets_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorkPetExtra >*
BlobPetWork::mutable_pets() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPetWork.pets)
  return &pets_;
}

// repeated .Cmd.WorkDayReward rewards = 5;
inline int BlobPetWork::rewards_size() const {
  return rewards_.size();
}
inline void BlobPetWork::clear_rewards() {
  rewards_.Clear();
}
inline const ::Cmd::WorkDayReward& BlobPetWork::rewards(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetWork.rewards)
  return rewards_.Get(index);
}
inline ::Cmd::WorkDayReward* BlobPetWork::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPetWork.rewards)
  return rewards_.Mutable(index);
}
inline ::Cmd::WorkDayReward* BlobPetWork::add_rewards() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPetWork.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorkDayReward >&
BlobPetWork::rewards() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPetWork.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorkDayReward >*
BlobPetWork::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPetWork.rewards)
  return &rewards_;
}

// optional uint32 card_expiretime = 4 [default = 0];
inline bool BlobPetWork::has_card_expiretime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobPetWork::set_has_card_expiretime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobPetWork::clear_has_card_expiretime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobPetWork::clear_card_expiretime() {
  card_expiretime_ = 0u;
  clear_has_card_expiretime();
}
inline ::google::protobuf::uint32 BlobPetWork::card_expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPetWork.card_expiretime)
  return card_expiretime_;
}
inline void BlobPetWork::set_card_expiretime(::google::protobuf::uint32 value) {
  set_has_card_expiretime();
  card_expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobPetWork.card_expiretime)
}

// -------------------------------------------------------------------

// BlobEye

// optional uint32 curid = 1 [default = 0];
inline bool BlobEye::has_curid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobEye::set_has_curid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobEye::clear_has_curid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobEye::clear_curid() {
  curid_ = 0u;
  clear_has_curid();
}
inline ::google::protobuf::uint32 BlobEye::curid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobEye.curid)
  return curid_;
}
inline void BlobEye::set_curid(::google::protobuf::uint32 value) {
  set_has_curid();
  curid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobEye.curid)
}

// repeated uint32 unlockids = 2;
inline int BlobEye::unlockids_size() const {
  return unlockids_.size();
}
inline void BlobEye::clear_unlockids() {
  unlockids_.Clear();
}
inline ::google::protobuf::uint32 BlobEye::unlockids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobEye.unlockids)
  return unlockids_.Get(index);
}
inline void BlobEye::set_unlockids(int index, ::google::protobuf::uint32 value) {
  unlockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobEye.unlockids)
}
inline void BlobEye::add_unlockids(::google::protobuf::uint32 value) {
  unlockids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobEye.unlockids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobEye::unlockids() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobEye.unlockids)
  return unlockids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobEye::mutable_unlockids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobEye.unlockids)
  return &unlockids_;
}

// -------------------------------------------------------------------

// BlobTutorTask

// repeated .Cmd.TutorTaskItem items = 1;
inline int BlobTutorTask::items_size() const {
  return items_.size();
}
inline void BlobTutorTask::clear_items() {
  items_.Clear();
}
inline const ::Cmd::TutorTaskItem& BlobTutorTask::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTutorTask.items)
  return items_.Get(index);
}
inline ::Cmd::TutorTaskItem* BlobTutorTask::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTutorTask.items)
  return items_.Mutable(index);
}
inline ::Cmd::TutorTaskItem* BlobTutorTask::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobTutorTask.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TutorTaskItem >&
BlobTutorTask::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTutorTask.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TutorTaskItem >*
BlobTutorTask::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTutorTask.items)
  return &items_;
}

// optional uint32 proficiency = 2 [default = 0];
inline bool BlobTutorTask::has_proficiency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobTutorTask::set_has_proficiency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobTutorTask::clear_has_proficiency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobTutorTask::clear_proficiency() {
  proficiency_ = 0u;
  clear_has_proficiency();
}
inline ::google::protobuf::uint32 BlobTutorTask::proficiency() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTutorTask.proficiency)
  return proficiency_;
}
inline void BlobTutorTask::set_proficiency(::google::protobuf::uint32 value) {
  set_has_proficiency();
  proficiency_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTutorTask.proficiency)
}

// repeated .Cmd.TutorReward tutorrewards = 3;
inline int BlobTutorTask::tutorrewards_size() const {
  return tutorrewards_.size();
}
inline void BlobTutorTask::clear_tutorrewards() {
  tutorrewards_.Clear();
}
inline const ::Cmd::TutorReward& BlobTutorTask::tutorrewards(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTutorTask.tutorrewards)
  return tutorrewards_.Get(index);
}
inline ::Cmd::TutorReward* BlobTutorTask::mutable_tutorrewards(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobTutorTask.tutorrewards)
  return tutorrewards_.Mutable(index);
}
inline ::Cmd::TutorReward* BlobTutorTask::add_tutorrewards() {
  // @@protoc_insertion_point(field_add:Cmd.BlobTutorTask.tutorrewards)
  return tutorrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TutorReward >&
BlobTutorTask::tutorrewards() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTutorTask.tutorrewards)
  return tutorrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TutorReward >*
BlobTutorTask::mutable_tutorrewards() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTutorTask.tutorrewards)
  return &tutorrewards_;
}

// repeated uint64 growreward = 4;
inline int BlobTutorTask::growreward_size() const {
  return growreward_.size();
}
inline void BlobTutorTask::clear_growreward() {
  growreward_.Clear();
}
inline ::google::protobuf::uint64 BlobTutorTask::growreward(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTutorTask.growreward)
  return growreward_.Get(index);
}
inline void BlobTutorTask::set_growreward(int index, ::google::protobuf::uint64 value) {
  growreward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobTutorTask.growreward)
}
inline void BlobTutorTask::add_growreward(::google::protobuf::uint64 value) {
  growreward_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobTutorTask.growreward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BlobTutorTask::growreward() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTutorTask.growreward)
  return growreward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BlobTutorTask::mutable_growreward() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTutorTask.growreward)
  return &growreward_;
}

// repeated uint64 tutorgrowreward = 5;
inline int BlobTutorTask::tutorgrowreward_size() const {
  return tutorgrowreward_.size();
}
inline void BlobTutorTask::clear_tutorgrowreward() {
  tutorgrowreward_.Clear();
}
inline ::google::protobuf::uint64 BlobTutorTask::tutorgrowreward(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTutorTask.tutorgrowreward)
  return tutorgrowreward_.Get(index);
}
inline void BlobTutorTask::set_tutorgrowreward(int index, ::google::protobuf::uint64 value) {
  tutorgrowreward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobTutorTask.tutorgrowreward)
}
inline void BlobTutorTask::add_tutorgrowreward(::google::protobuf::uint64 value) {
  tutorgrowreward_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobTutorTask.tutorgrowreward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BlobTutorTask::tutorgrowreward() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobTutorTask.tutorgrowreward)
  return tutorgrowreward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BlobTutorTask::mutable_tutorgrowreward() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobTutorTask.tutorgrowreward)
  return &tutorgrowreward_;
}

// optional uint32 growrewardlv = 6 [default = 0];
inline bool BlobTutorTask::has_growrewardlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobTutorTask::set_has_growrewardlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobTutorTask::clear_has_growrewardlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobTutorTask::clear_growrewardlv() {
  growrewardlv_ = 0u;
  clear_has_growrewardlv();
}
inline ::google::protobuf::uint32 BlobTutorTask::growrewardlv() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobTutorTask.growrewardlv)
  return growrewardlv_;
}
inline void BlobTutorTask::set_growrewardlv(::google::protobuf::uint32 value) {
  set_has_growrewardlv();
  growrewardlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobTutorTask.growrewardlv)
}

// -------------------------------------------------------------------

// BlobActivityEvent

// repeated .Cmd.AERewardItem rewarditems = 1;
inline int BlobActivityEvent::rewarditems_size() const {
  return rewarditems_.size();
}
inline void BlobActivityEvent::clear_rewarditems() {
  rewarditems_.Clear();
}
inline const ::Cmd::AERewardItem& BlobActivityEvent::rewarditems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobActivityEvent.rewarditems)
  return rewarditems_.Get(index);
}
inline ::Cmd::AERewardItem* BlobActivityEvent::mutable_rewarditems(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobActivityEvent.rewarditems)
  return rewarditems_.Mutable(index);
}
inline ::Cmd::AERewardItem* BlobActivityEvent::add_rewarditems() {
  // @@protoc_insertion_point(field_add:Cmd.BlobActivityEvent.rewarditems)
  return rewarditems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AERewardItem >&
BlobActivityEvent::rewarditems() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobActivityEvent.rewarditems)
  return rewarditems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AERewardItem >*
BlobActivityEvent::mutable_rewarditems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobActivityEvent.rewarditems)
  return &rewarditems_;
}

// repeated .Cmd.ActivityEventCnt eventcnt = 2;
inline int BlobActivityEvent::eventcnt_size() const {
  return eventcnt_.size();
}
inline void BlobActivityEvent::clear_eventcnt() {
  eventcnt_.Clear();
}
inline const ::Cmd::ActivityEventCnt& BlobActivityEvent::eventcnt(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobActivityEvent.eventcnt)
  return eventcnt_.Get(index);
}
inline ::Cmd::ActivityEventCnt* BlobActivityEvent::mutable_eventcnt(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobActivityEvent.eventcnt)
  return eventcnt_.Mutable(index);
}
inline ::Cmd::ActivityEventCnt* BlobActivityEvent::add_eventcnt() {
  // @@protoc_insertion_point(field_add:Cmd.BlobActivityEvent.eventcnt)
  return eventcnt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityEventCnt >&
BlobActivityEvent::eventcnt() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobActivityEvent.eventcnt)
  return eventcnt_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityEventCnt >*
BlobActivityEvent::mutable_eventcnt() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobActivityEvent.eventcnt)
  return &eventcnt_;
}

// -------------------------------------------------------------------

// BlobGuildChallenge

// repeated .Cmd.GuildChallengeItem items = 1;
inline int BlobGuildChallenge::items_size() const {
  return items_.size();
}
inline void BlobGuildChallenge::clear_items() {
  items_.Clear();
}
inline const ::Cmd::GuildChallengeItem& BlobGuildChallenge::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGuildChallenge.items)
  return items_.Get(index);
}
inline ::Cmd::GuildChallengeItem* BlobGuildChallenge::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGuildChallenge.items)
  return items_.Mutable(index);
}
inline ::Cmd::GuildChallengeItem* BlobGuildChallenge::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobGuildChallenge.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildChallengeItem >&
BlobGuildChallenge::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGuildChallenge.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildChallengeItem >*
BlobGuildChallenge::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGuildChallenge.items)
  return &items_;
}

// -------------------------------------------------------------------

// BlobGvgData

// repeated .Cmd.GvgData datas = 1;
inline int BlobGvgData::datas_size() const {
  return datas_.size();
}
inline void BlobGvgData::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::GvgData& BlobGvgData::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGvgData.datas)
  return datas_.Get(index);
}
inline ::Cmd::GvgData* BlobGvgData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobGvgData.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::GvgData* BlobGvgData::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobGvgData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GvgData >&
BlobGvgData::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobGvgData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GvgData >*
BlobGvgData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobGvgData.datas)
  return &datas_;
}

// optional uint32 expiretime = 2 [default = 0];
inline bool BlobGvgData::has_expiretime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobGvgData::set_has_expiretime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobGvgData::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobGvgData::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 BlobGvgData::expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobGvgData.expiretime)
  return expiretime_;
}
inline void BlobGvgData::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobGvgData.expiretime)
}

// -------------------------------------------------------------------

// BlobUserData

// optional float x = 1 [default = 0];
inline bool BlobUserData::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobUserData::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobUserData::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobUserData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BlobUserData::x() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.x)
  return x_;
}
inline void BlobUserData::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.x)
}

// optional float y = 2 [default = 0];
inline bool BlobUserData::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobUserData::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobUserData::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobUserData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BlobUserData::y() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.y)
  return y_;
}
inline void BlobUserData::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.y)
}

// optional float z = 3 [default = 0];
inline bool BlobUserData::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobUserData::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobUserData::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobUserData::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float BlobUserData::z() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.z)
  return z_;
}
inline void BlobUserData::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.z)
}

// optional .Cmd.BlobCDTime cdtime = 4;
inline bool BlobUserData::has_cdtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobUserData::set_has_cdtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobUserData::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobUserData::clear_cdtime() {
  if (cdtime_ != NULL) cdtime_->::Cmd::BlobCDTime::Clear();
  clear_has_cdtime();
}
inline const ::Cmd::BlobCDTime& BlobUserData::cdtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.cdtime)
  return cdtime_ != NULL ? *cdtime_ : *default_instance_->cdtime_;
}
inline ::Cmd::BlobCDTime* BlobUserData::mutable_cdtime() {
  set_has_cdtime();
  if (cdtime_ == NULL) cdtime_ = new ::Cmd::BlobCDTime;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.cdtime)
  return cdtime_;
}
inline ::Cmd::BlobCDTime* BlobUserData::release_cdtime() {
  clear_has_cdtime();
  ::Cmd::BlobCDTime* temp = cdtime_;
  cdtime_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_cdtime(::Cmd::BlobCDTime* cdtime) {
  delete cdtime_;
  cdtime_ = cdtime;
  if (cdtime) {
    set_has_cdtime();
  } else {
    clear_has_cdtime();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.cdtime)
}

// optional .Cmd.BlobShortcut shortcuts = 5;
inline bool BlobUserData::has_shortcuts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobUserData::set_has_shortcuts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobUserData::clear_has_shortcuts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobUserData::clear_shortcuts() {
  if (shortcuts_ != NULL) shortcuts_->::Cmd::BlobShortcut::Clear();
  clear_has_shortcuts();
}
inline const ::Cmd::BlobShortcut& BlobUserData::shortcuts() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.shortcuts)
  return shortcuts_ != NULL ? *shortcuts_ : *default_instance_->shortcuts_;
}
inline ::Cmd::BlobShortcut* BlobUserData::mutable_shortcuts() {
  set_has_shortcuts();
  if (shortcuts_ == NULL) shortcuts_ = new ::Cmd::BlobShortcut;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.shortcuts)
  return shortcuts_;
}
inline ::Cmd::BlobShortcut* BlobUserData::release_shortcuts() {
  clear_has_shortcuts();
  ::Cmd::BlobShortcut* temp = shortcuts_;
  shortcuts_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_shortcuts(::Cmd::BlobShortcut* shortcuts) {
  delete shortcuts_;
  shortcuts_ = shortcuts;
  if (shortcuts) {
    set_has_shortcuts();
  } else {
    clear_has_shortcuts();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.shortcuts)
}

// optional .Cmd.BlobFollower follower = 6;
inline bool BlobUserData::has_follower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobUserData::set_has_follower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobUserData::clear_has_follower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobUserData::clear_follower() {
  if (follower_ != NULL) follower_->::Cmd::BlobFollower::Clear();
  clear_has_follower();
}
inline const ::Cmd::BlobFollower& BlobUserData::follower() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.follower)
  return follower_ != NULL ? *follower_ : *default_instance_->follower_;
}
inline ::Cmd::BlobFollower* BlobUserData::mutable_follower() {
  set_has_follower();
  if (follower_ == NULL) follower_ = new ::Cmd::BlobFollower;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.follower)
  return follower_;
}
inline ::Cmd::BlobFollower* BlobUserData::release_follower() {
  clear_has_follower();
  ::Cmd::BlobFollower* temp = follower_;
  follower_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_follower(::Cmd::BlobFollower* follower) {
  delete follower_;
  follower_ = follower;
  if (follower) {
    set_has_follower();
  } else {
    clear_has_follower();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.follower)
}

// optional .Cmd.BlobStage stage = 7;
inline bool BlobUserData::has_stage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobUserData::set_has_stage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobUserData::clear_has_stage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobUserData::clear_stage() {
  if (stage_ != NULL) stage_->::Cmd::BlobStage::Clear();
  clear_has_stage();
}
inline const ::Cmd::BlobStage& BlobUserData::stage() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.stage)
  return stage_ != NULL ? *stage_ : *default_instance_->stage_;
}
inline ::Cmd::BlobStage* BlobUserData::mutable_stage() {
  set_has_stage();
  if (stage_ == NULL) stage_ = new ::Cmd::BlobStage;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.stage)
  return stage_;
}
inline ::Cmd::BlobStage* BlobUserData::release_stage() {
  clear_has_stage();
  ::Cmd::BlobStage* temp = stage_;
  stage_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_stage(::Cmd::BlobStage* stage) {
  delete stage_;
  stage_ = stage;
  if (stage) {
    set_has_stage();
  } else {
    clear_has_stage();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.stage)
}

// optional .Cmd.BlobQuestNpc questnpc = 8;
inline bool BlobUserData::has_questnpc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobUserData::set_has_questnpc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobUserData::clear_has_questnpc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobUserData::clear_questnpc() {
  if (questnpc_ != NULL) questnpc_->::Cmd::BlobQuestNpc::Clear();
  clear_has_questnpc();
}
inline const ::Cmd::BlobQuestNpc& BlobUserData::questnpc() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.questnpc)
  return questnpc_ != NULL ? *questnpc_ : *default_instance_->questnpc_;
}
inline ::Cmd::BlobQuestNpc* BlobUserData::mutable_questnpc() {
  set_has_questnpc();
  if (questnpc_ == NULL) questnpc_ = new ::Cmd::BlobQuestNpc;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.questnpc)
  return questnpc_;
}
inline ::Cmd::BlobQuestNpc* BlobUserData::release_questnpc() {
  clear_has_questnpc();
  ::Cmd::BlobQuestNpc* temp = questnpc_;
  questnpc_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_questnpc(::Cmd::BlobQuestNpc* questnpc) {
  delete questnpc_;
  questnpc_ = questnpc;
  if (questnpc) {
    set_has_questnpc();
  } else {
    clear_has_questnpc();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.questnpc)
}

// optional .Cmd.BlobBuffer buffer = 9;
inline bool BlobUserData::has_buffer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobUserData::set_has_buffer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobUserData::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobUserData::clear_buffer() {
  if (buffer_ != NULL) buffer_->::Cmd::BlobBuffer::Clear();
  clear_has_buffer();
}
inline const ::Cmd::BlobBuffer& BlobUserData::buffer() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.buffer)
  return buffer_ != NULL ? *buffer_ : *default_instance_->buffer_;
}
inline ::Cmd::BlobBuffer* BlobUserData::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) buffer_ = new ::Cmd::BlobBuffer;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.buffer)
  return buffer_;
}
inline ::Cmd::BlobBuffer* BlobUserData::release_buffer() {
  clear_has_buffer();
  ::Cmd::BlobBuffer* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_buffer(::Cmd::BlobBuffer* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.buffer)
}

// optional .Cmd.BlobMenu menu = 10;
inline bool BlobUserData::has_menu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlobUserData::set_has_menu() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlobUserData::clear_has_menu() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlobUserData::clear_menu() {
  if (menu_ != NULL) menu_->::Cmd::BlobMenu::Clear();
  clear_has_menu();
}
inline const ::Cmd::BlobMenu& BlobUserData::menu() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.menu)
  return menu_ != NULL ? *menu_ : *default_instance_->menu_;
}
inline ::Cmd::BlobMenu* BlobUserData::mutable_menu() {
  set_has_menu();
  if (menu_ == NULL) menu_ = new ::Cmd::BlobMenu;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.menu)
  return menu_;
}
inline ::Cmd::BlobMenu* BlobUserData::release_menu() {
  clear_has_menu();
  ::Cmd::BlobMenu* temp = menu_;
  menu_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_menu(::Cmd::BlobMenu* menu) {
  delete menu_;
  menu_ = menu;
  if (menu) {
    set_has_menu();
  } else {
    clear_has_menu();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.menu)
}

// optional uint32 clothcolor = 11 [default = 0];
inline bool BlobUserData::has_clothcolor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlobUserData::set_has_clothcolor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlobUserData::clear_has_clothcolor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlobUserData::clear_clothcolor() {
  clothcolor_ = 0u;
  clear_has_clothcolor();
}
inline ::google::protobuf::uint32 BlobUserData::clothcolor() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.clothcolor)
  return clothcolor_;
}
inline void BlobUserData::set_clothcolor(::google::protobuf::uint32 value) {
  set_has_clothcolor();
  clothcolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.clothcolor)
}

// optional .Cmd.BlobPortrait port = 12;
inline bool BlobUserData::has_port() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlobUserData::set_has_port() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlobUserData::clear_has_port() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlobUserData::clear_port() {
  if (port_ != NULL) port_->::Cmd::BlobPortrait::Clear();
  clear_has_port();
}
inline const ::Cmd::BlobPortrait& BlobUserData::port() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.port)
  return port_ != NULL ? *port_ : *default_instance_->port_;
}
inline ::Cmd::BlobPortrait* BlobUserData::mutable_port() {
  set_has_port();
  if (port_ == NULL) port_ = new ::Cmd::BlobPortrait;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.port)
  return port_;
}
inline ::Cmd::BlobPortrait* BlobUserData::release_port() {
  clear_has_port();
  ::Cmd::BlobPortrait* temp = port_;
  port_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_port(::Cmd::BlobPortrait* port) {
  delete port_;
  port_ = port;
  if (port) {
    set_has_port();
  } else {
    clear_has_port();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.port)
}

// optional .Cmd.BlobShopGotItem items = 13;
inline bool BlobUserData::has_items() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlobUserData::set_has_items() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlobUserData::clear_has_items() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlobUserData::clear_items() {
  if (items_ != NULL) items_->::Cmd::BlobShopGotItem::Clear();
  clear_has_items();
}
inline const ::Cmd::BlobShopGotItem& BlobUserData::items() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.items)
  return items_ != NULL ? *items_ : *default_instance_->items_;
}
inline ::Cmd::BlobShopGotItem* BlobUserData::mutable_items() {
  set_has_items();
  if (items_ == NULL) items_ = new ::Cmd::BlobShopGotItem;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.items)
  return items_;
}
inline ::Cmd::BlobShopGotItem* BlobUserData::release_items() {
  clear_has_items();
  ::Cmd::BlobShopGotItem* temp = items_;
  items_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_items(::Cmd::BlobShopGotItem* items) {
  delete items_;
  items_ = items;
  if (items) {
    set_has_items();
  } else {
    clear_has_items();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.items)
}

// optional .Cmd.BlobHair hair = 14;
inline bool BlobUserData::has_hair() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BlobUserData::set_has_hair() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BlobUserData::clear_has_hair() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BlobUserData::clear_hair() {
  if (hair_ != NULL) hair_->::Cmd::BlobHair::Clear();
  clear_has_hair();
}
inline const ::Cmd::BlobHair& BlobUserData::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.hair)
  return hair_ != NULL ? *hair_ : *default_instance_->hair_;
}
inline ::Cmd::BlobHair* BlobUserData::mutable_hair() {
  set_has_hair();
  if (hair_ == NULL) hair_ = new ::Cmd::BlobHair;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.hair)
  return hair_;
}
inline ::Cmd::BlobHair* BlobUserData::release_hair() {
  clear_has_hair();
  ::Cmd::BlobHair* temp = hair_;
  hair_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_hair(::Cmd::BlobHair* hair) {
  delete hair_;
  hair_ = hair;
  if (hair) {
    set_has_hair();
  } else {
    clear_has_hair();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.hair)
}

// optional .Cmd.BlobKnownMaps maps = 15;
inline bool BlobUserData::has_maps() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlobUserData::set_has_maps() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlobUserData::clear_has_maps() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlobUserData::clear_maps() {
  if (maps_ != NULL) maps_->::Cmd::BlobKnownMaps::Clear();
  clear_has_maps();
}
inline const ::Cmd::BlobKnownMaps& BlobUserData::maps() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.maps)
  return maps_ != NULL ? *maps_ : *default_instance_->maps_;
}
inline ::Cmd::BlobKnownMaps* BlobUserData::mutable_maps() {
  set_has_maps();
  if (maps_ == NULL) maps_ = new ::Cmd::BlobKnownMaps;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.maps)
  return maps_;
}
inline ::Cmd::BlobKnownMaps* BlobUserData::release_maps() {
  clear_has_maps();
  ::Cmd::BlobKnownMaps* temp = maps_;
  maps_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_maps(::Cmd::BlobKnownMaps* maps) {
  delete maps_;
  maps_ = maps;
  if (maps) {
    set_has_maps();
  } else {
    clear_has_maps();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.maps)
}

// optional .Cmd.BlobGears gear = 16;
inline bool BlobUserData::has_gear() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BlobUserData::set_has_gear() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BlobUserData::clear_has_gear() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BlobUserData::clear_gear() {
  if (gear_ != NULL) gear_->::Cmd::BlobGears::Clear();
  clear_has_gear();
}
inline const ::Cmd::BlobGears& BlobUserData::gear() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.gear)
  return gear_ != NULL ? *gear_ : *default_instance_->gear_;
}
inline ::Cmd::BlobGears* BlobUserData::mutable_gear() {
  set_has_gear();
  if (gear_ == NULL) gear_ = new ::Cmd::BlobGears;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.gear)
  return gear_;
}
inline ::Cmd::BlobGears* BlobUserData::release_gear() {
  clear_has_gear();
  ::Cmd::BlobGears* temp = gear_;
  gear_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_gear(::Cmd::BlobGears* gear) {
  delete gear_;
  gear_ = gear;
  if (gear) {
    set_has_gear();
  } else {
    clear_has_gear();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.gear)
}

// optional uint32 garden = 17 [default = 0];
inline bool BlobUserData::has_garden() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BlobUserData::set_has_garden() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BlobUserData::clear_has_garden() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BlobUserData::clear_garden() {
  garden_ = 0u;
  clear_has_garden();
}
inline ::google::protobuf::uint32 BlobUserData::garden() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.garden)
  return garden_;
}
inline void BlobUserData::set_garden(::google::protobuf::uint32 value) {
  set_has_garden();
  garden_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.garden)
}

// optional uint32 purify = 18 [default = 0];
inline bool BlobUserData::has_purify() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BlobUserData::set_has_purify() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BlobUserData::clear_has_purify() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BlobUserData::clear_purify() {
  purify_ = 0u;
  clear_has_purify();
}
inline ::google::protobuf::uint32 BlobUserData::purify() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.purify)
  return purify_;
}
inline void BlobUserData::set_purify(::google::protobuf::uint32 value) {
  set_has_purify();
  purify_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.purify)
}

// optional .Cmd.BlobTips tips = 19;
inline bool BlobUserData::has_tips() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BlobUserData::set_has_tips() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BlobUserData::clear_has_tips() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BlobUserData::clear_tips() {
  if (tips_ != NULL) tips_->::Cmd::BlobTips::Clear();
  clear_has_tips();
}
inline const ::Cmd::BlobTips& BlobUserData::tips() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.tips)
  return tips_ != NULL ? *tips_ : *default_instance_->tips_;
}
inline ::Cmd::BlobTips* BlobUserData::mutable_tips() {
  set_has_tips();
  if (tips_ == NULL) tips_ = new ::Cmd::BlobTips;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.tips)
  return tips_;
}
inline ::Cmd::BlobTips* BlobUserData::release_tips() {
  clear_has_tips();
  ::Cmd::BlobTips* temp = tips_;
  tips_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_tips(::Cmd::BlobTips* tips) {
  delete tips_;
  tips_ = tips;
  if (tips) {
    set_has_tips();
  } else {
    clear_has_tips();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.tips)
}

// optional uint32 savemap = 20 [default = 0];
inline bool BlobUserData::has_savemap() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BlobUserData::set_has_savemap() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BlobUserData::clear_has_savemap() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BlobUserData::clear_savemap() {
  savemap_ = 0u;
  clear_has_savemap();
}
inline ::google::protobuf::uint32 BlobUserData::savemap() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.savemap)
  return savemap_;
}
inline void BlobUserData::set_savemap(::google::protobuf::uint32 value) {
  set_has_savemap();
  savemap_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.savemap)
}

// optional .Cmd.BlobGMEffects gms = 21;
inline bool BlobUserData::has_gms() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BlobUserData::set_has_gms() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BlobUserData::clear_has_gms() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BlobUserData::clear_gms() {
  if (gms_ != NULL) gms_->::Cmd::BlobGMEffects::Clear();
  clear_has_gms();
}
inline const ::Cmd::BlobGMEffects& BlobUserData::gms() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.gms)
  return gms_ != NULL ? *gms_ : *default_instance_->gms_;
}
inline ::Cmd::BlobGMEffects* BlobUserData::mutable_gms() {
  set_has_gms();
  if (gms_ == NULL) gms_ = new ::Cmd::BlobGMEffects;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.gms)
  return gms_;
}
inline ::Cmd::BlobGMEffects* BlobUserData::release_gms() {
  clear_has_gms();
  ::Cmd::BlobGMEffects* temp = gms_;
  gms_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_gms(::Cmd::BlobGMEffects* gms) {
  delete gms_;
  gms_ = gms;
  if (gms) {
    set_has_gms();
  } else {
    clear_has_gms();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.gms)
}

// optional .Cmd.BlobFreyja freyja = 22;
inline bool BlobUserData::has_freyja() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BlobUserData::set_has_freyja() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BlobUserData::clear_has_freyja() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BlobUserData::clear_freyja() {
  if (freyja_ != NULL) freyja_->::Cmd::BlobFreyja::Clear();
  clear_has_freyja();
}
inline const ::Cmd::BlobFreyja& BlobUserData::freyja() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.freyja)
  return freyja_ != NULL ? *freyja_ : *default_instance_->freyja_;
}
inline ::Cmd::BlobFreyja* BlobUserData::mutable_freyja() {
  set_has_freyja();
  if (freyja_ == NULL) freyja_ = new ::Cmd::BlobFreyja;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.freyja)
  return freyja_;
}
inline ::Cmd::BlobFreyja* BlobUserData::release_freyja() {
  clear_has_freyja();
  ::Cmd::BlobFreyja* temp = freyja_;
  freyja_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_freyja(::Cmd::BlobFreyja* freyja) {
  delete freyja_;
  freyja_ = freyja;
  if (freyja) {
    set_has_freyja();
  } else {
    clear_has_freyja();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.freyja)
}

// optional .Cmd.BlobInter inters = 23;
inline bool BlobUserData::has_inters() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BlobUserData::set_has_inters() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BlobUserData::clear_has_inters() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BlobUserData::clear_inters() {
  if (inters_ != NULL) inters_->::Cmd::BlobInter::Clear();
  clear_has_inters();
}
inline const ::Cmd::BlobInter& BlobUserData::inters() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.inters)
  return inters_ != NULL ? *inters_ : *default_instance_->inters_;
}
inline ::Cmd::BlobInter* BlobUserData::mutable_inters() {
  set_has_inters();
  if (inters_ == NULL) inters_ = new ::Cmd::BlobInter;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.inters)
  return inters_;
}
inline ::Cmd::BlobInter* BlobUserData::release_inters() {
  clear_has_inters();
  ::Cmd::BlobInter* temp = inters_;
  inters_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_inters(::Cmd::BlobInter* inters) {
  delete inters_;
  inters_ = inters;
  if (inters) {
    set_has_inters();
  } else {
    clear_has_inters();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.inters)
}

// optional .Cmd.BlobLaboratory laboratory = 24;
inline bool BlobUserData::has_laboratory() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BlobUserData::set_has_laboratory() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BlobUserData::clear_has_laboratory() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BlobUserData::clear_laboratory() {
  if (laboratory_ != NULL) laboratory_->::Cmd::BlobLaboratory::Clear();
  clear_has_laboratory();
}
inline const ::Cmd::BlobLaboratory& BlobUserData::laboratory() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.laboratory)
  return laboratory_ != NULL ? *laboratory_ : *default_instance_->laboratory_;
}
inline ::Cmd::BlobLaboratory* BlobUserData::mutable_laboratory() {
  set_has_laboratory();
  if (laboratory_ == NULL) laboratory_ = new ::Cmd::BlobLaboratory;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.laboratory)
  return laboratory_;
}
inline ::Cmd::BlobLaboratory* BlobUserData::release_laboratory() {
  clear_has_laboratory();
  ::Cmd::BlobLaboratory* temp = laboratory_;
  laboratory_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_laboratory(::Cmd::BlobLaboratory* laboratory) {
  delete laboratory_;
  laboratory_ = laboratory;
  if (laboratory) {
    set_has_laboratory();
  } else {
    clear_has_laboratory();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.laboratory)
}

// optional .Cmd.BlobScenery scenery = 25;
inline bool BlobUserData::has_scenery() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BlobUserData::set_has_scenery() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BlobUserData::clear_has_scenery() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BlobUserData::clear_scenery() {
  if (scenery_ != NULL) scenery_->::Cmd::BlobScenery::Clear();
  clear_has_scenery();
}
inline const ::Cmd::BlobScenery& BlobUserData::scenery() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.scenery)
  return scenery_ != NULL ? *scenery_ : *default_instance_->scenery_;
}
inline ::Cmd::BlobScenery* BlobUserData::mutable_scenery() {
  set_has_scenery();
  if (scenery_ == NULL) scenery_ = new ::Cmd::BlobScenery;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.scenery)
  return scenery_;
}
inline ::Cmd::BlobScenery* BlobUserData::release_scenery() {
  clear_has_scenery();
  ::Cmd::BlobScenery* temp = scenery_;
  scenery_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_scenery(::Cmd::BlobScenery* scenery) {
  delete scenery_;
  scenery_ = scenery;
  if (scenery) {
    set_has_scenery();
  } else {
    clear_has_scenery();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.scenery)
}

// optional .Cmd.BlobCarrier carrier = 27;
inline bool BlobUserData::has_carrier() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BlobUserData::set_has_carrier() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BlobUserData::clear_has_carrier() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BlobUserData::clear_carrier() {
  if (carrier_ != NULL) carrier_->::Cmd::BlobCarrier::Clear();
  clear_has_carrier();
}
inline const ::Cmd::BlobCarrier& BlobUserData::carrier() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.carrier)
  return carrier_ != NULL ? *carrier_ : *default_instance_->carrier_;
}
inline ::Cmd::BlobCarrier* BlobUserData::mutable_carrier() {
  set_has_carrier();
  if (carrier_ == NULL) carrier_ = new ::Cmd::BlobCarrier;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.carrier)
  return carrier_;
}
inline ::Cmd::BlobCarrier* BlobUserData::release_carrier() {
  clear_has_carrier();
  ::Cmd::BlobCarrier* temp = carrier_;
  carrier_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_carrier(::Cmd::BlobCarrier* carrier) {
  delete carrier_;
  carrier_ = carrier;
  if (carrier) {
    set_has_carrier();
  } else {
    clear_has_carrier();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.carrier)
}

// optional uint32 lastmapid = 28;
inline bool BlobUserData::has_lastmapid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BlobUserData::set_has_lastmapid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BlobUserData::clear_has_lastmapid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BlobUserData::clear_lastmapid() {
  lastmapid_ = 0u;
  clear_has_lastmapid();
}
inline ::google::protobuf::uint32 BlobUserData::lastmapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.lastmapid)
  return lastmapid_;
}
inline void BlobUserData::set_lastmapid(::google::protobuf::uint32 value) {
  set_has_lastmapid();
  lastmapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.lastmapid)
}

// repeated uint32 shownpcs = 29;
inline int BlobUserData::shownpcs_size() const {
  return shownpcs_.size();
}
inline void BlobUserData::clear_shownpcs() {
  shownpcs_.Clear();
}
inline ::google::protobuf::uint32 BlobUserData::shownpcs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.shownpcs)
  return shownpcs_.Get(index);
}
inline void BlobUserData::set_shownpcs(int index, ::google::protobuf::uint32 value) {
  shownpcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.shownpcs)
}
inline void BlobUserData::add_shownpcs(::google::protobuf::uint32 value) {
  shownpcs_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobUserData.shownpcs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobUserData::shownpcs() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUserData.shownpcs)
  return shownpcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobUserData::mutable_shownpcs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUserData.shownpcs)
  return &shownpcs_;
}

// repeated uint32 mapareas = 30;
inline int BlobUserData::mapareas_size() const {
  return mapareas_.size();
}
inline void BlobUserData::clear_mapareas() {
  mapareas_.Clear();
}
inline ::google::protobuf::uint32 BlobUserData::mapareas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.mapareas)
  return mapareas_.Get(index);
}
inline void BlobUserData::set_mapareas(int index, ::google::protobuf::uint32 value) {
  mapareas_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.mapareas)
}
inline void BlobUserData::add_mapareas(::google::protobuf::uint32 value) {
  mapareas_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobUserData.mapareas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobUserData::mapareas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUserData.mapareas)
  return mapareas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobUserData::mutable_mapareas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUserData.mapareas)
  return &mapareas_;
}

// optional .Cmd.BlobHands hands = 31;
inline bool BlobUserData::has_hands() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BlobUserData::set_has_hands() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BlobUserData::clear_has_hands() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BlobUserData::clear_hands() {
  if (hands_ != NULL) hands_->::Cmd::BlobHands::Clear();
  clear_has_hands();
}
inline const ::Cmd::BlobHands& BlobUserData::hands() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.hands)
  return hands_ != NULL ? *hands_ : *default_instance_->hands_;
}
inline ::Cmd::BlobHands* BlobUserData::mutable_hands() {
  set_has_hands();
  if (hands_ == NULL) hands_ = new ::Cmd::BlobHands;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.hands)
  return hands_;
}
inline ::Cmd::BlobHands* BlobUserData::release_hands() {
  clear_has_hands();
  ::Cmd::BlobHands* temp = hands_;
  hands_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_hands(::Cmd::BlobHands* hands) {
  delete hands_;
  hands_ = hands;
  if (hands) {
    set_has_hands();
  } else {
    clear_has_hands();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.hands)
}

// optional .Cmd.BlobShow usershow = 32;
inline bool BlobUserData::has_usershow() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BlobUserData::set_has_usershow() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BlobUserData::clear_has_usershow() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BlobUserData::clear_usershow() {
  if (usershow_ != NULL) usershow_->::Cmd::BlobShow::Clear();
  clear_has_usershow();
}
inline const ::Cmd::BlobShow& BlobUserData::usershow() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.usershow)
  return usershow_ != NULL ? *usershow_ : *default_instance_->usershow_;
}
inline ::Cmd::BlobShow* BlobUserData::mutable_usershow() {
  set_has_usershow();
  if (usershow_ == NULL) usershow_ = new ::Cmd::BlobShow;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.usershow)
  return usershow_;
}
inline ::Cmd::BlobShow* BlobUserData::release_usershow() {
  clear_has_usershow();
  ::Cmd::BlobShow* temp = usershow_;
  usershow_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_usershow(::Cmd::BlobShow* usershow) {
  delete usershow_;
  usershow_ = usershow;
  if (usershow) {
    set_has_usershow();
  } else {
    clear_has_usershow();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.usershow)
}

// optional uint32 lastrealmapid = 33;
inline bool BlobUserData::has_lastrealmapid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BlobUserData::set_has_lastrealmapid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BlobUserData::clear_has_lastrealmapid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BlobUserData::clear_lastrealmapid() {
  lastrealmapid_ = 0u;
  clear_has_lastrealmapid();
}
inline ::google::protobuf::uint32 BlobUserData::lastrealmapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.lastrealmapid)
  return lastrealmapid_;
}
inline void BlobUserData::set_lastrealmapid(::google::protobuf::uint32 value) {
  set_has_lastrealmapid();
  lastrealmapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.lastrealmapid)
}

// optional .Cmd.BlobTrace trace = 34;
inline bool BlobUserData::has_trace() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BlobUserData::set_has_trace() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BlobUserData::clear_has_trace() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BlobUserData::clear_trace() {
  if (trace_ != NULL) trace_->::Cmd::BlobTrace::Clear();
  clear_has_trace();
}
inline const ::Cmd::BlobTrace& BlobUserData::trace() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.trace)
  return trace_ != NULL ? *trace_ : *default_instance_->trace_;
}
inline ::Cmd::BlobTrace* BlobUserData::mutable_trace() {
  set_has_trace();
  if (trace_ == NULL) trace_ = new ::Cmd::BlobTrace;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.trace)
  return trace_;
}
inline ::Cmd::BlobTrace* BlobUserData::release_trace() {
  clear_has_trace();
  ::Cmd::BlobTrace* temp = trace_;
  trace_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_trace(::Cmd::BlobTrace* trace) {
  delete trace_;
  trace_ = trace;
  if (trace) {
    set_has_trace();
  } else {
    clear_has_trace();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.trace)
}

// optional .Cmd.BlobOption option = 35;
inline bool BlobUserData::has_option() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BlobUserData::set_has_option() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BlobUserData::clear_has_option() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BlobUserData::clear_option() {
  if (option_ != NULL) option_->::Cmd::BlobOption::Clear();
  clear_has_option();
}
inline const ::Cmd::BlobOption& BlobUserData::option() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.option)
  return option_ != NULL ? *option_ : *default_instance_->option_;
}
inline ::Cmd::BlobOption* BlobUserData::mutable_option() {
  set_has_option();
  if (option_ == NULL) option_ = new ::Cmd::BlobOption;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.option)
  return option_;
}
inline ::Cmd::BlobOption* BlobUserData::release_option() {
  clear_has_option();
  ::Cmd::BlobOption* temp = option_;
  option_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_option(::Cmd::BlobOption* option) {
  delete option_;
  option_ = option;
  if (option) {
    set_has_option();
  } else {
    clear_has_option();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.option)
}

// optional .Cmd.BlobFirstActionDone firstaction = 36;
inline bool BlobUserData::has_firstaction() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BlobUserData::set_has_firstaction() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BlobUserData::clear_has_firstaction() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BlobUserData::clear_firstaction() {
  if (firstaction_ != NULL) firstaction_->::Cmd::BlobFirstActionDone::Clear();
  clear_has_firstaction();
}
inline const ::Cmd::BlobFirstActionDone& BlobUserData::firstaction() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.firstaction)
  return firstaction_ != NULL ? *firstaction_ : *default_instance_->firstaction_;
}
inline ::Cmd::BlobFirstActionDone* BlobUserData::mutable_firstaction() {
  set_has_firstaction();
  if (firstaction_ == NULL) firstaction_ = new ::Cmd::BlobFirstActionDone;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.firstaction)
  return firstaction_;
}
inline ::Cmd::BlobFirstActionDone* BlobUserData::release_firstaction() {
  clear_has_firstaction();
  ::Cmd::BlobFirstActionDone* temp = firstaction_;
  firstaction_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_firstaction(::Cmd::BlobFirstActionDone* firstaction) {
  delete firstaction_;
  firstaction_ = firstaction;
  if (firstaction) {
    set_has_firstaction();
  } else {
    clear_has_firstaction();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.firstaction)
}

// optional .Cmd.BlobTitle title = 37;
inline bool BlobUserData::has_title() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BlobUserData::set_has_title() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BlobUserData::clear_has_title() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BlobUserData::clear_title() {
  if (title_ != NULL) title_->::Cmd::BlobTitle::Clear();
  clear_has_title();
}
inline const ::Cmd::BlobTitle& BlobUserData::title() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.title)
  return title_ != NULL ? *title_ : *default_instance_->title_;
}
inline ::Cmd::BlobTitle* BlobUserData::mutable_title() {
  set_has_title();
  if (title_ == NULL) title_ = new ::Cmd::BlobTitle;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.title)
  return title_;
}
inline ::Cmd::BlobTitle* BlobUserData::release_title() {
  clear_has_title();
  ::Cmd::BlobTitle* temp = title_;
  title_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_title(::Cmd::BlobTitle* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.title)
}

// optional .Cmd.BlobLine lines = 38;
inline bool BlobUserData::has_lines() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BlobUserData::set_has_lines() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BlobUserData::clear_has_lines() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BlobUserData::clear_lines() {
  if (lines_ != NULL) lines_->::Cmd::BlobLine::Clear();
  clear_has_lines();
}
inline const ::Cmd::BlobLine& BlobUserData::lines() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.lines)
  return lines_ != NULL ? *lines_ : *default_instance_->lines_;
}
inline ::Cmd::BlobLine* BlobUserData::mutable_lines() {
  set_has_lines();
  if (lines_ == NULL) lines_ = new ::Cmd::BlobLine;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.lines)
  return lines_;
}
inline ::Cmd::BlobLine* BlobUserData::release_lines() {
  clear_has_lines();
  ::Cmd::BlobLine* temp = lines_;
  lines_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_lines(::Cmd::BlobLine* lines) {
  delete lines_;
  lines_ = lines;
  if (lines) {
    set_has_lines();
  } else {
    clear_has_lines();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.lines)
}

// optional .Cmd.BlobDojo dojo = 39;
inline bool BlobUserData::has_dojo() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BlobUserData::set_has_dojo() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BlobUserData::clear_has_dojo() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BlobUserData::clear_dojo() {
  if (dojo_ != NULL) dojo_->::Cmd::BlobDojo::Clear();
  clear_has_dojo();
}
inline const ::Cmd::BlobDojo& BlobUserData::dojo() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.dojo)
  return dojo_ != NULL ? *dojo_ : *default_instance_->dojo_;
}
inline ::Cmd::BlobDojo* BlobUserData::mutable_dojo() {
  set_has_dojo();
  if (dojo_ == NULL) dojo_ = new ::Cmd::BlobDojo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.dojo)
  return dojo_;
}
inline ::Cmd::BlobDojo* BlobUserData::release_dojo() {
  clear_has_dojo();
  ::Cmd::BlobDojo* temp = dojo_;
  dojo_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_dojo(::Cmd::BlobDojo* dojo) {
  delete dojo_;
  dojo_ = dojo;
  if (dojo) {
    set_has_dojo();
  } else {
    clear_has_dojo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.dojo)
}

// repeated uint32 patchversion = 40;
inline int BlobUserData::patchversion_size() const {
  return patchversion_.size();
}
inline void BlobUserData::clear_patchversion() {
  patchversion_.Clear();
}
inline ::google::protobuf::uint32 BlobUserData::patchversion(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.patchversion)
  return patchversion_.Get(index);
}
inline void BlobUserData::set_patchversion(int index, ::google::protobuf::uint32 value) {
  patchversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobUserData.patchversion)
}
inline void BlobUserData::add_patchversion(::google::protobuf::uint32 value) {
  patchversion_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobUserData.patchversion)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobUserData::patchversion() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUserData.patchversion)
  return patchversion_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobUserData::mutable_patchversion() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUserData.patchversion)
  return &patchversion_;
}

// optional .Cmd.BlobFood food = 41;
inline bool BlobUserData::has_food() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BlobUserData::set_has_food() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BlobUserData::clear_has_food() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BlobUserData::clear_food() {
  if (food_ != NULL) food_->::Cmd::BlobFood::Clear();
  clear_has_food();
}
inline const ::Cmd::BlobFood& BlobUserData::food() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserData.food)
  return food_ != NULL ? *food_ : *default_instance_->food_;
}
inline ::Cmd::BlobFood* BlobUserData::mutable_food() {
  set_has_food();
  if (food_ == NULL) food_ = new ::Cmd::BlobFood;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserData.food)
  return food_;
}
inline ::Cmd::BlobFood* BlobUserData::release_food() {
  clear_has_food();
  ::Cmd::BlobFood* temp = food_;
  food_ = NULL;
  return temp;
}
inline void BlobUserData::set_allocated_food(::Cmd::BlobFood* food) {
  delete food_;
  food_ = food;
  if (food) {
    set_has_food();
  } else {
    clear_has_food();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserData.food)
}

// -------------------------------------------------------------------

// DelPatchCharRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool DelPatchCharRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelPatchCharRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelPatchCharRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelPatchCharRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command DelPatchCharRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DelPatchCharRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DelPatchCharRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelPatchCharRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_DEL_PATCH_CHAR];
inline bool DelPatchCharRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelPatchCharRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelPatchCharRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelPatchCharRecordCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::RecordParam DelPatchCharRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DelPatchCharRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void DelPatchCharRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelPatchCharRecordCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool DelPatchCharRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelPatchCharRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelPatchCharRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelPatchCharRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 DelPatchCharRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.DelPatchCharRecordCmd.charid)
  return charid_;
}
inline void DelPatchCharRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelPatchCharRecordCmd.charid)
}

// optional .Cmd.EPatchType type = 4 [default = EPATCHTYPE_QUEST];
inline bool DelPatchCharRecordCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelPatchCharRecordCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelPatchCharRecordCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelPatchCharRecordCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EPatchType DelPatchCharRecordCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.DelPatchCharRecordCmd.type)
  return static_cast< ::Cmd::EPatchType >(type_);
}
inline void DelPatchCharRecordCmd::set_type(::Cmd::EPatchType value) {
  assert(::Cmd::EPatchType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DelPatchCharRecordCmd.type)
}

// -------------------------------------------------------------------

// BlobChatItem

// repeated .Cmd.ChatItem items = 1;
inline int BlobChatItem::items_size() const {
  return items_.size();
}
inline void BlobChatItem::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ChatItem& BlobChatItem::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobChatItem.items)
  return items_.Get(index);
}
inline ::Cmd::ChatItem* BlobChatItem::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobChatItem.items)
  return items_.Mutable(index);
}
inline ::Cmd::ChatItem* BlobChatItem::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobChatItem.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >&
BlobChatItem::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobChatItem.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatItem >*
BlobChatItem::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobChatItem.items)
  return &items_;
}

// -------------------------------------------------------------------

// ChatSaveRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool ChatSaveRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatSaveRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatSaveRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatSaveRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command ChatSaveRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSaveRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChatSaveRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSaveRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_SAVE];
inline bool ChatSaveRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatSaveRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatSaveRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatSaveRecordCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::RecordParam ChatSaveRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSaveRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void ChatSaveRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSaveRecordCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool ChatSaveRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatSaveRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatSaveRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatSaveRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ChatSaveRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSaveRecordCmd.charid)
  return charid_;
}
inline void ChatSaveRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSaveRecordCmd.charid)
}

// optional uint32 portrait = 4 [default = 0];
inline bool ChatSaveRecordCmd::has_portrait() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatSaveRecordCmd::set_has_portrait() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatSaveRecordCmd::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatSaveRecordCmd::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 ChatSaveRecordCmd::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSaveRecordCmd.portrait)
  return portrait_;
}
inline void ChatSaveRecordCmd::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSaveRecordCmd.portrait)
}

// optional uint32 time = 5 [default = 0];
inline bool ChatSaveRecordCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatSaveRecordCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatSaveRecordCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatSaveRecordCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChatSaveRecordCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSaveRecordCmd.time)
  return time_;
}
inline void ChatSaveRecordCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSaveRecordCmd.time)
}

// optional bytes data = 6;
inline bool ChatSaveRecordCmd::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatSaveRecordCmd::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatSaveRecordCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatSaveRecordCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ChatSaveRecordCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSaveRecordCmd.data)
  return *data_;
}
inline void ChatSaveRecordCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatSaveRecordCmd.data)
}
inline void ChatSaveRecordCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatSaveRecordCmd.data)
}
inline void ChatSaveRecordCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatSaveRecordCmd.data)
}
inline ::std::string* ChatSaveRecordCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatSaveRecordCmd.data)
  return data_;
}
inline ::std::string* ChatSaveRecordCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatSaveRecordCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatSaveRecordCmd.data)
}

// -------------------------------------------------------------------

// QueryChatRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool QueryChatRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryChatRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryChatRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryChatRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command QueryChatRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryChatRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_QUERY];
inline bool QueryChatRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryChatRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryChatRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryChatRecordCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::RecordParam QueryChatRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void QueryChatRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool QueryChatRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryChatRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryChatRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryChatRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 QueryChatRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.charid)
  return charid_;
}
inline void QueryChatRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.charid)
}

// optional uint64 targetid = 4 [default = 0];
inline bool QueryChatRecordCmd::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryChatRecordCmd::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryChatRecordCmd::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryChatRecordCmd::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 QueryChatRecordCmd::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.targetid)
  return targetid_;
}
inline void QueryChatRecordCmd::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.targetid)
}

// optional uint32 start = 5 [default = 0];
inline bool QueryChatRecordCmd::has_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryChatRecordCmd::set_has_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryChatRecordCmd::clear_has_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryChatRecordCmd::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 QueryChatRecordCmd::start() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.start)
  return start_;
}
inline void QueryChatRecordCmd::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.start)
}

// optional uint32 end = 6 [default = 0];
inline bool QueryChatRecordCmd::has_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryChatRecordCmd::set_has_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryChatRecordCmd::clear_has_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryChatRecordCmd::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 QueryChatRecordCmd::end() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.end)
  return end_;
}
inline void QueryChatRecordCmd::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.end)
}

// optional uint32 selfport = 7 [default = 0];
inline bool QueryChatRecordCmd::has_selfport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryChatRecordCmd::set_has_selfport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryChatRecordCmd::clear_has_selfport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryChatRecordCmd::clear_selfport() {
  selfport_ = 0u;
  clear_has_selfport();
}
inline ::google::protobuf::uint32 QueryChatRecordCmd::selfport() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.selfport)
  return selfport_;
}
inline void QueryChatRecordCmd::set_selfport(::google::protobuf::uint32 value) {
  set_has_selfport();
  selfport_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.selfport)
}

// optional uint32 targetport = 8 [default = 0];
inline bool QueryChatRecordCmd::has_targetport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryChatRecordCmd::set_has_targetport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QueryChatRecordCmd::clear_has_targetport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QueryChatRecordCmd::clear_targetport() {
  targetport_ = 0u;
  clear_has_targetport();
}
inline ::google::protobuf::uint32 QueryChatRecordCmd::targetport() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.targetport)
  return targetport_;
}
inline void QueryChatRecordCmd::set_targetport(::google::protobuf::uint32 value) {
  set_has_targetport();
  targetport_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.targetport)
}

// optional string scenename = 9;
inline bool QueryChatRecordCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryChatRecordCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QueryChatRecordCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QueryChatRecordCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& QueryChatRecordCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.scenename)
  return *scenename_;
}
inline void QueryChatRecordCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.scenename)
}
inline void QueryChatRecordCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryChatRecordCmd.scenename)
}
inline void QueryChatRecordCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryChatRecordCmd.scenename)
}
inline ::std::string* QueryChatRecordCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryChatRecordCmd.scenename)
  return scenename_;
}
inline ::std::string* QueryChatRecordCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryChatRecordCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryChatRecordCmd.scenename)
}

// repeated bytes datas = 10;
inline int QueryChatRecordCmd::datas_size() const {
  return datas_.size();
}
inline void QueryChatRecordCmd::clear_datas() {
  datas_.Clear();
}
inline const ::std::string& QueryChatRecordCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryChatRecordCmd.datas)
  return datas_.Get(index);
}
inline ::std::string* QueryChatRecordCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryChatRecordCmd.datas)
  return datas_.Mutable(index);
}
inline void QueryChatRecordCmd::set_datas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.QueryChatRecordCmd.datas)
  datas_.Mutable(index)->assign(value);
}
inline void QueryChatRecordCmd::set_datas(int index, const char* value) {
  datas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryChatRecordCmd.datas)
}
inline void QueryChatRecordCmd::set_datas(int index, const void* value, size_t size) {
  datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryChatRecordCmd.datas)
}
inline ::std::string* QueryChatRecordCmd::add_datas() {
  return datas_.Add();
}
inline void QueryChatRecordCmd::add_datas(const ::std::string& value) {
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.QueryChatRecordCmd.datas)
}
inline void QueryChatRecordCmd::add_datas(const char* value) {
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.QueryChatRecordCmd.datas)
}
inline void QueryChatRecordCmd::add_datas(const void* value, size_t size) {
  datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.QueryChatRecordCmd.datas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryChatRecordCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryChatRecordCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryChatRecordCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryChatRecordCmd.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// UserRenameQueryRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool UserRenameQueryRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRenameQueryRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRenameQueryRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command UserRenameQueryRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserRenameQueryRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_QUERY];
inline bool UserRenameQueryRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRenameQueryRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRenameQueryRecordCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::RecordParam UserRenameQueryRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void UserRenameQueryRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.param)
}

// optional uint64 charid = 3;
inline bool UserRenameQueryRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRenameQueryRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRenameQueryRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserRenameQueryRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.charid)
  return charid_;
}
inline void UserRenameQueryRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.charid)
}

// optional uint64 accid = 4;
inline bool UserRenameQueryRecordCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRenameQueryRecordCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRenameQueryRecordCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 UserRenameQueryRecordCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.accid)
  return accid_;
}
inline void UserRenameQueryRecordCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.accid)
}

// optional string oldname = 5;
inline bool UserRenameQueryRecordCmd::has_oldname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_oldname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRenameQueryRecordCmd::clear_has_oldname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRenameQueryRecordCmd::clear_oldname() {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_->clear();
  }
  clear_has_oldname();
}
inline const ::std::string& UserRenameQueryRecordCmd::oldname() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.oldname)
  return *oldname_;
}
inline void UserRenameQueryRecordCmd::set_oldname(const ::std::string& value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.oldname)
}
inline void UserRenameQueryRecordCmd::set_oldname(const char* value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserRenameQueryRecordCmd.oldname)
}
inline void UserRenameQueryRecordCmd::set_oldname(const char* value, size_t size) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserRenameQueryRecordCmd.oldname)
}
inline ::std::string* UserRenameQueryRecordCmd::mutable_oldname() {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserRenameQueryRecordCmd.oldname)
  return oldname_;
}
inline ::std::string* UserRenameQueryRecordCmd::release_oldname() {
  clear_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oldname_;
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRenameQueryRecordCmd::set_allocated_oldname(::std::string* oldname) {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (oldname) {
    set_has_oldname();
    oldname_ = oldname;
  } else {
    clear_has_oldname();
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserRenameQueryRecordCmd.oldname)
}

// optional string newname = 6;
inline bool UserRenameQueryRecordCmd::has_newname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_newname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRenameQueryRecordCmd::clear_has_newname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRenameQueryRecordCmd::clear_newname() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& UserRenameQueryRecordCmd::newname() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.newname)
  return *newname_;
}
inline void UserRenameQueryRecordCmd::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.newname)
}
inline void UserRenameQueryRecordCmd::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserRenameQueryRecordCmd.newname)
}
inline void UserRenameQueryRecordCmd::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserRenameQueryRecordCmd.newname)
}
inline ::std::string* UserRenameQueryRecordCmd::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserRenameQueryRecordCmd.newname)
  return newname_;
}
inline ::std::string* UserRenameQueryRecordCmd::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRenameQueryRecordCmd::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserRenameQueryRecordCmd.newname)
}

// optional string scenename = 7;
inline bool UserRenameQueryRecordCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserRenameQueryRecordCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserRenameQueryRecordCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& UserRenameQueryRecordCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.scenename)
  return *scenename_;
}
inline void UserRenameQueryRecordCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.scenename)
}
inline void UserRenameQueryRecordCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserRenameQueryRecordCmd.scenename)
}
inline void UserRenameQueryRecordCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserRenameQueryRecordCmd.scenename)
}
inline ::std::string* UserRenameQueryRecordCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserRenameQueryRecordCmd.scenename)
  return scenename_;
}
inline ::std::string* UserRenameQueryRecordCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRenameQueryRecordCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserRenameQueryRecordCmd.scenename)
}

// optional .Cmd.ERenameErrCode code = 8 [default = ERENAME_SUCCESS];
inline bool UserRenameQueryRecordCmd::has_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserRenameQueryRecordCmd::set_has_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserRenameQueryRecordCmd::clear_has_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserRenameQueryRecordCmd::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::Cmd::ERenameErrCode UserRenameQueryRecordCmd::code() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameQueryRecordCmd.code)
  return static_cast< ::Cmd::ERenameErrCode >(code_);
}
inline void UserRenameQueryRecordCmd::set_code(::Cmd::ERenameErrCode value) {
  assert(::Cmd::ERenameErrCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameQueryRecordCmd.code)
}

// -------------------------------------------------------------------

// UserRenameResultRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool UserRenameResultRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRenameResultRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRenameResultRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRenameResultRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command UserRenameResultRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameResultRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserRenameResultRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameResultRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_RESULT];
inline bool UserRenameResultRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRenameResultRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRenameResultRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRenameResultRecordCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::RecordParam UserRenameResultRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameResultRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void UserRenameResultRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameResultRecordCmd.param)
}

// optional uint64 charid = 3;
inline bool UserRenameResultRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRenameResultRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRenameResultRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRenameResultRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserRenameResultRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameResultRecordCmd.charid)
  return charid_;
}
inline void UserRenameResultRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameResultRecordCmd.charid)
}

// optional uint64 accid = 4;
inline bool UserRenameResultRecordCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRenameResultRecordCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRenameResultRecordCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRenameResultRecordCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 UserRenameResultRecordCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameResultRecordCmd.accid)
  return accid_;
}
inline void UserRenameResultRecordCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameResultRecordCmd.accid)
}

// optional string newname = 5;
inline bool UserRenameResultRecordCmd::has_newname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRenameResultRecordCmd::set_has_newname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRenameResultRecordCmd::clear_has_newname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRenameResultRecordCmd::clear_newname() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& UserRenameResultRecordCmd::newname() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameResultRecordCmd.newname)
  return *newname_;
}
inline void UserRenameResultRecordCmd::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserRenameResultRecordCmd.newname)
}
inline void UserRenameResultRecordCmd::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserRenameResultRecordCmd.newname)
}
inline void UserRenameResultRecordCmd::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserRenameResultRecordCmd.newname)
}
inline ::std::string* UserRenameResultRecordCmd::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserRenameResultRecordCmd.newname)
  return newname_;
}
inline ::std::string* UserRenameResultRecordCmd::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRenameResultRecordCmd::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserRenameResultRecordCmd.newname)
}

// optional string oldname = 6;
inline bool UserRenameResultRecordCmd::has_oldname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRenameResultRecordCmd::set_has_oldname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRenameResultRecordCmd::clear_has_oldname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRenameResultRecordCmd::clear_oldname() {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_->clear();
  }
  clear_has_oldname();
}
inline const ::std::string& UserRenameResultRecordCmd::oldname() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameResultRecordCmd.oldname)
  return *oldname_;
}
inline void UserRenameResultRecordCmd::set_oldname(const ::std::string& value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserRenameResultRecordCmd.oldname)
}
inline void UserRenameResultRecordCmd::set_oldname(const char* value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserRenameResultRecordCmd.oldname)
}
inline void UserRenameResultRecordCmd::set_oldname(const char* value, size_t size) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserRenameResultRecordCmd.oldname)
}
inline ::std::string* UserRenameResultRecordCmd::mutable_oldname() {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    oldname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserRenameResultRecordCmd.oldname)
  return oldname_;
}
inline ::std::string* UserRenameResultRecordCmd::release_oldname() {
  clear_has_oldname();
  if (oldname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = oldname_;
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRenameResultRecordCmd::set_allocated_oldname(::std::string* oldname) {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (oldname) {
    set_has_oldname();
    oldname_ = oldname;
  } else {
    clear_has_oldname();
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserRenameResultRecordCmd.oldname)
}

// optional bool success = 7 [default = false];
inline bool UserRenameResultRecordCmd::has_success() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserRenameResultRecordCmd::set_has_success() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserRenameResultRecordCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserRenameResultRecordCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool UserRenameResultRecordCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameResultRecordCmd.success)
  return success_;
}
inline void UserRenameResultRecordCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameResultRecordCmd.success)
}

// -------------------------------------------------------------------

// LotteryResultRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool LotteryResultRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryResultRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryResultRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryResultRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command LotteryResultRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LotteryResultRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOTTERY_RESULT];
inline bool LotteryResultRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryResultRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryResultRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryResultRecordCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::RecordParam LotteryResultRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void LotteryResultRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.param)
}

// optional uint64 charid = 3;
inline bool LotteryResultRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryResultRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryResultRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryResultRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 LotteryResultRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.charid)
  return charid_;
}
inline void LotteryResultRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.charid)
}

// optional uint64 itemid = 4;
inline bool LotteryResultRecordCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotteryResultRecordCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotteryResultRecordCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotteryResultRecordCmd::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::uint64 LotteryResultRecordCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.itemid)
  return itemid_;
}
inline void LotteryResultRecordCmd::set_itemid(::google::protobuf::uint64 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.itemid)
}

// optional string name = 5;
inline bool LotteryResultRecordCmd::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LotteryResultRecordCmd::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LotteryResultRecordCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LotteryResultRecordCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LotteryResultRecordCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.name)
  return *name_;
}
inline void LotteryResultRecordCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.name)
}
inline void LotteryResultRecordCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LotteryResultRecordCmd.name)
}
inline void LotteryResultRecordCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LotteryResultRecordCmd.name)
}
inline ::std::string* LotteryResultRecordCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryResultRecordCmd.name)
  return name_;
}
inline ::std::string* LotteryResultRecordCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LotteryResultRecordCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LotteryResultRecordCmd.name)
}

// optional string itemname = 6;
inline bool LotteryResultRecordCmd::has_itemname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LotteryResultRecordCmd::set_has_itemname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LotteryResultRecordCmd::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LotteryResultRecordCmd::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& LotteryResultRecordCmd::itemname() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.itemname)
  return *itemname_;
}
inline void LotteryResultRecordCmd::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.itemname)
}
inline void LotteryResultRecordCmd::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LotteryResultRecordCmd.itemname)
}
inline void LotteryResultRecordCmd::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LotteryResultRecordCmd.itemname)
}
inline ::std::string* LotteryResultRecordCmd::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryResultRecordCmd.itemname)
  return itemname_;
}
inline ::std::string* LotteryResultRecordCmd::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LotteryResultRecordCmd::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LotteryResultRecordCmd.itemname)
}

// optional uint32 type = 7;
inline bool LotteryResultRecordCmd::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LotteryResultRecordCmd::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LotteryResultRecordCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LotteryResultRecordCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LotteryResultRecordCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.type)
  return type_;
}
inline void LotteryResultRecordCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.type)
}

// optional uint32 rate = 8;
inline bool LotteryResultRecordCmd::has_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LotteryResultRecordCmd::set_has_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LotteryResultRecordCmd::clear_has_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LotteryResultRecordCmd::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 LotteryResultRecordCmd::rate() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryResultRecordCmd.rate)
  return rate_;
}
inline void LotteryResultRecordCmd::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryResultRecordCmd.rate)
}

// -------------------------------------------------------------------

// BlobBattle

// optional uint32 totalbattletime = 1 [default = 0];
inline bool BlobBattle::has_totalbattletime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobBattle::set_has_totalbattletime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobBattle::clear_has_totalbattletime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobBattle::clear_totalbattletime() {
  totalbattletime_ = 0u;
  clear_has_totalbattletime();
}
inline ::google::protobuf::uint32 BlobBattle::totalbattletime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobBattle.totalbattletime)
  return totalbattletime_;
}
inline void BlobBattle::set_totalbattletime(::google::protobuf::uint32 value) {
  set_has_totalbattletime();
  totalbattletime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobBattle.totalbattletime)
}

// -------------------------------------------------------------------

// BlobSeeNpc

// repeated uint32 see = 1;
inline int BlobSeeNpc::see_size() const {
  return see_.size();
}
inline void BlobSeeNpc::clear_see() {
  see_.Clear();
}
inline ::google::protobuf::uint32 BlobSeeNpc::see(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSeeNpc.see)
  return see_.Get(index);
}
inline void BlobSeeNpc::set_see(int index, ::google::protobuf::uint32 value) {
  see_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobSeeNpc.see)
}
inline void BlobSeeNpc::add_see(::google::protobuf::uint32 value) {
  see_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobSeeNpc.see)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobSeeNpc::see() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobSeeNpc.see)
  return see_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobSeeNpc::mutable_see() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobSeeNpc.see)
  return &see_;
}

// repeated uint32 hide = 2;
inline int BlobSeeNpc::hide_size() const {
  return hide_.size();
}
inline void BlobSeeNpc::clear_hide() {
  hide_.Clear();
}
inline ::google::protobuf::uint32 BlobSeeNpc::hide(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSeeNpc.hide)
  return hide_.Get(index);
}
inline void BlobSeeNpc::set_hide(int index, ::google::protobuf::uint32 value) {
  hide_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobSeeNpc.hide)
}
inline void BlobSeeNpc::add_hide(::google::protobuf::uint32 value) {
  hide_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobSeeNpc.hide)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobSeeNpc::hide() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobSeeNpc.hide)
  return hide_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobSeeNpc::mutable_hide() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobSeeNpc.hide)
  return &hide_;
}

// -------------------------------------------------------------------

// BlobSettings

// optional uint32 transmap = 1 [default = 0];
inline bool BlobSettings::has_transmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobSettings::set_has_transmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobSettings::clear_has_transmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobSettings::clear_transmap() {
  transmap_ = 0u;
  clear_has_transmap();
}
inline ::google::protobuf::uint32 BlobSettings::transmap() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSettings.transmap)
  return transmap_;
}
inline void BlobSettings::set_transmap(::google::protobuf::uint32 value) {
  set_has_transmap();
  transmap_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobSettings.transmap)
}

// optional float trans_x = 2 [default = 0];
inline bool BlobSettings::has_trans_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobSettings::set_has_trans_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobSettings::clear_has_trans_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobSettings::clear_trans_x() {
  trans_x_ = 0;
  clear_has_trans_x();
}
inline float BlobSettings::trans_x() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSettings.trans_x)
  return trans_x_;
}
inline void BlobSettings::set_trans_x(float value) {
  set_has_trans_x();
  trans_x_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobSettings.trans_x)
}

// optional float trans_y = 3 [default = 0];
inline bool BlobSettings::has_trans_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobSettings::set_has_trans_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobSettings::clear_has_trans_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobSettings::clear_trans_y() {
  trans_y_ = 0;
  clear_has_trans_y();
}
inline float BlobSettings::trans_y() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSettings.trans_y)
  return trans_y_;
}
inline void BlobSettings::set_trans_y(float value) {
  set_has_trans_y();
  trans_y_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobSettings.trans_y)
}

// optional float trans_z = 4 [default = 0];
inline bool BlobSettings::has_trans_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobSettings::set_has_trans_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobSettings::clear_has_trans_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobSettings::clear_trans_z() {
  trans_z_ = 0;
  clear_has_trans_z();
}
inline float BlobSettings::trans_z() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobSettings.trans_z)
  return trans_z_;
}
inline void BlobSettings::set_trans_z(float value) {
  set_has_trans_z();
  trans_z_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobSettings.trans_z)
}

// -------------------------------------------------------------------

// BlobPhoto

// repeated .Cmd.PhotoItem items = 1;
inline int BlobPhoto::items_size() const {
  return items_.size();
}
inline void BlobPhoto::clear_items() {
  items_.Clear();
}
inline const ::Cmd::PhotoItem& BlobPhoto::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobPhoto.items)
  return items_.Get(index);
}
inline ::Cmd::PhotoItem* BlobPhoto::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobPhoto.items)
  return items_.Mutable(index);
}
inline ::Cmd::PhotoItem* BlobPhoto::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.BlobPhoto.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >&
BlobPhoto::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobPhoto.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >*
BlobPhoto::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobPhoto.items)
  return &items_;
}

// -------------------------------------------------------------------

// BlobUserPet

// repeated .Cmd.UserPetData data = 1;
inline int BlobUserPet::data_size() const {
  return data_.size();
}
inline void BlobUserPet::clear_data() {
  data_.Clear();
}
inline const ::Cmd::UserPetData& BlobUserPet::data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserPet.data)
  return data_.Get(index);
}
inline ::Cmd::UserPetData* BlobUserPet::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserPet.data)
  return data_.Mutable(index);
}
inline ::Cmd::UserPetData* BlobUserPet::add_data() {
  // @@protoc_insertion_point(field_add:Cmd.BlobUserPet.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserPetData >&
BlobUserPet::data() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUserPet.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserPetData >*
BlobUserPet::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUserPet.data)
  return &data_;
}

// optional .Cmd.PetEquipUnlockInfo unlockinfo = 2;
inline bool BlobUserPet::has_unlockinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobUserPet::set_has_unlockinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobUserPet::clear_has_unlockinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobUserPet::clear_unlockinfo() {
  if (unlockinfo_ != NULL) unlockinfo_->::Cmd::PetEquipUnlockInfo::Clear();
  clear_has_unlockinfo();
}
inline const ::Cmd::PetEquipUnlockInfo& BlobUserPet::unlockinfo() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserPet.unlockinfo)
  return unlockinfo_ != NULL ? *unlockinfo_ : *default_instance_->unlockinfo_;
}
inline ::Cmd::PetEquipUnlockInfo* BlobUserPet::mutable_unlockinfo() {
  set_has_unlockinfo();
  if (unlockinfo_ == NULL) unlockinfo_ = new ::Cmd::PetEquipUnlockInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserPet.unlockinfo)
  return unlockinfo_;
}
inline ::Cmd::PetEquipUnlockInfo* BlobUserPet::release_unlockinfo() {
  clear_has_unlockinfo();
  ::Cmd::PetEquipUnlockInfo* temp = unlockinfo_;
  unlockinfo_ = NULL;
  return temp;
}
inline void BlobUserPet::set_allocated_unlockinfo(::Cmd::PetEquipUnlockInfo* unlockinfo) {
  delete unlockinfo_;
  unlockinfo_ = unlockinfo;
  if (unlockinfo) {
    set_has_unlockinfo();
  } else {
    clear_has_unlockinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BlobUserPet.unlockinfo)
}

// -------------------------------------------------------------------

// BlobUserBeing

// repeated .Cmd.UserBeingData data = 1;
inline int BlobUserBeing::data_size() const {
  return data_.size();
}
inline void BlobUserBeing::clear_data() {
  data_.Clear();
}
inline const ::Cmd::UserBeingData& BlobUserBeing::data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserBeing.data)
  return data_.Get(index);
}
inline ::Cmd::UserBeingData* BlobUserBeing::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobUserBeing.data)
  return data_.Mutable(index);
}
inline ::Cmd::UserBeingData* BlobUserBeing::add_data() {
  // @@protoc_insertion_point(field_add:Cmd.BlobUserBeing.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserBeingData >&
BlobUserBeing::data() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobUserBeing.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserBeingData >*
BlobUserBeing::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobUserBeing.data)
  return &data_;
}

// optional uint32 curbeingid = 2;
inline bool BlobUserBeing::has_curbeingid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobUserBeing::set_has_curbeingid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobUserBeing::clear_has_curbeingid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobUserBeing::clear_curbeingid() {
  curbeingid_ = 0u;
  clear_has_curbeingid();
}
inline ::google::protobuf::uint32 BlobUserBeing::curbeingid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserBeing.curbeingid)
  return curbeingid_;
}
inline void BlobUserBeing::set_curbeingid(::google::protobuf::uint32 value) {
  set_has_curbeingid();
  curbeingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserBeing.curbeingid)
}

// optional uint32 skillpoint = 3;
inline bool BlobUserBeing::has_skillpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobUserBeing::set_has_skillpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobUserBeing::clear_has_skillpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobUserBeing::clear_skillpoint() {
  skillpoint_ = 0u;
  clear_has_skillpoint();
}
inline ::google::protobuf::uint32 BlobUserBeing::skillpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobUserBeing.skillpoint)
  return skillpoint_;
}
inline void BlobUserBeing::set_skillpoint(::google::protobuf::uint32 value) {
  set_has_skillpoint();
  skillpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobUserBeing.skillpoint)
}

// -------------------------------------------------------------------

// BlobJoyData

// optional .Cmd.EJoyActivityType etype = 1 [default = JOY_ACTIVITY_MIN];
inline bool BlobJoyData::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobJoyData::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobJoyData::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobJoyData::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EJoyActivityType BlobJoyData::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobJoyData.etype)
  return static_cast< ::Cmd::EJoyActivityType >(etype_);
}
inline void BlobJoyData::set_etype(::Cmd::EJoyActivityType value) {
  assert(::Cmd::EJoyActivityType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobJoyData.etype)
}

// optional uint32 joyvalue = 2 [default = 0];
inline bool BlobJoyData::has_joyvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobJoyData::set_has_joyvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobJoyData::clear_has_joyvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobJoyData::clear_joyvalue() {
  joyvalue_ = 0u;
  clear_has_joyvalue();
}
inline ::google::protobuf::uint32 BlobJoyData::joyvalue() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobJoyData.joyvalue)
  return joyvalue_;
}
inline void BlobJoyData::set_joyvalue(::google::protobuf::uint32 value) {
  set_has_joyvalue();
  joyvalue_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobJoyData.joyvalue)
}

// -------------------------------------------------------------------

// LotteryPoolData

// optional uint32 poolid = 1;
inline bool LotteryPoolData::has_poolid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryPoolData::set_has_poolid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryPoolData::clear_has_poolid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryPoolData::clear_poolid() {
  poolid_ = 0u;
  clear_has_poolid();
}
inline ::google::protobuf::uint32 LotteryPoolData::poolid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryPoolData.poolid)
  return poolid_;
}
inline void LotteryPoolData::set_poolid(::google::protobuf::uint32 value) {
  set_has_poolid();
  poolid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryPoolData.poolid)
}

// optional uint32 coin = 2;
inline bool LotteryPoolData::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryPoolData::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryPoolData::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryPoolData::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 LotteryPoolData::coin() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryPoolData.coin)
  return coin_;
}
inline void LotteryPoolData::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryPoolData.coin)
}

// -------------------------------------------------------------------

// BlobLottery

// repeated uint32 items = 1;
inline int BlobLottery::items_size() const {
  return items_.size();
}
inline void BlobLottery::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 BlobLottery::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLottery.items)
  return items_.Get(index);
}
inline void BlobLottery::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobLottery.items)
}
inline void BlobLottery::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobLottery.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobLottery::items() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobLottery.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobLottery::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobLottery.items)
  return &items_;
}

// repeated .Cmd.LotteryPoolData pools = 2;
inline int BlobLottery::pools_size() const {
  return pools_.size();
}
inline void BlobLottery::clear_pools() {
  pools_.Clear();
}
inline const ::Cmd::LotteryPoolData& BlobLottery::pools(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLottery.pools)
  return pools_.Get(index);
}
inline ::Cmd::LotteryPoolData* BlobLottery::mutable_pools(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobLottery.pools)
  return pools_.Mutable(index);
}
inline ::Cmd::LotteryPoolData* BlobLottery::add_pools() {
  // @@protoc_insertion_point(field_add:Cmd.BlobLottery.pools)
  return pools_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryPoolData >&
BlobLottery::pools() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobLottery.pools)
  return pools_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryPoolData >*
BlobLottery::mutable_pools() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobLottery.pools)
  return &pools_;
}

// optional uint32 pooltime = 3;
inline bool BlobLottery::has_pooltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobLottery::set_has_pooltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobLottery::clear_has_pooltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobLottery::clear_pooltime() {
  pooltime_ = 0u;
  clear_has_pooltime();
}
inline ::google::protobuf::uint32 BlobLottery::pooltime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobLottery.pooltime)
  return pooltime_;
}
inline void BlobLottery::set_pooltime(::google::protobuf::uint32 value) {
  set_has_pooltime();
  pooltime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobLottery.pooltime)
}

// -------------------------------------------------------------------

// BlobServant

// optional uint32 servantid = 1 [default = 0];
inline bool BlobServant::has_servantid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobServant::set_has_servantid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobServant::clear_has_servantid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobServant::clear_servantid() {
  servantid_ = 0u;
  clear_has_servantid();
}
inline ::google::protobuf::uint32 BlobServant::servantid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobServant.servantid)
  return servantid_;
}
inline void BlobServant::set_servantid(::google::protobuf::uint32 value) {
  set_has_servantid();
  servantid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobServant.servantid)
}

// repeated .Cmd.RecommendItemInfo recitem = 2;
inline int BlobServant::recitem_size() const {
  return recitem_.size();
}
inline void BlobServant::clear_recitem() {
  recitem_.Clear();
}
inline const ::Cmd::RecommendItemInfo& BlobServant::recitem(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobServant.recitem)
  return recitem_.Get(index);
}
inline ::Cmd::RecommendItemInfo* BlobServant::mutable_recitem(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobServant.recitem)
  return recitem_.Mutable(index);
}
inline ::Cmd::RecommendItemInfo* BlobServant::add_recitem() {
  // @@protoc_insertion_point(field_add:Cmd.BlobServant.recitem)
  return recitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >&
BlobServant::recitem() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobServant.recitem)
  return recitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >*
BlobServant::mutable_recitem() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobServant.recitem)
  return &recitem_;
}

// repeated uint32 ownservant = 3;
inline int BlobServant::ownservant_size() const {
  return ownservant_.size();
}
inline void BlobServant::clear_ownservant() {
  ownservant_.Clear();
}
inline ::google::protobuf::uint32 BlobServant::ownservant(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobServant.ownservant)
  return ownservant_.Get(index);
}
inline void BlobServant::set_ownservant(int index, ::google::protobuf::uint32 value) {
  ownservant_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BlobServant.ownservant)
}
inline void BlobServant::add_ownservant(::google::protobuf::uint32 value) {
  ownservant_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BlobServant.ownservant)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlobServant::ownservant() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobServant.ownservant)
  return ownservant_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlobServant::mutable_ownservant() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobServant.ownservant)
  return &ownservant_;
}

// repeated .Cmd.GrowthItemInfo growthitem = 4;
inline int BlobServant::growthitem_size() const {
  return growthitem_.size();
}
inline void BlobServant::clear_growthitem() {
  growthitem_.Clear();
}
inline const ::Cmd::GrowthItemInfo& BlobServant::growthitem(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobServant.growthitem)
  return growthitem_.Get(index);
}
inline ::Cmd::GrowthItemInfo* BlobServant::mutable_growthitem(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobServant.growthitem)
  return growthitem_.Mutable(index);
}
inline ::Cmd::GrowthItemInfo* BlobServant::add_growthitem() {
  // @@protoc_insertion_point(field_add:Cmd.BlobServant.growthitem)
  return growthitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >&
BlobServant::growthitem() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobServant.growthitem)
  return growthitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >*
BlobServant::mutable_growthitem() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobServant.growthitem)
  return &growthitem_;
}

// repeated .Cmd.GrowthValueInfo growthvalue = 5;
inline int BlobServant::growthvalue_size() const {
  return growthvalue_.size();
}
inline void BlobServant::clear_growthvalue() {
  growthvalue_.Clear();
}
inline const ::Cmd::GrowthValueInfo& BlobServant::growthvalue(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobServant.growthvalue)
  return growthvalue_.Get(index);
}
inline ::Cmd::GrowthValueInfo* BlobServant::mutable_growthvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobServant.growthvalue)
  return growthvalue_.Mutable(index);
}
inline ::Cmd::GrowthValueInfo* BlobServant::add_growthvalue() {
  // @@protoc_insertion_point(field_add:Cmd.BlobServant.growthvalue)
  return growthvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthValueInfo >&
BlobServant::growthvalue() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobServant.growthvalue)
  return growthvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthValueInfo >*
BlobServant::mutable_growthvalue() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobServant.growthvalue)
  return &growthvalue_;
}

// repeated .Cmd.GrowthCurInfo growthcurinfo = 6;
inline int BlobServant::growthcurinfo_size() const {
  return growthcurinfo_.size();
}
inline void BlobServant::clear_growthcurinfo() {
  growthcurinfo_.Clear();
}
inline const ::Cmd::GrowthCurInfo& BlobServant::growthcurinfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobServant.growthcurinfo)
  return growthcurinfo_.Get(index);
}
inline ::Cmd::GrowthCurInfo* BlobServant::mutable_growthcurinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobServant.growthcurinfo)
  return growthcurinfo_.Mutable(index);
}
inline ::Cmd::GrowthCurInfo* BlobServant::add_growthcurinfo() {
  // @@protoc_insertion_point(field_add:Cmd.BlobServant.growthcurinfo)
  return growthcurinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthCurInfo >&
BlobServant::growthcurinfo() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobServant.growthcurinfo)
  return growthcurinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthCurInfo >*
BlobServant::mutable_growthcurinfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobServant.growthcurinfo)
  return &growthcurinfo_;
}

// -------------------------------------------------------------------

// ProfessionData

// optional uint32 id = 1;
inline bool ProfessionData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ProfessionData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.id)
  return id_;
}
inline void ProfessionData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.id)
}

// optional uint32 profession = 2;
inline bool ProfessionData::has_profession() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionData::set_has_profession() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionData::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 ProfessionData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.profession)
  return profession_;
}
inline void ProfessionData::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.profession)
}

// optional uint32 joblv = 3;
inline bool ProfessionData::has_joblv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionData::set_has_joblv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionData::clear_has_joblv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionData::clear_joblv() {
  joblv_ = 0u;
  clear_has_joblv();
}
inline ::google::protobuf::uint32 ProfessionData::joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.joblv)
  return joblv_;
}
inline void ProfessionData::set_joblv(::google::protobuf::uint32 value) {
  set_has_joblv();
  joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.joblv)
}

// optional uint32 jobexp = 4;
inline bool ProfessionData::has_jobexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionData::set_has_jobexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionData::clear_has_jobexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionData::clear_jobexp() {
  jobexp_ = 0u;
  clear_has_jobexp();
}
inline ::google::protobuf::uint32 ProfessionData::jobexp() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.jobexp)
  return jobexp_;
}
inline void ProfessionData::set_jobexp(::google::protobuf::uint32 value) {
  set_has_jobexp();
  jobexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.jobexp)
}

// optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
inline bool ProfessionData::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfessionData::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProfessionData::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProfessionData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EProfressionDataType ProfessionData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.type)
  return static_cast< ::Cmd::EProfressionDataType >(type_);
}
inline void ProfessionData::set_type(::Cmd::EProfressionDataType value) {
  assert(::Cmd::EProfressionDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.type)
}

// optional string recordname = 6;
inline bool ProfessionData::has_recordname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfessionData::set_has_recordname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProfessionData::clear_has_recordname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProfessionData::clear_recordname() {
  if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_->clear();
  }
  clear_has_recordname();
}
inline const ::std::string& ProfessionData::recordname() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.recordname)
  return *recordname_;
}
inline void ProfessionData::set_recordname(const ::std::string& value) {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  recordname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.recordname)
}
inline void ProfessionData::set_recordname(const char* value) {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  recordname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProfessionData.recordname)
}
inline void ProfessionData::set_recordname(const char* value, size_t size) {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  recordname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProfessionData.recordname)
}
inline ::std::string* ProfessionData::mutable_recordname() {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.recordname)
  return recordname_;
}
inline ::std::string* ProfessionData::release_recordname() {
  clear_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recordname_;
    recordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfessionData::set_allocated_recordname(::std::string* recordname) {
  if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recordname_;
  }
  if (recordname) {
    set_has_recordname();
    recordname_ = recordname;
  } else {
    clear_has_recordname();
    recordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.recordname)
}

// optional uint32 recordtime = 7;
inline bool ProfessionData::has_recordtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProfessionData::set_has_recordtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProfessionData::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProfessionData::clear_recordtime() {
  recordtime_ = 0u;
  clear_has_recordtime();
}
inline ::google::protobuf::uint32 ProfessionData::recordtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.recordtime)
  return recordtime_;
}
inline void ProfessionData::set_recordtime(::google::protobuf::uint32 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.recordtime)
}

// optional uint64 charid = 8;
inline bool ProfessionData::has_charid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProfessionData::set_has_charid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProfessionData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProfessionData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ProfessionData::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.charid)
  return charid_;
}
inline void ProfessionData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.charid)
}

// optional string charname = 9;
inline bool ProfessionData::has_charname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProfessionData::set_has_charname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProfessionData::clear_has_charname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProfessionData::clear_charname() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& ProfessionData::charname() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.charname)
  return *charname_;
}
inline void ProfessionData::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.charname)
}
inline void ProfessionData::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProfessionData.charname)
}
inline void ProfessionData::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProfessionData.charname)
}
inline ::std::string* ProfessionData::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.charname)
  return charname_;
}
inline ::std::string* ProfessionData::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfessionData::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.charname)
}

// optional uint32 pro_branch = 10;
inline bool ProfessionData::has_pro_branch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProfessionData::set_has_pro_branch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProfessionData::clear_has_pro_branch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProfessionData::clear_pro_branch() {
  pro_branch_ = 0u;
  clear_has_pro_branch();
}
inline ::google::protobuf::uint32 ProfessionData::pro_branch() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.pro_branch)
  return pro_branch_;
}
inline void ProfessionData::set_pro_branch(::google::protobuf::uint32 value) {
  set_has_pro_branch();
  pro_branch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.pro_branch)
}

// optional .Cmd.BlobAstrolabe astrolabe_data = 11;
inline bool ProfessionData::has_astrolabe_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProfessionData::set_has_astrolabe_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProfessionData::clear_has_astrolabe_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProfessionData::clear_astrolabe_data() {
  if (astrolabe_data_ != NULL) astrolabe_data_->::Cmd::BlobAstrolabe::Clear();
  clear_has_astrolabe_data();
}
inline const ::Cmd::BlobAstrolabe& ProfessionData::astrolabe_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.astrolabe_data)
  return astrolabe_data_ != NULL ? *astrolabe_data_ : *default_instance_->astrolabe_data_;
}
inline ::Cmd::BlobAstrolabe* ProfessionData::mutable_astrolabe_data() {
  set_has_astrolabe_data();
  if (astrolabe_data_ == NULL) astrolabe_data_ = new ::Cmd::BlobAstrolabe;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.astrolabe_data)
  return astrolabe_data_;
}
inline ::Cmd::BlobAstrolabe* ProfessionData::release_astrolabe_data() {
  clear_has_astrolabe_data();
  ::Cmd::BlobAstrolabe* temp = astrolabe_data_;
  astrolabe_data_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_astrolabe_data(::Cmd::BlobAstrolabe* astrolabe_data) {
  delete astrolabe_data_;
  astrolabe_data_ = astrolabe_data;
  if (astrolabe_data) {
    set_has_astrolabe_data();
  } else {
    clear_has_astrolabe_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.astrolabe_data)
}

// repeated .Cmd.EquipPackData pack_data = 12;
inline int ProfessionData::pack_data_size() const {
  return pack_data_.size();
}
inline void ProfessionData::clear_pack_data() {
  pack_data_.Clear();
}
inline const ::Cmd::EquipPackData& ProfessionData::pack_data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.pack_data)
  return pack_data_.Get(index);
}
inline ::Cmd::EquipPackData* ProfessionData::mutable_pack_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.pack_data)
  return pack_data_.Mutable(index);
}
inline ::Cmd::EquipPackData* ProfessionData::add_pack_data() {
  // @@protoc_insertion_point(field_add:Cmd.ProfessionData.pack_data)
  return pack_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >&
ProfessionData::pack_data() const {
  // @@protoc_insertion_point(field_list:Cmd.ProfessionData.pack_data)
  return pack_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >*
ProfessionData::mutable_pack_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ProfessionData.pack_data)
  return &pack_data_;
}

// optional .Cmd.UserRoleData role_data = 13;
inline bool ProfessionData::has_role_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProfessionData::set_has_role_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProfessionData::clear_has_role_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProfessionData::clear_role_data() {
  if (role_data_ != NULL) role_data_->::Cmd::UserRoleData::Clear();
  clear_has_role_data();
}
inline const ::Cmd::UserRoleData& ProfessionData::role_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.role_data)
  return role_data_ != NULL ? *role_data_ : *default_instance_->role_data_;
}
inline ::Cmd::UserRoleData* ProfessionData::mutable_role_data() {
  set_has_role_data();
  if (role_data_ == NULL) role_data_ = new ::Cmd::UserRoleData;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.role_data)
  return role_data_;
}
inline ::Cmd::UserRoleData* ProfessionData::release_role_data() {
  clear_has_role_data();
  ::Cmd::UserRoleData* temp = role_data_;
  role_data_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_role_data(::Cmd::UserRoleData* role_data) {
  delete role_data_;
  role_data_ = role_data;
  if (role_data) {
    set_has_role_data();
  } else {
    clear_has_role_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.role_data)
}

// optional .Cmd.BlobUserBeing being_data = 14;
inline bool ProfessionData::has_being_data() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProfessionData::set_has_being_data() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProfessionData::clear_has_being_data() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProfessionData::clear_being_data() {
  if (being_data_ != NULL) being_data_->::Cmd::BlobUserBeing::Clear();
  clear_has_being_data();
}
inline const ::Cmd::BlobUserBeing& ProfessionData::being_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.being_data)
  return being_data_ != NULL ? *being_data_ : *default_instance_->being_data_;
}
inline ::Cmd::BlobUserBeing* ProfessionData::mutable_being_data() {
  set_has_being_data();
  if (being_data_ == NULL) being_data_ = new ::Cmd::BlobUserBeing;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.being_data)
  return being_data_;
}
inline ::Cmd::BlobUserBeing* ProfessionData::release_being_data() {
  clear_has_being_data();
  ::Cmd::BlobUserBeing* temp = being_data_;
  being_data_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_being_data(::Cmd::BlobUserBeing* being_data) {
  delete being_data_;
  being_data_ = being_data;
  if (being_data) {
    set_has_being_data();
  } else {
    clear_has_being_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.being_data)
}

// optional .Cmd.BlobAttr attr_data = 15;
inline bool ProfessionData::has_attr_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProfessionData::set_has_attr_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProfessionData::clear_has_attr_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProfessionData::clear_attr_data() {
  if (attr_data_ != NULL) attr_data_->::Cmd::BlobAttr::Clear();
  clear_has_attr_data();
}
inline const ::Cmd::BlobAttr& ProfessionData::attr_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.attr_data)
  return attr_data_ != NULL ? *attr_data_ : *default_instance_->attr_data_;
}
inline ::Cmd::BlobAttr* ProfessionData::mutable_attr_data() {
  set_has_attr_data();
  if (attr_data_ == NULL) attr_data_ = new ::Cmd::BlobAttr;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.attr_data)
  return attr_data_;
}
inline ::Cmd::BlobAttr* ProfessionData::release_attr_data() {
  clear_has_attr_data();
  ::Cmd::BlobAttr* temp = attr_data_;
  attr_data_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_attr_data(::Cmd::BlobAttr* attr_data) {
  delete attr_data_;
  attr_data_ = attr_data;
  if (attr_data) {
    set_has_attr_data();
  } else {
    clear_has_attr_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.attr_data)
}

// optional .Cmd.SkillData novice_data = 16;
inline bool ProfessionData::has_novice_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProfessionData::set_has_novice_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProfessionData::clear_has_novice_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProfessionData::clear_novice_data() {
  if (novice_data_ != NULL) novice_data_->::Cmd::SkillData::Clear();
  clear_has_novice_data();
}
inline const ::Cmd::SkillData& ProfessionData::novice_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.novice_data)
  return novice_data_ != NULL ? *novice_data_ : *default_instance_->novice_data_;
}
inline ::Cmd::SkillData* ProfessionData::mutable_novice_data() {
  set_has_novice_data();
  if (novice_data_ == NULL) novice_data_ = new ::Cmd::SkillData;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.novice_data)
  return novice_data_;
}
inline ::Cmd::SkillData* ProfessionData::release_novice_data() {
  clear_has_novice_data();
  ::Cmd::SkillData* temp = novice_data_;
  novice_data_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_novice_data(::Cmd::SkillData* novice_data) {
  delete novice_data_;
  novice_data_ = novice_data;
  if (novice_data) {
    set_has_novice_data();
  } else {
    clear_has_novice_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.novice_data)
}

// optional .Cmd.BlobPet partner_data = 17;
inline bool ProfessionData::has_partner_data() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProfessionData::set_has_partner_data() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProfessionData::clear_has_partner_data() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProfessionData::clear_partner_data() {
  if (partner_data_ != NULL) partner_data_->::Cmd::BlobPet::Clear();
  clear_has_partner_data();
}
inline const ::Cmd::BlobPet& ProfessionData::partner_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.partner_data)
  return partner_data_ != NULL ? *partner_data_ : *default_instance_->partner_data_;
}
inline ::Cmd::BlobPet* ProfessionData::mutable_partner_data() {
  set_has_partner_data();
  if (partner_data_ == NULL) partner_data_ = new ::Cmd::BlobPet;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.partner_data)
  return partner_data_;
}
inline ::Cmd::BlobPet* ProfessionData::release_partner_data() {
  clear_has_partner_data();
  ::Cmd::BlobPet* temp = partner_data_;
  partner_data_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_partner_data(::Cmd::BlobPet* partner_data) {
  delete partner_data_;
  partner_data_ = partner_data;
  if (partner_data) {
    set_has_partner_data();
  } else {
    clear_has_partner_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.partner_data)
}

// optional bool isfirst = 18 [default = true];
inline bool ProfessionData::has_isfirst() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProfessionData::set_has_isfirst() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProfessionData::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProfessionData::clear_isfirst() {
  isfirst_ = true;
  clear_has_isfirst();
}
inline bool ProfessionData::isfirst() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.isfirst)
  return isfirst_;
}
inline void ProfessionData::set_isfirst(bool value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.isfirst)
}

// repeated .Cmd.UserData appearance_data = 19;
inline int ProfessionData::appearance_data_size() const {
  return appearance_data_.size();
}
inline void ProfessionData::clear_appearance_data() {
  appearance_data_.Clear();
}
inline const ::Cmd::UserData& ProfessionData::appearance_data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.appearance_data)
  return appearance_data_.Get(index);
}
inline ::Cmd::UserData* ProfessionData::mutable_appearance_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.appearance_data)
  return appearance_data_.Mutable(index);
}
inline ::Cmd::UserData* ProfessionData::add_appearance_data() {
  // @@protoc_insertion_point(field_add:Cmd.ProfessionData.appearance_data)
  return appearance_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
ProfessionData::appearance_data() const {
  // @@protoc_insertion_point(field_list:Cmd.ProfessionData.appearance_data)
  return appearance_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
ProfessionData::mutable_appearance_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ProfessionData.appearance_data)
  return &appearance_data_;
}

// optional .Cmd.SkillValidPosData skillpos = 20;
inline bool ProfessionData::has_skillpos() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProfessionData::set_has_skillpos() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProfessionData::clear_has_skillpos() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProfessionData::clear_skillpos() {
  if (skillpos_ != NULL) skillpos_->::Cmd::SkillValidPosData::Clear();
  clear_has_skillpos();
}
inline const ::Cmd::SkillValidPosData& ProfessionData::skillpos() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.skillpos)
  return skillpos_ != NULL ? *skillpos_ : *default_instance_->skillpos_;
}
inline ::Cmd::SkillValidPosData* ProfessionData::mutable_skillpos() {
  set_has_skillpos();
  if (skillpos_ == NULL) skillpos_ = new ::Cmd::SkillValidPosData;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.skillpos)
  return skillpos_;
}
inline ::Cmd::SkillValidPosData* ProfessionData::release_skillpos() {
  clear_has_skillpos();
  ::Cmd::SkillValidPosData* temp = skillpos_;
  skillpos_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_skillpos(::Cmd::SkillValidPosData* skillpos) {
  delete skillpos_;
  skillpos_ = skillpos;
  if (skillpos) {
    set_has_skillpos();
  } else {
    clear_has_skillpos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.skillpos)
}

// optional uint32 opertime = 21;
inline bool ProfessionData::has_opertime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ProfessionData::set_has_opertime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ProfessionData::clear_has_opertime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ProfessionData::clear_opertime() {
  opertime_ = 0u;
  clear_has_opertime();
}
inline ::google::protobuf::uint32 ProfessionData::opertime() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.opertime)
  return opertime_;
}
inline void ProfessionData::set_opertime(::google::protobuf::uint32 value) {
  set_has_opertime();
  opertime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionData.opertime)
}

// optional .Cmd.SkillValidPos shortcut = 22;
inline bool ProfessionData::has_shortcut() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ProfessionData::set_has_shortcut() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ProfessionData::clear_has_shortcut() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ProfessionData::clear_shortcut() {
  if (shortcut_ != NULL) shortcut_->::Cmd::SkillValidPos::Clear();
  clear_has_shortcut();
}
inline const ::Cmd::SkillValidPos& ProfessionData::shortcut() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.shortcut)
  return shortcut_ != NULL ? *shortcut_ : *default_instance_->shortcut_;
}
inline ::Cmd::SkillValidPos* ProfessionData::mutable_shortcut() {
  set_has_shortcut();
  if (shortcut_ == NULL) shortcut_ = new ::Cmd::SkillValidPos;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.shortcut)
  return shortcut_;
}
inline ::Cmd::SkillValidPos* ProfessionData::release_shortcut() {
  clear_has_shortcut();
  ::Cmd::SkillValidPos* temp = shortcut_;
  shortcut_ = NULL;
  return temp;
}
inline void ProfessionData::set_allocated_shortcut(::Cmd::SkillValidPos* shortcut) {
  delete shortcut_;
  shortcut_ = shortcut;
  if (shortcut) {
    set_has_shortcut();
  } else {
    clear_has_shortcut();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionData.shortcut)
}

// repeated .Cmd.ExchangeShopItem exchange_items = 23;
inline int ProfessionData::exchange_items_size() const {
  return exchange_items_.size();
}
inline void ProfessionData::clear_exchange_items() {
  exchange_items_.Clear();
}
inline const ::Cmd::ExchangeShopItem& ProfessionData::exchange_items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionData.exchange_items)
  return exchange_items_.Get(index);
}
inline ::Cmd::ExchangeShopItem* ProfessionData::mutable_exchange_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionData.exchange_items)
  return exchange_items_.Mutable(index);
}
inline ::Cmd::ExchangeShopItem* ProfessionData::add_exchange_items() {
  // @@protoc_insertion_point(field_add:Cmd.ProfessionData.exchange_items)
  return exchange_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >&
ProfessionData::exchange_items() const {
  // @@protoc_insertion_point(field_list:Cmd.ProfessionData.exchange_items)
  return exchange_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ExchangeShopItem >*
ProfessionData::mutable_exchange_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ProfessionData.exchange_items)
  return &exchange_items_;
}

// -------------------------------------------------------------------

// ProfessionSvrData

// optional uint32 id = 1 [default = 0];
inline bool ProfessionSvrData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionSvrData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionSvrData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionSvrData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ProfessionSvrData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSvrData.id)
  return id_;
}
inline void ProfessionSvrData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSvrData.id)
}

// optional uint32 bepro_1_time = 2 [default = 0];
inline bool ProfessionSvrData::has_bepro_1_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionSvrData::set_has_bepro_1_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionSvrData::clear_has_bepro_1_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionSvrData::clear_bepro_1_time() {
  bepro_1_time_ = 0u;
  clear_has_bepro_1_time();
}
inline ::google::protobuf::uint32 ProfessionSvrData::bepro_1_time() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSvrData.bepro_1_time)
  return bepro_1_time_;
}
inline void ProfessionSvrData::set_bepro_1_time(::google::protobuf::uint32 value) {
  set_has_bepro_1_time();
  bepro_1_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSvrData.bepro_1_time)
}

// optional uint32 bepro_2_time = 3 [default = 0];
inline bool ProfessionSvrData::has_bepro_2_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionSvrData::set_has_bepro_2_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionSvrData::clear_has_bepro_2_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionSvrData::clear_bepro_2_time() {
  bepro_2_time_ = 0u;
  clear_has_bepro_2_time();
}
inline ::google::protobuf::uint32 ProfessionSvrData::bepro_2_time() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSvrData.bepro_2_time)
  return bepro_2_time_;
}
inline void ProfessionSvrData::set_bepro_2_time(::google::protobuf::uint32 value) {
  set_has_bepro_2_time();
  bepro_2_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSvrData.bepro_2_time)
}

// optional uint32 bepro_3_time = 4 [default = 0];
inline bool ProfessionSvrData::has_bepro_3_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionSvrData::set_has_bepro_3_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionSvrData::clear_has_bepro_3_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionSvrData::clear_bepro_3_time() {
  bepro_3_time_ = 0u;
  clear_has_bepro_3_time();
}
inline ::google::protobuf::uint32 ProfessionSvrData::bepro_3_time() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSvrData.bepro_3_time)
  return bepro_3_time_;
}
inline void ProfessionSvrData::set_bepro_3_time(::google::protobuf::uint32 value) {
  set_has_bepro_3_time();
  bepro_3_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSvrData.bepro_3_time)
}

// -------------------------------------------------------------------

// BlobProfession

// repeated .Cmd.ProfessionData datas = 1;
inline int BlobProfession::datas_size() const {
  return datas_.size();
}
inline void BlobProfession::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::ProfessionData& BlobProfession::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobProfession.datas)
  return datas_.Get(index);
}
inline ::Cmd::ProfessionData* BlobProfession::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobProfession.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::ProfessionData* BlobProfession::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobProfession.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >&
BlobProfession::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobProfession.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >*
BlobProfession::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobProfession.datas)
  return &datas_;
}

// repeated .Cmd.ProfessionSvrData svr_datas = 3;
inline int BlobProfession::svr_datas_size() const {
  return svr_datas_.size();
}
inline void BlobProfession::clear_svr_datas() {
  svr_datas_.Clear();
}
inline const ::Cmd::ProfessionSvrData& BlobProfession::svr_datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobProfession.svr_datas)
  return svr_datas_.Get(index);
}
inline ::Cmd::ProfessionSvrData* BlobProfession::mutable_svr_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobProfession.svr_datas)
  return svr_datas_.Mutable(index);
}
inline ::Cmd::ProfessionSvrData* BlobProfession::add_svr_datas() {
  // @@protoc_insertion_point(field_add:Cmd.BlobProfession.svr_datas)
  return svr_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionSvrData >&
BlobProfession::svr_datas() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobProfession.svr_datas)
  return svr_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionSvrData >*
BlobProfession::mutable_svr_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobProfession.svr_datas)
  return &svr_datas_;
}

// optional uint32 last_load_time = 2 [default = 0];
inline bool BlobProfession::has_last_load_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProfession::set_has_last_load_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProfession::clear_has_last_load_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProfession::clear_last_load_time() {
  last_load_time_ = 0u;
  clear_has_last_load_time();
}
inline ::google::protobuf::uint32 BlobProfession::last_load_time() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobProfession.last_load_time)
  return last_load_time_;
}
inline void BlobProfession::set_last_load_time(::google::protobuf::uint32 value) {
  set_has_last_load_time();
  last_load_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobProfession.last_load_time)
}

// -------------------------------------------------------------------

// BlobRecordInfo

// optional uint32 buytimes = 1;
inline bool BlobRecordInfo::has_buytimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobRecordInfo::set_has_buytimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobRecordInfo::clear_has_buytimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobRecordInfo::clear_buytimes() {
  buytimes_ = 0u;
  clear_has_buytimes();
}
inline ::google::protobuf::uint32 BlobRecordInfo::buytimes() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.buytimes)
  return buytimes_;
}
inline void BlobRecordInfo::set_buytimes(::google::protobuf::uint32 value) {
  set_has_buytimes();
  buytimes_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobRecordInfo.buytimes)
}

// optional uint32 last_load_time = 2;
inline bool BlobRecordInfo::has_last_load_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobRecordInfo::set_has_last_load_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobRecordInfo::clear_has_last_load_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobRecordInfo::clear_last_load_time() {
  last_load_time_ = 0u;
  clear_has_last_load_time();
}
inline ::google::protobuf::uint32 BlobRecordInfo::last_load_time() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.last_load_time)
  return last_load_time_;
}
inline void BlobRecordInfo::set_last_load_time(::google::protobuf::uint32 value) {
  set_has_last_load_time();
  last_load_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobRecordInfo.last_load_time)
}

// repeated .Cmd.ProfessionData records = 3;
inline int BlobRecordInfo::records_size() const {
  return records_.size();
}
inline void BlobRecordInfo::clear_records() {
  records_.Clear();
}
inline const ::Cmd::ProfessionData& BlobRecordInfo::records(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.records)
  return records_.Get(index);
}
inline ::Cmd::ProfessionData* BlobRecordInfo::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobRecordInfo.records)
  return records_.Mutable(index);
}
inline ::Cmd::ProfessionData* BlobRecordInfo::add_records() {
  // @@protoc_insertion_point(field_add:Cmd.BlobRecordInfo.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >&
BlobRecordInfo::records() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobRecordInfo.records)
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionData >*
BlobRecordInfo::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobRecordInfo.records)
  return &records_;
}

// optional uint32 dest_charid = 4;
inline bool BlobRecordInfo::has_dest_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobRecordInfo::set_has_dest_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobRecordInfo::clear_has_dest_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobRecordInfo::clear_dest_charid() {
  dest_charid_ = 0u;
  clear_has_dest_charid();
}
inline ::google::protobuf::uint32 BlobRecordInfo::dest_charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.dest_charid)
  return dest_charid_;
}
inline void BlobRecordInfo::set_dest_charid(::google::protobuf::uint32 value) {
  set_has_dest_charid();
  dest_charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobRecordInfo.dest_charid)
}

// optional uint32 dest_map = 5;
inline bool BlobRecordInfo::has_dest_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobRecordInfo::set_has_dest_map() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobRecordInfo::clear_has_dest_map() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobRecordInfo::clear_dest_map() {
  dest_map_ = 0u;
  clear_has_dest_map();
}
inline ::google::protobuf::uint32 BlobRecordInfo::dest_map() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.dest_map)
  return dest_map_;
}
inline void BlobRecordInfo::set_dest_map(::google::protobuf::uint32 value) {
  set_has_dest_map();
  dest_map_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobRecordInfo.dest_map)
}

// optional uint32 dest_slotid = 6;
inline bool BlobRecordInfo::has_dest_slotid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobRecordInfo::set_has_dest_slotid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobRecordInfo::clear_has_dest_slotid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobRecordInfo::clear_dest_slotid() {
  dest_slotid_ = 0u;
  clear_has_dest_slotid();
}
inline ::google::protobuf::uint32 BlobRecordInfo::dest_slotid() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.dest_slotid)
  return dest_slotid_;
}
inline void BlobRecordInfo::set_dest_slotid(::google::protobuf::uint32 value) {
  set_has_dest_slotid();
  dest_slotid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobRecordInfo.dest_slotid)
}

// optional uint32 card_expiretime = 7;
inline bool BlobRecordInfo::has_card_expiretime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobRecordInfo::set_has_card_expiretime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobRecordInfo::clear_has_card_expiretime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobRecordInfo::clear_card_expiretime() {
  card_expiretime_ = 0u;
  clear_has_card_expiretime();
}
inline ::google::protobuf::uint32 BlobRecordInfo::card_expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.card_expiretime)
  return card_expiretime_;
}
inline void BlobRecordInfo::set_card_expiretime(::google::protobuf::uint32 value) {
  set_has_card_expiretime();
  card_expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobRecordInfo.card_expiretime)
}

// repeated .Cmd.UserAstrolMaterialData astrol_data = 8;
inline int BlobRecordInfo::astrol_data_size() const {
  return astrol_data_.size();
}
inline void BlobRecordInfo::clear_astrol_data() {
  astrol_data_.Clear();
}
inline const ::Cmd::UserAstrolMaterialData& BlobRecordInfo::astrol_data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobRecordInfo.astrol_data)
  return astrol_data_.Get(index);
}
inline ::Cmd::UserAstrolMaterialData* BlobRecordInfo::mutable_astrol_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobRecordInfo.astrol_data)
  return astrol_data_.Mutable(index);
}
inline ::Cmd::UserAstrolMaterialData* BlobRecordInfo::add_astrol_data() {
  // @@protoc_insertion_point(field_add:Cmd.BlobRecordInfo.astrol_data)
  return astrol_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >&
BlobRecordInfo::astrol_data() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobRecordInfo.astrol_data)
  return astrol_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >*
BlobRecordInfo::mutable_astrol_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobRecordInfo.astrol_data)
  return &astrol_data_;
}

// -------------------------------------------------------------------

// UserProfessionData

// optional uint32 profession = 1;
inline bool UserProfessionData::has_profession() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserProfessionData::set_has_profession() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserProfessionData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserProfessionData::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 UserProfessionData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.UserProfessionData.profession)
  return profession_;
}
inline void UserProfessionData::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserProfessionData.profession)
}

// optional uint32 joblv = 2;
inline bool UserProfessionData::has_joblv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserProfessionData::set_has_joblv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserProfessionData::clear_has_joblv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserProfessionData::clear_joblv() {
  joblv_ = 0u;
  clear_has_joblv();
}
inline ::google::protobuf::uint32 UserProfessionData::joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.UserProfessionData.joblv)
  return joblv_;
}
inline void UserProfessionData::set_joblv(::google::protobuf::uint32 value) {
  set_has_joblv();
  joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserProfessionData.joblv)
}

// -------------------------------------------------------------------

// ReqUserProfessionCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool ReqUserProfessionCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqUserProfessionCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqUserProfessionCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqUserProfessionCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command ReqUserProfessionCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqUserProfessionCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqUserProfessionCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqUserProfessionCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_PROFESSION];
inline bool ReqUserProfessionCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqUserProfessionCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqUserProfessionCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqUserProfessionCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::RecordParam ReqUserProfessionCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqUserProfessionCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void ReqUserProfessionCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqUserProfessionCmd.param)
}

// optional uint64 charid = 3;
inline bool ReqUserProfessionCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqUserProfessionCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqUserProfessionCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqUserProfessionCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReqUserProfessionCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqUserProfessionCmd.charid)
  return charid_;
}
inline void ReqUserProfessionCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqUserProfessionCmd.charid)
}

// optional uint64 accid = 4;
inline bool ReqUserProfessionCmd::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqUserProfessionCmd::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqUserProfessionCmd::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqUserProfessionCmd::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 ReqUserProfessionCmd::accid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqUserProfessionCmd.accid)
  return accid_;
}
inline void ReqUserProfessionCmd::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqUserProfessionCmd.accid)
}

// optional string scenename = 5;
inline bool ReqUserProfessionCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqUserProfessionCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqUserProfessionCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqUserProfessionCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& ReqUserProfessionCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqUserProfessionCmd.scenename)
  return *scenename_;
}
inline void ReqUserProfessionCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReqUserProfessionCmd.scenename)
}
inline void ReqUserProfessionCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReqUserProfessionCmd.scenename)
}
inline void ReqUserProfessionCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReqUserProfessionCmd.scenename)
}
inline ::std::string* ReqUserProfessionCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReqUserProfessionCmd.scenename)
  return scenename_;
}
inline ::std::string* ReqUserProfessionCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqUserProfessionCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqUserProfessionCmd.scenename)
}

// repeated .Cmd.UserProfessionData datas = 6;
inline int ReqUserProfessionCmd::datas_size() const {
  return datas_.size();
}
inline void ReqUserProfessionCmd::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserProfessionData& ReqUserProfessionCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqUserProfessionCmd.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserProfessionData* ReqUserProfessionCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqUserProfessionCmd.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserProfessionData* ReqUserProfessionCmd::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.ReqUserProfessionCmd.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserProfessionData >&
ReqUserProfessionCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqUserProfessionCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserProfessionData >*
ReqUserProfessionCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqUserProfessionCmd.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// ProfessionSaveRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool ProfessionSaveRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionSaveRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionSaveRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionSaveRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command ProfessionSaveRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSaveRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ProfessionSaveRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSaveRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_SAVE];
inline bool ProfessionSaveRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionSaveRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionSaveRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionSaveRecordCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::RecordParam ProfessionSaveRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSaveRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void ProfessionSaveRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSaveRecordCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool ProfessionSaveRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionSaveRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionSaveRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionSaveRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ProfessionSaveRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSaveRecordCmd.charid)
  return charid_;
}
inline void ProfessionSaveRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSaveRecordCmd.charid)
}

// optional uint32 branch = 4 [default = 0];
inline bool ProfessionSaveRecordCmd::has_branch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionSaveRecordCmd::set_has_branch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionSaveRecordCmd::clear_has_branch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionSaveRecordCmd::clear_branch() {
  branch_ = 0u;
  clear_has_branch();
}
inline ::google::protobuf::uint32 ProfessionSaveRecordCmd::branch() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSaveRecordCmd.branch)
  return branch_;
}
inline void ProfessionSaveRecordCmd::set_branch(::google::protobuf::uint32 value) {
  set_has_branch();
  branch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSaveRecordCmd.branch)
}

// optional bytes data = 5;
inline bool ProfessionSaveRecordCmd::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfessionSaveRecordCmd::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProfessionSaveRecordCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProfessionSaveRecordCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ProfessionSaveRecordCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionSaveRecordCmd.data)
  return *data_;
}
inline void ProfessionSaveRecordCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ProfessionSaveRecordCmd.data)
}
inline void ProfessionSaveRecordCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProfessionSaveRecordCmd.data)
}
inline void ProfessionSaveRecordCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProfessionSaveRecordCmd.data)
}
inline ::std::string* ProfessionSaveRecordCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionSaveRecordCmd.data)
  return data_;
}
inline ::std::string* ProfessionSaveRecordCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfessionSaveRecordCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionSaveRecordCmd.data)
}

// -------------------------------------------------------------------

// ProfessionQueryRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool ProfessionQueryRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionQueryRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionQueryRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionQueryRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command ProfessionQueryRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ProfessionQueryRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionQueryRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_QUERY];
inline bool ProfessionQueryRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionQueryRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionQueryRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionQueryRecordCmd::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::RecordParam ProfessionQueryRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void ProfessionQueryRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionQueryRecordCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool ProfessionQueryRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionQueryRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionQueryRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionQueryRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ProfessionQueryRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryRecordCmd.charid)
  return charid_;
}
inline void ProfessionQueryRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionQueryRecordCmd.charid)
}

// optional string scenename = 4;
inline bool ProfessionQueryRecordCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionQueryRecordCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionQueryRecordCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionQueryRecordCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& ProfessionQueryRecordCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryRecordCmd.scenename)
  return *scenename_;
}
inline void ProfessionQueryRecordCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ProfessionQueryRecordCmd.scenename)
}
inline void ProfessionQueryRecordCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProfessionQueryRecordCmd.scenename)
}
inline void ProfessionQueryRecordCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProfessionQueryRecordCmd.scenename)
}
inline ::std::string* ProfessionQueryRecordCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionQueryRecordCmd.scenename)
  return scenename_;
}
inline ::std::string* ProfessionQueryRecordCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfessionQueryRecordCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionQueryRecordCmd.scenename)
}

// repeated bytes datas = 5;
inline int ProfessionQueryRecordCmd::datas_size() const {
  return datas_.size();
}
inline void ProfessionQueryRecordCmd::clear_datas() {
  datas_.Clear();
}
inline const ::std::string& ProfessionQueryRecordCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryRecordCmd.datas)
  return datas_.Get(index);
}
inline ::std::string* ProfessionQueryRecordCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionQueryRecordCmd.datas)
  return datas_.Mutable(index);
}
inline void ProfessionQueryRecordCmd::set_datas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.ProfessionQueryRecordCmd.datas)
  datas_.Mutable(index)->assign(value);
}
inline void ProfessionQueryRecordCmd::set_datas(int index, const char* value) {
  datas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProfessionQueryRecordCmd.datas)
}
inline void ProfessionQueryRecordCmd::set_datas(int index, const void* value, size_t size) {
  datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProfessionQueryRecordCmd.datas)
}
inline ::std::string* ProfessionQueryRecordCmd::add_datas() {
  return datas_.Add();
}
inline void ProfessionQueryRecordCmd::add_datas(const ::std::string& value) {
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.ProfessionQueryRecordCmd.datas)
}
inline void ProfessionQueryRecordCmd::add_datas(const char* value) {
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.ProfessionQueryRecordCmd.datas)
}
inline void ProfessionQueryRecordCmd::add_datas(const void* value, size_t size) {
  datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.ProfessionQueryRecordCmd.datas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfessionQueryRecordCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.ProfessionQueryRecordCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProfessionQueryRecordCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ProfessionQueryRecordCmd.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// ActivityQuestItem

// optional uint32 questid = 1 [default = 0];
inline bool ActivityQuestItem::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityQuestItem::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityQuestItem::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityQuestItem::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 ActivityQuestItem::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityQuestItem.questid)
  return questid_;
}
inline void ActivityQuestItem::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityQuestItem.questid)
}

// optional uint32 finishcount = 2 [default = 0];
inline bool ActivityQuestItem::has_finishcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityQuestItem::set_has_finishcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityQuestItem::clear_has_finishcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityQuestItem::clear_finishcount() {
  finishcount_ = 0u;
  clear_has_finishcount();
}
inline ::google::protobuf::uint32 ActivityQuestItem::finishcount() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityQuestItem.finishcount)
  return finishcount_;
}
inline void ActivityQuestItem::set_finishcount(::google::protobuf::uint32 value) {
  set_has_finishcount();
  finishcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityQuestItem.finishcount)
}

// optional uint32 lastquesttime = 3 [default = 0];
inline bool ActivityQuestItem::has_lastquesttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityQuestItem::set_has_lastquesttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityQuestItem::clear_has_lastquesttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityQuestItem::clear_lastquesttime() {
  lastquesttime_ = 0u;
  clear_has_lastquesttime();
}
inline ::google::protobuf::uint32 ActivityQuestItem::lastquesttime() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityQuestItem.lastquesttime)
  return lastquesttime_;
}
inline void ActivityQuestItem::set_lastquesttime(::google::protobuf::uint32 value) {
  set_has_lastquesttime();
  lastquesttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityQuestItem.lastquesttime)
}

// -------------------------------------------------------------------

// BlobActivityQuest

// repeated .Cmd.ActivityQuestItem activityitems = 1;
inline int BlobActivityQuest::activityitems_size() const {
  return activityitems_.size();
}
inline void BlobActivityQuest::clear_activityitems() {
  activityitems_.Clear();
}
inline const ::Cmd::ActivityQuestItem& BlobActivityQuest::activityitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BlobActivityQuest.activityitems)
  return activityitems_.Get(index);
}
inline ::Cmd::ActivityQuestItem* BlobActivityQuest::mutable_activityitems(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BlobActivityQuest.activityitems)
  return activityitems_.Mutable(index);
}
inline ::Cmd::ActivityQuestItem* BlobActivityQuest::add_activityitems() {
  // @@protoc_insertion_point(field_add:Cmd.BlobActivityQuest.activityitems)
  return activityitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityQuestItem >&
BlobActivityQuest::activityitems() const {
  // @@protoc_insertion_point(field_list:Cmd.BlobActivityQuest.activityitems)
  return activityitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ActivityQuestItem >*
BlobActivityQuest::mutable_activityitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BlobActivityQuest.activityitems)
  return &activityitems_;
}

// -------------------------------------------------------------------

// BlobBooth

// optional uint32 score = 1;
inline bool BlobBooth::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobBooth::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobBooth::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobBooth::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 BlobBooth::score() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobBooth.score)
  return score_;
}
inline void BlobBooth::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobBooth.score)
}

// -------------------------------------------------------------------

// BlobElementElfData

// optional uint32 cur_element_id = 1;
inline bool BlobElementElfData::has_cur_element_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobElementElfData::set_has_cur_element_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobElementElfData::clear_has_cur_element_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobElementElfData::clear_cur_element_id() {
  cur_element_id_ = 0u;
  clear_has_cur_element_id();
}
inline ::google::protobuf::uint32 BlobElementElfData::cur_element_id() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobElementElfData.cur_element_id)
  return cur_element_id_;
}
inline void BlobElementElfData::set_cur_element_id(::google::protobuf::uint32 value) {
  set_has_cur_element_id();
  cur_element_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobElementElfData.cur_element_id)
}

// optional uint32 clear_time = 2;
inline bool BlobElementElfData::has_clear_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobElementElfData::set_has_clear_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobElementElfData::clear_has_clear_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobElementElfData::clear_clear_time() {
  clear_time_ = 0u;
  clear_has_clear_time();
}
inline ::google::protobuf::uint32 BlobElementElfData::clear_time() const {
  // @@protoc_insertion_point(field_get:Cmd.BlobElementElfData.clear_time)
  return clear_time_;
}
inline void BlobElementElfData::set_clear_time(::google::protobuf::uint32 value) {
  set_has_clear_time();
  clear_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BlobElementElfData.clear_time)
}

// -------------------------------------------------------------------

// CheatTagRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool CheatTagRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheatTagRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheatTagRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheatTagRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command CheatTagRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheatTagRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG];
inline bool CheatTagRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheatTagRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheatTagRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheatTagRecordCmd::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::RecordParam CheatTagRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void CheatTagRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagRecordCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool CheatTagRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheatTagRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheatTagRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheatTagRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CheatTagRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagRecordCmd.charid)
  return charid_;
}
inline void CheatTagRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagRecordCmd.charid)
}

// optional uint32 mininterval = 4 [default = 0];
inline bool CheatTagRecordCmd::has_mininterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheatTagRecordCmd::set_has_mininterval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheatTagRecordCmd::clear_has_mininterval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheatTagRecordCmd::clear_mininterval() {
  mininterval_ = 0u;
  clear_has_mininterval();
}
inline ::google::protobuf::uint32 CheatTagRecordCmd::mininterval() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagRecordCmd.mininterval)
  return mininterval_;
}
inline void CheatTagRecordCmd::set_mininterval(::google::protobuf::uint32 value) {
  set_has_mininterval();
  mininterval_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagRecordCmd.mininterval)
}

// optional uint32 frame = 5 [default = 0];
inline bool CheatTagRecordCmd::has_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheatTagRecordCmd::set_has_frame() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheatTagRecordCmd::clear_has_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheatTagRecordCmd::clear_frame() {
  frame_ = 0u;
  clear_has_frame();
}
inline ::google::protobuf::uint32 CheatTagRecordCmd::frame() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagRecordCmd.frame)
  return frame_;
}
inline void CheatTagRecordCmd::set_frame(::google::protobuf::uint32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagRecordCmd.frame)
}

// optional uint32 count = 6 [default = 0];
inline bool CheatTagRecordCmd::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheatTagRecordCmd::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheatTagRecordCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheatTagRecordCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CheatTagRecordCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagRecordCmd.count)
  return count_;
}
inline void CheatTagRecordCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagRecordCmd.count)
}

// -------------------------------------------------------------------

// CheatTagQueryRecordCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
inline bool CheatTagQueryRecordCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheatTagQueryRecordCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheatTagQueryRecordCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheatTagQueryRecordCmd::clear_cmd() {
  cmd_ = 200;
  clear_has_cmd();
}
inline ::Cmd::Command CheatTagQueryRecordCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagQueryRecordCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheatTagQueryRecordCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagQueryRecordCmd.cmd)
}

// optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG_QUERY];
inline bool CheatTagQueryRecordCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheatTagQueryRecordCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheatTagQueryRecordCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheatTagQueryRecordCmd::clear_param() {
  param_ = 25;
  clear_has_param();
}
inline ::Cmd::RecordParam CheatTagQueryRecordCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagQueryRecordCmd.param)
  return static_cast< ::Cmd::RecordParam >(param_);
}
inline void CheatTagQueryRecordCmd::set_param(::Cmd::RecordParam value) {
  assert(::Cmd::RecordParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagQueryRecordCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool CheatTagQueryRecordCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheatTagQueryRecordCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheatTagQueryRecordCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheatTagQueryRecordCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CheatTagQueryRecordCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagQueryRecordCmd.charid)
  return charid_;
}
inline void CheatTagQueryRecordCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagQueryRecordCmd.charid)
}

// optional string scenename = 4;
inline bool CheatTagQueryRecordCmd::has_scenename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheatTagQueryRecordCmd::set_has_scenename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheatTagQueryRecordCmd::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheatTagQueryRecordCmd::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& CheatTagQueryRecordCmd::scenename() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagQueryRecordCmd.scenename)
  return *scenename_;
}
inline void CheatTagQueryRecordCmd::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CheatTagQueryRecordCmd.scenename)
}
inline void CheatTagQueryRecordCmd::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CheatTagQueryRecordCmd.scenename)
}
inline void CheatTagQueryRecordCmd::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CheatTagQueryRecordCmd.scenename)
}
inline ::std::string* CheatTagQueryRecordCmd::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CheatTagQueryRecordCmd.scenename)
  return scenename_;
}
inline ::std::string* CheatTagQueryRecordCmd::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheatTagQueryRecordCmd::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CheatTagQueryRecordCmd.scenename)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::RecordParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::RecordParam>() {
  return ::Cmd::RecordParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETicketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETicketType>() {
  return ::Cmd::ETicketType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETicketRet> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETicketRet>() {
  return ::Cmd::ETicketRet_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETicketCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETicketCmdType>() {
  return ::Cmd::ETicketCmdType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EShareDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EShareDataType>() {
  return ::Cmd::EShareDataType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPatchType>() {
  return ::Cmd::EPatchType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RecordCmd_2eproto__INCLUDED
