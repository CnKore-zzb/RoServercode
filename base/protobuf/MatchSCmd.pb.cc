// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchSCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MatchSCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* SessionForwardCCmdMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardCCmdMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionForwardSCmdMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardSCmdMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionForwardMatchScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardMatchScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionForwardMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardMatchTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionForwardTeamMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardTeamMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegPvpZoneMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegPvpZoneMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterPvpMapSCmdMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterPvpMapSCmdMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeavePvpMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeavePvpMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfJoinRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfJoinRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfLeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfLeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTeamMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTeamMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpTeamMemberUpdateSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpTeamMemberUpdateSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpMemberDataUpdateSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpMemberDataUpdateSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyTeamMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyTeamMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncTeamInfoMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncTeamInfoMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRaidSceneMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRaidSceneMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgRoomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgRoomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsUserCurScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsUserCurScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsRoomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsRoomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRoomSceneMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRoomSceneMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickTeamMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickTeamMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickUserFromPvpMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickUserFromPvpMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetPvpMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetPvpMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchPvpMathcSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchPvpMathcSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckCanBuyMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckCanBuyMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBuyCntMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBuyCntMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySoldCntMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySoldCntMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinSuperGvgMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinSuperGvgMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgRetMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgRetMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearMvpCDMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearMvpCDMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorOptMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorOptMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TutorBlackUpdateMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TutorBlackUpdateMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBoothReqMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBoothReqMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBoothNTFMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBoothNTFMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinTeamPwsMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinTeamPwsMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitTeamPwsMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitTeamPwsMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneGMTestMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneGMTestMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchScoreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchScoreData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateScoreMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateScoreMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncUserScoreMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncUserScoreMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLeaveRaidMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLeaveRaidMatchSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfirmTeamMatchSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfirmTeamMatchSCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchSParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETutorOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESceneGMMatchType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MatchSCmd_2eproto() {
  protobuf_AddDesc_MatchSCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MatchSCmd.proto");
  GOOGLE_CHECK(file != NULL);
  SessionForwardCCmdMatch_descriptor_ = file->message_type(0);
  static const int SessionForwardCCmdMatch_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, len_),
  };
  SessionForwardCCmdMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardCCmdMatch_descriptor_,
      SessionForwardCCmdMatch::default_instance_,
      SessionForwardCCmdMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardCCmdMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardCCmdMatch));
  SessionForwardSCmdMatch_descriptor_ = file->message_type(1);
  static const int SessionForwardSCmdMatch_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, len_),
  };
  SessionForwardSCmdMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardSCmdMatch_descriptor_,
      SessionForwardSCmdMatch::default_instance_,
      SessionForwardSCmdMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSCmdMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardSCmdMatch));
  SessionForwardMatchScene_descriptor_ = file->message_type(2);
  static const int SessionForwardMatchScene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchScene, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchScene, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchScene, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchScene, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchScene, len_),
  };
  SessionForwardMatchScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardMatchScene_descriptor_,
      SessionForwardMatchScene::default_instance_,
      SessionForwardMatchScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardMatchScene));
  SessionForwardMatchTeam_descriptor_ = file->message_type(3);
  static const int SessionForwardMatchTeam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchTeam, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchTeam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchTeam, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchTeam, len_),
  };
  SessionForwardMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardMatchTeam_descriptor_,
      SessionForwardMatchTeam::default_instance_,
      SessionForwardMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardMatchTeam));
  SessionForwardTeamMatch_descriptor_ = file->message_type(4);
  static const int SessionForwardTeamMatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardTeamMatch, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardTeamMatch, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardTeamMatch, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardTeamMatch, len_),
  };
  SessionForwardTeamMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardTeamMatch_descriptor_,
      SessionForwardTeamMatch::default_instance_,
      SessionForwardTeamMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardTeamMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardTeamMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardTeamMatch));
  RegPvpZoneMatch_descriptor_ = file->message_type(5);
  static const int RegPvpZoneMatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegPvpZoneMatch, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegPvpZoneMatch, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegPvpZoneMatch, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegPvpZoneMatch, zoneid_),
  };
  RegPvpZoneMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegPvpZoneMatch_descriptor_,
      RegPvpZoneMatch::default_instance_,
      RegPvpZoneMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegPvpZoneMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegPvpZoneMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegPvpZoneMatch));
  EnterPvpMapSCmdMatch_descriptor_ = file->message_type(6);
  static const int EnterPvpMapSCmdMatch_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, dest_zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, room_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, colorindex_),
  };
  EnterPvpMapSCmdMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterPvpMapSCmdMatch_descriptor_,
      EnterPvpMapSCmdMatch::default_instance_,
      EnterPvpMapSCmdMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvpMapSCmdMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterPvpMapSCmdMatch));
  LeavePvpMap_descriptor_ = file->message_type(7);
  static const int LeavePvpMap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvpMap, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvpMap, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvpMap, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvpMap, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvpMap, originzoneid_),
  };
  LeavePvpMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeavePvpMap_descriptor_,
      LeavePvpMap::default_instance_,
      LeavePvpMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvpMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvpMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeavePvpMap));
  NtfJoinRoom_descriptor_ = file->message_type(8);
  static const int NtfJoinRoom_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, success_),
  };
  NtfJoinRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfJoinRoom_descriptor_,
      NtfJoinRoom::default_instance_,
      NtfJoinRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfJoinRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfJoinRoom));
  NtfLeaveRoom_descriptor_ = file->message_type(9);
  static const int NtfLeaveRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfLeaveRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfLeaveRoom, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfLeaveRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfLeaveRoom, teamid_),
  };
  NtfLeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfLeaveRoom_descriptor_,
      NtfLeaveRoom::default_instance_,
      NtfLeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfLeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfLeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfLeaveRoom));
  CreateTeamMatchSCmd_descriptor_ = file->message_type(10);
  static const int CreateTeamMatchSCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, new_teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, pvptype_),
  };
  CreateTeamMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTeamMatchSCmd_descriptor_,
      CreateTeamMatchSCmd::default_instance_,
      CreateTeamMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTeamMatchSCmd));
  PvpTeamMemberUpdateSCmd_descriptor_ = file->message_type(11);
  static const int PvpTeamMemberUpdateSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateSCmd, data_),
  };
  PvpTeamMemberUpdateSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpTeamMemberUpdateSCmd_descriptor_,
      PvpTeamMemberUpdateSCmd::default_instance_,
      PvpTeamMemberUpdateSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamMemberUpdateSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpTeamMemberUpdateSCmd));
  PvpMemberDataUpdateSCmd_descriptor_ = file->message_type(12);
  static const int PvpMemberDataUpdateSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateSCmd, data_),
  };
  PvpMemberDataUpdateSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpMemberDataUpdateSCmd_descriptor_,
      PvpMemberDataUpdateSCmd::default_instance_,
      PvpMemberDataUpdateSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMemberDataUpdateSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpMemberDataUpdateSCmd));
  ApplyTeamMatchSCmd_descriptor_ = file->message_type(13);
  static const int ApplyTeamMatchSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamMatchSCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamMatchSCmd, zoneid_),
  };
  ApplyTeamMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyTeamMatchSCmd_descriptor_,
      ApplyTeamMatchSCmd::default_instance_,
      ApplyTeamMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyTeamMatchSCmd));
  SyncTeamInfoMatchSCmd_descriptor_ = file->message_type(14);
  static const int SyncTeamInfoMatchSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoMatchSCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoMatchSCmd, index_),
  };
  SyncTeamInfoMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncTeamInfoMatchSCmd_descriptor_,
      SyncTeamInfoMatchSCmd::default_instance_,
      SyncTeamInfoMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncTeamInfoMatchSCmd));
  SyncRaidSceneMatchSCmd_descriptor_ = file->message_type(15);
  static const int SyncRaidSceneMatchSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, zoneid_),
  };
  SyncRaidSceneMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncRaidSceneMatchSCmd_descriptor_,
      SyncRaidSceneMatchSCmd::default_instance_,
      SyncRaidSceneMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRaidSceneMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncRaidSceneMatchSCmd));
  SuperGvgRoomData_descriptor_ = file->message_type(16);
  static const int SuperGvgRoomData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, guildicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, firecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, firescore_),
  };
  SuperGvgRoomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgRoomData_descriptor_,
      SuperGvgRoomData::default_instance_,
      SuperGvgRoomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRoomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgRoomData));
  TeamPwsUserCurScore_descriptor_ = file->message_type(17);
  static const int TeamPwsUserCurScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserCurScore, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserCurScore, score_),
  };
  TeamPwsUserCurScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsUserCurScore_descriptor_,
      TeamPwsUserCurScore::default_instance_,
      TeamPwsUserCurScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserCurScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsUserCurScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsUserCurScore));
  TeamPwsRoomData_descriptor_ = file->message_type(18);
  static const int TeamPwsRoomData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRoomData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRoomData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRoomData, users_),
  };
  TeamPwsRoomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsRoomData_descriptor_,
      TeamPwsRoomData::default_instance_,
      TeamPwsRoomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRoomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRoomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsRoomData));
  SyncRoomSceneMatchSCmd_descriptor_ = file->message_type(19);
  static const int SyncRoomSceneMatchSCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, roomsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, sugvgdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, raidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, pwsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, pvptype_),
  };
  SyncRoomSceneMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncRoomSceneMatchSCmd_descriptor_,
      SyncRoomSceneMatchSCmd::default_instance_,
      SyncRoomSceneMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoomSceneMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncRoomSceneMatchSCmd));
  KickTeamMatchSCmd_descriptor_ = file->message_type(20);
  static const int KickTeamMatchSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, zoneid_),
  };
  KickTeamMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickTeamMatchSCmd_descriptor_,
      KickTeamMatchSCmd::default_instance_,
      KickTeamMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickTeamMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickTeamMatchSCmd));
  KickUserFromPvpMatchSCmd_descriptor_ = file->message_type(21);
  static const int KickUserFromPvpMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserFromPvpMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserFromPvpMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserFromPvpMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserFromPvpMatchSCmd, zoneid_),
  };
  KickUserFromPvpMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickUserFromPvpMatchSCmd_descriptor_,
      KickUserFromPvpMatchSCmd::default_instance_,
      KickUserFromPvpMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserFromPvpMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserFromPvpMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickUserFromPvpMatchSCmd));
  ResetPvpMatchSCmd_descriptor_ = file->message_type(22);
  static const int ResetPvpMatchSCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvpMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvpMatchSCmd, param_),
  };
  ResetPvpMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetPvpMatchSCmd_descriptor_,
      ResetPvpMatchSCmd::default_instance_,
      ResetPvpMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvpMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvpMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetPvpMatchSCmd));
  SwitchPvpMathcSCmd_descriptor_ = file->message_type(23);
  static const int SwitchPvpMathcSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPvpMathcSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPvpMathcSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPvpMathcSCmd, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPvpMathcSCmd, etype_),
  };
  SwitchPvpMathcSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchPvpMathcSCmd_descriptor_,
      SwitchPvpMathcSCmd::default_instance_,
      SwitchPvpMathcSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPvpMathcSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPvpMathcSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchPvpMathcSCmd));
  ActivityMatchSCmd_descriptor_ = file->message_type(24);
  static const int ActivityMatchSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMatchSCmd, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMatchSCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMatchSCmd, server_restart_),
  };
  ActivityMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityMatchSCmd_descriptor_,
      ActivityMatchSCmd::default_instance_,
      ActivityMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityMatchSCmd));
  CheckCanBuyMatchSCmd_descriptor_ = file->message_type(25);
  static const int CheckCanBuyMatchSCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, zoneid_),
  };
  CheckCanBuyMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckCanBuyMatchSCmd_descriptor_,
      CheckCanBuyMatchSCmd::default_instance_,
      CheckCanBuyMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanBuyMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckCanBuyMatchSCmd));
  AddBuyCntMatchSCmd_descriptor_ = file->message_type(26);
  static const int AddBuyCntMatchSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, zoneid_),
  };
  AddBuyCntMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBuyCntMatchSCmd_descriptor_,
      AddBuyCntMatchSCmd::default_instance_,
      AddBuyCntMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBuyCntMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBuyCntMatchSCmd));
  QuerySoldCntMatchSCmd_descriptor_ = file->message_type(27);
  static const int QuerySoldCntMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySoldCntMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySoldCntMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySoldCntMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySoldCntMatchSCmd, zoneid_),
  };
  QuerySoldCntMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySoldCntMatchSCmd_descriptor_,
      QuerySoldCntMatchSCmd::default_instance_,
      QuerySoldCntMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySoldCntMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySoldCntMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySoldCntMatchSCmd));
  JoinSuperGvgMatchSCmd_descriptor_ = file->message_type(28);
  static const int JoinSuperGvgMatchSCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, guildicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, firecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, firescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, begintime_),
  };
  JoinSuperGvgMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinSuperGvgMatchSCmd_descriptor_,
      JoinSuperGvgMatchSCmd::default_instance_,
      JoinSuperGvgMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinSuperGvgMatchSCmd));
  SuperGvgRetMatchSCmd_descriptor_ = file->message_type(29);
  static const int SuperGvgRetMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRetMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRetMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRetMatchSCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRetMatchSCmd, guildid_),
  };
  SuperGvgRetMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgRetMatchSCmd_descriptor_,
      SuperGvgRetMatchSCmd::default_instance_,
      SuperGvgRetMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRetMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRetMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgRetMatchSCmd));
  ClearMvpCDMatchSCmd_descriptor_ = file->message_type(30);
  static const int ClearMvpCDMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearMvpCDMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearMvpCDMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearMvpCDMatchSCmd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearMvpCDMatchSCmd, teamid_),
  };
  ClearMvpCDMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearMvpCDMatchSCmd_descriptor_,
      ClearMvpCDMatchSCmd::default_instance_,
      ClearMvpCDMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearMvpCDMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearMvpCDMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearMvpCDMatchSCmd));
  TutorOptMatchSCmd_descriptor_ = file->message_type(31);
  static const int TutorOptMatchSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, tutorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, studentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, result_),
  };
  TutorOptMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorOptMatchSCmd_descriptor_,
      TutorOptMatchSCmd::default_instance_,
      TutorOptMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorOptMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorOptMatchSCmd));
  TutorBlackUpdateMatchSCmd_descriptor_ = file->message_type(32);
  static const int TutorBlackUpdateMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorBlackUpdateMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorBlackUpdateMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorBlackUpdateMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorBlackUpdateMatchSCmd, blackids_),
  };
  TutorBlackUpdateMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TutorBlackUpdateMatchSCmd_descriptor_,
      TutorBlackUpdateMatchSCmd::default_instance_,
      TutorBlackUpdateMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorBlackUpdateMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TutorBlackUpdateMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TutorBlackUpdateMatchSCmd));
  UserBoothReqMatchSCmd_descriptor_ = file->message_type(33);
  static const int UserBoothReqMatchSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, oper_),
  };
  UserBoothReqMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBoothReqMatchSCmd_descriptor_,
      UserBoothReqMatchSCmd::default_instance_,
      UserBoothReqMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothReqMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBoothReqMatchSCmd));
  UserBoothNTFMatchSCmd_descriptor_ = file->message_type(34);
  static const int UserBoothNTFMatchSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, oper_),
  };
  UserBoothNTFMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBoothNTFMatchSCmd_descriptor_,
      UserBoothNTFMatchSCmd::default_instance_,
      UserBoothNTFMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBoothNTFMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBoothNTFMatchSCmd));
  JoinTeamPwsMatchSCmd_descriptor_ = file->message_type(35);
  static const int JoinTeamPwsMatchSCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, avescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, roomid_),
  };
  JoinTeamPwsMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinTeamPwsMatchSCmd_descriptor_,
      JoinTeamPwsMatchSCmd::default_instance_,
      JoinTeamPwsMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinTeamPwsMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinTeamPwsMatchSCmd));
  ExitTeamPwsMatchSCmd_descriptor_ = file->message_type(36);
  static const int ExitTeamPwsMatchSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeamPwsMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeamPwsMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeamPwsMatchSCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeamPwsMatchSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeamPwsMatchSCmd, etype_),
  };
  ExitTeamPwsMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitTeamPwsMatchSCmd_descriptor_,
      ExitTeamPwsMatchSCmd::default_instance_,
      ExitTeamPwsMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeamPwsMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitTeamPwsMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitTeamPwsMatchSCmd));
  SceneGMTestMatchSCmd_descriptor_ = file->message_type(37);
  static const int SceneGMTestMatchSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, params_),
  };
  SceneGMTestMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneGMTestMatchSCmd_descriptor_,
      SceneGMTestMatchSCmd::default_instance_,
      SceneGMTestMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGMTestMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneGMTestMatchSCmd));
  MatchScoreData_descriptor_ = file->message_type(38);
  static const int MatchScoreData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchScoreData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchScoreData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchScoreData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchScoreData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchScoreData, profession_),
  };
  MatchScoreData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchScoreData_descriptor_,
      MatchScoreData::default_instance_,
      MatchScoreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchScoreData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchScoreData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchScoreData));
  UpdateScoreMatchSCmd_descriptor_ = file->message_type(39);
  static const int UpdateScoreMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScoreMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScoreMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScoreMatchSCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScoreMatchSCmd, userscores_),
  };
  UpdateScoreMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateScoreMatchSCmd_descriptor_,
      UpdateScoreMatchSCmd::default_instance_,
      UpdateScoreMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScoreMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScoreMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateScoreMatchSCmd));
  SyncUserScoreMatchSCmd_descriptor_ = file->message_type(40);
  static const int SyncUserScoreMatchSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, season_),
  };
  SyncUserScoreMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncUserScoreMatchSCmd_descriptor_,
      SyncUserScoreMatchSCmd::default_instance_,
      SyncUserScoreMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncUserScoreMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncUserScoreMatchSCmd));
  UserLeaveRaidMatchSCmd_descriptor_ = file->message_type(41);
  static const int UserLeaveRaidMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveRaidMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveRaidMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveRaidMatchSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveRaidMatchSCmd, etype_),
  };
  UserLeaveRaidMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLeaveRaidMatchSCmd_descriptor_,
      UserLeaveRaidMatchSCmd::default_instance_,
      UserLeaveRaidMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveRaidMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLeaveRaidMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLeaveRaidMatchSCmd));
  ConfirmTeamMatchSCmd_descriptor_ = file->message_type(42);
  static const int ConfirmTeamMatchSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmTeamMatchSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmTeamMatchSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmTeamMatchSCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmTeamMatchSCmd, etype_),
  };
  ConfirmTeamMatchSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfirmTeamMatchSCmd_descriptor_,
      ConfirmTeamMatchSCmd::default_instance_,
      ConfirmTeamMatchSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmTeamMatchSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmTeamMatchSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfirmTeamMatchSCmd));
  MatchSParam_descriptor_ = file->enum_type(0);
  ETutorOpt_descriptor_ = file->enum_type(1);
  ESceneGMMatchType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MatchSCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardCCmdMatch_descriptor_, &SessionForwardCCmdMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardSCmdMatch_descriptor_, &SessionForwardSCmdMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardMatchScene_descriptor_, &SessionForwardMatchScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardMatchTeam_descriptor_, &SessionForwardMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardTeamMatch_descriptor_, &SessionForwardTeamMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegPvpZoneMatch_descriptor_, &RegPvpZoneMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterPvpMapSCmdMatch_descriptor_, &EnterPvpMapSCmdMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeavePvpMap_descriptor_, &LeavePvpMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfJoinRoom_descriptor_, &NtfJoinRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfLeaveRoom_descriptor_, &NtfLeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTeamMatchSCmd_descriptor_, &CreateTeamMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpTeamMemberUpdateSCmd_descriptor_, &PvpTeamMemberUpdateSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpMemberDataUpdateSCmd_descriptor_, &PvpMemberDataUpdateSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyTeamMatchSCmd_descriptor_, &ApplyTeamMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncTeamInfoMatchSCmd_descriptor_, &SyncTeamInfoMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncRaidSceneMatchSCmd_descriptor_, &SyncRaidSceneMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgRoomData_descriptor_, &SuperGvgRoomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsUserCurScore_descriptor_, &TeamPwsUserCurScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsRoomData_descriptor_, &TeamPwsRoomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncRoomSceneMatchSCmd_descriptor_, &SyncRoomSceneMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickTeamMatchSCmd_descriptor_, &KickTeamMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickUserFromPvpMatchSCmd_descriptor_, &KickUserFromPvpMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetPvpMatchSCmd_descriptor_, &ResetPvpMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchPvpMathcSCmd_descriptor_, &SwitchPvpMathcSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityMatchSCmd_descriptor_, &ActivityMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckCanBuyMatchSCmd_descriptor_, &CheckCanBuyMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBuyCntMatchSCmd_descriptor_, &AddBuyCntMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySoldCntMatchSCmd_descriptor_, &QuerySoldCntMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinSuperGvgMatchSCmd_descriptor_, &JoinSuperGvgMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgRetMatchSCmd_descriptor_, &SuperGvgRetMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearMvpCDMatchSCmd_descriptor_, &ClearMvpCDMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorOptMatchSCmd_descriptor_, &TutorOptMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TutorBlackUpdateMatchSCmd_descriptor_, &TutorBlackUpdateMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBoothReqMatchSCmd_descriptor_, &UserBoothReqMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBoothNTFMatchSCmd_descriptor_, &UserBoothNTFMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinTeamPwsMatchSCmd_descriptor_, &JoinTeamPwsMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitTeamPwsMatchSCmd_descriptor_, &ExitTeamPwsMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneGMTestMatchSCmd_descriptor_, &SceneGMTestMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchScoreData_descriptor_, &MatchScoreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateScoreMatchSCmd_descriptor_, &UpdateScoreMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncUserScoreMatchSCmd_descriptor_, &SyncUserScoreMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLeaveRaidMatchSCmd_descriptor_, &UserLeaveRaidMatchSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfirmTeamMatchSCmd_descriptor_, &ConfirmTeamMatchSCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MatchSCmd_2eproto() {
  delete SessionForwardCCmdMatch::default_instance_;
  delete SessionForwardCCmdMatch_reflection_;
  delete SessionForwardSCmdMatch::default_instance_;
  delete SessionForwardSCmdMatch_reflection_;
  delete SessionForwardMatchScene::default_instance_;
  delete SessionForwardMatchScene_reflection_;
  delete SessionForwardMatchTeam::default_instance_;
  delete SessionForwardMatchTeam_reflection_;
  delete SessionForwardTeamMatch::default_instance_;
  delete SessionForwardTeamMatch_reflection_;
  delete RegPvpZoneMatch::default_instance_;
  delete RegPvpZoneMatch_reflection_;
  delete EnterPvpMapSCmdMatch::default_instance_;
  delete EnterPvpMapSCmdMatch_reflection_;
  delete LeavePvpMap::default_instance_;
  delete LeavePvpMap_reflection_;
  delete NtfJoinRoom::default_instance_;
  delete NtfJoinRoom_reflection_;
  delete NtfLeaveRoom::default_instance_;
  delete NtfLeaveRoom_reflection_;
  delete CreateTeamMatchSCmd::default_instance_;
  delete CreateTeamMatchSCmd_reflection_;
  delete PvpTeamMemberUpdateSCmd::default_instance_;
  delete PvpTeamMemberUpdateSCmd_reflection_;
  delete PvpMemberDataUpdateSCmd::default_instance_;
  delete PvpMemberDataUpdateSCmd_reflection_;
  delete ApplyTeamMatchSCmd::default_instance_;
  delete ApplyTeamMatchSCmd_reflection_;
  delete SyncTeamInfoMatchSCmd::default_instance_;
  delete SyncTeamInfoMatchSCmd_reflection_;
  delete SyncRaidSceneMatchSCmd::default_instance_;
  delete SyncRaidSceneMatchSCmd_reflection_;
  delete SuperGvgRoomData::default_instance_;
  delete SuperGvgRoomData_reflection_;
  delete TeamPwsUserCurScore::default_instance_;
  delete TeamPwsUserCurScore_reflection_;
  delete TeamPwsRoomData::default_instance_;
  delete TeamPwsRoomData_reflection_;
  delete SyncRoomSceneMatchSCmd::default_instance_;
  delete SyncRoomSceneMatchSCmd_reflection_;
  delete KickTeamMatchSCmd::default_instance_;
  delete KickTeamMatchSCmd_reflection_;
  delete KickUserFromPvpMatchSCmd::default_instance_;
  delete KickUserFromPvpMatchSCmd_reflection_;
  delete ResetPvpMatchSCmd::default_instance_;
  delete ResetPvpMatchSCmd_reflection_;
  delete SwitchPvpMathcSCmd::default_instance_;
  delete SwitchPvpMathcSCmd_reflection_;
  delete ActivityMatchSCmd::default_instance_;
  delete ActivityMatchSCmd_reflection_;
  delete CheckCanBuyMatchSCmd::default_instance_;
  delete CheckCanBuyMatchSCmd_reflection_;
  delete AddBuyCntMatchSCmd::default_instance_;
  delete AddBuyCntMatchSCmd_reflection_;
  delete QuerySoldCntMatchSCmd::default_instance_;
  delete QuerySoldCntMatchSCmd_reflection_;
  delete JoinSuperGvgMatchSCmd::default_instance_;
  delete JoinSuperGvgMatchSCmd_reflection_;
  delete SuperGvgRetMatchSCmd::default_instance_;
  delete SuperGvgRetMatchSCmd_reflection_;
  delete ClearMvpCDMatchSCmd::default_instance_;
  delete ClearMvpCDMatchSCmd_reflection_;
  delete TutorOptMatchSCmd::default_instance_;
  delete TutorOptMatchSCmd_reflection_;
  delete TutorBlackUpdateMatchSCmd::default_instance_;
  delete TutorBlackUpdateMatchSCmd_reflection_;
  delete UserBoothReqMatchSCmd::default_instance_;
  delete UserBoothReqMatchSCmd_reflection_;
  delete UserBoothNTFMatchSCmd::default_instance_;
  delete UserBoothNTFMatchSCmd_reflection_;
  delete JoinTeamPwsMatchSCmd::default_instance_;
  delete JoinTeamPwsMatchSCmd_reflection_;
  delete ExitTeamPwsMatchSCmd::default_instance_;
  delete ExitTeamPwsMatchSCmd_reflection_;
  delete SceneGMTestMatchSCmd::default_instance_;
  delete SceneGMTestMatchSCmd_reflection_;
  delete MatchScoreData::default_instance_;
  delete MatchScoreData_reflection_;
  delete UpdateScoreMatchSCmd::default_instance_;
  delete UpdateScoreMatchSCmd_reflection_;
  delete SyncUserScoreMatchSCmd::default_instance_;
  delete SyncUserScoreMatchSCmd_reflection_;
  delete UserLeaveRaidMatchSCmd::default_instance_;
  delete UserLeaveRaidMatchSCmd_reflection_;
  delete ConfirmTeamMatchSCmd::default_instance_;
  delete ConfirmTeamMatchSCmd_reflection_;
}

void protobuf_AddDesc_MatchSCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_MatchCCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneMap_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MatchSCmd.proto\022\003Cmd\032\nxCmd.proto\032\017Matc"
    "hCCmd.proto\032\016SceneMap.proto\032\020SceneUser2."
    "proto\032\021ProtoCommon.proto\"\311\001\n\027SessionForw"
    "ardCCmdMatch\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\017MATCHS_PROTOCMD\022G\n\005param\030\002 \001(\0162\020.Cmd.Ma"
    "tchSParam:&MATCHSPARAM_SESSION_FORWARD_C"
    "CMD_MATCH\022\016\n\006charid\030\003 \001(\004\022\016\n\006zoneid\030\004 \001("
    "\r\022\014\n\004data\030\005 \001(\014\022\013\n\003len\030\006 \001(\r\"\327\001\n\027Session"
    "ForwardSCmdMatch\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\017MATCHS_PROTOCMD\022G\n\005param\030\002 \001(\0162\020.Cm"
    "d.MatchSParam:&MATCHSPARAM_SESSION_FORWA"
    "RD_SCMD_MATCH\022\016\n\006charid\030\003 \001(\004\022\016\n\006zoneid\030"
    "\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\014\n\004data\030\006 \001(\014\022\013\n\003len"
    "\030\007 \001(\r\"\273\001\n\030SessionForwardMatchScene\022*\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\022"
    "H\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\'MATCHS"
    "PARAM_SESSION_FORWARD_MATCH_SCENE\022\016\n\006cha"
    "rid\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030\005 \001(\r\"\251\001\n"
    "\027SessionForwardMatchTeam\022*\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\017MATCHS_PROTOCMD\022G\n\005param\030\002 "
    "\001(\0162\020.Cmd.MatchSParam:&MATCHSPARAM_SESSI"
    "ON_FORWARD_MATCH_TEAM\022\014\n\004data\030\003 \001(\014\022\013\n\003l"
    "en\030\004 \001(\r\"\251\001\n\027SessionForwardTeamMatch\022*\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD"
    "\022G\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:&MATCH"
    "SPARAM_SESSION_FORWARD_TEAM_MATCH\022\014\n\004dat"
    "a\030\003 \001(\014\022\013\n\003len\030\004 \001(\r\"\232\001\n\017RegPvpZoneMatch"
    "\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROT"
    "OCMD\0229\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\030M"
    "ATCHSPARAM_REG_PVP_ZONE\022\020\n\010category\030\003 \001("
    "\r\022\016\n\006zoneid\030\004 \001(\r\"\332\001\n\024EnterPvpMapSCmdMat"
    "ch\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PR"
    "OTOCMD\022:\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:"
    "\031MATCHSPARAM_ENTER_PVP_MAP\022\023\n\013dest_zonei"
    "d\030\003 \001(\r\022\016\n\006raidid\030\004 \001(\r\022\021\n\troom_guid\030\005 \001"
    "(\004\022\016\n\006charid\030\006 \001(\004\022\022\n\ncolorindex\030\007 \001(\r\"\253"
    "\001\n\013LeavePvpMap\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\017MATCHS_PROTOCMD\022:\n\005param\030\002 \001(\0162\020.Cmd."
    "MatchSParam:\031MATCHSPARAM_LEAVE_PVP_MAP\022\016"
    "\n\006roomid\030\003 \001(\004\022\016\n\006charid\030\004 \001(\004\022\024\n\014origin"
    "zoneid\030\005 \001(\r\"\266\001\n\013NtfJoinRoom\022*\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\022:\n\005para"
    "m\030\002 \001(\0162\020.Cmd.MatchSParam:\031MATCHSPARAM_N"
    "TF_JOIN_ROOM\022\016\n\006roomid\030\003 \001(\004\022\016\n\006charid\030\004"
    " \001(\004\022\016\n\006teamid\030\005 \001(\004\022\017\n\007success\030\006 \001(\010\"\227\001"
    "\n\014NtfLeaveRoom\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\017MATCHS_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd."
    "MatchSParam:\032MATCHSPARAM_NTF_LEAVE_ROOM\022"
    "\016\n\006roomid\030\003 \001(\004\022\016\n\006teamid\030\004 \001(\004\"\375\001\n\023Crea"
    "teTeamMatchSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\017MATCHS_PROTOCMD\0228\n\005param\030\002 \001(\0162\020.Cmd"
    ".MatchSParam:\027MATCHSPARAM_CREATE_TEAM\022\016\n"
    "\006teamid\030\003 \001(\004\022\016\n\006roomid\030\004 \001(\004\022\016\n\006charid\030"
    "\005 \001(\004\022\014\n\004name\030\006 \001(\t\022\016\n\006zoneid\030\007 \001(\r\022\022\n\nn"
    "ew_teamid\030\010 \001(\004\022\036\n\007pvptype\030\t \001(\0162\r.Cmd.E"
    "PvpType\"\257\001\n\027PvpTeamMemberUpdateSCmd\022*\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\022"
    "=\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\034MATCHS"
    "PARAM_PVP_MEMBERUPDATE\022)\n\004data\030\003 \001(\0132\033.C"
    "md.MatchTeamMemUpdateInfo\"\267\001\n\027PvpMemberD"
    "ataUpdateSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\017MATCHS_PROTOCMD\022A\n\005param\030\002 \001(\0162\020.Cmd.M"
    "atchSParam: MATCHSPARAM_PVP_MEMBERDATAUP"
    "DATE\022-\n\004data\030\003 \001(\0132\037.Cmd.MatchTeamMemDat"
    "aUpdateInfo\"\251\001\n\022ApplyTeamMatchSCmd\022*\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\0227"
    "\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\026MATCHSP"
    "ARAM_APPLY_TEAM\022\016\n\006teamid\030\003 \001(\004\022\016\n\006chari"
    "d\030\005 \001(\004\022\016\n\006zoneid\030\007 \001(\r\"\257\001\n\025SyncTeamInfo"
    "MatchSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MA"
    "TCHS_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd.Match"
    "SParam:\032MATCHSPARAM_SYNC_TEAM_INFO\022\016\n\006te"
    "amid\030\003 \001(\004\022\016\n\006charid\030\004 \001(\004\022\r\n\005index\030\005 \001("
    "\r\"\317\001\n\026SyncRaidSceneMatchSCmd\022*\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\022;\n\005para"
    "m\030\002 \001(\0162\020.Cmd.MatchSParam:\032MATCHSPARAM_S"
    "YNC_RAIDSCENE\022\016\n\006roomid\030\003 \001(\004\022\014\n\004open\030\004 "
    "\001(\010\022\017\n\007sceneid\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022\016\n\006z"
    "oneid\030\007 \001(\r\"\204\001\n\020SuperGvgRoomData\022\022\n\007guil"
    "did\030\001 \001(\004:\0010\022\020\n\005color\030\002 \001(\r:\0010\022\021\n\tguildn"
    "ame\030\003 \001(\t\022\021\n\tguildicon\030\004 \001(\t\022\021\n\tfirecoun"
    "t\030\005 \001(\r\022\021\n\tfirescore\030\006 \001(\r\"4\n\023TeamPwsUse"
    "rCurScore\022\016\n\006charid\030\001 \001(\004\022\r\n\005score\030\002 \001(\r"
    "\"Y\n\017TeamPwsRoomData\022\016\n\006teamid\030\001 \001(\004\022\r\n\005c"
    "olor\030\002 \001(\r\022\'\n\005users\030\003 \003(\0132\030.Cmd.TeamPwsU"
    "serCurScore\"\354\002\n\026SyncRoomSceneMatchSCmd\022*"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOC"
    "MD\022:\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\031MAT"
    "CHSPARAM_SYNC_ROOMINFO\022\016\n\006roomid\030\003 \001(\004\022\017"
    "\n\007sceneid\030\004 \001(\r\022\016\n\006zoneid\030\005 \001(\r\022\023\n\010rooms"
    "ize\030\006 \001(\r:\0010\022(\n\tsugvgdata\030\007 \003(\0132\025.Cmd.Su"
    "perGvgRoomData\022\020\n\005level\030\010 \001(\r:\0010\022\023\n\010raid"
    "time\030\t \001(\r:\0010\022%\n\007pwsdata\030\n \003(\0132\024.Cmd.Tea"
    "mPwsRoomData\022,\n\007pvptype\030\013 \001(\0162\r.Cmd.EPvp"
    "Type:\014EPVPTYPE_MIN\"\267\001\n\021KickTeamMatchSCmd"
    "\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROT"
    "OCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\025M"
    "ATCHSPARAM_KICK_TEAM\022\016\n\006teamid\030\003 \001(\004\022\016\n\006"
    "charid\030\005 \001(\004\022\016\n\006roomid\030\006 \001(\004\022\016\n\006zoneid\030\007"
    " \001(\r\"\236\001\n\030KickUserFromPvpMatchSCmd\022*\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\0226\n"
    "\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\025MATCHSPA"
    "RAM_KICK_USER\022\016\n\006charid\030\003 \002(\004\022\016\n\006zoneid\030"
    "\004 \002(\r\"w\n\021ResetPvpMatchSCmd\022*\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\017MATCHS_PROTOCMD\0226\n\005param\030"
    "\002 \001(\0162\020.Cmd.MatchSParam:\025MATCHSPARAM_RES"
    "ET_PVP\"\254\001\n\022SwitchPvpMathcSCmd\022*\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\0227\n\005par"
    "am\030\002 \001(\0162\020.Cmd.MatchSParam:\026MATCHSPARAM_"
    "SWITCH_PVP\022\023\n\004open\030\003 \001(\010:\005false\022\034\n\005etype"
    "\030\004 \002(\0162\r.Cmd.EPvpType\"\327\001\n\021ActivityMatchS"
    "Cmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_P"
    "ROTOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam"
    ":\032MATCHSPARAM_POLLY_ACTIVITY\022\014\n\004open\030\003 \001"
    "(\010\022,\n\005etype\030\004 \001(\0162\r.Cmd.EPvpType:\016EPVPTY"
    "PE_POLLY\022\035\n\016server_restart\030\005 \001(\010:\005false\""
    "\365\001\n\024CheckCanBuyMatchSCmd\022*\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\017MATCHS_PROTOCMD\022:\n\005param\030\002 "
    "\001(\0162\020.Cmd.MatchSParam:\031MATCHSPARAM_CHECK"
    "_CAN_BUY\022\r\n\002id\030\003 \001(\r:\0010\022\020\n\005count\030\004 \001(\r:\001"
    "0\022\020\n\005price\030\005 \001(\r:\0010\022\021\n\006price2\030\006 \001(\r:\0010\022\017"
    "\n\007success\030\007 \001(\010\022\016\n\006charid\030\010 \001(\004\022\016\n\006zonei"
    "d\030\t \001(\r\"\265\001\n\022AddBuyCntMatchSCmd\022*\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\0228\n\005pa"
    "ram\030\002 \001(\0162\020.Cmd.MatchSParam:\027MATCHSPARAM"
    "_ADD_BUY_CNT\022\n\n\002id\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\022"
    "\016\n\006charid\030\005 \001(\004\022\016\n\006zoneid\030\006 \001(\r\"\240\001\n\025Quer"
    "ySoldCntMatchSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\017MATCHS_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.C"
    "md.MatchSParam:\032MATCHSPARAM_QUERY_SOLD_C"
    "NT\022\016\n\006charid\030\003 \001(\004\022\016\n\006zoneid\030\004 \001(\r\"\202\002\n\025J"
    "oinSuperGvgMatchSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\017MATCHS_PROTOCMD\022:\n\005param\030\002 \001(\0162"
    "\020.Cmd.MatchSParam:\031MATCHSPARAM_SUPERGVG_"
    "JOIN\022\017\n\007guildid\030\003 \002(\004\022\016\n\006zoneid\030\004 \002(\r\022\021\n"
    "\tguildname\030\005 \001(\t\022\021\n\tguildicon\030\006 \001(\t\022\021\n\tf"
    "irecount\030\007 \001(\r\022\021\n\tfirescore\030\010 \001(\r\022\024\n\tbeg"
    "intime\030\t \001(\r:\0010\"\245\001\n\024SuperGvgRetMatchSCmd"
    "\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROT"
    "OCMD\0229\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\030M"
    "ATCHSPARAM_SUPERGVG_RET\022\022\n\003ret\030\003 \001(\010:\005fa"
    "lse\022\022\n\007guildid\030\004 \001(\004:\0010\"\233\001\n\023ClearMvpCDMa"
    "tchSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATC"
    "HS_PROTOCMD\0228\n\005param\030\002 \001(\0162\020.Cmd.MatchSP"
    "aram:\027MATCHSPARAM_CLEAR_MVPCD\022\016\n\006roomid\030"
    "\003 \002(\004\022\016\n\006teamid\030\004 \002(\004\"\372\001\n\021TutorOptMatchS"
    "Cmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_P"
    "ROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam"
    ":\025MATCHSPARAM_TUTOR_OPT\022\022\n\007tutorid\030\003 \001(\004"
    ":\0010\022\024\n\tstudentid\030\004 \001(\004:\0010\022,\n\003opt\030\005 \001(\0162\016"
    ".Cmd.ETutorOpt:\017ETUTOROPT_APPLY\022\022\n\003ret\030\006"
    " \001(\010:\005false\022\025\n\006result\030\007 \001(\010:\005false\"\255\001\n\031T"
    "utorBlackUpdateMatchSCmd\022*\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\017MATCHS_PROTOCMD\022\?\n\005param\030\002 "
    "\001(\0162\020.Cmd.MatchSParam:\036MATCHSPARAM_TUTOR"
    "_BLACK_UPDATE\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\010blac"
    "kids\030\004 \003(\004\"\355\001\n\025UserBoothReqMatchSCmd\022*\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD"
    "\022;\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\032MATCH"
    "SPARAM_USER_BOOTH_REQ\022\016\n\006zoneid\030\003 \001(\r\022\017\n"
    "\007sceneid\030\004 \001(\r\022\032\n\004user\030\005 \001(\0132\014.Cmd.MapUs"
    "er\022.\n\004oper\030\006 \001(\0162\017.Cmd.EBoothOper:\017EBOOT"
    "HOPER_OPEN\"\355\001\n\025UserBoothNTFMatchSCmd\022*\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD"
    "\022;\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\032MATCH"
    "SPARAM_USER_BOOTH_NTF\022\016\n\006zoneid\030\003 \001(\r\022\017\n"
    "\007sceneid\030\004 \001(\r\022\032\n\004user\030\005 \001(\0132\014.Cmd.MapUs"
    "er\022.\n\004oper\030\006 \001(\0162\017.Cmd.EBoothOper:\017EBOOT"
    "HOPER_OPEN\"\230\002\n\024JoinTeamPwsMatchSCmd\022*\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOCMD\022"
    "9\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\030MATCHS"
    "PARAM_JOIN_TEAMPWS\022\016\n\006teamid\030\003 \002(\004\022\016\n\006zo"
    "neid\030\004 \002(\r\022\020\n\010leaderid\030\005 \002(\004\022\017\n\007members\030"
    "\006 \003(\004\022\023\n\010avescore\030\007 \001(\r:\0010\022.\n\005etype\030\010 \001("
    "\0162\r.Cmd.EPvpType:\020EPVPTYPE_TEAMPWS\022\021\n\006ro"
    "omid\030\t \001(\r:\0010\"\316\001\n\024ExitTeamPwsMatchSCmd\022*"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOC"
    "MD\022:\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\031MAT"
    "CHSPARAM_LEAVE_TEAMPWS\022\016\n\006teamid\030\003 \002(\004\022\016"
    "\n\006zoneid\030\004 \002(\r\022.\n\005etype\030\005 \001(\0162\r.Cmd.EPvp"
    "Type:\020EPVPTYPE_TEAMPWS\"\365\001\n\024SceneGMTestMa"
    "tchSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATC"
    "HS_PROTOCMD\022:\n\005param\030\002 \001(\0162\020.Cmd.MatchSP"
    "aram:\031MATCHSPARAM_SCENE_GM_TEST\022%\n\005etype"
    "\030\003 \001(\0162\026.Cmd.ESceneGMMatchType\022\024\n\tfreque"
    "ncy\030\004 \001(\r:\0010\022\023\n\010interval\030\005 \001(\r:\0010\022\023\n\010las"
    "ttime\030\006 \001(\r:\0010\022\016\n\006params\030\007 \003(\r\"\214\001\n\016Match"
    "ScoreData\022\016\n\006charid\030\001 \002(\004\022\r\n\005score\030\002 \002(\005"
    "\022\014\n\004name\030\003 \001(\t\022\'\n\010portrait\030\004 \001(\0132\025.Cmd.U"
    "serPortraitData\022$\n\nprofession\030\005 \001(\0162\020.Cm"
    "d.EProfession\"\304\001\n\024UpdateScoreMatchSCmd\022*"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTOC"
    "MD\0229\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\030MAT"
    "CHSPARAM_UPDATE_SCORE\022\034\n\005etype\030\003 \001(\0162\r.C"
    "md.EPvpType\022\'\n\nuserscores\030\005 \003(\0132\023.Cmd.Ma"
    "tchScoreData\"\312\001\n\026SyncUserScoreMatchSCmd\022"
    "*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_PROTO"
    "CMD\0227\n\005param\030\002 \001(\0162\020.Cmd.MatchSParam:\026MA"
    "TCHSPARAM_SYNC_SCORE\022\034\n\005etype\030\003 \001(\0162\r.Cm"
    "d.EPvpType\022\016\n\006charid\030\004 \002(\004\022\r\n\005score\030\005 \002("
    "\r\022\016\n\006season\030\006 \001(\r\"\261\001\n\026UserLeaveRaidMatch"
    "SCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017MATCHS_"
    "PROTOCMD\022=\n\005param\030\002 \001(\0162\020.Cmd.MatchSPara"
    "m:\034MATCHSPARAM_USER_FORCE_LEAVE\022\016\n\006chari"
    "d\030\003 \001(\004\022\034\n\005etype\030\004 \001(\0162\r.Cmd.EPvpType\"\260\001"
    "\n\024ConfirmTeamMatchSCmd\022*\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\017MATCHS_PROTOCMD\022>\n\005param\030\002 \001("
    "\0162\020.Cmd.MatchSParam:\035MATCHSPARAM_CONFIRM"
    "_TEAMMATCH\022\016\n\006teamid\030\003 \002(\004\022\034\n\005etype\030\004 \001("
    "\0162\r.Cmd.EPvpType*\234\n\n\013MatchSParam\022*\n&MATC"
    "HSPARAM_SESSION_FORWARD_CCMD_MATCH\020\001\022*\n&"
    "MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH\020\002"
    "\022+\n\'MATCHSPARAM_SESSION_FORWARD_MATCH_SC"
    "ENE\020\003\022*\n&MATCHSPARAM_SESSION_FORWARD_MAT"
    "CH_TEAM\020\004\022*\n&MATCHSPARAM_SESSION_FORWARD"
    "_TEAM_MATCH\020\005\022\034\n\030MATCHSPARAM_REG_PVP_ZON"
    "E\020\r\022\035\n\031MATCHSPARAM_ENTER_PVP_MAP\020\016\022\030\n\024MA"
    "TCHSPARAM_LOAD_LUA\020\017\022\035\n\031MATCHSPARAM_LEAV"
    "E_PVP_MAP\020\020\022\035\n\031MATCHSPARAM_NTF_JOIN_ROOM"
    "\020\021\022\036\n\032MATCHSPARAM_NTF_LEAVE_ROOM\020\022\022\033\n\027MA"
    "TCHSPARAM_CREATE_TEAM\020\023\022 \n\034MATCHSPARAM_P"
    "VP_MEMBERUPDATE\020\024\022$\n MATCHSPARAM_PVP_MEM"
    "BERDATAUPDATE\020\025\022\032\n\026MATCHSPARAM_APPLY_TEA"
    "M\020\026\022\036\n\032MATCHSPARAM_SYNC_TEAM_INFO\020\027\022\036\n\032M"
    "ATCHSPARAM_SYNC_RAIDSCENE\020\030\022\031\n\025MATCHSPAR"
    "AM_KICK_TEAM\020\031\022\031\n\025MATCHSPARAM_KICK_USER\020"
    "\032\022\031\n\025MATCHSPARAM_RESET_PVP\020\033\022\032\n\026MATCHSPA"
    "RAM_SWITCH_PVP\020\034\022\036\n\032MATCHSPARAM_POLLY_AC"
    "TIVITY\020\035\022\035\n\031MATCHSPARAM_CHECK_CAN_BUY\020\036\022"
    "\033\n\027MATCHSPARAM_ADD_BUY_CNT\020\037\022\036\n\032MATCHSPA"
    "RAM_QUERY_SOLD_CNT\020 \022\035\n\031MATCHSPARAM_SYNC"
    "_ROOMINFO\020!\022\035\n\031MATCHSPARAM_SUPERGVG_JOIN"
    "\020\"\022\034\n\030MATCHSPARAM_SUPERGVG_RET\020#\022\033\n\027MATC"
    "HSPARAM_CLEAR_MVPCD\020$\022\031\n\025MATCHSPARAM_TUT"
    "OR_OPT\020%\022\"\n\036MATCHSPARAM_TUTOR_BLACK_UPDA"
    "TE\020(\022\036\n\032MATCHSPARAM_USER_BOOTH_REQ\020&\022\036\n\032"
    "MATCHSPARAM_USER_BOOTH_NTF\020\'\022\034\n\030MATCHSPA"
    "RAM_JOIN_TEAMPWS\020)\022\035\n\031MATCHSPARAM_LEAVE_"
    "TEAMPWS\020*\022\035\n\031MATCHSPARAM_SCENE_GM_TEST\020+"
    "\022\034\n\030MATCHSPARAM_UPDATE_SCORE\020,\022\032\n\026MATCHS"
    "PARAM_SYNC_SCORE\020-\022 \n\034MATCHSPARAM_USER_F"
    "ORCE_LEAVE\020.\022!\n\035MATCHSPARAM_CONFIRM_TEAM"
    "MATCH\020/*5\n\tETutorOpt\022\023\n\017ETUTOROPT_APPLY\020"
    "\001\022\023\n\017ETUTOROPT_AGREE\020\002*-\n\021ESceneGMMatchT"
    "ype\022\030\n\024EMATCHGM_JOINTEAMPWS\020\001", 9789);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MatchSCmd.proto", &protobuf_RegisterTypes);
  SessionForwardCCmdMatch::default_instance_ = new SessionForwardCCmdMatch();
  SessionForwardSCmdMatch::default_instance_ = new SessionForwardSCmdMatch();
  SessionForwardMatchScene::default_instance_ = new SessionForwardMatchScene();
  SessionForwardMatchTeam::default_instance_ = new SessionForwardMatchTeam();
  SessionForwardTeamMatch::default_instance_ = new SessionForwardTeamMatch();
  RegPvpZoneMatch::default_instance_ = new RegPvpZoneMatch();
  EnterPvpMapSCmdMatch::default_instance_ = new EnterPvpMapSCmdMatch();
  LeavePvpMap::default_instance_ = new LeavePvpMap();
  NtfJoinRoom::default_instance_ = new NtfJoinRoom();
  NtfLeaveRoom::default_instance_ = new NtfLeaveRoom();
  CreateTeamMatchSCmd::default_instance_ = new CreateTeamMatchSCmd();
  PvpTeamMemberUpdateSCmd::default_instance_ = new PvpTeamMemberUpdateSCmd();
  PvpMemberDataUpdateSCmd::default_instance_ = new PvpMemberDataUpdateSCmd();
  ApplyTeamMatchSCmd::default_instance_ = new ApplyTeamMatchSCmd();
  SyncTeamInfoMatchSCmd::default_instance_ = new SyncTeamInfoMatchSCmd();
  SyncRaidSceneMatchSCmd::default_instance_ = new SyncRaidSceneMatchSCmd();
  SuperGvgRoomData::default_instance_ = new SuperGvgRoomData();
  TeamPwsUserCurScore::default_instance_ = new TeamPwsUserCurScore();
  TeamPwsRoomData::default_instance_ = new TeamPwsRoomData();
  SyncRoomSceneMatchSCmd::default_instance_ = new SyncRoomSceneMatchSCmd();
  KickTeamMatchSCmd::default_instance_ = new KickTeamMatchSCmd();
  KickUserFromPvpMatchSCmd::default_instance_ = new KickUserFromPvpMatchSCmd();
  ResetPvpMatchSCmd::default_instance_ = new ResetPvpMatchSCmd();
  SwitchPvpMathcSCmd::default_instance_ = new SwitchPvpMathcSCmd();
  ActivityMatchSCmd::default_instance_ = new ActivityMatchSCmd();
  CheckCanBuyMatchSCmd::default_instance_ = new CheckCanBuyMatchSCmd();
  AddBuyCntMatchSCmd::default_instance_ = new AddBuyCntMatchSCmd();
  QuerySoldCntMatchSCmd::default_instance_ = new QuerySoldCntMatchSCmd();
  JoinSuperGvgMatchSCmd::default_instance_ = new JoinSuperGvgMatchSCmd();
  SuperGvgRetMatchSCmd::default_instance_ = new SuperGvgRetMatchSCmd();
  ClearMvpCDMatchSCmd::default_instance_ = new ClearMvpCDMatchSCmd();
  TutorOptMatchSCmd::default_instance_ = new TutorOptMatchSCmd();
  TutorBlackUpdateMatchSCmd::default_instance_ = new TutorBlackUpdateMatchSCmd();
  UserBoothReqMatchSCmd::default_instance_ = new UserBoothReqMatchSCmd();
  UserBoothNTFMatchSCmd::default_instance_ = new UserBoothNTFMatchSCmd();
  JoinTeamPwsMatchSCmd::default_instance_ = new JoinTeamPwsMatchSCmd();
  ExitTeamPwsMatchSCmd::default_instance_ = new ExitTeamPwsMatchSCmd();
  SceneGMTestMatchSCmd::default_instance_ = new SceneGMTestMatchSCmd();
  MatchScoreData::default_instance_ = new MatchScoreData();
  UpdateScoreMatchSCmd::default_instance_ = new UpdateScoreMatchSCmd();
  SyncUserScoreMatchSCmd::default_instance_ = new SyncUserScoreMatchSCmd();
  UserLeaveRaidMatchSCmd::default_instance_ = new UserLeaveRaidMatchSCmd();
  ConfirmTeamMatchSCmd::default_instance_ = new ConfirmTeamMatchSCmd();
  SessionForwardCCmdMatch::default_instance_->InitAsDefaultInstance();
  SessionForwardSCmdMatch::default_instance_->InitAsDefaultInstance();
  SessionForwardMatchScene::default_instance_->InitAsDefaultInstance();
  SessionForwardMatchTeam::default_instance_->InitAsDefaultInstance();
  SessionForwardTeamMatch::default_instance_->InitAsDefaultInstance();
  RegPvpZoneMatch::default_instance_->InitAsDefaultInstance();
  EnterPvpMapSCmdMatch::default_instance_->InitAsDefaultInstance();
  LeavePvpMap::default_instance_->InitAsDefaultInstance();
  NtfJoinRoom::default_instance_->InitAsDefaultInstance();
  NtfLeaveRoom::default_instance_->InitAsDefaultInstance();
  CreateTeamMatchSCmd::default_instance_->InitAsDefaultInstance();
  PvpTeamMemberUpdateSCmd::default_instance_->InitAsDefaultInstance();
  PvpMemberDataUpdateSCmd::default_instance_->InitAsDefaultInstance();
  ApplyTeamMatchSCmd::default_instance_->InitAsDefaultInstance();
  SyncTeamInfoMatchSCmd::default_instance_->InitAsDefaultInstance();
  SyncRaidSceneMatchSCmd::default_instance_->InitAsDefaultInstance();
  SuperGvgRoomData::default_instance_->InitAsDefaultInstance();
  TeamPwsUserCurScore::default_instance_->InitAsDefaultInstance();
  TeamPwsRoomData::default_instance_->InitAsDefaultInstance();
  SyncRoomSceneMatchSCmd::default_instance_->InitAsDefaultInstance();
  KickTeamMatchSCmd::default_instance_->InitAsDefaultInstance();
  KickUserFromPvpMatchSCmd::default_instance_->InitAsDefaultInstance();
  ResetPvpMatchSCmd::default_instance_->InitAsDefaultInstance();
  SwitchPvpMathcSCmd::default_instance_->InitAsDefaultInstance();
  ActivityMatchSCmd::default_instance_->InitAsDefaultInstance();
  CheckCanBuyMatchSCmd::default_instance_->InitAsDefaultInstance();
  AddBuyCntMatchSCmd::default_instance_->InitAsDefaultInstance();
  QuerySoldCntMatchSCmd::default_instance_->InitAsDefaultInstance();
  JoinSuperGvgMatchSCmd::default_instance_->InitAsDefaultInstance();
  SuperGvgRetMatchSCmd::default_instance_->InitAsDefaultInstance();
  ClearMvpCDMatchSCmd::default_instance_->InitAsDefaultInstance();
  TutorOptMatchSCmd::default_instance_->InitAsDefaultInstance();
  TutorBlackUpdateMatchSCmd::default_instance_->InitAsDefaultInstance();
  UserBoothReqMatchSCmd::default_instance_->InitAsDefaultInstance();
  UserBoothNTFMatchSCmd::default_instance_->InitAsDefaultInstance();
  JoinTeamPwsMatchSCmd::default_instance_->InitAsDefaultInstance();
  ExitTeamPwsMatchSCmd::default_instance_->InitAsDefaultInstance();
  SceneGMTestMatchSCmd::default_instance_->InitAsDefaultInstance();
  MatchScoreData::default_instance_->InitAsDefaultInstance();
  UpdateScoreMatchSCmd::default_instance_->InitAsDefaultInstance();
  SyncUserScoreMatchSCmd::default_instance_->InitAsDefaultInstance();
  UserLeaveRaidMatchSCmd::default_instance_->InitAsDefaultInstance();
  ConfirmTeamMatchSCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MatchSCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MatchSCmd_2eproto {
  StaticDescriptorInitializer_MatchSCmd_2eproto() {
    protobuf_AddDesc_MatchSCmd_2eproto();
  }
} static_descriptor_initializer_MatchSCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* MatchSParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSParam_descriptor_;
}
bool MatchSParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETutorOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETutorOpt_descriptor_;
}
bool ETutorOpt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESceneGMMatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESceneGMMatchType_descriptor_;
}
bool ESceneGMMatchType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardCCmdMatch::kCmdFieldNumber;
const int SessionForwardCCmdMatch::kParamFieldNumber;
const int SessionForwardCCmdMatch::kCharidFieldNumber;
const int SessionForwardCCmdMatch::kZoneidFieldNumber;
const int SessionForwardCCmdMatch::kDataFieldNumber;
const int SessionForwardCCmdMatch::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardCCmdMatch::SessionForwardCCmdMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardCCmdMatch)
}

void SessionForwardCCmdMatch::InitAsDefaultInstance() {
}

SessionForwardCCmdMatch::SessionForwardCCmdMatch(const SessionForwardCCmdMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardCCmdMatch)
}

void SessionForwardCCmdMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardCCmdMatch::~SessionForwardCCmdMatch() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardCCmdMatch)
  SharedDtor();
}

void SessionForwardCCmdMatch::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionForwardCCmdMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardCCmdMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardCCmdMatch_descriptor_;
}

const SessionForwardCCmdMatch& SessionForwardCCmdMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SessionForwardCCmdMatch* SessionForwardCCmdMatch::default_instance_ = NULL;

SessionForwardCCmdMatch* SessionForwardCCmdMatch::New() const {
  return new SessionForwardCCmdMatch;
}

void SessionForwardCCmdMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SessionForwardCCmdMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(zoneid_, len_);
    cmd_ = 212;
    param_ = 1;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardCCmdMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardCCmdMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_len;
        break;
      }

      // optional uint32 len = 6;
      case 6: {
        if (tag == 48) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardCCmdMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardCCmdMatch)
  return false;
#undef DO_
}

void SessionForwardCCmdMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardCCmdMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional uint32 len = 6;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardCCmdMatch)
}

::google::protobuf::uint8* SessionForwardCCmdMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardCCmdMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional uint32 len = 6;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardCCmdMatch)
  return target;
}

int SessionForwardCCmdMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_CCMD_MATCH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 6;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardCCmdMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardCCmdMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardCCmdMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardCCmdMatch::MergeFrom(const SessionForwardCCmdMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardCCmdMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardCCmdMatch::CopyFrom(const SessionForwardCCmdMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardCCmdMatch::IsInitialized() const {

  return true;
}

void SessionForwardCCmdMatch::Swap(SessionForwardCCmdMatch* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardCCmdMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardCCmdMatch_descriptor_;
  metadata.reflection = SessionForwardCCmdMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardSCmdMatch::kCmdFieldNumber;
const int SessionForwardSCmdMatch::kParamFieldNumber;
const int SessionForwardSCmdMatch::kCharidFieldNumber;
const int SessionForwardSCmdMatch::kZoneidFieldNumber;
const int SessionForwardSCmdMatch::kNameFieldNumber;
const int SessionForwardSCmdMatch::kDataFieldNumber;
const int SessionForwardSCmdMatch::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardSCmdMatch::SessionForwardSCmdMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardSCmdMatch)
}

void SessionForwardSCmdMatch::InitAsDefaultInstance() {
}

SessionForwardSCmdMatch::SessionForwardSCmdMatch(const SessionForwardSCmdMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardSCmdMatch)
}

void SessionForwardSCmdMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardSCmdMatch::~SessionForwardSCmdMatch() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardSCmdMatch)
  SharedDtor();
}

void SessionForwardSCmdMatch::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionForwardSCmdMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardSCmdMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardSCmdMatch_descriptor_;
}

const SessionForwardSCmdMatch& SessionForwardSCmdMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SessionForwardSCmdMatch* SessionForwardSCmdMatch::default_instance_ = NULL;

SessionForwardSCmdMatch* SessionForwardSCmdMatch::New() const {
  return new SessionForwardSCmdMatch;
}

void SessionForwardSCmdMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SessionForwardSCmdMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, len_);
    cmd_ = 212;
    param_ = 2;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardSCmdMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardSCmdMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_len;
        break;
      }

      // optional uint32 len = 7;
      case 7: {
        if (tag == 56) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardSCmdMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardSCmdMatch)
  return false;
#undef DO_
}

void SessionForwardSCmdMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardSCmdMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardSCmdMatch)
}

::google::protobuf::uint8* SessionForwardSCmdMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardSCmdMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardSCmdMatch)
  return target;
}

int SessionForwardSCmdMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_SCMD_MATCH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 7;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardSCmdMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardSCmdMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardSCmdMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardSCmdMatch::MergeFrom(const SessionForwardSCmdMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardSCmdMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardSCmdMatch::CopyFrom(const SessionForwardSCmdMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardSCmdMatch::IsInitialized() const {

  return true;
}

void SessionForwardSCmdMatch::Swap(SessionForwardSCmdMatch* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardSCmdMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardSCmdMatch_descriptor_;
  metadata.reflection = SessionForwardSCmdMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardMatchScene::kCmdFieldNumber;
const int SessionForwardMatchScene::kParamFieldNumber;
const int SessionForwardMatchScene::kCharidFieldNumber;
const int SessionForwardMatchScene::kDataFieldNumber;
const int SessionForwardMatchScene::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardMatchScene::SessionForwardMatchScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardMatchScene)
}

void SessionForwardMatchScene::InitAsDefaultInstance() {
}

SessionForwardMatchScene::SessionForwardMatchScene(const SessionForwardMatchScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardMatchScene)
}

void SessionForwardMatchScene::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 3;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardMatchScene::~SessionForwardMatchScene() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardMatchScene)
  SharedDtor();
}

void SessionForwardMatchScene::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionForwardMatchScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardMatchScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardMatchScene_descriptor_;
}

const SessionForwardMatchScene& SessionForwardMatchScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SessionForwardMatchScene* SessionForwardMatchScene::default_instance_ = NULL;

SessionForwardMatchScene* SessionForwardMatchScene::New() const {
  return new SessionForwardMatchScene;
}

void SessionForwardMatchScene::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 212;
    param_ = 3;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardMatchScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardMatchScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_SCENE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardMatchScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardMatchScene)
  return false;
#undef DO_
}

void SessionForwardMatchScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardMatchScene)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_SCENE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardMatchScene)
}

::google::protobuf::uint8* SessionForwardMatchScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardMatchScene)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_SCENE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardMatchScene)
  return target;
}

int SessionForwardMatchScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_SCENE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardMatchScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardMatchScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardMatchScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardMatchScene::MergeFrom(const SessionForwardMatchScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardMatchScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardMatchScene::CopyFrom(const SessionForwardMatchScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardMatchScene::IsInitialized() const {

  return true;
}

void SessionForwardMatchScene::Swap(SessionForwardMatchScene* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardMatchScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardMatchScene_descriptor_;
  metadata.reflection = SessionForwardMatchScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardMatchTeam::kCmdFieldNumber;
const int SessionForwardMatchTeam::kParamFieldNumber;
const int SessionForwardMatchTeam::kDataFieldNumber;
const int SessionForwardMatchTeam::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardMatchTeam::SessionForwardMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardMatchTeam)
}

void SessionForwardMatchTeam::InitAsDefaultInstance() {
}

SessionForwardMatchTeam::SessionForwardMatchTeam(const SessionForwardMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardMatchTeam)
}

void SessionForwardMatchTeam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 4;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardMatchTeam::~SessionForwardMatchTeam() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardMatchTeam)
  SharedDtor();
}

void SessionForwardMatchTeam::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionForwardMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardMatchTeam_descriptor_;
}

const SessionForwardMatchTeam& SessionForwardMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SessionForwardMatchTeam* SessionForwardMatchTeam::default_instance_ = NULL;

SessionForwardMatchTeam* SessionForwardMatchTeam::New() const {
  return new SessionForwardMatchTeam;
}

void SessionForwardMatchTeam::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 212;
    param_ = 4;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardMatchTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_TEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // optional uint32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardMatchTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardMatchTeam)
  return false;
#undef DO_
}

void SessionForwardMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardMatchTeam)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_TEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardMatchTeam)
}

::google::protobuf::uint8* SessionForwardMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardMatchTeam)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_TEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardMatchTeam)
  return target;
}

int SessionForwardMatchTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_MATCH_TEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardMatchTeam::MergeFrom(const SessionForwardMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardMatchTeam::CopyFrom(const SessionForwardMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardMatchTeam::IsInitialized() const {

  return true;
}

void SessionForwardMatchTeam::Swap(SessionForwardMatchTeam* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardMatchTeam_descriptor_;
  metadata.reflection = SessionForwardMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardTeamMatch::kCmdFieldNumber;
const int SessionForwardTeamMatch::kParamFieldNumber;
const int SessionForwardTeamMatch::kDataFieldNumber;
const int SessionForwardTeamMatch::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardTeamMatch::SessionForwardTeamMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardTeamMatch)
}

void SessionForwardTeamMatch::InitAsDefaultInstance() {
}

SessionForwardTeamMatch::SessionForwardTeamMatch(const SessionForwardTeamMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardTeamMatch)
}

void SessionForwardTeamMatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 5;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardTeamMatch::~SessionForwardTeamMatch() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardTeamMatch)
  SharedDtor();
}

void SessionForwardTeamMatch::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionForwardTeamMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardTeamMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardTeamMatch_descriptor_;
}

const SessionForwardTeamMatch& SessionForwardTeamMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SessionForwardTeamMatch* SessionForwardTeamMatch::default_instance_ = NULL;

SessionForwardTeamMatch* SessionForwardTeamMatch::New() const {
  return new SessionForwardTeamMatch;
}

void SessionForwardTeamMatch::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 212;
    param_ = 5;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardTeamMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardTeamMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_TEAM_MATCH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // optional uint32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardTeamMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardTeamMatch)
  return false;
#undef DO_
}

void SessionForwardTeamMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardTeamMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_TEAM_MATCH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardTeamMatch)
}

::google::protobuf::uint8* SessionForwardTeamMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardTeamMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_TEAM_MATCH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardTeamMatch)
  return target;
}

int SessionForwardTeamMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SESSION_FORWARD_TEAM_MATCH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardTeamMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardTeamMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardTeamMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardTeamMatch::MergeFrom(const SessionForwardTeamMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardTeamMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardTeamMatch::CopyFrom(const SessionForwardTeamMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardTeamMatch::IsInitialized() const {

  return true;
}

void SessionForwardTeamMatch::Swap(SessionForwardTeamMatch* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardTeamMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardTeamMatch_descriptor_;
  metadata.reflection = SessionForwardTeamMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegPvpZoneMatch::kCmdFieldNumber;
const int RegPvpZoneMatch::kParamFieldNumber;
const int RegPvpZoneMatch::kCategoryFieldNumber;
const int RegPvpZoneMatch::kZoneidFieldNumber;
#endif  // !_MSC_VER

RegPvpZoneMatch::RegPvpZoneMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegPvpZoneMatch)
}

void RegPvpZoneMatch::InitAsDefaultInstance() {
}

RegPvpZoneMatch::RegPvpZoneMatch(const RegPvpZoneMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegPvpZoneMatch)
}

void RegPvpZoneMatch::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 13;
  category_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegPvpZoneMatch::~RegPvpZoneMatch() {
  // @@protoc_insertion_point(destructor:Cmd.RegPvpZoneMatch)
  SharedDtor();
}

void RegPvpZoneMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegPvpZoneMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegPvpZoneMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegPvpZoneMatch_descriptor_;
}

const RegPvpZoneMatch& RegPvpZoneMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

RegPvpZoneMatch* RegPvpZoneMatch::default_instance_ = NULL;

RegPvpZoneMatch* RegPvpZoneMatch::New() const {
  return new RegPvpZoneMatch;
}

void RegPvpZoneMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegPvpZoneMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(category_, zoneid_);
    cmd_ = 212;
    param_ = 13;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegPvpZoneMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegPvpZoneMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_REG_PVP_ZONE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional uint32 category = 3;
      case 3: {
        if (tag == 24) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegPvpZoneMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegPvpZoneMatch)
  return false;
#undef DO_
}

void RegPvpZoneMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegPvpZoneMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_REG_PVP_ZONE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 category = 3;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->category(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegPvpZoneMatch)
}

::google::protobuf::uint8* RegPvpZoneMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegPvpZoneMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_REG_PVP_ZONE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 category = 3;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->category(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegPvpZoneMatch)
  return target;
}

int RegPvpZoneMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_REG_PVP_ZONE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 category = 3;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegPvpZoneMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegPvpZoneMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegPvpZoneMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegPvpZoneMatch::MergeFrom(const RegPvpZoneMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegPvpZoneMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegPvpZoneMatch::CopyFrom(const RegPvpZoneMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegPvpZoneMatch::IsInitialized() const {

  return true;
}

void RegPvpZoneMatch::Swap(RegPvpZoneMatch* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(category_, other->category_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegPvpZoneMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegPvpZoneMatch_descriptor_;
  metadata.reflection = RegPvpZoneMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterPvpMapSCmdMatch::kCmdFieldNumber;
const int EnterPvpMapSCmdMatch::kParamFieldNumber;
const int EnterPvpMapSCmdMatch::kDestZoneidFieldNumber;
const int EnterPvpMapSCmdMatch::kRaididFieldNumber;
const int EnterPvpMapSCmdMatch::kRoomGuidFieldNumber;
const int EnterPvpMapSCmdMatch::kCharidFieldNumber;
const int EnterPvpMapSCmdMatch::kColorindexFieldNumber;
#endif  // !_MSC_VER

EnterPvpMapSCmdMatch::EnterPvpMapSCmdMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterPvpMapSCmdMatch)
}

void EnterPvpMapSCmdMatch::InitAsDefaultInstance() {
}

EnterPvpMapSCmdMatch::EnterPvpMapSCmdMatch(const EnterPvpMapSCmdMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterPvpMapSCmdMatch)
}

void EnterPvpMapSCmdMatch::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 14;
  dest_zoneid_ = 0u;
  raidid_ = 0u;
  room_guid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  colorindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterPvpMapSCmdMatch::~EnterPvpMapSCmdMatch() {
  // @@protoc_insertion_point(destructor:Cmd.EnterPvpMapSCmdMatch)
  SharedDtor();
}

void EnterPvpMapSCmdMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterPvpMapSCmdMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterPvpMapSCmdMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterPvpMapSCmdMatch_descriptor_;
}

const EnterPvpMapSCmdMatch& EnterPvpMapSCmdMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

EnterPvpMapSCmdMatch* EnterPvpMapSCmdMatch::default_instance_ = NULL;

EnterPvpMapSCmdMatch* EnterPvpMapSCmdMatch::New() const {
  return new EnterPvpMapSCmdMatch;
}

void EnterPvpMapSCmdMatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterPvpMapSCmdMatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(dest_zoneid_, colorindex_);
    cmd_ = 212;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterPvpMapSCmdMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterPvpMapSCmdMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ENTER_PVP_MAP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dest_zoneid;
        break;
      }

      // optional uint32 dest_zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_dest_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_zoneid_)));
          set_has_dest_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 4;
      case 4: {
        if (tag == 32) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_guid;
        break;
      }

      // optional uint64 room_guid = 5;
      case 5: {
        if (tag == 40) {
         parse_room_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_guid_)));
          set_has_room_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6;
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_colorindex;
        break;
      }

      // optional uint32 colorindex = 7;
      case 7: {
        if (tag == 56) {
         parse_colorindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colorindex_)));
          set_has_colorindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterPvpMapSCmdMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterPvpMapSCmdMatch)
  return false;
#undef DO_
}

void EnterPvpMapSCmdMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterPvpMapSCmdMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ENTER_PVP_MAP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dest_zoneid = 3;
  if (has_dest_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_zoneid(), output);
  }

  // optional uint32 raidid = 4;
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raidid(), output);
  }

  // optional uint64 room_guid = 5;
  if (has_room_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->room_guid(), output);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional uint32 colorindex = 7;
  if (has_colorindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->colorindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterPvpMapSCmdMatch)
}

::google::protobuf::uint8* EnterPvpMapSCmdMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterPvpMapSCmdMatch)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ENTER_PVP_MAP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dest_zoneid = 3;
  if (has_dest_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dest_zoneid(), target);
  }

  // optional uint32 raidid = 4;
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raidid(), target);
  }

  // optional uint64 room_guid = 5;
  if (has_room_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->room_guid(), target);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional uint32 colorindex = 7;
  if (has_colorindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->colorindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterPvpMapSCmdMatch)
  return target;
}

int EnterPvpMapSCmdMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ENTER_PVP_MAP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dest_zoneid = 3;
    if (has_dest_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_zoneid());
    }

    // optional uint32 raidid = 4;
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

    // optional uint64 room_guid = 5;
    if (has_room_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_guid());
    }

    // optional uint64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 colorindex = 7;
    if (has_colorindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->colorindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterPvpMapSCmdMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterPvpMapSCmdMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterPvpMapSCmdMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterPvpMapSCmdMatch::MergeFrom(const EnterPvpMapSCmdMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dest_zoneid()) {
      set_dest_zoneid(from.dest_zoneid());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_room_guid()) {
      set_room_guid(from.room_guid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_colorindex()) {
      set_colorindex(from.colorindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterPvpMapSCmdMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterPvpMapSCmdMatch::CopyFrom(const EnterPvpMapSCmdMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterPvpMapSCmdMatch::IsInitialized() const {

  return true;
}

void EnterPvpMapSCmdMatch::Swap(EnterPvpMapSCmdMatch* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dest_zoneid_, other->dest_zoneid_);
    std::swap(raidid_, other->raidid_);
    std::swap(room_guid_, other->room_guid_);
    std::swap(charid_, other->charid_);
    std::swap(colorindex_, other->colorindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterPvpMapSCmdMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterPvpMapSCmdMatch_descriptor_;
  metadata.reflection = EnterPvpMapSCmdMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeavePvpMap::kCmdFieldNumber;
const int LeavePvpMap::kParamFieldNumber;
const int LeavePvpMap::kRoomidFieldNumber;
const int LeavePvpMap::kCharidFieldNumber;
const int LeavePvpMap::kOriginzoneidFieldNumber;
#endif  // !_MSC_VER

LeavePvpMap::LeavePvpMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LeavePvpMap)
}

void LeavePvpMap::InitAsDefaultInstance() {
}

LeavePvpMap::LeavePvpMap(const LeavePvpMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LeavePvpMap)
}

void LeavePvpMap::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 16;
  roomid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  originzoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeavePvpMap::~LeavePvpMap() {
  // @@protoc_insertion_point(destructor:Cmd.LeavePvpMap)
  SharedDtor();
}

void LeavePvpMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeavePvpMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeavePvpMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeavePvpMap_descriptor_;
}

const LeavePvpMap& LeavePvpMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

LeavePvpMap* LeavePvpMap::default_instance_ = NULL;

LeavePvpMap* LeavePvpMap::New() const {
  return new LeavePvpMap;
}

void LeavePvpMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LeavePvpMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomid_, originzoneid_);
    cmd_ = 212;
    param_ = 16;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeavePvpMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LeavePvpMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_PVP_MAP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_originzoneid;
        break;
      }

      // optional uint32 originzoneid = 5;
      case 5: {
        if (tag == 40) {
         parse_originzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originzoneid_)));
          set_has_originzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LeavePvpMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LeavePvpMap)
  return false;
#undef DO_
}

void LeavePvpMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LeavePvpMap)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_PVP_MAP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint32 originzoneid = 5;
  if (has_originzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->originzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LeavePvpMap)
}

::google::protobuf::uint8* LeavePvpMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LeavePvpMap)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_PVP_MAP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint32 originzoneid = 5;
  if (has_originzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->originzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LeavePvpMap)
  return target;
}

int LeavePvpMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_PVP_MAP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 originzoneid = 5;
    if (has_originzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->originzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeavePvpMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeavePvpMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeavePvpMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeavePvpMap::MergeFrom(const LeavePvpMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_originzoneid()) {
      set_originzoneid(from.originzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeavePvpMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeavePvpMap::CopyFrom(const LeavePvpMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeavePvpMap::IsInitialized() const {

  return true;
}

void LeavePvpMap::Swap(LeavePvpMap* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(charid_, other->charid_);
    std::swap(originzoneid_, other->originzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeavePvpMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeavePvpMap_descriptor_;
  metadata.reflection = LeavePvpMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfJoinRoom::kCmdFieldNumber;
const int NtfJoinRoom::kParamFieldNumber;
const int NtfJoinRoom::kRoomidFieldNumber;
const int NtfJoinRoom::kCharidFieldNumber;
const int NtfJoinRoom::kTeamidFieldNumber;
const int NtfJoinRoom::kSuccessFieldNumber;
#endif  // !_MSC_VER

NtfJoinRoom::NtfJoinRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfJoinRoom)
}

void NtfJoinRoom::InitAsDefaultInstance() {
}

NtfJoinRoom::NtfJoinRoom(const NtfJoinRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfJoinRoom)
}

void NtfJoinRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 17;
  roomid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfJoinRoom::~NtfJoinRoom() {
  // @@protoc_insertion_point(destructor:Cmd.NtfJoinRoom)
  SharedDtor();
}

void NtfJoinRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfJoinRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfJoinRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfJoinRoom_descriptor_;
}

const NtfJoinRoom& NtfJoinRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

NtfJoinRoom* NtfJoinRoom::default_instance_ = NULL;

NtfJoinRoom* NtfJoinRoom::New() const {
  return new NtfJoinRoom;
}

void NtfJoinRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfJoinRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roomid_, success_);
    cmd_ = 212;
    param_ = 17;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfJoinRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfJoinRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_JOIN_ROOM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 5;
      case 5: {
        if (tag == 40) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_success;
        break;
      }

      // optional bool success = 6;
      case 6: {
        if (tag == 48) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfJoinRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfJoinRoom)
  return false;
#undef DO_
}

void NtfJoinRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfJoinRoom)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_JOIN_ROOM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint64 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->teamid(), output);
  }

  // optional bool success = 6;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfJoinRoom)
}

::google::protobuf::uint8* NtfJoinRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfJoinRoom)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_JOIN_ROOM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint64 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->teamid(), target);
  }

  // optional bool success = 6;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfJoinRoom)
  return target;
}

int NtfJoinRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_JOIN_ROOM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional bool success = 6;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfJoinRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfJoinRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfJoinRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfJoinRoom::MergeFrom(const NtfJoinRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfJoinRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfJoinRoom::CopyFrom(const NtfJoinRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfJoinRoom::IsInitialized() const {

  return true;
}

void NtfJoinRoom::Swap(NtfJoinRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(charid_, other->charid_);
    std::swap(teamid_, other->teamid_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfJoinRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfJoinRoom_descriptor_;
  metadata.reflection = NtfJoinRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfLeaveRoom::kCmdFieldNumber;
const int NtfLeaveRoom::kParamFieldNumber;
const int NtfLeaveRoom::kRoomidFieldNumber;
const int NtfLeaveRoom::kTeamidFieldNumber;
#endif  // !_MSC_VER

NtfLeaveRoom::NtfLeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfLeaveRoom)
}

void NtfLeaveRoom::InitAsDefaultInstance() {
}

NtfLeaveRoom::NtfLeaveRoom(const NtfLeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfLeaveRoom)
}

void NtfLeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 18;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfLeaveRoom::~NtfLeaveRoom() {
  // @@protoc_insertion_point(destructor:Cmd.NtfLeaveRoom)
  SharedDtor();
}

void NtfLeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfLeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfLeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfLeaveRoom_descriptor_;
}

const NtfLeaveRoom& NtfLeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

NtfLeaveRoom* NtfLeaveRoom::default_instance_ = NULL;

NtfLeaveRoom* NtfLeaveRoom::New() const {
  return new NtfLeaveRoom;
}

void NtfLeaveRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfLeaveRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, teamid_);
    cmd_ = 212;
    param_ = 18;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfLeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfLeaveRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_LEAVE_ROOM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4;
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfLeaveRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfLeaveRoom)
  return false;
#undef DO_
}

void NtfLeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfLeaveRoom)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_LEAVE_ROOM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional uint64 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfLeaveRoom)
}

::google::protobuf::uint8* NtfLeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfLeaveRoom)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_LEAVE_ROOM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional uint64 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfLeaveRoom)
  return target;
}

int NtfLeaveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_NTF_LEAVE_ROOM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfLeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfLeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfLeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfLeaveRoom::MergeFrom(const NtfLeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfLeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfLeaveRoom::CopyFrom(const NtfLeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfLeaveRoom::IsInitialized() const {

  return true;
}

void NtfLeaveRoom::Swap(NtfLeaveRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfLeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfLeaveRoom_descriptor_;
  metadata.reflection = NtfLeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTeamMatchSCmd::kCmdFieldNumber;
const int CreateTeamMatchSCmd::kParamFieldNumber;
const int CreateTeamMatchSCmd::kTeamidFieldNumber;
const int CreateTeamMatchSCmd::kRoomidFieldNumber;
const int CreateTeamMatchSCmd::kCharidFieldNumber;
const int CreateTeamMatchSCmd::kNameFieldNumber;
const int CreateTeamMatchSCmd::kZoneidFieldNumber;
const int CreateTeamMatchSCmd::kNewTeamidFieldNumber;
const int CreateTeamMatchSCmd::kPvptypeFieldNumber;
#endif  // !_MSC_VER

CreateTeamMatchSCmd::CreateTeamMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateTeamMatchSCmd)
}

void CreateTeamMatchSCmd::InitAsDefaultInstance() {
}

CreateTeamMatchSCmd::CreateTeamMatchSCmd(const CreateTeamMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateTeamMatchSCmd)
}

void CreateTeamMatchSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 19;
  teamid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  new_teamid_ = GOOGLE_ULONGLONG(0);
  pvptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTeamMatchSCmd::~CreateTeamMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreateTeamMatchSCmd)
  SharedDtor();
}

void CreateTeamMatchSCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateTeamMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTeamMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTeamMatchSCmd_descriptor_;
}

const CreateTeamMatchSCmd& CreateTeamMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

CreateTeamMatchSCmd* CreateTeamMatchSCmd::default_instance_ = NULL;

CreateTeamMatchSCmd* CreateTeamMatchSCmd::New() const {
  return new CreateTeamMatchSCmd;
}

void CreateTeamMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateTeamMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(teamid_, charid_);
    ZR_(new_teamid_, zoneid_);
    cmd_ = 212;
    param_ = 19;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  pvptype_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTeamMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateTeamMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CREATE_TEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 4;
      case 4: {
        if (tag == 32) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 7;
      case 7: {
        if (tag == 56) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_new_teamid;
        break;
      }

      // optional uint64 new_teamid = 8;
      case 8: {
        if (tag == 64) {
         parse_new_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_teamid_)));
          set_has_new_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pvptype;
        break;
      }

      // optional .Cmd.EPvpType pvptype = 9;
      case 9: {
        if (tag == 72) {
         parse_pvptype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_pvptype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateTeamMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateTeamMatchSCmd)
  return false;
#undef DO_
}

void CreateTeamMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CREATE_TEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  // optional uint64 new_teamid = 8;
  if (has_new_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->new_teamid(), output);
  }

  // optional .Cmd.EPvpType pvptype = 9;
  if (has_pvptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->pvptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateTeamMatchSCmd)
}

::google::protobuf::uint8* CreateTeamMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CREATE_TEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  // optional uint64 new_teamid = 8;
  if (has_new_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->new_teamid(), target);
  }

  // optional .Cmd.EPvpType pvptype = 9;
  if (has_pvptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->pvptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateTeamMatchSCmd)
  return target;
}

int CreateTeamMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CREATE_TEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 zoneid = 7;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 new_teamid = 8;
    if (has_new_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_teamid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EPvpType pvptype = 9;
    if (has_pvptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pvptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTeamMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTeamMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTeamMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTeamMatchSCmd::MergeFrom(const CreateTeamMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_new_teamid()) {
      set_new_teamid(from.new_teamid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pvptype()) {
      set_pvptype(from.pvptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTeamMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTeamMatchSCmd::CopyFrom(const CreateTeamMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTeamMatchSCmd::IsInitialized() const {

  return true;
}

void CreateTeamMatchSCmd::Swap(CreateTeamMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(roomid_, other->roomid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(new_teamid_, other->new_teamid_);
    std::swap(pvptype_, other->pvptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTeamMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTeamMatchSCmd_descriptor_;
  metadata.reflection = CreateTeamMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpTeamMemberUpdateSCmd::kCmdFieldNumber;
const int PvpTeamMemberUpdateSCmd::kParamFieldNumber;
const int PvpTeamMemberUpdateSCmd::kDataFieldNumber;
#endif  // !_MSC_VER

PvpTeamMemberUpdateSCmd::PvpTeamMemberUpdateSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PvpTeamMemberUpdateSCmd)
}

void PvpTeamMemberUpdateSCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MatchTeamMemUpdateInfo*>(&::Cmd::MatchTeamMemUpdateInfo::default_instance());
}

PvpTeamMemberUpdateSCmd::PvpTeamMemberUpdateSCmd(const PvpTeamMemberUpdateSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PvpTeamMemberUpdateSCmd)
}

void PvpTeamMemberUpdateSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 20;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpTeamMemberUpdateSCmd::~PvpTeamMemberUpdateSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PvpTeamMemberUpdateSCmd)
  SharedDtor();
}

void PvpTeamMemberUpdateSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PvpTeamMemberUpdateSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpTeamMemberUpdateSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpTeamMemberUpdateSCmd_descriptor_;
}

const PvpTeamMemberUpdateSCmd& PvpTeamMemberUpdateSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

PvpTeamMemberUpdateSCmd* PvpTeamMemberUpdateSCmd::default_instance_ = NULL;

PvpTeamMemberUpdateSCmd* PvpTeamMemberUpdateSCmd::New() const {
  return new PvpTeamMemberUpdateSCmd;
}

void PvpTeamMemberUpdateSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 212;
    param_ = 20;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MatchTeamMemUpdateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpTeamMemberUpdateSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PvpTeamMemberUpdateSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PvpTeamMemberUpdateSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PvpTeamMemberUpdateSCmd)
  return false;
#undef DO_
}

void PvpTeamMemberUpdateSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PvpTeamMemberUpdateSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PvpTeamMemberUpdateSCmd)
}

::google::protobuf::uint8* PvpTeamMemberUpdateSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PvpTeamMemberUpdateSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PvpTeamMemberUpdateSCmd)
  return target;
}

int PvpTeamMemberUpdateSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpTeamMemberUpdateSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpTeamMemberUpdateSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpTeamMemberUpdateSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpTeamMemberUpdateSCmd::MergeFrom(const PvpTeamMemberUpdateSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MatchTeamMemUpdateInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpTeamMemberUpdateSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpTeamMemberUpdateSCmd::CopyFrom(const PvpTeamMemberUpdateSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTeamMemberUpdateSCmd::IsInitialized() const {

  return true;
}

void PvpTeamMemberUpdateSCmd::Swap(PvpTeamMemberUpdateSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpTeamMemberUpdateSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpTeamMemberUpdateSCmd_descriptor_;
  metadata.reflection = PvpTeamMemberUpdateSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpMemberDataUpdateSCmd::kCmdFieldNumber;
const int PvpMemberDataUpdateSCmd::kParamFieldNumber;
const int PvpMemberDataUpdateSCmd::kDataFieldNumber;
#endif  // !_MSC_VER

PvpMemberDataUpdateSCmd::PvpMemberDataUpdateSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PvpMemberDataUpdateSCmd)
}

void PvpMemberDataUpdateSCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MatchTeamMemDataUpdateInfo*>(&::Cmd::MatchTeamMemDataUpdateInfo::default_instance());
}

PvpMemberDataUpdateSCmd::PvpMemberDataUpdateSCmd(const PvpMemberDataUpdateSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PvpMemberDataUpdateSCmd)
}

void PvpMemberDataUpdateSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 21;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpMemberDataUpdateSCmd::~PvpMemberDataUpdateSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PvpMemberDataUpdateSCmd)
  SharedDtor();
}

void PvpMemberDataUpdateSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PvpMemberDataUpdateSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpMemberDataUpdateSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpMemberDataUpdateSCmd_descriptor_;
}

const PvpMemberDataUpdateSCmd& PvpMemberDataUpdateSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

PvpMemberDataUpdateSCmd* PvpMemberDataUpdateSCmd::default_instance_ = NULL;

PvpMemberDataUpdateSCmd* PvpMemberDataUpdateSCmd::New() const {
  return new PvpMemberDataUpdateSCmd;
}

void PvpMemberDataUpdateSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 212;
    param_ = 21;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MatchTeamMemDataUpdateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpMemberDataUpdateSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PvpMemberDataUpdateSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERDATAUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PvpMemberDataUpdateSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PvpMemberDataUpdateSCmd)
  return false;
#undef DO_
}

void PvpMemberDataUpdateSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PvpMemberDataUpdateSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERDATAUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PvpMemberDataUpdateSCmd)
}

::google::protobuf::uint8* PvpMemberDataUpdateSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PvpMemberDataUpdateSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERDATAUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PvpMemberDataUpdateSCmd)
  return target;
}

int PvpMemberDataUpdateSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_PVP_MEMBERDATAUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpMemberDataUpdateSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpMemberDataUpdateSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpMemberDataUpdateSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpMemberDataUpdateSCmd::MergeFrom(const PvpMemberDataUpdateSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MatchTeamMemDataUpdateInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpMemberDataUpdateSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpMemberDataUpdateSCmd::CopyFrom(const PvpMemberDataUpdateSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpMemberDataUpdateSCmd::IsInitialized() const {

  return true;
}

void PvpMemberDataUpdateSCmd::Swap(PvpMemberDataUpdateSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpMemberDataUpdateSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpMemberDataUpdateSCmd_descriptor_;
  metadata.reflection = PvpMemberDataUpdateSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyTeamMatchSCmd::kCmdFieldNumber;
const int ApplyTeamMatchSCmd::kParamFieldNumber;
const int ApplyTeamMatchSCmd::kTeamidFieldNumber;
const int ApplyTeamMatchSCmd::kCharidFieldNumber;
const int ApplyTeamMatchSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

ApplyTeamMatchSCmd::ApplyTeamMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ApplyTeamMatchSCmd)
}

void ApplyTeamMatchSCmd::InitAsDefaultInstance() {
}

ApplyTeamMatchSCmd::ApplyTeamMatchSCmd(const ApplyTeamMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ApplyTeamMatchSCmd)
}

void ApplyTeamMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 22;
  teamid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyTeamMatchSCmd::~ApplyTeamMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ApplyTeamMatchSCmd)
  SharedDtor();
}

void ApplyTeamMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyTeamMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyTeamMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyTeamMatchSCmd_descriptor_;
}

const ApplyTeamMatchSCmd& ApplyTeamMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

ApplyTeamMatchSCmd* ApplyTeamMatchSCmd::default_instance_ = NULL;

ApplyTeamMatchSCmd* ApplyTeamMatchSCmd::New() const {
  return new ApplyTeamMatchSCmd;
}

void ApplyTeamMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ApplyTeamMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, zoneid_);
    cmd_ = 212;
    param_ = 22;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyTeamMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ApplyTeamMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_APPLY_TEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 7;
      case 7: {
        if (tag == 56) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ApplyTeamMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ApplyTeamMatchSCmd)
  return false;
#undef DO_
}

void ApplyTeamMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ApplyTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_APPLY_TEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ApplyTeamMatchSCmd)
}

::google::protobuf::uint8* ApplyTeamMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ApplyTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_APPLY_TEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ApplyTeamMatchSCmd)
  return target;
}

int ApplyTeamMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_APPLY_TEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 7;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyTeamMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyTeamMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyTeamMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyTeamMatchSCmd::MergeFrom(const ApplyTeamMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyTeamMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyTeamMatchSCmd::CopyFrom(const ApplyTeamMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyTeamMatchSCmd::IsInitialized() const {

  return true;
}

void ApplyTeamMatchSCmd::Swap(ApplyTeamMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyTeamMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyTeamMatchSCmd_descriptor_;
  metadata.reflection = ApplyTeamMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncTeamInfoMatchSCmd::kCmdFieldNumber;
const int SyncTeamInfoMatchSCmd::kParamFieldNumber;
const int SyncTeamInfoMatchSCmd::kTeamidFieldNumber;
const int SyncTeamInfoMatchSCmd::kCharidFieldNumber;
const int SyncTeamInfoMatchSCmd::kIndexFieldNumber;
#endif  // !_MSC_VER

SyncTeamInfoMatchSCmd::SyncTeamInfoMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncTeamInfoMatchSCmd)
}

void SyncTeamInfoMatchSCmd::InitAsDefaultInstance() {
}

SyncTeamInfoMatchSCmd::SyncTeamInfoMatchSCmd(const SyncTeamInfoMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncTeamInfoMatchSCmd)
}

void SyncTeamInfoMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 23;
  teamid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncTeamInfoMatchSCmd::~SyncTeamInfoMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncTeamInfoMatchSCmd)
  SharedDtor();
}

void SyncTeamInfoMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncTeamInfoMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncTeamInfoMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncTeamInfoMatchSCmd_descriptor_;
}

const SyncTeamInfoMatchSCmd& SyncTeamInfoMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SyncTeamInfoMatchSCmd* SyncTeamInfoMatchSCmd::default_instance_ = NULL;

SyncTeamInfoMatchSCmd* SyncTeamInfoMatchSCmd::New() const {
  return new SyncTeamInfoMatchSCmd;
}

void SyncTeamInfoMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncTeamInfoMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, index_);
    cmd_ = 212;
    param_ = 23;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncTeamInfoMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncTeamInfoMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_TEAM_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional uint32 index = 5;
      case 5: {
        if (tag == 40) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncTeamInfoMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncTeamInfoMatchSCmd)
  return false;
#undef DO_
}

void SyncTeamInfoMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncTeamInfoMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_TEAM_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncTeamInfoMatchSCmd)
}

::google::protobuf::uint8* SyncTeamInfoMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncTeamInfoMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_TEAM_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncTeamInfoMatchSCmd)
  return target;
}

int SyncTeamInfoMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_TEAM_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncTeamInfoMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncTeamInfoMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncTeamInfoMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncTeamInfoMatchSCmd::MergeFrom(const SyncTeamInfoMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncTeamInfoMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncTeamInfoMatchSCmd::CopyFrom(const SyncTeamInfoMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTeamInfoMatchSCmd::IsInitialized() const {

  return true;
}

void SyncTeamInfoMatchSCmd::Swap(SyncTeamInfoMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(charid_, other->charid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncTeamInfoMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncTeamInfoMatchSCmd_descriptor_;
  metadata.reflection = SyncTeamInfoMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncRaidSceneMatchSCmd::kCmdFieldNumber;
const int SyncRaidSceneMatchSCmd::kParamFieldNumber;
const int SyncRaidSceneMatchSCmd::kRoomidFieldNumber;
const int SyncRaidSceneMatchSCmd::kOpenFieldNumber;
const int SyncRaidSceneMatchSCmd::kSceneidFieldNumber;
const int SyncRaidSceneMatchSCmd::kCountFieldNumber;
const int SyncRaidSceneMatchSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

SyncRaidSceneMatchSCmd::SyncRaidSceneMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncRaidSceneMatchSCmd)
}

void SyncRaidSceneMatchSCmd::InitAsDefaultInstance() {
}

SyncRaidSceneMatchSCmd::SyncRaidSceneMatchSCmd(const SyncRaidSceneMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncRaidSceneMatchSCmd)
}

void SyncRaidSceneMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 24;
  roomid_ = GOOGLE_ULONGLONG(0);
  open_ = false;
  sceneid_ = 0u;
  count_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRaidSceneMatchSCmd::~SyncRaidSceneMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncRaidSceneMatchSCmd)
  SharedDtor();
}

void SyncRaidSceneMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncRaidSceneMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRaidSceneMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRaidSceneMatchSCmd_descriptor_;
}

const SyncRaidSceneMatchSCmd& SyncRaidSceneMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SyncRaidSceneMatchSCmd* SyncRaidSceneMatchSCmd::default_instance_ = NULL;

SyncRaidSceneMatchSCmd* SyncRaidSceneMatchSCmd::New() const {
  return new SyncRaidSceneMatchSCmd;
}

void SyncRaidSceneMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncRaidSceneMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(roomid_, zoneid_);
    cmd_ = 212;
    param_ = 24;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncRaidSceneMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncRaidSceneMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_RAIDSCENE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4;
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 5;
      case 5: {
        if (tag == 40) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 7;
      case 7: {
        if (tag == 56) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncRaidSceneMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncRaidSceneMatchSCmd)
  return false;
#undef DO_
}

void SyncRaidSceneMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncRaidSceneMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_RAIDSCENE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional bool open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncRaidSceneMatchSCmd)
}

::google::protobuf::uint8* SyncRaidSceneMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncRaidSceneMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_RAIDSCENE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional bool open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncRaidSceneMatchSCmd)
  return target;
}

int SyncRaidSceneMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_RAIDSCENE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional bool open = 4;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional uint32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 zoneid = 7;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRaidSceneMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncRaidSceneMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncRaidSceneMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncRaidSceneMatchSCmd::MergeFrom(const SyncRaidSceneMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncRaidSceneMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRaidSceneMatchSCmd::CopyFrom(const SyncRaidSceneMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRaidSceneMatchSCmd::IsInitialized() const {

  return true;
}

void SyncRaidSceneMatchSCmd::Swap(SyncRaidSceneMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(open_, other->open_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(count_, other->count_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncRaidSceneMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRaidSceneMatchSCmd_descriptor_;
  metadata.reflection = SyncRaidSceneMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgRoomData::kGuildidFieldNumber;
const int SuperGvgRoomData::kColorFieldNumber;
const int SuperGvgRoomData::kGuildnameFieldNumber;
const int SuperGvgRoomData::kGuildiconFieldNumber;
const int SuperGvgRoomData::kFirecountFieldNumber;
const int SuperGvgRoomData::kFirescoreFieldNumber;
#endif  // !_MSC_VER

SuperGvgRoomData::SuperGvgRoomData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgRoomData)
}

void SuperGvgRoomData::InitAsDefaultInstance() {
}

SuperGvgRoomData::SuperGvgRoomData(const SuperGvgRoomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgRoomData)
}

void SuperGvgRoomData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  color_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firecount_ = 0u;
  firescore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgRoomData::~SuperGvgRoomData() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgRoomData)
  SharedDtor();
}

void SuperGvgRoomData::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildicon_;
  }
  if (this != default_instance_) {
  }
}

void SuperGvgRoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgRoomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgRoomData_descriptor_;
}

const SuperGvgRoomData& SuperGvgRoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SuperGvgRoomData* SuperGvgRoomData::default_instance_ = NULL;

SuperGvgRoomData* SuperGvgRoomData::New() const {
  return new SuperGvgRoomData;
}

void SuperGvgRoomData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuperGvgRoomData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(color_, firecount_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_guildicon()) {
      if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildicon_->clear();
      }
    }
    firescore_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgRoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgRoomData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional uint32 color = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guildname;
        break;
      }

      // optional string guildname = 3;
      case 3: {
        if (tag == 26) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guildicon;
        break;
      }

      // optional string guildicon = 4;
      case 4: {
        if (tag == 34) {
         parse_guildicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildicon().data(), this->guildicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildicon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_firecount;
        break;
      }

      // optional uint32 firecount = 5;
      case 5: {
        if (tag == 40) {
         parse_firecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firecount_)));
          set_has_firecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_firescore;
        break;
      }

      // optional uint32 firescore = 6;
      case 6: {
        if (tag == 48) {
         parse_firescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firescore_)));
          set_has_firescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgRoomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgRoomData)
  return false;
#undef DO_
}

void SuperGvgRoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgRoomData)
  // optional uint64 guildid = 1 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional uint32 color = 2 [default = 0];
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guildname(), output);
  }

  // optional string guildicon = 4;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildicon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guildicon(), output);
  }

  // optional uint32 firecount = 5;
  if (has_firecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->firecount(), output);
  }

  // optional uint32 firescore = 6;
  if (has_firescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->firescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgRoomData)
}

::google::protobuf::uint8* SuperGvgRoomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgRoomData)
  // optional uint64 guildid = 1 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional uint32 color = 2 [default = 0];
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color(), target);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional string guildicon = 4;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildicon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildicon(), target);
  }

  // optional uint32 firecount = 5;
  if (has_firecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->firecount(), target);
  }

  // optional uint32 firescore = 6;
  if (has_firescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->firescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgRoomData)
  return target;
}

int SuperGvgRoomData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildid = 1 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 color = 2 [default = 0];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional string guildname = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string guildicon = 4;
    if (has_guildicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildicon());
    }

    // optional uint32 firecount = 5;
    if (has_firecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firecount());
    }

    // optional uint32 firescore = 6;
    if (has_firescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firescore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgRoomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgRoomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgRoomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgRoomData::MergeFrom(const SuperGvgRoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildicon()) {
      set_guildicon(from.guildicon());
    }
    if (from.has_firecount()) {
      set_firecount(from.firecount());
    }
    if (from.has_firescore()) {
      set_firescore(from.firescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgRoomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgRoomData::CopyFrom(const SuperGvgRoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgRoomData::IsInitialized() const {

  return true;
}

void SuperGvgRoomData::Swap(SuperGvgRoomData* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(color_, other->color_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildicon_, other->guildicon_);
    std::swap(firecount_, other->firecount_);
    std::swap(firescore_, other->firescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgRoomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgRoomData_descriptor_;
  metadata.reflection = SuperGvgRoomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsUserCurScore::kCharidFieldNumber;
const int TeamPwsUserCurScore::kScoreFieldNumber;
#endif  // !_MSC_VER

TeamPwsUserCurScore::TeamPwsUserCurScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsUserCurScore)
}

void TeamPwsUserCurScore::InitAsDefaultInstance() {
}

TeamPwsUserCurScore::TeamPwsUserCurScore(const TeamPwsUserCurScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsUserCurScore)
}

void TeamPwsUserCurScore::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsUserCurScore::~TeamPwsUserCurScore() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsUserCurScore)
  SharedDtor();
}

void TeamPwsUserCurScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPwsUserCurScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsUserCurScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsUserCurScore_descriptor_;
}

const TeamPwsUserCurScore& TeamPwsUserCurScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

TeamPwsUserCurScore* TeamPwsUserCurScore::default_instance_ = NULL;

TeamPwsUserCurScore* TeamPwsUserCurScore::New() const {
  return new TeamPwsUserCurScore;
}

void TeamPwsUserCurScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamPwsUserCurScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsUserCurScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsUserCurScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsUserCurScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsUserCurScore)
  return false;
#undef DO_
}

void TeamPwsUserCurScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsUserCurScore)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsUserCurScore)
}

::google::protobuf::uint8* TeamPwsUserCurScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsUserCurScore)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsUserCurScore)
  return target;
}

int TeamPwsUserCurScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsUserCurScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsUserCurScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsUserCurScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsUserCurScore::MergeFrom(const TeamPwsUserCurScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsUserCurScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsUserCurScore::CopyFrom(const TeamPwsUserCurScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsUserCurScore::IsInitialized() const {

  return true;
}

void TeamPwsUserCurScore::Swap(TeamPwsUserCurScore* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsUserCurScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsUserCurScore_descriptor_;
  metadata.reflection = TeamPwsUserCurScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsRoomData::kTeamidFieldNumber;
const int TeamPwsRoomData::kColorFieldNumber;
const int TeamPwsRoomData::kUsersFieldNumber;
#endif  // !_MSC_VER

TeamPwsRoomData::TeamPwsRoomData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsRoomData)
}

void TeamPwsRoomData::InitAsDefaultInstance() {
}

TeamPwsRoomData::TeamPwsRoomData(const TeamPwsRoomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsRoomData)
}

void TeamPwsRoomData::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsRoomData::~TeamPwsRoomData() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsRoomData)
  SharedDtor();
}

void TeamPwsRoomData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPwsRoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsRoomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsRoomData_descriptor_;
}

const TeamPwsRoomData& TeamPwsRoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

TeamPwsRoomData* TeamPwsRoomData::default_instance_ = NULL;

TeamPwsRoomData* TeamPwsRoomData::New() const {
  return new TeamPwsRoomData;
}

void TeamPwsRoomData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    teamid_ = GOOGLE_ULONGLONG(0);
    color_ = 0u;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsRoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsRoomData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional uint32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_users;
        break;
      }

      // repeated .Cmd.TeamPwsUserCurScore users = 3;
      case 3: {
        if (tag == 26) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsRoomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsRoomData)
  return false;
#undef DO_
}

void TeamPwsRoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsRoomData)
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // repeated .Cmd.TeamPwsUserCurScore users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsRoomData)
}

::google::protobuf::uint8* TeamPwsRoomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsRoomData)
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color(), target);
  }

  // repeated .Cmd.TeamPwsUserCurScore users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsRoomData)
  return target;
}

int TeamPwsRoomData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

  }
  // repeated .Cmd.TeamPwsUserCurScore users = 3;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsRoomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsRoomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsRoomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsRoomData::MergeFrom(const TeamPwsRoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsRoomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsRoomData::CopyFrom(const TeamPwsRoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsRoomData::IsInitialized() const {

  return true;
}

void TeamPwsRoomData::Swap(TeamPwsRoomData* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(color_, other->color_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsRoomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsRoomData_descriptor_;
  metadata.reflection = TeamPwsRoomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncRoomSceneMatchSCmd::kCmdFieldNumber;
const int SyncRoomSceneMatchSCmd::kParamFieldNumber;
const int SyncRoomSceneMatchSCmd::kRoomidFieldNumber;
const int SyncRoomSceneMatchSCmd::kSceneidFieldNumber;
const int SyncRoomSceneMatchSCmd::kZoneidFieldNumber;
const int SyncRoomSceneMatchSCmd::kRoomsizeFieldNumber;
const int SyncRoomSceneMatchSCmd::kSugvgdataFieldNumber;
const int SyncRoomSceneMatchSCmd::kLevelFieldNumber;
const int SyncRoomSceneMatchSCmd::kRaidtimeFieldNumber;
const int SyncRoomSceneMatchSCmd::kPwsdataFieldNumber;
const int SyncRoomSceneMatchSCmd::kPvptypeFieldNumber;
#endif  // !_MSC_VER

SyncRoomSceneMatchSCmd::SyncRoomSceneMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncRoomSceneMatchSCmd)
}

void SyncRoomSceneMatchSCmd::InitAsDefaultInstance() {
}

SyncRoomSceneMatchSCmd::SyncRoomSceneMatchSCmd(const SyncRoomSceneMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncRoomSceneMatchSCmd)
}

void SyncRoomSceneMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 33;
  roomid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = 0u;
  zoneid_ = 0u;
  roomsize_ = 0u;
  level_ = 0u;
  raidtime_ = 0u;
  pvptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRoomSceneMatchSCmd::~SyncRoomSceneMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncRoomSceneMatchSCmd)
  SharedDtor();
}

void SyncRoomSceneMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncRoomSceneMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRoomSceneMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRoomSceneMatchSCmd_descriptor_;
}

const SyncRoomSceneMatchSCmd& SyncRoomSceneMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SyncRoomSceneMatchSCmd* SyncRoomSceneMatchSCmd::default_instance_ = NULL;

SyncRoomSceneMatchSCmd* SyncRoomSceneMatchSCmd::New() const {
  return new SyncRoomSceneMatchSCmd;
}

void SyncRoomSceneMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncRoomSceneMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(roomid_, zoneid_);
    ZR_(roomsize_, level_);
    cmd_ = 212;
    param_ = 33;
  }
  ZR_(raidtime_, pvptype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sugvgdata_.Clear();
  pwsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncRoomSceneMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncRoomSceneMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_ROOMINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4;
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roomsize;
        break;
      }

      // optional uint32 roomsize = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_roomsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomsize_)));
          set_has_roomsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sugvgdata;
        break;
      }

      // repeated .Cmd.SuperGvgRoomData sugvgdata = 7;
      case 7: {
        if (tag == 58) {
         parse_sugvgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sugvgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sugvgdata;
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_raidtime;
        break;
      }

      // optional uint32 raidtime = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_raidtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidtime_)));
          set_has_raidtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pwsdata;
        break;
      }

      // repeated .Cmd.TeamPwsRoomData pwsdata = 10;
      case 10: {
        if (tag == 82) {
         parse_pwsdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pwsdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pwsdata;
        if (input->ExpectTag(88)) goto parse_pvptype;
        break;
      }

      // optional .Cmd.EPvpType pvptype = 11 [default = EPVPTYPE_MIN];
      case 11: {
        if (tag == 88) {
         parse_pvptype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_pvptype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncRoomSceneMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncRoomSceneMatchSCmd)
  return false;
#undef DO_
}

void SyncRoomSceneMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncRoomSceneMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_ROOMINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 roomsize = 6 [default = 0];
  if (has_roomsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->roomsize(), output);
  }

  // repeated .Cmd.SuperGvgRoomData sugvgdata = 7;
  for (int i = 0; i < this->sugvgdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sugvgdata(i), output);
  }

  // optional uint32 level = 8 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 raidtime = 9 [default = 0];
  if (has_raidtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->raidtime(), output);
  }

  // repeated .Cmd.TeamPwsRoomData pwsdata = 10;
  for (int i = 0; i < this->pwsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pwsdata(i), output);
  }

  // optional .Cmd.EPvpType pvptype = 11 [default = EPVPTYPE_MIN];
  if (has_pvptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pvptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncRoomSceneMatchSCmd)
}

::google::protobuf::uint8* SyncRoomSceneMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncRoomSceneMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_ROOMINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 roomsize = 6 [default = 0];
  if (has_roomsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->roomsize(), target);
  }

  // repeated .Cmd.SuperGvgRoomData sugvgdata = 7;
  for (int i = 0; i < this->sugvgdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sugvgdata(i), target);
  }

  // optional uint32 level = 8 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 raidtime = 9 [default = 0];
  if (has_raidtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->raidtime(), target);
  }

  // repeated .Cmd.TeamPwsRoomData pwsdata = 10;
  for (int i = 0; i < this->pwsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pwsdata(i), target);
  }

  // optional .Cmd.EPvpType pvptype = 11 [default = EPVPTYPE_MIN];
  if (has_pvptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pvptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncRoomSceneMatchSCmd)
  return target;
}

int SyncRoomSceneMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_ROOMINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint32 sceneid = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 roomsize = 6 [default = 0];
    if (has_roomsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomsize());
    }

    // optional uint32 level = 8 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 raidtime = 9 [default = 0];
    if (has_raidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidtime());
    }

    // optional .Cmd.EPvpType pvptype = 11 [default = EPVPTYPE_MIN];
    if (has_pvptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pvptype());
    }

  }
  // repeated .Cmd.SuperGvgRoomData sugvgdata = 7;
  total_size += 1 * this->sugvgdata_size();
  for (int i = 0; i < this->sugvgdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sugvgdata(i));
  }

  // repeated .Cmd.TeamPwsRoomData pwsdata = 10;
  total_size += 1 * this->pwsdata_size();
  for (int i = 0; i < this->pwsdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pwsdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRoomSceneMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncRoomSceneMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncRoomSceneMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncRoomSceneMatchSCmd::MergeFrom(const SyncRoomSceneMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  sugvgdata_.MergeFrom(from.sugvgdata_);
  pwsdata_.MergeFrom(from.pwsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_roomsize()) {
      set_roomsize(from.roomsize());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_raidtime()) {
      set_raidtime(from.raidtime());
    }
    if (from.has_pvptype()) {
      set_pvptype(from.pvptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncRoomSceneMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRoomSceneMatchSCmd::CopyFrom(const SyncRoomSceneMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRoomSceneMatchSCmd::IsInitialized() const {

  return true;
}

void SyncRoomSceneMatchSCmd::Swap(SyncRoomSceneMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(roomsize_, other->roomsize_);
    sugvgdata_.Swap(&other->sugvgdata_);
    std::swap(level_, other->level_);
    std::swap(raidtime_, other->raidtime_);
    pwsdata_.Swap(&other->pwsdata_);
    std::swap(pvptype_, other->pvptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncRoomSceneMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRoomSceneMatchSCmd_descriptor_;
  metadata.reflection = SyncRoomSceneMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickTeamMatchSCmd::kCmdFieldNumber;
const int KickTeamMatchSCmd::kParamFieldNumber;
const int KickTeamMatchSCmd::kTeamidFieldNumber;
const int KickTeamMatchSCmd::kCharidFieldNumber;
const int KickTeamMatchSCmd::kRoomidFieldNumber;
const int KickTeamMatchSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

KickTeamMatchSCmd::KickTeamMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickTeamMatchSCmd)
}

void KickTeamMatchSCmd::InitAsDefaultInstance() {
}

KickTeamMatchSCmd::KickTeamMatchSCmd(const KickTeamMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickTeamMatchSCmd)
}

void KickTeamMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 25;
  teamid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickTeamMatchSCmd::~KickTeamMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KickTeamMatchSCmd)
  SharedDtor();
}

void KickTeamMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickTeamMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickTeamMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickTeamMatchSCmd_descriptor_;
}

const KickTeamMatchSCmd& KickTeamMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

KickTeamMatchSCmd* KickTeamMatchSCmd::default_instance_ = NULL;

KickTeamMatchSCmd* KickTeamMatchSCmd::New() const {
  return new KickTeamMatchSCmd;
}

void KickTeamMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickTeamMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(teamid_, zoneid_);
    cmd_ = 212;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickTeamMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickTeamMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_TEAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 6;
      case 6: {
        if (tag == 48) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 7;
      case 7: {
        if (tag == 56) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickTeamMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickTeamMatchSCmd)
  return false;
#undef DO_
}

void KickTeamMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_TEAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint64 roomid = 6;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->roomid(), output);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickTeamMatchSCmd)
}

::google::protobuf::uint8* KickTeamMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_TEAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint64 roomid = 6;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->roomid(), target);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickTeamMatchSCmd)
  return target;
}

int KickTeamMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_TEAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 roomid = 6;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint32 zoneid = 7;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickTeamMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickTeamMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickTeamMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickTeamMatchSCmd::MergeFrom(const KickTeamMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickTeamMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickTeamMatchSCmd::CopyFrom(const KickTeamMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickTeamMatchSCmd::IsInitialized() const {

  return true;
}

void KickTeamMatchSCmd::Swap(KickTeamMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(charid_, other->charid_);
    std::swap(roomid_, other->roomid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickTeamMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickTeamMatchSCmd_descriptor_;
  metadata.reflection = KickTeamMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickUserFromPvpMatchSCmd::kCmdFieldNumber;
const int KickUserFromPvpMatchSCmd::kParamFieldNumber;
const int KickUserFromPvpMatchSCmd::kCharidFieldNumber;
const int KickUserFromPvpMatchSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

KickUserFromPvpMatchSCmd::KickUserFromPvpMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickUserFromPvpMatchSCmd)
}

void KickUserFromPvpMatchSCmd::InitAsDefaultInstance() {
}

KickUserFromPvpMatchSCmd::KickUserFromPvpMatchSCmd(const KickUserFromPvpMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickUserFromPvpMatchSCmd)
}

void KickUserFromPvpMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 26;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickUserFromPvpMatchSCmd::~KickUserFromPvpMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KickUserFromPvpMatchSCmd)
  SharedDtor();
}

void KickUserFromPvpMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickUserFromPvpMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickUserFromPvpMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickUserFromPvpMatchSCmd_descriptor_;
}

const KickUserFromPvpMatchSCmd& KickUserFromPvpMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

KickUserFromPvpMatchSCmd* KickUserFromPvpMatchSCmd::default_instance_ = NULL;

KickUserFromPvpMatchSCmd* KickUserFromPvpMatchSCmd::New() const {
  return new KickUserFromPvpMatchSCmd;
}

void KickUserFromPvpMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickUserFromPvpMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, zoneid_);
    cmd_ = 212;
    param_ = 26;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickUserFromPvpMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickUserFromPvpMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_USER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickUserFromPvpMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickUserFromPvpMatchSCmd)
  return false;
#undef DO_
}

void KickUserFromPvpMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickUserFromPvpMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_USER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickUserFromPvpMatchSCmd)
}

::google::protobuf::uint8* KickUserFromPvpMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickUserFromPvpMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_USER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickUserFromPvpMatchSCmd)
  return target;
}

int KickUserFromPvpMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_KICK_USER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickUserFromPvpMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickUserFromPvpMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickUserFromPvpMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickUserFromPvpMatchSCmd::MergeFrom(const KickUserFromPvpMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickUserFromPvpMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickUserFromPvpMatchSCmd::CopyFrom(const KickUserFromPvpMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickUserFromPvpMatchSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void KickUserFromPvpMatchSCmd::Swap(KickUserFromPvpMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickUserFromPvpMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickUserFromPvpMatchSCmd_descriptor_;
  metadata.reflection = KickUserFromPvpMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetPvpMatchSCmd::kCmdFieldNumber;
const int ResetPvpMatchSCmd::kParamFieldNumber;
#endif  // !_MSC_VER

ResetPvpMatchSCmd::ResetPvpMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ResetPvpMatchSCmd)
}

void ResetPvpMatchSCmd::InitAsDefaultInstance() {
}

ResetPvpMatchSCmd::ResetPvpMatchSCmd(const ResetPvpMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ResetPvpMatchSCmd)
}

void ResetPvpMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 27;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetPvpMatchSCmd::~ResetPvpMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ResetPvpMatchSCmd)
  SharedDtor();
}

void ResetPvpMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetPvpMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPvpMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetPvpMatchSCmd_descriptor_;
}

const ResetPvpMatchSCmd& ResetPvpMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

ResetPvpMatchSCmd* ResetPvpMatchSCmd::default_instance_ = NULL;

ResetPvpMatchSCmd* ResetPvpMatchSCmd::New() const {
  return new ResetPvpMatchSCmd;
}

void ResetPvpMatchSCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 212;
    param_ = 27;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetPvpMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ResetPvpMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_RESET_PVP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ResetPvpMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ResetPvpMatchSCmd)
  return false;
#undef DO_
}

void ResetPvpMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ResetPvpMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_RESET_PVP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ResetPvpMatchSCmd)
}

::google::protobuf::uint8* ResetPvpMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ResetPvpMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_RESET_PVP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ResetPvpMatchSCmd)
  return target;
}

int ResetPvpMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_RESET_PVP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPvpMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetPvpMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetPvpMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetPvpMatchSCmd::MergeFrom(const ResetPvpMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetPvpMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPvpMatchSCmd::CopyFrom(const ResetPvpMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPvpMatchSCmd::IsInitialized() const {

  return true;
}

void ResetPvpMatchSCmd::Swap(ResetPvpMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetPvpMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetPvpMatchSCmd_descriptor_;
  metadata.reflection = ResetPvpMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwitchPvpMathcSCmd::kCmdFieldNumber;
const int SwitchPvpMathcSCmd::kParamFieldNumber;
const int SwitchPvpMathcSCmd::kOpenFieldNumber;
const int SwitchPvpMathcSCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

SwitchPvpMathcSCmd::SwitchPvpMathcSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SwitchPvpMathcSCmd)
}

void SwitchPvpMathcSCmd::InitAsDefaultInstance() {
}

SwitchPvpMathcSCmd::SwitchPvpMathcSCmd(const SwitchPvpMathcSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SwitchPvpMathcSCmd)
}

void SwitchPvpMathcSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 28;
  open_ = false;
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchPvpMathcSCmd::~SwitchPvpMathcSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SwitchPvpMathcSCmd)
  SharedDtor();
}

void SwitchPvpMathcSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwitchPvpMathcSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchPvpMathcSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchPvpMathcSCmd_descriptor_;
}

const SwitchPvpMathcSCmd& SwitchPvpMathcSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SwitchPvpMathcSCmd* SwitchPvpMathcSCmd::default_instance_ = NULL;

SwitchPvpMathcSCmd* SwitchPvpMathcSCmd::New() const {
  return new SwitchPvpMathcSCmd;
}

void SwitchPvpMathcSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SwitchPvpMathcSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(open_, etype_);
    cmd_ = 212;
    param_ = 28;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchPvpMathcSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SwitchPvpMathcSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SWITCH_PVP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // required .Cmd.EPvpType etype = 4;
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SwitchPvpMathcSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SwitchPvpMathcSCmd)
  return false;
#undef DO_
}

void SwitchPvpMathcSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SwitchPvpMathcSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SWITCH_PVP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  // required .Cmd.EPvpType etype = 4;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SwitchPvpMathcSCmd)
}

::google::protobuf::uint8* SwitchPvpMathcSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SwitchPvpMathcSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SWITCH_PVP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  // required .Cmd.EPvpType etype = 4;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SwitchPvpMathcSCmd)
  return target;
}

int SwitchPvpMathcSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SWITCH_PVP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

    // required .Cmd.EPvpType etype = 4;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchPvpMathcSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchPvpMathcSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchPvpMathcSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchPvpMathcSCmd::MergeFrom(const SwitchPvpMathcSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchPvpMathcSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchPvpMathcSCmd::CopyFrom(const SwitchPvpMathcSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPvpMathcSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void SwitchPvpMathcSCmd::Swap(SwitchPvpMathcSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchPvpMathcSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchPvpMathcSCmd_descriptor_;
  metadata.reflection = SwitchPvpMathcSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityMatchSCmd::kCmdFieldNumber;
const int ActivityMatchSCmd::kParamFieldNumber;
const int ActivityMatchSCmd::kOpenFieldNumber;
const int ActivityMatchSCmd::kEtypeFieldNumber;
const int ActivityMatchSCmd::kServerRestartFieldNumber;
#endif  // !_MSC_VER

ActivityMatchSCmd::ActivityMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityMatchSCmd)
}

void ActivityMatchSCmd::InitAsDefaultInstance() {
}

ActivityMatchSCmd::ActivityMatchSCmd(const ActivityMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityMatchSCmd)
}

void ActivityMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 29;
  open_ = false;
  etype_ = 4;
  server_restart_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityMatchSCmd::~ActivityMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityMatchSCmd)
  SharedDtor();
}

void ActivityMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMatchSCmd_descriptor_;
}

const ActivityMatchSCmd& ActivityMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

ActivityMatchSCmd* ActivityMatchSCmd::default_instance_ = NULL;

ActivityMatchSCmd* ActivityMatchSCmd::New() const {
  return new ActivityMatchSCmd;
}

void ActivityMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(open_, server_restart_);
    cmd_ = 212;
    param_ = 29;
    etype_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_POLLY_ACTIVITY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3;
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_POLLY];
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_server_restart;
        break;
      }

      // optional bool server_restart = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_server_restart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_restart_)));
          set_has_server_restart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityMatchSCmd)
  return false;
#undef DO_
}

void ActivityMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_POLLY_ACTIVITY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_POLLY];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  // optional bool server_restart = 5 [default = false];
  if (has_server_restart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->server_restart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityMatchSCmd)
}

::google::protobuf::uint8* ActivityMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_POLLY_ACTIVITY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_POLLY];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  // optional bool server_restart = 5 [default = false];
  if (has_server_restart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->server_restart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityMatchSCmd)
  return target;
}

int ActivityMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_POLLY_ACTIVITY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_POLLY];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional bool server_restart = 5 [default = false];
    if (has_server_restart()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityMatchSCmd::MergeFrom(const ActivityMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_server_restart()) {
      set_server_restart(from.server_restart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMatchSCmd::CopyFrom(const ActivityMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityMatchSCmd::IsInitialized() const {

  return true;
}

void ActivityMatchSCmd::Swap(ActivityMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(etype_, other->etype_);
    std::swap(server_restart_, other->server_restart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMatchSCmd_descriptor_;
  metadata.reflection = ActivityMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckCanBuyMatchSCmd::kCmdFieldNumber;
const int CheckCanBuyMatchSCmd::kParamFieldNumber;
const int CheckCanBuyMatchSCmd::kIdFieldNumber;
const int CheckCanBuyMatchSCmd::kCountFieldNumber;
const int CheckCanBuyMatchSCmd::kPriceFieldNumber;
const int CheckCanBuyMatchSCmd::kPrice2FieldNumber;
const int CheckCanBuyMatchSCmd::kSuccessFieldNumber;
const int CheckCanBuyMatchSCmd::kCharidFieldNumber;
const int CheckCanBuyMatchSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

CheckCanBuyMatchSCmd::CheckCanBuyMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheckCanBuyMatchSCmd)
}

void CheckCanBuyMatchSCmd::InitAsDefaultInstance() {
}

CheckCanBuyMatchSCmd::CheckCanBuyMatchSCmd(const CheckCanBuyMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheckCanBuyMatchSCmd)
}

void CheckCanBuyMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 30;
  id_ = 0u;
  count_ = 0u;
  price_ = 0u;
  price2_ = 0u;
  success_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckCanBuyMatchSCmd::~CheckCanBuyMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheckCanBuyMatchSCmd)
  SharedDtor();
}

void CheckCanBuyMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckCanBuyMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckCanBuyMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckCanBuyMatchSCmd_descriptor_;
}

const CheckCanBuyMatchSCmd& CheckCanBuyMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

CheckCanBuyMatchSCmd* CheckCanBuyMatchSCmd::default_instance_ = NULL;

CheckCanBuyMatchSCmd* CheckCanBuyMatchSCmd::New() const {
  return new CheckCanBuyMatchSCmd;
}

void CheckCanBuyMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckCanBuyMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, success_);
    cmd_ = 212;
    param_ = 30;
  }
  zoneid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckCanBuyMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheckCanBuyMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CHECK_CAN_BUY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional uint32 price = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_price2;
        break;
      }

      // optional uint32 price2 = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_success;
        break;
      }

      // optional bool success = 7;
      case 7: {
        if (tag == 56) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 8;
      case 8: {
        if (tag == 64) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 9;
      case 9: {
        if (tag == 72) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheckCanBuyMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheckCanBuyMatchSCmd)
  return false;
#undef DO_
}

void CheckCanBuyMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheckCanBuyMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CHECK_CAN_BUY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint32 price = 5 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->price(), output);
  }

  // optional uint32 price2 = 6 [default = 0];
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price2(), output);
  }

  // optional bool success = 7;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->success(), output);
  }

  // optional uint64 charid = 8;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->charid(), output);
  }

  // optional uint32 zoneid = 9;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheckCanBuyMatchSCmd)
}

::google::protobuf::uint8* CheckCanBuyMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheckCanBuyMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CHECK_CAN_BUY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 count = 4 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint32 price = 5 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->price(), target);
  }

  // optional uint32 price2 = 6 [default = 0];
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->price2(), target);
  }

  // optional bool success = 7;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->success(), target);
  }

  // optional uint64 charid = 8;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->charid(), target);
  }

  // optional uint32 zoneid = 9;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheckCanBuyMatchSCmd)
  return target;
}

int CheckCanBuyMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CHECK_CAN_BUY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 4 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 price = 5 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 price2 = 6 [default = 0];
    if (has_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price2());
    }

    // optional bool success = 7;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 charid = 8;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 zoneid = 9;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckCanBuyMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckCanBuyMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckCanBuyMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckCanBuyMatchSCmd::MergeFrom(const CheckCanBuyMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckCanBuyMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCanBuyMatchSCmd::CopyFrom(const CheckCanBuyMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCanBuyMatchSCmd::IsInitialized() const {

  return true;
}

void CheckCanBuyMatchSCmd::Swap(CheckCanBuyMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(price_, other->price_);
    std::swap(price2_, other->price2_);
    std::swap(success_, other->success_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckCanBuyMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckCanBuyMatchSCmd_descriptor_;
  metadata.reflection = CheckCanBuyMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBuyCntMatchSCmd::kCmdFieldNumber;
const int AddBuyCntMatchSCmd::kParamFieldNumber;
const int AddBuyCntMatchSCmd::kIdFieldNumber;
const int AddBuyCntMatchSCmd::kCountFieldNumber;
const int AddBuyCntMatchSCmd::kCharidFieldNumber;
const int AddBuyCntMatchSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

AddBuyCntMatchSCmd::AddBuyCntMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddBuyCntMatchSCmd)
}

void AddBuyCntMatchSCmd::InitAsDefaultInstance() {
}

AddBuyCntMatchSCmd::AddBuyCntMatchSCmd(const AddBuyCntMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddBuyCntMatchSCmd)
}

void AddBuyCntMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 31;
  id_ = 0u;
  count_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBuyCntMatchSCmd::~AddBuyCntMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddBuyCntMatchSCmd)
  SharedDtor();
}

void AddBuyCntMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddBuyCntMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBuyCntMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBuyCntMatchSCmd_descriptor_;
}

const AddBuyCntMatchSCmd& AddBuyCntMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

AddBuyCntMatchSCmd* AddBuyCntMatchSCmd::default_instance_ = NULL;

AddBuyCntMatchSCmd* AddBuyCntMatchSCmd::New() const {
  return new AddBuyCntMatchSCmd;
}

void AddBuyCntMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddBuyCntMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, zoneid_);
    cmd_ = 212;
    param_ = 31;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBuyCntMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddBuyCntMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ADD_BUY_CNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 6;
      case 6: {
        if (tag == 48) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddBuyCntMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddBuyCntMatchSCmd)
  return false;
#undef DO_
}

void AddBuyCntMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddBuyCntMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ADD_BUY_CNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint32 zoneid = 6;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddBuyCntMatchSCmd)
}

::google::protobuf::uint8* AddBuyCntMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddBuyCntMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ADD_BUY_CNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint32 zoneid = 6;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddBuyCntMatchSCmd)
  return target;
}

int AddBuyCntMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_ADD_BUY_CNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 6;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBuyCntMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBuyCntMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBuyCntMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBuyCntMatchSCmd::MergeFrom(const AddBuyCntMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBuyCntMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBuyCntMatchSCmd::CopyFrom(const AddBuyCntMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBuyCntMatchSCmd::IsInitialized() const {

  return true;
}

void AddBuyCntMatchSCmd::Swap(AddBuyCntMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBuyCntMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBuyCntMatchSCmd_descriptor_;
  metadata.reflection = AddBuyCntMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySoldCntMatchSCmd::kCmdFieldNumber;
const int QuerySoldCntMatchSCmd::kParamFieldNumber;
const int QuerySoldCntMatchSCmd::kCharidFieldNumber;
const int QuerySoldCntMatchSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

QuerySoldCntMatchSCmd::QuerySoldCntMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuerySoldCntMatchSCmd)
}

void QuerySoldCntMatchSCmd::InitAsDefaultInstance() {
}

QuerySoldCntMatchSCmd::QuerySoldCntMatchSCmd(const QuerySoldCntMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuerySoldCntMatchSCmd)
}

void QuerySoldCntMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 32;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySoldCntMatchSCmd::~QuerySoldCntMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuerySoldCntMatchSCmd)
  SharedDtor();
}

void QuerySoldCntMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuerySoldCntMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySoldCntMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySoldCntMatchSCmd_descriptor_;
}

const QuerySoldCntMatchSCmd& QuerySoldCntMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

QuerySoldCntMatchSCmd* QuerySoldCntMatchSCmd::default_instance_ = NULL;

QuerySoldCntMatchSCmd* QuerySoldCntMatchSCmd::New() const {
  return new QuerySoldCntMatchSCmd;
}

void QuerySoldCntMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuerySoldCntMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, zoneid_);
    cmd_ = 212;
    param_ = 32;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySoldCntMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuerySoldCntMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_QUERY_SOLD_CNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuerySoldCntMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuerySoldCntMatchSCmd)
  return false;
#undef DO_
}

void QuerySoldCntMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuerySoldCntMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_QUERY_SOLD_CNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuerySoldCntMatchSCmd)
}

::google::protobuf::uint8* QuerySoldCntMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuerySoldCntMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_QUERY_SOLD_CNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuerySoldCntMatchSCmd)
  return target;
}

int QuerySoldCntMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_QUERY_SOLD_CNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySoldCntMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySoldCntMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySoldCntMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySoldCntMatchSCmd::MergeFrom(const QuerySoldCntMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySoldCntMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySoldCntMatchSCmd::CopyFrom(const QuerySoldCntMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySoldCntMatchSCmd::IsInitialized() const {

  return true;
}

void QuerySoldCntMatchSCmd::Swap(QuerySoldCntMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySoldCntMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySoldCntMatchSCmd_descriptor_;
  metadata.reflection = QuerySoldCntMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinSuperGvgMatchSCmd::kCmdFieldNumber;
const int JoinSuperGvgMatchSCmd::kParamFieldNumber;
const int JoinSuperGvgMatchSCmd::kGuildidFieldNumber;
const int JoinSuperGvgMatchSCmd::kZoneidFieldNumber;
const int JoinSuperGvgMatchSCmd::kGuildnameFieldNumber;
const int JoinSuperGvgMatchSCmd::kGuildiconFieldNumber;
const int JoinSuperGvgMatchSCmd::kFirecountFieldNumber;
const int JoinSuperGvgMatchSCmd::kFirescoreFieldNumber;
const int JoinSuperGvgMatchSCmd::kBegintimeFieldNumber;
#endif  // !_MSC_VER

JoinSuperGvgMatchSCmd::JoinSuperGvgMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinSuperGvgMatchSCmd)
}

void JoinSuperGvgMatchSCmd::InitAsDefaultInstance() {
}

JoinSuperGvgMatchSCmd::JoinSuperGvgMatchSCmd(const JoinSuperGvgMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinSuperGvgMatchSCmd)
}

void JoinSuperGvgMatchSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 34;
  guildid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firecount_ = 0u;
  firescore_ = 0u;
  begintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinSuperGvgMatchSCmd::~JoinSuperGvgMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JoinSuperGvgMatchSCmd)
  SharedDtor();
}

void JoinSuperGvgMatchSCmd::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildicon_;
  }
  if (this != default_instance_) {
  }
}

void JoinSuperGvgMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinSuperGvgMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinSuperGvgMatchSCmd_descriptor_;
}

const JoinSuperGvgMatchSCmd& JoinSuperGvgMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

JoinSuperGvgMatchSCmd* JoinSuperGvgMatchSCmd::default_instance_ = NULL;

JoinSuperGvgMatchSCmd* JoinSuperGvgMatchSCmd::New() const {
  return new JoinSuperGvgMatchSCmd;
}

void JoinSuperGvgMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinSuperGvgMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zoneid_, firecount_);
    cmd_ = 212;
    param_ = 34;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_guildicon()) {
      if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildicon_->clear();
      }
    }
    firescore_ = 0u;
  }
  begintime_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinSuperGvgMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinSuperGvgMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_JOIN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 3;
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guildname;
        break;
      }

      // optional string guildname = 5;
      case 5: {
        if (tag == 42) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_guildicon;
        break;
      }

      // optional string guildicon = 6;
      case 6: {
        if (tag == 50) {
         parse_guildicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildicon().data(), this->guildicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildicon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_firecount;
        break;
      }

      // optional uint32 firecount = 7;
      case 7: {
        if (tag == 56) {
         parse_firecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firecount_)));
          set_has_firecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_firescore;
        break;
      }

      // optional uint32 firescore = 8;
      case 8: {
        if (tag == 64) {
         parse_firescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firescore_)));
          set_has_firescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_begintime;
        break;
      }

      // optional uint32 begintime = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinSuperGvgMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinSuperGvgMatchSCmd)
  return false;
#undef DO_
}

void JoinSuperGvgMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinSuperGvgMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_JOIN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guildname(), output);
  }

  // optional string guildicon = 6;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildicon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guildicon(), output);
  }

  // optional uint32 firecount = 7;
  if (has_firecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->firecount(), output);
  }

  // optional uint32 firescore = 8;
  if (has_firescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->firescore(), output);
  }

  // optional uint32 begintime = 9 [default = 0];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinSuperGvgMatchSCmd)
}

::google::protobuf::uint8* JoinSuperGvgMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinSuperGvgMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_JOIN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildname(), target);
  }

  // optional string guildicon = 6;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildicon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildicon(), target);
  }

  // optional uint32 firecount = 7;
  if (has_firecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->firecount(), target);
  }

  // optional uint32 firescore = 8;
  if (has_firescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->firescore(), target);
  }

  // optional uint32 begintime = 9 [default = 0];
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinSuperGvgMatchSCmd)
  return target;
}

int JoinSuperGvgMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_JOIN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string guildname = 5;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string guildicon = 6;
    if (has_guildicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildicon());
    }

    // optional uint32 firecount = 7;
    if (has_firecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firecount());
    }

    // optional uint32 firescore = 8;
    if (has_firescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firescore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 begintime = 9 [default = 0];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinSuperGvgMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinSuperGvgMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinSuperGvgMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinSuperGvgMatchSCmd::MergeFrom(const JoinSuperGvgMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildicon()) {
      set_guildicon(from.guildicon());
    }
    if (from.has_firecount()) {
      set_firecount(from.firecount());
    }
    if (from.has_firescore()) {
      set_firescore(from.firescore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinSuperGvgMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinSuperGvgMatchSCmd::CopyFrom(const JoinSuperGvgMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSuperGvgMatchSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void JoinSuperGvgMatchSCmd::Swap(JoinSuperGvgMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildicon_, other->guildicon_);
    std::swap(firecount_, other->firecount_);
    std::swap(firescore_, other->firescore_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinSuperGvgMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinSuperGvgMatchSCmd_descriptor_;
  metadata.reflection = JoinSuperGvgMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgRetMatchSCmd::kCmdFieldNumber;
const int SuperGvgRetMatchSCmd::kParamFieldNumber;
const int SuperGvgRetMatchSCmd::kRetFieldNumber;
const int SuperGvgRetMatchSCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

SuperGvgRetMatchSCmd::SuperGvgRetMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgRetMatchSCmd)
}

void SuperGvgRetMatchSCmd::InitAsDefaultInstance() {
}

SuperGvgRetMatchSCmd::SuperGvgRetMatchSCmd(const SuperGvgRetMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgRetMatchSCmd)
}

void SuperGvgRetMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 35;
  ret_ = false;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgRetMatchSCmd::~SuperGvgRetMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgRetMatchSCmd)
  SharedDtor();
}

void SuperGvgRetMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperGvgRetMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgRetMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgRetMatchSCmd_descriptor_;
}

const SuperGvgRetMatchSCmd& SuperGvgRetMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SuperGvgRetMatchSCmd* SuperGvgRetMatchSCmd::default_instance_ = NULL;

SuperGvgRetMatchSCmd* SuperGvgRetMatchSCmd::New() const {
  return new SuperGvgRetMatchSCmd;
}

void SuperGvgRetMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuperGvgRetMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(guildid_, ret_);
    cmd_ = 212;
    param_ = 35;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgRetMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgRetMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_RET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional bool ret = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgRetMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgRetMatchSCmd)
  return false;
#undef DO_
}

void SuperGvgRetMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgRetMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_RET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool ret = 3 [default = false];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ret(), output);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgRetMatchSCmd)
}

::google::protobuf::uint8* SuperGvgRetMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgRetMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_RET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool ret = 3 [default = false];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ret(), target);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgRetMatchSCmd)
  return target;
}

int SuperGvgRetMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SUPERGVG_RET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool ret = 3 [default = false];
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional uint64 guildid = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgRetMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgRetMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgRetMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgRetMatchSCmd::MergeFrom(const SuperGvgRetMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgRetMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgRetMatchSCmd::CopyFrom(const SuperGvgRetMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgRetMatchSCmd::IsInitialized() const {

  return true;
}

void SuperGvgRetMatchSCmd::Swap(SuperGvgRetMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ret_, other->ret_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgRetMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgRetMatchSCmd_descriptor_;
  metadata.reflection = SuperGvgRetMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearMvpCDMatchSCmd::kCmdFieldNumber;
const int ClearMvpCDMatchSCmd::kParamFieldNumber;
const int ClearMvpCDMatchSCmd::kRoomidFieldNumber;
const int ClearMvpCDMatchSCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

ClearMvpCDMatchSCmd::ClearMvpCDMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ClearMvpCDMatchSCmd)
}

void ClearMvpCDMatchSCmd::InitAsDefaultInstance() {
}

ClearMvpCDMatchSCmd::ClearMvpCDMatchSCmd(const ClearMvpCDMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ClearMvpCDMatchSCmd)
}

void ClearMvpCDMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 36;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearMvpCDMatchSCmd::~ClearMvpCDMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ClearMvpCDMatchSCmd)
  SharedDtor();
}

void ClearMvpCDMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearMvpCDMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearMvpCDMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearMvpCDMatchSCmd_descriptor_;
}

const ClearMvpCDMatchSCmd& ClearMvpCDMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

ClearMvpCDMatchSCmd* ClearMvpCDMatchSCmd::default_instance_ = NULL;

ClearMvpCDMatchSCmd* ClearMvpCDMatchSCmd::New() const {
  return new ClearMvpCDMatchSCmd;
}

void ClearMvpCDMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClearMvpCDMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, teamid_);
    cmd_ = 212;
    param_ = 36;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearMvpCDMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ClearMvpCDMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CLEAR_MVPCD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 3;
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // required uint64 teamid = 4;
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ClearMvpCDMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ClearMvpCDMatchSCmd)
  return false;
#undef DO_
}

void ClearMvpCDMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ClearMvpCDMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CLEAR_MVPCD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // required uint64 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ClearMvpCDMatchSCmd)
}

::google::protobuf::uint8* ClearMvpCDMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ClearMvpCDMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CLEAR_MVPCD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // required uint64 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ClearMvpCDMatchSCmd)
  return target;
}

int ClearMvpCDMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CLEAR_MVPCD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearMvpCDMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearMvpCDMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearMvpCDMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearMvpCDMatchSCmd::MergeFrom(const ClearMvpCDMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearMvpCDMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearMvpCDMatchSCmd::CopyFrom(const ClearMvpCDMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearMvpCDMatchSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void ClearMvpCDMatchSCmd::Swap(ClearMvpCDMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearMvpCDMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearMvpCDMatchSCmd_descriptor_;
  metadata.reflection = ClearMvpCDMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorOptMatchSCmd::kCmdFieldNumber;
const int TutorOptMatchSCmd::kParamFieldNumber;
const int TutorOptMatchSCmd::kTutoridFieldNumber;
const int TutorOptMatchSCmd::kStudentidFieldNumber;
const int TutorOptMatchSCmd::kOptFieldNumber;
const int TutorOptMatchSCmd::kRetFieldNumber;
const int TutorOptMatchSCmd::kResultFieldNumber;
#endif  // !_MSC_VER

TutorOptMatchSCmd::TutorOptMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorOptMatchSCmd)
}

void TutorOptMatchSCmd::InitAsDefaultInstance() {
}

TutorOptMatchSCmd::TutorOptMatchSCmd(const TutorOptMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorOptMatchSCmd)
}

void TutorOptMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 37;
  tutorid_ = GOOGLE_ULONGLONG(0);
  studentid_ = GOOGLE_ULONGLONG(0);
  opt_ = 1;
  ret_ = false;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorOptMatchSCmd::~TutorOptMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TutorOptMatchSCmd)
  SharedDtor();
}

void TutorOptMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorOptMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorOptMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorOptMatchSCmd_descriptor_;
}

const TutorOptMatchSCmd& TutorOptMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

TutorOptMatchSCmd* TutorOptMatchSCmd::default_instance_ = NULL;

TutorOptMatchSCmd* TutorOptMatchSCmd::New() const {
  return new TutorOptMatchSCmd;
}

void TutorOptMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TutorOptMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(tutorid_, studentid_);
    ZR_(ret_, result_);
    cmd_ = 212;
    param_ = 37;
    opt_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorOptMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorOptMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_OPT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tutorid;
        break;
      }

      // optional uint64 tutorid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_tutorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tutorid_)));
          set_has_tutorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_studentid;
        break;
      }

      // optional uint64 studentid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_studentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &studentid_)));
          set_has_studentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_opt;
        break;
      }

      // optional .Cmd.ETutorOpt opt = 5 [default = ETUTOROPT_APPLY];
      case 5: {
        if (tag == 40) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETutorOpt_IsValid(value)) {
            set_opt(static_cast< ::Cmd::ETutorOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ret;
        break;
      }

      // optional bool ret = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // optional bool result = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorOptMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorOptMatchSCmd)
  return false;
#undef DO_
}

void TutorOptMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorOptMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_OPT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 tutorid = 3 [default = 0];
  if (has_tutorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tutorid(), output);
  }

  // optional uint64 studentid = 4 [default = 0];
  if (has_studentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->studentid(), output);
  }

  // optional .Cmd.ETutorOpt opt = 5 [default = ETUTOROPT_APPLY];
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->opt(), output);
  }

  // optional bool ret = 6 [default = false];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ret(), output);
  }

  // optional bool result = 7 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorOptMatchSCmd)
}

::google::protobuf::uint8* TutorOptMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorOptMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_OPT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 tutorid = 3 [default = 0];
  if (has_tutorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tutorid(), target);
  }

  // optional uint64 studentid = 4 [default = 0];
  if (has_studentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->studentid(), target);
  }

  // optional .Cmd.ETutorOpt opt = 5 [default = ETUTOROPT_APPLY];
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->opt(), target);
  }

  // optional bool ret = 6 [default = false];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ret(), target);
  }

  // optional bool result = 7 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorOptMatchSCmd)
  return target;
}

int TutorOptMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_OPT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 tutorid = 3 [default = 0];
    if (has_tutorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tutorid());
    }

    // optional uint64 studentid = 4 [default = 0];
    if (has_studentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->studentid());
    }

    // optional .Cmd.ETutorOpt opt = 5 [default = ETUTOROPT_APPLY];
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

    // optional bool ret = 6 [default = false];
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional bool result = 7 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorOptMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorOptMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorOptMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorOptMatchSCmd::MergeFrom(const TutorOptMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_tutorid()) {
      set_tutorid(from.tutorid());
    }
    if (from.has_studentid()) {
      set_studentid(from.studentid());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorOptMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorOptMatchSCmd::CopyFrom(const TutorOptMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorOptMatchSCmd::IsInitialized() const {

  return true;
}

void TutorOptMatchSCmd::Swap(TutorOptMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(tutorid_, other->tutorid_);
    std::swap(studentid_, other->studentid_);
    std::swap(opt_, other->opt_);
    std::swap(ret_, other->ret_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorOptMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorOptMatchSCmd_descriptor_;
  metadata.reflection = TutorOptMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TutorBlackUpdateMatchSCmd::kCmdFieldNumber;
const int TutorBlackUpdateMatchSCmd::kParamFieldNumber;
const int TutorBlackUpdateMatchSCmd::kCharidFieldNumber;
const int TutorBlackUpdateMatchSCmd::kBlackidsFieldNumber;
#endif  // !_MSC_VER

TutorBlackUpdateMatchSCmd::TutorBlackUpdateMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TutorBlackUpdateMatchSCmd)
}

void TutorBlackUpdateMatchSCmd::InitAsDefaultInstance() {
}

TutorBlackUpdateMatchSCmd::TutorBlackUpdateMatchSCmd(const TutorBlackUpdateMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TutorBlackUpdateMatchSCmd)
}

void TutorBlackUpdateMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 40;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TutorBlackUpdateMatchSCmd::~TutorBlackUpdateMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TutorBlackUpdateMatchSCmd)
  SharedDtor();
}

void TutorBlackUpdateMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TutorBlackUpdateMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TutorBlackUpdateMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TutorBlackUpdateMatchSCmd_descriptor_;
}

const TutorBlackUpdateMatchSCmd& TutorBlackUpdateMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

TutorBlackUpdateMatchSCmd* TutorBlackUpdateMatchSCmd::default_instance_ = NULL;

TutorBlackUpdateMatchSCmd* TutorBlackUpdateMatchSCmd::New() const {
  return new TutorBlackUpdateMatchSCmd;
}

void TutorBlackUpdateMatchSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 212;
    param_ = 40;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  blackids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TutorBlackUpdateMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TutorBlackUpdateMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_BLACK_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blackids;
        break;
      }

      // repeated uint64 blackids = 4;
      case 4: {
        if (tag == 32) {
         parse_blackids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_blackids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_blackids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blackids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TutorBlackUpdateMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TutorBlackUpdateMatchSCmd)
  return false;
#undef DO_
}

void TutorBlackUpdateMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TutorBlackUpdateMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_BLACK_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated uint64 blackids = 4;
  for (int i = 0; i < this->blackids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->blackids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TutorBlackUpdateMatchSCmd)
}

::google::protobuf::uint8* TutorBlackUpdateMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TutorBlackUpdateMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_BLACK_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated uint64 blackids = 4;
  for (int i = 0; i < this->blackids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->blackids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TutorBlackUpdateMatchSCmd)
  return target;
}

int TutorBlackUpdateMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_TUTOR_BLACK_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated uint64 blackids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->blackids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->blackids(i));
    }
    total_size += 1 * this->blackids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TutorBlackUpdateMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TutorBlackUpdateMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TutorBlackUpdateMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TutorBlackUpdateMatchSCmd::MergeFrom(const TutorBlackUpdateMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  blackids_.MergeFrom(from.blackids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TutorBlackUpdateMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TutorBlackUpdateMatchSCmd::CopyFrom(const TutorBlackUpdateMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TutorBlackUpdateMatchSCmd::IsInitialized() const {

  return true;
}

void TutorBlackUpdateMatchSCmd::Swap(TutorBlackUpdateMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    blackids_.Swap(&other->blackids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TutorBlackUpdateMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TutorBlackUpdateMatchSCmd_descriptor_;
  metadata.reflection = TutorBlackUpdateMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBoothReqMatchSCmd::kCmdFieldNumber;
const int UserBoothReqMatchSCmd::kParamFieldNumber;
const int UserBoothReqMatchSCmd::kZoneidFieldNumber;
const int UserBoothReqMatchSCmd::kSceneidFieldNumber;
const int UserBoothReqMatchSCmd::kUserFieldNumber;
const int UserBoothReqMatchSCmd::kOperFieldNumber;
#endif  // !_MSC_VER

UserBoothReqMatchSCmd::UserBoothReqMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserBoothReqMatchSCmd)
}

void UserBoothReqMatchSCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::MapUser*>(&::Cmd::MapUser::default_instance());
}

UserBoothReqMatchSCmd::UserBoothReqMatchSCmd(const UserBoothReqMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserBoothReqMatchSCmd)
}

void UserBoothReqMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 38;
  zoneid_ = 0u;
  sceneid_ = 0u;
  user_ = NULL;
  oper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBoothReqMatchSCmd::~UserBoothReqMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserBoothReqMatchSCmd)
  SharedDtor();
}

void UserBoothReqMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void UserBoothReqMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBoothReqMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBoothReqMatchSCmd_descriptor_;
}

const UserBoothReqMatchSCmd& UserBoothReqMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

UserBoothReqMatchSCmd* UserBoothReqMatchSCmd::default_instance_ = NULL;

UserBoothReqMatchSCmd* UserBoothReqMatchSCmd::New() const {
  return new UserBoothReqMatchSCmd;
}

void UserBoothReqMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserBoothReqMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(zoneid_, sceneid_);
    cmd_ = 212;
    param_ = 38;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::MapUser::Clear();
    }
    oper_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBoothReqMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserBoothReqMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_REQ];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4;
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .Cmd.MapUser user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_oper;
        break;
      }

      // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
      case 6: {
        if (tag == 48) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBoothOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EBoothOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserBoothReqMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserBoothReqMatchSCmd)
  return false;
#undef DO_
}

void UserBoothReqMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserBoothReqMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_REQ];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional .Cmd.MapUser user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user(), output);
  }

  // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserBoothReqMatchSCmd)
}

::google::protobuf::uint8* UserBoothReqMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserBoothReqMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_REQ];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional .Cmd.MapUser user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(), target);
  }

  // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserBoothReqMatchSCmd)
  return target;
}

int UserBoothReqMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_REQ];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sceneid = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional .Cmd.MapUser user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBoothReqMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBoothReqMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBoothReqMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBoothReqMatchSCmd::MergeFrom(const UserBoothReqMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::MapUser::MergeFrom(from.user());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBoothReqMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBoothReqMatchSCmd::CopyFrom(const UserBoothReqMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBoothReqMatchSCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void UserBoothReqMatchSCmd::Swap(UserBoothReqMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(user_, other->user_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBoothReqMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBoothReqMatchSCmd_descriptor_;
  metadata.reflection = UserBoothReqMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBoothNTFMatchSCmd::kCmdFieldNumber;
const int UserBoothNTFMatchSCmd::kParamFieldNumber;
const int UserBoothNTFMatchSCmd::kZoneidFieldNumber;
const int UserBoothNTFMatchSCmd::kSceneidFieldNumber;
const int UserBoothNTFMatchSCmd::kUserFieldNumber;
const int UserBoothNTFMatchSCmd::kOperFieldNumber;
#endif  // !_MSC_VER

UserBoothNTFMatchSCmd::UserBoothNTFMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserBoothNTFMatchSCmd)
}

void UserBoothNTFMatchSCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::MapUser*>(&::Cmd::MapUser::default_instance());
}

UserBoothNTFMatchSCmd::UserBoothNTFMatchSCmd(const UserBoothNTFMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserBoothNTFMatchSCmd)
}

void UserBoothNTFMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 39;
  zoneid_ = 0u;
  sceneid_ = 0u;
  user_ = NULL;
  oper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBoothNTFMatchSCmd::~UserBoothNTFMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserBoothNTFMatchSCmd)
  SharedDtor();
}

void UserBoothNTFMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void UserBoothNTFMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBoothNTFMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBoothNTFMatchSCmd_descriptor_;
}

const UserBoothNTFMatchSCmd& UserBoothNTFMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

UserBoothNTFMatchSCmd* UserBoothNTFMatchSCmd::default_instance_ = NULL;

UserBoothNTFMatchSCmd* UserBoothNTFMatchSCmd::New() const {
  return new UserBoothNTFMatchSCmd;
}

void UserBoothNTFMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserBoothNTFMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(zoneid_, sceneid_);
    cmd_ = 212;
    param_ = 39;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::MapUser::Clear();
    }
    oper_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBoothNTFMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserBoothNTFMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4;
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .Cmd.MapUser user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_oper;
        break;
      }

      // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
      case 6: {
        if (tag == 48) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBoothOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EBoothOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserBoothNTFMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserBoothNTFMatchSCmd)
  return false;
#undef DO_
}

void UserBoothNTFMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserBoothNTFMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional .Cmd.MapUser user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user(), output);
  }

  // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserBoothNTFMatchSCmd)
}

::google::protobuf::uint8* UserBoothNTFMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserBoothNTFMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional .Cmd.MapUser user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(), target);
  }

  // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserBoothNTFMatchSCmd)
  return target;
}

int UserBoothNTFMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_BOOTH_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sceneid = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional .Cmd.MapUser user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.EBoothOper oper = 6 [default = EBOOTHOPER_OPEN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBoothNTFMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBoothNTFMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBoothNTFMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBoothNTFMatchSCmd::MergeFrom(const UserBoothNTFMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::MapUser::MergeFrom(from.user());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBoothNTFMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBoothNTFMatchSCmd::CopyFrom(const UserBoothNTFMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBoothNTFMatchSCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void UserBoothNTFMatchSCmd::Swap(UserBoothNTFMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(user_, other->user_);
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBoothNTFMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBoothNTFMatchSCmd_descriptor_;
  metadata.reflection = UserBoothNTFMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinTeamPwsMatchSCmd::kCmdFieldNumber;
const int JoinTeamPwsMatchSCmd::kParamFieldNumber;
const int JoinTeamPwsMatchSCmd::kTeamidFieldNumber;
const int JoinTeamPwsMatchSCmd::kZoneidFieldNumber;
const int JoinTeamPwsMatchSCmd::kLeaderidFieldNumber;
const int JoinTeamPwsMatchSCmd::kMembersFieldNumber;
const int JoinTeamPwsMatchSCmd::kAvescoreFieldNumber;
const int JoinTeamPwsMatchSCmd::kEtypeFieldNumber;
const int JoinTeamPwsMatchSCmd::kRoomidFieldNumber;
#endif  // !_MSC_VER

JoinTeamPwsMatchSCmd::JoinTeamPwsMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinTeamPwsMatchSCmd)
}

void JoinTeamPwsMatchSCmd::InitAsDefaultInstance() {
}

JoinTeamPwsMatchSCmd::JoinTeamPwsMatchSCmd(const JoinTeamPwsMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinTeamPwsMatchSCmd)
}

void JoinTeamPwsMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 41;
  teamid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  leaderid_ = GOOGLE_ULONGLONG(0);
  avescore_ = 0u;
  etype_ = 8;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinTeamPwsMatchSCmd::~JoinTeamPwsMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JoinTeamPwsMatchSCmd)
  SharedDtor();
}

void JoinTeamPwsMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinTeamPwsMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinTeamPwsMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinTeamPwsMatchSCmd_descriptor_;
}

const JoinTeamPwsMatchSCmd& JoinTeamPwsMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

JoinTeamPwsMatchSCmd* JoinTeamPwsMatchSCmd::default_instance_ = NULL;

JoinTeamPwsMatchSCmd* JoinTeamPwsMatchSCmd::New() const {
  return new JoinTeamPwsMatchSCmd;
}

void JoinTeamPwsMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinTeamPwsMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(teamid_, avescore_);
    cmd_ = 212;
    param_ = 41;
    etype_ = 8;
  }
  roomid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinTeamPwsMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinTeamPwsMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_JOIN_TEAMPWS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // required uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leaderid;
        break;
      }

      // required uint64 leaderid = 5;
      case 5: {
        if (tag == 40) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_members;
        break;
      }

      // repeated uint64 members = 6;
      case 6: {
        if (tag == 48) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_members())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_members())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_members;
        if (input->ExpectTag(56)) goto parse_avescore;
        break;
      }

      // optional uint32 avescore = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_avescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avescore_)));
          set_has_avescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 8 [default = EPVPTYPE_TEAMPWS];
      case 8: {
        if (tag == 64) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinTeamPwsMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinTeamPwsMatchSCmd)
  return false;
#undef DO_
}

void JoinTeamPwsMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinTeamPwsMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_JOIN_TEAMPWS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // required uint64 leaderid = 5;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->leaderid(), output);
  }

  // repeated uint64 members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->members(i), output);
  }

  // optional uint32 avescore = 7 [default = 0];
  if (has_avescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->avescore(), output);
  }

  // optional .Cmd.EPvpType etype = 8 [default = EPVPTYPE_TEAMPWS];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->etype(), output);
  }

  // optional uint32 roomid = 9 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinTeamPwsMatchSCmd)
}

::google::protobuf::uint8* JoinTeamPwsMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinTeamPwsMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_JOIN_TEAMPWS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // required uint64 leaderid = 5;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->leaderid(), target);
  }

  // repeated uint64 members = 6;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->members(i), target);
  }

  // optional uint32 avescore = 7 [default = 0];
  if (has_avescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->avescore(), target);
  }

  // optional .Cmd.EPvpType etype = 8 [default = EPVPTYPE_TEAMPWS];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->etype(), target);
  }

  // optional uint32 roomid = 9 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinTeamPwsMatchSCmd)
  return target;
}

int JoinTeamPwsMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_JOIN_TEAMPWS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint64 leaderid = 5;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional uint32 avescore = 7 [default = 0];
    if (has_avescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avescore());
    }

    // optional .Cmd.EPvpType etype = 8 [default = EPVPTYPE_TEAMPWS];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 roomid = 9 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  // repeated uint64 members = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinTeamPwsMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinTeamPwsMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinTeamPwsMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinTeamPwsMatchSCmd::MergeFrom(const JoinTeamPwsMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_avescore()) {
      set_avescore(from.avescore());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinTeamPwsMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTeamPwsMatchSCmd::CopyFrom(const JoinTeamPwsMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTeamPwsMatchSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void JoinTeamPwsMatchSCmd::Swap(JoinTeamPwsMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(leaderid_, other->leaderid_);
    members_.Swap(&other->members_);
    std::swap(avescore_, other->avescore_);
    std::swap(etype_, other->etype_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinTeamPwsMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinTeamPwsMatchSCmd_descriptor_;
  metadata.reflection = JoinTeamPwsMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitTeamPwsMatchSCmd::kCmdFieldNumber;
const int ExitTeamPwsMatchSCmd::kParamFieldNumber;
const int ExitTeamPwsMatchSCmd::kTeamidFieldNumber;
const int ExitTeamPwsMatchSCmd::kZoneidFieldNumber;
const int ExitTeamPwsMatchSCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

ExitTeamPwsMatchSCmd::ExitTeamPwsMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExitTeamPwsMatchSCmd)
}

void ExitTeamPwsMatchSCmd::InitAsDefaultInstance() {
}

ExitTeamPwsMatchSCmd::ExitTeamPwsMatchSCmd(const ExitTeamPwsMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExitTeamPwsMatchSCmd)
}

void ExitTeamPwsMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 42;
  teamid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  etype_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitTeamPwsMatchSCmd::~ExitTeamPwsMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExitTeamPwsMatchSCmd)
  SharedDtor();
}

void ExitTeamPwsMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitTeamPwsMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitTeamPwsMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitTeamPwsMatchSCmd_descriptor_;
}

const ExitTeamPwsMatchSCmd& ExitTeamPwsMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

ExitTeamPwsMatchSCmd* ExitTeamPwsMatchSCmd::default_instance_ = NULL;

ExitTeamPwsMatchSCmd* ExitTeamPwsMatchSCmd::New() const {
  return new ExitTeamPwsMatchSCmd;
}

void ExitTeamPwsMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitTeamPwsMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, zoneid_);
    cmd_ = 212;
    param_ = 42;
    etype_ = 8;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitTeamPwsMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExitTeamPwsMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_TEAMPWS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // required uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 5 [default = EPVPTYPE_TEAMPWS];
      case 5: {
        if (tag == 40) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExitTeamPwsMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExitTeamPwsMatchSCmd)
  return false;
#undef DO_
}

void ExitTeamPwsMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExitTeamPwsMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_TEAMPWS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional .Cmd.EPvpType etype = 5 [default = EPVPTYPE_TEAMPWS];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExitTeamPwsMatchSCmd)
}

::google::protobuf::uint8* ExitTeamPwsMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExitTeamPwsMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_TEAMPWS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional .Cmd.EPvpType etype = 5 [default = EPVPTYPE_TEAMPWS];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExitTeamPwsMatchSCmd)
  return target;
}

int ExitTeamPwsMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_LEAVE_TEAMPWS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional .Cmd.EPvpType etype = 5 [default = EPVPTYPE_TEAMPWS];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitTeamPwsMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitTeamPwsMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitTeamPwsMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitTeamPwsMatchSCmd::MergeFrom(const ExitTeamPwsMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitTeamPwsMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitTeamPwsMatchSCmd::CopyFrom(const ExitTeamPwsMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitTeamPwsMatchSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void ExitTeamPwsMatchSCmd::Swap(ExitTeamPwsMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitTeamPwsMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitTeamPwsMatchSCmd_descriptor_;
  metadata.reflection = ExitTeamPwsMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneGMTestMatchSCmd::kCmdFieldNumber;
const int SceneGMTestMatchSCmd::kParamFieldNumber;
const int SceneGMTestMatchSCmd::kEtypeFieldNumber;
const int SceneGMTestMatchSCmd::kFrequencyFieldNumber;
const int SceneGMTestMatchSCmd::kIntervalFieldNumber;
const int SceneGMTestMatchSCmd::kLasttimeFieldNumber;
const int SceneGMTestMatchSCmd::kParamsFieldNumber;
#endif  // !_MSC_VER

SceneGMTestMatchSCmd::SceneGMTestMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SceneGMTestMatchSCmd)
}

void SceneGMTestMatchSCmd::InitAsDefaultInstance() {
}

SceneGMTestMatchSCmd::SceneGMTestMatchSCmd(const SceneGMTestMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SceneGMTestMatchSCmd)
}

void SceneGMTestMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 43;
  etype_ = 1;
  frequency_ = 0u;
  interval_ = 0u;
  lasttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneGMTestMatchSCmd::~SceneGMTestMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SceneGMTestMatchSCmd)
  SharedDtor();
}

void SceneGMTestMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneGMTestMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGMTestMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneGMTestMatchSCmd_descriptor_;
}

const SceneGMTestMatchSCmd& SceneGMTestMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SceneGMTestMatchSCmd* SceneGMTestMatchSCmd::default_instance_ = NULL;

SceneGMTestMatchSCmd* SceneGMTestMatchSCmd::New() const {
  return new SceneGMTestMatchSCmd;
}

void SceneGMTestMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SceneGMTestMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(frequency_, lasttime_);
    cmd_ = 212;
    param_ = 43;
    etype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneGMTestMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SceneGMTestMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SCENE_GM_TEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // optional .Cmd.ESceneGMMatchType etype = 3;
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESceneGMMatchType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::ESceneGMMatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frequency;
        break;
      }

      // optional uint32 frequency = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_interval;
        break;
      }

      // optional uint32 interval = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lasttime;
        break;
      }

      // optional uint32 lasttime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_params;
        break;
      }

      // repeated uint32 params = 7;
      case 7: {
        if (tag == 56) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_params())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SceneGMTestMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SceneGMTestMatchSCmd)
  return false;
#undef DO_
}

void SceneGMTestMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SceneGMTestMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SCENE_GM_TEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ESceneGMMatchType etype = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // optional uint32 frequency = 4 [default = 0];
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frequency(), output);
  }

  // optional uint32 interval = 5 [default = 0];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->interval(), output);
  }

  // optional uint32 lasttime = 6 [default = 0];
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lasttime(), output);
  }

  // repeated uint32 params = 7;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SceneGMTestMatchSCmd)
}

::google::protobuf::uint8* SceneGMTestMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SceneGMTestMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SCENE_GM_TEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ESceneGMMatchType etype = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // optional uint32 frequency = 4 [default = 0];
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frequency(), target);
  }

  // optional uint32 interval = 5 [default = 0];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->interval(), target);
  }

  // optional uint32 lasttime = 6 [default = 0];
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lasttime(), target);
  }

  // repeated uint32 params = 7;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SceneGMTestMatchSCmd)
  return target;
}

int SceneGMTestMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SCENE_GM_TEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ESceneGMMatchType etype = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 frequency = 4 [default = 0];
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

    // optional uint32 interval = 5 [default = 0];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

    // optional uint32 lasttime = 6 [default = 0];
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasttime());
    }

  }
  // repeated uint32 params = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGMTestMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneGMTestMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneGMTestMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneGMTestMatchSCmd::MergeFrom(const SceneGMTestMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneGMTestMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGMTestMatchSCmd::CopyFrom(const SceneGMTestMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGMTestMatchSCmd::IsInitialized() const {

  return true;
}

void SceneGMTestMatchSCmd::Swap(SceneGMTestMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(frequency_, other->frequency_);
    std::swap(interval_, other->interval_);
    std::swap(lasttime_, other->lasttime_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneGMTestMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneGMTestMatchSCmd_descriptor_;
  metadata.reflection = SceneGMTestMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchScoreData::kCharidFieldNumber;
const int MatchScoreData::kScoreFieldNumber;
const int MatchScoreData::kNameFieldNumber;
const int MatchScoreData::kPortraitFieldNumber;
const int MatchScoreData::kProfessionFieldNumber;
#endif  // !_MSC_VER

MatchScoreData::MatchScoreData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MatchScoreData)
}

void MatchScoreData::InitAsDefaultInstance() {
  portrait_ = const_cast< ::Cmd::UserPortraitData*>(&::Cmd::UserPortraitData::default_instance());
}

MatchScoreData::MatchScoreData(const MatchScoreData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MatchScoreData)
}

void MatchScoreData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  score_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = NULL;
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchScoreData::~MatchScoreData() {
  // @@protoc_insertion_point(destructor:Cmd.MatchScoreData)
  SharedDtor();
}

void MatchScoreData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete portrait_;
  }
}

void MatchScoreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchScoreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchScoreData_descriptor_;
}

const MatchScoreData& MatchScoreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

MatchScoreData* MatchScoreData::default_instance_ = NULL;

MatchScoreData* MatchScoreData::New() const {
  return new MatchScoreData;
}

void MatchScoreData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchScoreData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(score_, profession_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != NULL) portrait_->::Cmd::UserPortraitData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchScoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MatchScoreData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_portrait;
        break;
      }

      // optional .Cmd.UserPortraitData portrait = 4;
      case 4: {
        if (tag == 34) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 5;
      case 5: {
        if (tag == 40) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MatchScoreData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MatchScoreData)
  return false;
#undef DO_
}

void MatchScoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MatchScoreData)
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .Cmd.UserPortraitData portrait = 4;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->portrait(), output);
  }

  // optional .Cmd.EProfession profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MatchScoreData)
}

::google::protobuf::uint8* MatchScoreData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MatchScoreData)
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .Cmd.UserPortraitData portrait = 4;
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->portrait(), target);
  }

  // optional .Cmd.EProfession profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MatchScoreData)
  return target;
}

int MatchScoreData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.UserPortraitData portrait = 4;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portrait());
    }

    // optional .Cmd.EProfession profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchScoreData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchScoreData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchScoreData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchScoreData::MergeFrom(const MatchScoreData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_portrait()) {
      mutable_portrait()->::Cmd::UserPortraitData::MergeFrom(from.portrait());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchScoreData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchScoreData::CopyFrom(const MatchScoreData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchScoreData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MatchScoreData::Swap(MatchScoreData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(score_, other->score_);
    std::swap(name_, other->name_);
    std::swap(portrait_, other->portrait_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchScoreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchScoreData_descriptor_;
  metadata.reflection = MatchScoreData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateScoreMatchSCmd::kCmdFieldNumber;
const int UpdateScoreMatchSCmd::kParamFieldNumber;
const int UpdateScoreMatchSCmd::kEtypeFieldNumber;
const int UpdateScoreMatchSCmd::kUserscoresFieldNumber;
#endif  // !_MSC_VER

UpdateScoreMatchSCmd::UpdateScoreMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateScoreMatchSCmd)
}

void UpdateScoreMatchSCmd::InitAsDefaultInstance() {
}

UpdateScoreMatchSCmd::UpdateScoreMatchSCmd(const UpdateScoreMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateScoreMatchSCmd)
}

void UpdateScoreMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 44;
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateScoreMatchSCmd::~UpdateScoreMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateScoreMatchSCmd)
  SharedDtor();
}

void UpdateScoreMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateScoreMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateScoreMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateScoreMatchSCmd_descriptor_;
}

const UpdateScoreMatchSCmd& UpdateScoreMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

UpdateScoreMatchSCmd* UpdateScoreMatchSCmd::default_instance_ = NULL;

UpdateScoreMatchSCmd* UpdateScoreMatchSCmd::New() const {
  return new UpdateScoreMatchSCmd;
}

void UpdateScoreMatchSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 212;
    param_ = 44;
    etype_ = 0;
  }
  userscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateScoreMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateScoreMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_UPDATE_SCORE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 3;
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userscores;
        break;
      }

      // repeated .Cmd.MatchScoreData userscores = 5;
      case 5: {
        if (tag == 42) {
         parse_userscores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userscores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userscores;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateScoreMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateScoreMatchSCmd)
  return false;
#undef DO_
}

void UpdateScoreMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateScoreMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_UPDATE_SCORE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType etype = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // repeated .Cmd.MatchScoreData userscores = 5;
  for (int i = 0; i < this->userscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userscores(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateScoreMatchSCmd)
}

::google::protobuf::uint8* UpdateScoreMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateScoreMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_UPDATE_SCORE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType etype = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // repeated .Cmd.MatchScoreData userscores = 5;
  for (int i = 0; i < this->userscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userscores(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateScoreMatchSCmd)
  return target;
}

int UpdateScoreMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_UPDATE_SCORE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType etype = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  // repeated .Cmd.MatchScoreData userscores = 5;
  total_size += 1 * this->userscores_size();
  for (int i = 0; i < this->userscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userscores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateScoreMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateScoreMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateScoreMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateScoreMatchSCmd::MergeFrom(const UpdateScoreMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  userscores_.MergeFrom(from.userscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateScoreMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateScoreMatchSCmd::CopyFrom(const UpdateScoreMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateScoreMatchSCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->userscores())) return false;
  return true;
}

void UpdateScoreMatchSCmd::Swap(UpdateScoreMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    userscores_.Swap(&other->userscores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateScoreMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateScoreMatchSCmd_descriptor_;
  metadata.reflection = UpdateScoreMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncUserScoreMatchSCmd::kCmdFieldNumber;
const int SyncUserScoreMatchSCmd::kParamFieldNumber;
const int SyncUserScoreMatchSCmd::kEtypeFieldNumber;
const int SyncUserScoreMatchSCmd::kCharidFieldNumber;
const int SyncUserScoreMatchSCmd::kScoreFieldNumber;
const int SyncUserScoreMatchSCmd::kSeasonFieldNumber;
#endif  // !_MSC_VER

SyncUserScoreMatchSCmd::SyncUserScoreMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncUserScoreMatchSCmd)
}

void SyncUserScoreMatchSCmd::InitAsDefaultInstance() {
}

SyncUserScoreMatchSCmd::SyncUserScoreMatchSCmd(const SyncUserScoreMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncUserScoreMatchSCmd)
}

void SyncUserScoreMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 45;
  etype_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  season_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncUserScoreMatchSCmd::~SyncUserScoreMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncUserScoreMatchSCmd)
  SharedDtor();
}

void SyncUserScoreMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncUserScoreMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncUserScoreMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncUserScoreMatchSCmd_descriptor_;
}

const SyncUserScoreMatchSCmd& SyncUserScoreMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

SyncUserScoreMatchSCmd* SyncUserScoreMatchSCmd::default_instance_ = NULL;

SyncUserScoreMatchSCmd* SyncUserScoreMatchSCmd::New() const {
  return new SyncUserScoreMatchSCmd;
}

void SyncUserScoreMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncUserScoreMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, season_);
    cmd_ = 212;
    param_ = 45;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncUserScoreMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncUserScoreMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_SCORE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 3;
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // required uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // required uint32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_season;
        break;
      }

      // optional uint32 season = 6;
      case 6: {
        if (tag == 48) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncUserScoreMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncUserScoreMatchSCmd)
  return false;
#undef DO_
}

void SyncUserScoreMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncUserScoreMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_SCORE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPvpType etype = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // required uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // optional uint32 season = 6;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->season(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncUserScoreMatchSCmd)
}

::google::protobuf::uint8* SyncUserScoreMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncUserScoreMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_SCORE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPvpType etype = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // required uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // optional uint32 season = 6;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->season(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncUserScoreMatchSCmd)
  return target;
}

int SyncUserScoreMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_SYNC_SCORE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPvpType etype = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // required uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 season = 6;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncUserScoreMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncUserScoreMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncUserScoreMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncUserScoreMatchSCmd::MergeFrom(const SyncUserScoreMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncUserScoreMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncUserScoreMatchSCmd::CopyFrom(const SyncUserScoreMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncUserScoreMatchSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  return true;
}

void SyncUserScoreMatchSCmd::Swap(SyncUserScoreMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(charid_, other->charid_);
    std::swap(score_, other->score_);
    std::swap(season_, other->season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncUserScoreMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncUserScoreMatchSCmd_descriptor_;
  metadata.reflection = SyncUserScoreMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLeaveRaidMatchSCmd::kCmdFieldNumber;
const int UserLeaveRaidMatchSCmd::kParamFieldNumber;
const int UserLeaveRaidMatchSCmd::kCharidFieldNumber;
const int UserLeaveRaidMatchSCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

UserLeaveRaidMatchSCmd::UserLeaveRaidMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserLeaveRaidMatchSCmd)
}

void UserLeaveRaidMatchSCmd::InitAsDefaultInstance() {
}

UserLeaveRaidMatchSCmd::UserLeaveRaidMatchSCmd(const UserLeaveRaidMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserLeaveRaidMatchSCmd)
}

void UserLeaveRaidMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 46;
  charid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLeaveRaidMatchSCmd::~UserLeaveRaidMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserLeaveRaidMatchSCmd)
  SharedDtor();
}

void UserLeaveRaidMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLeaveRaidMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLeaveRaidMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLeaveRaidMatchSCmd_descriptor_;
}

const UserLeaveRaidMatchSCmd& UserLeaveRaidMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

UserLeaveRaidMatchSCmd* UserLeaveRaidMatchSCmd::default_instance_ = NULL;

UserLeaveRaidMatchSCmd* UserLeaveRaidMatchSCmd::New() const {
  return new UserLeaveRaidMatchSCmd;
}

void UserLeaveRaidMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserLeaveRaidMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, etype_);
    cmd_ = 212;
    param_ = 46;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLeaveRaidMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserLeaveRaidMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_FORCE_LEAVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 4;
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserLeaveRaidMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserLeaveRaidMatchSCmd)
  return false;
#undef DO_
}

void UserLeaveRaidMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserLeaveRaidMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_FORCE_LEAVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EPvpType etype = 4;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserLeaveRaidMatchSCmd)
}

::google::protobuf::uint8* UserLeaveRaidMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserLeaveRaidMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_FORCE_LEAVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EPvpType etype = 4;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserLeaveRaidMatchSCmd)
  return target;
}

int UserLeaveRaidMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_USER_FORCE_LEAVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EPvpType etype = 4;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLeaveRaidMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLeaveRaidMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLeaveRaidMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLeaveRaidMatchSCmd::MergeFrom(const UserLeaveRaidMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLeaveRaidMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLeaveRaidMatchSCmd::CopyFrom(const UserLeaveRaidMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLeaveRaidMatchSCmd::IsInitialized() const {

  return true;
}

void UserLeaveRaidMatchSCmd::Swap(UserLeaveRaidMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLeaveRaidMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLeaveRaidMatchSCmd_descriptor_;
  metadata.reflection = UserLeaveRaidMatchSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfirmTeamMatchSCmd::kCmdFieldNumber;
const int ConfirmTeamMatchSCmd::kParamFieldNumber;
const int ConfirmTeamMatchSCmd::kTeamidFieldNumber;
const int ConfirmTeamMatchSCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

ConfirmTeamMatchSCmd::ConfirmTeamMatchSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ConfirmTeamMatchSCmd)
}

void ConfirmTeamMatchSCmd::InitAsDefaultInstance() {
}

ConfirmTeamMatchSCmd::ConfirmTeamMatchSCmd(const ConfirmTeamMatchSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ConfirmTeamMatchSCmd)
}

void ConfirmTeamMatchSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 212;
  param_ = 47;
  teamid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfirmTeamMatchSCmd::~ConfirmTeamMatchSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ConfirmTeamMatchSCmd)
  SharedDtor();
}

void ConfirmTeamMatchSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfirmTeamMatchSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmTeamMatchSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfirmTeamMatchSCmd_descriptor_;
}

const ConfirmTeamMatchSCmd& ConfirmTeamMatchSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSCmd_2eproto();
  return *default_instance_;
}

ConfirmTeamMatchSCmd* ConfirmTeamMatchSCmd::default_instance_ = NULL;

ConfirmTeamMatchSCmd* ConfirmTeamMatchSCmd::New() const {
  return new ConfirmTeamMatchSCmd;
}

void ConfirmTeamMatchSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConfirmTeamMatchSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, etype_);
    cmd_ = 212;
    param_ = 47;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfirmTeamMatchSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ConfirmTeamMatchSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CONFIRM_TEAMMATCH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MatchSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::MatchSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // required uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.EPvpType etype = 4;
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPvpType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EPvpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ConfirmTeamMatchSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ConfirmTeamMatchSCmd)
  return false;
#undef DO_
}

void ConfirmTeamMatchSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ConfirmTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CONFIRM_TEAMMATCH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional .Cmd.EPvpType etype = 4;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ConfirmTeamMatchSCmd)
}

::google::protobuf::uint8* ConfirmTeamMatchSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ConfirmTeamMatchSCmd)
  // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CONFIRM_TEAMMATCH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional .Cmd.EPvpType etype = 4;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ConfirmTeamMatchSCmd)
  return target;
}

int ConfirmTeamMatchSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = MATCHS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.MatchSParam param = 2 [default = MATCHSPARAM_CONFIRM_TEAMMATCH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .Cmd.EPvpType etype = 4;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmTeamMatchSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfirmTeamMatchSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfirmTeamMatchSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfirmTeamMatchSCmd::MergeFrom(const ConfirmTeamMatchSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfirmTeamMatchSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmTeamMatchSCmd::CopyFrom(const ConfirmTeamMatchSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmTeamMatchSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ConfirmTeamMatchSCmd::Swap(ConfirmTeamMatchSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfirmTeamMatchSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfirmTeamMatchSCmd_descriptor_;
  metadata.reflection = ConfirmTeamMatchSCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
