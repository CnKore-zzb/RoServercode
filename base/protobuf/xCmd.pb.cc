// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* Nonce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nonce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_xCmd_2eproto() {
  protobuf_AddDesc_xCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xCmd.proto");
  GOOGLE_CHECK(file != NULL);
  Nonce_descriptor_ = file->message_type(0);
  static const int Nonce_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, sign_),
  };
  Nonce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Nonce_descriptor_,
      Nonce::default_instance_,
      Nonce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nonce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Nonce));
  Command_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Nonce_descriptor_, &Nonce::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xCmd_2eproto() {
  delete Nonce::default_instance_;
  delete Nonce_reflection_;
}

void protobuf_AddDesc_xCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nxCmd.proto\022\003Cmd\"7\n\005Nonce\022\021\n\ttimestamp\030"
    "\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\014\n\004sign\030\003 \001(\t*\227\016\n\007C"
    "ommand\022\027\n\023LOGIN_USER_PROTOCMD\020\001\022\027\n\023ERROR"
    "_USER_PROTOCMD\020\002\022\027\n\023SCENE_USER_PROTOCMD\020"
    "\005\022\034\n\030SCENE_USER_ITEM_PROTOCMD\020\006\022\035\n\031SCENE"
    "_USER_SKILL_PROTOCMD\020\007\022\035\n\031SCENE_USER_QUE"
    "ST_PROTOCMD\020\010\022\030\n\024SCENE_USER2_PROTOCMD\020\t\022"
    "\033\n\027SCENE_USER_PET_PROTOCMD\020\n\022\022\n\016FUBEN_PR"
    "OTOCMD\020\013\022\033\n\027SCENE_USER_MAP_PROTOCMD\020\014\022\035\n"
    "\031SCENE_USER_MOUNT_PROTOCMD\020\r\022\027\n\023SCENE_BO"
    "SS_PROTOCMD\020\017\022\037\n\033SCENE_USER_CARRIER_PROT"
    "OCMD\020\020\022\037\n\033SCENE_USER_ACHIEVE_PROTOCMD\020\021\022"
    "\033\n\027SCENE_USER_TIP_PROTOCMD\020\022\022 \n\034SCENE_US"
    "ER_CHATROOM_PROTOCMD\020\023\022\033\n\027INFINITE_TOWER"
    "_PROTOCMD\020\024\022\034\n\030SCENE_USER_SEAL_PROTOCMD\020"
    "\025\022\035\n\031SCENE_USER_INTER_PROTOCMD\020\026\022\036\n\032SCEN"
    "E_USER_MANUAL_PROTOCMD\020\027\022\034\n\030SCENE_USER_C"
    "HAT_PROTOCMD\020\030\022\027\n\023USER_EVENT_PROTOCMD\020\031\022"
    "\035\n\031SCENE_USER_TRADE_PROTOCMD\020\032\022\036\n\032SCENE_"
    "USER_AUGURY_PROTOCMD\020\033\022!\n\035SCENE_USER_AST"
    "ROLABE_PROTOCMD\020\034\022\034\n\030SCENE_USER_FOOD_PRO"
    "TOCMD\020\035\022\035\n\031SCENE_USER_PHOTO_PROTOCMD\020\036\022\035"
    "\n\031SCENE_USER_TUTOR_PROTOCMD\020\037\022\035\n\031SCENE_U"
    "SER_BEING_PROTOCMD\020 \022\037\n\033SESSION_USER_GUI"
    "LD_PROTOCMD\0202\022\036\n\032SESSION_USER_TEAM_PROTO"
    "CMD\0203\022\036\n\032SESSION_USER_SHOP_PROTOCMD\0204\022!\n"
    "\035SESSION_USER_WEATHER_PROTOCMD\0205\022\036\n\032SESS"
    "ION_USER_MAIL_PROTOCMD\0207\022#\n\037SESSION_USER"
    "_SOCIALITY_PROTOCMD\0208\022\036\n\032RECORD_USER_TRA"
    "DE_PROTOCMD\0209\022\021\n\rDOJO_PROTOCMD\020:\022\021\n\rCHAT"
    "_PROTOCMD\020;\022\025\n\021ACTIVITY_PROTOCMD\020<\022\023\n\017MA"
    "TCHC_PROTOCMD\020=\022#\n\037SESSION_USER_AUTHORIZ"
    "E_PROTOCMD\020>\022\025\n\021AUCTIONC_PROTOCMD\020\?\022\033\n\027A"
    "CTIVITY_EVENT_PROTOCMD\020@\022\025\n\021WEDDINGC_PRO"
    "TOCMD\020A\022\025\n\021PVE_CARD_PROTOCMD\020B\022\026\n\022TEAM_R"
    "AID_PROTOCMD\020C\022 \n\034SESSION_OVERSEAS_TW_PR"
    "OTOCMD\020P\022\016\n\nCLIENT_CMD\020c\022\020\n\014MAX_USER_CMD"
    "\020d\022\031\n\024RECORD_DATA_PROTOCMD\020\310\001\022\023\n\016TRADE_P"
    "ROTOCMD\020\311\001\022\025\n\020SESSION_PROTOCMD\020\312\001\022\025\n\020GMT"
    "OOLS_PROTOCMD\020\313\001\022\021\n\014LOG_PROTOCMD\020\314\001\022\030\n\023G"
    "ATE_SUPER_PROTOCMD\020\315\001\022\024\n\017REGION_PROTOCMD"
    "\020\316\001\022\022\n\rSTAT_PROTOCMD\020\317\001\022\024\n\017SOCIAL_PROTOC"
    "MD\020\320\001\022\022\n\rTEAM_PROTOCMD\020\321\001\022\023\n\016GUILD_PROTO"
    "CMD\020\322\001\022\023\n\016GZONE_PROTOCMD\020\323\001\022\024\n\017MATCHS_PR"
    "OTOCMD\020\324\001\022\026\n\021AUCTIONS_PROTOCMD\020\325\001\022\026\n\021WED"
    "DINGS_PROTOCMD\020\326\001\022\023\n\016BOSSS_PROTOCMD\020\330\001\022\014"
    "\n\007REG_CMD\020\375\001\022\020\n\013GATEWAY_CMD\020\372\001\022\024\n\017SYSTEM"
    "_PROTOCMD\020\377\001", 1892);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xCmd.proto", &protobuf_RegisterTypes);
  Nonce::default_instance_ = new Nonce();
  Nonce::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xCmd_2eproto {
  StaticDescriptorInitializer_xCmd_2eproto() {
    protobuf_AddDesc_xCmd_2eproto();
  }
} static_descriptor_initializer_xCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}
bool Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 50:
    case 51:
    case 52:
    case 53:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 80:
    case 99:
    case 100:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 216:
    case 250:
    case 253:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Nonce::kTimestampFieldNumber;
const int Nonce::kIndexFieldNumber;
const int Nonce::kSignFieldNumber;
#endif  // !_MSC_VER

Nonce::Nonce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Nonce)
}

void Nonce::InitAsDefaultInstance() {
}

Nonce::Nonce(const Nonce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Nonce)
}

void Nonce::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0u;
  index_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Nonce::~Nonce() {
  // @@protoc_insertion_point(destructor:Cmd.Nonce)
  SharedDtor();
}

void Nonce::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void Nonce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nonce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nonce_descriptor_;
}

const Nonce& Nonce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xCmd_2eproto();
  return *default_instance_;
}

Nonce* Nonce::default_instance_ = NULL;

Nonce* Nonce::New() const {
  return new Nonce;
}

void Nonce::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Nonce*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(timestamp_, index_);
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Nonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Nonce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sign;
        break;
      }

      // optional string sign = 3;
      case 3: {
        if (tag == 26) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Nonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Nonce)
  return false;
#undef DO_
}

void Nonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Nonce)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Nonce)
}

::google::protobuf::uint8* Nonce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Nonce)
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Nonce)
  return target;
}

int Nonce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string sign = 3;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nonce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Nonce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Nonce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Nonce::MergeFrom(const Nonce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Nonce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nonce::CopyFrom(const Nonce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nonce::IsInitialized() const {

  return true;
}

void Nonce::Swap(Nonce* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(index_, other->index_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Nonce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nonce_descriptor_;
  metadata.reflection = Nonce_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
