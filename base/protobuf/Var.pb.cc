// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Var.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Var.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* Var_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Var_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccVar_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EVarType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EVarTimeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAccVarType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Var_2eproto() {
  protobuf_AddDesc_Var_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Var.proto");
  GOOGLE_CHECK(file != NULL);
  Var_descriptor_ = file->message_type(0);
  static const int Var_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, time_),
  };
  Var_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Var_descriptor_,
      Var::default_instance_,
      Var_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Var, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Var));
  StatVar_descriptor_ = file->message_type(1);
  static const int StatVar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVar, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVar, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVar, time_),
  };
  StatVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatVar_descriptor_,
      StatVar::default_instance_,
      StatVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatVar));
  AccVar_descriptor_ = file->message_type(2);
  static const int AccVar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccVar, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccVar, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccVar, time_),
  };
  AccVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccVar_descriptor_,
      AccVar::default_instance_,
      AccVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccVar));
  EVarType_descriptor_ = file->enum_type(0);
  EVarTimeType_descriptor_ = file->enum_type(1);
  EAccVarType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Var_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Var_descriptor_, &Var::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatVar_descriptor_, &StatVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccVar_descriptor_, &AccVar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Var_2eproto() {
  delete Var::default_instance_;
  delete Var_reflection_;
  delete StatVar::default_instance_;
  delete StatVar_reflection_;
  delete AccVar::default_instance_;
  delete AccVar_reflection_;
}

void protobuf_AddDesc_Var_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tVar.proto\022\003Cmd\"S\n\003Var\022)\n\004type\030\001 \001(\0162\r."
    "Cmd.EVarType:\014EVARTYPE_MIN\022\020\n\005value\030\002 \001("
    "\r:\0010\022\017\n\004time\030\003 \001(\r:\0010\"9\n\007StatVar\022\013\n\003key\030"
    "\001 \001(\t\022\020\n\005value\030\002 \001(\r:\0010\022\017\n\004time\030\003 \001(\r:\0010"
    "\"\\\n\006AccVar\022/\n\004type\030\001 \001(\0162\020.Cmd.EAccVarTy"
    "pe:\017EACCVARTYPE_MIN\022\020\n\005value\030\002 \001(\r:\0010\022\017\n"
    "\004time\030\003 \001(\r:\0010*\360!\n\010EVarType\022\020\n\014EVARTYPE_"
    "MIN\020\000\022\031\n\025EVARTYPE_QUEST_WANTED\020\001\022\037\n\033EVAR"
    "TYPE_QUEST_WANTED_RESET\020\002\022\021\n\rEVARTYPE_SH"
    "OP\020\003\022\022\n\016EVARTYPE_TOWER\020\004\022\021\n\rEVARTYPE_SEA"
    "L\020\005\022\031\n\025EVARTYPE_QUEST_REWARD\020\006\022\036\n\032EVARTY"
    "PE_ANTI_ADDICT_DAILY\020\007\022\027\n\023EVARTYPE_LABOR"
    "ATORY\020\010\022 \n\034EVARTYPE_GUILD_EXCHANGECHAIR\020"
    "\t\022\037\n\033EVARTYPE_GUILD_CONTRIBUTION\020\n\022\030\n\024EV"
    "ARTYPE_USEITEM_DAY\020\013\022\027\n\023EVARTYPE_SINGLE_"
    "DOG\020\014\022\032\n\026EVARTYPE_QUEST_DAILY_1\020\r\022\032\n\026EVA"
    "RTYPE_QUEST_DAILY_3\020\016\022\032\n\026EVARTYPE_QUEST_"
    "DAILY_7\020\017\022\034\n\030EVARTYPE_QUEST_DAILY_MAP\020\020\022"
    "\030\n\024EVARTYPE_GUILD_ASSET\020\021\022 \n\034EVARTYPE_CA"
    "MERA_SUMMON_DAILY\020\022\022\033\n\027EVARTYPE_ACTIVITY"
    "_QUEST\020\023\022\031\n\025EVARTYPE_GUILD_DONATE\020\024\022\033\n\027E"
    "VARTYPE_OPERATE_REWARD\020\025\022\037\n\033EVARTYPE_FIR"
    "ST_EXCHANGEZONE\020\026\022\036\n\032EVARTYPE_FRIENDSHIP"
    "_FRIEND\020\027\022\035\n\031EVARTYPE_FRIENDSHIP_GUILD\020\030"
    "\022\032\n\026EVARTYPE_TOWER_MONSTER\020\031\022\031\n\025EVARTYPE"
    "_USEITEM_WEEK\020\032\022\030\n\024EVARTYPE_USER_CREDIT\020"
    "\033\022\035\n\031EVARTYPE_DAY_ONLINE_FIRST\020\034\022\034\n\030EVAR"
    "TYPE_ACTIVITY_REWARD\020\035\022\037\n\033EVARTYPE_ACTIV"
    "ITY_VALENTINE\020\036\022\021\n\rEVARTYPE_CHAT\020\037\022\032\n\026EV"
    "ARTYPE_AUGURY_REWARD\020 \022\036\n\032EVARTYPE_SELL_"
    "WARNING_LAST\020!\022\035\n\031EVARTYPE_SELL_WARNING_"
    "CUR\020\"\022\027\n\023EVARTYPE_GUILD_RAID\020#\022\033\n\027EVARTY"
    "PE_GUILD_RAID_BAN\020$\022$\n EVARTYPE_LABORATO"
    "RY_EXTASKREWARD\020%\022\030\n\024EVARTYPE_GUILD_QUES"
    "T\020&\022\030\n\024EVARTYPE_CHILD_QUEST\020\'\022\033\n\027EVARTYP"
    "E_GUILD_MAXASSET\020(\022\035\n\031EVARTYPE_LABORATOR"
    "Y_POINT\020)\022\030\n\024EVARTYPE_GETITEM_DAY\020*\022\031\n\025E"
    "VARTYPE_GETITEM_WEEK\020+\022\035\n\031EVARTYPE_NEWAU"
    "GURY_REWARD\020,\022!\n\035EVARTYPE_NEWAUGURY_EXTR"
    "ACOUNT\020-\022#\n\037EVARTYPE_AUGURY_CELEBRATION_"
    "DAY\020.\022\034\n\030EVARTYPE_CELEBRATION_ONE\020/\022\034\n\030E"
    "VARTYPE_CELEBRATION_TWO\0200\022\036\n\032EVARTYPE_CE"
    "LEBRATION_THREE\0201\022\030\n\024EVARTYPE_PVPCOIN_DA"
    "Y\0202\022\031\n\025EVARTYPE_PVPCOIN_WEEK\0203\022\037\n\033EVARTY"
    "PE_ACHIEVE_CHAT_WORLD\0204\022\037\n\033EVARTYPE_ACHI"
    "EVE_CHAT_GUILD\0205\022\036\n\032EVARTYPE_QUEST_DAILY"
    "_RESET\0206\022\033\n\027EVARTYPE_SCENERY_UPLOAD\0207\022$\n"
    " EVARTYPE_GUILD_QUEST_EXTRAREWARD\0208\022%\n!E"
    "VARTYPE_GUILD_DONATE_EXTRAREWARD\0209\022\030\n\024EV"
    "ARTYPE_ACHIEVE_CAT\020:\022#\n\037EVARTYPE_LOVEAUG"
    "URY_EXTRARCOUNT\020;\022\032\n\026EVARTYPE_USERPET_TO"
    "UCH\020<\022\031\n\025EVARTYPE_USERPET_FEED\020=\022\031\n\025EVAR"
    "TYPE_USERPET_GIFT\020>\022\037\n\033EVARTYPE_PETADVEN"
    "TURE_RESET\020\?\022\030\n\024EVARTYPE_SHOP_RANDOM\020@\022\026"
    "\n\022EVARTYPE_ACC_QUEST\020A\022\036\n\032EVARTYPE_PETAD"
    "VENTURE_LIST\020B\022\036\n\032EVARTYPE_LOTTERY_CNT_E"
    "QUIP\020C\022\035\n\031EVARTYPE_LOTTERY_CNT_CARD\020D\022\033\n"
    "\027EVARTYPE_ACCDAILY_QUEST\020E\022\033\n\027EVARTYPE_T"
    "UTOR_TASK_DAY\020F\022\034\n\030EVARTYPE_TUTOR_TASK_W"
    "EEK\020G\022\036\n\032EVARTYPE_SHOP_RANDOM_BY_LV\020H\022%\n"
    "!EVARTYPE_INACTIVE_USER_SEND_COUNT\020I\022(\n$"
    "EVARTYPE_INACTIVE_USER_LAST_SEND_DAY\020J\022\036"
    "\n\032EVARTYPE_QUEST_WANTED_WEEK\020K\022\036\n\032EVARTY"
    "PE_TUTOR_TASK_REWARD\020L\022\027\n\023EVARTYPE_DOUBL"
    "E_LAB\020M\022\035\n\031EVARTYPE_GUILD_PHOTO_LOAD\020N\022\035"
    "\n\031EVARTYPE_ACC_CHOICE_QUEST\020O\022&\n\"EVARTYP"
    "E_GUILD_BUILDING_SUBMIT_DAY\020U\022\032\n\026EVARTYP"
    "E_DAILY_MAPRAND\020V\022\034\n\030EVARTYPE_DEPOSIT_EN"
    "D_NTF\020W\022\"\n\036EVARTYPE_ACTIVITY_EVENT_REWAR"
    "D\020X\022\035\n\031EVARTYPE_LABORATORY_COUNT\020Y\022\035\n\031EV"
    "ARTYPE_GUILD_DONATE_DAY\020Z\022!\n\035EVARTYPE_GU"
    "ILD_CHALLENGE_WEEK\020[\022\033\n\027EVARTYPE_CHRISTM"
    "AS_CAKE\020\\\022\026\n\022EVARTYPE_SHOP_WEEK\020]\022\034\n\030EVA"
    "RTYPE_TOWER_RESETTIME\020_\022\027\n\023EVARTYPE_QUES"
    "T_SIGN\020`\022$\n EVARTYPE_ARTIFACT_DISTRIBUTE"
    "_DAY\020a\022\030\n\024EVARTYPE_FIRST_SHARE\020b\022!\n\035EVAR"
    "TYPE_EXTRARWD_WANTEDQUEST\020c\022\"\n\036EVARTYPE_"
    "EXTRARWD_DAILYMONSTER\020d\022\032\n\026EVARTYPE_EXTR"
    "ARWD_SEAL\020e\022 \n\034EVARTYPE_EXTRARWD_LABORAT"
    "ORY\020f\022\035\n\031EVARTYPE_EXTRARWD_ENDLESS\020g\022!\n\035"
    "EVARTYPE_EXTRARWD_GUILD_QUEST\020h\022\"\n\036EVART"
    "YPE_EXTRARWD_GUILD_DONATE\020i\022\"\n\036EVARTYPE_"
    "DOUBLERWD_WANTEDQUEST\020j\022#\n\037EVARTYPE_DOUB"
    "LERWD_DAILYMONSTER\020k\022\033\n\027EVARTYPE_DOUBLER"
    "WD_SEAL\020l\022!\n\035EVARTYPE_DOUBLERWD_LABORATO"
    "RY\020m\022\036\n\032EVARTYPE_DOUBLERWD_ENDLESS\020n\022\027\n\023"
    "EVARTYPE_SHOP_MONTH\020o\022!\n\035EVARTYPE_GUILD_"
    "TREASURE_COUNT\020p\022!\n\035EVARTYPE_BCOIN_TREAS"
    "URE_COUNT\020q\022%\n!EVARTYPE_DAY_LOTTERY_BUY_"
    "GIVE_CNT\020r\022!\n\035EVARTYPE_DAY_LOTTERY_CNT_H"
    "EAD\020s\022\"\n\036EVARTYPE_DAY_LOTTERY_CNT_EQUIP\020"
    "t\022!\n\035EVARTYPE_DAY_LOTTERY_CNT_CARD\020u\022\"\n\036"
    "EVARTYPE_DAY_LOTTERY_CNT_MAGIC\020v\022\037\n\033EVAR"
    "TYPE_QUEST_WEDDINGDAILY\020x\022\032\n\026EVARTYPE_RE"
    "COMMEND_DAY\020{\022\033\n\027EVARTYPE_RECOMMEND_WEEK"
    "\020|\022\"\n\035EVARTYPE_PVECARD_DIFFICULTY_1\020\204\001\022\""
    "\n\035EVARTYPE_PVECARD_DIFFICULTY_2\020\205\001\022\"\n\035EV"
    "ARTYPE_PVECARD_DIFFICULTY_3\020\206\001\022\032\n\025EVARTY"
    "PE_MVPREWARDNUM\020\207\001\022\033\n\026EVARTYPE_MINIREWAR"
    "DNUM\020\210\001\022\033\n\026EVARTYPE_ALTMAN_REWARD\020\211\001\022\031\n\024"
    "EVARTYPE_ALTMAN_KILL\020\212\001\022\036\n\031EVARTYPE_EXTR"
    "ARWD_PVECARD\020\213\001\022\037\n\032EVARTYPE_DOUBLERWD_PV"
    "ECARD\020\214\001\022$\n\037EVARTYPE_GUILD_MEMBER_WEEKBC"
    "OIN\020\216\001\022\"\n\035EVARTYPE_EXCHANGECARD_DRAWMAX\020"
    "\217\001\022 \n\033EVARTYPE_DAY_GET_ZENY_COUNT\020\220\001\022\027\n\022"
    "EVARTYPE_DEAD_COIN\020\221\001\022\030\n\023EVARTYPE_DEAD_Q"
    "UEST\020\222\001\022#\n\036EVARTYPE_TUTOR_EXTRABATTLETIM"
    "E\020\224\001\022 \n\033EVARTYPE_DEADBOSS_COUNT_MVP\020\225\001\022$"
    "\n\037EVARTYPE_DEADBOSS_COUNT_PVECARD\020\226\001\022\"\n\035"
    "EVARTYPE_DEADBOSS_COUNT_TOWER\020\227\001\022\"\n\035EVAR"
    "TYPE_DEADBOSS_COUNT_GUILD\020\230\001\022\033\n\026EVARTYPE"
    "_TEAMPWS_COUNT\020\231\001\022%\n EVARTYPE_DEADBOSS_C"
    "OUNT_PVECARD2\020\236\001\022%\n EVARTYPE_DEADBOSS_CO"
    "UNT_PVECARD3\020\237\001\022%\n EVARTYPE_DEADBOSS_COU"
    "NT_PVECARD4\020\240\001\022\021\n\014EVARTYPE_MAX\020\241\001*\230\001\n\014EV"
    "arTimeType\022\024\n\020EVARTIMETYPE_MIN\020\000\022\024\n\020EVAR"
    "TIMETYPE_DAY\020\001\022\025\n\021EVARTIMETYPE_WEEK\020\002\022\026\n"
    "\022EVARTIMETYPE_MONTH\020\003\022\027\n\023EVARTIMETYPE_AL"
    "WAYS\020\004\022\024\n\020EVARTIMETYPE_MAX\020\005*\213\013\n\013EAccVar"
    "Type\022\023\n\017EACCVARTYPE_MIN\020\000\022!\n\035EACCVARTYPE"
    "_LOTTERY_CNT_EQUIP\020\001\022 \n\034EACCVARTYPE_LOTT"
    "ERY_CNT_CARD\020\002\022!\n\035EVARTYPE_SHOP_RANDOM_B"
    "Y_ACCLV\020\003\022\033\n\027EACCVARTYPE_DAILY_QUEST\020\004\022("
    "\n$EACCVARTYPE_INACTIVE_USER_SEND_COUNT\020\005"
    "\022+\n\'EACCVARTYPE_INACTIVE_USER_LAST_SEND_"
    "DAY\020\006\022!\n\035EACCVARTYPE_QUEST_WANTED_WEEK\020\007"
    "\022\032\n\026EACCVARTYPE_DOUBLE_LAB\020\010\022%\n!EACCVART"
    "YPE_ACTIVITY_EVENT_REWARD\020\t\022\033\n\027EACCVARTY"
    "PE_POLLY_FIRST\020\n\022\037\n\033EACCVARTYPE_POLLY_DA"
    "Y_SCORE\020\013\022\037\n\033EACCVARTYPE_SHOP_RANDOM_ACC"
    "\020\r\022\030\n\024EACCVARTYPE_SHOP_GOT\020\016\022!\n\035EACCVART"
    "YPE_QUEST_DAILY_RESET\020\017\022\023\n\017EACCVARTYPE_J"
    "OY\020\020\022\035\n\031EACCVARTYPE_QUEST_DAILY_1\020\021\022\035\n\031E"
    "ACCVARTYPE_QUEST_DAILY_3\020\022\022\035\n\031EACCVARTYP"
    "E_QUEST_DAILY_7\020\023\022$\n EACCVARTYPE_EXTRARW"
    "D_WANTEDQUEST\020\024\022%\n!EACCVARTYPE_EXTRARWD_"
    "DAILYMONSTER\020\025\022\035\n\031EACCVARTYPE_EXTRARWD_S"
    "EAL\020\026\022#\n\037EACCVARTYPE_EXTRARWD_LABORATORY"
    "\020\027\022 \n\034EACCVARTYPE_EXTRARWD_ENDLESS\020\030\022$\n "
    "EACCVARTYPE_EXTRARWD_GUILD_QUEST\020\031\022%\n!EA"
    "CCVARTYPE_EXTRARWD_GUILD_DONATE\020\032\022%\n!EAC"
    "CVARTYPE_DOUBLERWD_WANTEDQUEST\020\033\022&\n\"EACC"
    "VARTYPE_DOUBLERWD_DAILYMONSTER\020\034\022\036\n\032EACC"
    "VARTYPE_DOUBLERWD_SEAL\020\035\022$\n EACCVARTYPE_"
    "DOUBLERWD_LABORATORY\020\036\022!\n\035EACCVARTYPE_DO"
    "UBLERWD_ENDLESS\020\037\022\035\n\031EACCVARTYPE_SHOP_GO"
    "T_WEEK\020 \022\036\n\032EACCVARTYPE_SHOP_GOT_MONTH\020!"
    "\022 \n\034EACCVARTYPE_PETWORK_EXCHANGE\020\"\022\036\n\032EA"
    "CCVARTYPE_PETWORK_REWARD\020#\022\036\n\032EACCVARTYP"
    "E_OPERATE_REWARD\020$\022\034\n\030EACCVARTYPE_FAVORA"
    "BILITY\020%\022#\n\037EACCVARTYPE_FAVORABILITY_STA"
    "TUS\020&\022 \n\034EACCVARTYPE_EXTRARWD_PVECARD\020\'\022"
    "!\n\035EACCVARTYPE_DOUBLERWD_PVECARD\020(\022!\n\035EA"
    "CCVARTYPE_STAY_FAVORABILITY\020)\022\023\n\017EACCVAR"
    "TYPE_MAX\020*", 6170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Var.proto", &protobuf_RegisterTypes);
  Var::default_instance_ = new Var();
  StatVar::default_instance_ = new StatVar();
  AccVar::default_instance_ = new AccVar();
  Var::default_instance_->InitAsDefaultInstance();
  StatVar::default_instance_->InitAsDefaultInstance();
  AccVar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Var_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Var_2eproto {
  StaticDescriptorInitializer_Var_2eproto() {
    protobuf_AddDesc_Var_2eproto();
  }
} static_descriptor_initializer_Var_2eproto_;
const ::google::protobuf::EnumDescriptor* EVarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVarType_descriptor_;
}
bool EVarType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 120:
    case 123:
    case 124:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 158:
    case 159:
    case 160:
    case 161:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVarTimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVarTimeType_descriptor_;
}
bool EVarTimeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAccVarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAccVarType_descriptor_;
}
bool EAccVarType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Var::kTypeFieldNumber;
const int Var::kValueFieldNumber;
const int Var::kTimeFieldNumber;
#endif  // !_MSC_VER

Var::Var()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Var)
}

void Var::InitAsDefaultInstance() {
}

Var::Var(const Var& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Var)
}

void Var::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Var::~Var() {
  // @@protoc_insertion_point(destructor:Cmd.Var)
  SharedDtor();
}

void Var::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Var::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Var::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Var_descriptor_;
}

const Var& Var::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Var_2eproto();
  return *default_instance_;
}

Var* Var::default_instance_ = NULL;

Var* Var::New() const {
  return new Var;
}

void Var::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Var*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Var::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Var)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EVarType type = 1 [default = EVARTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EVarType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EVarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Var)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Var)
  return false;
#undef DO_
}

void Var::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Var)
  // optional .Cmd.EVarType type = 1 [default = EVARTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Var)
}

::google::protobuf::uint8* Var::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Var)
  // optional .Cmd.EVarType type = 1 [default = EVARTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Var)
  return target;
}

int Var::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EVarType type = 1 [default = EVARTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Var::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Var* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Var*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Var::MergeFrom(const Var& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Var::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Var::CopyFrom(const Var& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Var::IsInitialized() const {

  return true;
}

void Var::Swap(Var* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Var::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Var_descriptor_;
  metadata.reflection = Var_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatVar::kKeyFieldNumber;
const int StatVar::kValueFieldNumber;
const int StatVar::kTimeFieldNumber;
#endif  // !_MSC_VER

StatVar::StatVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StatVar)
}

void StatVar::InitAsDefaultInstance() {
}

StatVar::StatVar(const StatVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StatVar)
}

void StatVar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatVar::~StatVar() {
  // @@protoc_insertion_point(destructor:Cmd.StatVar)
  SharedDtor();
}

void StatVar::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void StatVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatVar_descriptor_;
}

const StatVar& StatVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Var_2eproto();
  return *default_instance_;
}

StatVar* StatVar::default_instance_ = NULL;

StatVar* StatVar::New() const {
  return new StatVar;
}

void StatVar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatVar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(value_, time_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StatVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StatVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StatVar)
  return false;
#undef DO_
}

void StatVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StatVar)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StatVar)
}

::google::protobuf::uint8* StatVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StatVar)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StatVar)
  return target;
}

int StatVar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatVar::MergeFrom(const StatVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatVar::CopyFrom(const StatVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatVar::IsInitialized() const {

  return true;
}

void StatVar::Swap(StatVar* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatVar_descriptor_;
  metadata.reflection = StatVar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccVar::kTypeFieldNumber;
const int AccVar::kValueFieldNumber;
const int AccVar::kTimeFieldNumber;
#endif  // !_MSC_VER

AccVar::AccVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AccVar)
}

void AccVar::InitAsDefaultInstance() {
}

AccVar::AccVar(const AccVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AccVar)
}

void AccVar::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccVar::~AccVar() {
  // @@protoc_insertion_point(destructor:Cmd.AccVar)
  SharedDtor();
}

void AccVar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccVar_descriptor_;
}

const AccVar& AccVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Var_2eproto();
  return *default_instance_;
}

AccVar* AccVar::default_instance_ = NULL;

AccVar* AccVar::New() const {
  return new AccVar;
}

void AccVar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccVar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AccVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAccVarType type = 1 [default = EACCVARTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAccVarType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAccVarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AccVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AccVar)
  return false;
#undef DO_
}

void AccVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AccVar)
  // optional .Cmd.EAccVarType type = 1 [default = EACCVARTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AccVar)
}

::google::protobuf::uint8* AccVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AccVar)
  // optional .Cmd.EAccVarType type = 1 [default = EACCVARTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AccVar)
  return target;
}

int AccVar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAccVarType type = 1 [default = EACCVARTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccVar::MergeFrom(const AccVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccVar::CopyFrom(const AccVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccVar::IsInitialized() const {

  return true;
}

void AccVar::Swap(AccVar* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccVar_descriptor_;
  metadata.reflection = AccVar_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
