// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BossSCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BossSCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* DeadBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeadBossOpenBossSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadBossOpenBossSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeadBossOpenSyncBossSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeadBossOpenSyncBossSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummonBossBossSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummonBossBossSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDieBossSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDieBossSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossNtfBossSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossNtfBossSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossSetBossSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossSetBossSCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BossSParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BossSCmd_2eproto() {
  protobuf_AddDesc_BossSCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BossSCmd.proto");
  GOOGLE_CHECK(file != NULL);
  DeadBossInfo_descriptor_ = file->message_type(0);
  static const int DeadBossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossInfo, name_),
  };
  DeadBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadBossInfo_descriptor_,
      DeadBossInfo::default_instance_,
      DeadBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadBossInfo));
  DeadBossOpenBossSCmd_descriptor_ = file->message_type(1);
  static const int DeadBossOpenBossSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenBossSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenBossSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenBossSCmd, info_),
  };
  DeadBossOpenBossSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadBossOpenBossSCmd_descriptor_,
      DeadBossOpenBossSCmd::default_instance_,
      DeadBossOpenBossSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenBossSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenBossSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadBossOpenBossSCmd));
  DeadBossOpenSyncBossSCmd_descriptor_ = file->message_type(2);
  static const int DeadBossOpenSyncBossSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenSyncBossSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenSyncBossSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenSyncBossSCmd, info_),
  };
  DeadBossOpenSyncBossSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeadBossOpenSyncBossSCmd_descriptor_,
      DeadBossOpenSyncBossSCmd::default_instance_,
      DeadBossOpenSyncBossSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenSyncBossSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeadBossOpenSyncBossSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeadBossOpenSyncBossSCmd));
  SummonBossBossSCmd_descriptor_ = file->message_type(3);
  static const int SummonBossBossSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, lv_),
  };
  SummonBossBossSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummonBossBossSCmd_descriptor_,
      SummonBossBossSCmd::default_instance_,
      SummonBossBossSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonBossBossSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummonBossBossSCmd));
  BossDieBossSCmd_descriptor_ = file->message_type(4);
  static const int BossDieBossSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, killid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, reset_),
  };
  BossDieBossSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDieBossSCmd_descriptor_,
      BossDieBossSCmd::default_instance_,
      BossDieBossSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieBossSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDieBossSCmd));
  WorldBossNtfBossSCmd_descriptor_ = file->message_type(5);
  static const int WorldBossNtfBossSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtfBossSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtfBossSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtfBossSCmd, ntf_),
  };
  WorldBossNtfBossSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossNtfBossSCmd_descriptor_,
      WorldBossNtfBossSCmd::default_instance_,
      WorldBossNtfBossSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtfBossSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtfBossSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossNtfBossSCmd));
  BossSetBossSCmd_descriptor_ = file->message_type(6);
  static const int BossSetBossSCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSetBossSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSetBossSCmd, param_),
  };
  BossSetBossSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossSetBossSCmd_descriptor_,
      BossSetBossSCmd::default_instance_,
      BossSetBossSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSetBossSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSetBossSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossSetBossSCmd));
  BossSParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BossSCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadBossInfo_descriptor_, &DeadBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadBossOpenBossSCmd_descriptor_, &DeadBossOpenBossSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeadBossOpenSyncBossSCmd_descriptor_, &DeadBossOpenSyncBossSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummonBossBossSCmd_descriptor_, &SummonBossBossSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDieBossSCmd_descriptor_, &BossDieBossSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossNtfBossSCmd_descriptor_, &WorldBossNtfBossSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossSetBossSCmd_descriptor_, &BossSetBossSCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BossSCmd_2eproto() {
  delete DeadBossInfo::default_instance_;
  delete DeadBossInfo_reflection_;
  delete DeadBossOpenBossSCmd::default_instance_;
  delete DeadBossOpenBossSCmd_reflection_;
  delete DeadBossOpenSyncBossSCmd::default_instance_;
  delete DeadBossOpenSyncBossSCmd_reflection_;
  delete SummonBossBossSCmd::default_instance_;
  delete SummonBossBossSCmd_reflection_;
  delete BossDieBossSCmd::default_instance_;
  delete BossDieBossSCmd_reflection_;
  delete WorldBossNtfBossSCmd::default_instance_;
  delete WorldBossNtfBossSCmd_reflection_;
  delete BossSetBossSCmd::default_instance_;
  delete BossSetBossSCmd_reflection_;
}

void protobuf_AddDesc_BossSCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_BossCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016BossSCmd.proto\022\003Cmd\032\nxCmd.proto\032\rBossC"
    "md.proto\"S\n\014DeadBossInfo\022\021\n\006charid\030\001 \001(\004"
    ":\0010\022\021\n\006zoneid\030\002 \001(\r:\0010\022\017\n\004time\030\003 \001(\r:\0010\022"
    "\014\n\004name\030\004 \001(\t\"\234\001\n\024DeadBossOpenBossSCmd\022)"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016BOSSS_PROTOCM"
    "D\0228\n\005param\030\002 \001(\0162\017.Cmd.BossSParam:\030BOSSS"
    "PARAM_DEADBOSS_OPEN\022\037\n\004info\030\003 \001(\0132\021.Cmd."
    "DeadBossInfo\"\240\001\n\030DeadBossOpenSyncBossSCm"
    "d\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016BOSSS_PROT"
    "OCMD\0228\n\005param\030\002 \001(\0162\017.Cmd.BossSParam:\030BO"
    "SSSPARAM_DEADBOSS_SYNC\022\037\n\004info\030\003 \001(\0132\021.C"
    "md.DeadBossInfo\"\271\001\n\022SummonBossBossSCmd\022)"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016BOSSS_PROTOCM"
    "D\0226\n\005param\030\002 \001(\0162\017.Cmd.BossSParam:\026BOSSS"
    "PARAM_BOSS_SUMMON\022\r\n\005mapid\030\003 \001(\r\022\r\n\005npci"
    "d\030\004 \001(\r\022\023\n\010bosstype\030\005 \001(\r:\0011\022\r\n\002lv\030\006 \001(\r"
    ":\0011\"\305\001\n\017BossDieBossSCmd\022)\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\016BOSSS_PROTOCMD\0223\n\005param\030\002 \001("
    "\0162\017.Cmd.BossSParam:\023BOSSSPARAM_BOSS_DIE\022"
    "\r\n\005npcid\030\003 \001(\r\022\016\n\006killer\030\004 \001(\t\022\016\n\006killid"
    "\030\005 \001(\004\022\r\n\005mapid\030\006 \001(\r\022\024\n\005reset\030\007 \001(\010:\005fa"
    "lse\"\227\001\n\024WorldBossNtfBossSCmd\022)\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\016BOSSS_PROTOCMD\0224\n\005param"
    "\030\002 \001(\0162\017.Cmd.BossSParam:\024BOSSSPARAM_WORL"
    "D_NTF\022\036\n\003ntf\030\003 \001(\0132\021.Cmd.WorldBossNtf\"q\n"
    "\017BossSetBossSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\016BOSSS_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd"
    ".BossSParam:\023BOSSSPARAM_BOSS_SET*\260\001\n\nBos"
    "sSParam\022\034\n\030BOSSSPARAM_DEADBOSS_OPEN\020\001\022\034\n"
    "\030BOSSSPARAM_DEADBOSS_SYNC\020\002\022\032\n\026BOSSSPARA"
    "M_BOSS_SUMMON\020\003\022\027\n\023BOSSSPARAM_BOSS_DIE\020\004"
    "\022\030\n\024BOSSSPARAM_WORLD_NTF\020\005\022\027\n\023BOSSSPARAM"
    "_BOSS_SET\020\006", 1291);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BossSCmd.proto", &protobuf_RegisterTypes);
  DeadBossInfo::default_instance_ = new DeadBossInfo();
  DeadBossOpenBossSCmd::default_instance_ = new DeadBossOpenBossSCmd();
  DeadBossOpenSyncBossSCmd::default_instance_ = new DeadBossOpenSyncBossSCmd();
  SummonBossBossSCmd::default_instance_ = new SummonBossBossSCmd();
  BossDieBossSCmd::default_instance_ = new BossDieBossSCmd();
  WorldBossNtfBossSCmd::default_instance_ = new WorldBossNtfBossSCmd();
  BossSetBossSCmd::default_instance_ = new BossSetBossSCmd();
  DeadBossInfo::default_instance_->InitAsDefaultInstance();
  DeadBossOpenBossSCmd::default_instance_->InitAsDefaultInstance();
  DeadBossOpenSyncBossSCmd::default_instance_->InitAsDefaultInstance();
  SummonBossBossSCmd::default_instance_->InitAsDefaultInstance();
  BossDieBossSCmd::default_instance_->InitAsDefaultInstance();
  WorldBossNtfBossSCmd::default_instance_->InitAsDefaultInstance();
  BossSetBossSCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BossSCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BossSCmd_2eproto {
  StaticDescriptorInitializer_BossSCmd_2eproto() {
    protobuf_AddDesc_BossSCmd_2eproto();
  }
} static_descriptor_initializer_BossSCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* BossSParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossSParam_descriptor_;
}
bool BossSParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DeadBossInfo::kCharidFieldNumber;
const int DeadBossInfo::kZoneidFieldNumber;
const int DeadBossInfo::kTimeFieldNumber;
const int DeadBossInfo::kNameFieldNumber;
#endif  // !_MSC_VER

DeadBossInfo::DeadBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeadBossInfo)
}

void DeadBossInfo::InitAsDefaultInstance() {
}

DeadBossInfo::DeadBossInfo(const DeadBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeadBossInfo)
}

void DeadBossInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadBossInfo::~DeadBossInfo() {
  // @@protoc_insertion_point(destructor:Cmd.DeadBossInfo)
  SharedDtor();
}

void DeadBossInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DeadBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadBossInfo_descriptor_;
}

const DeadBossInfo& DeadBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossSCmd_2eproto();
  return *default_instance_;
}

DeadBossInfo* DeadBossInfo::default_instance_ = NULL;

DeadBossInfo* DeadBossInfo::New() const {
  return new DeadBossInfo;
}

void DeadBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeadBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeadBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeadBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeadBossInfo)
  return false;
#undef DO_
}

void DeadBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeadBossInfo)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeadBossInfo)
}

::google::protobuf::uint8* DeadBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeadBossInfo)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeadBossInfo)
  return target;
}

int DeadBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadBossInfo::MergeFrom(const DeadBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadBossInfo::CopyFrom(const DeadBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadBossInfo::IsInitialized() const {

  return true;
}

void DeadBossInfo::Swap(DeadBossInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadBossInfo_descriptor_;
  metadata.reflection = DeadBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeadBossOpenBossSCmd::kCmdFieldNumber;
const int DeadBossOpenBossSCmd::kParamFieldNumber;
const int DeadBossOpenBossSCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

DeadBossOpenBossSCmd::DeadBossOpenBossSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeadBossOpenBossSCmd)
}

void DeadBossOpenBossSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::DeadBossInfo*>(&::Cmd::DeadBossInfo::default_instance());
}

DeadBossOpenBossSCmd::DeadBossOpenBossSCmd(const DeadBossOpenBossSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeadBossOpenBossSCmd)
}

void DeadBossOpenBossSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 216;
  param_ = 1;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadBossOpenBossSCmd::~DeadBossOpenBossSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeadBossOpenBossSCmd)
  SharedDtor();
}

void DeadBossOpenBossSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DeadBossOpenBossSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadBossOpenBossSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadBossOpenBossSCmd_descriptor_;
}

const DeadBossOpenBossSCmd& DeadBossOpenBossSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossSCmd_2eproto();
  return *default_instance_;
}

DeadBossOpenBossSCmd* DeadBossOpenBossSCmd::default_instance_ = NULL;

DeadBossOpenBossSCmd* DeadBossOpenBossSCmd::New() const {
  return new DeadBossOpenBossSCmd;
}

void DeadBossOpenBossSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 216;
    param_ = 1;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::DeadBossInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadBossOpenBossSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeadBossOpenBossSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_OPEN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Cmd.DeadBossInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeadBossOpenBossSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeadBossOpenBossSCmd)
  return false;
#undef DO_
}

void DeadBossOpenBossSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeadBossOpenBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_OPEN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.DeadBossInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeadBossOpenBossSCmd)
}

::google::protobuf::uint8* DeadBossOpenBossSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeadBossOpenBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_OPEN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.DeadBossInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeadBossOpenBossSCmd)
  return target;
}

int DeadBossOpenBossSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_OPEN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.DeadBossInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadBossOpenBossSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadBossOpenBossSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadBossOpenBossSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadBossOpenBossSCmd::MergeFrom(const DeadBossOpenBossSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::DeadBossInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadBossOpenBossSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadBossOpenBossSCmd::CopyFrom(const DeadBossOpenBossSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadBossOpenBossSCmd::IsInitialized() const {

  return true;
}

void DeadBossOpenBossSCmd::Swap(DeadBossOpenBossSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadBossOpenBossSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadBossOpenBossSCmd_descriptor_;
  metadata.reflection = DeadBossOpenBossSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeadBossOpenSyncBossSCmd::kCmdFieldNumber;
const int DeadBossOpenSyncBossSCmd::kParamFieldNumber;
const int DeadBossOpenSyncBossSCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

DeadBossOpenSyncBossSCmd::DeadBossOpenSyncBossSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeadBossOpenSyncBossSCmd)
}

void DeadBossOpenSyncBossSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::DeadBossInfo*>(&::Cmd::DeadBossInfo::default_instance());
}

DeadBossOpenSyncBossSCmd::DeadBossOpenSyncBossSCmd(const DeadBossOpenSyncBossSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeadBossOpenSyncBossSCmd)
}

void DeadBossOpenSyncBossSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 216;
  param_ = 2;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeadBossOpenSyncBossSCmd::~DeadBossOpenSyncBossSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeadBossOpenSyncBossSCmd)
  SharedDtor();
}

void DeadBossOpenSyncBossSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DeadBossOpenSyncBossSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeadBossOpenSyncBossSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeadBossOpenSyncBossSCmd_descriptor_;
}

const DeadBossOpenSyncBossSCmd& DeadBossOpenSyncBossSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossSCmd_2eproto();
  return *default_instance_;
}

DeadBossOpenSyncBossSCmd* DeadBossOpenSyncBossSCmd::default_instance_ = NULL;

DeadBossOpenSyncBossSCmd* DeadBossOpenSyncBossSCmd::New() const {
  return new DeadBossOpenSyncBossSCmd;
}

void DeadBossOpenSyncBossSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 216;
    param_ = 2;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::DeadBossInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeadBossOpenSyncBossSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeadBossOpenSyncBossSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Cmd.DeadBossInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeadBossOpenSyncBossSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeadBossOpenSyncBossSCmd)
  return false;
#undef DO_
}

void DeadBossOpenSyncBossSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeadBossOpenSyncBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.DeadBossInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeadBossOpenSyncBossSCmd)
}

::google::protobuf::uint8* DeadBossOpenSyncBossSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeadBossOpenSyncBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.DeadBossInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeadBossOpenSyncBossSCmd)
  return target;
}

int DeadBossOpenSyncBossSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.DeadBossInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeadBossOpenSyncBossSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeadBossOpenSyncBossSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeadBossOpenSyncBossSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeadBossOpenSyncBossSCmd::MergeFrom(const DeadBossOpenSyncBossSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::DeadBossInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeadBossOpenSyncBossSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadBossOpenSyncBossSCmd::CopyFrom(const DeadBossOpenSyncBossSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadBossOpenSyncBossSCmd::IsInitialized() const {

  return true;
}

void DeadBossOpenSyncBossSCmd::Swap(DeadBossOpenSyncBossSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeadBossOpenSyncBossSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeadBossOpenSyncBossSCmd_descriptor_;
  metadata.reflection = DeadBossOpenSyncBossSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummonBossBossSCmd::kCmdFieldNumber;
const int SummonBossBossSCmd::kParamFieldNumber;
const int SummonBossBossSCmd::kMapidFieldNumber;
const int SummonBossBossSCmd::kNpcidFieldNumber;
const int SummonBossBossSCmd::kBosstypeFieldNumber;
const int SummonBossBossSCmd::kLvFieldNumber;
#endif  // !_MSC_VER

SummonBossBossSCmd::SummonBossBossSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SummonBossBossSCmd)
}

void SummonBossBossSCmd::InitAsDefaultInstance() {
}

SummonBossBossSCmd::SummonBossBossSCmd(const SummonBossBossSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SummonBossBossSCmd)
}

void SummonBossBossSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 216;
  param_ = 3;
  mapid_ = 0u;
  npcid_ = 0u;
  bosstype_ = 1u;
  lv_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummonBossBossSCmd::~SummonBossBossSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SummonBossBossSCmd)
  SharedDtor();
}

void SummonBossBossSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummonBossBossSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummonBossBossSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummonBossBossSCmd_descriptor_;
}

const SummonBossBossSCmd& SummonBossBossSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossSCmd_2eproto();
  return *default_instance_;
}

SummonBossBossSCmd* SummonBossBossSCmd::default_instance_ = NULL;

SummonBossBossSCmd* SummonBossBossSCmd::New() const {
  return new SummonBossBossSCmd;
}

void SummonBossBossSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SummonBossBossSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mapid_, npcid_);
    cmd_ = 216;
    param_ = 3;
    bosstype_ = 1u;
    lv_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummonBossBossSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SummonBossBossSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SUMMON];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint32 npcid = 4;
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bosstype;
        break;
      }

      // optional uint32 bosstype = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_bosstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SummonBossBossSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SummonBossBossSCmd)
  return false;
#undef DO_
}

void SummonBossBossSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SummonBossBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SUMMON];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional uint32 npcid = 4;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npcid(), output);
  }

  // optional uint32 bosstype = 5 [default = 1];
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bosstype(), output);
  }

  // optional uint32 lv = 6 [default = 1];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SummonBossBossSCmd)
}

::google::protobuf::uint8* SummonBossBossSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SummonBossBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SUMMON];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional uint32 npcid = 4;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npcid(), target);
  }

  // optional uint32 bosstype = 5 [default = 1];
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bosstype(), target);
  }

  // optional uint32 lv = 6 [default = 1];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SummonBossBossSCmd)
  return target;
}

int SummonBossBossSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SUMMON];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 npcid = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint32 bosstype = 5 [default = 1];
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosstype());
    }

    // optional uint32 lv = 6 [default = 1];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummonBossBossSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummonBossBossSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummonBossBossSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummonBossBossSCmd::MergeFrom(const SummonBossBossSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummonBossBossSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummonBossBossSCmd::CopyFrom(const SummonBossBossSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonBossBossSCmd::IsInitialized() const {

  return true;
}

void SummonBossBossSCmd::Swap(SummonBossBossSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(npcid_, other->npcid_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummonBossBossSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummonBossBossSCmd_descriptor_;
  metadata.reflection = SummonBossBossSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDieBossSCmd::kCmdFieldNumber;
const int BossDieBossSCmd::kParamFieldNumber;
const int BossDieBossSCmd::kNpcidFieldNumber;
const int BossDieBossSCmd::kKillerFieldNumber;
const int BossDieBossSCmd::kKillidFieldNumber;
const int BossDieBossSCmd::kMapidFieldNumber;
const int BossDieBossSCmd::kResetFieldNumber;
#endif  // !_MSC_VER

BossDieBossSCmd::BossDieBossSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BossDieBossSCmd)
}

void BossDieBossSCmd::InitAsDefaultInstance() {
}

BossDieBossSCmd::BossDieBossSCmd(const BossDieBossSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BossDieBossSCmd)
}

void BossDieBossSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 216;
  param_ = 4;
  npcid_ = 0u;
  killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  killid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDieBossSCmd::~BossDieBossSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BossDieBossSCmd)
  SharedDtor();
}

void BossDieBossSCmd::SharedDtor() {
  if (killer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete killer_;
  }
  if (this != default_instance_) {
  }
}

void BossDieBossSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDieBossSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDieBossSCmd_descriptor_;
}

const BossDieBossSCmd& BossDieBossSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossSCmd_2eproto();
  return *default_instance_;
}

BossDieBossSCmd* BossDieBossSCmd::default_instance_ = NULL;

BossDieBossSCmd* BossDieBossSCmd::New() const {
  return new BossDieBossSCmd;
}

void BossDieBossSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossDieBossSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(npcid_, reset_);
    cmd_ = 216;
    param_ = 4;
    if (has_killer()) {
      if (killer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        killer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDieBossSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BossDieBossSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_DIE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint32 npcid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_killer;
        break;
      }

      // optional string killer = 4;
      case 4: {
        if (tag == 34) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->killer().data(), this->killer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "killer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killid;
        break;
      }

      // optional uint64 killid = 5;
      case 5: {
        if (tag == 40) {
         parse_killid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killid_)));
          set_has_killid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 6;
      case 6: {
        if (tag == 48) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reset;
        break;
      }

      // optional bool reset = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BossDieBossSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BossDieBossSCmd)
  return false;
#undef DO_
}

void BossDieBossSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BossDieBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_DIE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 npcid = 3;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }

  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->killer(), output);
  }

  // optional uint64 killid = 5;
  if (has_killid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->killid(), output);
  }

  // optional uint32 mapid = 6;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mapid(), output);
  }

  // optional bool reset = 7 [default = false];
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BossDieBossSCmd)
}

::google::protobuf::uint8* BossDieBossSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BossDieBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_DIE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 npcid = 3;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }

  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->killer(), target);
  }

  // optional uint64 killid = 5;
  if (has_killid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->killid(), target);
  }

  // optional uint32 mapid = 6;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mapid(), target);
  }

  // optional bool reset = 7 [default = false];
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BossDieBossSCmd)
  return target;
}

int BossDieBossSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_DIE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 npcid = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional string killer = 4;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer());
    }

    // optional uint64 killid = 5;
    if (has_killid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killid());
    }

    // optional uint32 mapid = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional bool reset = 7 [default = false];
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDieBossSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDieBossSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDieBossSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDieBossSCmd::MergeFrom(const BossDieBossSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
    if (from.has_killid()) {
      set_killid(from.killid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDieBossSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDieBossSCmd::CopyFrom(const BossDieBossSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDieBossSCmd::IsInitialized() const {

  return true;
}

void BossDieBossSCmd::Swap(BossDieBossSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(killer_, other->killer_);
    std::swap(killid_, other->killid_);
    std::swap(mapid_, other->mapid_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDieBossSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDieBossSCmd_descriptor_;
  metadata.reflection = BossDieBossSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossNtfBossSCmd::kCmdFieldNumber;
const int WorldBossNtfBossSCmd::kParamFieldNumber;
const int WorldBossNtfBossSCmd::kNtfFieldNumber;
#endif  // !_MSC_VER

WorldBossNtfBossSCmd::WorldBossNtfBossSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorldBossNtfBossSCmd)
}

void WorldBossNtfBossSCmd::InitAsDefaultInstance() {
  ntf_ = const_cast< ::Cmd::WorldBossNtf*>(&::Cmd::WorldBossNtf::default_instance());
}

WorldBossNtfBossSCmd::WorldBossNtfBossSCmd(const WorldBossNtfBossSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorldBossNtfBossSCmd)
}

void WorldBossNtfBossSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 216;
  param_ = 5;
  ntf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossNtfBossSCmd::~WorldBossNtfBossSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WorldBossNtfBossSCmd)
  SharedDtor();
}

void WorldBossNtfBossSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete ntf_;
  }
}

void WorldBossNtfBossSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossNtfBossSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossNtfBossSCmd_descriptor_;
}

const WorldBossNtfBossSCmd& WorldBossNtfBossSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossSCmd_2eproto();
  return *default_instance_;
}

WorldBossNtfBossSCmd* WorldBossNtfBossSCmd::default_instance_ = NULL;

WorldBossNtfBossSCmd* WorldBossNtfBossSCmd::New() const {
  return new WorldBossNtfBossSCmd;
}

void WorldBossNtfBossSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 216;
    param_ = 5;
    if (has_ntf()) {
      if (ntf_ != NULL) ntf_->::Cmd::WorldBossNtf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossNtfBossSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorldBossNtfBossSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_WORLD_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ntf;
        break;
      }

      // optional .Cmd.WorldBossNtf ntf = 3;
      case 3: {
        if (tag == 26) {
         parse_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ntf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorldBossNtfBossSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorldBossNtfBossSCmd)
  return false;
#undef DO_
}

void WorldBossNtfBossSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorldBossNtfBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_WORLD_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.WorldBossNtf ntf = 3;
  if (has_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ntf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorldBossNtfBossSCmd)
}

::google::protobuf::uint8* WorldBossNtfBossSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorldBossNtfBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_WORLD_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.WorldBossNtf ntf = 3;
  if (has_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ntf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorldBossNtfBossSCmd)
  return target;
}

int WorldBossNtfBossSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_WORLD_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.WorldBossNtf ntf = 3;
    if (has_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ntf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossNtfBossSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossNtfBossSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossNtfBossSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossNtfBossSCmd::MergeFrom(const WorldBossNtfBossSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ntf()) {
      mutable_ntf()->::Cmd::WorldBossNtf::MergeFrom(from.ntf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossNtfBossSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossNtfBossSCmd::CopyFrom(const WorldBossNtfBossSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossNtfBossSCmd::IsInitialized() const {

  return true;
}

void WorldBossNtfBossSCmd::Swap(WorldBossNtfBossSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ntf_, other->ntf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossNtfBossSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossNtfBossSCmd_descriptor_;
  metadata.reflection = WorldBossNtfBossSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossSetBossSCmd::kCmdFieldNumber;
const int BossSetBossSCmd::kParamFieldNumber;
#endif  // !_MSC_VER

BossSetBossSCmd::BossSetBossSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BossSetBossSCmd)
}

void BossSetBossSCmd::InitAsDefaultInstance() {
}

BossSetBossSCmd::BossSetBossSCmd(const BossSetBossSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BossSetBossSCmd)
}

void BossSetBossSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 216;
  param_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossSetBossSCmd::~BossSetBossSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BossSetBossSCmd)
  SharedDtor();
}

void BossSetBossSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossSetBossSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossSetBossSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossSetBossSCmd_descriptor_;
}

const BossSetBossSCmd& BossSetBossSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossSCmd_2eproto();
  return *default_instance_;
}

BossSetBossSCmd* BossSetBossSCmd::default_instance_ = NULL;

BossSetBossSCmd* BossSetBossSCmd::New() const {
  return new BossSetBossSCmd;
}

void BossSetBossSCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 216;
    param_ = 6;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossSetBossSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BossSetBossSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BossSetBossSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BossSetBossSCmd)
  return false;
#undef DO_
}

void BossSetBossSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BossSetBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BossSetBossSCmd)
}

::google::protobuf::uint8* BossSetBossSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BossSetBossSCmd)
  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BossSetBossSCmd)
  return target;
}

int BossSetBossSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossSetBossSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossSetBossSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossSetBossSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossSetBossSCmd::MergeFrom(const BossSetBossSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossSetBossSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossSetBossSCmd::CopyFrom(const BossSetBossSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossSetBossSCmd::IsInitialized() const {

  return true;
}

void BossSetBossSCmd::Swap(BossSetBossSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossSetBossSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossSetBossSCmd_descriptor_;
  metadata.reflection = BossSetBossSCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
