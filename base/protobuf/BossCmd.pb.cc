// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BossCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BossCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* BossInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossListUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossListUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossPosUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossPosUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillBossUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillBossUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossKillerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossKillerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryKillerInfoBossCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryKillerInfoBossCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepSyncBossCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepSyncBossCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BossParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBossRefreshState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBossStep_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BossCmd_2eproto() {
  protobuf_AddDesc_BossCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BossCmd.proto");
  GOOGLE_CHECK(file != NULL);
  BossInfoItem_descriptor_ = file->message_type(0);
  static const int BossInfoItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, dietime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, summontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, settime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, refreshstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, lastkiller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, charid_),
  };
  BossInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossInfoItem_descriptor_,
      BossInfoItem::default_instance_,
      BossInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossInfoItem));
  BossListUserCmd_descriptor_ = file->message_type(1);
  static const int BossListUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossListUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossListUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossListUserCmd, bosslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossListUserCmd, minilist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossListUserCmd, deadlist_),
  };
  BossListUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossListUserCmd_descriptor_,
      BossListUserCmd::default_instance_,
      BossListUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossListUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossListUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossListUserCmd));
  BossPosUserCmd_descriptor_ = file->message_type(2);
  static const int BossPosUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPosUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPosUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPosUserCmd, pos_),
  };
  BossPosUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossPosUserCmd_descriptor_,
      BossPosUserCmd::default_instance_,
      BossPosUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPosUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPosUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossPosUserCmd));
  KillBossUserCmd_descriptor_ = file->message_type(3);
  static const int KillBossUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillBossUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillBossUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillBossUserCmd, userid_),
  };
  KillBossUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillBossUserCmd_descriptor_,
      KillBossUserCmd::default_instance_,
      KillBossUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillBossUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillBossUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillBossUserCmd));
  BossKillerData_descriptor_ = file->message_type(4);
  static const int BossKillerData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, baselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, blink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, guildname_),
  };
  BossKillerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossKillerData_descriptor_,
      BossKillerData::default_instance_,
      BossKillerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossKillerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossKillerData));
  QueryKillerInfoBossCmd_descriptor_ = file->message_type(5);
  static const int QueryKillerInfoBossCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryKillerInfoBossCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryKillerInfoBossCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryKillerInfoBossCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryKillerInfoBossCmd, userdata_),
  };
  QueryKillerInfoBossCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryKillerInfoBossCmd_descriptor_,
      QueryKillerInfoBossCmd::default_instance_,
      QueryKillerInfoBossCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryKillerInfoBossCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryKillerInfoBossCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryKillerInfoBossCmd));
  WorldBossNtf_descriptor_ = file->message_type(6);
  static const int WorldBossNtf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, open_),
  };
  WorldBossNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossNtf_descriptor_,
      WorldBossNtf::default_instance_,
      WorldBossNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossNtf));
  StepSyncBossCmd_descriptor_ = file->message_type(7);
  static const int StepSyncBossCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSyncBossCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSyncBossCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSyncBossCmd, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSyncBossCmd, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSyncBossCmd, params_),
  };
  StepSyncBossCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepSyncBossCmd_descriptor_,
      StepSyncBossCmd::default_instance_,
      StepSyncBossCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSyncBossCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSyncBossCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepSyncBossCmd));
  BossParam_descriptor_ = file->enum_type(0);
  EBossRefreshState_descriptor_ = file->enum_type(1);
  EBossStep_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BossCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossInfoItem_descriptor_, &BossInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossListUserCmd_descriptor_, &BossListUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossPosUserCmd_descriptor_, &BossPosUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillBossUserCmd_descriptor_, &KillBossUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossKillerData_descriptor_, &BossKillerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryKillerInfoBossCmd_descriptor_, &QueryKillerInfoBossCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossNtf_descriptor_, &WorldBossNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepSyncBossCmd_descriptor_, &StepSyncBossCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BossCmd_2eproto() {
  delete BossInfoItem::default_instance_;
  delete BossInfoItem_reflection_;
  delete BossListUserCmd::default_instance_;
  delete BossListUserCmd_reflection_;
  delete BossPosUserCmd::default_instance_;
  delete BossPosUserCmd_reflection_;
  delete KillBossUserCmd::default_instance_;
  delete KillBossUserCmd_reflection_;
  delete BossKillerData::default_instance_;
  delete BossKillerData_reflection_;
  delete QueryKillerInfoBossCmd::default_instance_;
  delete QueryKillerInfoBossCmd_reflection_;
  delete WorldBossNtf::default_instance_;
  delete WorldBossNtf_reflection_;
  delete StepSyncBossCmd::default_instance_;
  delete StepSyncBossCmd_reflection_;
}

void protobuf_AddDesc_BossCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rBossCmd.proto\022\003Cmd\032\nxCmd.proto\032\021ProtoC"
    "ommon.proto\"\373\001\n\014BossInfoItem\022\n\n\002id\030\001 \001(\r"
    "\022\026\n\013refreshTime\030\002 \001(\r:\0010\022\022\n\007dietime\030\t \001("
    "\r:\0010\022\025\n\nsummontime\030\n \001(\r:\0010\022\r\n\005mapid\030\004 \001"
    "(\r\022\022\n\007settime\030\007 \001(\r:\0010\022\r\n\002lv\030\010 \001(\r:\0010\022C\n"
    "\014refreshstate\030\005 \001(\0162\026.Cmd.EBossRefreshSt"
    "ate:\025EBOSSREFRESHSTATE_MIN\022\022\n\nlastKiller"
    "\030\003 \001(\t\022\021\n\006charid\030\006 \001(\004:\0010\"\343\001\n\017BossListUs"
    "erCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE_"
    "BOSS_PROTOCMD\0221\n\005param\030\002 \001(\0162\016.Cmd.BossP"
    "aram:\022BOSS_LIST_USER_CMD\022#\n\010bosslist\030\003 \003"
    "(\0132\021.Cmd.BossInfoItem\022#\n\010minilist\030\004 \003(\0132"
    "\021.Cmd.BossInfoItem\022#\n\010deadlist\030\005 \003(\0132\021.C"
    "md.BossInfoItem\"\216\001\n\016BossPosUserCmd\022.\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\023SCENE_BOSS_PROTOC"
    "MD\0220\n\005param\030\002 \001(\0162\016.Cmd.BossParam:\021BOSS_"
    "POS_USER_CMD\022\032\n\003pos\030\003 \001(\0132\r.Cmd.ScenePos"
    "\"\207\001\n\017KillBossUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\023SCENE_BOSS_PROTOCMD\0221\n\005param\030\002 "
    "\001(\0162\016.Cmd.BossParam:\022BOSS_KILL_USER_CMD\022"
    "\021\n\006userid\030\003 \001(\004:\0010\"\243\002\n\016BossKillerData\022\021\n"
    "\006charid\030\001 \001(\004:\0010\022\020\n\010portrait\030\002 \001(\r\022\021\n\tba"
    "selevel\030\004 \001(\r\022\014\n\004hair\030\005 \001(\r\022\021\n\thaircolor"
    "\030\006 \001(\r\022\014\n\004body\030\007 \001(\r\022\014\n\004head\030\010 \001(\r\022\014\n\004fa"
    "ce\030\t \001(\r\022\r\n\005mouth\030\n \001(\r\022\013\n\003eye\030\013 \001(\r\022\r\n\005"
    "blink\030\014 \001(\r\022$\n\nprofession\030\r \001(\0162\020.Cmd.EP"
    "rofession\022\034\n\006gender\030\016 \001(\0162\014.Cmd.EGender\022"
    "\014\n\004name\030\017 \001(\t\022\021\n\tguildname\030\020 \001(\t\"\262\001\n\026Que"
    "ryKillerInfoBossCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\023SCENE_BOSS_PROTOCMD\0221\n\005param\030\002 \001"
    "(\0162\016.Cmd.BossParam:\022BOSS_USER_INFO_CMD\022\016"
    "\n\006charid\030\003 \001(\004\022%\n\010userdata\030\004 \001(\0132\023.Cmd.B"
    "ossKillerData\"\267\001\n\014WorldBossNtf\022.\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\023SCENE_BOSS_PROTOCMD\022-"
    "\n\005param\030\002 \001(\0162\016.Cmd.BossParam:\016BOSS_WORL"
    "D_NTF\022\020\n\005npcid\030\003 \001(\r:\0010\022\020\n\005mapid\030\004 \001(\r:\001"
    "0\022\017\n\004time\030\005 \001(\r:\0010\022\023\n\004open\030\006 \001(\010:\005false\""
    "\321\001\n\017StepSyncBossCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\023SCENE_BOSS_PROTOCMD\022-\n\005param\030\002 \001"
    "(\0162\016.Cmd.BossParam:\016BOSS_STEP_SYNC\022\020\n\005ac"
    "tid\030\003 \001(\r:\0010\022+\n\004step\030\004 \001(\0162\016.Cmd.EBossSt"
    "ep:\rEBOSSSTEP_MIN\022 \n\006params\030\005 \001(\0132\020.Cmd."
    "ConfigParam*\222\001\n\tBossParam\022\026\n\022BOSS_LIST_U"
    "SER_CMD\020\001\022\025\n\021BOSS_POS_USER_CMD\020\002\022\026\n\022BOSS"
    "_KILL_USER_CMD\020\003\022\026\n\022BOSS_USER_INFO_CMD\020\004"
    "\022\022\n\016BOSS_WORLD_NTF\020\005\022\022\n\016BOSS_STEP_SYNC\020\006"
    "*\302\001\n\021EBossRefreshState\022\031\n\025EBOSSREFRESHST"
    "ATE_MIN\020\000\022\036\n\032EBOSSREFRESHSTATE_APPEARED\020"
    "\001\022\036\n\032EBOSSREFRESHSTATE_UPCOMING\020\002\022\033\n\027EBO"
    "SSREFRESHSTATE_SHORT\020\003\022\032\n\026EBOSSREFRESHST"
    "ATE_LONG\020\004\022\031\n\025EBOSSREFRESHSTATE_MAX\020\005*\252\002"
    "\n\tEBossStep\022\021\n\rEBOSSSTEP_MIN\020\000\022\023\n\017EBOSSS"
    "TEP_VISIT\020\001\022\024\n\020EBOSSSTEP_SUMMON\020\002\022\023\n\017EBO"
    "SSSTEP_CLEAR\020\003\022\022\n\016EBOSSSTEP_BOSS\020\004\022\021\n\rEB"
    "OSSSTEP_END\020\005\022\023\n\017EBOSSSTEP_LIMIT\020\007\022\024\n\020EB"
    "OSSSTEP_DIALOG\020\010\022\024\n\020EBOSSSTEP_STATUS\020\t\022\022"
    "\n\016EBOSSSTEP_WAIT\020\n\022\022\n\016EBOSSSTEP_KILL\020\013\022\023"
    "\n\017EBOSSSTEP_WORLD\020\014\022\022\n\016EBOSSSTEP_SHOW\020\r\022"
    "\021\n\rEBOSSSTEP_MAX\020\016", 2338);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BossCmd.proto", &protobuf_RegisterTypes);
  BossInfoItem::default_instance_ = new BossInfoItem();
  BossListUserCmd::default_instance_ = new BossListUserCmd();
  BossPosUserCmd::default_instance_ = new BossPosUserCmd();
  KillBossUserCmd::default_instance_ = new KillBossUserCmd();
  BossKillerData::default_instance_ = new BossKillerData();
  QueryKillerInfoBossCmd::default_instance_ = new QueryKillerInfoBossCmd();
  WorldBossNtf::default_instance_ = new WorldBossNtf();
  StepSyncBossCmd::default_instance_ = new StepSyncBossCmd();
  BossInfoItem::default_instance_->InitAsDefaultInstance();
  BossListUserCmd::default_instance_->InitAsDefaultInstance();
  BossPosUserCmd::default_instance_->InitAsDefaultInstance();
  KillBossUserCmd::default_instance_->InitAsDefaultInstance();
  BossKillerData::default_instance_->InitAsDefaultInstance();
  QueryKillerInfoBossCmd::default_instance_->InitAsDefaultInstance();
  WorldBossNtf::default_instance_->InitAsDefaultInstance();
  StepSyncBossCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BossCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BossCmd_2eproto {
  StaticDescriptorInitializer_BossCmd_2eproto() {
    protobuf_AddDesc_BossCmd_2eproto();
  }
} static_descriptor_initializer_BossCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* BossParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossParam_descriptor_;
}
bool BossParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBossRefreshState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBossRefreshState_descriptor_;
}
bool EBossRefreshState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBossStep_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBossStep_descriptor_;
}
bool EBossStep_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BossInfoItem::kIdFieldNumber;
const int BossInfoItem::kRefreshTimeFieldNumber;
const int BossInfoItem::kDietimeFieldNumber;
const int BossInfoItem::kSummontimeFieldNumber;
const int BossInfoItem::kMapidFieldNumber;
const int BossInfoItem::kSettimeFieldNumber;
const int BossInfoItem::kLvFieldNumber;
const int BossInfoItem::kRefreshstateFieldNumber;
const int BossInfoItem::kLastKillerFieldNumber;
const int BossInfoItem::kCharidFieldNumber;
#endif  // !_MSC_VER

BossInfoItem::BossInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BossInfoItem)
}

void BossInfoItem::InitAsDefaultInstance() {
}

BossInfoItem::BossInfoItem(const BossInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BossInfoItem)
}

void BossInfoItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  refreshtime_ = 0u;
  dietime_ = 0u;
  summontime_ = 0u;
  mapid_ = 0u;
  settime_ = 0u;
  lv_ = 0u;
  refreshstate_ = 0;
  lastkiller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossInfoItem::~BossInfoItem() {
  // @@protoc_insertion_point(destructor:Cmd.BossInfoItem)
  SharedDtor();
}

void BossInfoItem::SharedDtor() {
  if (lastkiller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastkiller_;
  }
  if (this != default_instance_) {
  }
}

void BossInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossInfoItem_descriptor_;
}

const BossInfoItem& BossInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

BossInfoItem* BossInfoItem::default_instance_ = NULL;

BossInfoItem* BossInfoItem::New() const {
  return new BossInfoItem;
}

void BossInfoItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossInfoItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, refreshstate_);
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_lastkiller()) {
      if (lastkiller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastkiller_->clear();
      }
    }
    charid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BossInfoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_refreshTime;
        break;
      }

      // optional uint32 refreshTime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_refreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lastKiller;
        break;
      }

      // optional string lastKiller = 3;
      case 3: {
        if (tag == 26) {
         parse_lastKiller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastkiller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastkiller().data(), this->lastkiller().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastkiller");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4;
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_refreshstate;
        break;
      }

      // optional .Cmd.EBossRefreshState refreshstate = 5 [default = EBOSSREFRESHSTATE_MIN];
      case 5: {
        if (tag == 40) {
         parse_refreshstate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBossRefreshState_IsValid(value)) {
            set_refreshstate(static_cast< ::Cmd::EBossRefreshState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_settime;
        break;
      }

      // optional uint32 settime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_settime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settime_)));
          set_has_settime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dietime;
        break;
      }

      // optional uint32 dietime = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_dietime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dietime_)));
          set_has_dietime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_summontime;
        break;
      }

      // optional uint32 summontime = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_summontime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summontime_)));
          set_has_summontime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BossInfoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BossInfoItem)
  return false;
#undef DO_
}

void BossInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BossInfoItem)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 refreshTime = 2 [default = 0];
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refreshtime(), output);
  }

  // optional string lastKiller = 3;
  if (has_lastkiller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastkiller().data(), this->lastkiller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastkiller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lastkiller(), output);
  }

  // optional uint32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional .Cmd.EBossRefreshState refreshstate = 5 [default = EBOSSREFRESHSTATE_MIN];
  if (has_refreshstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->refreshstate(), output);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional uint32 settime = 7 [default = 0];
  if (has_settime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->settime(), output);
  }

  // optional uint32 lv = 8 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lv(), output);
  }

  // optional uint32 dietime = 9 [default = 0];
  if (has_dietime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dietime(), output);
  }

  // optional uint32 summontime = 10 [default = 0];
  if (has_summontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->summontime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BossInfoItem)
}

::google::protobuf::uint8* BossInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BossInfoItem)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 refreshTime = 2 [default = 0];
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refreshtime(), target);
  }

  // optional string lastKiller = 3;
  if (has_lastkiller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastkiller().data(), this->lastkiller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastkiller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastkiller(), target);
  }

  // optional uint32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional .Cmd.EBossRefreshState refreshstate = 5 [default = EBOSSREFRESHSTATE_MIN];
  if (has_refreshstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->refreshstate(), target);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional uint32 settime = 7 [default = 0];
  if (has_settime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->settime(), target);
  }

  // optional uint32 lv = 8 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lv(), target);
  }

  // optional uint32 dietime = 9 [default = 0];
  if (has_dietime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dietime(), target);
  }

  // optional uint32 summontime = 10 [default = 0];
  if (has_summontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->summontime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BossInfoItem)
  return target;
}

int BossInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 refreshTime = 2 [default = 0];
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtime());
    }

    // optional uint32 dietime = 9 [default = 0];
    if (has_dietime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dietime());
    }

    // optional uint32 summontime = 10 [default = 0];
    if (has_summontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summontime());
    }

    // optional uint32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 settime = 7 [default = 0];
    if (has_settime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settime());
    }

    // optional uint32 lv = 8 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional .Cmd.EBossRefreshState refreshstate = 5 [default = EBOSSREFRESHSTATE_MIN];
    if (has_refreshstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->refreshstate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string lastKiller = 3;
    if (has_lastkiller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastkiller());
    }

    // optional uint64 charid = 6 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossInfoItem::MergeFrom(const BossInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_dietime()) {
      set_dietime(from.dietime());
    }
    if (from.has_summontime()) {
      set_summontime(from.summontime());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_settime()) {
      set_settime(from.settime());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_refreshstate()) {
      set_refreshstate(from.refreshstate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastkiller()) {
      set_lastkiller(from.lastkiller());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossInfoItem::CopyFrom(const BossInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossInfoItem::IsInitialized() const {

  return true;
}

void BossInfoItem::Swap(BossInfoItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(dietime_, other->dietime_);
    std::swap(summontime_, other->summontime_);
    std::swap(mapid_, other->mapid_);
    std::swap(settime_, other->settime_);
    std::swap(lv_, other->lv_);
    std::swap(refreshstate_, other->refreshstate_);
    std::swap(lastkiller_, other->lastkiller_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossInfoItem_descriptor_;
  metadata.reflection = BossInfoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossListUserCmd::kCmdFieldNumber;
const int BossListUserCmd::kParamFieldNumber;
const int BossListUserCmd::kBosslistFieldNumber;
const int BossListUserCmd::kMinilistFieldNumber;
const int BossListUserCmd::kDeadlistFieldNumber;
#endif  // !_MSC_VER

BossListUserCmd::BossListUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BossListUserCmd)
}

void BossListUserCmd::InitAsDefaultInstance() {
}

BossListUserCmd::BossListUserCmd(const BossListUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BossListUserCmd)
}

void BossListUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 15;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossListUserCmd::~BossListUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BossListUserCmd)
  SharedDtor();
}

void BossListUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossListUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossListUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossListUserCmd_descriptor_;
}

const BossListUserCmd& BossListUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

BossListUserCmd* BossListUserCmd::default_instance_ = NULL;

BossListUserCmd* BossListUserCmd::New() const {
  return new BossListUserCmd;
}

void BossListUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 15;
    param_ = 1;
  }
  bosslist_.Clear();
  minilist_.Clear();
  deadlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossListUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BossListUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossParam param = 2 [default = BOSS_LIST_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bosslist;
        break;
      }

      // repeated .Cmd.BossInfoItem bosslist = 3;
      case 3: {
        if (tag == 26) {
         parse_bosslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bosslist;
        if (input->ExpectTag(34)) goto parse_minilist;
        break;
      }

      // repeated .Cmd.BossInfoItem minilist = 4;
      case 4: {
        if (tag == 34) {
         parse_minilist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_minilist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_minilist;
        if (input->ExpectTag(42)) goto parse_deadlist;
        break;
      }

      // repeated .Cmd.BossInfoItem deadlist = 5;
      case 5: {
        if (tag == 42) {
         parse_deadlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deadlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_deadlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BossListUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BossListUserCmd)
  return false;
#undef DO_
}

void BossListUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BossListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_LIST_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.BossInfoItem bosslist = 3;
  for (int i = 0; i < this->bosslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bosslist(i), output);
  }

  // repeated .Cmd.BossInfoItem minilist = 4;
  for (int i = 0; i < this->minilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->minilist(i), output);
  }

  // repeated .Cmd.BossInfoItem deadlist = 5;
  for (int i = 0; i < this->deadlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deadlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BossListUserCmd)
}

::google::protobuf::uint8* BossListUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BossListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_LIST_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.BossInfoItem bosslist = 3;
  for (int i = 0; i < this->bosslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bosslist(i), target);
  }

  // repeated .Cmd.BossInfoItem minilist = 4;
  for (int i = 0; i < this->minilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->minilist(i), target);
  }

  // repeated .Cmd.BossInfoItem deadlist = 5;
  for (int i = 0; i < this->deadlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deadlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BossListUserCmd)
  return target;
}

int BossListUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossParam param = 2 [default = BOSS_LIST_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.BossInfoItem bosslist = 3;
  total_size += 1 * this->bosslist_size();
  for (int i = 0; i < this->bosslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosslist(i));
  }

  // repeated .Cmd.BossInfoItem minilist = 4;
  total_size += 1 * this->minilist_size();
  for (int i = 0; i < this->minilist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->minilist(i));
  }

  // repeated .Cmd.BossInfoItem deadlist = 5;
  total_size += 1 * this->deadlist_size();
  for (int i = 0; i < this->deadlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deadlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossListUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossListUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossListUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossListUserCmd::MergeFrom(const BossListUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosslist_.MergeFrom(from.bosslist_);
  minilist_.MergeFrom(from.minilist_);
  deadlist_.MergeFrom(from.deadlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossListUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossListUserCmd::CopyFrom(const BossListUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossListUserCmd::IsInitialized() const {

  return true;
}

void BossListUserCmd::Swap(BossListUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    bosslist_.Swap(&other->bosslist_);
    minilist_.Swap(&other->minilist_);
    deadlist_.Swap(&other->deadlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossListUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossListUserCmd_descriptor_;
  metadata.reflection = BossListUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossPosUserCmd::kCmdFieldNumber;
const int BossPosUserCmd::kParamFieldNumber;
const int BossPosUserCmd::kPosFieldNumber;
#endif  // !_MSC_VER

BossPosUserCmd::BossPosUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BossPosUserCmd)
}

void BossPosUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

BossPosUserCmd::BossPosUserCmd(const BossPosUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BossPosUserCmd)
}

void BossPosUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 15;
  param_ = 2;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossPosUserCmd::~BossPosUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BossPosUserCmd)
  SharedDtor();
}

void BossPosUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void BossPosUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossPosUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossPosUserCmd_descriptor_;
}

const BossPosUserCmd& BossPosUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

BossPosUserCmd* BossPosUserCmd::default_instance_ = NULL;

BossPosUserCmd* BossPosUserCmd::New() const {
  return new BossPosUserCmd;
}

void BossPosUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 15;
    param_ = 2;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossPosUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BossPosUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossParam param = 2 [default = BOSS_POS_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BossPosUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BossPosUserCmd)
  return false;
#undef DO_
}

void BossPosUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BossPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_POS_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BossPosUserCmd)
}

::google::protobuf::uint8* BossPosUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BossPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_POS_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BossPosUserCmd)
  return target;
}

int BossPosUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossParam param = 2 [default = BOSS_POS_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossPosUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossPosUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossPosUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossPosUserCmd::MergeFrom(const BossPosUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossPosUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossPosUserCmd::CopyFrom(const BossPosUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossPosUserCmd::IsInitialized() const {

  return true;
}

void BossPosUserCmd::Swap(BossPosUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossPosUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossPosUserCmd_descriptor_;
  metadata.reflection = BossPosUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillBossUserCmd::kCmdFieldNumber;
const int KillBossUserCmd::kParamFieldNumber;
const int KillBossUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

KillBossUserCmd::KillBossUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KillBossUserCmd)
}

void KillBossUserCmd::InitAsDefaultInstance() {
}

KillBossUserCmd::KillBossUserCmd(const KillBossUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KillBossUserCmd)
}

void KillBossUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 15;
  param_ = 3;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillBossUserCmd::~KillBossUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KillBossUserCmd)
  SharedDtor();
}

void KillBossUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillBossUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillBossUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillBossUserCmd_descriptor_;
}

const KillBossUserCmd& KillBossUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

KillBossUserCmd* KillBossUserCmd::default_instance_ = NULL;

KillBossUserCmd* KillBossUserCmd::New() const {
  return new KillBossUserCmd;
}

void KillBossUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 15;
    param_ = 3;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillBossUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KillBossUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossParam param = 2 [default = BOSS_KILL_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KillBossUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KillBossUserCmd)
  return false;
#undef DO_
}

void KillBossUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KillBossUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_KILL_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KillBossUserCmd)
}

::google::protobuf::uint8* KillBossUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KillBossUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_KILL_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KillBossUserCmd)
  return target;
}

int KillBossUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossParam param = 2 [default = BOSS_KILL_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillBossUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillBossUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillBossUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillBossUserCmd::MergeFrom(const KillBossUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillBossUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillBossUserCmd::CopyFrom(const KillBossUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillBossUserCmd::IsInitialized() const {

  return true;
}

void KillBossUserCmd::Swap(KillBossUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillBossUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillBossUserCmd_descriptor_;
  metadata.reflection = KillBossUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossKillerData::kCharidFieldNumber;
const int BossKillerData::kPortraitFieldNumber;
const int BossKillerData::kBaselevelFieldNumber;
const int BossKillerData::kHairFieldNumber;
const int BossKillerData::kHaircolorFieldNumber;
const int BossKillerData::kBodyFieldNumber;
const int BossKillerData::kHeadFieldNumber;
const int BossKillerData::kFaceFieldNumber;
const int BossKillerData::kMouthFieldNumber;
const int BossKillerData::kEyeFieldNumber;
const int BossKillerData::kBlinkFieldNumber;
const int BossKillerData::kProfessionFieldNumber;
const int BossKillerData::kGenderFieldNumber;
const int BossKillerData::kNameFieldNumber;
const int BossKillerData::kGuildnameFieldNumber;
#endif  // !_MSC_VER

BossKillerData::BossKillerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BossKillerData)
}

void BossKillerData::InitAsDefaultInstance() {
}

BossKillerData::BossKillerData(const BossKillerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BossKillerData)
}

void BossKillerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  portrait_ = 0u;
  baselevel_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  body_ = 0u;
  head_ = 0u;
  face_ = 0u;
  mouth_ = 0u;
  eye_ = 0u;
  blink_ = 0u;
  profession_ = 0;
  gender_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossKillerData::~BossKillerData() {
  // @@protoc_insertion_point(destructor:Cmd.BossKillerData)
  SharedDtor();
}

void BossKillerData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void BossKillerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossKillerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossKillerData_descriptor_;
}

const BossKillerData& BossKillerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

BossKillerData* BossKillerData::default_instance_ = NULL;

BossKillerData* BossKillerData::New() const {
  return new BossKillerData;
}

void BossKillerData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossKillerData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, face_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(mouth_, gender_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossKillerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BossKillerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 2;
      case 2: {
        if (tag == 16) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_baselevel;
        break;
      }

      // optional uint32 baselevel = 4;
      case 4: {
        if (tag == 32) {
         parse_baselevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselevel_)));
          set_has_baselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 5;
      case 5: {
        if (tag == 40) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 6;
      case 6: {
        if (tag == 48) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_body;
        break;
      }

      // optional uint32 body = 7;
      case 7: {
        if (tag == 56) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_head;
        break;
      }

      // optional uint32 head = 8;
      case 8: {
        if (tag == 64) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_face;
        break;
      }

      // optional uint32 face = 9;
      case 9: {
        if (tag == 72) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 10;
      case 10: {
        if (tag == 80) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 11;
      case 11: {
        if (tag == 88) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_blink;
        break;
      }

      // optional uint32 blink = 12;
      case 12: {
        if (tag == 96) {
         parse_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blink_)));
          set_has_blink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 13;
      case 13: {
        if (tag == 104) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 14;
      case 14: {
        if (tag == 112) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_name;
        break;
      }

      // optional string name = 15;
      case 15: {
        if (tag == 122) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_guildname;
        break;
      }

      // optional string guildname = 16;
      case 16: {
        if (tag == 130) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BossKillerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BossKillerData)
  return false;
#undef DO_
}

void BossKillerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BossKillerData)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 portrait = 2;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->portrait(), output);
  }

  // optional uint32 baselevel = 4;
  if (has_baselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->baselevel(), output);
  }

  // optional uint32 hair = 5;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hair(), output);
  }

  // optional uint32 haircolor = 6;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->haircolor(), output);
  }

  // optional uint32 body = 7;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->body(), output);
  }

  // optional uint32 head = 8;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->head(), output);
  }

  // optional uint32 face = 9;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->face(), output);
  }

  // optional uint32 mouth = 10;
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mouth(), output);
  }

  // optional uint32 eye = 11;
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->eye(), output);
  }

  // optional uint32 blink = 12;
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->blink(), output);
  }

  // optional .Cmd.EProfession profession = 13;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->profession(), output);
  }

  // optional .Cmd.EGender gender = 14;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->gender(), output);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->name(), output);
  }

  // optional string guildname = 16;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BossKillerData)
}

::google::protobuf::uint8* BossKillerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BossKillerData)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 portrait = 2;
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->portrait(), target);
  }

  // optional uint32 baselevel = 4;
  if (has_baselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->baselevel(), target);
  }

  // optional uint32 hair = 5;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hair(), target);
  }

  // optional uint32 haircolor = 6;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->haircolor(), target);
  }

  // optional uint32 body = 7;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->body(), target);
  }

  // optional uint32 head = 8;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->head(), target);
  }

  // optional uint32 face = 9;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->face(), target);
  }

  // optional uint32 mouth = 10;
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mouth(), target);
  }

  // optional uint32 eye = 11;
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->eye(), target);
  }

  // optional uint32 blink = 12;
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->blink(), target);
  }

  // optional .Cmd.EProfession profession = 13;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->profession(), target);
  }

  // optional .Cmd.EGender gender = 14;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->gender(), target);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->name(), target);
  }

  // optional string guildname = 16;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BossKillerData)
  return target;
}

int BossKillerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 portrait = 2;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 baselevel = 4;
    if (has_baselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baselevel());
    }

    // optional uint32 hair = 5;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 6;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 body = 7;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 head = 8;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 face = 9;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mouth = 10;
    if (has_mouth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

    // optional uint32 eye = 11;
    if (has_eye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional uint32 blink = 12;
    if (has_blink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blink());
    }

    // optional .Cmd.EProfession profession = 13;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional .Cmd.EGender gender = 14;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string name = 15;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildname = 16;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossKillerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossKillerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossKillerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossKillerData::MergeFrom(const BossKillerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_baselevel()) {
      set_baselevel(from.baselevel());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_blink()) {
      set_blink(from.blink());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossKillerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossKillerData::CopyFrom(const BossKillerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossKillerData::IsInitialized() const {

  return true;
}

void BossKillerData::Swap(BossKillerData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(portrait_, other->portrait_);
    std::swap(baselevel_, other->baselevel_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(body_, other->body_);
    std::swap(head_, other->head_);
    std::swap(face_, other->face_);
    std::swap(mouth_, other->mouth_);
    std::swap(eye_, other->eye_);
    std::swap(blink_, other->blink_);
    std::swap(profession_, other->profession_);
    std::swap(gender_, other->gender_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossKillerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossKillerData_descriptor_;
  metadata.reflection = BossKillerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryKillerInfoBossCmd::kCmdFieldNumber;
const int QueryKillerInfoBossCmd::kParamFieldNumber;
const int QueryKillerInfoBossCmd::kCharidFieldNumber;
const int QueryKillerInfoBossCmd::kUserdataFieldNumber;
#endif  // !_MSC_VER

QueryKillerInfoBossCmd::QueryKillerInfoBossCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryKillerInfoBossCmd)
}

void QueryKillerInfoBossCmd::InitAsDefaultInstance() {
  userdata_ = const_cast< ::Cmd::BossKillerData*>(&::Cmd::BossKillerData::default_instance());
}

QueryKillerInfoBossCmd::QueryKillerInfoBossCmd(const QueryKillerInfoBossCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryKillerInfoBossCmd)
}

void QueryKillerInfoBossCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 15;
  param_ = 4;
  charid_ = GOOGLE_ULONGLONG(0);
  userdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryKillerInfoBossCmd::~QueryKillerInfoBossCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryKillerInfoBossCmd)
  SharedDtor();
}

void QueryKillerInfoBossCmd::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
  }
}

void QueryKillerInfoBossCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryKillerInfoBossCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryKillerInfoBossCmd_descriptor_;
}

const QueryKillerInfoBossCmd& QueryKillerInfoBossCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

QueryKillerInfoBossCmd* QueryKillerInfoBossCmd::default_instance_ = NULL;

QueryKillerInfoBossCmd* QueryKillerInfoBossCmd::New() const {
  return new QueryKillerInfoBossCmd;
}

void QueryKillerInfoBossCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 15;
    param_ = 4;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::Cmd::BossKillerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryKillerInfoBossCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryKillerInfoBossCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossParam param = 2 [default = BOSS_USER_INFO_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userdata;
        break;
      }

      // optional .Cmd.BossKillerData userdata = 4;
      case 4: {
        if (tag == 34) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryKillerInfoBossCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryKillerInfoBossCmd)
  return false;
#undef DO_
}

void QueryKillerInfoBossCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryKillerInfoBossCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_USER_INFO_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.BossKillerData userdata = 4;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryKillerInfoBossCmd)
}

::google::protobuf::uint8* QueryKillerInfoBossCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryKillerInfoBossCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_USER_INFO_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.BossKillerData userdata = 4;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryKillerInfoBossCmd)
  return target;
}

int QueryKillerInfoBossCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossParam param = 2 [default = BOSS_USER_INFO_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.BossKillerData userdata = 4;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryKillerInfoBossCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryKillerInfoBossCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryKillerInfoBossCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryKillerInfoBossCmd::MergeFrom(const QueryKillerInfoBossCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_userdata()) {
      mutable_userdata()->::Cmd::BossKillerData::MergeFrom(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryKillerInfoBossCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryKillerInfoBossCmd::CopyFrom(const QueryKillerInfoBossCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryKillerInfoBossCmd::IsInitialized() const {

  return true;
}

void QueryKillerInfoBossCmd::Swap(QueryKillerInfoBossCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryKillerInfoBossCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryKillerInfoBossCmd_descriptor_;
  metadata.reflection = QueryKillerInfoBossCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossNtf::kCmdFieldNumber;
const int WorldBossNtf::kParamFieldNumber;
const int WorldBossNtf::kNpcidFieldNumber;
const int WorldBossNtf::kMapidFieldNumber;
const int WorldBossNtf::kTimeFieldNumber;
const int WorldBossNtf::kOpenFieldNumber;
#endif  // !_MSC_VER

WorldBossNtf::WorldBossNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorldBossNtf)
}

void WorldBossNtf::InitAsDefaultInstance() {
}

WorldBossNtf::WorldBossNtf(const WorldBossNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorldBossNtf)
}

void WorldBossNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 15;
  param_ = 5;
  npcid_ = 0u;
  mapid_ = 0u;
  time_ = 0u;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossNtf::~WorldBossNtf() {
  // @@protoc_insertion_point(destructor:Cmd.WorldBossNtf)
  SharedDtor();
}

void WorldBossNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossNtf_descriptor_;
}

const WorldBossNtf& WorldBossNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

WorldBossNtf* WorldBossNtf::default_instance_ = NULL;

WorldBossNtf* WorldBossNtf::New() const {
  return new WorldBossNtf;
}

void WorldBossNtf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldBossNtf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(npcid_, open_);
    cmd_ = 15;
    param_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorldBossNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossParam param = 2 [default = BOSS_WORLD_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint32 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_open;
        break;
      }

      // optional bool open = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorldBossNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorldBossNtf)
  return false;
#undef DO_
}

void WorldBossNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorldBossNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_WORLD_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional bool open = 6 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorldBossNtf)
}

::google::protobuf::uint8* WorldBossNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorldBossNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_WORLD_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional bool open = 6 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorldBossNtf)
  return target;
}

int WorldBossNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossParam param = 2 [default = BOSS_WORLD_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool open = 6 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossNtf::MergeFrom(const WorldBossNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossNtf::CopyFrom(const WorldBossNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossNtf::IsInitialized() const {

  return true;
}

void WorldBossNtf::Swap(WorldBossNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(mapid_, other->mapid_);
    std::swap(time_, other->time_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossNtf_descriptor_;
  metadata.reflection = WorldBossNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepSyncBossCmd::kCmdFieldNumber;
const int StepSyncBossCmd::kParamFieldNumber;
const int StepSyncBossCmd::kActidFieldNumber;
const int StepSyncBossCmd::kStepFieldNumber;
const int StepSyncBossCmd::kParamsFieldNumber;
#endif  // !_MSC_VER

StepSyncBossCmd::StepSyncBossCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StepSyncBossCmd)
}

void StepSyncBossCmd::InitAsDefaultInstance() {
  params_ = const_cast< ::Cmd::ConfigParam*>(&::Cmd::ConfigParam::default_instance());
}

StepSyncBossCmd::StepSyncBossCmd(const StepSyncBossCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StepSyncBossCmd)
}

void StepSyncBossCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 15;
  param_ = 6;
  actid_ = 0u;
  step_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepSyncBossCmd::~StepSyncBossCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StepSyncBossCmd)
  SharedDtor();
}

void StepSyncBossCmd::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void StepSyncBossCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepSyncBossCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepSyncBossCmd_descriptor_;
}

const StepSyncBossCmd& StepSyncBossCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BossCmd_2eproto();
  return *default_instance_;
}

StepSyncBossCmd* StepSyncBossCmd::default_instance_ = NULL;

StepSyncBossCmd* StepSyncBossCmd::New() const {
  return new StepSyncBossCmd;
}

void StepSyncBossCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StepSyncBossCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(actid_, step_);
    cmd_ = 15;
    param_ = 6;
    if (has_params()) {
      if (params_ != NULL) params_->::Cmd::ConfigParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepSyncBossCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StepSyncBossCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.BossParam param = 2 [default = BOSS_STEP_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::BossParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::BossParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actid;
        break;
      }

      // optional uint32 actid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_actid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_step;
        break;
      }

      // optional .Cmd.EBossStep step = 4 [default = EBOSSSTEP_MIN];
      case 4: {
        if (tag == 32) {
         parse_step:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBossStep_IsValid(value)) {
            set_step(static_cast< ::Cmd::EBossStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // optional .Cmd.ConfigParam params = 5;
      case 5: {
        if (tag == 42) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StepSyncBossCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StepSyncBossCmd)
  return false;
#undef DO_
}

void StepSyncBossCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StepSyncBossCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_STEP_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 actid = 3 [default = 0];
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->actid(), output);
  }

  // optional .Cmd.EBossStep step = 4 [default = EBOSSSTEP_MIN];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->step(), output);
  }

  // optional .Cmd.ConfigParam params = 5;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StepSyncBossCmd)
}

::google::protobuf::uint8* StepSyncBossCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StepSyncBossCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.BossParam param = 2 [default = BOSS_STEP_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 actid = 3 [default = 0];
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->actid(), target);
  }

  // optional .Cmd.EBossStep step = 4 [default = EBOSSSTEP_MIN];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->step(), target);
  }

  // optional .Cmd.ConfigParam params = 5;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StepSyncBossCmd)
  return target;
}

int StepSyncBossCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_BOSS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.BossParam param = 2 [default = BOSS_STEP_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 actid = 3 [default = 0];
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // optional .Cmd.EBossStep step = 4 [default = EBOSSSTEP_MIN];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional .Cmd.ConfigParam params = 5;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepSyncBossCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepSyncBossCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepSyncBossCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepSyncBossCmd::MergeFrom(const StepSyncBossCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_params()) {
      mutable_params()->::Cmd::ConfigParam::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepSyncBossCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepSyncBossCmd::CopyFrom(const StepSyncBossCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSyncBossCmd::IsInitialized() const {

  return true;
}

void StepSyncBossCmd::Swap(StepSyncBossCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(actid_, other->actid_);
    std::swap(step_, other->step_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepSyncBossCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepSyncBossCmd_descriptor_;
  metadata.reflection = StepSyncBossCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
