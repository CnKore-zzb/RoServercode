// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BossSCmd.proto

#ifndef PROTOBUF_BossSCmd_2eproto__INCLUDED
#define PROTOBUF_BossSCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "BossCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BossSCmd_2eproto();
void protobuf_AssignDesc_BossSCmd_2eproto();
void protobuf_ShutdownFile_BossSCmd_2eproto();

class DeadBossInfo;
class DeadBossOpenBossSCmd;
class DeadBossOpenSyncBossSCmd;
class SummonBossBossSCmd;
class BossDieBossSCmd;
class WorldBossNtfBossSCmd;
class BossSetBossSCmd;

enum BossSParam {
  BOSSSPARAM_DEADBOSS_OPEN = 1,
  BOSSSPARAM_DEADBOSS_SYNC = 2,
  BOSSSPARAM_BOSS_SUMMON = 3,
  BOSSSPARAM_BOSS_DIE = 4,
  BOSSSPARAM_WORLD_NTF = 5,
  BOSSSPARAM_BOSS_SET = 6
};
bool BossSParam_IsValid(int value);
const BossSParam BossSParam_MIN = BOSSSPARAM_DEADBOSS_OPEN;
const BossSParam BossSParam_MAX = BOSSSPARAM_BOSS_SET;
const int BossSParam_ARRAYSIZE = BossSParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* BossSParam_descriptor();
inline const ::std::string& BossSParam_Name(BossSParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    BossSParam_descriptor(), value);
}
inline bool BossSParam_Parse(
    const ::std::string& name, BossSParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BossSParam>(
    BossSParam_descriptor(), name, value);
}
// ===================================================================

class DeadBossInfo : public ::google::protobuf::Message {
 public:
  DeadBossInfo();
  virtual ~DeadBossInfo();

  DeadBossInfo(const DeadBossInfo& from);

  inline DeadBossInfo& operator=(const DeadBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeadBossInfo& default_instance();

  void Swap(DeadBossInfo* other);

  // implements Message ----------------------------------------------

  DeadBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeadBossInfo& from);
  void MergeFrom(const DeadBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 2 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.DeadBossInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 time_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_BossSCmd_2eproto();
  friend void protobuf_AssignDesc_BossSCmd_2eproto();
  friend void protobuf_ShutdownFile_BossSCmd_2eproto();

  void InitAsDefaultInstance();
  static DeadBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeadBossOpenBossSCmd : public ::google::protobuf::Message {
 public:
  DeadBossOpenBossSCmd();
  virtual ~DeadBossOpenBossSCmd();

  DeadBossOpenBossSCmd(const DeadBossOpenBossSCmd& from);

  inline DeadBossOpenBossSCmd& operator=(const DeadBossOpenBossSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeadBossOpenBossSCmd& default_instance();

  void Swap(DeadBossOpenBossSCmd* other);

  // implements Message ----------------------------------------------

  DeadBossOpenBossSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeadBossOpenBossSCmd& from);
  void MergeFrom(const DeadBossOpenBossSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_OPEN];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossSParam param() const;
  inline void set_param(::Cmd::BossSParam value);

  // optional .Cmd.DeadBossInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Cmd::DeadBossInfo& info() const;
  inline ::Cmd::DeadBossInfo* mutable_info();
  inline ::Cmd::DeadBossInfo* release_info();
  inline void set_allocated_info(::Cmd::DeadBossInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.DeadBossOpenBossSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::DeadBossInfo* info_;
  friend void  protobuf_AddDesc_BossSCmd_2eproto();
  friend void protobuf_AssignDesc_BossSCmd_2eproto();
  friend void protobuf_ShutdownFile_BossSCmd_2eproto();

  void InitAsDefaultInstance();
  static DeadBossOpenBossSCmd* default_instance_;
};
// -------------------------------------------------------------------

class DeadBossOpenSyncBossSCmd : public ::google::protobuf::Message {
 public:
  DeadBossOpenSyncBossSCmd();
  virtual ~DeadBossOpenSyncBossSCmd();

  DeadBossOpenSyncBossSCmd(const DeadBossOpenSyncBossSCmd& from);

  inline DeadBossOpenSyncBossSCmd& operator=(const DeadBossOpenSyncBossSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeadBossOpenSyncBossSCmd& default_instance();

  void Swap(DeadBossOpenSyncBossSCmd* other);

  // implements Message ----------------------------------------------

  DeadBossOpenSyncBossSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeadBossOpenSyncBossSCmd& from);
  void MergeFrom(const DeadBossOpenSyncBossSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_SYNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossSParam param() const;
  inline void set_param(::Cmd::BossSParam value);

  // optional .Cmd.DeadBossInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Cmd::DeadBossInfo& info() const;
  inline ::Cmd::DeadBossInfo* mutable_info();
  inline ::Cmd::DeadBossInfo* release_info();
  inline void set_allocated_info(::Cmd::DeadBossInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.DeadBossOpenSyncBossSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::DeadBossInfo* info_;
  friend void  protobuf_AddDesc_BossSCmd_2eproto();
  friend void protobuf_AssignDesc_BossSCmd_2eproto();
  friend void protobuf_ShutdownFile_BossSCmd_2eproto();

  void InitAsDefaultInstance();
  static DeadBossOpenSyncBossSCmd* default_instance_;
};
// -------------------------------------------------------------------

class SummonBossBossSCmd : public ::google::protobuf::Message {
 public:
  SummonBossBossSCmd();
  virtual ~SummonBossBossSCmd();

  SummonBossBossSCmd(const SummonBossBossSCmd& from);

  inline SummonBossBossSCmd& operator=(const SummonBossBossSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummonBossBossSCmd& default_instance();

  void Swap(SummonBossBossSCmd* other);

  // implements Message ----------------------------------------------

  SummonBossBossSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummonBossBossSCmd& from);
  void MergeFrom(const SummonBossBossSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SUMMON];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossSParam param() const;
  inline void set_param(::Cmd::BossSParam value);

  // optional uint32 mapid = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 npcid = 4;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 4;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional uint32 bosstype = 5 [default = 1];
  inline bool has_bosstype() const;
  inline void clear_bosstype();
  static const int kBosstypeFieldNumber = 5;
  inline ::google::protobuf::uint32 bosstype() const;
  inline void set_bosstype(::google::protobuf::uint32 value);

  // optional uint32 lv = 6 [default = 1];
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 6;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SummonBossBossSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_bosstype();
  inline void clear_has_bosstype();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 bosstype_;
  ::google::protobuf::uint32 lv_;
  friend void  protobuf_AddDesc_BossSCmd_2eproto();
  friend void protobuf_AssignDesc_BossSCmd_2eproto();
  friend void protobuf_ShutdownFile_BossSCmd_2eproto();

  void InitAsDefaultInstance();
  static SummonBossBossSCmd* default_instance_;
};
// -------------------------------------------------------------------

class BossDieBossSCmd : public ::google::protobuf::Message {
 public:
  BossDieBossSCmd();
  virtual ~BossDieBossSCmd();

  BossDieBossSCmd(const BossDieBossSCmd& from);

  inline BossDieBossSCmd& operator=(const BossDieBossSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDieBossSCmd& default_instance();

  void Swap(BossDieBossSCmd* other);

  // implements Message ----------------------------------------------

  BossDieBossSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDieBossSCmd& from);
  void MergeFrom(const BossDieBossSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_DIE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossSParam param() const;
  inline void set_param(::Cmd::BossSParam value);

  // optional uint32 npcid = 3;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional string killer = 4;
  inline bool has_killer() const;
  inline void clear_killer();
  static const int kKillerFieldNumber = 4;
  inline const ::std::string& killer() const;
  inline void set_killer(const ::std::string& value);
  inline void set_killer(const char* value);
  inline void set_killer(const char* value, size_t size);
  inline ::std::string* mutable_killer();
  inline ::std::string* release_killer();
  inline void set_allocated_killer(::std::string* killer);

  // optional uint64 killid = 5;
  inline bool has_killid() const;
  inline void clear_killid();
  static const int kKillidFieldNumber = 5;
  inline ::google::protobuf::uint64 killid() const;
  inline void set_killid(::google::protobuf::uint64 value);

  // optional uint32 mapid = 6;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 6;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional bool reset = 7 [default = false];
  inline bool has_reset() const;
  inline void clear_reset();
  static const int kResetFieldNumber = 7;
  inline bool reset() const;
  inline void set_reset(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BossDieBossSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_killer();
  inline void clear_has_killer();
  inline void set_has_killid();
  inline void clear_has_killid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_reset();
  inline void clear_has_reset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* killer_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint64 killid_;
  bool reset_;
  friend void  protobuf_AddDesc_BossSCmd_2eproto();
  friend void protobuf_AssignDesc_BossSCmd_2eproto();
  friend void protobuf_ShutdownFile_BossSCmd_2eproto();

  void InitAsDefaultInstance();
  static BossDieBossSCmd* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossNtfBossSCmd : public ::google::protobuf::Message {
 public:
  WorldBossNtfBossSCmd();
  virtual ~WorldBossNtfBossSCmd();

  WorldBossNtfBossSCmd(const WorldBossNtfBossSCmd& from);

  inline WorldBossNtfBossSCmd& operator=(const WorldBossNtfBossSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossNtfBossSCmd& default_instance();

  void Swap(WorldBossNtfBossSCmd* other);

  // implements Message ----------------------------------------------

  WorldBossNtfBossSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossNtfBossSCmd& from);
  void MergeFrom(const WorldBossNtfBossSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_WORLD_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossSParam param() const;
  inline void set_param(::Cmd::BossSParam value);

  // optional .Cmd.WorldBossNtf ntf = 3;
  inline bool has_ntf() const;
  inline void clear_ntf();
  static const int kNtfFieldNumber = 3;
  inline const ::Cmd::WorldBossNtf& ntf() const;
  inline ::Cmd::WorldBossNtf* mutable_ntf();
  inline ::Cmd::WorldBossNtf* release_ntf();
  inline void set_allocated_ntf(::Cmd::WorldBossNtf* ntf);

  // @@protoc_insertion_point(class_scope:Cmd.WorldBossNtfBossSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_ntf();
  inline void clear_has_ntf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::WorldBossNtf* ntf_;
  friend void  protobuf_AddDesc_BossSCmd_2eproto();
  friend void protobuf_AssignDesc_BossSCmd_2eproto();
  friend void protobuf_ShutdownFile_BossSCmd_2eproto();

  void InitAsDefaultInstance();
  static WorldBossNtfBossSCmd* default_instance_;
};
// -------------------------------------------------------------------

class BossSetBossSCmd : public ::google::protobuf::Message {
 public:
  BossSetBossSCmd();
  virtual ~BossSetBossSCmd();

  BossSetBossSCmd(const BossSetBossSCmd& from);

  inline BossSetBossSCmd& operator=(const BossSetBossSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossSetBossSCmd& default_instance();

  void Swap(BossSetBossSCmd* other);

  // implements Message ----------------------------------------------

  BossSetBossSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossSetBossSCmd& from);
  void MergeFrom(const BossSetBossSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SET];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::BossSParam param() const;
  inline void set_param(::Cmd::BossSParam value);

  // @@protoc_insertion_point(class_scope:Cmd.BossSetBossSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_BossSCmd_2eproto();
  friend void protobuf_AssignDesc_BossSCmd_2eproto();
  friend void protobuf_ShutdownFile_BossSCmd_2eproto();

  void InitAsDefaultInstance();
  static BossSetBossSCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// DeadBossInfo

// optional uint64 charid = 1 [default = 0];
inline bool DeadBossInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeadBossInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeadBossInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeadBossInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 DeadBossInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossInfo.charid)
  return charid_;
}
inline void DeadBossInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeadBossInfo.charid)
}

// optional uint32 zoneid = 2 [default = 0];
inline bool DeadBossInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeadBossInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeadBossInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeadBossInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 DeadBossInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossInfo.zoneid)
  return zoneid_;
}
inline void DeadBossInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeadBossInfo.zoneid)
}

// optional uint32 time = 3 [default = 0];
inline bool DeadBossInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeadBossInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeadBossInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeadBossInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 DeadBossInfo::time() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossInfo.time)
  return time_;
}
inline void DeadBossInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeadBossInfo.time)
}

// optional string name = 4;
inline bool DeadBossInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeadBossInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeadBossInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeadBossInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeadBossInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossInfo.name)
  return *name_;
}
inline void DeadBossInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DeadBossInfo.name)
}
inline void DeadBossInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DeadBossInfo.name)
}
inline void DeadBossInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DeadBossInfo.name)
}
inline ::std::string* DeadBossInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DeadBossInfo.name)
  return name_;
}
inline ::std::string* DeadBossInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeadBossInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DeadBossInfo.name)
}

// -------------------------------------------------------------------

// DeadBossOpenBossSCmd

// optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
inline bool DeadBossOpenBossSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeadBossOpenBossSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeadBossOpenBossSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeadBossOpenBossSCmd::clear_cmd() {
  cmd_ = 216;
  clear_has_cmd();
}
inline ::Cmd::Command DeadBossOpenBossSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossOpenBossSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DeadBossOpenBossSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeadBossOpenBossSCmd.cmd)
}

// optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_OPEN];
inline bool DeadBossOpenBossSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeadBossOpenBossSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeadBossOpenBossSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeadBossOpenBossSCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::BossSParam DeadBossOpenBossSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossOpenBossSCmd.param)
  return static_cast< ::Cmd::BossSParam >(param_);
}
inline void DeadBossOpenBossSCmd::set_param(::Cmd::BossSParam value) {
  assert(::Cmd::BossSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeadBossOpenBossSCmd.param)
}

// optional .Cmd.DeadBossInfo info = 3;
inline bool DeadBossOpenBossSCmd::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeadBossOpenBossSCmd::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeadBossOpenBossSCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeadBossOpenBossSCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::DeadBossInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::DeadBossInfo& DeadBossOpenBossSCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossOpenBossSCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::DeadBossInfo* DeadBossOpenBossSCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::DeadBossInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.DeadBossOpenBossSCmd.info)
  return info_;
}
inline ::Cmd::DeadBossInfo* DeadBossOpenBossSCmd::release_info() {
  clear_has_info();
  ::Cmd::DeadBossInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void DeadBossOpenBossSCmd::set_allocated_info(::Cmd::DeadBossInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DeadBossOpenBossSCmd.info)
}

// -------------------------------------------------------------------

// DeadBossOpenSyncBossSCmd

// optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
inline bool DeadBossOpenSyncBossSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeadBossOpenSyncBossSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeadBossOpenSyncBossSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeadBossOpenSyncBossSCmd::clear_cmd() {
  cmd_ = 216;
  clear_has_cmd();
}
inline ::Cmd::Command DeadBossOpenSyncBossSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossOpenSyncBossSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DeadBossOpenSyncBossSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeadBossOpenSyncBossSCmd.cmd)
}

// optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_DEADBOSS_SYNC];
inline bool DeadBossOpenSyncBossSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeadBossOpenSyncBossSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeadBossOpenSyncBossSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeadBossOpenSyncBossSCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::BossSParam DeadBossOpenSyncBossSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossOpenSyncBossSCmd.param)
  return static_cast< ::Cmd::BossSParam >(param_);
}
inline void DeadBossOpenSyncBossSCmd::set_param(::Cmd::BossSParam value) {
  assert(::Cmd::BossSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeadBossOpenSyncBossSCmd.param)
}

// optional .Cmd.DeadBossInfo info = 3;
inline bool DeadBossOpenSyncBossSCmd::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeadBossOpenSyncBossSCmd::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeadBossOpenSyncBossSCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeadBossOpenSyncBossSCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::DeadBossInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::DeadBossInfo& DeadBossOpenSyncBossSCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.DeadBossOpenSyncBossSCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::DeadBossInfo* DeadBossOpenSyncBossSCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::DeadBossInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.DeadBossOpenSyncBossSCmd.info)
  return info_;
}
inline ::Cmd::DeadBossInfo* DeadBossOpenSyncBossSCmd::release_info() {
  clear_has_info();
  ::Cmd::DeadBossInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void DeadBossOpenSyncBossSCmd::set_allocated_info(::Cmd::DeadBossInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DeadBossOpenSyncBossSCmd.info)
}

// -------------------------------------------------------------------

// SummonBossBossSCmd

// optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
inline bool SummonBossBossSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummonBossBossSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SummonBossBossSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SummonBossBossSCmd::clear_cmd() {
  cmd_ = 216;
  clear_has_cmd();
}
inline ::Cmd::Command SummonBossBossSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SummonBossBossSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SummonBossBossSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SummonBossBossSCmd.cmd)
}

// optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SUMMON];
inline bool SummonBossBossSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummonBossBossSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SummonBossBossSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SummonBossBossSCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::BossSParam SummonBossBossSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SummonBossBossSCmd.param)
  return static_cast< ::Cmd::BossSParam >(param_);
}
inline void SummonBossBossSCmd::set_param(::Cmd::BossSParam value) {
  assert(::Cmd::BossSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SummonBossBossSCmd.param)
}

// optional uint32 mapid = 3;
inline bool SummonBossBossSCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SummonBossBossSCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SummonBossBossSCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SummonBossBossSCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 SummonBossBossSCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.SummonBossBossSCmd.mapid)
  return mapid_;
}
inline void SummonBossBossSCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SummonBossBossSCmd.mapid)
}

// optional uint32 npcid = 4;
inline bool SummonBossBossSCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SummonBossBossSCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SummonBossBossSCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SummonBossBossSCmd::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 SummonBossBossSCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.SummonBossBossSCmd.npcid)
  return npcid_;
}
inline void SummonBossBossSCmd::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SummonBossBossSCmd.npcid)
}

// optional uint32 bosstype = 5 [default = 1];
inline bool SummonBossBossSCmd::has_bosstype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SummonBossBossSCmd::set_has_bosstype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SummonBossBossSCmd::clear_has_bosstype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SummonBossBossSCmd::clear_bosstype() {
  bosstype_ = 1u;
  clear_has_bosstype();
}
inline ::google::protobuf::uint32 SummonBossBossSCmd::bosstype() const {
  // @@protoc_insertion_point(field_get:Cmd.SummonBossBossSCmd.bosstype)
  return bosstype_;
}
inline void SummonBossBossSCmd::set_bosstype(::google::protobuf::uint32 value) {
  set_has_bosstype();
  bosstype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SummonBossBossSCmd.bosstype)
}

// optional uint32 lv = 6 [default = 1];
inline bool SummonBossBossSCmd::has_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SummonBossBossSCmd::set_has_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SummonBossBossSCmd::clear_has_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SummonBossBossSCmd::clear_lv() {
  lv_ = 1u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 SummonBossBossSCmd::lv() const {
  // @@protoc_insertion_point(field_get:Cmd.SummonBossBossSCmd.lv)
  return lv_;
}
inline void SummonBossBossSCmd::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SummonBossBossSCmd.lv)
}

// -------------------------------------------------------------------

// BossDieBossSCmd

// optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
inline bool BossDieBossSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossDieBossSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossDieBossSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossDieBossSCmd::clear_cmd() {
  cmd_ = 216;
  clear_has_cmd();
}
inline ::Cmd::Command BossDieBossSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BossDieBossSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BossDieBossSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossDieBossSCmd.cmd)
}

// optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_DIE];
inline bool BossDieBossSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossDieBossSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossDieBossSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossDieBossSCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::BossSParam BossDieBossSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BossDieBossSCmd.param)
  return static_cast< ::Cmd::BossSParam >(param_);
}
inline void BossDieBossSCmd::set_param(::Cmd::BossSParam value) {
  assert(::Cmd::BossSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossDieBossSCmd.param)
}

// optional uint32 npcid = 3;
inline bool BossDieBossSCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossDieBossSCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossDieBossSCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossDieBossSCmd::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 BossDieBossSCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.BossDieBossSCmd.npcid)
  return npcid_;
}
inline void BossDieBossSCmd::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossDieBossSCmd.npcid)
}

// optional string killer = 4;
inline bool BossDieBossSCmd::has_killer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossDieBossSCmd::set_has_killer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossDieBossSCmd::clear_has_killer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossDieBossSCmd::clear_killer() {
  if (killer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killer_->clear();
  }
  clear_has_killer();
}
inline const ::std::string& BossDieBossSCmd::killer() const {
  // @@protoc_insertion_point(field_get:Cmd.BossDieBossSCmd.killer)
  return *killer_;
}
inline void BossDieBossSCmd::set_killer(const ::std::string& value) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killer_ = new ::std::string;
  }
  killer_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BossDieBossSCmd.killer)
}
inline void BossDieBossSCmd::set_killer(const char* value) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killer_ = new ::std::string;
  }
  killer_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BossDieBossSCmd.killer)
}
inline void BossDieBossSCmd::set_killer(const char* value, size_t size) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killer_ = new ::std::string;
  }
  killer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BossDieBossSCmd.killer)
}
inline ::std::string* BossDieBossSCmd::mutable_killer() {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    killer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BossDieBossSCmd.killer)
  return killer_;
}
inline ::std::string* BossDieBossSCmd::release_killer() {
  clear_has_killer();
  if (killer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = killer_;
    killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BossDieBossSCmd::set_allocated_killer(::std::string* killer) {
  if (killer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete killer_;
  }
  if (killer) {
    set_has_killer();
    killer_ = killer;
  } else {
    clear_has_killer();
    killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BossDieBossSCmd.killer)
}

// optional uint64 killid = 5;
inline bool BossDieBossSCmd::has_killid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossDieBossSCmd::set_has_killid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossDieBossSCmd::clear_has_killid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossDieBossSCmd::clear_killid() {
  killid_ = GOOGLE_ULONGLONG(0);
  clear_has_killid();
}
inline ::google::protobuf::uint64 BossDieBossSCmd::killid() const {
  // @@protoc_insertion_point(field_get:Cmd.BossDieBossSCmd.killid)
  return killid_;
}
inline void BossDieBossSCmd::set_killid(::google::protobuf::uint64 value) {
  set_has_killid();
  killid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossDieBossSCmd.killid)
}

// optional uint32 mapid = 6;
inline bool BossDieBossSCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossDieBossSCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossDieBossSCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossDieBossSCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 BossDieBossSCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.BossDieBossSCmd.mapid)
  return mapid_;
}
inline void BossDieBossSCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossDieBossSCmd.mapid)
}

// optional bool reset = 7 [default = false];
inline bool BossDieBossSCmd::has_reset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossDieBossSCmd::set_has_reset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossDieBossSCmd::clear_has_reset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossDieBossSCmd::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
inline bool BossDieBossSCmd::reset() const {
  // @@protoc_insertion_point(field_get:Cmd.BossDieBossSCmd.reset)
  return reset_;
}
inline void BossDieBossSCmd::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossDieBossSCmd.reset)
}

// -------------------------------------------------------------------

// WorldBossNtfBossSCmd

// optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
inline bool WorldBossNtfBossSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBossNtfBossSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBossNtfBossSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBossNtfBossSCmd::clear_cmd() {
  cmd_ = 216;
  clear_has_cmd();
}
inline ::Cmd::Command WorldBossNtfBossSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtfBossSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WorldBossNtfBossSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtfBossSCmd.cmd)
}

// optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_WORLD_NTF];
inline bool WorldBossNtfBossSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossNtfBossSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossNtfBossSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossNtfBossSCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::BossSParam WorldBossNtfBossSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtfBossSCmd.param)
  return static_cast< ::Cmd::BossSParam >(param_);
}
inline void WorldBossNtfBossSCmd::set_param(::Cmd::BossSParam value) {
  assert(::Cmd::BossSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldBossNtfBossSCmd.param)
}

// optional .Cmd.WorldBossNtf ntf = 3;
inline bool WorldBossNtfBossSCmd::has_ntf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBossNtfBossSCmd::set_has_ntf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBossNtfBossSCmd::clear_has_ntf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBossNtfBossSCmd::clear_ntf() {
  if (ntf_ != NULL) ntf_->::Cmd::WorldBossNtf::Clear();
  clear_has_ntf();
}
inline const ::Cmd::WorldBossNtf& WorldBossNtfBossSCmd::ntf() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldBossNtfBossSCmd.ntf)
  return ntf_ != NULL ? *ntf_ : *default_instance_->ntf_;
}
inline ::Cmd::WorldBossNtf* WorldBossNtfBossSCmd::mutable_ntf() {
  set_has_ntf();
  if (ntf_ == NULL) ntf_ = new ::Cmd::WorldBossNtf;
  // @@protoc_insertion_point(field_mutable:Cmd.WorldBossNtfBossSCmd.ntf)
  return ntf_;
}
inline ::Cmd::WorldBossNtf* WorldBossNtfBossSCmd::release_ntf() {
  clear_has_ntf();
  ::Cmd::WorldBossNtf* temp = ntf_;
  ntf_ = NULL;
  return temp;
}
inline void WorldBossNtfBossSCmd::set_allocated_ntf(::Cmd::WorldBossNtf* ntf) {
  delete ntf_;
  ntf_ = ntf;
  if (ntf) {
    set_has_ntf();
  } else {
    clear_has_ntf();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WorldBossNtfBossSCmd.ntf)
}

// -------------------------------------------------------------------

// BossSetBossSCmd

// optional .Cmd.Command cmd = 1 [default = BOSSS_PROTOCMD];
inline bool BossSetBossSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossSetBossSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossSetBossSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossSetBossSCmd::clear_cmd() {
  cmd_ = 216;
  clear_has_cmd();
}
inline ::Cmd::Command BossSetBossSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BossSetBossSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BossSetBossSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossSetBossSCmd.cmd)
}

// optional .Cmd.BossSParam param = 2 [default = BOSSSPARAM_BOSS_SET];
inline bool BossSetBossSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossSetBossSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossSetBossSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossSetBossSCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::BossSParam BossSetBossSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BossSetBossSCmd.param)
  return static_cast< ::Cmd::BossSParam >(param_);
}
inline void BossSetBossSCmd::set_param(::Cmd::BossSParam value) {
  assert(::Cmd::BossSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BossSetBossSCmd.param)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::BossSParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::BossSParam>() {
  return ::Cmd::BossSParam_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BossSCmd_2eproto__INCLUDED
