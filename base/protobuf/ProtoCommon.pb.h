// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCommon.proto

#ifndef PROTOBUF_ProtoCommon_2eproto__INCLUDED
#define PROTOBUF_ProtoCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoCommon_2eproto();
void protobuf_AssignDesc_ProtoCommon_2eproto();
void protobuf_ShutdownFile_ProtoCommon_2eproto();

class ScenePos;
class SnapShotDataPB;
class Pos;
class NpcDefineData;
class UpyunApi;
class FrostItemInfo;
class SpEffectData;
class Param;
class ConfigParam;
class UserPortraitData;

enum EPublishVersion {
  EPUBLISHVERSION = 20160216
};
bool EPublishVersion_IsValid(int value);
const EPublishVersion EPublishVersion_MIN = EPUBLISHVERSION;
const EPublishVersion EPublishVersion_MAX = EPUBLISHVERSION;
const int EPublishVersion_ARRAYSIZE = EPublishVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPublishVersion_descriptor();
inline const ::std::string& EPublishVersion_Name(EPublishVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPublishVersion_descriptor(), value);
}
inline bool EPublishVersion_Parse(
    const ::std::string& name, EPublishVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPublishVersion>(
    EPublishVersion_descriptor(), name, value);
}
enum EUserDataType {
  EUSERDATATYPE_MIN = 0,
  EUSERDATATYPE_MAPID = 1,
  EUSERDATATYPE_SEX = 2,
  EUSERDATATYPE_PROFESSION = 3,
  EUSERDATATYPE_DESTPROFESSION = 4,
  EUSERDATATYPE_JOBLEVEL = 5,
  EUSERDATATYPE_ROLELEVEL = 6,
  EUSERDATATYPE_JOBEXP = 7,
  EUSERDATATYPE_ROLEEXP = 8,
  EUSERDATATYPE_CHARGE = 9,
  EUSERDATATYPE_DIAMOND = 10,
  EUSERDATATYPE_SILVER = 11,
  EUSERDATATYPE_GOLD = 12,
  EUSERDATATYPE_PURIFY = 13,
  EUSERDATATYPE_GARDEN = 14,
  EUSERDATATYPE_ONLINETIME = 15,
  EUSERDATATYPE_OFFLINETIME = 16,
  EUSERDATATYPE_ADDICT = 17,
  EUSERDATATYPE_HAIR = 18,
  EUSERDATATYPE_HAIRCOLOR = 19,
  EUSERDATATYPE_CLOTHCOLOR = 20,
  EUSERDATATYPE_LEFTHAND = 21,
  EUSERDATATYPE_RIGHTHAND = 22,
  EUSERDATATYPE_BODY = 23,
  EUSERDATATYPE_BODYSCALE = 24,
  EUSERDATATYPE_HEAD = 25,
  EUSERDATATYPE_BACK = 26,
  EUSERDATATYPE_FACE = 27,
  EUSERDATATYPE_TAIL = 28,
  EUSERDATATYPE_MOUNT = 29,
  EUSERDATATYPE_MOUTH = 83,
  EUSERDATATYPE_STRPOINT = 30,
  EUSERDATATYPE_INTPOINT = 31,
  EUSERDATATYPE_AGIPOINT = 32,
  EUSERDATATYPE_DEXPOINT = 33,
  EUSERDATATYPE_VITPOINT = 34,
  EUSERDATATYPE_LUKPOINT = 35,
  EUSERDATATYPE_TOTALPOINT = 36,
  EUSERDATATYPE_USEDPOINT = 37,
  EUSERDATATYPE_NORMAL_SKILL = 38,
  EUSERDATATYPE_COLLECT_SKILL = 39,
  EUSERDATATYPE_TRANS_SKILL = 40,
  EUSERDATATYPE_SKILL_POINT = 41,
  EUSERDATATYPE_STATUS = 42,
  EUSERDATATYPE_EQUIPMASTER = 43,
  EUSERDATATYPE_REFINEMASTER = 44,
  EUSERDATATYPE_PORTRAIT = 45,
  EUSERDATATYPE_FRAME = 46,
  EUSERDATATYPE_BATTLEPOINT = 47,
  EUSERDATATYPE_RAIDID = 48,
  EUSERDATATYPE_PET_PARTNER = 49,
  EUSERDATATYPE_PET_SELF = 50,
  EUSERDATATYPE_CREATETIME = 51,
  EUSERDATATYPE_SAVEMAP = 52,
  EUSERDATATYPE_FOLLOWID = 53,
  EUSERDATATYPE_HANDID = 54,
  EUSERDATATYPE_CARRIER = 55,
  EUSERDATATYPE_FRIENDSHIP = 56,
  EUSERDATATYPE_MUSIC_CURID = 57,
  EUSERDATATYPE_MUSIC_START = 58,
  EUSERDATATYPE_MUSIC_DEMAND = 59,
  EUSERDATATYPE_DIR = 60,
  EUSERDATATYPE_GAGTIME = 61,
  EUSERDATATYPE_NOLOGINTIME = 62,
  EUSERDATATYPE_EYE = 63,
  EUSERDATATYPE_NAME = 64,
  EUSERDATATYPE_GIFTPOINT = 65,
  EUSERDATATYPE_MANUAL_LV = 66,
  EUSERDATATYPE_MANUAL_EXP = 67,
  EUSERDATATYPE_CUR_TITLE = 68,
  EUSERDATATYPE_KILLERNAME = 69,
  EUSERDATATYPE_DROPBASEEXP = 70,
  EUSERDATATYPE_SHADERCOLOR = 71,
  EUSERDATATYPE_BATTLETIME = 72,
  EUSERDATATYPE_ADDICTTIPSTIME = 73,
  EUSERDATATYPE_QUERYTYPE = 74,
  EUSERDATATYPE_REBATTLETIME = 75,
  EUSERDATATYPE_USEDBATTLETIME = 76,
  EUSERDATATYPE_BLINK = 77,
  EUSERDATATYPE_ZONEID = 78,
  EUSERDATATYPE_TREESTATUS = 79,
  EUSERDATATYPE_DEST_ZONEID = 80,
  EUSERDATATYPE_ORIGINAL_ZONEID = 81,
  EUSERDATATYPE_ALPHA = 84,
  EUSERDATATYPE_QUOTA = 85,
  EUSERDATATYPE_ZENY_DEBT = 86,
  EUSERDATATYPE_PVP_COLOR = 87,
  EUSERDATATYPE_GUILDRAIDINDEX = 88,
  EUSERDATATYPE_CONTRIBUTE = 89,
  EUSERDATATYPE_PVPCOIN = 90,
  EUSERDATATYPE_DATA = 100,
  EUSERDATATYPE_NORMALSKILL_OPTION = 101,
  EUSERDATATYPE_HASCHARGE = 102,
  EUSERDATATYPE_FASHIONHIDE = 103,
  EUSERDATATYPE_MONTHCARD = 104,
  EUSERDATATYPE_COOKER_EXP = 105,
  EUSERDATATYPE_COOKER_LV = 106,
  EUSERDATATYPE_TASTER_EXP = 107,
  EUSERDATATYPE_TASTER_LV = 108,
  EUSERDATATYPE_SATIETY = 109,
  EUSERDATATYPE_OPTION = 110,
  EUSERDATATYPE_LOTTERY = 111,
  EUSERDATATYPE_TUTOR_PROFIC = 112,
  EUSERDATATYPE_TUTOR_ENABLE = 113,
  EUSERDATATYPE_GUILDHONOR = 114,
  EUSERDATATYPE_PEAK_EFFECT = 115,
  EUSERDATATYPE_JOY = 117,
  EUSERDATATYPE_MUSIC_LOOP = 118,
  EUSERDATATYPE_CUR_MAXJOB = 119,
  EUSERDATATYPE_MARITAL = 120,
  EUSERDATATYPE_QUERYWEDDINGTYPE = 121,
  EUSERDATATYPE_DIVORCE_ROLLERCOASTER = 122,
  EUSERDATATYPE_TWINS_ACTIONID = 123,
  EUSERDATATYPE_FAVORABILITY = 124,
  EUSERDATATYPE_EQUIPED_WEAPON = 125,
  EUSERDATATYPE_SERVANTID = 126,
  EUSERDATATYPE_BOOTH_SCORE = 127,
  EUSERDATATYPE_QUOTA_LOCK = 128,
  EUSERDATATYPE_DRESSUP = 129,
  EUSERDATATYPE_TUTORBATTLETIME = 130,
  EUSERDATATYPE_USEDTUTORBATTLETIME = 131,
  EUSERDATATYPE_ENSEMBLESKILL = 133,
  EUSERDATATYPE_DEADCOIN = 134,
  EUSERDATATYPE_DEADLV = 135,
  EUSERDATATYPE_DEADEXP = 136,
  EUSERDATATYPE_MAX = 137
};
bool EUserDataType_IsValid(int value);
const EUserDataType EUserDataType_MIN = EUSERDATATYPE_MIN;
const EUserDataType EUserDataType_MAX = EUSERDATATYPE_MAX;
const int EUserDataType_ARRAYSIZE = EUserDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserDataType_descriptor();
inline const ::std::string& EUserDataType_Name(EUserDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserDataType_descriptor(), value);
}
inline bool EUserDataType_Parse(
    const ::std::string& name, EUserDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserDataType>(
    EUserDataType_descriptor(), name, value);
}
enum EMARITAL {
  EMARITAL_SINGLE = 0,
  EMARITAL_RESERVED = 1,
  EMARITAL_MARRIED = 2,
  EMARITAL_DIVORCE_PUNISH = 3
};
bool EMARITAL_IsValid(int value);
const EMARITAL EMARITAL_MIN = EMARITAL_SINGLE;
const EMARITAL EMARITAL_MAX = EMARITAL_DIVORCE_PUNISH;
const int EMARITAL_ARRAYSIZE = EMARITAL_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMARITAL_descriptor();
inline const ::std::string& EMARITAL_Name(EMARITAL value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMARITAL_descriptor(), value);
}
inline bool EMARITAL_Parse(
    const ::std::string& name, EMARITAL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMARITAL>(
    EMARITAL_descriptor(), name, value);
}
enum EAttrType {
  EATTRTYPE_MIN = 0,
  EATTRTYPE_STR = 100,
  EATTRTYPE_INT = 101,
  EATTRTYPE_AGI = 102,
  EATTRTYPE_DEX = 103,
  EATTRTYPE_VIT = 104,
  EATTRTYPE_LUK = 105,
  EATTRTYPE_ATK = 200,
  EATTRTYPE_ATKPER = 201,
  EATTRTYPE_DEF = 202,
  EATTRTYPE_DEFPER = 203,
  EATTRTYPE_MATK = 204,
  EATTRTYPE_MATKPER = 205,
  EATTRTYPE_MDEF = 206,
  EATTRTYPE_MDEFPER = 207,
  EATTRTYPE_MAXHP = 208,
  EATTRTYPE_MAXHPPER = 209,
  EATTRTYPE_MAXSP = 210,
  EATTRTYPE_MAXSPPER = 211,
  EATTRTYPE_HP = 212,
  EATTRTYPE_SP = 213,
  EATTRTYPE_HIT = 214,
  EATTRTYPE_FLEE = 215,
  EATTRTYPE_CRI = 216,
  EATTRTYPE_CRIRES = 217,
  EATTRTYPE_CRIDAMPER = 218,
  EATTRTYPE_CRIDEFPER = 219,
  EATTRTYPE_ATKSPD = 220,
  EATTRTYPE_MOVESPD = 221,
  EATTRTYPE_CASTSPD = 222,
  EATTRTYPE_RESTORESPD = 223,
  EATTRTYPE_SPRESTORESPD = 224,
  EATTRTYPE_ITEMRESTORESPD = 225,
  EATTRTYPE_ITEMSPRESTORESPD = 226,
  EATTRTYPE_RESTORESPDPER = 227,
  EATTRTYPE_SPRESTORESPDPER = 228,
  EATTRTYPE_CRIPER = 229,
  EATTRTYPE_REFINE = 300,
  EATTRTYPE_MREFINE = 301,
  EATTRTYPE_MOVESPDPER = 302,
  EATTRTYPE_EQUIPASPD = 303,
  EATTRTYPE_SKILLASPD = 304,
  EATTRTYPE_HITPER = 305,
  EATTRTYPE_FLEEPER = 306,
  EATTRTYPE_STRPER = 307,
  EATTRTYPE_INTPER = 308,
  EATTRTYPE_AGIPER = 309,
  EATTRTYPE_DEXPER = 310,
  EATTRTYPE_VITPER = 311,
  EATTRTYPE_LUKPER = 312,
  EATTRTYPE_SHOWATK = 400,
  EATTRTYPE_SHOWDEF = 401,
  EATTRTYPE_SHOWMATK = 402,
  EATTRTYPE_SHOWMDEF = 403,
  EATTRTYPE_SHOWMAXHP = 404,
  EATTRTYPE_SHOWMAXSP = 405,
  EATTRTYPE_SHOWHIT = 406,
  EATTRTYPE_SHOWFLEE = 407,
  EATTRTYPE_SHOWCRI = 408,
  EATTRTYPE_SHOWCRIRES = 409,
  EATTRTYPE_SHOWATKSPD = 410,
  EATTRTYPE_SHOWMOVESPD = 411,
  EATTRTYPE_SHOWCASTSPD = 412,
  EATTRTYPE_SHOWRESTORESPD = 413,
  EATTRTYPE_DAMREDUC = 414,
  EATTRTYPE_MDAMREDUC = 415,
  EATTRTYPE_IGNOREDEF = 416,
  EATTRTYPE_IGNOREMDEF = 417,
  EATTRTYPE_DAMREBOUND = 418,
  EATTRTYPE_MDAMREBOUND = 419,
  EATTRTYPE_DAMINCREASE = 420,
  EATTRTYPE_MDAMINCREASE = 421,
  EATTRTYPE_VAMPIRIC = 422,
  EATTRTYPE_BEVAMPIRIC = 423,
  EATTRTYPE_HARMIMMUNE = 424,
  EATTRTYPE_REALDAMAGE = 425,
  EATTRTYPE_RANGEDAM = 426,
  EATTRTYPE_SHOTDAMREDUC = 427,
  EATTRTYPE_LONGDAMREDUC = 428,
  EATTRTYPE_LONGMDAMREDUC = 429,
  EATTRTYPE_IGNOREEQUIPDEF = 430,
  EATTRTYPE_SHAPEATKPER = 431,
  EATTRTYPE_DAMSPIKE = 432,
  EATTRTYPE_MDAMSPIKE = 433,
  EATTRTYPE_REFINEDAMREDUC = 434,
  EATTRTYPE_REFINEMDAMREDUC = 435,
  EATTRTYPE_ENERGYDAMREDUC = 436,
  EATTRTYPE_STEELDAMREDUC = 437,
  EATTRTYPE_STEELMDAMREDUC = 438,
  EATTRTYPE_PROTECTDAMREDUC = 439,
  EATTRTYPE_PROTECTMDAMREDUC = 440,
  EATTRTYPE_DRAGONDAMREDUC = 443,
  EATTRTYPE_DRAGONMDAMREDUC = 444,
  EATTRTYPE_NORMALREALDAM = 445,
  EATTRTYPE_NORMALMREALDAM = 446,
  EATTRTYPE_SKILLREALDAM = 447,
  EATTRTYPE_SKILLMREALDAM = 448,
  EATTRTYPE_HIDEDAMREDUC = 441,
  EATTRTYPE_HIDEMDAMREDUC = 442,
  EATTRTYPE_NORMALATK = 449,
  EATTRTYPE_NORMALATKDAM = 450,
  EATTRTYPE_NORMALATKRES = 451,
  EATTRTYPE_SKILLDAM = 452,
  EATTRTYPE_SKILLRES = 453,
  EATTRTYPE_WINDMDAMREDUC = 454,
  EATTRTYPE_DEADDAMREDUC = 455,
  EATTRTYPE_DEADMDAMREDUC = 456,
  EATTRTYPE_CTCHANGE = 509,
  EATTRTYPE_CTCHANGEPER = 510,
  EATTRTYPE_CDCHANGE = 511,
  EATTRTYPE_CDCHANGEPER = 512,
  EATTRTYPE_SPCOST = 515,
  EATTRTYPE_SPCOSTPER = 516,
  EATTRTYPE_ATKDISTANCE = 517,
  EATTRTYPE_ATKDISTANCEPER = 518,
  EATTRTYPE_CTFIXED = 519,
  EATTRTYPE_CTFIXEDPER = 520,
  EATTRTYPE_SELLDISCOUNT = 521,
  EATTRTYPE_BUYDISCOUNT = 522,
  EATTRTYPE_HPCOST = 523,
  EATTRTYPE_HPCOSTPER = 524,
  EATTRTYPE_DELAYCDCHANGE = 534,
  EATTRTYPE_DELAYCDCHANGEPER = 535,
  EATTRTYPE_DCHANGE = 536,
  EATTRTYPE_DCHANGEPER = 537,
  EATTRTYPE_NOSKILL = 600,
  EATTRTYPE_NOACT = 601,
  EATTRTYPE_NOMOVE = 602,
  EATTRTYPE_NOSTIFF = 603,
  EATTRTYPE_NOATTACK = 604,
  EATTRTYPE_FEARRUN = 605,
  EATTRTYPE_HIDE = 606,
  EATTRTYPE_TAUNT = 607,
  EATTRTYPE_FREEZE = 608,
  EATTRTYPE_NOEFFECTMOVE = 609,
  EATTRTYPE_STATEEFFECT = 610,
  EATTRTYPE_ATTREFFECT = 611,
  EATTRTYPE_NOATTACKED = 612,
  EATTRTYPE_ATTRFUNCTION = 613,
  EATTRTYPE_ATTREFFECT2 = 614,
  EATTRTYPE_FUNCLIMIT = 615,
  EATTRTYPE_NOMAGICSKILL = 616,
  EATTRTYPE_MOVECHANT = 617,
  EATTRTYPE_SOLO = 618,
  EATTRTYPE_ENSEMBLE = 619,
  EATTRTYPE_ATKATTR = 700,
  EATTRTYPE_DEFATTR = 701,
  EATTRTYPE_WINDDAMPER = 702,
  EATTRTYPE_EARTHDAMPER = 703,
  EATTRTYPE_WATERDAMPER = 704,
  EATTRTYPE_FIREDAMPER = 705,
  EATTRTYPE_NEUTRALDAMPER = 706,
  EATTRTYPE_HOLYDAMPER = 707,
  EATTRTYPE_SHADOWDAMPER = 708,
  EATTRTYPE_GHOSTDAMPER = 709,
  EATTRTYPE_UNDEADDAMPER = 710,
  EATTRTYPE_POSIONDAMPER = 711,
  EATTRTYPE_BEWINDDAMPER = 712,
  EATTRTYPE_BEEARTHDAMPER = 713,
  EATTRTYPE_BEWATERDAMPER = 714,
  EATTRTYPE_BEFIREDAMPER = 715,
  EATTRTYPE_BENEUTRALDAMPER = 716,
  EATTRTYPE_BEHOLYDAMPER = 717,
  EATTRTYPE_BESHADOWDAMPER = 718,
  EATTRTYPE_BEGHOSTDAMPER = 719,
  EATTRTYPE_BEUNDEADDAMPER = 720,
  EATTRTYPE_BEPOSIONDAMPER = 721,
  EATTRTYPE_WINDATK = 722,
  EATTRTYPE_EARTHATK = 723,
  EATTRTYPE_FIREATK = 724,
  EATTRTYPE_WATERATK = 725,
  EATTRTYPE_NEUTRALATK = 726,
  EATTRTYPE_HOLYATK = 727,
  EATTRTYPE_DARKATK = 728,
  EATTRTYPE_WINDDEF = 729,
  EATTRTYPE_EARTHDEF = 730,
  EATTRTYPE_FIREDEF = 731,
  EATTRTYPE_WATERDEF = 732,
  EATTRTYPE_NEUTRALDEF = 733,
  EATTRTYPE_HOLYDEF = 734,
  EATTRTYPE_DARKDEF = 735,
  EATTRTYPE_GHOSTATK = 736,
  EATTRTYPE_UNDEADATK = 737,
  EATTRTYPE_POISONINGATK = 738,
  EATTRTYPE_BRUTEDAMPER = 800,
  EATTRTYPE_DEMIHUMANDAMPER = 801,
  EATTRTYPE_DEMONDAMPER = 802,
  EATTRTYPE_PLANTDAMPER = 803,
  EATTRTYPE_DEADLESSDAMPER = 804,
  EATTRTYPE_FORMLESSDAMPER = 805,
  EATTRTYPE_FISHDAMPER = 806,
  EATTRTYPE_ANGLEDAMPER = 807,
  EATTRTYPE_INSECTDAMPER = 808,
  EATTRTYPE_DRAGONDAMPER = 809,
  EATTRTYPE_BRUTERESPER = 810,
  EATTRTYPE_DEMIHUMANRESPER = 811,
  EATTRTYPE_DEMONRESPER = 812,
  EATTRTYPE_PLANTRESPER = 813,
  EATTRTYPE_DEADLESSRESPER = 814,
  EATTRTYPE_FORMLESSRESPER = 815,
  EATTRTYPE_FISHRESPER = 816,
  EATTRTYPE_ANGLERESPER = 817,
  EATTRTYPE_INSECTRESPER = 818,
  EATTRTYPE_DRAGONRESPER = 819,
  EATTRTYPE_SMALLDAMPER = 900,
  EATTRTYPE_SMALLRESPER = 901,
  EATTRTYPE_MIDDAMPER = 902,
  EATTRTYPE_MIDRESPER = 903,
  EATTRTYPE_BIGDAMPER = 904,
  EATTRTYPE_BIGRESPER = 905,
  EATTRTYPE_BOSSDAMPER = 906,
  EATTRTYPE_BOSSRESPER = 907,
  EATTRTYPE_MONSTERDAMPER = 908,
  EATTRTYPE_MONSTERRESPER = 909,
  EATTRTYPE_NPCDAMPER = 910,
  EATTRTYPE_NPCRESPER = 911,
  EATTRTYPE_SILENCEATK = 1000,
  EATTRTYPE_SILENCEDEF = 1001,
  EATTRTYPE_FREEZEATK = 1002,
  EATTRTYPE_FREEZEDEF = 1003,
  EATTRTYPE_STONEATK = 1004,
  EATTRTYPE_STONEDEF = 1005,
  EATTRTYPE_STUNATK = 1006,
  EATTRTYPE_STUNDEF = 1007,
  EATTRTYPE_BLINDATK = 1008,
  EATTRTYPE_BLINDDEF = 1009,
  EATTRTYPE_POSIONATK = 1010,
  EATTRTYPE_POSIONDEF = 1011,
  EATTRTYPE_SLOWATK = 1012,
  EATTRTYPE_SLOWDEF = 1013,
  EATTRTYPE_CHAOSATK = 1014,
  EATTRTYPE_CHAOSDEF = 1015,
  EATTRTYPE_CURSEATK = 1016,
  EATTRTYPE_CURSEDEF = 1017,
  EATTRTYPE_TRANSFORMID = 1024,
  EATTRTYPE_SLEEPATK = 1025,
  EATTRTYPE_SLEEPDEF = 1026,
  EATTRTYPE_BEHEALENCPER = 1110,
  EATTRTYPE_HEALENCPER = 1111,
  EATTRTYPE_DEADSOON = 1208,
  EATTRTYPE_SAVE_HP = 1209,
  EATTRTYPE_SAVE_SP = 1210,
  EATTRTYPE_SLIM_HEIGHT = 1211,
  EATTRTYPE_SLIM_WEIGHT = 1212,
  EATTRTYPE_BASEEXPPER = 1213,
  EATTRTYPE_JOBEXPPER = 1214,
  EATTRTYPE_MAX = 1215
};
bool EAttrType_IsValid(int value);
const EAttrType EAttrType_MIN = EATTRTYPE_MIN;
const EAttrType EAttrType_MAX = EATTRTYPE_MAX;
const int EAttrType_ARRAYSIZE = EAttrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAttrType_descriptor();
inline const ::std::string& EAttrType_Name(EAttrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAttrType_descriptor(), value);
}
inline bool EAttrType_Parse(
    const ::std::string& name, EAttrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAttrType>(
    EAttrType_descriptor(), name, value);
}
enum EGender {
  EGENDER_MIN = 0,
  EGENDER_MALE = 1,
  EGENDER_FEMALE = 2,
  EGENDER_MAX = 3
};
bool EGender_IsValid(int value);
const EGender EGender_MIN = EGENDER_MIN;
const EGender EGender_MAX = EGENDER_MAX;
const int EGender_ARRAYSIZE = EGender_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGender_descriptor();
inline const ::std::string& EGender_Name(EGender value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGender_descriptor(), value);
}
inline bool EGender_Parse(
    const ::std::string& name, EGender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGender>(
    EGender_descriptor(), name, value);
}
enum EProfession {
  EPROFESSION_MIN = 0,
  EPROFESSION_NOVICE = 1,
  EPROFESSION_WARRIOR = 11,
  EPROFESSION_KNIGHT = 12,
  EPROFESSION_LORDKNIGHT = 13,
  EPROFESSION_RUNEKNIGHT = 14,
  EPROFESSION_CRUSADER = 72,
  EPROFESSION_PALADIN = 73,
  EPROFESSION_ROYALGUARD = 74,
  EPROFESSION_MAGICIAN = 21,
  EPROFESSION_WIZARD = 22,
  EPROFESSION_HIGHWIZARD = 23,
  EPROFESSION_WARLOCK = 24,
  EPROFESSION_SAGE = 82,
  EPROFESSION_PROFESSOR = 83,
  EPROFESSION_SORCERER = 84,
  EPROFESSION_THIEF = 31,
  EPROFESSION_ASSASSIN = 32,
  EPROFESSION_ASSASSINCROSS = 33,
  EPROFESSION_GUILLOTINECROSS = 34,
  EPROFESSION_ROGUE = 92,
  EPROFESSION_STALKER = 93,
  EPROFESSION_SHADOWCHASER = 94,
  EPROFESSION_ARCHER = 41,
  EPROFESSION_HUNTER = 42,
  EPROFESSION_SNIPER = 43,
  EPROFESSION_RANGER = 44,
  EPROFESSION_BARD = 102,
  EPROFESSION_CLOWN = 103,
  EPROFESSION_MINSTREL = 104,
  EPROFESSION_DANCER = 112,
  EPROFESSION_GYPSY = 113,
  EPROFESSION_WANDERER = 114,
  EPROFESSION_ACOLYTE = 51,
  EPROFESSION_PRIEST = 52,
  EPROFESSION_HIGHPRIEST = 53,
  EPROFESSION_ARCHBISHOP = 54,
  EPROFESSION_MONK = 122,
  EPROFESSION_CHAMPION = 123,
  EPROFESSION_SHURA = 124,
  EPROFESSION_MERCHANT = 61,
  EPROFESSION_BLACKSMITH = 62,
  EPROFESSION_WHITESMITH = 63,
  EPROFESSION_MECHANIC = 64,
  EPROFESSION_ALCHEMIST = 132,
  EPROFESSION_CREATOR = 133,
  EPROFESSION_GENETIC = 134,
  EPROFESSION_PET = 999,
  EPROFESSION_MAX = 1000
};
bool EProfession_IsValid(int value);
const EProfession EProfession_MIN = EPROFESSION_MIN;
const EProfession EProfession_MAX = EPROFESSION_MAX;
const int EProfession_ARRAYSIZE = EProfession_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProfession_descriptor();
inline const ::std::string& EProfession_Name(EProfession value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProfession_descriptor(), value);
}
inline bool EProfession_Parse(
    const ::std::string& name, EProfession* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProfession>(
    EProfession_descriptor(), name, value);
}
enum EQualityType {
  EQUALITYTYPE_MIN = 0,
  EQUALITYTYPE_WHITE = 1,
  EQUALITYTYPE_GREEN = 2,
  EQUALITYTYPE_BLUE = 3,
  EQUALITYTYPE_PURPLE = 4,
  EQUALITYTYPE_ORANGE = 5,
  EQUALITYTYPE_GOLD = 6,
  EQUALITYTYPE_DARKGOLD = 7,
  EQUALITYTYPE_MAX = 8
};
bool EQualityType_IsValid(int value);
const EQualityType EQualityType_MIN = EQUALITYTYPE_MIN;
const EQualityType EQualityType_MAX = EQUALITYTYPE_MAX;
const int EQualityType_ARRAYSIZE = EQualityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQualityType_descriptor();
inline const ::std::string& EQualityType_Name(EQualityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQualityType_descriptor(), value);
}
inline bool EQualityType_Parse(
    const ::std::string& name, EQualityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQualityType>(
    EQualityType_descriptor(), name, value);
}
enum EMoneyType {
  EMONEYTYPE_MIN = 0,
  EMONEYTYPE_DIAMOND = 132,
  EMONEYTYPE_SILVER = 131,
  EMONEYTYPE_GOLD = 130,
  EMONEYTYPE_GARDEN = 140,
  EMONEYTYPE_MANUALSKILL = 143,
  EMONEYTYPE_CONTRIBUTE = 145,
  EMONEYTYPE_GUILDASSET = 146,
  EMONEYTYPE_FRIENDSHIP = 147,
  EMONEYTYPE_PVPCOIN = 141,
  EMONEYTYPE_LOTTERY = 154,
  EMONEYTYPE_GUILDHONOR = 156,
  EMONEYTYPE_DEADCOIN = 169,
  EMONEYTYPE_MAX = 170
};
bool EMoneyType_IsValid(int value);
const EMoneyType EMoneyType_MIN = EMONEYTYPE_MIN;
const EMoneyType EMoneyType_MAX = EMONEYTYPE_MAX;
const int EMoneyType_ARRAYSIZE = EMoneyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMoneyType_descriptor();
inline const ::std::string& EMoneyType_Name(EMoneyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMoneyType_descriptor(), value);
}
inline bool EMoneyType_Parse(
    const ::std::string& name, EMoneyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMoneyType>(
    EMoneyType_descriptor(), name, value);
}
enum ECreatureStatus {
  ECREATURESTATUS_MIN = 0,
  ECREATURESTATUS_LIVE = 1,
  ECREATURESTATUS_SIT = 2,
  ECREATURESTATUS_DEAD = 3,
  ECREATURESTATUS_PHOTO = 4,
  ECREATURESTATUS_FAKEDEAD = 5,
  ECREATURESTATUS_REMOVE = 6,
  ECREATURESTATUS_SELF_PHOTO = 7,
  ECREATURESTATUS_IDLE = 8,
  ECREATURESTATUS_CLEAR = 9,
  ECREATURESTATUS_RELIVE = 10,
  ECREATURESTATUS_LEAVE = 11,
  ECREATURESTATUS_EVO = 12,
  ECREATURESTATUS_SUICIDE = 13,
  ECREATURESTATUS_INRELIVE = 14,
  ECREATURESTATUS_MAX = 15
};
bool ECreatureStatus_IsValid(int value);
const ECreatureStatus ECreatureStatus_MIN = ECREATURESTATUS_MIN;
const ECreatureStatus ECreatureStatus_MAX = ECREATURESTATUS_MAX;
const int ECreatureStatus_ARRAYSIZE = ECreatureStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECreatureStatus_descriptor();
inline const ::std::string& ECreatureStatus_Name(ECreatureStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECreatureStatus_descriptor(), value);
}
inline bool ECreatureStatus_Parse(
    const ::std::string& name, ECreatureStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECreatureStatus>(
    ECreatureStatus_descriptor(), name, value);
}
enum ESource {
  ESOURCE_MIN = 0,
  ESOURCE_NORMAL = 1,
  ESOURCE_PACKAGE = 2,
  ESOURCE_QUEST = 3,
  ESOURCE_EQUIP = 4,
  ESOURCE_CARD = 5,
  ESOURCE_ACTSKILL = 6,
  ESOURCE_COMPOSE = 9,
  ESOURCE_REWARD = 10,
  ESOURCE_MONSTERKILL = 11,
  ESOURCE_GM = 12,
  ESOURCE_FUBEN = 13,
  ESOURCE_CHARGE = 14,
  ESOURCE_LABORATORY = 15,
  ESOURCE_MAPTRANS = 16,
  ESOURCE_HAIR = 17,
  ESOURCE_STRENGTH = 18,
  ESOURCE_SHOP = 19,
  ESOURCE_SELL = 21,
  ESOURCE_PICKUP = 22,
  ESOURCE_OFFLINE = 23,
  ESOURCE_LVUP = 24,
  ESOURCE_TRADE = 25,
  ESOURCE_TRANSFER = 26,
  ESOURCE_SEAL = 27,
  ESOURCE_GUILDPRAY = 28,
  ESOURCE_ENCHANT = 29,
  ESOURCE_GUILDCREATE = 30,
  ESOURCE_GUILDLEVELUP = 31,
  ESOURCE_RELIVE = 32,
  ESOURCE_REPAIR = 33,
  ESOURCE_STORE = 34,
  ESOURCE_MUSICBOX = 35,
  ESOURCE_TOWER = 36,
  ESOURCE_DOJOFIRST = 37,
  ESOURCE_DOJOHELP = 38,
  ESOURCE_MANUAL = 39,
  ESOURCE_ROB = 41,
  ESOURCE_WANTEDQUEST = 42,
  ESOURCE_DONATE = 43,
  ESOURCE_MONSTERAI = 44,
  ESOURCE_TREASURE = 45,
  ESOURCE_FERRISWHEEL = 46,
  ESOURCE_CRAZYGHOST = 47,
  ESOURCE_JUMPZONE = 48,
  ESOURCE_OPERATE = 49,
  ESOURCE_DOG = 50,
  ESOURCE_GIFT = 51,
  ESOURCE_QA = 52,
  ESOURCE_DECOMPOSE = 53,
  ESOURCE_HELP = 54,
  ESOURCE_OPENSTORE = 55,
  ESOURCE_PUTSTORE = 56,
  ESOURCE_OFFSTORE = 57,
  ESOURCE_EXCHANGE = 58,
  ESOURCE_UNSTRENGTH = 59,
  ESOURCE_DAILYQUEST = 60,
  ESOURCE_USEITEM = 61,
  ESOURCE_RESTORE = 62,
  ESOURCE_TEMPPACK = 63,
  ESOURCE_TRADE_PUBLICITY = 64,
  ESOURCE_TRADE_PUBLICITY_FAILRET = 65,
  ESOURCE_KAPULA = 66,
  ESOURCE_MONEYCAT = 67,
  ESOURCE_VALENTINE = 68,
  ESOURCE_PERSON_PUTSTORE = 69,
  ESOURCE_PERSON_OFFSTORE = 70,
  ESOURCE_PUBLIC_PUTSTORE = 71,
  ESOURCE_PUBLIC_OFFSTORE = 72,
  ESOURCE_PUT_TEMPPACK = 73,
  ESOURCE_OFF_TEMPPACK = 74,
  ESOURCE_CAT = 75,
  ESOURCE_GIVE = 76,
  ESOURCE_UPGRADE = 77,
  ESOURCE_PUT_BARROW = 78,
  ESOURCE_OFF_BARROW = 79,
  ESOURCE_OPEN_GUILD_GATE = 80,
  ESOURCE_UNLOCK_GUILD_GATE = 81,
  ESOURCE_GUILDRAID = 82,
  ESOURCE_MONTHCARD = 83,
  ESOURCE_ASTROLABE_ACTIVATE = 84,
  ESOURCE_ASTROLABE_RESET = 85,
  ESOURCE_EXCHANGECARD = 86,
  ESOURCE_COOK_FOOD = 87,
  ESOURCE_EAT_FOOD = 88,
  ESOURCE_PHOTO_SCENERY = 89,
  ESOURCE_PHOTO_SELF = 90,
  ESOURCE_LOTTERY = 91,
  ESOURCE_LOTTERY_RECOVERY = 92,
  ESOURCE_PET = 93,
  ESOURCE_PET_ADVENTURE = 94,
  ESOURCE_MAIL = 95,
  ESOURCE_BUFF = 96,
  ESOURCE_PVP = 97,
  ESOURCE_AUCTION_SIGNUP = 98,
  ESOURCE_AUCTION_OFFERPRICE = 99,
  ESOURCE_AUCTION = 100,
  ESOURCE_GANEN_FUDAI = 102,
  ESOURCE_TUTOR_TASK = 103,
  ESOURCE_TUTOR_GROW = 104,
  ESOURCE_TUTOR_GRADUATION = 105,
  ESOURCE_USER_RENAME = 106,
  ESOURCE_GUILD_RENAME = 107,
  ESOURCE_MAT_COMPOSE = 108,
  ESOURCE_HIGH_REFINE = 109,
  ESOURCE_LOTTERY_HEAD = 111,
  ESOURCE_LOTTERY_EQUIP = 112,
  ESOURCE_LOTTERY_CARD = 113,
  ESOURCE_LOTTERY_HEAD_OLD = 114,
  ESOURCE_PVP_POLLY = 115,
  ESOURCE_ACTIVITY_EVENT = 116,
  ESOURCE_GUILD_SUBMIT_MATERIAL = 117,
  ESOURCE_GUILD_BUILDING_WELFARE = 118,
  ESOURCE_GUILD_CHALLENGE = 119,
  ESOURCE_LOTTERY_CATLITTERBOX = 121,
  ESOURCE_PHOTO_GUILD = 122,
  ESOURCE_LOTTERY_MAGIC = 123,
  ESOURCE_RECALL = 124,
  ESOURCE_ARTIFACT_PRODUCE = 125,
  ESOURCE_ARTIFACT_DISTRIBUTE = 126,
  ESOURCE_LOTTERY_GIVE = 127,
  ESOURCE_RESERVE_WEDDING = 128,
  ESOURCE_WEDDING_BUY_PACKAGE = 129,
  ESOURCE_WEDDING_BUY_RING = 130,
  ESOURCE_WEDDINGDRESS_GIVE = 131,
  ESOURCE_WEDDING_PHOTO = 132,
  ESOURCE_GUILD_TREASURE = 133,
  ESOURCE_GVG = 134,
  ESOURCE_WEDDING = 135,
  ESOURCE_CARD_DECOMPOSE = 136,
  ESOURCE_PET_WORK = 137,
  ESOURCE_SERVANT = 138,
  ESOURCE_KFC_ACTIVITY = 139,
  ESOURCE_PROFESSION_BUY = 140,
  ESOURCE_USER_RECORD = 141,
  ESOURCE_PROFESSION_CHANGE = 142,
  ESOURCE_FASHION_GEDNER = 143,
  ESOURCE_QUICKSTORE = 144,
  ESOURCE_ENCHANT_TRANS = 145,
  ESOURCE_PUZZLE = 146,
  ESOURCE_EXCHANGE_SHOP = 147,
  ESOURCE_DRESSUP_STAGE = 148,
  ESOURCE_DEAD = 149,
  ESOURCE_QUICKSTORE_RETURN = 150,
  ESOURCE_EQUIP_COMPOSE = 151,
  ESOURCE_CHAT = 152,
  ESOURCE_GUILD_LEVEL_UP = 153,
  ESOURCE_GUILD_CHANGE_ZONE = 154,
  ESOURCE_GUILD_OPEN_BUILDING = 155,
  ESOURCE_GUILD_SHOP = 156,
  ESOURCE_GUILD_MAINTENANCE = 157,
  ESOURCE_MAX = 158
};
bool ESource_IsValid(int value);
const ESource ESource_MIN = ESOURCE_MIN;
const ESource ESource_MAX = ESOURCE_MAX;
const int ESource_ARRAYSIZE = ESource_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESource_descriptor();
inline const ::std::string& ESource_Name(ESource value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESource_descriptor(), value);
}
inline bool ESource_Parse(
    const ::std::string& name, ESource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESource>(
    ESource_descriptor(), name, value);
}
enum EDoubleSource {
  EDOUBLESOURCE_MIN = 0,
  EDOUBLESOURCE_GUILD_TASK = 1,
  EDOUBLESOURCE_GUILD_DONATE = 2,
  EDOUBLESOURCE_GUILD_QUEST = 3,
  EDOUBLESOURCE_MAX = 4
};
bool EDoubleSource_IsValid(int value);
const EDoubleSource EDoubleSource_MIN = EDOUBLESOURCE_MIN;
const EDoubleSource EDoubleSource_MAX = EDOUBLESOURCE_MAX;
const int EDoubleSource_ARRAYSIZE = EDoubleSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDoubleSource_descriptor();
inline const ::std::string& EDoubleSource_Name(EDoubleSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDoubleSource_descriptor(), value);
}
inline bool EDoubleSource_Parse(
    const ::std::string& name, EDoubleSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDoubleSource>(
    EDoubleSource_descriptor(), name, value);
}
enum ESummonType {
  ESUMMONTYPE_MIN = 0,
  ESUMMONTYPE_BRANCH = 1,
  ESUMMONTYPE_MAX = 2
};
bool ESummonType_IsValid(int value);
const ESummonType ESummonType_MIN = ESUMMONTYPE_MIN;
const ESummonType ESummonType_MAX = ESUMMONTYPE_MAX;
const int ESummonType_ARRAYSIZE = ESummonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESummonType_descriptor();
inline const ::std::string& ESummonType_Name(ESummonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESummonType_descriptor(), value);
}
inline bool ESummonType_Parse(
    const ::std::string& name, ESummonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESummonType>(
    ESummonType_descriptor(), name, value);
}
enum ETRADE_RET_CODE {
  ETRADE_RET_CODE_SUCCESS = 0,
  ETRADE_RET_CODE_FAIL = 1,
  ETRADE_RET_CODE_INVALID_PRICE = 100,
  ETRADE_RET_CODE_INVALID_COUNT = 101,
  ETRADE_RET_CODE_NOT_ONLINE = 102,
  ETRADE_RET_CODE_CANNOT_SELL = 103,
  ETRADE_RET_CODE_DB_ERROR = 104,
  ETRADE_RET_CODE_SYS_ERROR = 105,
  ETRADE_RET_CODE_CANNOT_FIND_USER_IN_SCENE = 106,
  ETRADE_RET_CODE_CANNOT_MONEY_IS_NOT_ENOUGH = 107,
  ETRADE_RET_CODE_CANNOT_ITEM_IS_FROSTED = 108,
  ETRADE_RET_CODE_CANNOT_PENDING_IS_FULL = 109,
  ETRADE_RET_CODE_CANNOT_CANNOT_SELL = 110,
  ETRADE_RET_CODE_PENDING_IS_SELLED = 111,
  ETRADE_RET_CODE_PENDING_IS_LOCKED = 112,
  ETRADE_RET_CODE_INVALID_PARAMS = 113,
  ETRADE_RET_CODE_CFG_ERR = 114,
  ETRADE_RET_CODE_CANNOT_QUOTA_IS_NOT_ENOUGH = 115
};
bool ETRADE_RET_CODE_IsValid(int value);
const ETRADE_RET_CODE ETRADE_RET_CODE_MIN = ETRADE_RET_CODE_SUCCESS;
const ETRADE_RET_CODE ETRADE_RET_CODE_MAX = ETRADE_RET_CODE_CANNOT_QUOTA_IS_NOT_ENOUGH;
const int ETRADE_RET_CODE_ARRAYSIZE = ETRADE_RET_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETRADE_RET_CODE_descriptor();
inline const ::std::string& ETRADE_RET_CODE_Name(ETRADE_RET_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETRADE_RET_CODE_descriptor(), value);
}
inline bool ETRADE_RET_CODE_Parse(
    const ::std::string& name, ETRADE_RET_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETRADE_RET_CODE>(
    ETRADE_RET_CODE_descriptor(), name, value);
}
enum EAccountStatus {
  EACCOUNTSTATUS_MIN = 0,
  EACCOUNTSTATUS_GAP = 1,
  EACCOUNTSTATUS_LOCK = 2,
  EACCOUNTSTATUS_MAX = 4
};
bool EAccountStatus_IsValid(int value);
const EAccountStatus EAccountStatus_MIN = EACCOUNTSTATUS_MIN;
const EAccountStatus EAccountStatus_MAX = EACCOUNTSTATUS_MAX;
const int EAccountStatus_ARRAYSIZE = EAccountStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAccountStatus_descriptor();
inline const ::std::string& EAccountStatus_Name(EAccountStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAccountStatus_descriptor(), value);
}
inline bool EAccountStatus_Parse(
    const ::std::string& name, EAccountStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAccountStatus>(
    EAccountStatus_descriptor(), name, value);
}
enum EBgmType {
  EBGM_TYPE_QUEST = 0,
  EBGM_TYPE_ACTIVITY = 1,
  EBGM_TYPE_MUSICBOX = 2,
  EBGM_TYPE_REPLACE = 3
};
bool EBgmType_IsValid(int value);
const EBgmType EBgmType_MIN = EBGM_TYPE_QUEST;
const EBgmType EBgmType_MAX = EBGM_TYPE_REPLACE;
const int EBgmType_ARRAYSIZE = EBgmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBgmType_descriptor();
inline const ::std::string& EBgmType_Name(EBgmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBgmType_descriptor(), value);
}
inline bool EBgmType_Parse(
    const ::std::string& name, EBgmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBgmType>(
    EBgmType_descriptor(), name, value);
}
enum EDepositCardType {
  ETITLE_TYPE_MONEY = 1,
  ETITLE_TYPE_MONTH = 2,
  ETITLE_TYPE_LOTTERY = 3,
  ETITLE_TYPE_FUDAI = 4,
  ETITLE_TYPE_VERSIONCARD = 5
};
bool EDepositCardType_IsValid(int value);
const EDepositCardType EDepositCardType_MIN = ETITLE_TYPE_MONEY;
const EDepositCardType EDepositCardType_MAX = ETITLE_TYPE_VERSIONCARD;
const int EDepositCardType_ARRAYSIZE = EDepositCardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDepositCardType_descriptor();
inline const ::std::string& EDepositCardType_Name(EDepositCardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDepositCardType_descriptor(), value);
}
inline bool EDepositCardType_Parse(
    const ::std::string& name, EDepositCardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDepositCardType>(
    EDepositCardType_descriptor(), name, value);
}
// ===================================================================

class ScenePos : public ::google::protobuf::Message {
 public:
  ScenePos();
  virtual ~ScenePos();

  ScenePos(const ScenePos& from);

  inline ScenePos& operator=(const ScenePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePos& default_instance();

  void Swap(ScenePos* other);

  // implements Message ----------------------------------------------

  ScenePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScenePos& from);
  void MergeFrom(const ScenePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ScenePos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static ScenePos* default_instance_;
};
// -------------------------------------------------------------------

class SnapShotDataPB : public ::google::protobuf::Message {
 public:
  SnapShotDataPB();
  virtual ~SnapShotDataPB();

  SnapShotDataPB(const SnapShotDataPB& from);

  inline SnapShotDataPB& operator=(const SnapShotDataPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapShotDataPB& default_instance();

  void Swap(SnapShotDataPB* other);

  // implements Message ----------------------------------------------

  SnapShotDataPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapShotDataPB& from);
  void MergeFrom(const SnapShotDataPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 baselv = 2 [default = 0];
  inline bool has_baselv() const;
  inline void clear_baselv();
  static const int kBaselvFieldNumber = 2;
  inline ::google::protobuf::uint32 baselv() const;
  inline void set_baselv(::google::protobuf::uint32 value);

  // optional uint32 hair = 3 [default = 0];
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 3;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 4 [default = 0];
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 4;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 lefthand = 5 [default = 0];
  inline bool has_lefthand() const;
  inline void clear_lefthand();
  static const int kLefthandFieldNumber = 5;
  inline ::google::protobuf::uint32 lefthand() const;
  inline void set_lefthand(::google::protobuf::uint32 value);

  // optional uint32 righthand = 6 [default = 0];
  inline bool has_righthand() const;
  inline void clear_righthand();
  static const int kRighthandFieldNumber = 6;
  inline ::google::protobuf::uint32 righthand() const;
  inline void set_righthand(::google::protobuf::uint32 value);

  // optional uint32 body = 7 [default = 0];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 7;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 head = 8 [default = 0];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 8;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // optional uint32 back = 9 [default = 0];
  inline bool has_back() const;
  inline void clear_back();
  static const int kBackFieldNumber = 9;
  inline ::google::protobuf::uint32 back() const;
  inline void set_back(::google::protobuf::uint32 value);

  // optional uint32 face = 10 [default = 0];
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 10;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 tail = 11 [default = 0];
  inline bool has_tail() const;
  inline void clear_tail();
  static const int kTailFieldNumber = 11;
  inline ::google::protobuf::uint32 tail() const;
  inline void set_tail(::google::protobuf::uint32 value);

  // optional uint32 mount = 12 [default = 0];
  inline bool has_mount() const;
  inline void clear_mount();
  static const int kMountFieldNumber = 12;
  inline ::google::protobuf::uint32 mount() const;
  inline void set_mount(::google::protobuf::uint32 value);

  // optional uint32 eye = 19 [default = 0];
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 19;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // optional uint32 partnerid = 20 [default = 0];
  inline bool has_partnerid() const;
  inline void clear_partnerid();
  static const int kPartneridFieldNumber = 20;
  inline ::google::protobuf::uint32 partnerid() const;
  inline void set_partnerid(::google::protobuf::uint32 value);

  // optional uint32 portrait = 21 [default = 0];
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 21;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 mouth = 22 [default = 0];
  inline bool has_mouth() const;
  inline void clear_mouth();
  static const int kMouthFieldNumber = 22;
  inline ::google::protobuf::uint32 mouth() const;
  inline void set_mouth(::google::protobuf::uint32 value);

  // optional uint32 clothcolor = 23 [default = 0];
  inline bool has_clothcolor() const;
  inline void clear_clothcolor();
  static const int kClothcolorFieldNumber = 23;
  inline ::google::protobuf::uint32 clothcolor() const;
  inline void set_clothcolor(::google::protobuf::uint32 value);

  // optional .Cmd.EGender gender = 13 [default = EGENDER_MIN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 13;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional .Cmd.EProfession profession = 14 [default = EPROFESSION_MIN];
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 14;
  inline ::Cmd::EProfession profession() const;
  inline void set_profession(::Cmd::EProfession value);

  // optional string name = 15;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 15;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sequence = 16 [default = 0];
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 16;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional uint32 isopen = 17 [default = 0];
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsopenFieldNumber = 17;
  inline ::google::protobuf::uint32 isopen() const;
  inline void set_isopen(::google::protobuf::uint32 value);

  // optional uint32 deletetime = 18 [default = 0];
  inline bool has_deletetime() const;
  inline void clear_deletetime();
  static const int kDeletetimeFieldNumber = 18;
  inline ::google::protobuf::uint32 deletetime() const;
  inline void set_deletetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SnapShotDataPB)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_baselv();
  inline void clear_has_baselv();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_lefthand();
  inline void clear_has_lefthand();
  inline void set_has_righthand();
  inline void clear_has_righthand();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_back();
  inline void clear_has_back();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_tail();
  inline void clear_has_tail();
  inline void set_has_mount();
  inline void clear_has_mount();
  inline void set_has_eye();
  inline void clear_has_eye();
  inline void set_has_partnerid();
  inline void clear_has_partnerid();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_mouth();
  inline void clear_has_mouth();
  inline void set_has_clothcolor();
  inline void clear_has_clothcolor();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_isopen();
  inline void clear_has_isopen();
  inline void set_has_deletetime();
  inline void clear_has_deletetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 baselv_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint32 lefthand_;
  ::google::protobuf::uint32 righthand_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 back_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 tail_;
  ::google::protobuf::uint32 mount_;
  ::google::protobuf::uint32 eye_;
  ::google::protobuf::uint32 partnerid_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 mouth_;
  ::google::protobuf::uint32 clothcolor_;
  int gender_;
  int profession_;
  ::std::string* name_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 isopen_;
  ::google::protobuf::uint32 deletetime_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static SnapShotDataPB* default_instance_;
};
// -------------------------------------------------------------------

class Pos : public ::google::protobuf::Message {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pos& default_instance();

  void Swap(Pos* other);

  // implements Message ----------------------------------------------

  Pos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Cmd.Pos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static Pos* default_instance_;
};
// -------------------------------------------------------------------

class NpcDefineData : public ::google::protobuf::Message {
 public:
  NpcDefineData();
  virtual ~NpcDefineData();

  NpcDefineData(const NpcDefineData& from);

  inline NpcDefineData& operator=(const NpcDefineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NpcDefineData& default_instance();

  void Swap(NpcDefineData* other);

  // implements Message ----------------------------------------------

  NpcDefineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NpcDefineData& from);
  void MergeFrom(const NpcDefineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.Pos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Cmd::Pos& pos() const;
  inline ::Cmd::Pos* mutable_pos();
  inline ::Cmd::Pos* release_pos();
  inline void set_allocated_pos(::Cmd::Pos* pos);

  // optional int32 range = 4 [default = 0];
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 4;
  inline ::google::protobuf::int32 range() const;
  inline void set_range(::google::protobuf::int32 value);

  // optional int32 dir = 5 [default = 0];
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 5;
  inline ::google::protobuf::int32 dir() const;
  inline void set_dir(::google::protobuf::int32 value);

  // optional int32 reborn = 6 [default = 0];
  inline bool has_reborn() const;
  inline void clear_reborn();
  static const int kRebornFieldNumber = 6;
  inline ::google::protobuf::int32 reborn() const;
  inline void set_reborn(::google::protobuf::int32 value);

  // optional int32 territory = 7 [default = 0];
  inline bool has_territory() const;
  inline void clear_territory();
  static const int kTerritoryFieldNumber = 7;
  inline ::google::protobuf::int32 territory() const;
  inline void set_territory(::google::protobuf::int32 value);

  // optional float scalemin = 8 [default = 0];
  inline bool has_scalemin() const;
  inline void clear_scalemin();
  static const int kScaleminFieldNumber = 8;
  inline float scalemin() const;
  inline void set_scalemin(float value);

  // optional float scalemax = 9 [default = 0];
  inline bool has_scalemax() const;
  inline void clear_scalemax();
  static const int kScalemaxFieldNumber = 9;
  inline float scalemax() const;
  inline void set_scalemax(float value);

  // optional int32 life = 10 [default = 0];
  inline bool has_life() const;
  inline void clear_life();
  static const int kLifeFieldNumber = 10;
  inline ::google::protobuf::int32 life() const;
  inline void set_life(::google::protobuf::int32 value);

  // optional int32 behaviours = 11 [default = 0];
  inline bool has_behaviours() const;
  inline void clear_behaviours();
  static const int kBehavioursFieldNumber = 11;
  inline ::google::protobuf::int32 behaviours() const;
  inline void set_behaviours(::google::protobuf::int32 value);

  // optional int32 search = 13 [default = 0];
  inline bool has_search() const;
  inline void clear_search();
  static const int kSearchFieldNumber = 13;
  inline ::google::protobuf::int32 search() const;
  inline void set_search(::google::protobuf::int32 value);

  // optional int32 uniqueid = 14 [default = 0];
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 14;
  inline ::google::protobuf::int32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::int32 value);

  // optional int32 gearorgstate = 15 [default = 0];
  inline bool has_gearorgstate() const;
  inline void clear_gearorgstate();
  static const int kGearorgstateFieldNumber = 15;
  inline ::google::protobuf::int32 gearorgstate() const;
  inline void set_gearorgstate(::google::protobuf::int32 value);

  // optional int32 purify = 16 [default = 0];
  inline bool has_purify() const;
  inline void clear_purify();
  static const int kPurifyFieldNumber = 16;
  inline ::google::protobuf::int32 purify() const;
  inline void set_purify(::google::protobuf::int32 value);

  // optional int32 attsafelv = 17 [default = 0];
  inline bool has_attsafelv() const;
  inline void clear_attsafelv();
  static const int kAttsafelvFieldNumber = 17;
  inline ::google::protobuf::int32 attsafelv() const;
  inline void set_attsafelv(::google::protobuf::int32 value);

  // optional int32 disptime = 18 [default = 0];
  inline bool has_disptime() const;
  inline void clear_disptime();
  static const int kDisptimeFieldNumber = 18;
  inline ::google::protobuf::int32 disptime() const;
  inline void set_disptime(::google::protobuf::int32 value);

  // optional int32 gearprivate = 19 [default = 0];
  inline bool has_gearprivate() const;
  inline void clear_gearprivate();
  static const int kGearprivateFieldNumber = 19;
  inline ::google::protobuf::int32 gearprivate() const;
  inline void set_gearprivate(::google::protobuf::int32 value);

  // optional int32 level = 20 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 20;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string waitaction = 21;
  inline bool has_waitaction() const;
  inline void clear_waitaction();
  static const int kWaitactionFieldNumber = 21;
  inline const ::std::string& waitaction() const;
  inline void set_waitaction(const ::std::string& value);
  inline void set_waitaction(const char* value);
  inline void set_waitaction(const char* value, size_t size);
  inline ::std::string* mutable_waitaction();
  inline ::std::string* release_waitaction();
  inline void set_allocated_waitaction(::std::string* waitaction);

  // optional .Cmd.ESummonType stype = 22 [default = ESUMMONTYPE_MIN];
  inline bool has_stype() const;
  inline void clear_stype();
  static const int kStypeFieldNumber = 22;
  inline ::Cmd::ESummonType stype() const;
  inline void set_stype(::Cmd::ESummonType value);

  // repeated int32 superai = 23;
  inline int superai_size() const;
  inline void clear_superai();
  static const int kSuperaiFieldNumber = 23;
  inline ::google::protobuf::int32 superai(int index) const;
  inline void set_superai(int index, ::google::protobuf::int32 value);
  inline void add_superai(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      superai() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_superai();

  // optional int32 pursue = 24 [default = 0];
  inline bool has_pursue() const;
  inline void clear_pursue();
  static const int kPursueFieldNumber = 24;
  inline ::google::protobuf::int32 pursue() const;
  inline void set_pursue(::google::protobuf::int32 value);

  // optional int32 pursuetime = 25 [default = 0];
  inline bool has_pursuetime() const;
  inline void clear_pursuetime();
  static const int kPursuetimeFieldNumber = 25;
  inline ::google::protobuf::int32 pursuetime() const;
  inline void set_pursuetime(::google::protobuf::int32 value);

  // optional int32 weaponpetid = 26 [default = 0];
  inline bool has_weaponpetid() const;
  inline void clear_weaponpetid();
  static const int kWeaponpetidFieldNumber = 26;
  inline ::google::protobuf::int32 weaponpetid() const;
  inline void set_weaponpetid(::google::protobuf::int32 value);

  // optional int32 deadlv = 27 [default = 0];
  inline bool has_deadlv() const;
  inline void clear_deadlv();
  static const int kDeadlvFieldNumber = 27;
  inline ::google::protobuf::int32 deadlv() const;
  inline void set_deadlv(::google::protobuf::int32 value);

  // repeated int32 deadrewardids = 28;
  inline int deadrewardids_size() const;
  inline void clear_deadrewardids();
  static const int kDeadrewardidsFieldNumber = 28;
  inline ::google::protobuf::int32 deadrewardids(int index) const;
  inline void set_deadrewardids(int index, ::google::protobuf::int32 value);
  inline void add_deadrewardids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      deadrewardids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_deadrewardids();

  // @@protoc_insertion_point(class_scope:Cmd.NpcDefineData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_reborn();
  inline void clear_has_reborn();
  inline void set_has_territory();
  inline void clear_has_territory();
  inline void set_has_scalemin();
  inline void clear_has_scalemin();
  inline void set_has_scalemax();
  inline void clear_has_scalemax();
  inline void set_has_life();
  inline void clear_has_life();
  inline void set_has_behaviours();
  inline void clear_has_behaviours();
  inline void set_has_search();
  inline void clear_has_search();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_gearorgstate();
  inline void clear_has_gearorgstate();
  inline void set_has_purify();
  inline void clear_has_purify();
  inline void set_has_attsafelv();
  inline void clear_has_attsafelv();
  inline void set_has_disptime();
  inline void clear_has_disptime();
  inline void set_has_gearprivate();
  inline void clear_has_gearprivate();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_waitaction();
  inline void clear_has_waitaction();
  inline void set_has_stype();
  inline void clear_has_stype();
  inline void set_has_pursue();
  inline void clear_has_pursue();
  inline void set_has_pursuetime();
  inline void clear_has_pursuetime();
  inline void set_has_weaponpetid();
  inline void clear_has_weaponpetid();
  inline void set_has_deadlv();
  inline void clear_has_deadlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 range_;
  ::Cmd::Pos* pos_;
  ::google::protobuf::int32 dir_;
  ::google::protobuf::int32 reborn_;
  ::google::protobuf::int32 territory_;
  float scalemin_;
  float scalemax_;
  ::google::protobuf::int32 life_;
  ::google::protobuf::int32 behaviours_;
  ::google::protobuf::int32 search_;
  ::google::protobuf::int32 uniqueid_;
  ::google::protobuf::int32 gearorgstate_;
  ::google::protobuf::int32 purify_;
  ::google::protobuf::int32 attsafelv_;
  ::google::protobuf::int32 disptime_;
  ::google::protobuf::int32 gearprivate_;
  ::std::string* waitaction_;
  ::google::protobuf::int32 level_;
  int stype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > superai_;
  ::google::protobuf::int32 pursue_;
  ::google::protobuf::int32 pursuetime_;
  ::google::protobuf::int32 weaponpetid_;
  ::google::protobuf::int32 deadlv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > deadrewardids_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static NpcDefineData* default_instance_;
};
// -------------------------------------------------------------------

class UpyunApi : public ::google::protobuf::Message {
 public:
  UpyunApi();
  virtual ~UpyunApi();

  UpyunApi(const UpyunApi& from);

  inline UpyunApi& operator=(const UpyunApi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpyunApi& default_instance();

  void Swap(UpyunApi* other);

  // implements Message ----------------------------------------------

  UpyunApi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpyunApi& from);
  void MergeFrom(const UpyunApi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const char* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  inline void set_allocated_bucket(::std::string* bucket);

  // optional string content_md5 = 2;
  inline bool has_content_md5() const;
  inline void clear_content_md5();
  static const int kContentMd5FieldNumber = 2;
  inline const ::std::string& content_md5() const;
  inline void set_content_md5(const ::std::string& value);
  inline void set_content_md5(const char* value);
  inline void set_content_md5(const char* value, size_t size);
  inline ::std::string* mutable_content_md5();
  inline ::std::string* release_content_md5();
  inline void set_allocated_content_md5(::std::string* content_md5);

  // optional string content_lenth_range = 3;
  inline bool has_content_lenth_range() const;
  inline void clear_content_lenth_range();
  static const int kContentLenthRangeFieldNumber = 3;
  inline const ::std::string& content_lenth_range() const;
  inline void set_content_lenth_range(const ::std::string& value);
  inline void set_content_lenth_range(const char* value);
  inline void set_content_lenth_range(const char* value, size_t size);
  inline ::std::string* mutable_content_lenth_range();
  inline ::std::string* release_content_lenth_range();
  inline void set_allocated_content_lenth_range(::std::string* content_lenth_range);

  // optional uint32 expiration = 4;
  inline bool has_expiration() const;
  inline void clear_expiration();
  static const int kExpirationFieldNumber = 4;
  inline ::google::protobuf::uint32 expiration() const;
  inline void set_expiration(::google::protobuf::uint32 value);

  // optional uint32 file_blocks = 5;
  inline bool has_file_blocks() const;
  inline void clear_file_blocks();
  static const int kFileBlocksFieldNumber = 5;
  inline ::google::protobuf::uint32 file_blocks() const;
  inline void set_file_blocks(::google::protobuf::uint32 value);

  // optional string file_hash = 6;
  inline bool has_file_hash() const;
  inline void clear_file_hash();
  static const int kFileHashFieldNumber = 6;
  inline const ::std::string& file_hash() const;
  inline void set_file_hash(const ::std::string& value);
  inline void set_file_hash(const char* value);
  inline void set_file_hash(const char* value, size_t size);
  inline ::std::string* mutable_file_hash();
  inline ::std::string* release_file_hash();
  inline void set_allocated_file_hash(::std::string* file_hash);

  // optional uint32 file_size = 7;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // optional string path = 8;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 8;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:Cmd.UpyunApi)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_content_md5();
  inline void clear_has_content_md5();
  inline void set_has_content_lenth_range();
  inline void clear_has_content_lenth_range();
  inline void set_has_expiration();
  inline void clear_has_expiration();
  inline void set_has_file_blocks();
  inline void clear_has_file_blocks();
  inline void set_has_file_hash();
  inline void clear_has_file_hash();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bucket_;
  ::std::string* content_md5_;
  ::std::string* content_lenth_range_;
  ::google::protobuf::uint32 expiration_;
  ::google::protobuf::uint32 file_blocks_;
  ::std::string* file_hash_;
  ::std::string* path_;
  ::google::protobuf::uint32 file_size_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static UpyunApi* default_instance_;
};
// -------------------------------------------------------------------

class FrostItemInfo : public ::google::protobuf::Message {
 public:
  FrostItemInfo();
  virtual ~FrostItemInfo();

  FrostItemInfo(const FrostItemInfo& from);

  inline FrostItemInfo& operator=(const FrostItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrostItemInfo& default_instance();

  void Swap(FrostItemInfo* other);

  // implements Message ----------------------------------------------

  FrostItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrostItemInfo& from);
  void MergeFrom(const FrostItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint64 frosted_time = 2;
  inline bool has_frosted_time() const;
  inline void clear_frosted_time();
  static const int kFrostedTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 frosted_time() const;
  inline void set_frosted_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.FrostItemInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_frosted_time();
  inline void clear_has_frosted_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 frosted_time_;
  ::google::protobuf::uint32 item_id_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static FrostItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class SpEffectData : public ::google::protobuf::Message {
 public:
  SpEffectData();
  virtual ~SpEffectData();

  SpEffectData(const SpEffectData& from);

  inline SpEffectData& operator=(const SpEffectData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpEffectData& default_instance();

  void Swap(SpEffectData* other);

  // implements Message ----------------------------------------------

  SpEffectData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpEffectData& from);
  void MergeFrom(const SpEffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint64 entity = 3;
  inline int entity_size() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 3;
  inline ::google::protobuf::uint64 entity(int index) const;
  inline void set_entity(int index, ::google::protobuf::uint64 value);
  inline void add_entity(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      entity() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_entity();

  // optional uint32 expiretime = 4;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpiretimeFieldNumber = 4;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SpEffectData)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > entity_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 expiretime_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static SpEffectData* default_instance_;
};
// -------------------------------------------------------------------

class Param : public ::google::protobuf::Message {
 public:
  Param();
  virtual ~Param();

  Param(const Param& from);

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Param& default_instance();

  void Swap(Param* other);

  // implements Message ----------------------------------------------

  Param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Param& from);
  void MergeFrom(const Param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // repeated .Cmd.Param items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::Param& items(int index) const;
  inline ::Cmd::Param* mutable_items(int index);
  inline ::Cmd::Param* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Param >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::Param >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.Param)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::Param > items_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static Param* default_instance_;
};
// -------------------------------------------------------------------

class ConfigParam : public ::google::protobuf::Message {
 public:
  ConfigParam();
  virtual ~ConfigParam();

  ConfigParam(const ConfigParam& from);

  inline ConfigParam& operator=(const ConfigParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigParam& default_instance();

  void Swap(ConfigParam* other);

  // implements Message ----------------------------------------------

  ConfigParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigParam& from);
  void MergeFrom(const ConfigParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.Param params = 1;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 1;
  inline const ::Cmd::Param& params(int index) const;
  inline ::Cmd::Param* mutable_params(int index);
  inline ::Cmd::Param* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Param >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::Param >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:Cmd.ConfigParam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::Param > params_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static ConfigParam* default_instance_;
};
// -------------------------------------------------------------------

class UserPortraitData : public ::google::protobuf::Message {
 public:
  UserPortraitData();
  virtual ~UserPortraitData();

  UserPortraitData(const UserPortraitData& from);

  inline UserPortraitData& operator=(const UserPortraitData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPortraitData& default_instance();

  void Swap(UserPortraitData* other);

  // implements Message ----------------------------------------------

  UserPortraitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPortraitData& from);
  void MergeFrom(const UserPortraitData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 portrait = 1 [default = 0];
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 1;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 body = 2 [default = 0];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 hair = 3 [default = 0];
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 3;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 4 [default = 0];
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 4;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 gender = 5 [default = 0];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 head = 6 [default = 0];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 6;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // optional uint32 face = 7 [default = 0];
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 7;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 mouth = 8 [default = 0];
  inline bool has_mouth() const;
  inline void clear_mouth();
  static const int kMouthFieldNumber = 8;
  inline ::google::protobuf::uint32 mouth() const;
  inline void set_mouth(::google::protobuf::uint32 value);

  // optional uint32 eye = 9 [default = 0];
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 9;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserPortraitData)
 private:
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_mouth();
  inline void clear_has_mouth();
  inline void set_has_eye();
  inline void clear_has_eye();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 mouth_;
  ::google::protobuf::uint32 eye_;
  friend void  protobuf_AddDesc_ProtoCommon_2eproto();
  friend void protobuf_AssignDesc_ProtoCommon_2eproto();
  friend void protobuf_ShutdownFile_ProtoCommon_2eproto();

  void InitAsDefaultInstance();
  static UserPortraitData* default_instance_;
};
// ===================================================================


// ===================================================================

// ScenePos

// optional int32 x = 1;
inline bool ScenePos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenePos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenePos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenePos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 ScenePos::x() const {
  // @@protoc_insertion_point(field_get:Cmd.ScenePos.x)
  return x_;
}
inline void ScenePos::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ScenePos.x)
}

// optional int32 y = 2;
inline bool ScenePos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScenePos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScenePos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScenePos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 ScenePos::y() const {
  // @@protoc_insertion_point(field_get:Cmd.ScenePos.y)
  return y_;
}
inline void ScenePos::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ScenePos.y)
}

// optional int32 z = 3;
inline bool ScenePos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScenePos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScenePos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScenePos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 ScenePos::z() const {
  // @@protoc_insertion_point(field_get:Cmd.ScenePos.z)
  return z_;
}
inline void ScenePos::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ScenePos.z)
}

// -------------------------------------------------------------------

// SnapShotDataPB

// optional uint64 id = 1;
inline bool SnapShotDataPB::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapShotDataPB::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapShotDataPB::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapShotDataPB::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SnapShotDataPB::id() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.id)
  return id_;
}
inline void SnapShotDataPB::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.id)
}

// optional uint32 baselv = 2 [default = 0];
inline bool SnapShotDataPB::has_baselv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapShotDataPB::set_has_baselv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapShotDataPB::clear_has_baselv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapShotDataPB::clear_baselv() {
  baselv_ = 0u;
  clear_has_baselv();
}
inline ::google::protobuf::uint32 SnapShotDataPB::baselv() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.baselv)
  return baselv_;
}
inline void SnapShotDataPB::set_baselv(::google::protobuf::uint32 value) {
  set_has_baselv();
  baselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.baselv)
}

// optional uint32 hair = 3 [default = 0];
inline bool SnapShotDataPB::has_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnapShotDataPB::set_has_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnapShotDataPB::clear_has_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnapShotDataPB::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 SnapShotDataPB::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.hair)
  return hair_;
}
inline void SnapShotDataPB::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.hair)
}

// optional uint32 haircolor = 4 [default = 0];
inline bool SnapShotDataPB::has_haircolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnapShotDataPB::set_has_haircolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnapShotDataPB::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnapShotDataPB::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 SnapShotDataPB::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.haircolor)
  return haircolor_;
}
inline void SnapShotDataPB::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.haircolor)
}

// optional uint32 lefthand = 5 [default = 0];
inline bool SnapShotDataPB::has_lefthand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SnapShotDataPB::set_has_lefthand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SnapShotDataPB::clear_has_lefthand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SnapShotDataPB::clear_lefthand() {
  lefthand_ = 0u;
  clear_has_lefthand();
}
inline ::google::protobuf::uint32 SnapShotDataPB::lefthand() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.lefthand)
  return lefthand_;
}
inline void SnapShotDataPB::set_lefthand(::google::protobuf::uint32 value) {
  set_has_lefthand();
  lefthand_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.lefthand)
}

// optional uint32 righthand = 6 [default = 0];
inline bool SnapShotDataPB::has_righthand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SnapShotDataPB::set_has_righthand() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SnapShotDataPB::clear_has_righthand() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SnapShotDataPB::clear_righthand() {
  righthand_ = 0u;
  clear_has_righthand();
}
inline ::google::protobuf::uint32 SnapShotDataPB::righthand() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.righthand)
  return righthand_;
}
inline void SnapShotDataPB::set_righthand(::google::protobuf::uint32 value) {
  set_has_righthand();
  righthand_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.righthand)
}

// optional uint32 body = 7 [default = 0];
inline bool SnapShotDataPB::has_body() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SnapShotDataPB::set_has_body() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SnapShotDataPB::clear_has_body() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SnapShotDataPB::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 SnapShotDataPB::body() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.body)
  return body_;
}
inline void SnapShotDataPB::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.body)
}

// optional uint32 head = 8 [default = 0];
inline bool SnapShotDataPB::has_head() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SnapShotDataPB::set_has_head() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SnapShotDataPB::clear_has_head() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SnapShotDataPB::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 SnapShotDataPB::head() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.head)
  return head_;
}
inline void SnapShotDataPB::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.head)
}

// optional uint32 back = 9 [default = 0];
inline bool SnapShotDataPB::has_back() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SnapShotDataPB::set_has_back() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SnapShotDataPB::clear_has_back() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SnapShotDataPB::clear_back() {
  back_ = 0u;
  clear_has_back();
}
inline ::google::protobuf::uint32 SnapShotDataPB::back() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.back)
  return back_;
}
inline void SnapShotDataPB::set_back(::google::protobuf::uint32 value) {
  set_has_back();
  back_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.back)
}

// optional uint32 face = 10 [default = 0];
inline bool SnapShotDataPB::has_face() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SnapShotDataPB::set_has_face() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SnapShotDataPB::clear_has_face() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SnapShotDataPB::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 SnapShotDataPB::face() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.face)
  return face_;
}
inline void SnapShotDataPB::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.face)
}

// optional uint32 tail = 11 [default = 0];
inline bool SnapShotDataPB::has_tail() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SnapShotDataPB::set_has_tail() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SnapShotDataPB::clear_has_tail() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SnapShotDataPB::clear_tail() {
  tail_ = 0u;
  clear_has_tail();
}
inline ::google::protobuf::uint32 SnapShotDataPB::tail() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.tail)
  return tail_;
}
inline void SnapShotDataPB::set_tail(::google::protobuf::uint32 value) {
  set_has_tail();
  tail_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.tail)
}

// optional uint32 mount = 12 [default = 0];
inline bool SnapShotDataPB::has_mount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SnapShotDataPB::set_has_mount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SnapShotDataPB::clear_has_mount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SnapShotDataPB::clear_mount() {
  mount_ = 0u;
  clear_has_mount();
}
inline ::google::protobuf::uint32 SnapShotDataPB::mount() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.mount)
  return mount_;
}
inline void SnapShotDataPB::set_mount(::google::protobuf::uint32 value) {
  set_has_mount();
  mount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.mount)
}

// optional uint32 eye = 19 [default = 0];
inline bool SnapShotDataPB::has_eye() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SnapShotDataPB::set_has_eye() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SnapShotDataPB::clear_has_eye() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SnapShotDataPB::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 SnapShotDataPB::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.eye)
  return eye_;
}
inline void SnapShotDataPB::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.eye)
}

// optional uint32 partnerid = 20 [default = 0];
inline bool SnapShotDataPB::has_partnerid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SnapShotDataPB::set_has_partnerid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SnapShotDataPB::clear_has_partnerid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SnapShotDataPB::clear_partnerid() {
  partnerid_ = 0u;
  clear_has_partnerid();
}
inline ::google::protobuf::uint32 SnapShotDataPB::partnerid() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.partnerid)
  return partnerid_;
}
inline void SnapShotDataPB::set_partnerid(::google::protobuf::uint32 value) {
  set_has_partnerid();
  partnerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.partnerid)
}

// optional uint32 portrait = 21 [default = 0];
inline bool SnapShotDataPB::has_portrait() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SnapShotDataPB::set_has_portrait() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SnapShotDataPB::clear_has_portrait() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SnapShotDataPB::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 SnapShotDataPB::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.portrait)
  return portrait_;
}
inline void SnapShotDataPB::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.portrait)
}

// optional uint32 mouth = 22 [default = 0];
inline bool SnapShotDataPB::has_mouth() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SnapShotDataPB::set_has_mouth() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SnapShotDataPB::clear_has_mouth() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SnapShotDataPB::clear_mouth() {
  mouth_ = 0u;
  clear_has_mouth();
}
inline ::google::protobuf::uint32 SnapShotDataPB::mouth() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.mouth)
  return mouth_;
}
inline void SnapShotDataPB::set_mouth(::google::protobuf::uint32 value) {
  set_has_mouth();
  mouth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.mouth)
}

// optional uint32 clothcolor = 23 [default = 0];
inline bool SnapShotDataPB::has_clothcolor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SnapShotDataPB::set_has_clothcolor() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SnapShotDataPB::clear_has_clothcolor() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SnapShotDataPB::clear_clothcolor() {
  clothcolor_ = 0u;
  clear_has_clothcolor();
}
inline ::google::protobuf::uint32 SnapShotDataPB::clothcolor() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.clothcolor)
  return clothcolor_;
}
inline void SnapShotDataPB::set_clothcolor(::google::protobuf::uint32 value) {
  set_has_clothcolor();
  clothcolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.clothcolor)
}

// optional .Cmd.EGender gender = 13 [default = EGENDER_MIN];
inline bool SnapShotDataPB::has_gender() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SnapShotDataPB::set_has_gender() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SnapShotDataPB::clear_has_gender() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SnapShotDataPB::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender SnapShotDataPB::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void SnapShotDataPB::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.gender)
}

// optional .Cmd.EProfession profession = 14 [default = EPROFESSION_MIN];
inline bool SnapShotDataPB::has_profession() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SnapShotDataPB::set_has_profession() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SnapShotDataPB::clear_has_profession() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SnapShotDataPB::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::Cmd::EProfession SnapShotDataPB::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.profession)
  return static_cast< ::Cmd::EProfession >(profession_);
}
inline void SnapShotDataPB::set_profession(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.profession)
}

// optional string name = 15;
inline bool SnapShotDataPB::has_name() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SnapShotDataPB::set_has_name() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SnapShotDataPB::clear_has_name() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SnapShotDataPB::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SnapShotDataPB::name() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.name)
  return *name_;
}
inline void SnapShotDataPB::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.name)
}
inline void SnapShotDataPB::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SnapShotDataPB.name)
}
inline void SnapShotDataPB::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SnapShotDataPB.name)
}
inline ::std::string* SnapShotDataPB::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SnapShotDataPB.name)
  return name_;
}
inline ::std::string* SnapShotDataPB::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SnapShotDataPB::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SnapShotDataPB.name)
}

// optional uint32 sequence = 16 [default = 0];
inline bool SnapShotDataPB::has_sequence() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SnapShotDataPB::set_has_sequence() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SnapShotDataPB::clear_has_sequence() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SnapShotDataPB::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 SnapShotDataPB::sequence() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.sequence)
  return sequence_;
}
inline void SnapShotDataPB::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.sequence)
}

// optional uint32 isopen = 17 [default = 0];
inline bool SnapShotDataPB::has_isopen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SnapShotDataPB::set_has_isopen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SnapShotDataPB::clear_has_isopen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SnapShotDataPB::clear_isopen() {
  isopen_ = 0u;
  clear_has_isopen();
}
inline ::google::protobuf::uint32 SnapShotDataPB::isopen() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.isopen)
  return isopen_;
}
inline void SnapShotDataPB::set_isopen(::google::protobuf::uint32 value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.isopen)
}

// optional uint32 deletetime = 18 [default = 0];
inline bool SnapShotDataPB::has_deletetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SnapShotDataPB::set_has_deletetime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SnapShotDataPB::clear_has_deletetime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SnapShotDataPB::clear_deletetime() {
  deletetime_ = 0u;
  clear_has_deletetime();
}
inline ::google::protobuf::uint32 SnapShotDataPB::deletetime() const {
  // @@protoc_insertion_point(field_get:Cmd.SnapShotDataPB.deletetime)
  return deletetime_;
}
inline void SnapShotDataPB::set_deletetime(::google::protobuf::uint32 value) {
  set_has_deletetime();
  deletetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SnapShotDataPB.deletetime)
}

// -------------------------------------------------------------------

// Pos

// optional float x = 1 [default = 0];
inline bool Pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Pos::x() const {
  // @@protoc_insertion_point(field_get:Cmd.Pos.x)
  return x_;
}
inline void Pos::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Pos.x)
}

// optional float y = 2 [default = 0];
inline bool Pos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Pos::y() const {
  // @@protoc_insertion_point(field_get:Cmd.Pos.y)
  return y_;
}
inline void Pos::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Pos.y)
}

// optional float z = 3 [default = 0];
inline bool Pos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Pos::z() const {
  // @@protoc_insertion_point(field_get:Cmd.Pos.z)
  return z_;
}
inline void Pos::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Pos.z)
}

// -------------------------------------------------------------------

// NpcDefineData

// optional int32 id = 1 [default = 0];
inline bool NpcDefineData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NpcDefineData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NpcDefineData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NpcDefineData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NpcDefineData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.id)
  return id_;
}
inline void NpcDefineData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.id)
}

// optional string name = 2;
inline bool NpcDefineData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NpcDefineData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NpcDefineData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NpcDefineData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NpcDefineData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.name)
  return *name_;
}
inline void NpcDefineData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.name)
}
inline void NpcDefineData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NpcDefineData.name)
}
inline void NpcDefineData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NpcDefineData.name)
}
inline ::std::string* NpcDefineData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NpcDefineData.name)
  return name_;
}
inline ::std::string* NpcDefineData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NpcDefineData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NpcDefineData.name)
}

// optional .Cmd.Pos pos = 3;
inline bool NpcDefineData::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NpcDefineData::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NpcDefineData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NpcDefineData::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::Pos::Clear();
  clear_has_pos();
}
inline const ::Cmd::Pos& NpcDefineData::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::Pos* NpcDefineData::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::Pos;
  // @@protoc_insertion_point(field_mutable:Cmd.NpcDefineData.pos)
  return pos_;
}
inline ::Cmd::Pos* NpcDefineData::release_pos() {
  clear_has_pos();
  ::Cmd::Pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void NpcDefineData::set_allocated_pos(::Cmd::Pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NpcDefineData.pos)
}

// optional int32 range = 4 [default = 0];
inline bool NpcDefineData::has_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NpcDefineData::set_has_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NpcDefineData::clear_has_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NpcDefineData::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline ::google::protobuf::int32 NpcDefineData::range() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.range)
  return range_;
}
inline void NpcDefineData::set_range(::google::protobuf::int32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.range)
}

// optional int32 dir = 5 [default = 0];
inline bool NpcDefineData::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NpcDefineData::set_has_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NpcDefineData::clear_has_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NpcDefineData::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 NpcDefineData::dir() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.dir)
  return dir_;
}
inline void NpcDefineData::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.dir)
}

// optional int32 reborn = 6 [default = 0];
inline bool NpcDefineData::has_reborn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NpcDefineData::set_has_reborn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NpcDefineData::clear_has_reborn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NpcDefineData::clear_reborn() {
  reborn_ = 0;
  clear_has_reborn();
}
inline ::google::protobuf::int32 NpcDefineData::reborn() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.reborn)
  return reborn_;
}
inline void NpcDefineData::set_reborn(::google::protobuf::int32 value) {
  set_has_reborn();
  reborn_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.reborn)
}

// optional int32 territory = 7 [default = 0];
inline bool NpcDefineData::has_territory() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NpcDefineData::set_has_territory() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NpcDefineData::clear_has_territory() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NpcDefineData::clear_territory() {
  territory_ = 0;
  clear_has_territory();
}
inline ::google::protobuf::int32 NpcDefineData::territory() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.territory)
  return territory_;
}
inline void NpcDefineData::set_territory(::google::protobuf::int32 value) {
  set_has_territory();
  territory_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.territory)
}

// optional float scalemin = 8 [default = 0];
inline bool NpcDefineData::has_scalemin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NpcDefineData::set_has_scalemin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NpcDefineData::clear_has_scalemin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NpcDefineData::clear_scalemin() {
  scalemin_ = 0;
  clear_has_scalemin();
}
inline float NpcDefineData::scalemin() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.scalemin)
  return scalemin_;
}
inline void NpcDefineData::set_scalemin(float value) {
  set_has_scalemin();
  scalemin_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.scalemin)
}

// optional float scalemax = 9 [default = 0];
inline bool NpcDefineData::has_scalemax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NpcDefineData::set_has_scalemax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NpcDefineData::clear_has_scalemax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NpcDefineData::clear_scalemax() {
  scalemax_ = 0;
  clear_has_scalemax();
}
inline float NpcDefineData::scalemax() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.scalemax)
  return scalemax_;
}
inline void NpcDefineData::set_scalemax(float value) {
  set_has_scalemax();
  scalemax_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.scalemax)
}

// optional int32 life = 10 [default = 0];
inline bool NpcDefineData::has_life() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NpcDefineData::set_has_life() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NpcDefineData::clear_has_life() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NpcDefineData::clear_life() {
  life_ = 0;
  clear_has_life();
}
inline ::google::protobuf::int32 NpcDefineData::life() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.life)
  return life_;
}
inline void NpcDefineData::set_life(::google::protobuf::int32 value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.life)
}

// optional int32 behaviours = 11 [default = 0];
inline bool NpcDefineData::has_behaviours() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NpcDefineData::set_has_behaviours() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NpcDefineData::clear_has_behaviours() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NpcDefineData::clear_behaviours() {
  behaviours_ = 0;
  clear_has_behaviours();
}
inline ::google::protobuf::int32 NpcDefineData::behaviours() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.behaviours)
  return behaviours_;
}
inline void NpcDefineData::set_behaviours(::google::protobuf::int32 value) {
  set_has_behaviours();
  behaviours_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.behaviours)
}

// optional int32 search = 13 [default = 0];
inline bool NpcDefineData::has_search() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NpcDefineData::set_has_search() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NpcDefineData::clear_has_search() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NpcDefineData::clear_search() {
  search_ = 0;
  clear_has_search();
}
inline ::google::protobuf::int32 NpcDefineData::search() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.search)
  return search_;
}
inline void NpcDefineData::set_search(::google::protobuf::int32 value) {
  set_has_search();
  search_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.search)
}

// optional int32 uniqueid = 14 [default = 0];
inline bool NpcDefineData::has_uniqueid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NpcDefineData::set_has_uniqueid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NpcDefineData::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NpcDefineData::clear_uniqueid() {
  uniqueid_ = 0;
  clear_has_uniqueid();
}
inline ::google::protobuf::int32 NpcDefineData::uniqueid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.uniqueid)
  return uniqueid_;
}
inline void NpcDefineData::set_uniqueid(::google::protobuf::int32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.uniqueid)
}

// optional int32 gearorgstate = 15 [default = 0];
inline bool NpcDefineData::has_gearorgstate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NpcDefineData::set_has_gearorgstate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NpcDefineData::clear_has_gearorgstate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NpcDefineData::clear_gearorgstate() {
  gearorgstate_ = 0;
  clear_has_gearorgstate();
}
inline ::google::protobuf::int32 NpcDefineData::gearorgstate() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.gearorgstate)
  return gearorgstate_;
}
inline void NpcDefineData::set_gearorgstate(::google::protobuf::int32 value) {
  set_has_gearorgstate();
  gearorgstate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.gearorgstate)
}

// optional int32 purify = 16 [default = 0];
inline bool NpcDefineData::has_purify() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NpcDefineData::set_has_purify() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NpcDefineData::clear_has_purify() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NpcDefineData::clear_purify() {
  purify_ = 0;
  clear_has_purify();
}
inline ::google::protobuf::int32 NpcDefineData::purify() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.purify)
  return purify_;
}
inline void NpcDefineData::set_purify(::google::protobuf::int32 value) {
  set_has_purify();
  purify_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.purify)
}

// optional int32 attsafelv = 17 [default = 0];
inline bool NpcDefineData::has_attsafelv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NpcDefineData::set_has_attsafelv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NpcDefineData::clear_has_attsafelv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NpcDefineData::clear_attsafelv() {
  attsafelv_ = 0;
  clear_has_attsafelv();
}
inline ::google::protobuf::int32 NpcDefineData::attsafelv() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.attsafelv)
  return attsafelv_;
}
inline void NpcDefineData::set_attsafelv(::google::protobuf::int32 value) {
  set_has_attsafelv();
  attsafelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.attsafelv)
}

// optional int32 disptime = 18 [default = 0];
inline bool NpcDefineData::has_disptime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NpcDefineData::set_has_disptime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NpcDefineData::clear_has_disptime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NpcDefineData::clear_disptime() {
  disptime_ = 0;
  clear_has_disptime();
}
inline ::google::protobuf::int32 NpcDefineData::disptime() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.disptime)
  return disptime_;
}
inline void NpcDefineData::set_disptime(::google::protobuf::int32 value) {
  set_has_disptime();
  disptime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.disptime)
}

// optional int32 gearprivate = 19 [default = 0];
inline bool NpcDefineData::has_gearprivate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NpcDefineData::set_has_gearprivate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NpcDefineData::clear_has_gearprivate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NpcDefineData::clear_gearprivate() {
  gearprivate_ = 0;
  clear_has_gearprivate();
}
inline ::google::protobuf::int32 NpcDefineData::gearprivate() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.gearprivate)
  return gearprivate_;
}
inline void NpcDefineData::set_gearprivate(::google::protobuf::int32 value) {
  set_has_gearprivate();
  gearprivate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.gearprivate)
}

// optional int32 level = 20 [default = 0];
inline bool NpcDefineData::has_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NpcDefineData::set_has_level() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NpcDefineData::clear_has_level() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NpcDefineData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NpcDefineData::level() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.level)
  return level_;
}
inline void NpcDefineData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.level)
}

// optional string waitaction = 21;
inline bool NpcDefineData::has_waitaction() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NpcDefineData::set_has_waitaction() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NpcDefineData::clear_has_waitaction() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NpcDefineData::clear_waitaction() {
  if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_->clear();
  }
  clear_has_waitaction();
}
inline const ::std::string& NpcDefineData::waitaction() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.waitaction)
  return *waitaction_;
}
inline void NpcDefineData::set_waitaction(const ::std::string& value) {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  waitaction_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.waitaction)
}
inline void NpcDefineData::set_waitaction(const char* value) {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  waitaction_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NpcDefineData.waitaction)
}
inline void NpcDefineData::set_waitaction(const char* value, size_t size) {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  waitaction_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NpcDefineData.waitaction)
}
inline ::std::string* NpcDefineData::mutable_waitaction() {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NpcDefineData.waitaction)
  return waitaction_;
}
inline ::std::string* NpcDefineData::release_waitaction() {
  clear_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = waitaction_;
    waitaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NpcDefineData::set_allocated_waitaction(::std::string* waitaction) {
  if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete waitaction_;
  }
  if (waitaction) {
    set_has_waitaction();
    waitaction_ = waitaction;
  } else {
    clear_has_waitaction();
    waitaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NpcDefineData.waitaction)
}

// optional .Cmd.ESummonType stype = 22 [default = ESUMMONTYPE_MIN];
inline bool NpcDefineData::has_stype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NpcDefineData::set_has_stype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void NpcDefineData::clear_has_stype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void NpcDefineData::clear_stype() {
  stype_ = 0;
  clear_has_stype();
}
inline ::Cmd::ESummonType NpcDefineData::stype() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.stype)
  return static_cast< ::Cmd::ESummonType >(stype_);
}
inline void NpcDefineData::set_stype(::Cmd::ESummonType value) {
  assert(::Cmd::ESummonType_IsValid(value));
  set_has_stype();
  stype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.stype)
}

// repeated int32 superai = 23;
inline int NpcDefineData::superai_size() const {
  return superai_.size();
}
inline void NpcDefineData::clear_superai() {
  superai_.Clear();
}
inline ::google::protobuf::int32 NpcDefineData::superai(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.superai)
  return superai_.Get(index);
}
inline void NpcDefineData::set_superai(int index, ::google::protobuf::int32 value) {
  superai_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.superai)
}
inline void NpcDefineData::add_superai(::google::protobuf::int32 value) {
  superai_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NpcDefineData.superai)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NpcDefineData::superai() const {
  // @@protoc_insertion_point(field_list:Cmd.NpcDefineData.superai)
  return superai_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NpcDefineData::mutable_superai() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NpcDefineData.superai)
  return &superai_;
}

// optional int32 pursue = 24 [default = 0];
inline bool NpcDefineData::has_pursue() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void NpcDefineData::set_has_pursue() {
  _has_bits_[0] |= 0x00400000u;
}
inline void NpcDefineData::clear_has_pursue() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void NpcDefineData::clear_pursue() {
  pursue_ = 0;
  clear_has_pursue();
}
inline ::google::protobuf::int32 NpcDefineData::pursue() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.pursue)
  return pursue_;
}
inline void NpcDefineData::set_pursue(::google::protobuf::int32 value) {
  set_has_pursue();
  pursue_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.pursue)
}

// optional int32 pursuetime = 25 [default = 0];
inline bool NpcDefineData::has_pursuetime() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void NpcDefineData::set_has_pursuetime() {
  _has_bits_[0] |= 0x00800000u;
}
inline void NpcDefineData::clear_has_pursuetime() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void NpcDefineData::clear_pursuetime() {
  pursuetime_ = 0;
  clear_has_pursuetime();
}
inline ::google::protobuf::int32 NpcDefineData::pursuetime() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.pursuetime)
  return pursuetime_;
}
inline void NpcDefineData::set_pursuetime(::google::protobuf::int32 value) {
  set_has_pursuetime();
  pursuetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.pursuetime)
}

// optional int32 weaponpetid = 26 [default = 0];
inline bool NpcDefineData::has_weaponpetid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void NpcDefineData::set_has_weaponpetid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void NpcDefineData::clear_has_weaponpetid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void NpcDefineData::clear_weaponpetid() {
  weaponpetid_ = 0;
  clear_has_weaponpetid();
}
inline ::google::protobuf::int32 NpcDefineData::weaponpetid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.weaponpetid)
  return weaponpetid_;
}
inline void NpcDefineData::set_weaponpetid(::google::protobuf::int32 value) {
  set_has_weaponpetid();
  weaponpetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.weaponpetid)
}

// optional int32 deadlv = 27 [default = 0];
inline bool NpcDefineData::has_deadlv() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void NpcDefineData::set_has_deadlv() {
  _has_bits_[0] |= 0x02000000u;
}
inline void NpcDefineData::clear_has_deadlv() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void NpcDefineData::clear_deadlv() {
  deadlv_ = 0;
  clear_has_deadlv();
}
inline ::google::protobuf::int32 NpcDefineData::deadlv() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.deadlv)
  return deadlv_;
}
inline void NpcDefineData::set_deadlv(::google::protobuf::int32 value) {
  set_has_deadlv();
  deadlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.deadlv)
}

// repeated int32 deadrewardids = 28;
inline int NpcDefineData::deadrewardids_size() const {
  return deadrewardids_.size();
}
inline void NpcDefineData::clear_deadrewardids() {
  deadrewardids_.Clear();
}
inline ::google::protobuf::int32 NpcDefineData::deadrewardids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDefineData.deadrewardids)
  return deadrewardids_.Get(index);
}
inline void NpcDefineData::set_deadrewardids(int index, ::google::protobuf::int32 value) {
  deadrewardids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NpcDefineData.deadrewardids)
}
inline void NpcDefineData::add_deadrewardids(::google::protobuf::int32 value) {
  deadrewardids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NpcDefineData.deadrewardids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NpcDefineData::deadrewardids() const {
  // @@protoc_insertion_point(field_list:Cmd.NpcDefineData.deadrewardids)
  return deadrewardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NpcDefineData::mutable_deadrewardids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NpcDefineData.deadrewardids)
  return &deadrewardids_;
}

// -------------------------------------------------------------------

// UpyunApi

// optional string bucket = 1;
inline bool UpyunApi::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpyunApi::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpyunApi::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpyunApi::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& UpyunApi::bucket() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.bucket)
  return *bucket_;
}
inline void UpyunApi::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.bucket)
}
inline void UpyunApi::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunApi.bucket)
}
inline void UpyunApi::set_bucket(const char* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunApi.bucket)
}
inline ::std::string* UpyunApi::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunApi.bucket)
  return bucket_;
}
inline ::std::string* UpyunApi::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunApi::set_allocated_bucket(::std::string* bucket) {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (bucket) {
    set_has_bucket();
    bucket_ = bucket;
  } else {
    clear_has_bucket();
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunApi.bucket)
}

// optional string content_md5 = 2;
inline bool UpyunApi::has_content_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpyunApi::set_has_content_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpyunApi::clear_has_content_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpyunApi::clear_content_md5() {
  if (content_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_md5_->clear();
  }
  clear_has_content_md5();
}
inline const ::std::string& UpyunApi::content_md5() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.content_md5)
  return *content_md5_;
}
inline void UpyunApi::set_content_md5(const ::std::string& value) {
  set_has_content_md5();
  if (content_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_md5_ = new ::std::string;
  }
  content_md5_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.content_md5)
}
inline void UpyunApi::set_content_md5(const char* value) {
  set_has_content_md5();
  if (content_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_md5_ = new ::std::string;
  }
  content_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunApi.content_md5)
}
inline void UpyunApi::set_content_md5(const char* value, size_t size) {
  set_has_content_md5();
  if (content_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_md5_ = new ::std::string;
  }
  content_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunApi.content_md5)
}
inline ::std::string* UpyunApi::mutable_content_md5() {
  set_has_content_md5();
  if (content_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunApi.content_md5)
  return content_md5_;
}
inline ::std::string* UpyunApi::release_content_md5() {
  clear_has_content_md5();
  if (content_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_md5_;
    content_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunApi::set_allocated_content_md5(::std::string* content_md5) {
  if (content_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_md5_;
  }
  if (content_md5) {
    set_has_content_md5();
    content_md5_ = content_md5;
  } else {
    clear_has_content_md5();
    content_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunApi.content_md5)
}

// optional string content_lenth_range = 3;
inline bool UpyunApi::has_content_lenth_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpyunApi::set_has_content_lenth_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpyunApi::clear_has_content_lenth_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpyunApi::clear_content_lenth_range() {
  if (content_lenth_range_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_lenth_range_->clear();
  }
  clear_has_content_lenth_range();
}
inline const ::std::string& UpyunApi::content_lenth_range() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.content_lenth_range)
  return *content_lenth_range_;
}
inline void UpyunApi::set_content_lenth_range(const ::std::string& value) {
  set_has_content_lenth_range();
  if (content_lenth_range_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_lenth_range_ = new ::std::string;
  }
  content_lenth_range_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.content_lenth_range)
}
inline void UpyunApi::set_content_lenth_range(const char* value) {
  set_has_content_lenth_range();
  if (content_lenth_range_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_lenth_range_ = new ::std::string;
  }
  content_lenth_range_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunApi.content_lenth_range)
}
inline void UpyunApi::set_content_lenth_range(const char* value, size_t size) {
  set_has_content_lenth_range();
  if (content_lenth_range_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_lenth_range_ = new ::std::string;
  }
  content_lenth_range_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunApi.content_lenth_range)
}
inline ::std::string* UpyunApi::mutable_content_lenth_range() {
  set_has_content_lenth_range();
  if (content_lenth_range_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_lenth_range_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunApi.content_lenth_range)
  return content_lenth_range_;
}
inline ::std::string* UpyunApi::release_content_lenth_range() {
  clear_has_content_lenth_range();
  if (content_lenth_range_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_lenth_range_;
    content_lenth_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunApi::set_allocated_content_lenth_range(::std::string* content_lenth_range) {
  if (content_lenth_range_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_lenth_range_;
  }
  if (content_lenth_range) {
    set_has_content_lenth_range();
    content_lenth_range_ = content_lenth_range;
  } else {
    clear_has_content_lenth_range();
    content_lenth_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunApi.content_lenth_range)
}

// optional uint32 expiration = 4;
inline bool UpyunApi::has_expiration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpyunApi::set_has_expiration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpyunApi::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpyunApi::clear_expiration() {
  expiration_ = 0u;
  clear_has_expiration();
}
inline ::google::protobuf::uint32 UpyunApi::expiration() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.expiration)
  return expiration_;
}
inline void UpyunApi::set_expiration(::google::protobuf::uint32 value) {
  set_has_expiration();
  expiration_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.expiration)
}

// optional uint32 file_blocks = 5;
inline bool UpyunApi::has_file_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpyunApi::set_has_file_blocks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpyunApi::clear_has_file_blocks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpyunApi::clear_file_blocks() {
  file_blocks_ = 0u;
  clear_has_file_blocks();
}
inline ::google::protobuf::uint32 UpyunApi::file_blocks() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.file_blocks)
  return file_blocks_;
}
inline void UpyunApi::set_file_blocks(::google::protobuf::uint32 value) {
  set_has_file_blocks();
  file_blocks_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.file_blocks)
}

// optional string file_hash = 6;
inline bool UpyunApi::has_file_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpyunApi::set_has_file_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpyunApi::clear_has_file_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpyunApi::clear_file_hash() {
  if (file_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_hash_->clear();
  }
  clear_has_file_hash();
}
inline const ::std::string& UpyunApi::file_hash() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.file_hash)
  return *file_hash_;
}
inline void UpyunApi::set_file_hash(const ::std::string& value) {
  set_has_file_hash();
  if (file_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_hash_ = new ::std::string;
  }
  file_hash_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.file_hash)
}
inline void UpyunApi::set_file_hash(const char* value) {
  set_has_file_hash();
  if (file_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_hash_ = new ::std::string;
  }
  file_hash_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunApi.file_hash)
}
inline void UpyunApi::set_file_hash(const char* value, size_t size) {
  set_has_file_hash();
  if (file_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_hash_ = new ::std::string;
  }
  file_hash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunApi.file_hash)
}
inline ::std::string* UpyunApi::mutable_file_hash() {
  set_has_file_hash();
  if (file_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_hash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunApi.file_hash)
  return file_hash_;
}
inline ::std::string* UpyunApi::release_file_hash() {
  clear_has_file_hash();
  if (file_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_hash_;
    file_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunApi::set_allocated_file_hash(::std::string* file_hash) {
  if (file_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_hash_;
  }
  if (file_hash) {
    set_has_file_hash();
    file_hash_ = file_hash;
  } else {
    clear_has_file_hash();
    file_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunApi.file_hash)
}

// optional uint32 file_size = 7;
inline bool UpyunApi::has_file_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpyunApi::set_has_file_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpyunApi::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpyunApi::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 UpyunApi::file_size() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.file_size)
  return file_size_;
}
inline void UpyunApi::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.file_size)
}

// optional string path = 8;
inline bool UpyunApi::has_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpyunApi::set_has_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpyunApi::clear_has_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpyunApi::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& UpyunApi::path() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunApi.path)
  return *path_;
}
inline void UpyunApi::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunApi.path)
}
inline void UpyunApi::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunApi.path)
}
inline void UpyunApi::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunApi.path)
}
inline ::std::string* UpyunApi::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunApi.path)
  return path_;
}
inline ::std::string* UpyunApi::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunApi::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunApi.path)
}

// -------------------------------------------------------------------

// FrostItemInfo

// optional uint32 item_id = 1;
inline bool FrostItemInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrostItemInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrostItemInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrostItemInfo::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 FrostItemInfo::item_id() const {
  // @@protoc_insertion_point(field_get:Cmd.FrostItemInfo.item_id)
  return item_id_;
}
inline void FrostItemInfo::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrostItemInfo.item_id)
}

// optional uint64 frosted_time = 2;
inline bool FrostItemInfo::has_frosted_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrostItemInfo::set_has_frosted_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrostItemInfo::clear_has_frosted_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrostItemInfo::clear_frosted_time() {
  frosted_time_ = GOOGLE_ULONGLONG(0);
  clear_has_frosted_time();
}
inline ::google::protobuf::uint64 FrostItemInfo::frosted_time() const {
  // @@protoc_insertion_point(field_get:Cmd.FrostItemInfo.frosted_time)
  return frosted_time_;
}
inline void FrostItemInfo::set_frosted_time(::google::protobuf::uint64 value) {
  set_has_frosted_time();
  frosted_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrostItemInfo.frosted_time)
}

// -------------------------------------------------------------------

// SpEffectData

// optional string guid = 1;
inline bool SpEffectData::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpEffectData::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpEffectData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpEffectData::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& SpEffectData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectData.guid)
  return *guid_;
}
inline void SpEffectData::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SpEffectData.guid)
}
inline void SpEffectData::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SpEffectData.guid)
}
inline void SpEffectData::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SpEffectData.guid)
}
inline ::std::string* SpEffectData::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SpEffectData.guid)
  return guid_;
}
inline ::std::string* SpEffectData::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpEffectData::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SpEffectData.guid)
}

// optional uint32 id = 2;
inline bool SpEffectData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpEffectData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpEffectData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpEffectData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SpEffectData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectData.id)
  return id_;
}
inline void SpEffectData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpEffectData.id)
}

// repeated uint64 entity = 3;
inline int SpEffectData::entity_size() const {
  return entity_.size();
}
inline void SpEffectData::clear_entity() {
  entity_.Clear();
}
inline ::google::protobuf::uint64 SpEffectData::entity(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectData.entity)
  return entity_.Get(index);
}
inline void SpEffectData::set_entity(int index, ::google::protobuf::uint64 value) {
  entity_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.SpEffectData.entity)
}
inline void SpEffectData::add_entity(::google::protobuf::uint64 value) {
  entity_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.SpEffectData.entity)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SpEffectData::entity() const {
  // @@protoc_insertion_point(field_list:Cmd.SpEffectData.entity)
  return entity_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SpEffectData::mutable_entity() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SpEffectData.entity)
  return &entity_;
}

// optional uint32 expiretime = 4;
inline bool SpEffectData::has_expiretime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpEffectData::set_has_expiretime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpEffectData::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpEffectData::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 SpEffectData::expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectData.expiretime)
  return expiretime_;
}
inline void SpEffectData::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpEffectData.expiretime)
}

// -------------------------------------------------------------------

// Param

// optional string key = 1;
inline bool Param::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Param::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Param::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Param::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Param::key() const {
  // @@protoc_insertion_point(field_get:Cmd.Param.key)
  return *key_;
}
inline void Param::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.Param.key)
}
inline void Param::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.Param.key)
}
inline void Param::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.Param.key)
}
inline ::std::string* Param::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.Param.key)
  return key_;
}
inline ::std::string* Param::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Param::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.Param.key)
}

// optional string value = 2;
inline bool Param::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Param::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Param::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Param::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Param::value() const {
  // @@protoc_insertion_point(field_get:Cmd.Param.value)
  return *value_;
}
inline void Param::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.Param.value)
}
inline void Param::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.Param.value)
}
inline void Param::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.Param.value)
}
inline ::std::string* Param::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.Param.value)
  return value_;
}
inline ::std::string* Param::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Param::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.Param.value)
}

// repeated .Cmd.Param items = 3;
inline int Param::items_size() const {
  return items_.size();
}
inline void Param::clear_items() {
  items_.Clear();
}
inline const ::Cmd::Param& Param::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.Param.items)
  return items_.Get(index);
}
inline ::Cmd::Param* Param::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.Param.items)
  return items_.Mutable(index);
}
inline ::Cmd::Param* Param::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.Param.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Param >&
Param::items() const {
  // @@protoc_insertion_point(field_list:Cmd.Param.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::Param >*
Param::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.Param.items)
  return &items_;
}

// -------------------------------------------------------------------

// ConfigParam

// repeated .Cmd.Param params = 1;
inline int ConfigParam::params_size() const {
  return params_.size();
}
inline void ConfigParam::clear_params() {
  params_.Clear();
}
inline const ::Cmd::Param& ConfigParam::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ConfigParam.params)
  return params_.Get(index);
}
inline ::Cmd::Param* ConfigParam::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ConfigParam.params)
  return params_.Mutable(index);
}
inline ::Cmd::Param* ConfigParam::add_params() {
  // @@protoc_insertion_point(field_add:Cmd.ConfigParam.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Param >&
ConfigParam::params() const {
  // @@protoc_insertion_point(field_list:Cmd.ConfigParam.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::Param >*
ConfigParam::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ConfigParam.params)
  return &params_;
}

// -------------------------------------------------------------------

// UserPortraitData

// optional uint32 portrait = 1 [default = 0];
inline bool UserPortraitData::has_portrait() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPortraitData::set_has_portrait() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPortraitData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPortraitData::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 UserPortraitData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.portrait)
  return portrait_;
}
inline void UserPortraitData::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.portrait)
}

// optional uint32 body = 2 [default = 0];
inline bool UserPortraitData::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPortraitData::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPortraitData::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPortraitData::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 UserPortraitData::body() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.body)
  return body_;
}
inline void UserPortraitData::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.body)
}

// optional uint32 hair = 3 [default = 0];
inline bool UserPortraitData::has_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPortraitData::set_has_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPortraitData::clear_has_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPortraitData::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 UserPortraitData::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.hair)
  return hair_;
}
inline void UserPortraitData::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.hair)
}

// optional uint32 haircolor = 4 [default = 0];
inline bool UserPortraitData::has_haircolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPortraitData::set_has_haircolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPortraitData::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPortraitData::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 UserPortraitData::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.haircolor)
  return haircolor_;
}
inline void UserPortraitData::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.haircolor)
}

// optional uint32 gender = 5 [default = 0];
inline bool UserPortraitData::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserPortraitData::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserPortraitData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserPortraitData::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 UserPortraitData::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.gender)
  return gender_;
}
inline void UserPortraitData::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.gender)
}

// optional uint32 head = 6 [default = 0];
inline bool UserPortraitData::has_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserPortraitData::set_has_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserPortraitData::clear_has_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserPortraitData::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 UserPortraitData::head() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.head)
  return head_;
}
inline void UserPortraitData::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.head)
}

// optional uint32 face = 7 [default = 0];
inline bool UserPortraitData::has_face() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserPortraitData::set_has_face() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserPortraitData::clear_has_face() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserPortraitData::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 UserPortraitData::face() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.face)
  return face_;
}
inline void UserPortraitData::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.face)
}

// optional uint32 mouth = 8 [default = 0];
inline bool UserPortraitData::has_mouth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserPortraitData::set_has_mouth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserPortraitData::clear_has_mouth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserPortraitData::clear_mouth() {
  mouth_ = 0u;
  clear_has_mouth();
}
inline ::google::protobuf::uint32 UserPortraitData::mouth() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.mouth)
  return mouth_;
}
inline void UserPortraitData::set_mouth(::google::protobuf::uint32 value) {
  set_has_mouth();
  mouth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.mouth)
}

// optional uint32 eye = 9 [default = 0];
inline bool UserPortraitData::has_eye() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserPortraitData::set_has_eye() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserPortraitData::clear_has_eye() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserPortraitData::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 UserPortraitData::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.UserPortraitData.eye)
  return eye_;
}
inline void UserPortraitData::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserPortraitData.eye)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::EPublishVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPublishVersion>() {
  return ::Cmd::EPublishVersion_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EUserDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EUserDataType>() {
  return ::Cmd::EUserDataType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EMARITAL> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EMARITAL>() {
  return ::Cmd::EMARITAL_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAttrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAttrType>() {
  return ::Cmd::EAttrType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGender>() {
  return ::Cmd::EGender_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EProfession> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EProfession>() {
  return ::Cmd::EProfession_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQualityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQualityType>() {
  return ::Cmd::EQualityType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EMoneyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EMoneyType>() {
  return ::Cmd::EMoneyType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ECreatureStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ECreatureStatus>() {
  return ::Cmd::ECreatureStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ESource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ESource>() {
  return ::Cmd::ESource_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDoubleSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDoubleSource>() {
  return ::Cmd::EDoubleSource_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ESummonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ESummonType>() {
  return ::Cmd::ESummonType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETRADE_RET_CODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETRADE_RET_CODE>() {
  return ::Cmd::ETRADE_RET_CODE_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAccountStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAccountStatus>() {
  return ::Cmd::EAccountStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBgmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBgmType>() {
  return ::Cmd::EBgmType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDepositCardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDepositCardType>() {
  return ::Cmd::EDepositCardType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoCommon_2eproto__INCLUDED
