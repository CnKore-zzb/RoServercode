// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dojo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Dojo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* DojoPrivateInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoPrivateInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoMsgBlob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoMsgBlob_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoPublicInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoPublicInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoInviteCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoInviteCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoReplyCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoReplyCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterDojo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterDojo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoAddMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoAddMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoPanelOper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoPanelOper_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoSponsorCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoSponsorCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoQueryStateCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoQueryStateCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoRewardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoRewardCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DojoParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDojoReply_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DojoState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPassType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Dojo_2eproto() {
  protobuf_AddDesc_Dojo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Dojo.proto");
  GOOGLE_CHECK(file != NULL);
  DojoPrivateInfoCmd_descriptor_ = file->message_type(0);
  static const int DojoPrivateInfoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPrivateInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPrivateInfoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPrivateInfoCmd, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPrivateInfoCmd, completed_id_),
  };
  DojoPrivateInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoPrivateInfoCmd_descriptor_,
      DojoPrivateInfoCmd::default_instance_,
      DojoPrivateInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPrivateInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPrivateInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoPrivateInfoCmd));
  DojoMsg_descriptor_ = file->message_type(1);
  static const int DojoMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsg, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsg, conent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsg, iscompleted_),
  };
  DojoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoMsg_descriptor_,
      DojoMsg::default_instance_,
      DojoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoMsg));
  DojoMsgBlob_descriptor_ = file->message_type(2);
  static const int DojoMsgBlob_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsgBlob, msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsgBlob, dojoid_),
  };
  DojoMsgBlob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoMsgBlob_descriptor_,
      DojoMsgBlob::default_instance_,
      DojoMsgBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsgBlob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoMsgBlob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoMsgBlob));
  DojoPublicInfoCmd_descriptor_ = file->message_type(3);
  static const int DojoPublicInfoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPublicInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPublicInfoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPublicInfoCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPublicInfoCmd, msgblob_),
  };
  DojoPublicInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoPublicInfoCmd_descriptor_,
      DojoPublicInfoCmd::default_instance_,
      DojoPublicInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPublicInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPublicInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoPublicInfoCmd));
  DojoInviteCmd_descriptor_ = file->message_type(4);
  static const int DojoInviteCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoInviteCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoInviteCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoInviteCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoInviteCmd, sponsorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoInviteCmd, sponsorname_),
  };
  DojoInviteCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoInviteCmd_descriptor_,
      DojoInviteCmd::default_instance_,
      DojoInviteCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoInviteCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoInviteCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoInviteCmd));
  DojoReplyCmd_descriptor_ = file->message_type(5);
  static const int DojoReplyCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoReplyCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoReplyCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoReplyCmd, ereply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoReplyCmd, userid_),
  };
  DojoReplyCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoReplyCmd_descriptor_,
      DojoReplyCmd::default_instance_,
      DojoReplyCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoReplyCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoReplyCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoReplyCmd));
  EnterDojo_descriptor_ = file->message_type(6);
  static const int EnterDojo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, sign_),
  };
  EnterDojo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterDojo_descriptor_,
      EnterDojo::default_instance_,
      EnterDojo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterDojo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterDojo));
  DojoAddMsg_descriptor_ = file->message_type(7);
  static const int DojoAddMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoAddMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoAddMsg, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoAddMsg, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoAddMsg, dojomsg_),
  };
  DojoAddMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoAddMsg_descriptor_,
      DojoAddMsg::default_instance_,
      DojoAddMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoAddMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoAddMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoAddMsg));
  DojoPanelOper_descriptor_ = file->message_type(8);
  static const int DojoPanelOper_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPanelOper, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPanelOper, param_),
  };
  DojoPanelOper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoPanelOper_descriptor_,
      DojoPanelOper::default_instance_,
      DojoPanelOper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPanelOper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoPanelOper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoPanelOper));
  DojoSponsorCmd_descriptor_ = file->message_type(9);
  static const int DojoSponsorCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, is_cancel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, sponsorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, sponsorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, ret_),
  };
  DojoSponsorCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoSponsorCmd_descriptor_,
      DojoSponsorCmd::default_instance_,
      DojoSponsorCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoSponsorCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoSponsorCmd));
  DojoQueryStateCmd_descriptor_ = file->message_type(10);
  static const int DojoQueryStateCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, sponsorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, sponsorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, ret_),
  };
  DojoQueryStateCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoQueryStateCmd_descriptor_,
      DojoQueryStateCmd::default_instance_,
      DojoQueryStateCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoQueryStateCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoQueryStateCmd));
  DojoRewardCmd_descriptor_ = file->message_type(11);
  static const int DojoRewardCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoRewardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoRewardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoRewardCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoRewardCmd, passtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoRewardCmd, items_),
  };
  DojoRewardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoRewardCmd_descriptor_,
      DojoRewardCmd::default_instance_,
      DojoRewardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoRewardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoRewardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoRewardCmd));
  DojoParam_descriptor_ = file->enum_type(0);
  EDojoReply_descriptor_ = file->enum_type(1);
  DojoState_descriptor_ = file->enum_type(2);
  EPassType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Dojo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoPrivateInfoCmd_descriptor_, &DojoPrivateInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoMsg_descriptor_, &DojoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoMsgBlob_descriptor_, &DojoMsgBlob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoPublicInfoCmd_descriptor_, &DojoPublicInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoInviteCmd_descriptor_, &DojoInviteCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoReplyCmd_descriptor_, &DojoReplyCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterDojo_descriptor_, &EnterDojo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoAddMsg_descriptor_, &DojoAddMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoPanelOper_descriptor_, &DojoPanelOper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoSponsorCmd_descriptor_, &DojoSponsorCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoQueryStateCmd_descriptor_, &DojoQueryStateCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoRewardCmd_descriptor_, &DojoRewardCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Dojo_2eproto() {
  delete DojoPrivateInfoCmd::default_instance_;
  delete DojoPrivateInfoCmd_reflection_;
  delete DojoMsg::default_instance_;
  delete DojoMsg_reflection_;
  delete DojoMsgBlob::default_instance_;
  delete DojoMsgBlob_reflection_;
  delete DojoPublicInfoCmd::default_instance_;
  delete DojoPublicInfoCmd_reflection_;
  delete DojoInviteCmd::default_instance_;
  delete DojoInviteCmd_reflection_;
  delete DojoReplyCmd::default_instance_;
  delete DojoReplyCmd_reflection_;
  delete EnterDojo::default_instance_;
  delete EnterDojo_reflection_;
  delete DojoAddMsg::default_instance_;
  delete DojoAddMsg_reflection_;
  delete DojoPanelOper::default_instance_;
  delete DojoPanelOper_reflection_;
  delete DojoSponsorCmd::default_instance_;
  delete DojoSponsorCmd_reflection_;
  delete DojoQueryStateCmd::default_instance_;
  delete DojoQueryStateCmd_reflection_;
  delete DojoRewardCmd::default_instance_;
  delete DojoRewardCmd_reflection_;
}

void protobuf_AddDesc_Dojo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nDojo.proto\022\003Cmd\032\nxCmd.proto\032\017SceneItem"
    ".proto\"\242\001\n\022DojoPrivateInfoCmd\022(\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\rDOJO_PROTOCMD\022;\n\005param"
    "\030\002 \001(\0162\016.Cmd.DojoParam:\034EDOJOPARAM_DOJO_"
    "PRIVATE_INFO\022\017\n\007groupid\030\003 \001(\r\022\024\n\014complet"
    "ed_id\030\004 \003(\r\"L\n\007DojoMsg\022\016\n\006charid\030\001 \001(\004\022\014"
    "\n\004name\030\002 \001(\t\022\016\n\006conent\030\003 \001(\t\022\023\n\013iscomple"
    "ted\030\004 \001(\010\"9\n\013DojoMsgBlob\022\032\n\004msgs\030\001 \003(\0132\014"
    ".Cmd.DojoMsg\022\016\n\006dojoid\030\002 \001(\r\"\254\001\n\021DojoPub"
    "licInfoCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rD"
    "OJO_PROTOCMD\022:\n\005param\030\002 \001(\0162\016.Cmd.DojoPa"
    "ram:\033EDOJOPARAM_DOJO_PUBLIC_INFO\022\016\n\006dojo"
    "id\030\003 \001(\r\022!\n\007msgblob\030\004 \001(\0132\020.Cmd.DojoMsgB"
    "lob\"\243\001\n\rDojoInviteCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\rDOJO_PROTOCMD\0220\n\005param\030\002 \001(\0162\016"
    ".Cmd.DojoParam:\021EDOJOPARAM_INVITE\022\016\n\006doj"
    "oid\030\003 \001(\r\022\021\n\tsponsorid\030\004 \001(\004\022\023\n\013sponsorn"
    "ame\030\005 \001(\t\"\262\001\n\014DojoReplyCmd\022(\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\rDOJO_PROTOCMD\022/\n\005param\030\002 "
    "\001(\0162\016.Cmd.DojoParam:\020EDOJOPARAM_REPLY\0224\n"
    "\006eReply\030\003 \001(\0162\017.Cmd.EDojoReply:\023EDOJOREP"
    "LY_DISAGREE\022\021\n\006userid\030\004 \001(\004:\0010\"\302\001\n\tEnter"
    "Dojo\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rDOJO_PR"
    "OTOCMD\0223\n\005param\030\002 \001(\0162\016.Cmd.DojoParam:\024E"
    "DOJOPARAM_ENTERDOJO\022\021\n\006dojoid\030\003 \001(\r:\0010\022\021"
    "\n\006userid\030\004 \001(\004:\0010\022\021\n\006zoneid\030\005 \001(\r:\0010\022\017\n\004"
    "time\030\006 \001(\r:\0010\022\014\n\004sign\030\007 \001(\t\"\230\001\n\nDojoAddM"
    "sg\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rDOJO_PROT"
    "OCMD\0221\n\005param\030\002 \001(\0162\016.Cmd.DojoParam:\022EDO"
    "JOPARAM_ADD_MSG\022\016\n\006dojoid\030\003 \001(\r\022\035\n\007dojom"
    "sg\030\004 \001(\0132\014.Cmd.DojoMsg\"o\n\rDojoPanelOper\022"
    "(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rDOJO_PROTOCM"
    "D\0224\n\005param\030\002 \001(\0162\016.Cmd.DojoParam:\025EDOJOP"
    "ARAM_PANEL_OPER\"\314\001\n\016DojoSponsorCmd\022(\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\rDOJO_PROTOCMD\0221\n\005"
    "param\030\002 \001(\0162\016.Cmd.DojoParam:\022EDOJOPARAM_"
    "SPONSOR\022\016\n\006dojoid\030\003 \001(\r\022\030\n\tis_cancel\030\004 \001"
    "(\010:\005false\022\021\n\tsponsorid\030\005 \001(\004\022\023\n\013sponsorn"
    "ame\030\006 \001(\t\022\013\n\003ret\030\007 \001(\010\"\327\001\n\021DojoQueryStat"
    "eCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\rDOJO_PR"
    "OTOCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.DojoParam:\025E"
    "DOJOPARAM_QUERYSTATE\022\035\n\005state\030\003 \001(\0162\016.Cm"
    "d.DojoState\022\016\n\006dojoid\030\004 \001(\r\022\021\n\tsponsorid"
    "\030\005 \001(\004\022\023\n\013sponsorname\030\006 \001(\t\022\013\n\003ret\030\007 \001(\010"
    "\"\273\001\n\rDojoRewardCmd\022(\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\rDOJO_PROTOCMD\0220\n\005param\030\002 \001(\0162\016.Cm"
    "d.DojoParam:\021EDOJOPARAM_REWARD\022\016\n\006dojoid"
    "\030\003 \001(\r\022 \n\010passtype\030\004 \001(\0162\016.Cmd.EPassType"
    "\022\034\n\005items\030\005 \003(\0132\r.Cmd.ItemInfo*\222\002\n\tDojoP"
    "aram\022 \n\034EDOJOPARAM_DOJO_PRIVATE_INFO\020\001\022\037"
    "\n\033EDOJOPARAM_DOJO_PUBLIC_INFO\020\002\022\025\n\021EDOJO"
    "PARAM_INVITE\020\003\022\024\n\020EDOJOPARAM_REPLY\020\004\022\030\n\024"
    "EDOJOPARAM_ENTERDOJO\020\005\022\026\n\022EDOJOPARAM_ADD"
    "_MSG\020\006\022\031\n\025EDOJOPARAM_PANEL_OPER\020\007\022\026\n\022EDO"
    "JOPARAM_SPONSOR\020\t\022\031\n\025EDOJOPARAM_QUERYSTA"
    "TE\020\n\022\025\n\021EDOJOPARAM_REWARD\020\013*;\n\nEDojoRepl"
    "y\022\024\n\020EDOJOREPLY_AGREE\020\001\022\027\n\023EDOJOREPLY_DI"
    "SAGREE\020\002*c\n\tDojoState\022\022\n\016DOJOSTATE_NONE\020"
    "\000\022\027\n\023DOJOSTATE_SPONSORED\020\001\022\024\n\020DOJOSTATE_"
    "OPENED\020\002\022\023\n\017DOJOSTATE_ERROR\020\003*J\n\tEPassTy"
    "pe\022\023\n\017EPASSTYPE_FIRST\020\001\022\022\n\016EPASSTYPE_HEL"
    "P\020\002\022\024\n\020EPASSTYPE_NORMAL\020\003", 2465);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Dojo.proto", &protobuf_RegisterTypes);
  DojoPrivateInfoCmd::default_instance_ = new DojoPrivateInfoCmd();
  DojoMsg::default_instance_ = new DojoMsg();
  DojoMsgBlob::default_instance_ = new DojoMsgBlob();
  DojoPublicInfoCmd::default_instance_ = new DojoPublicInfoCmd();
  DojoInviteCmd::default_instance_ = new DojoInviteCmd();
  DojoReplyCmd::default_instance_ = new DojoReplyCmd();
  EnterDojo::default_instance_ = new EnterDojo();
  DojoAddMsg::default_instance_ = new DojoAddMsg();
  DojoPanelOper::default_instance_ = new DojoPanelOper();
  DojoSponsorCmd::default_instance_ = new DojoSponsorCmd();
  DojoQueryStateCmd::default_instance_ = new DojoQueryStateCmd();
  DojoRewardCmd::default_instance_ = new DojoRewardCmd();
  DojoPrivateInfoCmd::default_instance_->InitAsDefaultInstance();
  DojoMsg::default_instance_->InitAsDefaultInstance();
  DojoMsgBlob::default_instance_->InitAsDefaultInstance();
  DojoPublicInfoCmd::default_instance_->InitAsDefaultInstance();
  DojoInviteCmd::default_instance_->InitAsDefaultInstance();
  DojoReplyCmd::default_instance_->InitAsDefaultInstance();
  EnterDojo::default_instance_->InitAsDefaultInstance();
  DojoAddMsg::default_instance_->InitAsDefaultInstance();
  DojoPanelOper::default_instance_->InitAsDefaultInstance();
  DojoSponsorCmd::default_instance_->InitAsDefaultInstance();
  DojoQueryStateCmd::default_instance_->InitAsDefaultInstance();
  DojoRewardCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Dojo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Dojo_2eproto {
  StaticDescriptorInitializer_Dojo_2eproto() {
    protobuf_AddDesc_Dojo_2eproto();
  }
} static_descriptor_initializer_Dojo_2eproto_;
const ::google::protobuf::EnumDescriptor* DojoParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoParam_descriptor_;
}
bool DojoParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDojoReply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDojoReply_descriptor_;
}
bool EDojoReply_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DojoState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoState_descriptor_;
}
bool DojoState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPassType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPassType_descriptor_;
}
bool EPassType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DojoPrivateInfoCmd::kCmdFieldNumber;
const int DojoPrivateInfoCmd::kParamFieldNumber;
const int DojoPrivateInfoCmd::kGroupidFieldNumber;
const int DojoPrivateInfoCmd::kCompletedIdFieldNumber;
#endif  // !_MSC_VER

DojoPrivateInfoCmd::DojoPrivateInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoPrivateInfoCmd)
}

void DojoPrivateInfoCmd::InitAsDefaultInstance() {
}

DojoPrivateInfoCmd::DojoPrivateInfoCmd(const DojoPrivateInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoPrivateInfoCmd)
}

void DojoPrivateInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 1;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoPrivateInfoCmd::~DojoPrivateInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoPrivateInfoCmd)
  SharedDtor();
}

void DojoPrivateInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DojoPrivateInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoPrivateInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoPrivateInfoCmd_descriptor_;
}

const DojoPrivateInfoCmd& DojoPrivateInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoPrivateInfoCmd* DojoPrivateInfoCmd::default_instance_ = NULL;

DojoPrivateInfoCmd* DojoPrivateInfoCmd::New() const {
  return new DojoPrivateInfoCmd;
}

void DojoPrivateInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 58;
    param_ = 1;
    groupid_ = 0u;
  }
  completed_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoPrivateInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoPrivateInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PRIVATE_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 3;
      case 3: {
        if (tag == 24) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_completed_id;
        break;
      }

      // repeated uint32 completed_id = 4;
      case 4: {
        if (tag == 32) {
         parse_completed_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_completed_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_completed_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_completed_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoPrivateInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoPrivateInfoCmd)
  return false;
#undef DO_
}

void DojoPrivateInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoPrivateInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PRIVATE_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 groupid = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  // repeated uint32 completed_id = 4;
  for (int i = 0; i < this->completed_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->completed_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoPrivateInfoCmd)
}

::google::protobuf::uint8* DojoPrivateInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoPrivateInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PRIVATE_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 groupid = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupid(), target);
  }

  // repeated uint32 completed_id = 4;
  for (int i = 0; i < this->completed_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->completed_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoPrivateInfoCmd)
  return target;
}

int DojoPrivateInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PRIVATE_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 groupid = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  // repeated uint32 completed_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->completed_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->completed_id(i));
    }
    total_size += 1 * this->completed_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoPrivateInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoPrivateInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoPrivateInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoPrivateInfoCmd::MergeFrom(const DojoPrivateInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  completed_id_.MergeFrom(from.completed_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoPrivateInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoPrivateInfoCmd::CopyFrom(const DojoPrivateInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoPrivateInfoCmd::IsInitialized() const {

  return true;
}

void DojoPrivateInfoCmd::Swap(DojoPrivateInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(groupid_, other->groupid_);
    completed_id_.Swap(&other->completed_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoPrivateInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoPrivateInfoCmd_descriptor_;
  metadata.reflection = DojoPrivateInfoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoMsg::kCharidFieldNumber;
const int DojoMsg::kNameFieldNumber;
const int DojoMsg::kConentFieldNumber;
const int DojoMsg::kIscompletedFieldNumber;
#endif  // !_MSC_VER

DojoMsg::DojoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoMsg)
}

void DojoMsg::InitAsDefaultInstance() {
}

DojoMsg::DojoMsg(const DojoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoMsg)
}

void DojoMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iscompleted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoMsg::~DojoMsg() {
  // @@protoc_insertion_point(destructor:Cmd.DojoMsg)
  SharedDtor();
}

void DojoMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (conent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete conent_;
  }
  if (this != default_instance_) {
  }
}

void DojoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoMsg_descriptor_;
}

const DojoMsg& DojoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoMsg* DojoMsg::default_instance_ = NULL;

DojoMsg* DojoMsg::New() const {
  return new DojoMsg;
}

void DojoMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_conent()) {
      if (conent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        conent_->clear();
      }
    }
    iscompleted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conent;
        break;
      }

      // optional string conent = 3;
      case 3: {
        if (tag == 26) {
         parse_conent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conent().data(), this->conent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "conent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iscompleted;
        break;
      }

      // optional bool iscompleted = 4;
      case 4: {
        if (tag == 32) {
         parse_iscompleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompleted_)));
          set_has_iscompleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoMsg)
  return false;
#undef DO_
}

void DojoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoMsg)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string conent = 3;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "conent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->conent(), output);
  }

  // optional bool iscompleted = 4;
  if (has_iscompleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscompleted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoMsg)
}

::google::protobuf::uint8* DojoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoMsg)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string conent = 3;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "conent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->conent(), target);
  }

  // optional bool iscompleted = 4;
  if (has_iscompleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscompleted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoMsg)
  return target;
}

int DojoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string conent = 3;
    if (has_conent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conent());
    }

    // optional bool iscompleted = 4;
    if (has_iscompleted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoMsg::MergeFrom(const DojoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_conent()) {
      set_conent(from.conent());
    }
    if (from.has_iscompleted()) {
      set_iscompleted(from.iscompleted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoMsg::CopyFrom(const DojoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoMsg::IsInitialized() const {

  return true;
}

void DojoMsg::Swap(DojoMsg* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(conent_, other->conent_);
    std::swap(iscompleted_, other->iscompleted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoMsg_descriptor_;
  metadata.reflection = DojoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoMsgBlob::kMsgsFieldNumber;
const int DojoMsgBlob::kDojoidFieldNumber;
#endif  // !_MSC_VER

DojoMsgBlob::DojoMsgBlob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoMsgBlob)
}

void DojoMsgBlob::InitAsDefaultInstance() {
}

DojoMsgBlob::DojoMsgBlob(const DojoMsgBlob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoMsgBlob)
}

void DojoMsgBlob::SharedCtor() {
  _cached_size_ = 0;
  dojoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoMsgBlob::~DojoMsgBlob() {
  // @@protoc_insertion_point(destructor:Cmd.DojoMsgBlob)
  SharedDtor();
}

void DojoMsgBlob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DojoMsgBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoMsgBlob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoMsgBlob_descriptor_;
}

const DojoMsgBlob& DojoMsgBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoMsgBlob* DojoMsgBlob::default_instance_ = NULL;

DojoMsgBlob* DojoMsgBlob::New() const {
  return new DojoMsgBlob;
}

void DojoMsgBlob::Clear() {
  dojoid_ = 0u;
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoMsgBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoMsgBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.DojoMsg msgs = 1;
      case 1: {
        if (tag == 10) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msgs;
        if (input->ExpectTag(16)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 2;
      case 2: {
        if (tag == 16) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoMsgBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoMsgBlob)
  return false;
#undef DO_
}

void DojoMsgBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoMsgBlob)
  // repeated .Cmd.DojoMsg msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgs(i), output);
  }

  // optional uint32 dojoid = 2;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dojoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoMsgBlob)
}

::google::protobuf::uint8* DojoMsgBlob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoMsgBlob)
  // repeated .Cmd.DojoMsg msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgs(i), target);
  }

  // optional uint32 dojoid = 2;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dojoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoMsgBlob)
  return target;
}

int DojoMsgBlob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 dojoid = 2;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

  }
  // repeated .Cmd.DojoMsg msgs = 1;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoMsgBlob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoMsgBlob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoMsgBlob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoMsgBlob::MergeFrom(const DojoMsgBlob& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoMsgBlob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoMsgBlob::CopyFrom(const DojoMsgBlob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoMsgBlob::IsInitialized() const {

  return true;
}

void DojoMsgBlob::Swap(DojoMsgBlob* other) {
  if (other != this) {
    msgs_.Swap(&other->msgs_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoMsgBlob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoMsgBlob_descriptor_;
  metadata.reflection = DojoMsgBlob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoPublicInfoCmd::kCmdFieldNumber;
const int DojoPublicInfoCmd::kParamFieldNumber;
const int DojoPublicInfoCmd::kDojoidFieldNumber;
const int DojoPublicInfoCmd::kMsgblobFieldNumber;
#endif  // !_MSC_VER

DojoPublicInfoCmd::DojoPublicInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoPublicInfoCmd)
}

void DojoPublicInfoCmd::InitAsDefaultInstance() {
  msgblob_ = const_cast< ::Cmd::DojoMsgBlob*>(&::Cmd::DojoMsgBlob::default_instance());
}

DojoPublicInfoCmd::DojoPublicInfoCmd(const DojoPublicInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoPublicInfoCmd)
}

void DojoPublicInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 2;
  dojoid_ = 0u;
  msgblob_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoPublicInfoCmd::~DojoPublicInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoPublicInfoCmd)
  SharedDtor();
}

void DojoPublicInfoCmd::SharedDtor() {
  if (this != default_instance_) {
    delete msgblob_;
  }
}

void DojoPublicInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoPublicInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoPublicInfoCmd_descriptor_;
}

const DojoPublicInfoCmd& DojoPublicInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoPublicInfoCmd* DojoPublicInfoCmd::default_instance_ = NULL;

DojoPublicInfoCmd* DojoPublicInfoCmd::New() const {
  return new DojoPublicInfoCmd;
}

void DojoPublicInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 58;
    param_ = 2;
    dojoid_ = 0u;
    if (has_msgblob()) {
      if (msgblob_ != NULL) msgblob_->::Cmd::DojoMsgBlob::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoPublicInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoPublicInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PUBLIC_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 3;
      case 3: {
        if (tag == 24) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgblob;
        break;
      }

      // optional .Cmd.DojoMsgBlob msgblob = 4;
      case 4: {
        if (tag == 34) {
         parse_msgblob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgblob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoPublicInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoPublicInfoCmd)
  return false;
#undef DO_
}

void DojoPublicInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoPublicInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PUBLIC_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dojoid(), output);
  }

  // optional .Cmd.DojoMsgBlob msgblob = 4;
  if (has_msgblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msgblob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoPublicInfoCmd)
}

::google::protobuf::uint8* DojoPublicInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoPublicInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PUBLIC_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dojoid(), target);
  }

  // optional .Cmd.DojoMsgBlob msgblob = 4;
  if (has_msgblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msgblob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoPublicInfoCmd)
  return target;
}

int DojoPublicInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_DOJO_PUBLIC_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dojoid = 3;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional .Cmd.DojoMsgBlob msgblob = 4;
    if (has_msgblob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgblob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoPublicInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoPublicInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoPublicInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoPublicInfoCmd::MergeFrom(const DojoPublicInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_msgblob()) {
      mutable_msgblob()->::Cmd::DojoMsgBlob::MergeFrom(from.msgblob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoPublicInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoPublicInfoCmd::CopyFrom(const DojoPublicInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoPublicInfoCmd::IsInitialized() const {

  return true;
}

void DojoPublicInfoCmd::Swap(DojoPublicInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(msgblob_, other->msgblob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoPublicInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoPublicInfoCmd_descriptor_;
  metadata.reflection = DojoPublicInfoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoInviteCmd::kCmdFieldNumber;
const int DojoInviteCmd::kParamFieldNumber;
const int DojoInviteCmd::kDojoidFieldNumber;
const int DojoInviteCmd::kSponsoridFieldNumber;
const int DojoInviteCmd::kSponsornameFieldNumber;
#endif  // !_MSC_VER

DojoInviteCmd::DojoInviteCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoInviteCmd)
}

void DojoInviteCmd::InitAsDefaultInstance() {
}

DojoInviteCmd::DojoInviteCmd(const DojoInviteCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoInviteCmd)
}

void DojoInviteCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 3;
  dojoid_ = 0u;
  sponsorid_ = GOOGLE_ULONGLONG(0);
  sponsorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoInviteCmd::~DojoInviteCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoInviteCmd)
  SharedDtor();
}

void DojoInviteCmd::SharedDtor() {
  if (sponsorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sponsorname_;
  }
  if (this != default_instance_) {
  }
}

void DojoInviteCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoInviteCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoInviteCmd_descriptor_;
}

const DojoInviteCmd& DojoInviteCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoInviteCmd* DojoInviteCmd::default_instance_ = NULL;

DojoInviteCmd* DojoInviteCmd::New() const {
  return new DojoInviteCmd;
}

void DojoInviteCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 58;
    param_ = 3;
    dojoid_ = 0u;
    sponsorid_ = GOOGLE_ULONGLONG(0);
    if (has_sponsorname()) {
      if (sponsorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sponsorname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoInviteCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoInviteCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 3;
      case 3: {
        if (tag == 24) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sponsorid;
        break;
      }

      // optional uint64 sponsorid = 4;
      case 4: {
        if (tag == 32) {
         parse_sponsorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsorid_)));
          set_has_sponsorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sponsorname;
        break;
      }

      // optional string sponsorname = 5;
      case 5: {
        if (tag == 42) {
         parse_sponsorname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsorname().data(), this->sponsorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sponsorname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoInviteCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoInviteCmd)
  return false;
#undef DO_
}

void DojoInviteCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoInviteCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dojoid(), output);
  }

  // optional uint64 sponsorid = 4;
  if (has_sponsorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sponsorid(), output);
  }

  // optional string sponsorname = 5;
  if (has_sponsorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsorname().data(), this->sponsorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sponsorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sponsorname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoInviteCmd)
}

::google::protobuf::uint8* DojoInviteCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoInviteCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dojoid(), target);
  }

  // optional uint64 sponsorid = 4;
  if (has_sponsorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sponsorid(), target);
  }

  // optional string sponsorname = 5;
  if (has_sponsorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsorname().data(), this->sponsorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sponsorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sponsorname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoInviteCmd)
  return target;
}

int DojoInviteCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dojoid = 3;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional uint64 sponsorid = 4;
    if (has_sponsorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsorid());
    }

    // optional string sponsorname = 5;
    if (has_sponsorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sponsorname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoInviteCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoInviteCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoInviteCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoInviteCmd::MergeFrom(const DojoInviteCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_sponsorid()) {
      set_sponsorid(from.sponsorid());
    }
    if (from.has_sponsorname()) {
      set_sponsorname(from.sponsorname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoInviteCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoInviteCmd::CopyFrom(const DojoInviteCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoInviteCmd::IsInitialized() const {

  return true;
}

void DojoInviteCmd::Swap(DojoInviteCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(sponsorid_, other->sponsorid_);
    std::swap(sponsorname_, other->sponsorname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoInviteCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoInviteCmd_descriptor_;
  metadata.reflection = DojoInviteCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoReplyCmd::kCmdFieldNumber;
const int DojoReplyCmd::kParamFieldNumber;
const int DojoReplyCmd::kEReplyFieldNumber;
const int DojoReplyCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

DojoReplyCmd::DojoReplyCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoReplyCmd)
}

void DojoReplyCmd::InitAsDefaultInstance() {
}

DojoReplyCmd::DojoReplyCmd(const DojoReplyCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoReplyCmd)
}

void DojoReplyCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 4;
  ereply_ = 2;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoReplyCmd::~DojoReplyCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoReplyCmd)
  SharedDtor();
}

void DojoReplyCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DojoReplyCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoReplyCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoReplyCmd_descriptor_;
}

const DojoReplyCmd& DojoReplyCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoReplyCmd* DojoReplyCmd::default_instance_ = NULL;

DojoReplyCmd* DojoReplyCmd::New() const {
  return new DojoReplyCmd;
}

void DojoReplyCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 58;
    param_ = 4;
    ereply_ = 2;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoReplyCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoReplyCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eReply;
        break;
      }

      // optional .Cmd.EDojoReply eReply = 3 [default = EDOJOREPLY_DISAGREE];
      case 3: {
        if (tag == 24) {
         parse_eReply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDojoReply_IsValid(value)) {
            set_ereply(static_cast< ::Cmd::EDojoReply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoReplyCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoReplyCmd)
  return false;
#undef DO_
}

void DojoReplyCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EDojoReply eReply = 3 [default = EDOJOREPLY_DISAGREE];
  if (has_ereply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ereply(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoReplyCmd)
}

::google::protobuf::uint8* DojoReplyCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EDojoReply eReply = 3 [default = EDOJOREPLY_DISAGREE];
  if (has_ereply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ereply(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoReplyCmd)
  return target;
}

int DojoReplyCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EDojoReply eReply = 3 [default = EDOJOREPLY_DISAGREE];
    if (has_ereply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ereply());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoReplyCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoReplyCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoReplyCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoReplyCmd::MergeFrom(const DojoReplyCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ereply()) {
      set_ereply(from.ereply());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoReplyCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoReplyCmd::CopyFrom(const DojoReplyCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoReplyCmd::IsInitialized() const {

  return true;
}

void DojoReplyCmd::Swap(DojoReplyCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ereply_, other->ereply_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoReplyCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoReplyCmd_descriptor_;
  metadata.reflection = DojoReplyCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterDojo::kCmdFieldNumber;
const int EnterDojo::kParamFieldNumber;
const int EnterDojo::kDojoidFieldNumber;
const int EnterDojo::kUseridFieldNumber;
const int EnterDojo::kZoneidFieldNumber;
const int EnterDojo::kTimeFieldNumber;
const int EnterDojo::kSignFieldNumber;
#endif  // !_MSC_VER

EnterDojo::EnterDojo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterDojo)
}

void EnterDojo::InitAsDefaultInstance() {
}

EnterDojo::EnterDojo(const EnterDojo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterDojo)
}

void EnterDojo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 5;
  dojoid_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterDojo::~EnterDojo() {
  // @@protoc_insertion_point(destructor:Cmd.EnterDojo)
  SharedDtor();
}

void EnterDojo::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void EnterDojo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterDojo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterDojo_descriptor_;
}

const EnterDojo& EnterDojo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

EnterDojo* EnterDojo::default_instance_ = NULL;

EnterDojo* EnterDojo::New() const {
  return new EnterDojo;
}

void EnterDojo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterDojo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(userid_, zoneid_);
    cmd_ = 58;
    param_ = 5;
    time_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterDojo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterDojo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ENTERDOJO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional string sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterDojo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterDojo)
  return false;
#undef DO_
}

void EnterDojo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterDojo)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ENTERDOJO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dojoid = 3 [default = 0];
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dojoid(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterDojo)
}

::google::protobuf::uint8* EnterDojo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterDojo)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ENTERDOJO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dojoid = 3 [default = 0];
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dojoid(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterDojo)
  return target;
}

int EnterDojo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ENTERDOJO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dojoid = 3 [default = 0];
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 zoneid = 5 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 time = 6 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterDojo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterDojo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterDojo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterDojo::MergeFrom(const EnterDojo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterDojo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterDojo::CopyFrom(const EnterDojo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterDojo::IsInitialized() const {

  return true;
}

void EnterDojo::Swap(EnterDojo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(userid_, other->userid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterDojo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterDojo_descriptor_;
  metadata.reflection = EnterDojo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoAddMsg::kCmdFieldNumber;
const int DojoAddMsg::kParamFieldNumber;
const int DojoAddMsg::kDojoidFieldNumber;
const int DojoAddMsg::kDojomsgFieldNumber;
#endif  // !_MSC_VER

DojoAddMsg::DojoAddMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoAddMsg)
}

void DojoAddMsg::InitAsDefaultInstance() {
  dojomsg_ = const_cast< ::Cmd::DojoMsg*>(&::Cmd::DojoMsg::default_instance());
}

DojoAddMsg::DojoAddMsg(const DojoAddMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoAddMsg)
}

void DojoAddMsg::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 6;
  dojoid_ = 0u;
  dojomsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoAddMsg::~DojoAddMsg() {
  // @@protoc_insertion_point(destructor:Cmd.DojoAddMsg)
  SharedDtor();
}

void DojoAddMsg::SharedDtor() {
  if (this != default_instance_) {
    delete dojomsg_;
  }
}

void DojoAddMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoAddMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoAddMsg_descriptor_;
}

const DojoAddMsg& DojoAddMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoAddMsg* DojoAddMsg::default_instance_ = NULL;

DojoAddMsg* DojoAddMsg::New() const {
  return new DojoAddMsg;
}

void DojoAddMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 58;
    param_ = 6;
    dojoid_ = 0u;
    if (has_dojomsg()) {
      if (dojomsg_ != NULL) dojomsg_->::Cmd::DojoMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoAddMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoAddMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ADD_MSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 3;
      case 3: {
        if (tag == 24) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dojomsg;
        break;
      }

      // optional .Cmd.DojoMsg dojomsg = 4;
      case 4: {
        if (tag == 34) {
         parse_dojomsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dojomsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoAddMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoAddMsg)
  return false;
#undef DO_
}

void DojoAddMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoAddMsg)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ADD_MSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dojoid(), output);
  }

  // optional .Cmd.DojoMsg dojomsg = 4;
  if (has_dojomsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dojomsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoAddMsg)
}

::google::protobuf::uint8* DojoAddMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoAddMsg)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ADD_MSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dojoid(), target);
  }

  // optional .Cmd.DojoMsg dojomsg = 4;
  if (has_dojomsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dojomsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoAddMsg)
  return target;
}

int DojoAddMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_ADD_MSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dojoid = 3;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional .Cmd.DojoMsg dojomsg = 4;
    if (has_dojomsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dojomsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoAddMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoAddMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoAddMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoAddMsg::MergeFrom(const DojoAddMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_dojomsg()) {
      mutable_dojomsg()->::Cmd::DojoMsg::MergeFrom(from.dojomsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoAddMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoAddMsg::CopyFrom(const DojoAddMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoAddMsg::IsInitialized() const {

  return true;
}

void DojoAddMsg::Swap(DojoAddMsg* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(dojomsg_, other->dojomsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoAddMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoAddMsg_descriptor_;
  metadata.reflection = DojoAddMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoPanelOper::kCmdFieldNumber;
const int DojoPanelOper::kParamFieldNumber;
#endif  // !_MSC_VER

DojoPanelOper::DojoPanelOper()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoPanelOper)
}

void DojoPanelOper::InitAsDefaultInstance() {
}

DojoPanelOper::DojoPanelOper(const DojoPanelOper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoPanelOper)
}

void DojoPanelOper::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 7;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoPanelOper::~DojoPanelOper() {
  // @@protoc_insertion_point(destructor:Cmd.DojoPanelOper)
  SharedDtor();
}

void DojoPanelOper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DojoPanelOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoPanelOper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoPanelOper_descriptor_;
}

const DojoPanelOper& DojoPanelOper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoPanelOper* DojoPanelOper::default_instance_ = NULL;

DojoPanelOper* DojoPanelOper::New() const {
  return new DojoPanelOper;
}

void DojoPanelOper::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 58;
    param_ = 7;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoPanelOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoPanelOper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_PANEL_OPER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoPanelOper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoPanelOper)
  return false;
#undef DO_
}

void DojoPanelOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoPanelOper)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_PANEL_OPER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoPanelOper)
}

::google::protobuf::uint8* DojoPanelOper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoPanelOper)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_PANEL_OPER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoPanelOper)
  return target;
}

int DojoPanelOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_PANEL_OPER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoPanelOper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoPanelOper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoPanelOper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoPanelOper::MergeFrom(const DojoPanelOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoPanelOper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoPanelOper::CopyFrom(const DojoPanelOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoPanelOper::IsInitialized() const {

  return true;
}

void DojoPanelOper::Swap(DojoPanelOper* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoPanelOper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoPanelOper_descriptor_;
  metadata.reflection = DojoPanelOper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoSponsorCmd::kCmdFieldNumber;
const int DojoSponsorCmd::kParamFieldNumber;
const int DojoSponsorCmd::kDojoidFieldNumber;
const int DojoSponsorCmd::kIsCancelFieldNumber;
const int DojoSponsorCmd::kSponsoridFieldNumber;
const int DojoSponsorCmd::kSponsornameFieldNumber;
const int DojoSponsorCmd::kRetFieldNumber;
#endif  // !_MSC_VER

DojoSponsorCmd::DojoSponsorCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoSponsorCmd)
}

void DojoSponsorCmd::InitAsDefaultInstance() {
}

DojoSponsorCmd::DojoSponsorCmd(const DojoSponsorCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoSponsorCmd)
}

void DojoSponsorCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 9;
  dojoid_ = 0u;
  is_cancel_ = false;
  sponsorid_ = GOOGLE_ULONGLONG(0);
  sponsorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoSponsorCmd::~DojoSponsorCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoSponsorCmd)
  SharedDtor();
}

void DojoSponsorCmd::SharedDtor() {
  if (sponsorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sponsorname_;
  }
  if (this != default_instance_) {
  }
}

void DojoSponsorCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoSponsorCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoSponsorCmd_descriptor_;
}

const DojoSponsorCmd& DojoSponsorCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoSponsorCmd* DojoSponsorCmd::default_instance_ = NULL;

DojoSponsorCmd* DojoSponsorCmd::New() const {
  return new DojoSponsorCmd;
}

void DojoSponsorCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DojoSponsorCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(dojoid_, sponsorid_);
    cmd_ = 58;
    param_ = 9;
    if (has_sponsorname()) {
      if (sponsorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sponsorname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoSponsorCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoSponsorCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_SPONSOR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 3;
      case 3: {
        if (tag == 24) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_cancel;
        break;
      }

      // optional bool is_cancel = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_cancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cancel_)));
          set_has_is_cancel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sponsorid;
        break;
      }

      // optional uint64 sponsorid = 5;
      case 5: {
        if (tag == 40) {
         parse_sponsorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsorid_)));
          set_has_sponsorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sponsorname;
        break;
      }

      // optional string sponsorname = 6;
      case 6: {
        if (tag == 50) {
         parse_sponsorname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsorname().data(), this->sponsorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sponsorname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional bool ret = 7;
      case 7: {
        if (tag == 56) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoSponsorCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoSponsorCmd)
  return false;
#undef DO_
}

void DojoSponsorCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoSponsorCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_SPONSOR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dojoid(), output);
  }

  // optional bool is_cancel = 4 [default = false];
  if (has_is_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_cancel(), output);
  }

  // optional uint64 sponsorid = 5;
  if (has_sponsorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sponsorid(), output);
  }

  // optional string sponsorname = 6;
  if (has_sponsorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsorname().data(), this->sponsorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sponsorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sponsorname(), output);
  }

  // optional bool ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoSponsorCmd)
}

::google::protobuf::uint8* DojoSponsorCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoSponsorCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_SPONSOR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dojoid(), target);
  }

  // optional bool is_cancel = 4 [default = false];
  if (has_is_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_cancel(), target);
  }

  // optional uint64 sponsorid = 5;
  if (has_sponsorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sponsorid(), target);
  }

  // optional string sponsorname = 6;
  if (has_sponsorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsorname().data(), this->sponsorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sponsorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sponsorname(), target);
  }

  // optional bool ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoSponsorCmd)
  return target;
}

int DojoSponsorCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_SPONSOR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dojoid = 3;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional bool is_cancel = 4 [default = false];
    if (has_is_cancel()) {
      total_size += 1 + 1;
    }

    // optional uint64 sponsorid = 5;
    if (has_sponsorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsorid());
    }

    // optional string sponsorname = 6;
    if (has_sponsorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sponsorname());
    }

    // optional bool ret = 7;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoSponsorCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoSponsorCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoSponsorCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoSponsorCmd::MergeFrom(const DojoSponsorCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_is_cancel()) {
      set_is_cancel(from.is_cancel());
    }
    if (from.has_sponsorid()) {
      set_sponsorid(from.sponsorid());
    }
    if (from.has_sponsorname()) {
      set_sponsorname(from.sponsorname());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoSponsorCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoSponsorCmd::CopyFrom(const DojoSponsorCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoSponsorCmd::IsInitialized() const {

  return true;
}

void DojoSponsorCmd::Swap(DojoSponsorCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(is_cancel_, other->is_cancel_);
    std::swap(sponsorid_, other->sponsorid_);
    std::swap(sponsorname_, other->sponsorname_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoSponsorCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoSponsorCmd_descriptor_;
  metadata.reflection = DojoSponsorCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoQueryStateCmd::kCmdFieldNumber;
const int DojoQueryStateCmd::kParamFieldNumber;
const int DojoQueryStateCmd::kStateFieldNumber;
const int DojoQueryStateCmd::kDojoidFieldNumber;
const int DojoQueryStateCmd::kSponsoridFieldNumber;
const int DojoQueryStateCmd::kSponsornameFieldNumber;
const int DojoQueryStateCmd::kRetFieldNumber;
#endif  // !_MSC_VER

DojoQueryStateCmd::DojoQueryStateCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoQueryStateCmd)
}

void DojoQueryStateCmd::InitAsDefaultInstance() {
}

DojoQueryStateCmd::DojoQueryStateCmd(const DojoQueryStateCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoQueryStateCmd)
}

void DojoQueryStateCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 10;
  state_ = 0;
  dojoid_ = 0u;
  sponsorid_ = GOOGLE_ULONGLONG(0);
  sponsorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoQueryStateCmd::~DojoQueryStateCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoQueryStateCmd)
  SharedDtor();
}

void DojoQueryStateCmd::SharedDtor() {
  if (sponsorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sponsorname_;
  }
  if (this != default_instance_) {
  }
}

void DojoQueryStateCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoQueryStateCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoQueryStateCmd_descriptor_;
}

const DojoQueryStateCmd& DojoQueryStateCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoQueryStateCmd* DojoQueryStateCmd::default_instance_ = NULL;

DojoQueryStateCmd* DojoQueryStateCmd::New() const {
  return new DojoQueryStateCmd;
}

void DojoQueryStateCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DojoQueryStateCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(state_, sponsorid_);
    cmd_ = 58;
    param_ = 10;
    if (has_sponsorname()) {
      if (sponsorname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sponsorname_->clear();
      }
    }
    ret_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoQueryStateCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoQueryStateCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_QUERYSTATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .Cmd.DojoState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoState_IsValid(value)) {
            set_state(static_cast< ::Cmd::DojoState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 4;
      case 4: {
        if (tag == 32) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sponsorid;
        break;
      }

      // optional uint64 sponsorid = 5;
      case 5: {
        if (tag == 40) {
         parse_sponsorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sponsorid_)));
          set_has_sponsorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sponsorname;
        break;
      }

      // optional string sponsorname = 6;
      case 6: {
        if (tag == 50) {
         parse_sponsorname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsorname().data(), this->sponsorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sponsorname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional bool ret = 7;
      case 7: {
        if (tag == 56) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoQueryStateCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoQueryStateCmd)
  return false;
#undef DO_
}

void DojoQueryStateCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoQueryStateCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_QUERYSTATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.DojoState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional uint32 dojoid = 4;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dojoid(), output);
  }

  // optional uint64 sponsorid = 5;
  if (has_sponsorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sponsorid(), output);
  }

  // optional string sponsorname = 6;
  if (has_sponsorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsorname().data(), this->sponsorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sponsorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sponsorname(), output);
  }

  // optional bool ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoQueryStateCmd)
}

::google::protobuf::uint8* DojoQueryStateCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoQueryStateCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_QUERYSTATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.DojoState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional uint32 dojoid = 4;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dojoid(), target);
  }

  // optional uint64 sponsorid = 5;
  if (has_sponsorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sponsorid(), target);
  }

  // optional string sponsorname = 6;
  if (has_sponsorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsorname().data(), this->sponsorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sponsorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sponsorname(), target);
  }

  // optional bool ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoQueryStateCmd)
  return target;
}

int DojoQueryStateCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_QUERYSTATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.DojoState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 dojoid = 4;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional uint64 sponsorid = 5;
    if (has_sponsorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sponsorid());
    }

    // optional string sponsorname = 6;
    if (has_sponsorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sponsorname());
    }

    // optional bool ret = 7;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoQueryStateCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoQueryStateCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoQueryStateCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoQueryStateCmd::MergeFrom(const DojoQueryStateCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_sponsorid()) {
      set_sponsorid(from.sponsorid());
    }
    if (from.has_sponsorname()) {
      set_sponsorname(from.sponsorname());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoQueryStateCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoQueryStateCmd::CopyFrom(const DojoQueryStateCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoQueryStateCmd::IsInitialized() const {

  return true;
}

void DojoQueryStateCmd::Swap(DojoQueryStateCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(state_, other->state_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(sponsorid_, other->sponsorid_);
    std::swap(sponsorname_, other->sponsorname_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoQueryStateCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoQueryStateCmd_descriptor_;
  metadata.reflection = DojoQueryStateCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoRewardCmd::kCmdFieldNumber;
const int DojoRewardCmd::kParamFieldNumber;
const int DojoRewardCmd::kDojoidFieldNumber;
const int DojoRewardCmd::kPasstypeFieldNumber;
const int DojoRewardCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

DojoRewardCmd::DojoRewardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoRewardCmd)
}

void DojoRewardCmd::InitAsDefaultInstance() {
}

DojoRewardCmd::DojoRewardCmd(const DojoRewardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoRewardCmd)
}

void DojoRewardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 58;
  param_ = 11;
  dojoid_ = 0u;
  passtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoRewardCmd::~DojoRewardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoRewardCmd)
  SharedDtor();
}

void DojoRewardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DojoRewardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoRewardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoRewardCmd_descriptor_;
}

const DojoRewardCmd& DojoRewardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dojo_2eproto();
  return *default_instance_;
}

DojoRewardCmd* DojoRewardCmd::default_instance_ = NULL;

DojoRewardCmd* DojoRewardCmd::New() const {
  return new DojoRewardCmd;
}

void DojoRewardCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 58;
    param_ = 11;
    dojoid_ = 0u;
    passtype_ = 1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoRewardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoRewardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DojoParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::DojoParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 3;
      case 3: {
        if (tag == 24) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_passtype;
        break;
      }

      // optional .Cmd.EPassType passtype = 4;
      case 4: {
        if (tag == 32) {
         parse_passtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPassType_IsValid(value)) {
            set_passtype(static_cast< ::Cmd::EPassType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoRewardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoRewardCmd)
  return false;
#undef DO_
}

void DojoRewardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoRewardCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dojoid(), output);
  }

  // optional .Cmd.EPassType passtype = 4;
  if (has_passtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->passtype(), output);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoRewardCmd)
}

::google::protobuf::uint8* DojoRewardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoRewardCmd)
  // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dojoid = 3;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dojoid(), target);
  }

  // optional .Cmd.EPassType passtype = 4;
  if (has_passtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->passtype(), target);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoRewardCmd)
  return target;
}

int DojoRewardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = DOJO_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.DojoParam param = 2 [default = EDOJOPARAM_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dojoid = 3;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional .Cmd.EPassType passtype = 4;
    if (has_passtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->passtype());
    }

  }
  // repeated .Cmd.ItemInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoRewardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoRewardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoRewardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoRewardCmd::MergeFrom(const DojoRewardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_passtype()) {
      set_passtype(from.passtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoRewardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoRewardCmd::CopyFrom(const DojoRewardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoRewardCmd::IsInitialized() const {

  return true;
}

void DojoRewardCmd::Swap(DojoRewardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(passtype_, other->passtype_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoRewardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoRewardCmd_descriptor_;
  metadata.reflection = DojoRewardCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
