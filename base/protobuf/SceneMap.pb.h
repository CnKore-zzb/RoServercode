// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneMap.proto

#ifndef PROTOBUF_SceneMap_2eproto__INCLUDED
#define PROTOBUF_SceneMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
#include "SceneUser.pb.h"
#include "SceneUser2.pb.h"
#include "SceneChatRoom.pb.h"
#include "SceneFood.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneMap_2eproto();
void protobuf_AssignDesc_SceneMap_2eproto();
void protobuf_ShutdownFile_SceneMap_2eproto();

class MapItem;
class AddMapItem;
class PickupItem;
class CarrierInfo;
class LineData;
class HandNpcData;
class GingerBreadNpcData;
class MapUser;
class AddMapUser;
class MapNpc;
class AddMapNpc;
class MapTrap;
class AddMapTrap;
class MapAct;
class AddMapAct;
class ExitPointState;
class MapCmdEnd;
class NpcSearchRangeCmd;
class UserHandsCmd;
class SpEffectCmd;
class UserHandNpcCmd;
class GingerBreadNpcCmd;
class GoCityGateMapCmd;

enum MapParam {
  MAPPARAM_ADDMAPITEM = 1,
  MAPPARAM_PICKUPITEM = 2,
  MAPPARAM_ADDMAPUSER = 3,
  MAPPARAM_ADDMAPNPC = 4,
  MAPPARAM_ADDMAPTRAP = 5,
  MAPPARAM_ADDMAPACT = 6,
  MAPPARAM_EXIT_POINT_STATE = 7,
  MAPPARAM_MAP_CMD_END = 8,
  MAPPARAM_NPC_SEARCH_RANGE = 9,
  MAPPARAM_USER_HANDS = 10,
  MAPPARAM_USER_SPEFFECT = 11,
  MAPPARAM_USER_HAND_NPC = 12,
  MAPPARAM_GINGERBREAD_NPC = 13,
  MAPPARAM_GO_CITYGATE = 14
};
bool MapParam_IsValid(int value);
const MapParam MapParam_MIN = MAPPARAM_ADDMAPITEM;
const MapParam MapParam_MAX = MAPPARAM_GO_CITYGATE;
const int MapParam_ARRAYSIZE = MapParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapParam_descriptor();
inline const ::std::string& MapParam_Name(MapParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapParam_descriptor(), value);
}
inline bool MapParam_Parse(
    const ::std::string& name, MapParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapParam>(
    MapParam_descriptor(), name, value);
}
enum EGiveType {
  EGiveType_Trade = 1,
  EGiveType_Lottery = 2
};
bool EGiveType_IsValid(int value);
const EGiveType EGiveType_MIN = EGiveType_Trade;
const EGiveType EGiveType_MAX = EGiveType_Lottery;
const int EGiveType_ARRAYSIZE = EGiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGiveType_descriptor();
inline const ::std::string& EGiveType_Name(EGiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGiveType_descriptor(), value);
}
inline bool EGiveType_Parse(
    const ::std::string& name, EGiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGiveType>(
    EGiveType_descriptor(), name, value);
}
enum EActType {
  EACTTYPE_MIN = 0,
  EACTTYPE_PURIFY = 1,
  EACTTYPE_SEAL = 2,
  EACTTYPE_MUSIC = 3,
  EACTTYPE_EFFECT = 4,
  EACTTYPE_SCENEEVENT = 5,
  EACTTYPE_MAX = 6
};
bool EActType_IsValid(int value);
const EActType EActType_MIN = EACTTYPE_MIN;
const EActType EActType_MAX = EACTTYPE_MAX;
const int EActType_ARRAYSIZE = EActType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EActType_descriptor();
inline const ::std::string& EActType_Name(EActType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EActType_descriptor(), value);
}
inline bool EActType_Parse(
    const ::std::string& name, EActType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EActType>(
    EActType_descriptor(), name, value);
}
// ===================================================================

class MapItem : public ::google::protobuf::Message {
 public:
  MapItem();
  virtual ~MapItem();

  MapItem(const MapItem& from);

  inline MapItem& operator=(const MapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapItem& default_instance();

  void Swap(MapItem* other);

  // implements Message ----------------------------------------------

  MapItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapItem& from);
  void MergeFrom(const MapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional uint32 id = 2 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint64 sourceid = 4 [default = 0];
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceidFieldNumber = 4;
  inline ::google::protobuf::uint64 sourceid() const;
  inline void set_sourceid(::google::protobuf::uint64 value);

  // optional .Cmd.ScenePos pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // repeated uint64 owners = 6;
  inline int owners_size() const;
  inline void clear_owners();
  static const int kOwnersFieldNumber = 6;
  inline ::google::protobuf::uint64 owners(int index) const;
  inline void set_owners(int index, ::google::protobuf::uint64 value);
  inline void add_owners(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      owners() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_owners();

  // optional uint32 refinelv = 7 [default = 0];
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefinelvFieldNumber = 7;
  inline ::google::protobuf::uint32 refinelv() const;
  inline void set_refinelv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.MapItem)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint64 sourceid_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > owners_;
  ::google::protobuf::uint32 refinelv_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static MapItem* default_instance_;
};
// -------------------------------------------------------------------

class AddMapItem : public ::google::protobuf::Message {
 public:
  AddMapItem();
  virtual ~AddMapItem();

  AddMapItem(const AddMapItem& from);

  inline AddMapItem& operator=(const AddMapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMapItem& default_instance();

  void Swap(AddMapItem* other);

  // implements Message ----------------------------------------------

  AddMapItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMapItem& from);
  void MergeFrom(const AddMapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // repeated .Cmd.MapItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::MapItem& items(int index) const;
  inline ::Cmd::MapItem* mutable_items(int index);
  inline ::Cmd::MapItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.AddMapItem)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MapItem > items_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static AddMapItem* default_instance_;
};
// -------------------------------------------------------------------

class PickupItem : public ::google::protobuf::Message {
 public:
  PickupItem();
  virtual ~PickupItem();

  PickupItem(const PickupItem& from);

  inline PickupItem& operator=(const PickupItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PickupItem& default_instance();

  void Swap(PickupItem* other);

  // implements Message ----------------------------------------------

  PickupItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PickupItem& from);
  void MergeFrom(const PickupItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_PICKUPITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional uint64 playerguid = 3 [default = 0];
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 3;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // optional uint64 itemguid = 4 [default = 0];
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemguidFieldNumber = 4;
  inline ::google::protobuf::uint64 itemguid() const;
  inline void set_itemguid(::google::protobuf::uint64 value);

  // optional bool success = 5 [default = false];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 5;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.PickupItem)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_itemguid();
  inline void clear_has_itemguid();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 playerguid_;
  ::google::protobuf::uint64 itemguid_;
  bool success_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static PickupItem* default_instance_;
};
// -------------------------------------------------------------------

class CarrierInfo : public ::google::protobuf::Message {
 public:
  CarrierInfo();
  virtual ~CarrierInfo();

  CarrierInfo(const CarrierInfo& from);

  inline CarrierInfo& operator=(const CarrierInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarrierInfo& default_instance();

  void Swap(CarrierInfo* other);

  // implements Message ----------------------------------------------

  CarrierInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarrierInfo& from);
  void MergeFrom(const CarrierInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 masterid = 2;
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 2;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 progress = 4;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 4;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // optional uint32 line = 5;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 5;
  inline ::google::protobuf::uint32 line() const;
  inline void set_line(::google::protobuf::uint32 value);

  // optional uint32 assemble = 6;
  inline bool has_assemble() const;
  inline void clear_assemble();
  static const int kAssembleFieldNumber = 6;
  inline ::google::protobuf::uint32 assemble() const;
  inline void set_assemble(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CarrierInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_assemble();
  inline void clear_has_assemble();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 masterid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 progress_;
  ::google::protobuf::uint32 line_;
  ::google::protobuf::uint32 assemble_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static CarrierInfo* default_instance_;
};
// -------------------------------------------------------------------

class LineData : public ::google::protobuf::Message {
 public:
  LineData();
  virtual ~LineData();

  LineData(const LineData& from);

  inline LineData& operator=(const LineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineData& default_instance();

  void Swap(LineData* other);

  // implements Message ----------------------------------------------

  LineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineData& from);
  void MergeFrom(const LineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 masterId = 1;
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasterIdFieldNumber = 1;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional uint64 slaveId = 2;
  inline bool has_slaveid() const;
  inline void clear_slaveid();
  static const int kSlaveIdFieldNumber = 2;
  inline ::google::protobuf::uint64 slaveid() const;
  inline void set_slaveid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.LineData)
 private:
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_slaveid();
  inline void clear_has_slaveid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 masterid_;
  ::google::protobuf::uint64 slaveid_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static LineData* default_instance_;
};
// -------------------------------------------------------------------

class HandNpcData : public ::google::protobuf::Message {
 public:
  HandNpcData();
  virtual ~HandNpcData();

  HandNpcData(const HandNpcData& from);

  inline HandNpcData& operator=(const HandNpcData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandNpcData& default_instance();

  void Swap(HandNpcData* other);

  // implements Message ----------------------------------------------

  HandNpcData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandNpcData& from);
  void MergeFrom(const HandNpcData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 body = 1;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 1;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 head = 2;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 2;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // optional uint32 hair = 3;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 3;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 4;
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 4;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint64 guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional uint32 speffect = 6;
  inline bool has_speffect() const;
  inline void clear_speffect();
  static const int kSpeffectFieldNumber = 6;
  inline ::google::protobuf::uint32 speffect() const;
  inline void set_speffect(::google::protobuf::uint32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 eye = 8;
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 8;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.HandNpcData)
 private:
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_speffect();
  inline void clear_has_speffect();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_eye();
  inline void clear_has_eye();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint64 guid_;
  ::std::string* name_;
  ::google::protobuf::uint32 speffect_;
  ::google::protobuf::uint32 eye_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static HandNpcData* default_instance_;
};
// -------------------------------------------------------------------

class GingerBreadNpcData : public ::google::protobuf::Message {
 public:
  GingerBreadNpcData();
  virtual ~GingerBreadNpcData();

  GingerBreadNpcData(const GingerBreadNpcData& from);

  inline GingerBreadNpcData& operator=(const GingerBreadNpcData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GingerBreadNpcData& default_instance();

  void Swap(GingerBreadNpcData* other);

  // implements Message ----------------------------------------------

  GingerBreadNpcData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GingerBreadNpcData& from);
  void MergeFrom(const GingerBreadNpcData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 npcid = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional uint64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional uint64 giveid = 3;
  inline bool has_giveid() const;
  inline void clear_giveid();
  static const int kGiveidFieldNumber = 3;
  inline ::google::protobuf::uint64 giveid() const;
  inline void set_giveid(::google::protobuf::uint64 value);

  // optional uint32 expiretime = 4;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpiretimeFieldNumber = 4;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // optional .Cmd.EGiveType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Cmd::EGiveType type() const;
  inline void set_type(::Cmd::EGiveType value);

  // @@protoc_insertion_point(class_scope:Cmd.GingerBreadNpcData)
 private:
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_giveid();
  inline void clear_has_giveid();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 expiretime_;
  ::google::protobuf::uint64 giveid_;
  int type_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static GingerBreadNpcData* default_instance_;
};
// -------------------------------------------------------------------

class MapUser : public ::google::protobuf::Message {
 public:
  MapUser();
  virtual ~MapUser();

  MapUser(const MapUser& from);

  inline MapUser& operator=(const MapUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapUser& default_instance();

  void Swap(MapUser* other);

  // implements Message ----------------------------------------------

  MapUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapUser& from);
  void MergeFrom(const MapUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guid = 1 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.EGender gender = 3 [default = EGENDER_MIN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 3;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional .Cmd.ScenePos pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional .Cmd.ScenePos dest = 5;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 5;
  inline const ::Cmd::ScenePos& dest() const;
  inline ::Cmd::ScenePos* mutable_dest();
  inline ::Cmd::ScenePos* release_dest();
  inline void set_allocated_dest(::Cmd::ScenePos* dest);

  // repeated .Cmd.UserAttr attrs = 6;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 6;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // repeated .Cmd.UserData datas = 7;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 7;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // repeated .Cmd.BufferData buffs = 8;
  inline int buffs_size() const;
  inline void clear_buffs();
  static const int kBuffsFieldNumber = 8;
  inline const ::Cmd::BufferData& buffs(int index) const;
  inline ::Cmd::BufferData* mutable_buffs(int index);
  inline ::Cmd::BufferData* add_buffs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
      buffs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
      mutable_buffs();

  // optional uint32 skillid = 9;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 9;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint64 teamid = 10;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 10;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional string teamname = 11;
  inline bool has_teamname() const;
  inline void clear_teamname();
  static const int kTeamnameFieldNumber = 11;
  inline const ::std::string& teamname() const;
  inline void set_teamname(const ::std::string& value);
  inline void set_teamname(const char* value);
  inline void set_teamname(const char* value, size_t size);
  inline ::std::string* mutable_teamname();
  inline ::std::string* release_teamname();
  inline void set_allocated_teamname(::std::string* teamname);

  // optional .Cmd.CarrierInfo carrier = 12;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 12;
  inline const ::Cmd::CarrierInfo& carrier() const;
  inline ::Cmd::CarrierInfo* mutable_carrier();
  inline ::Cmd::CarrierInfo* release_carrier();
  inline void set_allocated_carrier(::Cmd::CarrierInfo* carrier);

  // optional .Cmd.ChatRoomSummary chatroom = 13;
  inline bool has_chatroom() const;
  inline void clear_chatroom();
  static const int kChatroomFieldNumber = 13;
  inline const ::Cmd::ChatRoomSummary& chatroom() const;
  inline ::Cmd::ChatRoomSummary* mutable_chatroom();
  inline ::Cmd::ChatRoomSummary* release_chatroom();
  inline void set_allocated_chatroom(::Cmd::ChatRoomSummary* chatroom);

  // optional uint64 handsmaster = 14;
  inline bool has_handsmaster() const;
  inline void clear_handsmaster();
  static const int kHandsmasterFieldNumber = 14;
  inline ::google::protobuf::uint64 handsmaster() const;
  inline void set_handsmaster(::google::protobuf::uint64 value);

  // repeated .Cmd.SpEffectData speffectdata = 15;
  inline int speffectdata_size() const;
  inline void clear_speffectdata();
  static const int kSpeffectdataFieldNumber = 15;
  inline const ::Cmd::SpEffectData& speffectdata(int index) const;
  inline ::Cmd::SpEffectData* mutable_speffectdata(int index);
  inline ::Cmd::SpEffectData* add_speffectdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >&
      speffectdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >*
      mutable_speffectdata();

  // optional uint64 guildid = 16 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 16;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string guildname = 17;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 17;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string guildicon = 18;
  inline bool has_guildicon() const;
  inline void clear_guildicon();
  static const int kGuildiconFieldNumber = 18;
  inline const ::std::string& guildicon() const;
  inline void set_guildicon(const ::std::string& value);
  inline void set_guildicon(const char* value);
  inline void set_guildicon(const char* value, size_t size);
  inline ::std::string* mutable_guildicon();
  inline ::std::string* release_guildicon();
  inline void set_allocated_guildicon(::std::string* guildicon);

  // optional string guildjob = 19;
  inline bool has_guildjob() const;
  inline void clear_guildjob();
  static const int kGuildjobFieldNumber = 19;
  inline const ::std::string& guildjob() const;
  inline void set_guildjob(const ::std::string& value);
  inline void set_guildjob(const char* value);
  inline void set_guildjob(const char* value, size_t size);
  inline ::std::string* mutable_guildjob();
  inline ::std::string* release_guildjob();
  inline void set_allocated_guildjob(::std::string* guildjob);

  // optional .Cmd.HandNpcData handnpc = 20;
  inline bool has_handnpc() const;
  inline void clear_handnpc();
  static const int kHandnpcFieldNumber = 20;
  inline const ::Cmd::HandNpcData& handnpc() const;
  inline ::Cmd::HandNpcData* mutable_handnpc();
  inline ::Cmd::HandNpcData* release_handnpc();
  inline void set_allocated_handnpc(::Cmd::HandNpcData* handnpc);

  // optional uint32 motionactionid = 21;
  inline bool has_motionactionid() const;
  inline void clear_motionactionid();
  static const int kMotionactionidFieldNumber = 21;
  inline ::google::protobuf::uint32 motionactionid() const;
  inline void set_motionactionid(::google::protobuf::uint32 value);

  // optional uint32 seatid = 22;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 22;
  inline ::google::protobuf::uint32 seatid() const;
  inline void set_seatid(::google::protobuf::uint32 value);

  // repeated .Cmd.GingerBreadNpcData givenpcdatas = 23;
  inline int givenpcdatas_size() const;
  inline void clear_givenpcdatas();
  static const int kGivenpcdatasFieldNumber = 23;
  inline const ::Cmd::GingerBreadNpcData& givenpcdatas(int index) const;
  inline ::Cmd::GingerBreadNpcData* mutable_givenpcdatas(int index);
  inline ::Cmd::GingerBreadNpcData* add_givenpcdatas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GingerBreadNpcData >&
      givenpcdatas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GingerBreadNpcData >*
      mutable_givenpcdatas();

  // optional uint32 achievetitle = 24;
  inline bool has_achievetitle() const;
  inline void clear_achievetitle();
  static const int kAchievetitleFieldNumber = 24;
  inline ::google::protobuf::uint32 achievetitle() const;
  inline void set_achievetitle(::google::protobuf::uint32 value);

  // optional .Cmd.CookStateMsg cookstate = 25;
  inline bool has_cookstate() const;
  inline void clear_cookstate();
  static const int kCookstateFieldNumber = 25;
  inline const ::Cmd::CookStateMsg& cookstate() const;
  inline ::Cmd::CookStateMsg* mutable_cookstate();
  inline ::Cmd::CookStateMsg* release_cookstate();
  inline void set_allocated_cookstate(::Cmd::CookStateMsg* cookstate);

  // optional .Cmd.BoothInfo info = 26;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 26;
  inline const ::Cmd::BoothInfo& info() const;
  inline ::Cmd::BoothInfo* mutable_info();
  inline ::Cmd::BoothInfo* release_info();
  inline void set_allocated_info(::Cmd::BoothInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.MapUser)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamname();
  inline void clear_has_teamname();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_chatroom();
  inline void clear_has_chatroom();
  inline void set_has_handsmaster();
  inline void clear_has_handsmaster();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildicon();
  inline void clear_has_guildicon();
  inline void set_has_guildjob();
  inline void clear_has_guildjob();
  inline void set_has_handnpc();
  inline void clear_has_handnpc();
  inline void set_has_motionactionid();
  inline void clear_has_motionactionid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_achievetitle();
  inline void clear_has_achievetitle();
  inline void set_has_cookstate();
  inline void clear_has_cookstate();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::std::string* name_;
  ::Cmd::ScenePos* pos_;
  ::Cmd::ScenePos* dest_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  int gender_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData > buffs_;
  ::google::protobuf::uint64 teamid_;
  ::std::string* teamname_;
  ::Cmd::CarrierInfo* carrier_;
  ::Cmd::ChatRoomSummary* chatroom_;
  ::google::protobuf::uint64 handsmaster_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData > speffectdata_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::std::string* guildicon_;
  ::std::string* guildjob_;
  ::Cmd::HandNpcData* handnpc_;
  ::google::protobuf::uint32 motionactionid_;
  ::google::protobuf::uint32 seatid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GingerBreadNpcData > givenpcdatas_;
  ::Cmd::CookStateMsg* cookstate_;
  ::Cmd::BoothInfo* info_;
  ::google::protobuf::uint32 achievetitle_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static MapUser* default_instance_;
};
// -------------------------------------------------------------------

class AddMapUser : public ::google::protobuf::Message {
 public:
  AddMapUser();
  virtual ~AddMapUser();

  AddMapUser(const AddMapUser& from);

  inline AddMapUser& operator=(const AddMapUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMapUser& default_instance();

  void Swap(AddMapUser* other);

  // implements Message ----------------------------------------------

  AddMapUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMapUser& from);
  void MergeFrom(const AddMapUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPUSER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // repeated .Cmd.MapUser users = 3;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 3;
  inline const ::Cmd::MapUser& users(int index) const;
  inline ::Cmd::MapUser* mutable_users(int index);
  inline ::Cmd::MapUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapUser >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:Cmd.AddMapUser)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MapUser > users_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static AddMapUser* default_instance_;
};
// -------------------------------------------------------------------

class MapNpc : public ::google::protobuf::Message {
 public:
  MapNpc();
  virtual ~MapNpc();

  MapNpc(const MapNpc& from);

  inline MapNpc& operator=(const MapNpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapNpc& default_instance();

  void Swap(MapNpc* other);

  // implements Message ----------------------------------------------

  MapNpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapNpc& from);
  void MergeFrom(const MapNpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 npcID = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // repeated uint32 character = 5;
  inline int character_size() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 5;
  inline ::google::protobuf::uint32 character(int index) const;
  inline void set_character(int index, ::google::protobuf::uint32 value);
  inline void add_character(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      character() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_character();

  // optional .Cmd.ScenePos pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional .Cmd.ScenePos dest = 7;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 7;
  inline const ::Cmd::ScenePos& dest() const;
  inline ::Cmd::ScenePos* mutable_dest();
  inline ::Cmd::ScenePos* release_dest();
  inline void set_allocated_dest(::Cmd::ScenePos* dest);

  // optional uint32 dir = 8;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 8;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // repeated .Cmd.UserData datas = 9;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 9;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // repeated .Cmd.UserAttr attrs = 10;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 10;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // optional uint64 owner = 11 [default = 0];
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 11;
  inline ::google::protobuf::uint64 owner() const;
  inline void set_owner(::google::protobuf::uint64 value);

  // optional uint32 behaviour = 12 [default = 0];
  inline bool has_behaviour() const;
  inline void clear_behaviour();
  static const int kBehaviourFieldNumber = 12;
  inline ::google::protobuf::uint32 behaviour() const;
  inline void set_behaviour(::google::protobuf::uint32 value);

  // optional uint32 uniqueid = 13 [default = 0];
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 13;
  inline ::google::protobuf::uint32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint32 value);

  // optional string waitaction = 14;
  inline bool has_waitaction() const;
  inline void clear_waitaction();
  static const int kWaitactionFieldNumber = 14;
  inline const ::std::string& waitaction() const;
  inline void set_waitaction(const ::std::string& value);
  inline void set_waitaction(const char* value);
  inline void set_waitaction(const char* value, size_t size);
  inline ::std::string* mutable_waitaction();
  inline ::std::string* release_waitaction();
  inline void set_allocated_waitaction(::std::string* waitaction);

  // optional uint32 teamid = 15 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 15;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 searchrange = 16 [default = 0];
  inline bool has_searchrange() const;
  inline void clear_searchrange();
  static const int kSearchrangeFieldNumber = 16;
  inline ::google::protobuf::uint32 searchrange() const;
  inline void set_searchrange(::google::protobuf::uint32 value);

  // repeated .Cmd.BufferData buffs = 17;
  inline int buffs_size() const;
  inline void clear_buffs();
  static const int kBuffsFieldNumber = 17;
  inline const ::Cmd::BufferData& buffs(int index) const;
  inline ::Cmd::BufferData* mutable_buffs(int index);
  inline ::Cmd::BufferData* add_buffs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
      buffs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
      mutable_buffs();

  // optional uint32 motionactionid = 18 [default = 0];
  inline bool has_motionactionid() const;
  inline void clear_motionactionid();
  static const int kMotionactionidFieldNumber = 18;
  inline ::google::protobuf::uint32 motionactionid() const;
  inline void set_motionactionid(::google::protobuf::uint32 value);

  // optional string effect = 19;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 19;
  inline const ::std::string& effect() const;
  inline void set_effect(const ::std::string& value);
  inline void set_effect(const char* value);
  inline void set_effect(const char* value, size_t size);
  inline ::std::string* mutable_effect();
  inline ::std::string* release_effect();
  inline void set_allocated_effect(::std::string* effect);

  // optional uint32 effectpos = 20 [default = 0];
  inline bool has_effectpos() const;
  inline void clear_effectpos();
  static const int kEffectposFieldNumber = 20;
  inline ::google::protobuf::uint32 effectpos() const;
  inline void set_effectpos(::google::protobuf::uint32 value);

  // optional uint32 effectindex = 21 [default = 0];
  inline bool has_effectindex() const;
  inline void clear_effectindex();
  static const int kEffectindexFieldNumber = 21;
  inline ::google::protobuf::uint32 effectindex() const;
  inline void set_effectindex(::google::protobuf::uint32 value);

  // repeated .Cmd.SpEffectData speffectdata = 22;
  inline int speffectdata_size() const;
  inline void clear_speffectdata();
  static const int kSpeffectdataFieldNumber = 22;
  inline const ::Cmd::SpEffectData& speffectdata(int index) const;
  inline ::Cmd::SpEffectData* mutable_speffectdata(int index);
  inline ::Cmd::SpEffectData* add_speffectdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >&
      speffectdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >*
      mutable_speffectdata();

  // optional bool isbirth = 23 [default = false];
  inline bool has_isbirth() const;
  inline void clear_isbirth();
  static const int kIsbirthFieldNumber = 23;
  inline bool isbirth() const;
  inline void set_isbirth(bool value);

  // optional uint32 eat_progress = 24;
  inline bool has_eat_progress() const;
  inline void clear_eat_progress();
  static const int kEatProgressFieldNumber = 24;
  inline ::google::protobuf::uint32 eat_progress() const;
  inline void set_eat_progress(::google::protobuf::uint32 value);

  // optional uint32 fadein = 25 [default = 0];
  inline bool has_fadein() const;
  inline void clear_fadein();
  static const int kFadeinFieldNumber = 25;
  inline ::google::protobuf::uint32 fadein() const;
  inline void set_fadein(::google::protobuf::uint32 value);

  // optional uint64 guildid = 26 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 26;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional uint32 search = 27 [default = 0];
  inline bool has_search() const;
  inline void clear_search();
  static const int kSearchFieldNumber = 27;
  inline ::google::protobuf::uint32 search() const;
  inline void set_search(::google::protobuf::uint32 value);

  // optional uint32 bosstype = 28 [default = 0];
  inline bool has_bosstype() const;
  inline void clear_bosstype();
  static const int kBosstypeFieldNumber = 28;
  inline ::google::protobuf::uint32 bosstype() const;
  inline void set_bosstype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.MapNpc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_behaviour();
  inline void clear_has_behaviour();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_waitaction();
  inline void clear_has_waitaction();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_searchrange();
  inline void clear_has_searchrange();
  inline void set_has_motionactionid();
  inline void clear_has_motionactionid();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_effectpos();
  inline void clear_has_effectpos();
  inline void set_has_effectindex();
  inline void clear_has_effectindex();
  inline void set_has_isbirth();
  inline void clear_has_isbirth();
  inline void set_has_eat_progress();
  inline void clear_has_eat_progress();
  inline void set_has_fadein();
  inline void clear_has_fadein();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_search();
  inline void clear_has_search();
  inline void set_has_bosstype();
  inline void clear_has_bosstype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > character_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 dir_;
  ::Cmd::ScenePos* dest_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  ::google::protobuf::uint64 owner_;
  ::google::protobuf::uint32 behaviour_;
  ::google::protobuf::uint32 uniqueid_;
  ::std::string* waitaction_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 searchrange_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData > buffs_;
  ::std::string* effect_;
  ::google::protobuf::uint32 motionactionid_;
  ::google::protobuf::uint32 effectpos_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData > speffectdata_;
  ::google::protobuf::uint32 effectindex_;
  bool isbirth_;
  ::google::protobuf::uint32 eat_progress_;
  ::google::protobuf::uint32 fadein_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint32 search_;
  ::google::protobuf::uint32 bosstype_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static MapNpc* default_instance_;
};
// -------------------------------------------------------------------

class AddMapNpc : public ::google::protobuf::Message {
 public:
  AddMapNpc();
  virtual ~AddMapNpc();

  AddMapNpc(const AddMapNpc& from);

  inline AddMapNpc& operator=(const AddMapNpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMapNpc& default_instance();

  void Swap(AddMapNpc* other);

  // implements Message ----------------------------------------------

  AddMapNpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMapNpc& from);
  void MergeFrom(const AddMapNpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPNPC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // repeated .Cmd.MapNpc npcs = 3;
  inline int npcs_size() const;
  inline void clear_npcs();
  static const int kNpcsFieldNumber = 3;
  inline const ::Cmd::MapNpc& npcs(int index) const;
  inline ::Cmd::MapNpc* mutable_npcs(int index);
  inline ::Cmd::MapNpc* add_npcs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapNpc >&
      npcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapNpc >*
      mutable_npcs();

  // @@protoc_insertion_point(class_scope:Cmd.AddMapNpc)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MapNpc > npcs_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static AddMapNpc* default_instance_;
};
// -------------------------------------------------------------------

class MapTrap : public ::google::protobuf::Message {
 public:
  MapTrap();
  virtual ~MapTrap();

  MapTrap(const MapTrap& from);

  inline MapTrap& operator=(const MapTrap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapTrap& default_instance();

  void Swap(MapTrap* other);

  // implements Message ----------------------------------------------

  MapTrap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapTrap& from);
  void MergeFrom(const MapTrap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional uint32 dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // optional uint64 masterid = 5;
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 5;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.MapTrap)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_masterid();
  inline void clear_has_masterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 dir_;
  ::google::protobuf::uint64 masterid_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static MapTrap* default_instance_;
};
// -------------------------------------------------------------------

class AddMapTrap : public ::google::protobuf::Message {
 public:
  AddMapTrap();
  virtual ~AddMapTrap();

  AddMapTrap(const AddMapTrap& from);

  inline AddMapTrap& operator=(const AddMapTrap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMapTrap& default_instance();

  void Swap(AddMapTrap* other);

  // implements Message ----------------------------------------------

  AddMapTrap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMapTrap& from);
  void MergeFrom(const AddMapTrap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPTRAP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // repeated .Cmd.MapTrap traps = 3;
  inline int traps_size() const;
  inline void clear_traps();
  static const int kTrapsFieldNumber = 3;
  inline const ::Cmd::MapTrap& traps(int index) const;
  inline ::Cmd::MapTrap* mutable_traps(int index);
  inline ::Cmd::MapTrap* add_traps();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapTrap >&
      traps() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapTrap >*
      mutable_traps();

  // @@protoc_insertion_point(class_scope:Cmd.AddMapTrap)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MapTrap > traps_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static AddMapTrap* default_instance_;
};
// -------------------------------------------------------------------

class MapAct : public ::google::protobuf::Message {
 public:
  MapAct();
  virtual ~MapAct();

  MapAct(const MapAct& from);

  inline MapAct& operator=(const MapAct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapAct& default_instance();

  void Swap(MapAct* other);

  // implements Message ----------------------------------------------

  MapAct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapAct& from);
  void MergeFrom(const MapAct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 range = 2 [default = 0];
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 2;
  inline ::google::protobuf::uint32 range() const;
  inline void set_range(::google::protobuf::uint32 value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional .Cmd.EActType type = 4 [default = EACTTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EActType type() const;
  inline void set_type(::Cmd::EActType value);

  // optional uint32 actvalue = 5 [default = 0];
  inline bool has_actvalue() const;
  inline void clear_actvalue();
  static const int kActvalueFieldNumber = 5;
  inline ::google::protobuf::uint32 actvalue() const;
  inline void set_actvalue(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // @@protoc_insertion_point(class_scope:Cmd.MapAct)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_actvalue();
  inline void clear_has_actvalue();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 masterid_;
  ::google::protobuf::uint32 range_;
  int type_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint32 actvalue_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static MapAct* default_instance_;
};
// -------------------------------------------------------------------

class AddMapAct : public ::google::protobuf::Message {
 public:
  AddMapAct();
  virtual ~AddMapAct();

  AddMapAct(const AddMapAct& from);

  inline AddMapAct& operator=(const AddMapAct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMapAct& default_instance();

  void Swap(AddMapAct* other);

  // implements Message ----------------------------------------------

  AddMapAct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMapAct& from);
  void MergeFrom(const AddMapAct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPACT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // repeated .Cmd.MapAct acts = 3;
  inline int acts_size() const;
  inline void clear_acts();
  static const int kActsFieldNumber = 3;
  inline const ::Cmd::MapAct& acts(int index) const;
  inline ::Cmd::MapAct* mutable_acts(int index);
  inline ::Cmd::MapAct* add_acts();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapAct >&
      acts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapAct >*
      mutable_acts();

  // @@protoc_insertion_point(class_scope:Cmd.AddMapAct)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MapAct > acts_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static AddMapAct* default_instance_;
};
// -------------------------------------------------------------------

class ExitPointState : public ::google::protobuf::Message {
 public:
  ExitPointState();
  virtual ~ExitPointState();

  ExitPointState(const ExitPointState& from);

  inline ExitPointState& operator=(const ExitPointState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitPointState& default_instance();

  void Swap(ExitPointState* other);

  // implements Message ----------------------------------------------

  ExitPointState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitPointState& from);
  void MergeFrom(const ExitPointState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_EXIT_POINT_STATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional uint32 exitid = 3;
  inline bool has_exitid() const;
  inline void clear_exitid();
  static const int kExitidFieldNumber = 3;
  inline ::google::protobuf::uint32 exitid() const;
  inline void set_exitid(::google::protobuf::uint32 value);

  // optional uint32 visible = 4;
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 4;
  inline ::google::protobuf::uint32 visible() const;
  inline void set_visible(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ExitPointState)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_exitid();
  inline void clear_has_exitid();
  inline void set_has_visible();
  inline void clear_has_visible();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 exitid_;
  ::google::protobuf::uint32 visible_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static ExitPointState* default_instance_;
};
// -------------------------------------------------------------------

class MapCmdEnd : public ::google::protobuf::Message {
 public:
  MapCmdEnd();
  virtual ~MapCmdEnd();

  MapCmdEnd(const MapCmdEnd& from);

  inline MapCmdEnd& operator=(const MapCmdEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapCmdEnd& default_instance();

  void Swap(MapCmdEnd* other);

  // implements Message ----------------------------------------------

  MapCmdEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapCmdEnd& from);
  void MergeFrom(const MapCmdEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_MAP_CMD_END];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // @@protoc_insertion_point(class_scope:Cmd.MapCmdEnd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static MapCmdEnd* default_instance_;
};
// -------------------------------------------------------------------

class NpcSearchRangeCmd : public ::google::protobuf::Message {
 public:
  NpcSearchRangeCmd();
  virtual ~NpcSearchRangeCmd();

  NpcSearchRangeCmd(const NpcSearchRangeCmd& from);

  inline NpcSearchRangeCmd& operator=(const NpcSearchRangeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NpcSearchRangeCmd& default_instance();

  void Swap(NpcSearchRangeCmd* other);

  // implements Message ----------------------------------------------

  NpcSearchRangeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NpcSearchRangeCmd& from);
  void MergeFrom(const NpcSearchRangeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_NPC_SEARCH_RANGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional uint64 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 range = 4 [default = 0];
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 4;
  inline ::google::protobuf::uint32 range() const;
  inline void set_range(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NpcSearchRangeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 range_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static NpcSearchRangeCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserHandsCmd : public ::google::protobuf::Message {
 public:
  UserHandsCmd();
  virtual ~UserHandsCmd();

  UserHandsCmd(const UserHandsCmd& from);

  inline UserHandsCmd& operator=(const UserHandsCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserHandsCmd& default_instance();

  void Swap(UserHandsCmd* other);

  // implements Message ----------------------------------------------

  UserHandsCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserHandsCmd& from);
  void MergeFrom(const UserHandsCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HANDS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional uint64 player1 = 3 [default = 0];
  inline bool has_player1() const;
  inline void clear_player1();
  static const int kPlayer1FieldNumber = 3;
  inline ::google::protobuf::uint64 player1() const;
  inline void set_player1(::google::protobuf::uint64 value);

  // optional uint64 player2 = 4 [default = 0];
  inline bool has_player2() const;
  inline void clear_player2();
  static const int kPlayer2FieldNumber = 4;
  inline ::google::protobuf::uint64 player2() const;
  inline void set_player2(::google::protobuf::uint64 value);

  // optional uint32 isadd = 5 [default = 1];
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsaddFieldNumber = 5;
  inline ::google::protobuf::uint32 isadd() const;
  inline void set_isadd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserHandsCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_player1();
  inline void clear_has_player1();
  inline void set_has_player2();
  inline void clear_has_player2();
  inline void set_has_isadd();
  inline void clear_has_isadd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 player1_;
  ::google::protobuf::uint64 player2_;
  ::google::protobuf::uint32 isadd_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static UserHandsCmd* default_instance_;
};
// -------------------------------------------------------------------

class SpEffectCmd : public ::google::protobuf::Message {
 public:
  SpEffectCmd();
  virtual ~SpEffectCmd();

  SpEffectCmd(const SpEffectCmd& from);

  inline SpEffectCmd& operator=(const SpEffectCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpEffectCmd& default_instance();

  void Swap(SpEffectCmd* other);

  // implements Message ----------------------------------------------

  SpEffectCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpEffectCmd& from);
  void MergeFrom(const SpEffectCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_SPEFFECT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional uint64 senderid = 3;
  inline bool has_senderid() const;
  inline void clear_senderid();
  static const int kSenderidFieldNumber = 3;
  inline ::google::protobuf::uint64 senderid() const;
  inline void set_senderid(::google::protobuf::uint64 value);

  // optional .Cmd.SpEffectData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Cmd::SpEffectData& data() const;
  inline ::Cmd::SpEffectData* mutable_data();
  inline ::Cmd::SpEffectData* release_data();
  inline void set_allocated_data(::Cmd::SpEffectData* data);

  // optional bool isadd = 5 [default = true];
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsaddFieldNumber = 5;
  inline bool isadd() const;
  inline void set_isadd(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.SpEffectCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_senderid();
  inline void clear_has_senderid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_isadd();
  inline void clear_has_isadd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 senderid_;
  ::Cmd::SpEffectData* data_;
  bool isadd_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static SpEffectCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserHandNpcCmd : public ::google::protobuf::Message {
 public:
  UserHandNpcCmd();
  virtual ~UserHandNpcCmd();

  UserHandNpcCmd(const UserHandNpcCmd& from);

  inline UserHandNpcCmd& operator=(const UserHandNpcCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserHandNpcCmd& default_instance();

  void Swap(UserHandNpcCmd* other);

  // implements Message ----------------------------------------------

  UserHandNpcCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserHandNpcCmd& from);
  void MergeFrom(const UserHandNpcCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HAND_NPC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional .Cmd.HandNpcData data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::HandNpcData& data() const;
  inline ::Cmd::HandNpcData* mutable_data();
  inline ::Cmd::HandNpcData* release_data();
  inline void set_allocated_data(::Cmd::HandNpcData* data);

  // optional bool ishand = 4 [default = true];
  inline bool has_ishand() const;
  inline void clear_ishand();
  static const int kIshandFieldNumber = 4;
  inline bool ishand() const;
  inline void set_ishand(bool value);

  // optional uint64 userid = 5 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 5;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserHandNpcCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_ishand();
  inline void clear_has_ishand();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::HandNpcData* data_;
  ::google::protobuf::uint64 userid_;
  bool ishand_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static UserHandNpcCmd* default_instance_;
};
// -------------------------------------------------------------------

class GingerBreadNpcCmd : public ::google::protobuf::Message {
 public:
  GingerBreadNpcCmd();
  virtual ~GingerBreadNpcCmd();

  GingerBreadNpcCmd(const GingerBreadNpcCmd& from);

  inline GingerBreadNpcCmd& operator=(const GingerBreadNpcCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GingerBreadNpcCmd& default_instance();

  void Swap(GingerBreadNpcCmd* other);

  // implements Message ----------------------------------------------

  GingerBreadNpcCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GingerBreadNpcCmd& from);
  void MergeFrom(const GingerBreadNpcCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GINGERBREAD_NPC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional .Cmd.GingerBreadNpcData data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::GingerBreadNpcData& data() const;
  inline ::Cmd::GingerBreadNpcData* mutable_data();
  inline ::Cmd::GingerBreadNpcData* release_data();
  inline void set_allocated_data(::Cmd::GingerBreadNpcData* data);

  // optional bool isadd = 4 [default = true];
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsaddFieldNumber = 4;
  inline bool isadd() const;
  inline void set_isadd(bool value);

  // optional uint64 userid = 5 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 5;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional .Cmd.ScenePos bornpos = 6;
  inline bool has_bornpos() const;
  inline void clear_bornpos();
  static const int kBornposFieldNumber = 6;
  inline const ::Cmd::ScenePos& bornpos() const;
  inline ::Cmd::ScenePos* mutable_bornpos();
  inline ::Cmd::ScenePos* release_bornpos();
  inline void set_allocated_bornpos(::Cmd::ScenePos* bornpos);

  // @@protoc_insertion_point(class_scope:Cmd.GingerBreadNpcCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_isadd();
  inline void clear_has_isadd();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_bornpos();
  inline void clear_has_bornpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::GingerBreadNpcData* data_;
  ::google::protobuf::uint64 userid_;
  ::Cmd::ScenePos* bornpos_;
  bool isadd_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static GingerBreadNpcCmd* default_instance_;
};
// -------------------------------------------------------------------

class GoCityGateMapCmd : public ::google::protobuf::Message {
 public:
  GoCityGateMapCmd();
  virtual ~GoCityGateMapCmd();

  GoCityGateMapCmd(const GoCityGateMapCmd& from);

  inline GoCityGateMapCmd& operator=(const GoCityGateMapCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoCityGateMapCmd& default_instance();

  void Swap(GoCityGateMapCmd* other);

  // implements Message ----------------------------------------------

  GoCityGateMapCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoCityGateMapCmd& from);
  void MergeFrom(const GoCityGateMapCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MapParam param = 2 [default = MAPPARAM_GO_CITYGATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MapParam param() const;
  inline void set_param(::Cmd::MapParam value);

  // optional uint32 flag = 3 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GoCityGateMapCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 flag_;
  friend void  protobuf_AddDesc_SceneMap_2eproto();
  friend void protobuf_AssignDesc_SceneMap_2eproto();
  friend void protobuf_ShutdownFile_SceneMap_2eproto();

  void InitAsDefaultInstance();
  static GoCityGateMapCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// MapItem

// optional uint64 guid = 1 [default = 0];
inline bool MapItem::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapItem::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapItem::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapItem::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 MapItem::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapItem.guid)
  return guid_;
}
inline void MapItem::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapItem.guid)
}

// optional uint32 id = 2 [default = 0];
inline bool MapItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MapItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.MapItem.id)
  return id_;
}
inline void MapItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapItem.id)
}

// optional uint32 time = 3 [default = 0];
inline bool MapItem::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapItem::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapItem::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MapItem::time() const {
  // @@protoc_insertion_point(field_get:Cmd.MapItem.time)
  return time_;
}
inline void MapItem::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapItem.time)
}

// optional uint64 sourceid = 4 [default = 0];
inline bool MapItem::has_sourceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapItem::set_has_sourceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapItem::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapItem::clear_sourceid() {
  sourceid_ = GOOGLE_ULONGLONG(0);
  clear_has_sourceid();
}
inline ::google::protobuf::uint64 MapItem::sourceid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapItem.sourceid)
  return sourceid_;
}
inline void MapItem::set_sourceid(::google::protobuf::uint64 value) {
  set_has_sourceid();
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapItem.sourceid)
}

// optional .Cmd.ScenePos pos = 5;
inline bool MapItem::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapItem::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapItem::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& MapItem::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.MapItem.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* MapItem::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.MapItem.pos)
  return pos_;
}
inline ::Cmd::ScenePos* MapItem::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MapItem::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapItem.pos)
}

// repeated uint64 owners = 6;
inline int MapItem::owners_size() const {
  return owners_.size();
}
inline void MapItem::clear_owners() {
  owners_.Clear();
}
inline ::google::protobuf::uint64 MapItem::owners(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapItem.owners)
  return owners_.Get(index);
}
inline void MapItem::set_owners(int index, ::google::protobuf::uint64 value) {
  owners_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.MapItem.owners)
}
inline void MapItem::add_owners(::google::protobuf::uint64 value) {
  owners_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.MapItem.owners)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MapItem::owners() const {
  // @@protoc_insertion_point(field_list:Cmd.MapItem.owners)
  return owners_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MapItem::mutable_owners() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapItem.owners)
  return &owners_;
}

// optional uint32 refinelv = 7 [default = 0];
inline bool MapItem::has_refinelv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MapItem::set_has_refinelv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MapItem::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MapItem::clear_refinelv() {
  refinelv_ = 0u;
  clear_has_refinelv();
}
inline ::google::protobuf::uint32 MapItem::refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.MapItem.refinelv)
  return refinelv_;
}
inline void MapItem::set_refinelv(::google::protobuf::uint32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapItem.refinelv)
}

// -------------------------------------------------------------------

// AddMapItem

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool AddMapItem::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMapItem::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMapItem::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMapItem::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command AddMapItem::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapItem.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddMapItem::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapItem.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPITEM];
inline bool AddMapItem::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMapItem::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMapItem::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMapItem::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::MapParam AddMapItem::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapItem.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void AddMapItem::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapItem.param)
}

// repeated .Cmd.MapItem items = 3;
inline int AddMapItem::items_size() const {
  return items_.size();
}
inline void AddMapItem::clear_items() {
  items_.Clear();
}
inline const ::Cmd::MapItem& AddMapItem::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapItem.items)
  return items_.Get(index);
}
inline ::Cmd::MapItem* AddMapItem::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AddMapItem.items)
  return items_.Mutable(index);
}
inline ::Cmd::MapItem* AddMapItem::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.AddMapItem.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapItem >&
AddMapItem::items() const {
  // @@protoc_insertion_point(field_list:Cmd.AddMapItem.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapItem >*
AddMapItem::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AddMapItem.items)
  return &items_;
}

// -------------------------------------------------------------------

// PickupItem

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool PickupItem::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PickupItem::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PickupItem::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PickupItem::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command PickupItem::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PickupItem.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PickupItem::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PickupItem.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_PICKUPITEM];
inline bool PickupItem::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PickupItem::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PickupItem::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PickupItem::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::MapParam PickupItem::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PickupItem.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void PickupItem::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PickupItem.param)
}

// optional uint64 playerguid = 3 [default = 0];
inline bool PickupItem::has_playerguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PickupItem::set_has_playerguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PickupItem::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PickupItem::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
}
inline ::google::protobuf::uint64 PickupItem::playerguid() const {
  // @@protoc_insertion_point(field_get:Cmd.PickupItem.playerguid)
  return playerguid_;
}
inline void PickupItem::set_playerguid(::google::protobuf::uint64 value) {
  set_has_playerguid();
  playerguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PickupItem.playerguid)
}

// optional uint64 itemguid = 4 [default = 0];
inline bool PickupItem::has_itemguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PickupItem::set_has_itemguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PickupItem::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PickupItem::clear_itemguid() {
  itemguid_ = GOOGLE_ULONGLONG(0);
  clear_has_itemguid();
}
inline ::google::protobuf::uint64 PickupItem::itemguid() const {
  // @@protoc_insertion_point(field_get:Cmd.PickupItem.itemguid)
  return itemguid_;
}
inline void PickupItem::set_itemguid(::google::protobuf::uint64 value) {
  set_has_itemguid();
  itemguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PickupItem.itemguid)
}

// optional bool success = 5 [default = false];
inline bool PickupItem::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PickupItem::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PickupItem::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PickupItem::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PickupItem::success() const {
  // @@protoc_insertion_point(field_get:Cmd.PickupItem.success)
  return success_;
}
inline void PickupItem::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PickupItem.success)
}

// -------------------------------------------------------------------

// CarrierInfo

// optional uint32 id = 1;
inline bool CarrierInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarrierInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarrierInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarrierInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CarrierInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.CarrierInfo.id)
  return id_;
}
inline void CarrierInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CarrierInfo.id)
}

// optional uint64 masterid = 2;
inline bool CarrierInfo::has_masterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarrierInfo::set_has_masterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarrierInfo::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarrierInfo::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 CarrierInfo::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.CarrierInfo.masterid)
  return masterid_;
}
inline void CarrierInfo::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CarrierInfo.masterid)
}

// optional uint32 index = 3;
inline bool CarrierInfo::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CarrierInfo::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CarrierInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CarrierInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CarrierInfo::index() const {
  // @@protoc_insertion_point(field_get:Cmd.CarrierInfo.index)
  return index_;
}
inline void CarrierInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CarrierInfo.index)
}

// optional uint32 progress = 4;
inline bool CarrierInfo::has_progress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CarrierInfo::set_has_progress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CarrierInfo::clear_has_progress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CarrierInfo::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 CarrierInfo::progress() const {
  // @@protoc_insertion_point(field_get:Cmd.CarrierInfo.progress)
  return progress_;
}
inline void CarrierInfo::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CarrierInfo.progress)
}

// optional uint32 line = 5;
inline bool CarrierInfo::has_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CarrierInfo::set_has_line() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CarrierInfo::clear_has_line() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CarrierInfo::clear_line() {
  line_ = 0u;
  clear_has_line();
}
inline ::google::protobuf::uint32 CarrierInfo::line() const {
  // @@protoc_insertion_point(field_get:Cmd.CarrierInfo.line)
  return line_;
}
inline void CarrierInfo::set_line(::google::protobuf::uint32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CarrierInfo.line)
}

// optional uint32 assemble = 6;
inline bool CarrierInfo::has_assemble() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CarrierInfo::set_has_assemble() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CarrierInfo::clear_has_assemble() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CarrierInfo::clear_assemble() {
  assemble_ = 0u;
  clear_has_assemble();
}
inline ::google::protobuf::uint32 CarrierInfo::assemble() const {
  // @@protoc_insertion_point(field_get:Cmd.CarrierInfo.assemble)
  return assemble_;
}
inline void CarrierInfo::set_assemble(::google::protobuf::uint32 value) {
  set_has_assemble();
  assemble_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CarrierInfo.assemble)
}

// -------------------------------------------------------------------

// LineData

// optional uint64 masterId = 1;
inline bool LineData::has_masterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineData::set_has_masterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineData::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineData::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 LineData::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.LineData.masterId)
  return masterid_;
}
inline void LineData::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LineData.masterId)
}

// optional uint64 slaveId = 2;
inline bool LineData::has_slaveid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineData::set_has_slaveid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineData::clear_has_slaveid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineData::clear_slaveid() {
  slaveid_ = GOOGLE_ULONGLONG(0);
  clear_has_slaveid();
}
inline ::google::protobuf::uint64 LineData::slaveid() const {
  // @@protoc_insertion_point(field_get:Cmd.LineData.slaveId)
  return slaveid_;
}
inline void LineData::set_slaveid(::google::protobuf::uint64 value) {
  set_has_slaveid();
  slaveid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LineData.slaveId)
}

// -------------------------------------------------------------------

// HandNpcData

// optional uint32 body = 1;
inline bool HandNpcData::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandNpcData::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandNpcData::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandNpcData::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 HandNpcData::body() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.body)
  return body_;
}
inline void HandNpcData::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.body)
}

// optional uint32 head = 2;
inline bool HandNpcData::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandNpcData::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HandNpcData::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HandNpcData::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 HandNpcData::head() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.head)
  return head_;
}
inline void HandNpcData::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.head)
}

// optional uint32 hair = 3;
inline bool HandNpcData::has_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandNpcData::set_has_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandNpcData::clear_has_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandNpcData::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 HandNpcData::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.hair)
  return hair_;
}
inline void HandNpcData::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.hair)
}

// optional uint32 haircolor = 4;
inline bool HandNpcData::has_haircolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HandNpcData::set_has_haircolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HandNpcData::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HandNpcData::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 HandNpcData::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.haircolor)
  return haircolor_;
}
inline void HandNpcData::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.haircolor)
}

// optional uint64 guid = 5;
inline bool HandNpcData::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HandNpcData::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HandNpcData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HandNpcData::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 HandNpcData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.guid)
  return guid_;
}
inline void HandNpcData::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.guid)
}

// optional uint32 speffect = 6;
inline bool HandNpcData::has_speffect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HandNpcData::set_has_speffect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HandNpcData::clear_has_speffect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HandNpcData::clear_speffect() {
  speffect_ = 0u;
  clear_has_speffect();
}
inline ::google::protobuf::uint32 HandNpcData::speffect() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.speffect)
  return speffect_;
}
inline void HandNpcData::set_speffect(::google::protobuf::uint32 value) {
  set_has_speffect();
  speffect_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.speffect)
}

// optional string name = 7;
inline bool HandNpcData::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HandNpcData::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HandNpcData::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HandNpcData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HandNpcData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.name)
  return *name_;
}
inline void HandNpcData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.name)
}
inline void HandNpcData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.HandNpcData.name)
}
inline void HandNpcData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.HandNpcData.name)
}
inline ::std::string* HandNpcData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.HandNpcData.name)
  return name_;
}
inline ::std::string* HandNpcData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HandNpcData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.HandNpcData.name)
}

// optional uint32 eye = 8;
inline bool HandNpcData::has_eye() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HandNpcData::set_has_eye() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HandNpcData::clear_has_eye() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HandNpcData::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 HandNpcData::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.HandNpcData.eye)
  return eye_;
}
inline void HandNpcData::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandNpcData.eye)
}

// -------------------------------------------------------------------

// GingerBreadNpcData

// optional uint32 npcid = 1;
inline bool GingerBreadNpcData::has_npcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GingerBreadNpcData::set_has_npcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GingerBreadNpcData::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GingerBreadNpcData::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 GingerBreadNpcData::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcData.npcid)
  return npcid_;
}
inline void GingerBreadNpcData::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcData.npcid)
}

// optional uint64 guid = 2;
inline bool GingerBreadNpcData::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GingerBreadNpcData::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GingerBreadNpcData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GingerBreadNpcData::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 GingerBreadNpcData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcData.guid)
  return guid_;
}
inline void GingerBreadNpcData::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcData.guid)
}

// optional uint64 giveid = 3;
inline bool GingerBreadNpcData::has_giveid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GingerBreadNpcData::set_has_giveid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GingerBreadNpcData::clear_has_giveid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GingerBreadNpcData::clear_giveid() {
  giveid_ = GOOGLE_ULONGLONG(0);
  clear_has_giveid();
}
inline ::google::protobuf::uint64 GingerBreadNpcData::giveid() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcData.giveid)
  return giveid_;
}
inline void GingerBreadNpcData::set_giveid(::google::protobuf::uint64 value) {
  set_has_giveid();
  giveid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcData.giveid)
}

// optional uint32 expiretime = 4;
inline bool GingerBreadNpcData::has_expiretime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GingerBreadNpcData::set_has_expiretime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GingerBreadNpcData::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GingerBreadNpcData::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 GingerBreadNpcData::expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcData.expiretime)
  return expiretime_;
}
inline void GingerBreadNpcData::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcData.expiretime)
}

// optional .Cmd.EGiveType type = 5;
inline bool GingerBreadNpcData::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GingerBreadNpcData::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GingerBreadNpcData::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GingerBreadNpcData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EGiveType GingerBreadNpcData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcData.type)
  return static_cast< ::Cmd::EGiveType >(type_);
}
inline void GingerBreadNpcData::set_type(::Cmd::EGiveType value) {
  assert(::Cmd::EGiveType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcData.type)
}

// -------------------------------------------------------------------

// MapUser

// optional uint64 guid = 1 [default = 0];
inline bool MapUser::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapUser::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapUser::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapUser::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 MapUser::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.guid)
  return guid_;
}
inline void MapUser::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.guid)
}

// optional string name = 2;
inline bool MapUser::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapUser::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapUser::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MapUser::name() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.name)
  return *name_;
}
inline void MapUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapUser.name)
}
inline void MapUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapUser.name)
}
inline void MapUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapUser.name)
}
inline ::std::string* MapUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.name)
  return name_;
}
inline ::std::string* MapUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.name)
}

// optional .Cmd.EGender gender = 3 [default = EGENDER_MIN];
inline bool MapUser::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapUser::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapUser::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapUser::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender MapUser::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void MapUser::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.gender)
}

// optional .Cmd.ScenePos pos = 4;
inline bool MapUser::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapUser::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapUser::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapUser::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& MapUser::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* MapUser::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.pos)
  return pos_;
}
inline ::Cmd::ScenePos* MapUser::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MapUser::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.pos)
}

// optional .Cmd.ScenePos dest = 5;
inline bool MapUser::has_dest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapUser::set_has_dest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapUser::clear_has_dest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapUser::clear_dest() {
  if (dest_ != NULL) dest_->::Cmd::ScenePos::Clear();
  clear_has_dest();
}
inline const ::Cmd::ScenePos& MapUser::dest() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.dest)
  return dest_ != NULL ? *dest_ : *default_instance_->dest_;
}
inline ::Cmd::ScenePos* MapUser::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) dest_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.dest)
  return dest_;
}
inline ::Cmd::ScenePos* MapUser::release_dest() {
  clear_has_dest();
  ::Cmd::ScenePos* temp = dest_;
  dest_ = NULL;
  return temp;
}
inline void MapUser::set_allocated_dest(::Cmd::ScenePos* dest) {
  delete dest_;
  dest_ = dest;
  if (dest) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.dest)
}

// repeated .Cmd.UserAttr attrs = 6;
inline int MapUser::attrs_size() const {
  return attrs_.size();
}
inline void MapUser::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& MapUser::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* MapUser::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* MapUser::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.MapUser.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
MapUser::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.MapUser.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
MapUser::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapUser.attrs)
  return &attrs_;
}

// repeated .Cmd.UserData datas = 7;
inline int MapUser::datas_size() const {
  return datas_.size();
}
inline void MapUser::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& MapUser::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* MapUser::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* MapUser::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.MapUser.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
MapUser::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.MapUser.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
MapUser::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapUser.datas)
  return &datas_;
}

// repeated .Cmd.BufferData buffs = 8;
inline int MapUser::buffs_size() const {
  return buffs_.size();
}
inline void MapUser::clear_buffs() {
  buffs_.Clear();
}
inline const ::Cmd::BufferData& MapUser::buffs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.buffs)
  return buffs_.Get(index);
}
inline ::Cmd::BufferData* MapUser::mutable_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.buffs)
  return buffs_.Mutable(index);
}
inline ::Cmd::BufferData* MapUser::add_buffs() {
  // @@protoc_insertion_point(field_add:Cmd.MapUser.buffs)
  return buffs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
MapUser::buffs() const {
  // @@protoc_insertion_point(field_list:Cmd.MapUser.buffs)
  return buffs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
MapUser::mutable_buffs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapUser.buffs)
  return &buffs_;
}

// optional uint32 skillid = 9;
inline bool MapUser::has_skillid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MapUser::set_has_skillid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MapUser::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MapUser::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 MapUser::skillid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.skillid)
  return skillid_;
}
inline void MapUser::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.skillid)
}

// optional uint64 teamid = 10;
inline bool MapUser::has_teamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MapUser::set_has_teamid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MapUser::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MapUser::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 MapUser::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.teamid)
  return teamid_;
}
inline void MapUser::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.teamid)
}

// optional string teamname = 11;
inline bool MapUser::has_teamname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MapUser::set_has_teamname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MapUser::clear_has_teamname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MapUser::clear_teamname() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_->clear();
  }
  clear_has_teamname();
}
inline const ::std::string& MapUser::teamname() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.teamname)
  return *teamname_;
}
inline void MapUser::set_teamname(const ::std::string& value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapUser.teamname)
}
inline void MapUser::set_teamname(const char* value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapUser.teamname)
}
inline void MapUser::set_teamname(const char* value, size_t size) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapUser.teamname)
}
inline ::std::string* MapUser::mutable_teamname() {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.teamname)
  return teamname_;
}
inline ::std::string* MapUser::release_teamname() {
  clear_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = teamname_;
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapUser::set_allocated_teamname(::std::string* teamname) {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (teamname) {
    set_has_teamname();
    teamname_ = teamname;
  } else {
    clear_has_teamname();
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.teamname)
}

// optional .Cmd.CarrierInfo carrier = 12;
inline bool MapUser::has_carrier() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MapUser::set_has_carrier() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MapUser::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MapUser::clear_carrier() {
  if (carrier_ != NULL) carrier_->::Cmd::CarrierInfo::Clear();
  clear_has_carrier();
}
inline const ::Cmd::CarrierInfo& MapUser::carrier() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.carrier)
  return carrier_ != NULL ? *carrier_ : *default_instance_->carrier_;
}
inline ::Cmd::CarrierInfo* MapUser::mutable_carrier() {
  set_has_carrier();
  if (carrier_ == NULL) carrier_ = new ::Cmd::CarrierInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.carrier)
  return carrier_;
}
inline ::Cmd::CarrierInfo* MapUser::release_carrier() {
  clear_has_carrier();
  ::Cmd::CarrierInfo* temp = carrier_;
  carrier_ = NULL;
  return temp;
}
inline void MapUser::set_allocated_carrier(::Cmd::CarrierInfo* carrier) {
  delete carrier_;
  carrier_ = carrier;
  if (carrier) {
    set_has_carrier();
  } else {
    clear_has_carrier();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.carrier)
}

// optional .Cmd.ChatRoomSummary chatroom = 13;
inline bool MapUser::has_chatroom() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MapUser::set_has_chatroom() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MapUser::clear_has_chatroom() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MapUser::clear_chatroom() {
  if (chatroom_ != NULL) chatroom_->::Cmd::ChatRoomSummary::Clear();
  clear_has_chatroom();
}
inline const ::Cmd::ChatRoomSummary& MapUser::chatroom() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.chatroom)
  return chatroom_ != NULL ? *chatroom_ : *default_instance_->chatroom_;
}
inline ::Cmd::ChatRoomSummary* MapUser::mutable_chatroom() {
  set_has_chatroom();
  if (chatroom_ == NULL) chatroom_ = new ::Cmd::ChatRoomSummary;
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.chatroom)
  return chatroom_;
}
inline ::Cmd::ChatRoomSummary* MapUser::release_chatroom() {
  clear_has_chatroom();
  ::Cmd::ChatRoomSummary* temp = chatroom_;
  chatroom_ = NULL;
  return temp;
}
inline void MapUser::set_allocated_chatroom(::Cmd::ChatRoomSummary* chatroom) {
  delete chatroom_;
  chatroom_ = chatroom;
  if (chatroom) {
    set_has_chatroom();
  } else {
    clear_has_chatroom();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.chatroom)
}

// optional uint64 handsmaster = 14;
inline bool MapUser::has_handsmaster() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MapUser::set_has_handsmaster() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MapUser::clear_has_handsmaster() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MapUser::clear_handsmaster() {
  handsmaster_ = GOOGLE_ULONGLONG(0);
  clear_has_handsmaster();
}
inline ::google::protobuf::uint64 MapUser::handsmaster() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.handsmaster)
  return handsmaster_;
}
inline void MapUser::set_handsmaster(::google::protobuf::uint64 value) {
  set_has_handsmaster();
  handsmaster_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.handsmaster)
}

// repeated .Cmd.SpEffectData speffectdata = 15;
inline int MapUser::speffectdata_size() const {
  return speffectdata_.size();
}
inline void MapUser::clear_speffectdata() {
  speffectdata_.Clear();
}
inline const ::Cmd::SpEffectData& MapUser::speffectdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.speffectdata)
  return speffectdata_.Get(index);
}
inline ::Cmd::SpEffectData* MapUser::mutable_speffectdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.speffectdata)
  return speffectdata_.Mutable(index);
}
inline ::Cmd::SpEffectData* MapUser::add_speffectdata() {
  // @@protoc_insertion_point(field_add:Cmd.MapUser.speffectdata)
  return speffectdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >&
MapUser::speffectdata() const {
  // @@protoc_insertion_point(field_list:Cmd.MapUser.speffectdata)
  return speffectdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >*
MapUser::mutable_speffectdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapUser.speffectdata)
  return &speffectdata_;
}

// optional uint64 guildid = 16 [default = 0];
inline bool MapUser::has_guildid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MapUser::set_has_guildid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MapUser::clear_has_guildid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MapUser::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 MapUser::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.guildid)
  return guildid_;
}
inline void MapUser::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.guildid)
}

// optional string guildname = 17;
inline bool MapUser::has_guildname() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MapUser::set_has_guildname() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MapUser::clear_has_guildname() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MapUser::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& MapUser::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.guildname)
  return *guildname_;
}
inline void MapUser::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapUser.guildname)
}
inline void MapUser::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapUser.guildname)
}
inline void MapUser::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapUser.guildname)
}
inline ::std::string* MapUser::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.guildname)
  return guildname_;
}
inline ::std::string* MapUser::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapUser::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.guildname)
}

// optional string guildicon = 18;
inline bool MapUser::has_guildicon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MapUser::set_has_guildicon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MapUser::clear_has_guildicon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MapUser::clear_guildicon() {
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_->clear();
  }
  clear_has_guildicon();
}
inline const ::std::string& MapUser::guildicon() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.guildicon)
  return *guildicon_;
}
inline void MapUser::set_guildicon(const ::std::string& value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapUser.guildicon)
}
inline void MapUser::set_guildicon(const char* value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapUser.guildicon)
}
inline void MapUser::set_guildicon(const char* value, size_t size) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapUser.guildicon)
}
inline ::std::string* MapUser::mutable_guildicon() {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildicon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.guildicon)
  return guildicon_;
}
inline ::std::string* MapUser::release_guildicon() {
  clear_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildicon_;
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapUser::set_allocated_guildicon(::std::string* guildicon) {
  if (guildicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildicon_;
  }
  if (guildicon) {
    set_has_guildicon();
    guildicon_ = guildicon;
  } else {
    clear_has_guildicon();
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.guildicon)
}

// optional string guildjob = 19;
inline bool MapUser::has_guildjob() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MapUser::set_has_guildjob() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MapUser::clear_has_guildjob() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MapUser::clear_guildjob() {
  if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_->clear();
  }
  clear_has_guildjob();
}
inline const ::std::string& MapUser::guildjob() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.guildjob)
  return *guildjob_;
}
inline void MapUser::set_guildjob(const ::std::string& value) {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  guildjob_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapUser.guildjob)
}
inline void MapUser::set_guildjob(const char* value) {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  guildjob_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapUser.guildjob)
}
inline void MapUser::set_guildjob(const char* value, size_t size) {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  guildjob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapUser.guildjob)
}
inline ::std::string* MapUser::mutable_guildjob() {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.guildjob)
  return guildjob_;
}
inline ::std::string* MapUser::release_guildjob() {
  clear_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildjob_;
    guildjob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapUser::set_allocated_guildjob(::std::string* guildjob) {
  if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildjob_;
  }
  if (guildjob) {
    set_has_guildjob();
    guildjob_ = guildjob;
  } else {
    clear_has_guildjob();
    guildjob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.guildjob)
}

// optional .Cmd.HandNpcData handnpc = 20;
inline bool MapUser::has_handnpc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MapUser::set_has_handnpc() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MapUser::clear_has_handnpc() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MapUser::clear_handnpc() {
  if (handnpc_ != NULL) handnpc_->::Cmd::HandNpcData::Clear();
  clear_has_handnpc();
}
inline const ::Cmd::HandNpcData& MapUser::handnpc() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.handnpc)
  return handnpc_ != NULL ? *handnpc_ : *default_instance_->handnpc_;
}
inline ::Cmd::HandNpcData* MapUser::mutable_handnpc() {
  set_has_handnpc();
  if (handnpc_ == NULL) handnpc_ = new ::Cmd::HandNpcData;
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.handnpc)
  return handnpc_;
}
inline ::Cmd::HandNpcData* MapUser::release_handnpc() {
  clear_has_handnpc();
  ::Cmd::HandNpcData* temp = handnpc_;
  handnpc_ = NULL;
  return temp;
}
inline void MapUser::set_allocated_handnpc(::Cmd::HandNpcData* handnpc) {
  delete handnpc_;
  handnpc_ = handnpc;
  if (handnpc) {
    set_has_handnpc();
  } else {
    clear_has_handnpc();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.handnpc)
}

// optional uint32 motionactionid = 21;
inline bool MapUser::has_motionactionid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MapUser::set_has_motionactionid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MapUser::clear_has_motionactionid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MapUser::clear_motionactionid() {
  motionactionid_ = 0u;
  clear_has_motionactionid();
}
inline ::google::protobuf::uint32 MapUser::motionactionid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.motionactionid)
  return motionactionid_;
}
inline void MapUser::set_motionactionid(::google::protobuf::uint32 value) {
  set_has_motionactionid();
  motionactionid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.motionactionid)
}

// optional uint32 seatid = 22;
inline bool MapUser::has_seatid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MapUser::set_has_seatid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MapUser::clear_has_seatid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MapUser::clear_seatid() {
  seatid_ = 0u;
  clear_has_seatid();
}
inline ::google::protobuf::uint32 MapUser::seatid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.seatid)
  return seatid_;
}
inline void MapUser::set_seatid(::google::protobuf::uint32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.seatid)
}

// repeated .Cmd.GingerBreadNpcData givenpcdatas = 23;
inline int MapUser::givenpcdatas_size() const {
  return givenpcdatas_.size();
}
inline void MapUser::clear_givenpcdatas() {
  givenpcdatas_.Clear();
}
inline const ::Cmd::GingerBreadNpcData& MapUser::givenpcdatas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.givenpcdatas)
  return givenpcdatas_.Get(index);
}
inline ::Cmd::GingerBreadNpcData* MapUser::mutable_givenpcdatas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.givenpcdatas)
  return givenpcdatas_.Mutable(index);
}
inline ::Cmd::GingerBreadNpcData* MapUser::add_givenpcdatas() {
  // @@protoc_insertion_point(field_add:Cmd.MapUser.givenpcdatas)
  return givenpcdatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GingerBreadNpcData >&
MapUser::givenpcdatas() const {
  // @@protoc_insertion_point(field_list:Cmd.MapUser.givenpcdatas)
  return givenpcdatas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GingerBreadNpcData >*
MapUser::mutable_givenpcdatas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapUser.givenpcdatas)
  return &givenpcdatas_;
}

// optional uint32 achievetitle = 24;
inline bool MapUser::has_achievetitle() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MapUser::set_has_achievetitle() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MapUser::clear_has_achievetitle() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MapUser::clear_achievetitle() {
  achievetitle_ = 0u;
  clear_has_achievetitle();
}
inline ::google::protobuf::uint32 MapUser::achievetitle() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.achievetitle)
  return achievetitle_;
}
inline void MapUser::set_achievetitle(::google::protobuf::uint32 value) {
  set_has_achievetitle();
  achievetitle_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapUser.achievetitle)
}

// optional .Cmd.CookStateMsg cookstate = 25;
inline bool MapUser::has_cookstate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MapUser::set_has_cookstate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MapUser::clear_has_cookstate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MapUser::clear_cookstate() {
  if (cookstate_ != NULL) cookstate_->::Cmd::CookStateMsg::Clear();
  clear_has_cookstate();
}
inline const ::Cmd::CookStateMsg& MapUser::cookstate() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.cookstate)
  return cookstate_ != NULL ? *cookstate_ : *default_instance_->cookstate_;
}
inline ::Cmd::CookStateMsg* MapUser::mutable_cookstate() {
  set_has_cookstate();
  if (cookstate_ == NULL) cookstate_ = new ::Cmd::CookStateMsg;
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.cookstate)
  return cookstate_;
}
inline ::Cmd::CookStateMsg* MapUser::release_cookstate() {
  clear_has_cookstate();
  ::Cmd::CookStateMsg* temp = cookstate_;
  cookstate_ = NULL;
  return temp;
}
inline void MapUser::set_allocated_cookstate(::Cmd::CookStateMsg* cookstate) {
  delete cookstate_;
  cookstate_ = cookstate;
  if (cookstate) {
    set_has_cookstate();
  } else {
    clear_has_cookstate();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.cookstate)
}

// optional .Cmd.BoothInfo info = 26;
inline bool MapUser::has_info() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MapUser::set_has_info() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MapUser::clear_has_info() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MapUser::clear_info() {
  if (info_ != NULL) info_->::Cmd::BoothInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::BoothInfo& MapUser::info() const {
  // @@protoc_insertion_point(field_get:Cmd.MapUser.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::BoothInfo* MapUser::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::BoothInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.MapUser.info)
  return info_;
}
inline ::Cmd::BoothInfo* MapUser::release_info() {
  clear_has_info();
  ::Cmd::BoothInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MapUser::set_allocated_info(::Cmd::BoothInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapUser.info)
}

// -------------------------------------------------------------------

// AddMapUser

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool AddMapUser::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMapUser::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMapUser::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMapUser::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command AddMapUser::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapUser.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddMapUser::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapUser.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPUSER];
inline bool AddMapUser::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMapUser::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMapUser::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMapUser::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::MapParam AddMapUser::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapUser.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void AddMapUser::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapUser.param)
}

// repeated .Cmd.MapUser users = 3;
inline int AddMapUser::users_size() const {
  return users_.size();
}
inline void AddMapUser::clear_users() {
  users_.Clear();
}
inline const ::Cmd::MapUser& AddMapUser::users(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapUser.users)
  return users_.Get(index);
}
inline ::Cmd::MapUser* AddMapUser::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AddMapUser.users)
  return users_.Mutable(index);
}
inline ::Cmd::MapUser* AddMapUser::add_users() {
  // @@protoc_insertion_point(field_add:Cmd.AddMapUser.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapUser >&
AddMapUser::users() const {
  // @@protoc_insertion_point(field_list:Cmd.AddMapUser.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapUser >*
AddMapUser::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AddMapUser.users)
  return &users_;
}

// -------------------------------------------------------------------

// MapNpc

// optional uint64 id = 1 [default = 0];
inline bool MapNpc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapNpc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapNpc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapNpc::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MapNpc::id() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.id)
  return id_;
}
inline void MapNpc::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.id)
}

// optional string name = 2;
inline bool MapNpc::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapNpc::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapNpc::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapNpc::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MapNpc::name() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.name)
  return *name_;
}
inline void MapNpc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.name)
}
inline void MapNpc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapNpc.name)
}
inline void MapNpc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapNpc.name)
}
inline ::std::string* MapNpc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.name)
  return name_;
}
inline ::std::string* MapNpc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapNpc::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapNpc.name)
}

// optional uint32 npcID = 3 [default = 0];
inline bool MapNpc::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapNpc::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapNpc::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapNpc::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 MapNpc::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.npcID)
  return npcid_;
}
inline void MapNpc::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.npcID)
}

// repeated uint32 character = 5;
inline int MapNpc::character_size() const {
  return character_.size();
}
inline void MapNpc::clear_character() {
  character_.Clear();
}
inline ::google::protobuf::uint32 MapNpc::character(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.character)
  return character_.Get(index);
}
inline void MapNpc::set_character(int index, ::google::protobuf::uint32 value) {
  character_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.character)
}
inline void MapNpc::add_character(::google::protobuf::uint32 value) {
  character_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.MapNpc.character)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MapNpc::character() const {
  // @@protoc_insertion_point(field_list:Cmd.MapNpc.character)
  return character_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MapNpc::mutable_character() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapNpc.character)
  return &character_;
}

// optional .Cmd.ScenePos pos = 6;
inline bool MapNpc::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapNpc::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapNpc::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapNpc::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& MapNpc::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* MapNpc::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.pos)
  return pos_;
}
inline ::Cmd::ScenePos* MapNpc::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MapNpc::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapNpc.pos)
}

// optional .Cmd.ScenePos dest = 7;
inline bool MapNpc::has_dest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapNpc::set_has_dest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapNpc::clear_has_dest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapNpc::clear_dest() {
  if (dest_ != NULL) dest_->::Cmd::ScenePos::Clear();
  clear_has_dest();
}
inline const ::Cmd::ScenePos& MapNpc::dest() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.dest)
  return dest_ != NULL ? *dest_ : *default_instance_->dest_;
}
inline ::Cmd::ScenePos* MapNpc::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) dest_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.dest)
  return dest_;
}
inline ::Cmd::ScenePos* MapNpc::release_dest() {
  clear_has_dest();
  ::Cmd::ScenePos* temp = dest_;
  dest_ = NULL;
  return temp;
}
inline void MapNpc::set_allocated_dest(::Cmd::ScenePos* dest) {
  delete dest_;
  dest_ = dest;
  if (dest) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapNpc.dest)
}

// optional uint32 dir = 8;
inline bool MapNpc::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MapNpc::set_has_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MapNpc::clear_has_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MapNpc::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 MapNpc::dir() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.dir)
  return dir_;
}
inline void MapNpc::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.dir)
}

// repeated .Cmd.UserData datas = 9;
inline int MapNpc::datas_size() const {
  return datas_.size();
}
inline void MapNpc::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& MapNpc::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* MapNpc::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* MapNpc::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.MapNpc.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
MapNpc::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.MapNpc.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
MapNpc::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapNpc.datas)
  return &datas_;
}

// repeated .Cmd.UserAttr attrs = 10;
inline int MapNpc::attrs_size() const {
  return attrs_.size();
}
inline void MapNpc::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& MapNpc::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* MapNpc::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* MapNpc::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.MapNpc.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
MapNpc::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.MapNpc.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
MapNpc::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapNpc.attrs)
  return &attrs_;
}

// optional uint64 owner = 11 [default = 0];
inline bool MapNpc::has_owner() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MapNpc::set_has_owner() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MapNpc::clear_has_owner() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MapNpc::clear_owner() {
  owner_ = GOOGLE_ULONGLONG(0);
  clear_has_owner();
}
inline ::google::protobuf::uint64 MapNpc::owner() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.owner)
  return owner_;
}
inline void MapNpc::set_owner(::google::protobuf::uint64 value) {
  set_has_owner();
  owner_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.owner)
}

// optional uint32 behaviour = 12 [default = 0];
inline bool MapNpc::has_behaviour() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MapNpc::set_has_behaviour() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MapNpc::clear_has_behaviour() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MapNpc::clear_behaviour() {
  behaviour_ = 0u;
  clear_has_behaviour();
}
inline ::google::protobuf::uint32 MapNpc::behaviour() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.behaviour)
  return behaviour_;
}
inline void MapNpc::set_behaviour(::google::protobuf::uint32 value) {
  set_has_behaviour();
  behaviour_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.behaviour)
}

// optional uint32 uniqueid = 13 [default = 0];
inline bool MapNpc::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MapNpc::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MapNpc::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MapNpc::clear_uniqueid() {
  uniqueid_ = 0u;
  clear_has_uniqueid();
}
inline ::google::protobuf::uint32 MapNpc::uniqueid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.uniqueid)
  return uniqueid_;
}
inline void MapNpc::set_uniqueid(::google::protobuf::uint32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.uniqueid)
}

// optional string waitaction = 14;
inline bool MapNpc::has_waitaction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MapNpc::set_has_waitaction() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MapNpc::clear_has_waitaction() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MapNpc::clear_waitaction() {
  if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_->clear();
  }
  clear_has_waitaction();
}
inline const ::std::string& MapNpc::waitaction() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.waitaction)
  return *waitaction_;
}
inline void MapNpc::set_waitaction(const ::std::string& value) {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  waitaction_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.waitaction)
}
inline void MapNpc::set_waitaction(const char* value) {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  waitaction_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapNpc.waitaction)
}
inline void MapNpc::set_waitaction(const char* value, size_t size) {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  waitaction_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapNpc.waitaction)
}
inline ::std::string* MapNpc::mutable_waitaction() {
  set_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    waitaction_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.waitaction)
  return waitaction_;
}
inline ::std::string* MapNpc::release_waitaction() {
  clear_has_waitaction();
  if (waitaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = waitaction_;
    waitaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapNpc::set_allocated_waitaction(::std::string* waitaction) {
  if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete waitaction_;
  }
  if (waitaction) {
    set_has_waitaction();
    waitaction_ = waitaction;
  } else {
    clear_has_waitaction();
    waitaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapNpc.waitaction)
}

// optional uint32 teamid = 15 [default = 0];
inline bool MapNpc::has_teamid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MapNpc::set_has_teamid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MapNpc::clear_has_teamid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MapNpc::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 MapNpc::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.teamid)
  return teamid_;
}
inline void MapNpc::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.teamid)
}

// optional uint32 searchrange = 16 [default = 0];
inline bool MapNpc::has_searchrange() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MapNpc::set_has_searchrange() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MapNpc::clear_has_searchrange() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MapNpc::clear_searchrange() {
  searchrange_ = 0u;
  clear_has_searchrange();
}
inline ::google::protobuf::uint32 MapNpc::searchrange() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.searchrange)
  return searchrange_;
}
inline void MapNpc::set_searchrange(::google::protobuf::uint32 value) {
  set_has_searchrange();
  searchrange_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.searchrange)
}

// repeated .Cmd.BufferData buffs = 17;
inline int MapNpc::buffs_size() const {
  return buffs_.size();
}
inline void MapNpc::clear_buffs() {
  buffs_.Clear();
}
inline const ::Cmd::BufferData& MapNpc::buffs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.buffs)
  return buffs_.Get(index);
}
inline ::Cmd::BufferData* MapNpc::mutable_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.buffs)
  return buffs_.Mutable(index);
}
inline ::Cmd::BufferData* MapNpc::add_buffs() {
  // @@protoc_insertion_point(field_add:Cmd.MapNpc.buffs)
  return buffs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
MapNpc::buffs() const {
  // @@protoc_insertion_point(field_list:Cmd.MapNpc.buffs)
  return buffs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
MapNpc::mutable_buffs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapNpc.buffs)
  return &buffs_;
}

// optional uint32 motionactionid = 18 [default = 0];
inline bool MapNpc::has_motionactionid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MapNpc::set_has_motionactionid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MapNpc::clear_has_motionactionid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MapNpc::clear_motionactionid() {
  motionactionid_ = 0u;
  clear_has_motionactionid();
}
inline ::google::protobuf::uint32 MapNpc::motionactionid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.motionactionid)
  return motionactionid_;
}
inline void MapNpc::set_motionactionid(::google::protobuf::uint32 value) {
  set_has_motionactionid();
  motionactionid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.motionactionid)
}

// optional string effect = 19;
inline bool MapNpc::has_effect() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MapNpc::set_has_effect() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MapNpc::clear_has_effect() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MapNpc::clear_effect() {
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_->clear();
  }
  clear_has_effect();
}
inline const ::std::string& MapNpc::effect() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.effect)
  return *effect_;
}
inline void MapNpc::set_effect(const ::std::string& value) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.effect)
}
inline void MapNpc::set_effect(const char* value) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MapNpc.effect)
}
inline void MapNpc::set_effect(const char* value, size_t size) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MapNpc.effect)
}
inline ::std::string* MapNpc::mutable_effect() {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.effect)
  return effect_;
}
inline ::std::string* MapNpc::release_effect() {
  clear_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = effect_;
    effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapNpc::set_allocated_effect(::std::string* effect) {
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effect_;
  }
  if (effect) {
    set_has_effect();
    effect_ = effect;
  } else {
    clear_has_effect();
    effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapNpc.effect)
}

// optional uint32 effectpos = 20 [default = 0];
inline bool MapNpc::has_effectpos() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MapNpc::set_has_effectpos() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MapNpc::clear_has_effectpos() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MapNpc::clear_effectpos() {
  effectpos_ = 0u;
  clear_has_effectpos();
}
inline ::google::protobuf::uint32 MapNpc::effectpos() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.effectpos)
  return effectpos_;
}
inline void MapNpc::set_effectpos(::google::protobuf::uint32 value) {
  set_has_effectpos();
  effectpos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.effectpos)
}

// optional uint32 effectindex = 21 [default = 0];
inline bool MapNpc::has_effectindex() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MapNpc::set_has_effectindex() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MapNpc::clear_has_effectindex() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MapNpc::clear_effectindex() {
  effectindex_ = 0u;
  clear_has_effectindex();
}
inline ::google::protobuf::uint32 MapNpc::effectindex() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.effectindex)
  return effectindex_;
}
inline void MapNpc::set_effectindex(::google::protobuf::uint32 value) {
  set_has_effectindex();
  effectindex_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.effectindex)
}

// repeated .Cmd.SpEffectData speffectdata = 22;
inline int MapNpc::speffectdata_size() const {
  return speffectdata_.size();
}
inline void MapNpc::clear_speffectdata() {
  speffectdata_.Clear();
}
inline const ::Cmd::SpEffectData& MapNpc::speffectdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.speffectdata)
  return speffectdata_.Get(index);
}
inline ::Cmd::SpEffectData* MapNpc::mutable_speffectdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MapNpc.speffectdata)
  return speffectdata_.Mutable(index);
}
inline ::Cmd::SpEffectData* MapNpc::add_speffectdata() {
  // @@protoc_insertion_point(field_add:Cmd.MapNpc.speffectdata)
  return speffectdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >&
MapNpc::speffectdata() const {
  // @@protoc_insertion_point(field_list:Cmd.MapNpc.speffectdata)
  return speffectdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SpEffectData >*
MapNpc::mutable_speffectdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MapNpc.speffectdata)
  return &speffectdata_;
}

// optional bool isbirth = 23 [default = false];
inline bool MapNpc::has_isbirth() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MapNpc::set_has_isbirth() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MapNpc::clear_has_isbirth() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MapNpc::clear_isbirth() {
  isbirth_ = false;
  clear_has_isbirth();
}
inline bool MapNpc::isbirth() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.isbirth)
  return isbirth_;
}
inline void MapNpc::set_isbirth(bool value) {
  set_has_isbirth();
  isbirth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.isbirth)
}

// optional uint32 eat_progress = 24;
inline bool MapNpc::has_eat_progress() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MapNpc::set_has_eat_progress() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MapNpc::clear_has_eat_progress() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MapNpc::clear_eat_progress() {
  eat_progress_ = 0u;
  clear_has_eat_progress();
}
inline ::google::protobuf::uint32 MapNpc::eat_progress() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.eat_progress)
  return eat_progress_;
}
inline void MapNpc::set_eat_progress(::google::protobuf::uint32 value) {
  set_has_eat_progress();
  eat_progress_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.eat_progress)
}

// optional uint32 fadein = 25 [default = 0];
inline bool MapNpc::has_fadein() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MapNpc::set_has_fadein() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MapNpc::clear_has_fadein() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MapNpc::clear_fadein() {
  fadein_ = 0u;
  clear_has_fadein();
}
inline ::google::protobuf::uint32 MapNpc::fadein() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.fadein)
  return fadein_;
}
inline void MapNpc::set_fadein(::google::protobuf::uint32 value) {
  set_has_fadein();
  fadein_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.fadein)
}

// optional uint64 guildid = 26 [default = 0];
inline bool MapNpc::has_guildid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MapNpc::set_has_guildid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MapNpc::clear_has_guildid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MapNpc::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 MapNpc::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.guildid)
  return guildid_;
}
inline void MapNpc::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.guildid)
}

// optional uint32 search = 27 [default = 0];
inline bool MapNpc::has_search() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MapNpc::set_has_search() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MapNpc::clear_has_search() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MapNpc::clear_search() {
  search_ = 0u;
  clear_has_search();
}
inline ::google::protobuf::uint32 MapNpc::search() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.search)
  return search_;
}
inline void MapNpc::set_search(::google::protobuf::uint32 value) {
  set_has_search();
  search_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.search)
}

// optional uint32 bosstype = 28 [default = 0];
inline bool MapNpc::has_bosstype() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MapNpc::set_has_bosstype() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MapNpc::clear_has_bosstype() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MapNpc::clear_bosstype() {
  bosstype_ = 0u;
  clear_has_bosstype();
}
inline ::google::protobuf::uint32 MapNpc::bosstype() const {
  // @@protoc_insertion_point(field_get:Cmd.MapNpc.bosstype)
  return bosstype_;
}
inline void MapNpc::set_bosstype(::google::protobuf::uint32 value) {
  set_has_bosstype();
  bosstype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapNpc.bosstype)
}

// -------------------------------------------------------------------

// AddMapNpc

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool AddMapNpc::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMapNpc::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMapNpc::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMapNpc::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command AddMapNpc::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapNpc.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddMapNpc::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapNpc.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPNPC];
inline bool AddMapNpc::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMapNpc::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMapNpc::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMapNpc::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::MapParam AddMapNpc::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapNpc.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void AddMapNpc::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapNpc.param)
}

// repeated .Cmd.MapNpc npcs = 3;
inline int AddMapNpc::npcs_size() const {
  return npcs_.size();
}
inline void AddMapNpc::clear_npcs() {
  npcs_.Clear();
}
inline const ::Cmd::MapNpc& AddMapNpc::npcs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapNpc.npcs)
  return npcs_.Get(index);
}
inline ::Cmd::MapNpc* AddMapNpc::mutable_npcs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AddMapNpc.npcs)
  return npcs_.Mutable(index);
}
inline ::Cmd::MapNpc* AddMapNpc::add_npcs() {
  // @@protoc_insertion_point(field_add:Cmd.AddMapNpc.npcs)
  return npcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapNpc >&
AddMapNpc::npcs() const {
  // @@protoc_insertion_point(field_list:Cmd.AddMapNpc.npcs)
  return npcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapNpc >*
AddMapNpc::mutable_npcs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AddMapNpc.npcs)
  return &npcs_;
}

// -------------------------------------------------------------------

// MapTrap

// optional uint64 id = 1;
inline bool MapTrap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapTrap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapTrap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapTrap::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MapTrap::id() const {
  // @@protoc_insertion_point(field_get:Cmd.MapTrap.id)
  return id_;
}
inline void MapTrap::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapTrap.id)
}

// optional uint32 skillID = 2;
inline bool MapTrap::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapTrap::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapTrap::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapTrap::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 MapTrap::skillid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapTrap.skillID)
  return skillid_;
}
inline void MapTrap::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapTrap.skillID)
}

// optional .Cmd.ScenePos pos = 3;
inline bool MapTrap::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapTrap::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapTrap::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapTrap::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& MapTrap::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.MapTrap.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* MapTrap::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.MapTrap.pos)
  return pos_;
}
inline ::Cmd::ScenePos* MapTrap::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MapTrap::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapTrap.pos)
}

// optional uint32 dir = 4;
inline bool MapTrap::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapTrap::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapTrap::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapTrap::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 MapTrap::dir() const {
  // @@protoc_insertion_point(field_get:Cmd.MapTrap.dir)
  return dir_;
}
inline void MapTrap::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapTrap.dir)
}

// optional uint64 masterid = 5;
inline bool MapTrap::has_masterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapTrap::set_has_masterid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapTrap::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapTrap::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 MapTrap::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapTrap.masterid)
  return masterid_;
}
inline void MapTrap::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapTrap.masterid)
}

// -------------------------------------------------------------------

// AddMapTrap

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool AddMapTrap::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMapTrap::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMapTrap::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMapTrap::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command AddMapTrap::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapTrap.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddMapTrap::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapTrap.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPTRAP];
inline bool AddMapTrap::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMapTrap::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMapTrap::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMapTrap::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::MapParam AddMapTrap::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapTrap.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void AddMapTrap::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapTrap.param)
}

// repeated .Cmd.MapTrap traps = 3;
inline int AddMapTrap::traps_size() const {
  return traps_.size();
}
inline void AddMapTrap::clear_traps() {
  traps_.Clear();
}
inline const ::Cmd::MapTrap& AddMapTrap::traps(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapTrap.traps)
  return traps_.Get(index);
}
inline ::Cmd::MapTrap* AddMapTrap::mutable_traps(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AddMapTrap.traps)
  return traps_.Mutable(index);
}
inline ::Cmd::MapTrap* AddMapTrap::add_traps() {
  // @@protoc_insertion_point(field_add:Cmd.AddMapTrap.traps)
  return traps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapTrap >&
AddMapTrap::traps() const {
  // @@protoc_insertion_point(field_list:Cmd.AddMapTrap.traps)
  return traps_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapTrap >*
AddMapTrap::mutable_traps() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AddMapTrap.traps)
  return &traps_;
}

// -------------------------------------------------------------------

// MapAct

// optional uint64 id = 1 [default = 0];
inline bool MapAct::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapAct::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapAct::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapAct::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MapAct::id() const {
  // @@protoc_insertion_point(field_get:Cmd.MapAct.id)
  return id_;
}
inline void MapAct::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapAct.id)
}

// optional uint32 range = 2 [default = 0];
inline bool MapAct::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapAct::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapAct::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapAct::clear_range() {
  range_ = 0u;
  clear_has_range();
}
inline ::google::protobuf::uint32 MapAct::range() const {
  // @@protoc_insertion_point(field_get:Cmd.MapAct.range)
  return range_;
}
inline void MapAct::set_range(::google::protobuf::uint32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapAct.range)
}

// optional uint64 masterid = 3 [default = 0];
inline bool MapAct::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapAct::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapAct::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapAct::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 MapAct::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.MapAct.masterid)
  return masterid_;
}
inline void MapAct::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapAct.masterid)
}

// optional .Cmd.EActType type = 4 [default = EACTTYPE_MIN];
inline bool MapAct::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapAct::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapAct::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapAct::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EActType MapAct::type() const {
  // @@protoc_insertion_point(field_get:Cmd.MapAct.type)
  return static_cast< ::Cmd::EActType >(type_);
}
inline void MapAct::set_type(::Cmd::EActType value) {
  assert(::Cmd::EActType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapAct.type)
}

// optional uint32 actvalue = 5 [default = 0];
inline bool MapAct::has_actvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapAct::set_has_actvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapAct::clear_has_actvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapAct::clear_actvalue() {
  actvalue_ = 0u;
  clear_has_actvalue();
}
inline ::google::protobuf::uint32 MapAct::actvalue() const {
  // @@protoc_insertion_point(field_get:Cmd.MapAct.actvalue)
  return actvalue_;
}
inline void MapAct::set_actvalue(::google::protobuf::uint32 value) {
  set_has_actvalue();
  actvalue_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapAct.actvalue)
}

// optional .Cmd.ScenePos pos = 6;
inline bool MapAct::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapAct::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapAct::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapAct::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& MapAct::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.MapAct.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* MapAct::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.MapAct.pos)
  return pos_;
}
inline ::Cmd::ScenePos* MapAct::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MapAct::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MapAct.pos)
}

// -------------------------------------------------------------------

// AddMapAct

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool AddMapAct::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMapAct::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMapAct::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMapAct::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command AddMapAct::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapAct.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddMapAct::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapAct.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_ADDMAPACT];
inline bool AddMapAct::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMapAct::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMapAct::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMapAct::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::MapParam AddMapAct::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapAct.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void AddMapAct::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMapAct.param)
}

// repeated .Cmd.MapAct acts = 3;
inline int AddMapAct::acts_size() const {
  return acts_.size();
}
inline void AddMapAct::clear_acts() {
  acts_.Clear();
}
inline const ::Cmd::MapAct& AddMapAct::acts(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AddMapAct.acts)
  return acts_.Get(index);
}
inline ::Cmd::MapAct* AddMapAct::mutable_acts(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AddMapAct.acts)
  return acts_.Mutable(index);
}
inline ::Cmd::MapAct* AddMapAct::add_acts() {
  // @@protoc_insertion_point(field_add:Cmd.AddMapAct.acts)
  return acts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MapAct >&
AddMapAct::acts() const {
  // @@protoc_insertion_point(field_list:Cmd.AddMapAct.acts)
  return acts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MapAct >*
AddMapAct::mutable_acts() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AddMapAct.acts)
  return &acts_;
}

// -------------------------------------------------------------------

// ExitPointState

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool ExitPointState::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitPointState::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitPointState::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitPointState::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command ExitPointState::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPointState.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExitPointState::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPointState.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_EXIT_POINT_STATE];
inline bool ExitPointState::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitPointState::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitPointState::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitPointState::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::MapParam ExitPointState::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPointState.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void ExitPointState::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPointState.param)
}

// optional uint32 exitid = 3;
inline bool ExitPointState::has_exitid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitPointState::set_has_exitid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitPointState::clear_has_exitid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitPointState::clear_exitid() {
  exitid_ = 0u;
  clear_has_exitid();
}
inline ::google::protobuf::uint32 ExitPointState::exitid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPointState.exitid)
  return exitid_;
}
inline void ExitPointState::set_exitid(::google::protobuf::uint32 value) {
  set_has_exitid();
  exitid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPointState.exitid)
}

// optional uint32 visible = 4;
inline bool ExitPointState::has_visible() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExitPointState::set_has_visible() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExitPointState::clear_has_visible() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExitPointState::clear_visible() {
  visible_ = 0u;
  clear_has_visible();
}
inline ::google::protobuf::uint32 ExitPointState::visible() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPointState.visible)
  return visible_;
}
inline void ExitPointState::set_visible(::google::protobuf::uint32 value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPointState.visible)
}

// -------------------------------------------------------------------

// MapCmdEnd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool MapCmdEnd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapCmdEnd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapCmdEnd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapCmdEnd::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command MapCmdEnd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MapCmdEnd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MapCmdEnd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapCmdEnd.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_MAP_CMD_END];
inline bool MapCmdEnd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapCmdEnd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapCmdEnd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapCmdEnd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::MapParam MapCmdEnd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MapCmdEnd.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void MapCmdEnd::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MapCmdEnd.param)
}

// -------------------------------------------------------------------

// NpcSearchRangeCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool NpcSearchRangeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NpcSearchRangeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NpcSearchRangeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NpcSearchRangeCmd::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command NpcSearchRangeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcSearchRangeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NpcSearchRangeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcSearchRangeCmd.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_NPC_SEARCH_RANGE];
inline bool NpcSearchRangeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NpcSearchRangeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NpcSearchRangeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NpcSearchRangeCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::MapParam NpcSearchRangeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcSearchRangeCmd.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void NpcSearchRangeCmd::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcSearchRangeCmd.param)
}

// optional uint64 id = 3 [default = 0];
inline bool NpcSearchRangeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NpcSearchRangeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NpcSearchRangeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NpcSearchRangeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 NpcSearchRangeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcSearchRangeCmd.id)
  return id_;
}
inline void NpcSearchRangeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcSearchRangeCmd.id)
}

// optional uint32 range = 4 [default = 0];
inline bool NpcSearchRangeCmd::has_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NpcSearchRangeCmd::set_has_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NpcSearchRangeCmd::clear_has_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NpcSearchRangeCmd::clear_range() {
  range_ = 0u;
  clear_has_range();
}
inline ::google::protobuf::uint32 NpcSearchRangeCmd::range() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcSearchRangeCmd.range)
  return range_;
}
inline void NpcSearchRangeCmd::set_range(::google::protobuf::uint32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcSearchRangeCmd.range)
}

// -------------------------------------------------------------------

// UserHandsCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool UserHandsCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserHandsCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserHandsCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserHandsCmd::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command UserHandsCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandsCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserHandsCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandsCmd.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HANDS];
inline bool UserHandsCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserHandsCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserHandsCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserHandsCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::MapParam UserHandsCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandsCmd.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void UserHandsCmd::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandsCmd.param)
}

// optional uint64 player1 = 3 [default = 0];
inline bool UserHandsCmd::has_player1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserHandsCmd::set_has_player1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserHandsCmd::clear_has_player1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserHandsCmd::clear_player1() {
  player1_ = GOOGLE_ULONGLONG(0);
  clear_has_player1();
}
inline ::google::protobuf::uint64 UserHandsCmd::player1() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandsCmd.player1)
  return player1_;
}
inline void UserHandsCmd::set_player1(::google::protobuf::uint64 value) {
  set_has_player1();
  player1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandsCmd.player1)
}

// optional uint64 player2 = 4 [default = 0];
inline bool UserHandsCmd::has_player2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserHandsCmd::set_has_player2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserHandsCmd::clear_has_player2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserHandsCmd::clear_player2() {
  player2_ = GOOGLE_ULONGLONG(0);
  clear_has_player2();
}
inline ::google::protobuf::uint64 UserHandsCmd::player2() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandsCmd.player2)
  return player2_;
}
inline void UserHandsCmd::set_player2(::google::protobuf::uint64 value) {
  set_has_player2();
  player2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandsCmd.player2)
}

// optional uint32 isadd = 5 [default = 1];
inline bool UserHandsCmd::has_isadd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserHandsCmd::set_has_isadd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserHandsCmd::clear_has_isadd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserHandsCmd::clear_isadd() {
  isadd_ = 1u;
  clear_has_isadd();
}
inline ::google::protobuf::uint32 UserHandsCmd::isadd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandsCmd.isadd)
  return isadd_;
}
inline void UserHandsCmd::set_isadd(::google::protobuf::uint32 value) {
  set_has_isadd();
  isadd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandsCmd.isadd)
}

// -------------------------------------------------------------------

// SpEffectCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool SpEffectCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpEffectCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpEffectCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpEffectCmd::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command SpEffectCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SpEffectCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpEffectCmd.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_SPEFFECT];
inline bool SpEffectCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpEffectCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpEffectCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpEffectCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::MapParam SpEffectCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectCmd.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void SpEffectCmd::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpEffectCmd.param)
}

// optional uint64 senderid = 3;
inline bool SpEffectCmd::has_senderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpEffectCmd::set_has_senderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpEffectCmd::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpEffectCmd::clear_senderid() {
  senderid_ = GOOGLE_ULONGLONG(0);
  clear_has_senderid();
}
inline ::google::protobuf::uint64 SpEffectCmd::senderid() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectCmd.senderid)
  return senderid_;
}
inline void SpEffectCmd::set_senderid(::google::protobuf::uint64 value) {
  set_has_senderid();
  senderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpEffectCmd.senderid)
}

// optional .Cmd.SpEffectData data = 4;
inline bool SpEffectCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpEffectCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpEffectCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpEffectCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::SpEffectData::Clear();
  clear_has_data();
}
inline const ::Cmd::SpEffectData& SpEffectCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::SpEffectData* SpEffectCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::SpEffectData;
  // @@protoc_insertion_point(field_mutable:Cmd.SpEffectCmd.data)
  return data_;
}
inline ::Cmd::SpEffectData* SpEffectCmd::release_data() {
  clear_has_data();
  ::Cmd::SpEffectData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void SpEffectCmd::set_allocated_data(::Cmd::SpEffectData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SpEffectCmd.data)
}

// optional bool isadd = 5 [default = true];
inline bool SpEffectCmd::has_isadd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpEffectCmd::set_has_isadd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpEffectCmd::clear_has_isadd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpEffectCmd::clear_isadd() {
  isadd_ = true;
  clear_has_isadd();
}
inline bool SpEffectCmd::isadd() const {
  // @@protoc_insertion_point(field_get:Cmd.SpEffectCmd.isadd)
  return isadd_;
}
inline void SpEffectCmd::set_isadd(bool value) {
  set_has_isadd();
  isadd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpEffectCmd.isadd)
}

// -------------------------------------------------------------------

// UserHandNpcCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool UserHandNpcCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserHandNpcCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserHandNpcCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserHandNpcCmd::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command UserHandNpcCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandNpcCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserHandNpcCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandNpcCmd.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_USER_HAND_NPC];
inline bool UserHandNpcCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserHandNpcCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserHandNpcCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserHandNpcCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::MapParam UserHandNpcCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandNpcCmd.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void UserHandNpcCmd::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandNpcCmd.param)
}

// optional .Cmd.HandNpcData data = 3;
inline bool UserHandNpcCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserHandNpcCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserHandNpcCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserHandNpcCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::HandNpcData::Clear();
  clear_has_data();
}
inline const ::Cmd::HandNpcData& UserHandNpcCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandNpcCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::HandNpcData* UserHandNpcCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::HandNpcData;
  // @@protoc_insertion_point(field_mutable:Cmd.UserHandNpcCmd.data)
  return data_;
}
inline ::Cmd::HandNpcData* UserHandNpcCmd::release_data() {
  clear_has_data();
  ::Cmd::HandNpcData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void UserHandNpcCmd::set_allocated_data(::Cmd::HandNpcData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserHandNpcCmd.data)
}

// optional bool ishand = 4 [default = true];
inline bool UserHandNpcCmd::has_ishand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserHandNpcCmd::set_has_ishand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserHandNpcCmd::clear_has_ishand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserHandNpcCmd::clear_ishand() {
  ishand_ = true;
  clear_has_ishand();
}
inline bool UserHandNpcCmd::ishand() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandNpcCmd.ishand)
  return ishand_;
}
inline void UserHandNpcCmd::set_ishand(bool value) {
  set_has_ishand();
  ishand_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandNpcCmd.ishand)
}

// optional uint64 userid = 5 [default = 0];
inline bool UserHandNpcCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserHandNpcCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserHandNpcCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserHandNpcCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 UserHandNpcCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserHandNpcCmd.userid)
  return userid_;
}
inline void UserHandNpcCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserHandNpcCmd.userid)
}

// -------------------------------------------------------------------

// GingerBreadNpcCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool GingerBreadNpcCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GingerBreadNpcCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GingerBreadNpcCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GingerBreadNpcCmd::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command GingerBreadNpcCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GingerBreadNpcCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcCmd.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_GINGERBREAD_NPC];
inline bool GingerBreadNpcCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GingerBreadNpcCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GingerBreadNpcCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GingerBreadNpcCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::MapParam GingerBreadNpcCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcCmd.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void GingerBreadNpcCmd::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcCmd.param)
}

// optional .Cmd.GingerBreadNpcData data = 3;
inline bool GingerBreadNpcCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GingerBreadNpcCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GingerBreadNpcCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GingerBreadNpcCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::GingerBreadNpcData::Clear();
  clear_has_data();
}
inline const ::Cmd::GingerBreadNpcData& GingerBreadNpcCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::GingerBreadNpcData* GingerBreadNpcCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::GingerBreadNpcData;
  // @@protoc_insertion_point(field_mutable:Cmd.GingerBreadNpcCmd.data)
  return data_;
}
inline ::Cmd::GingerBreadNpcData* GingerBreadNpcCmd::release_data() {
  clear_has_data();
  ::Cmd::GingerBreadNpcData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GingerBreadNpcCmd::set_allocated_data(::Cmd::GingerBreadNpcData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GingerBreadNpcCmd.data)
}

// optional bool isadd = 4 [default = true];
inline bool GingerBreadNpcCmd::has_isadd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GingerBreadNpcCmd::set_has_isadd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GingerBreadNpcCmd::clear_has_isadd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GingerBreadNpcCmd::clear_isadd() {
  isadd_ = true;
  clear_has_isadd();
}
inline bool GingerBreadNpcCmd::isadd() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcCmd.isadd)
  return isadd_;
}
inline void GingerBreadNpcCmd::set_isadd(bool value) {
  set_has_isadd();
  isadd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcCmd.isadd)
}

// optional uint64 userid = 5 [default = 0];
inline bool GingerBreadNpcCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GingerBreadNpcCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GingerBreadNpcCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GingerBreadNpcCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 GingerBreadNpcCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcCmd.userid)
  return userid_;
}
inline void GingerBreadNpcCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GingerBreadNpcCmd.userid)
}

// optional .Cmd.ScenePos bornpos = 6;
inline bool GingerBreadNpcCmd::has_bornpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GingerBreadNpcCmd::set_has_bornpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GingerBreadNpcCmd::clear_has_bornpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GingerBreadNpcCmd::clear_bornpos() {
  if (bornpos_ != NULL) bornpos_->::Cmd::ScenePos::Clear();
  clear_has_bornpos();
}
inline const ::Cmd::ScenePos& GingerBreadNpcCmd::bornpos() const {
  // @@protoc_insertion_point(field_get:Cmd.GingerBreadNpcCmd.bornpos)
  return bornpos_ != NULL ? *bornpos_ : *default_instance_->bornpos_;
}
inline ::Cmd::ScenePos* GingerBreadNpcCmd::mutable_bornpos() {
  set_has_bornpos();
  if (bornpos_ == NULL) bornpos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.GingerBreadNpcCmd.bornpos)
  return bornpos_;
}
inline ::Cmd::ScenePos* GingerBreadNpcCmd::release_bornpos() {
  clear_has_bornpos();
  ::Cmd::ScenePos* temp = bornpos_;
  bornpos_ = NULL;
  return temp;
}
inline void GingerBreadNpcCmd::set_allocated_bornpos(::Cmd::ScenePos* bornpos) {
  delete bornpos_;
  bornpos_ = bornpos;
  if (bornpos) {
    set_has_bornpos();
  } else {
    clear_has_bornpos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GingerBreadNpcCmd.bornpos)
}

// -------------------------------------------------------------------

// GoCityGateMapCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_MAP_PROTOCMD];
inline bool GoCityGateMapCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoCityGateMapCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoCityGateMapCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoCityGateMapCmd::clear_cmd() {
  cmd_ = 12;
  clear_has_cmd();
}
inline ::Cmd::Command GoCityGateMapCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoCityGateMapCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoCityGateMapCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoCityGateMapCmd.cmd)
}

// optional .Cmd.MapParam param = 2 [default = MAPPARAM_GO_CITYGATE];
inline bool GoCityGateMapCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoCityGateMapCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoCityGateMapCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoCityGateMapCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::MapParam GoCityGateMapCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoCityGateMapCmd.param)
  return static_cast< ::Cmd::MapParam >(param_);
}
inline void GoCityGateMapCmd::set_param(::Cmd::MapParam value) {
  assert(::Cmd::MapParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoCityGateMapCmd.param)
}

// optional uint32 flag = 3 [default = 0];
inline bool GoCityGateMapCmd::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoCityGateMapCmd::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoCityGateMapCmd::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoCityGateMapCmd::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 GoCityGateMapCmd::flag() const {
  // @@protoc_insertion_point(field_get:Cmd.GoCityGateMapCmd.flag)
  return flag_;
}
inline void GoCityGateMapCmd::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoCityGateMapCmd.flag)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::MapParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::MapParam>() {
  return ::Cmd::MapParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGiveType>() {
  return ::Cmd::EGiveType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EActType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EActType>() {
  return ::Cmd::EActType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneMap_2eproto__INCLUDED
