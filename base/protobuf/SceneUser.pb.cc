// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* UserAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAttrSvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAttrSvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSyncCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSyncCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMessageCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMessageCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGMCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGMCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserProfessionExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserProfessionExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserFaceCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserFaceCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainUserDataUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainUserDataUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMoveUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMoveUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetMoveUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetMoveUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynTimeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynTimeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteEntryUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteEntryUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeBodyUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeBodyUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSceneUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSceneUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunNpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuntionNpcListUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuntionNpcListUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteStaticEntryUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteStaticEntryUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareDamTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareDamTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitedTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitedTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillBroadcastUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBroadcastUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestUint64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestUint64_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestSkillBroadcastUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestSkillBroadcastUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChantSkillUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChantSkillUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BreakChantSkillUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BreakChantSkillUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastSkillUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastSkillUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapObjectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapObjectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReliveUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReliveUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectionPosUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectionPosUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToExitPosUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToExitPosUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToRandomPosUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToRandomPosUserCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserSyncType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DamageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneUser_2eproto() {
  protobuf_AddDesc_SceneUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneUser.proto");
  GOOGLE_CHECK(file != NULL);
  UserAttr_descriptor_ = file->message_type(0);
  static const int UserAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttr, value_),
  };
  UserAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAttr_descriptor_,
      UserAttr::default_instance_,
      UserAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAttr));
  UserAttrSvr_descriptor_ = file->message_type(1);
  static const int UserAttrSvr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttrSvr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttrSvr, value_),
  };
  UserAttrSvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAttrSvr_descriptor_,
      UserAttrSvr::default_instance_,
      UserAttrSvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttrSvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAttrSvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAttrSvr));
  UserData_descriptor_ = file->message_type(2);
  static const int UserData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, data_),
  };
  UserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserData_descriptor_,
      UserData::default_instance_,
      UserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserData));
  UserSyncCmd_descriptor_ = file->message_type(3);
  static const int UserSyncCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, pointattrs_),
  };
  UserSyncCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSyncCmd_descriptor_,
      UserSyncCmd::default_instance_,
      UserSyncCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSyncCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSyncCmd));
  UserMessageCmd_descriptor_ = file->message_type(4);
  static const int UserMessageCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessageCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessageCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessageCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessageCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessageCmd, addstr_),
  };
  UserMessageCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMessageCmd_descriptor_,
      UserMessageCmd::default_instance_,
      UserMessageCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessageCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessageCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMessageCmd));
  UserGMCommand_descriptor_ = file->message_type(5);
  static const int UserGMCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGMCommand, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGMCommand, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGMCommand, command_),
  };
  UserGMCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGMCommand_descriptor_,
      UserGMCommand::default_instance_,
      UserGMCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGMCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGMCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGMCommand));
  UserProfessionExchange_descriptor_ = file->message_type(6);
  static const int UserProfessionExchange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionExchange, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionExchange, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionExchange, profession_),
  };
  UserProfessionExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserProfessionExchange_descriptor_,
      UserProfessionExchange::default_instance_,
      UserProfessionExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserProfessionExchange));
  UserTest_descriptor_ = file->message_type(7);
  static const int UserTest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTest, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTest, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTest, attrs_),
  };
  UserTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTest_descriptor_,
      UserTest::default_instance_,
      UserTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTest));
  UserFaceCmd_descriptor_ = file->message_type(8);
  static const int UserFaceCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFaceCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFaceCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFaceCmd, id_),
  };
  UserFaceCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserFaceCmd_descriptor_,
      UserFaceCmd::default_instance_,
      UserFaceCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFaceCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFaceCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserFaceCmd));
  MainUserData_descriptor_ = file->message_type(9);
  static const int MainUserData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, male_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, righthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, accessory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, wing_),
  };
  MainUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainUserData_descriptor_,
      MainUserData::default_instance_,
      MainUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainUserData));
  MainUserDataUserCmd_descriptor_ = file->message_type(10);
  static const int MainUserDataUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserDataUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserDataUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserDataUserCmd, data_),
  };
  MainUserDataUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainUserDataUserCmd_descriptor_,
      MainUserDataUserCmd::default_instance_,
      MainUserDataUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserDataUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainUserDataUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainUserDataUserCmd));
  ReqMoveUserCmd_descriptor_ = file->message_type(11);
  static const int ReqMoveUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMoveUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMoveUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMoveUserCmd, target_),
  };
  ReqMoveUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMoveUserCmd_descriptor_,
      ReqMoveUserCmd::default_instance_,
      ReqMoveUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMoveUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMoveUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMoveUserCmd));
  RetMoveUserCmd_descriptor_ = file->message_type(12);
  static const int RetMoveUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMoveUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMoveUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMoveUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMoveUserCmd, pos_),
  };
  RetMoveUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetMoveUserCmd_descriptor_,
      RetMoveUserCmd::default_instance_,
      RetMoveUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMoveUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMoveUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetMoveUserCmd));
  SynTimeUserCmd_descriptor_ = file->message_type(13);
  static const int SynTimeUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynTimeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynTimeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynTimeUserCmd, servertime_),
  };
  SynTimeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynTimeUserCmd_descriptor_,
      SynTimeUserCmd::default_instance_,
      SynTimeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynTimeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynTimeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynTimeUserCmd));
  DeleteEntryUserCmd_descriptor_ = file->message_type(14);
  static const int DeleteEntryUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteEntryUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteEntryUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteEntryUserCmd, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteEntryUserCmd, fadeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteEntryUserCmd, delay_del_),
  };
  DeleteEntryUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteEntryUserCmd_descriptor_,
      DeleteEntryUserCmd::default_instance_,
      DeleteEntryUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteEntryUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteEntryUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteEntryUserCmd));
  ChangeBodyUserCmd_descriptor_ = file->message_type(15);
  static const int ChangeBodyUserCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, male_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, righthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, accessory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, wing_),
  };
  ChangeBodyUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeBodyUserCmd_descriptor_,
      ChangeBodyUserCmd::default_instance_,
      ChangeBodyUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBodyUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeBodyUserCmd));
  ChangeSceneUserCmd_descriptor_ = file->message_type(16);
  static const int ChangeSceneUserCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, dmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, preview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, invisiblexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, imageid_),
  };
  ChangeSceneUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSceneUserCmd_descriptor_,
      ChangeSceneUserCmd::default_instance_,
      ChangeSceneUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSceneUserCmd));
  FunNpcData_descriptor_ = file->message_type(17);
  static const int FunNpcData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunNpcData, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunNpcData, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunNpcData, pos_),
  };
  FunNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunNpcData_descriptor_,
      FunNpcData::default_instance_,
      FunNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunNpcData));
  FuntionNpcListUserCmd_descriptor_ = file->message_type(18);
  static const int FuntionNpcListUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuntionNpcListUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuntionNpcListUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuntionNpcListUserCmd, list_),
  };
  FuntionNpcListUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuntionNpcListUserCmd_descriptor_,
      FuntionNpcListUserCmd::default_instance_,
      FuntionNpcListUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuntionNpcListUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuntionNpcListUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuntionNpcListUserCmd));
  GUID_descriptor_ = file->message_type(19);
  static const int GUID_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, index_),
  };
  GUID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GUID_descriptor_,
      GUID::default_instance_,
      GUID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GUID));
  DeleteStaticEntryUserCmd_descriptor_ = file->message_type(20);
  static const int DeleteStaticEntryUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteStaticEntryUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteStaticEntryUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteStaticEntryUserCmd, list_),
  };
  DeleteStaticEntryUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteStaticEntryUserCmd_descriptor_,
      DeleteStaticEntryUserCmd::default_instance_,
      DeleteStaticEntryUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteStaticEntryUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteStaticEntryUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteStaticEntryUserCmd));
  ShareDamTarget_descriptor_ = file->message_type(21);
  static const int ShareDamTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamTarget, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamTarget, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamTarget, type_),
  };
  ShareDamTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareDamTarget_descriptor_,
      ShareDamTarget::default_instance_,
      ShareDamTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareDamTarget));
  HitedTarget_descriptor_ = file->message_type(22);
  static const int HitedTarget_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitedTarget, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitedTarget, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitedTarget, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitedTarget, sharetargets_),
  };
  HitedTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HitedTarget_descriptor_,
      HitedTarget::default_instance_,
      HitedTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitedTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitedTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HitedTarget));
  PhaseData_descriptor_ = file->message_type(23);
  static const int PhaseData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseData, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseData, hitedtargets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseData, dir_),
  };
  PhaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhaseData_descriptor_,
      PhaseData::default_instance_,
      PhaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhaseData));
  SkillBroadcastUserCmd_descriptor_ = file->message_type(24);
  static const int SkillBroadcastUserCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, chanttime_),
  };
  SkillBroadcastUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBroadcastUserCmd_descriptor_,
      SkillBroadcastUserCmd::default_instance_,
      SkillBroadcastUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBroadcastUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBroadcastUserCmd));
  TestUint64_descriptor_ = file->message_type(25);
  static const int TestUint64_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestUint64, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestUint64, j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestUint64, k_),
  };
  TestUint64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestUint64_descriptor_,
      TestUint64::default_instance_,
      TestUint64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestUint64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestUint64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestUint64));
  TestSkillBroadcastUserCmd_descriptor_ = file->message_type(26);
  static const int TestSkillBroadcastUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSkillBroadcastUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSkillBroadcastUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSkillBroadcastUserCmd, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSkillBroadcastUserCmd, list_),
  };
  TestSkillBroadcastUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestSkillBroadcastUserCmd_descriptor_,
      TestSkillBroadcastUserCmd::default_instance_,
      TestSkillBroadcastUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSkillBroadcastUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSkillBroadcastUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestSkillBroadcastUserCmd));
  UseSkillUserCmd_descriptor_ = file->message_type(27);
  static const int UseSkillUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillUserCmd, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillUserCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillUserCmd, pos_),
  };
  UseSkillUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillUserCmd_descriptor_,
      UseSkillUserCmd::default_instance_,
      UseSkillUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillUserCmd));
  ChantSkillUserCmd_descriptor_ = file->message_type(28);
  static const int ChantSkillUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, attid_),
  };
  ChantSkillUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChantSkillUserCmd_descriptor_,
      ChantSkillUserCmd::default_instance_,
      ChantSkillUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChantSkillUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChantSkillUserCmd));
  BreakChantSkillUserCmd_descriptor_ = file->message_type(29);
  static const int BreakChantSkillUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakChantSkillUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakChantSkillUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakChantSkillUserCmd, attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakChantSkillUserCmd, skillid_),
  };
  BreakChantSkillUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BreakChantSkillUserCmd_descriptor_,
      BreakChantSkillUserCmd::default_instance_,
      BreakChantSkillUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakChantSkillUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakChantSkillUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BreakChantSkillUserCmd));
  BroadcastSkillUserCmd_descriptor_ = file->message_type(30);
  static const int BroadcastSkillUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, tid_),
  };
  BroadcastSkillUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastSkillUserCmd_descriptor_,
      BroadcastSkillUserCmd::default_instance_,
      BroadcastSkillUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastSkillUserCmd));
  MapObjectData_descriptor_ = file->message_type(31);
  static const int MapObjectData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObjectData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObjectData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObjectData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObjectData, attrs_),
  };
  MapObjectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapObjectData_descriptor_,
      MapObjectData::default_instance_,
      MapObjectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObjectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapObjectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapObjectData));
  ReliveUserCmd_descriptor_ = file->message_type(32);
  static const int ReliveUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliveUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliveUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliveUserCmd, type_),
  };
  ReliveUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReliveUserCmd_descriptor_,
      ReliveUserCmd::default_instance_,
      ReliveUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliveUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliveUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReliveUserCmd));
  GoToUserCmd_descriptor_ = file->message_type(33);
  static const int GoToUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserCmd, isgomap_),
  };
  GoToUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToUserCmd_descriptor_,
      GoToUserCmd::default_instance_,
      GoToUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToUserCmd));
  ReconnectionPosUserCmd_descriptor_ = file->message_type(34);
  static const int ReconnectionPosUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectionPosUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectionPosUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectionPosUserCmd, pos_),
  };
  ReconnectionPosUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectionPosUserCmd_descriptor_,
      ReconnectionPosUserCmd::default_instance_,
      ReconnectionPosUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectionPosUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectionPosUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectionPosUserCmd));
  GoToExitPosUserCmd_descriptor_ = file->message_type(35);
  static const int GoToExitPosUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToExitPosUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToExitPosUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToExitPosUserCmd, mapid_),
  };
  GoToExitPosUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToExitPosUserCmd_descriptor_,
      GoToExitPosUserCmd::default_instance_,
      GoToExitPosUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToExitPosUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToExitPosUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToExitPosUserCmd));
  GoToRandomPosUserCmd_descriptor_ = file->message_type(36);
  static const int GoToRandomPosUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToRandomPosUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToRandomPosUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToRandomPosUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToRandomPosUserCmd, pos_),
  };
  GoToRandomPosUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToRandomPosUserCmd_descriptor_,
      GoToRandomPosUserCmd::default_instance_,
      GoToRandomPosUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToRandomPosUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToRandomPosUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToRandomPosUserCmd));
  CmdParam_descriptor_ = file->enum_type(0);
  EUserSyncType_descriptor_ = file->enum_type(1);
  MessageType_descriptor_ = file->enum_type(2);
  DamageType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAttr_descriptor_, &UserAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAttrSvr_descriptor_, &UserAttrSvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserData_descriptor_, &UserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSyncCmd_descriptor_, &UserSyncCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMessageCmd_descriptor_, &UserMessageCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGMCommand_descriptor_, &UserGMCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserProfessionExchange_descriptor_, &UserProfessionExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTest_descriptor_, &UserTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserFaceCmd_descriptor_, &UserFaceCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainUserData_descriptor_, &MainUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainUserDataUserCmd_descriptor_, &MainUserDataUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMoveUserCmd_descriptor_, &ReqMoveUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetMoveUserCmd_descriptor_, &RetMoveUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynTimeUserCmd_descriptor_, &SynTimeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteEntryUserCmd_descriptor_, &DeleteEntryUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeBodyUserCmd_descriptor_, &ChangeBodyUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSceneUserCmd_descriptor_, &ChangeSceneUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunNpcData_descriptor_, &FunNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuntionNpcListUserCmd_descriptor_, &FuntionNpcListUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GUID_descriptor_, &GUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteStaticEntryUserCmd_descriptor_, &DeleteStaticEntryUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareDamTarget_descriptor_, &ShareDamTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HitedTarget_descriptor_, &HitedTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhaseData_descriptor_, &PhaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBroadcastUserCmd_descriptor_, &SkillBroadcastUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestUint64_descriptor_, &TestUint64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestSkillBroadcastUserCmd_descriptor_, &TestSkillBroadcastUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillUserCmd_descriptor_, &UseSkillUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChantSkillUserCmd_descriptor_, &ChantSkillUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BreakChantSkillUserCmd_descriptor_, &BreakChantSkillUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastSkillUserCmd_descriptor_, &BroadcastSkillUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapObjectData_descriptor_, &MapObjectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReliveUserCmd_descriptor_, &ReliveUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToUserCmd_descriptor_, &GoToUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectionPosUserCmd_descriptor_, &ReconnectionPosUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToExitPosUserCmd_descriptor_, &GoToExitPosUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToRandomPosUserCmd_descriptor_, &GoToRandomPosUserCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneUser_2eproto() {
  delete UserAttr::default_instance_;
  delete UserAttr_reflection_;
  delete UserAttrSvr::default_instance_;
  delete UserAttrSvr_reflection_;
  delete UserData::default_instance_;
  delete UserData_reflection_;
  delete UserSyncCmd::default_instance_;
  delete UserSyncCmd_reflection_;
  delete UserMessageCmd::default_instance_;
  delete UserMessageCmd_reflection_;
  delete UserGMCommand::default_instance_;
  delete UserGMCommand_reflection_;
  delete UserProfessionExchange::default_instance_;
  delete UserProfessionExchange_reflection_;
  delete UserTest::default_instance_;
  delete UserTest_reflection_;
  delete UserFaceCmd::default_instance_;
  delete UserFaceCmd_reflection_;
  delete MainUserData::default_instance_;
  delete MainUserData_reflection_;
  delete MainUserDataUserCmd::default_instance_;
  delete MainUserDataUserCmd_reflection_;
  delete ReqMoveUserCmd::default_instance_;
  delete ReqMoveUserCmd_reflection_;
  delete RetMoveUserCmd::default_instance_;
  delete RetMoveUserCmd_reflection_;
  delete SynTimeUserCmd::default_instance_;
  delete SynTimeUserCmd_reflection_;
  delete DeleteEntryUserCmd::default_instance_;
  delete DeleteEntryUserCmd_reflection_;
  delete ChangeBodyUserCmd::default_instance_;
  delete ChangeBodyUserCmd_reflection_;
  delete ChangeSceneUserCmd::default_instance_;
  delete ChangeSceneUserCmd_reflection_;
  delete FunNpcData::default_instance_;
  delete FunNpcData_reflection_;
  delete FuntionNpcListUserCmd::default_instance_;
  delete FuntionNpcListUserCmd_reflection_;
  delete GUID::default_instance_;
  delete GUID_reflection_;
  delete DeleteStaticEntryUserCmd::default_instance_;
  delete DeleteStaticEntryUserCmd_reflection_;
  delete ShareDamTarget::default_instance_;
  delete ShareDamTarget_reflection_;
  delete HitedTarget::default_instance_;
  delete HitedTarget_reflection_;
  delete PhaseData::default_instance_;
  delete PhaseData_reflection_;
  delete SkillBroadcastUserCmd::default_instance_;
  delete SkillBroadcastUserCmd_reflection_;
  delete TestUint64::default_instance_;
  delete TestUint64_reflection_;
  delete TestSkillBroadcastUserCmd::default_instance_;
  delete TestSkillBroadcastUserCmd_reflection_;
  delete UseSkillUserCmd::default_instance_;
  delete UseSkillUserCmd_reflection_;
  delete ChantSkillUserCmd::default_instance_;
  delete ChantSkillUserCmd_reflection_;
  delete BreakChantSkillUserCmd::default_instance_;
  delete BreakChantSkillUserCmd_reflection_;
  delete BroadcastSkillUserCmd::default_instance_;
  delete BroadcastSkillUserCmd_reflection_;
  delete MapObjectData::default_instance_;
  delete MapObjectData_reflection_;
  delete ReliveUserCmd::default_instance_;
  delete ReliveUserCmd_reflection_;
  delete GoToUserCmd::default_instance_;
  delete GoToUserCmd_reflection_;
  delete ReconnectionPosUserCmd::default_instance_;
  delete ReconnectionPosUserCmd_reflection_;
  delete GoToExitPosUserCmd::default_instance_;
  delete GoToExitPosUserCmd_reflection_;
  delete GoToRandomPosUserCmd::default_instance_;
  delete GoToRandomPosUserCmd_reflection_;
}

void protobuf_AddDesc_SceneUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SceneUser.proto\022\003Cmd\032\nxCmd.proto\032\021Prot"
    "oCommon.proto\"I\n\010UserAttr\022+\n\004type\030\001 \002(\0162"
    "\016.Cmd.EAttrType:\rEATTRTYPE_MIN\022\020\n\005value\030"
    "\002 \002(\005:\0010\"L\n\013UserAttrSvr\022+\n\004type\030\001 \001(\0162\016."
    "Cmd.EAttrType:\rEATTRTYPE_MIN\022\020\n\005value\030\002 "
    "\001(\002:\0010\"_\n\010UserData\0223\n\004type\030\001 \002(\0162\022.Cmd.E"
    "UserDataType:\021EUSERDATATYPE_MIN\022\020\n\005value"
    "\030\002 \002(\004:\0010\022\014\n\004data\030\003 \001(\014\"\203\002\n\013UserSyncCmd\022"
    ".\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE_USER_P"
    "ROTOCMD\0220\n\005param\030\002 \001(\0162\r.Cmd.CmdParam:\022U"
    "SERPARAM_USERSYNC\0223\n\004type\030\003 \001(\0162\022.Cmd.EU"
    "serSyncType:\021EUSERSYNCTYPE_MIN\022\034\n\005attrs\030"
    "\004 \003(\0132\r.Cmd.UserAttr\022\034\n\005datas\030\005 \003(\0132\r.Cm"
    "d.UserData\022!\n\npointattrs\030\006 \003(\0132\r.Cmd.Use"
    "rAttr\"\244\001\n\016UserMessageCmd\022.\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\023SCENE_USER_PROTOCMD\022\022\n\005para"
    "m\030\002 \001(\r:\003200\022\r\n\002id\030\003 \001(\r:\0010\022/\n\004type\030\004 \001("
    "\0162\020.Cmd.MessageType:\017MESSAGETYPE_MIN\022\016\n\006"
    "addstr\030\005 \001(\t\"b\n\rUserGMCommand\022.\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\023SCENE_USER_PROTOCMD\022\020\n"
    "\005param\030\002 \001(\r:\0013\022\017\n\007command\030\003 \001(\t\"\221\001\n\026Use"
    "rProfessionExchange\022.\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\023SCENE_USER_PROTOCMD\022\020\n\005param\030\002 \001"
    "(\r:\0014\0225\n\nprofession\030\003 \001(\0162\020.Cmd.EProfess"
    "ion:\017EPROFESSION_MIN\"k\n\010UserTest\022.\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\023SCENE_USER_PROTOCMD"
    "\022\021\n\005param\030\002 \001(\r:\00210\022\034\n\005attrs\030\003 \003(\0132\r.Cmd"
    ".UserAttr\"`\n\013UserFaceCmd\022.\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\023SCENE_USER_PROTOCMD\022\022\n\005para"
    "m\030\002 \001(\r:\003200\022\r\n\002id\030\003 \001(\r:\0010\"\232\001\n\014MainUser"
    "Data\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\014\n\004male\030\003"
    " \001(\r\022\014\n\004body\030\004 \001(\r\022\014\n\004hair\030\005 \001(\r\022\021\n\trigh"
    "tHand\030\006 \001(\r\022\022\n\nprofession\030\007 \001(\r\022\021\n\tacces"
    "sory\030\010 \001(\r\022\014\n\004wing\030\t \001(\r\"\235\001\n\023MainUserDat"
    "aUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCE"
    "NE_USER_PROTOCMD\0225\n\005param\030\002 \001(\0162\r.Cmd.Cm"
    "dParam:\027MAIN_USER_DATA_USER_CMD\022\037\n\004data\030"
    "\003 \001(\0132\021.Cmd.MainUserData\"\220\001\n\016ReqMoveUser"
    "Cmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE_US"
    "ER_PROTOCMD\022/\n\005param\030\002 \001(\0162\r.Cmd.CmdPara"
    "m:\021REQ_MOVE_USER_CMD\022\035\n\006target\030\003 \001(\0132\r.C"
    "md.ScenePos\"\235\001\n\016RetMoveUserCmd\022.\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\023SCENE_USER_PROTOCMD\022/"
    "\n\005param\030\002 \001(\0162\r.Cmd.CmdParam:\021RET_MOVE_U"
    "SER_CMD\022\016\n\006charid\030\003 \001(\004\022\032\n\003pos\030\004 \001(\0132\r.C"
    "md.ScenePos\"\205\001\n\016SynTimeUserCmd\022.\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\023SCENE_USER_PROTOCMD\022/"
    "\n\005param\030\002 \001(\0162\r.Cmd.CmdParam:\021SYS_TIME_U"
    "SER_CMD\022\022\n\nserverTime\030\003 \001(\004\"\261\001\n\022DeleteEn"
    "tryUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023S"
    "CENE_USER_PROTOCMD\0223\n\005param\030\002 \001(\0162\r.Cmd."
    "CmdParam:\025DELETE_ENTRY_USER_CMD\022\014\n\004list\030"
    "\003 \003(\004\022\022\n\007fadeout\030\004 \001(\r:\0010\022\024\n\tdelay_del\030\005"
    " \001(\r:\0010\"\371\001\n\021ChangeBodyUserCmd\022.\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\023SCENE_USER_PROTOCMD\0222\n"
    "\005param\030\002 \001(\0162\r.Cmd.CmdParam:\024CHANGE_BODY"
    "_USER_CMD\022\016\n\006charid\030\003 \002(\004\022\014\n\004male\030\004 \001(\r\022"
    "\014\n\004body\030\005 \001(\r\022\014\n\004hair\030\006 \001(\r\022\021\n\trightHand"
    "\030\007 \001(\r\022\022\n\nprofession\030\010 \001(\r\022\021\n\taccessory\030"
    "\t \001(\r\022\014\n\004wing\030\n \001(\r\"\375\001\n\022ChangeSceneUserC"
    "md\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE_USE"
    "R_PROTOCMD\0223\n\005param\030\002 \001(\0162\r.Cmd.CmdParam"
    ":\025CHANGE_SCENE_USER_CMD\022\r\n\005mapID\030\003 \001(\r\022\017"
    "\n\007mapName\030\004 \001(\t\022\032\n\003pos\030\005 \001(\0132\r.Cmd.Scene"
    "Pos\022\016\n\006dmapID\030\006 \001(\r\022\017\n\007preview\030\007 \001(\r\022\024\n\014"
    "invisiblexit\030\010 \003(\r\022\017\n\007imageid\030\t \001(\r\"G\n\nF"
    "unNpcData\022\r\n\005npcid\030\001 \002(\r\022\016\n\006tempid\030\002 \002(\004"
    "\022\032\n\003pos\030\003 \002(\0132\r.Cmd.ScenePos\"\240\001\n\025Funtion"
    "NpcListUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\023SCENE_USER_PROTOCMD\0228\n\005param\030\002 \001(\0162\r."
    "Cmd.CmdParam:\032FUNCTION_NPC_LIST_USER_CMD"
    "\022\035\n\004list\030\003 \003(\0132\017.Cmd.FunNpcData\"B\n\004GUID\022"
    "\016\n\006zoneID\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\r\n\005mapID\030\003"
    " \002(\r\022\r\n\005index\030\004 \002(\r\"\237\001\n\030DeleteStaticEntr"
    "yUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCE"
    "NE_USER_PROTOCMD\022:\n\005param\030\002 \001(\0162\r.Cmd.Cm"
    "dParam:\034DELETE_STATIC_ENTRY_USER_CMD\022\027\n\004"
    "list\030\003 \003(\0132\t.Cmd.GUID\"G\n\016ShareDamTarget\022"
    "\021\n\006charid\030\001 \001(\004:\0010\022\021\n\006damage\030\002 \001(\005:\0010\022\017\n"
    "\004type\030\003 \001(\005:\0011\"o\n\013HitedTarget\022\021\n\006charid\030"
    "\001 \001(\004:\0010\022\021\n\006damage\030\002 \001(\005:\0010\022\017\n\004type\030\003 \001("
    "\005:\0011\022)\n\014shareTargets\030\004 \003(\0132\023.Cmd.ShareDa"
    "mTarget\"r\n\tPhaseData\022\021\n\006number\030\001 \001(\005:\0010\022"
    "\032\n\003pos\030\002 \001(\0132\r.Cmd.ScenePos\022&\n\014hitedTarg"
    "ets\030\003 \003(\0132\020.Cmd.HitedTarget\022\016\n\003dir\030\005 \001(\005"
    ":\0010\"\377\001\n\025SkillBroadcastUserCmd\022.\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\023SCENE_USER_PROTOCMD\0226\n"
    "\005param\030\002 \001(\0162\r.Cmd.CmdParam:\030SKILL_BROAD"
    "CAST_USER_CMD\022\021\n\006charid\030\003 \001(\004:\0010\022\022\n\007skil"
    "lID\030\004 \001(\r:\0010\022\020\n\005petid\030\005 \001(\005:\0010\022\034\n\004data\030\006"
    " \001(\0132\016.Cmd.PhaseData\022\021\n\006random\030\007 \001(\r:\0010\022"
    "\024\n\tchanttime\030\010 \001(\r:\0010\"-\n\nTestUint64\022\t\n\001i"
    "\030\001 \002(\005\022\t\n\001j\030\002 \001(\004\022\t\n\001k\030\003 \001(\005\"\262\001\n\031TestSki"
    "llBroadcastUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\023SCENE_USER_PROTOCMD\022;\n\005param\030\002 \001("
    "\0162\r.Cmd.CmdParam:\035TEST_SKILL_BROADCAST_U"
    "SER_CMD\022\t\n\001i\030\003 \002(\005\022\035\n\004list\030\004 \003(\0132\017.Cmd.T"
    "estUint64\"\255\001\n\017UseSkillUserCmd\022.\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\023SCENE_USER_PROTOCMD\0220\n"
    "\005param\030\002 \001(\0162\r.Cmd.CmdParam:\022USE_SKILL_U"
    "SER_CMD\022\013\n\003tid\030\003 \001(\004\022\017\n\007skillID\030\004 \001(\r\022\032\n"
    "\003pos\030\005 \001(\0132\r.Cmd.ScenePos\"\300\001\n\021ChantSkill"
    "UserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCEN"
    "E_USER_PROTOCMD\0222\n\005param\030\002 \001(\0162\r.Cmd.Cmd"
    "Param:\024CHANT_SKILL_USER_CMD\022\013\n\003tid\030\003 \001(\004"
    "\022\017\n\007skillID\030\004 \001(\r\022\032\n\003pos\030\005 \001(\0132\r.Cmd.Sce"
    "nePos\022\r\n\005attid\030\006 \001(\004\"\242\001\n\026BreakChantSkill"
    "UserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCEN"
    "E_USER_PROTOCMD\0228\n\005param\030\002 \001(\0162\r.Cmd.Cmd"
    "Param:\032BREAK_CHANT_SKILL_USER_CMD\022\r\n\005att"
    "id\030\003 \001(\004\022\017\n\007skillID\030\004 \001(\r\"\310\001\n\025BroadcastS"
    "killUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023"
    "SCENE_USER_PROTOCMD\0226\n\005param\030\002 \001(\0162\r.Cmd"
    ".CmdParam:\030BROADCAST_SKILL_USER_CMD\022\r\n\005a"
    "ttid\030\003 \001(\004\022\017\n\007skillID\030\004 \001(\r\022\032\n\003pos\030\005 \001(\013"
    "2\r.Cmd.ScenePos\022\013\n\003tid\030\006 \001(\004\"\235\001\n\rMapObje"
    "ctData\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE"
    "_USER_PROTOCMD\022-\n\005param\030\002 \001(\0162\r.Cmd.CmdP"
    "aram:\017MAP_OBJECT_DATA\022\017\n\004guid\030\003 \001(\004:\0010\022\034"
    "\n\005attrs\030\004 \003(\0132\r.Cmd.UserAttr\"|\n\rReliveUs"
    "erCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE_"
    "USER_PROTOCMD\022-\n\005param\030\002 \001(\0162\r.Cmd.CmdPa"
    "ram:\017RELIVE_USER_CMD\022\014\n\004type\030\003 \001(\r\"\261\001\n\013G"
    "oToUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023S"
    "CENE_USER_PROTOCMD\022+\n\005param\030\002 \001(\0162\r.Cmd."
    "CmdParam:\rGOTO_USER_CMD\022\032\n\003pos\030\003 \001(\0132\r.C"
    "md.ScenePos\022\021\n\006charid\030\004 \001(\004:\0010\022\026\n\007isgoma"
    "p\030\005 \001(\010:\005false\"\235\001\n\026ReconnectionPosUserCm"
    "d\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE_USER"
    "_PROTOCMD\0227\n\005param\030\002 \001(\0162\r.Cmd.CmdParam:"
    "\031RECONNECTION_POS_USER_CMD\022\032\n\003pos\030\003 \001(\0132"
    "\r.Cmd.ScenePos\"\211\001\n\022GoToExitPosUserCmd\022.\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\023SCENE_USER_PRO"
    "TOCMD\0224\n\005param\030\002 \001(\0162\r.Cmd.CmdParam:\026GOT"
    "O_EXIT_POS_USER_CMD\022\r\n\005mapid\030\003 \001(\r\"\251\001\n\024G"
    "oToRandomPosUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\023SCENE_USER_PROTOCMD\0226\n\005param\030\002 \001"
    "(\0162\r.Cmd.CmdParam:\030GOTO_RANDOM_POS_USER_"
    "CMD\022\r\n\005mapid\030\003 \001(\r\022\032\n\003pos\030\004 \001(\0132\r.Cmd.Sc"
    "enePos*\221\006\n\010CmdParam\022\026\n\022USERPARAM_USERSYN"
    "C\020\001\022\027\n\023USERPARAM_GMCOMMAND\020\003\022 \n\034USERPARA"
    "M_PROFESSIONEXCHANGE\020\004\022\033\n\027MAIN_USER_DATA"
    "_USER_CMD\020\013\022\025\n\021REQ_MOVE_USER_CMD\020\017\022\025\n\021RE"
    "T_MOVE_USER_CMD\020\020\022\025\n\021SYS_TIME_USER_CMD\020\021"
    "\022\031\n\025DELETE_ENTRY_USER_CMD\020\022\022\030\n\024CHANGE_BO"
    "DY_USER_CMD\020\026\022\031\n\025CHANGE_SCENE_USER_CMD\020\027"
    "\022\036\n\032FUNCTION_NPC_LIST_USER_CMD\020\031\022 \n\034DELE"
    "TE_STATIC_ENTRY_USER_CMD\020\032\022\034\n\030SKILL_BROA"
    "DCAST_USER_CMD\020\033\022\026\n\022USE_SKILL_USER_CMD\020\034"
    "\022\030\n\024CHANT_SKILL_USER_CMD\020\035\022\036\n\032BREAK_CHAN"
    "T_SKILL_USER_CMD\020\036\022\034\n\030BROADCAST_SKILL_US"
    "ER_CMD\020\037\022\022\n\016TITLE_NEWTITLE\020\"\022\021\n\rTITLE_RE"
    "QDATA\020#\022\020\n\014TITLE_ACTIVE\020$\022\023\n\017MAP_OBJECT_"
    "DATA\020&\022\024\n\020CD_TIME_USER_CMD\020\'\022\023\n\017RELIVE_U"
    "SER_CMD\020)\022\021\n\rGOTO_USER_CMD\020*\022\035\n\031RECONNEC"
    "TION_POS_USER_CMD\020+\022\021\n\rUSER_FACE_CMD\020-\022\025"
    "\n\021EXIT_POS_USER_CMD\020.\022!\n\035TEST_SKILL_BROA"
    "DCAST_USER_CMD\020/\022\032\n\026GOTO_EXIT_POS_USER_C"
    "MD\0200\022\034\n\030GOTO_RANDOM_POS_USER_CMD\0201*m\n\rEU"
    "serSyncType\022\025\n\021EUSERSYNCTYPE_MIN\020\001\022\026\n\022EU"
    "SERSYNCTYPE_INIT\020\002\022\026\n\022EUSERSYNCTYPE_SYNC"
    "\020\003\022\025\n\021EUSERSYNCTYPE_MAX\020\004*M\n\013MessageType"
    "\022\023\n\017MESSAGETYPE_MIN\020\000\022\024\n\020MESSAGETYPE_TES"
    "T\020\001\022\023\n\017MESSAGETYPE_MAX\020\002*\336\002\n\nDamageType\022"
    " \n\023DAMAGE_TYPE_INVALID\020\373\377\377\377\377\377\377\377\377\001\022\036\n\021DAM"
    "AGE_TYPE_CAIJI\020\377\377\377\377\377\377\377\377\377\001\022\024\n\020DAMAGE_TYPE"
    "_NONE\020\000\022\026\n\022DAMAGE_TYPE_NORMAL\020\001\022\030\n\024DAMAG"
    "E_TYPE_CRITICAL\020\002\022\024\n\020DAMAGE_TYPE_MISS\020\003\022"
    "\024\n\020DAMAGE_TYPE_HEAL\020\004\022\026\n\022DAMAGE_TYPE_IMM"
    "UNE\020\005\022\027\n\023DAMAGE_TYPE_BARRIER\020\006\022\030\n\024DAMAGE"
    "_TYPE_NORMALSP\020\010\022\027\n\023DAMAGE_TYPE_TREATSP\020"
    "\t\022\031\n\025DAMAGE_TYPE_AUTOBLOCK\020\n\022\033\n\027DAMAGE_T"
    "YPE_WEAPONBLOCK\020\013", 6897);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneUser.proto", &protobuf_RegisterTypes);
  UserAttr::default_instance_ = new UserAttr();
  UserAttrSvr::default_instance_ = new UserAttrSvr();
  UserData::default_instance_ = new UserData();
  UserSyncCmd::default_instance_ = new UserSyncCmd();
  UserMessageCmd::default_instance_ = new UserMessageCmd();
  UserGMCommand::default_instance_ = new UserGMCommand();
  UserProfessionExchange::default_instance_ = new UserProfessionExchange();
  UserTest::default_instance_ = new UserTest();
  UserFaceCmd::default_instance_ = new UserFaceCmd();
  MainUserData::default_instance_ = new MainUserData();
  MainUserDataUserCmd::default_instance_ = new MainUserDataUserCmd();
  ReqMoveUserCmd::default_instance_ = new ReqMoveUserCmd();
  RetMoveUserCmd::default_instance_ = new RetMoveUserCmd();
  SynTimeUserCmd::default_instance_ = new SynTimeUserCmd();
  DeleteEntryUserCmd::default_instance_ = new DeleteEntryUserCmd();
  ChangeBodyUserCmd::default_instance_ = new ChangeBodyUserCmd();
  ChangeSceneUserCmd::default_instance_ = new ChangeSceneUserCmd();
  FunNpcData::default_instance_ = new FunNpcData();
  FuntionNpcListUserCmd::default_instance_ = new FuntionNpcListUserCmd();
  GUID::default_instance_ = new GUID();
  DeleteStaticEntryUserCmd::default_instance_ = new DeleteStaticEntryUserCmd();
  ShareDamTarget::default_instance_ = new ShareDamTarget();
  HitedTarget::default_instance_ = new HitedTarget();
  PhaseData::default_instance_ = new PhaseData();
  SkillBroadcastUserCmd::default_instance_ = new SkillBroadcastUserCmd();
  TestUint64::default_instance_ = new TestUint64();
  TestSkillBroadcastUserCmd::default_instance_ = new TestSkillBroadcastUserCmd();
  UseSkillUserCmd::default_instance_ = new UseSkillUserCmd();
  ChantSkillUserCmd::default_instance_ = new ChantSkillUserCmd();
  BreakChantSkillUserCmd::default_instance_ = new BreakChantSkillUserCmd();
  BroadcastSkillUserCmd::default_instance_ = new BroadcastSkillUserCmd();
  MapObjectData::default_instance_ = new MapObjectData();
  ReliveUserCmd::default_instance_ = new ReliveUserCmd();
  GoToUserCmd::default_instance_ = new GoToUserCmd();
  ReconnectionPosUserCmd::default_instance_ = new ReconnectionPosUserCmd();
  GoToExitPosUserCmd::default_instance_ = new GoToExitPosUserCmd();
  GoToRandomPosUserCmd::default_instance_ = new GoToRandomPosUserCmd();
  UserAttr::default_instance_->InitAsDefaultInstance();
  UserAttrSvr::default_instance_->InitAsDefaultInstance();
  UserData::default_instance_->InitAsDefaultInstance();
  UserSyncCmd::default_instance_->InitAsDefaultInstance();
  UserMessageCmd::default_instance_->InitAsDefaultInstance();
  UserGMCommand::default_instance_->InitAsDefaultInstance();
  UserProfessionExchange::default_instance_->InitAsDefaultInstance();
  UserTest::default_instance_->InitAsDefaultInstance();
  UserFaceCmd::default_instance_->InitAsDefaultInstance();
  MainUserData::default_instance_->InitAsDefaultInstance();
  MainUserDataUserCmd::default_instance_->InitAsDefaultInstance();
  ReqMoveUserCmd::default_instance_->InitAsDefaultInstance();
  RetMoveUserCmd::default_instance_->InitAsDefaultInstance();
  SynTimeUserCmd::default_instance_->InitAsDefaultInstance();
  DeleteEntryUserCmd::default_instance_->InitAsDefaultInstance();
  ChangeBodyUserCmd::default_instance_->InitAsDefaultInstance();
  ChangeSceneUserCmd::default_instance_->InitAsDefaultInstance();
  FunNpcData::default_instance_->InitAsDefaultInstance();
  FuntionNpcListUserCmd::default_instance_->InitAsDefaultInstance();
  GUID::default_instance_->InitAsDefaultInstance();
  DeleteStaticEntryUserCmd::default_instance_->InitAsDefaultInstance();
  ShareDamTarget::default_instance_->InitAsDefaultInstance();
  HitedTarget::default_instance_->InitAsDefaultInstance();
  PhaseData::default_instance_->InitAsDefaultInstance();
  SkillBroadcastUserCmd::default_instance_->InitAsDefaultInstance();
  TestUint64::default_instance_->InitAsDefaultInstance();
  TestSkillBroadcastUserCmd::default_instance_->InitAsDefaultInstance();
  UseSkillUserCmd::default_instance_->InitAsDefaultInstance();
  ChantSkillUserCmd::default_instance_->InitAsDefaultInstance();
  BreakChantSkillUserCmd::default_instance_->InitAsDefaultInstance();
  BroadcastSkillUserCmd::default_instance_->InitAsDefaultInstance();
  MapObjectData::default_instance_->InitAsDefaultInstance();
  ReliveUserCmd::default_instance_->InitAsDefaultInstance();
  GoToUserCmd::default_instance_->InitAsDefaultInstance();
  ReconnectionPosUserCmd::default_instance_->InitAsDefaultInstance();
  GoToExitPosUserCmd::default_instance_->InitAsDefaultInstance();
  GoToRandomPosUserCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneUser_2eproto {
  StaticDescriptorInitializer_SceneUser_2eproto() {
    protobuf_AddDesc_SceneUser_2eproto();
  }
} static_descriptor_initializer_SceneUser_2eproto_;
const ::google::protobuf::EnumDescriptor* CmdParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdParam_descriptor_;
}
bool CmdParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 11:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 34:
    case 35:
    case 36:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserSyncType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserSyncType_descriptor_;
}
bool EUserSyncType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DamageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageType_descriptor_;
}
bool DamageType_IsValid(int value) {
  switch(value) {
    case -5:
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserAttr::kTypeFieldNumber;
const int UserAttr::kValueFieldNumber;
#endif  // !_MSC_VER

UserAttr::UserAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserAttr)
}

void UserAttr::InitAsDefaultInstance() {
}

UserAttr::UserAttr(const UserAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserAttr)
}

void UserAttr::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAttr::~UserAttr() {
  // @@protoc_insertion_point(destructor:Cmd.UserAttr)
  SharedDtor();
}

void UserAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAttr_descriptor_;
}

const UserAttr& UserAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserAttr* UserAttr::default_instance_ = NULL;

UserAttr* UserAttr::New() const {
  return new UserAttr;
}

void UserAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAttrType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAttrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserAttr)
  return false;
#undef DO_
}

void UserAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserAttr)
  // required .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserAttr)
}

::google::protobuf::uint8* UserAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserAttr)
  // required .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserAttr)
  return target;
}

int UserAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAttr::MergeFrom(const UserAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAttr::CopyFrom(const UserAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserAttr::Swap(UserAttr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAttr_descriptor_;
  metadata.reflection = UserAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAttrSvr::kTypeFieldNumber;
const int UserAttrSvr::kValueFieldNumber;
#endif  // !_MSC_VER

UserAttrSvr::UserAttrSvr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserAttrSvr)
}

void UserAttrSvr::InitAsDefaultInstance() {
}

UserAttrSvr::UserAttrSvr(const UserAttrSvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserAttrSvr)
}

void UserAttrSvr::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAttrSvr::~UserAttrSvr() {
  // @@protoc_insertion_point(destructor:Cmd.UserAttrSvr)
  SharedDtor();
}

void UserAttrSvr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAttrSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAttrSvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAttrSvr_descriptor_;
}

const UserAttrSvr& UserAttrSvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserAttrSvr* UserAttrSvr::default_instance_ = NULL;

UserAttrSvr* UserAttrSvr::New() const {
  return new UserAttrSvr;
}

void UserAttrSvr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserAttrSvr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAttrSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserAttrSvr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAttrType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAttrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserAttrSvr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserAttrSvr)
  return false;
#undef DO_
}

void UserAttrSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserAttrSvr)
  // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserAttrSvr)
}

::google::protobuf::uint8* UserAttrSvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserAttrSvr)
  // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserAttrSvr)
  return target;
}

int UserAttrSvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAttrSvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAttrSvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAttrSvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAttrSvr::MergeFrom(const UserAttrSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAttrSvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAttrSvr::CopyFrom(const UserAttrSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAttrSvr::IsInitialized() const {

  return true;
}

void UserAttrSvr::Swap(UserAttrSvr* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAttrSvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAttrSvr_descriptor_;
  metadata.reflection = UserAttrSvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserData::kTypeFieldNumber;
const int UserData::kValueFieldNumber;
const int UserData::kDataFieldNumber;
#endif  // !_MSC_VER

UserData::UserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserData)
}

void UserData::InitAsDefaultInstance() {
}

UserData::UserData(const UserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserData)
}

void UserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:Cmd.UserData)
  SharedDtor();
}

void UserData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserData_descriptor_;
}

const UserData& UserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserData* UserData::default_instance_ = NULL;

UserData* UserData::New() const {
  return new UserData;
}

void UserData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    value_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint64 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserData)
  return false;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserData)
  // required .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserData)
}

::google::protobuf::uint8* UserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserData)
  // required .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserData)
  return target;
}

int UserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserData::Swap(UserData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserData_descriptor_;
  metadata.reflection = UserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSyncCmd::kCmdFieldNumber;
const int UserSyncCmd::kParamFieldNumber;
const int UserSyncCmd::kTypeFieldNumber;
const int UserSyncCmd::kAttrsFieldNumber;
const int UserSyncCmd::kDatasFieldNumber;
const int UserSyncCmd::kPointattrsFieldNumber;
#endif  // !_MSC_VER

UserSyncCmd::UserSyncCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserSyncCmd)
}

void UserSyncCmd::InitAsDefaultInstance() {
}

UserSyncCmd::UserSyncCmd(const UserSyncCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserSyncCmd)
}

void UserSyncCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 1;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSyncCmd::~UserSyncCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserSyncCmd)
  SharedDtor();
}

void UserSyncCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSyncCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSyncCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSyncCmd_descriptor_;
}

const UserSyncCmd& UserSyncCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserSyncCmd* UserSyncCmd::default_instance_ = NULL;

UserSyncCmd* UserSyncCmd::New() const {
  return new UserSyncCmd;
}

void UserSyncCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 1;
    type_ = 1;
  }
  attrs_.Clear();
  datas_.Clear();
  pointattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSyncCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserSyncCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = USERPARAM_USERSYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EUserSyncType type = 3 [default = EUSERSYNCTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserSyncType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserSyncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 4;
      case 4: {
        if (tag == 34) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        if (input->ExpectTag(42)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 5;
      case 5: {
        if (tag == 42) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        if (input->ExpectTag(50)) goto parse_pointattrs;
        break;
      }

      // repeated .Cmd.UserAttr pointattrs = 6;
      case 6: {
        if (tag == 50) {
         parse_pointattrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointattrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pointattrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserSyncCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserSyncCmd)
  return false;
#undef DO_
}

void UserSyncCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = USERPARAM_USERSYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EUserSyncType type = 3 [default = EUSERSYNCTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attrs(i), output);
  }

  // repeated .Cmd.UserData datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr pointattrs = 6;
  for (int i = 0; i < this->pointattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pointattrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserSyncCmd)
}

::google::protobuf::uint8* UserSyncCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = USERPARAM_USERSYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EUserSyncType type = 3 [default = EUSERSYNCTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attrs(i), target);
  }

  // repeated .Cmd.UserData datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr pointattrs = 6;
  for (int i = 0; i < this->pointattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pointattrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserSyncCmd)
  return target;
}

int UserSyncCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = USERPARAM_USERSYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EUserSyncType type = 3 [default = EUSERSYNCTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.UserAttr attrs = 4;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.UserData datas = 5;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr pointattrs = 6;
  total_size += 1 * this->pointattrs_size();
  for (int i = 0; i < this->pointattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSyncCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSyncCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSyncCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSyncCmd::MergeFrom(const UserSyncCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  datas_.MergeFrom(from.datas_);
  pointattrs_.MergeFrom(from.pointattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSyncCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSyncCmd::CopyFrom(const UserSyncCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSyncCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pointattrs())) return false;
  return true;
}

void UserSyncCmd::Swap(UserSyncCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    attrs_.Swap(&other->attrs_);
    datas_.Swap(&other->datas_);
    pointattrs_.Swap(&other->pointattrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSyncCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSyncCmd_descriptor_;
  metadata.reflection = UserSyncCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMessageCmd::kCmdFieldNumber;
const int UserMessageCmd::kParamFieldNumber;
const int UserMessageCmd::kIdFieldNumber;
const int UserMessageCmd::kTypeFieldNumber;
const int UserMessageCmd::kAddstrFieldNumber;
#endif  // !_MSC_VER

UserMessageCmd::UserMessageCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserMessageCmd)
}

void UserMessageCmd::InitAsDefaultInstance() {
}

UserMessageCmd::UserMessageCmd(const UserMessageCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserMessageCmd)
}

void UserMessageCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 200u;
  id_ = 0u;
  type_ = 0;
  addstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMessageCmd::~UserMessageCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserMessageCmd)
  SharedDtor();
}

void UserMessageCmd::SharedDtor() {
  if (addstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addstr_;
  }
  if (this != default_instance_) {
  }
}

void UserMessageCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMessageCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMessageCmd_descriptor_;
}

const UserMessageCmd& UserMessageCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserMessageCmd* UserMessageCmd::default_instance_ = NULL;

UserMessageCmd* UserMessageCmd::New() const {
  return new UserMessageCmd;
}

void UserMessageCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserMessageCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, type_);
    cmd_ = 5;
    param_ = 200u;
    if (has_addstr()) {
      if (addstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addstr_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMessageCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserMessageCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2 [default = 200];
      case 2: {
        if (tag == 16) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.MessageType type = 4 [default = MESSAGETYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::MessageType_IsValid(value)) {
            set_type(static_cast< ::Cmd::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_addstr;
        break;
      }

      // optional string addstr = 5;
      case 5: {
        if (tag == 42) {
         parse_addstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addstr().data(), this->addstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserMessageCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserMessageCmd)
  return false;
#undef DO_
}

void UserMessageCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserMessageCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint32 param = 2 [default = 200];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional .Cmd.MessageType type = 4 [default = MESSAGETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string addstr = 5;
  if (has_addstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addstr().data(), this->addstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->addstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserMessageCmd)
}

::google::protobuf::uint8* UserMessageCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserMessageCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint32 param = 2 [default = 200];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional .Cmd.MessageType type = 4 [default = MESSAGETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string addstr = 5;
  if (has_addstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addstr().data(), this->addstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->addstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserMessageCmd)
  return target;
}

int UserMessageCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 param = 2 [default = 200];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .Cmd.MessageType type = 4 [default = MESSAGETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string addstr = 5;
    if (has_addstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMessageCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMessageCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMessageCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMessageCmd::MergeFrom(const UserMessageCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_addstr()) {
      set_addstr(from.addstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMessageCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMessageCmd::CopyFrom(const UserMessageCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessageCmd::IsInitialized() const {

  return true;
}

void UserMessageCmd::Swap(UserMessageCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(addstr_, other->addstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMessageCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMessageCmd_descriptor_;
  metadata.reflection = UserMessageCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGMCommand::kCmdFieldNumber;
const int UserGMCommand::kParamFieldNumber;
const int UserGMCommand::kCommandFieldNumber;
#endif  // !_MSC_VER

UserGMCommand::UserGMCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserGMCommand)
}

void UserGMCommand::InitAsDefaultInstance() {
}

UserGMCommand::UserGMCommand(const UserGMCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserGMCommand)
}

void UserGMCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 3u;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGMCommand::~UserGMCommand() {
  // @@protoc_insertion_point(destructor:Cmd.UserGMCommand)
  SharedDtor();
}

void UserGMCommand::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void UserGMCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGMCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGMCommand_descriptor_;
}

const UserGMCommand& UserGMCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserGMCommand* UserGMCommand::default_instance_ = NULL;

UserGMCommand* UserGMCommand::New() const {
  return new UserGMCommand;
}

void UserGMCommand::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 3u;
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGMCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserGMCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2 [default = 3];
      case 2: {
        if (tag == 16) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_command;
        break;
      }

      // optional string command = 3;
      case 3: {
        if (tag == 26) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserGMCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserGMCommand)
  return false;
#undef DO_
}

void UserGMCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserGMCommand)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint32 param = 2 [default = 3];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // optional string command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserGMCommand)
}

::google::protobuf::uint8* UserGMCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserGMCommand)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint32 param = 2 [default = 3];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // optional string command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserGMCommand)
  return target;
}

int UserGMCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 param = 2 [default = 3];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // optional string command = 3;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGMCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGMCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGMCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGMCommand::MergeFrom(const UserGMCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGMCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGMCommand::CopyFrom(const UserGMCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGMCommand::IsInitialized() const {

  return true;
}

void UserGMCommand::Swap(UserGMCommand* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGMCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGMCommand_descriptor_;
  metadata.reflection = UserGMCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserProfessionExchange::kCmdFieldNumber;
const int UserProfessionExchange::kParamFieldNumber;
const int UserProfessionExchange::kProfessionFieldNumber;
#endif  // !_MSC_VER

UserProfessionExchange::UserProfessionExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserProfessionExchange)
}

void UserProfessionExchange::InitAsDefaultInstance() {
}

UserProfessionExchange::UserProfessionExchange(const UserProfessionExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserProfessionExchange)
}

void UserProfessionExchange::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 4u;
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserProfessionExchange::~UserProfessionExchange() {
  // @@protoc_insertion_point(destructor:Cmd.UserProfessionExchange)
  SharedDtor();
}

void UserProfessionExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserProfessionExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserProfessionExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserProfessionExchange_descriptor_;
}

const UserProfessionExchange& UserProfessionExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserProfessionExchange* UserProfessionExchange::default_instance_ = NULL;

UserProfessionExchange* UserProfessionExchange::New() const {
  return new UserProfessionExchange;
}

void UserProfessionExchange::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 4u;
    profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserProfessionExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserProfessionExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2 [default = 4];
      case 2: {
        if (tag == 16) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
      case 3: {
        if (tag == 24) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserProfessionExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserProfessionExchange)
  return false;
#undef DO_
}

void UserProfessionExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserProfessionExchange)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint32 param = 2 [default = 4];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserProfessionExchange)
}

::google::protobuf::uint8* UserProfessionExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserProfessionExchange)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint32 param = 2 [default = 4];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserProfessionExchange)
  return target;
}

int UserProfessionExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 param = 2 [default = 4];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserProfessionExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserProfessionExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserProfessionExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserProfessionExchange::MergeFrom(const UserProfessionExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserProfessionExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProfessionExchange::CopyFrom(const UserProfessionExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfessionExchange::IsInitialized() const {

  return true;
}

void UserProfessionExchange::Swap(UserProfessionExchange* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserProfessionExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserProfessionExchange_descriptor_;
  metadata.reflection = UserProfessionExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTest::kCmdFieldNumber;
const int UserTest::kParamFieldNumber;
const int UserTest::kAttrsFieldNumber;
#endif  // !_MSC_VER

UserTest::UserTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserTest)
}

void UserTest::InitAsDefaultInstance() {
}

UserTest::UserTest(const UserTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserTest)
}

void UserTest::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 10u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTest::~UserTest() {
  // @@protoc_insertion_point(destructor:Cmd.UserTest)
  SharedDtor();
}

void UserTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTest_descriptor_;
}

const UserTest& UserTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserTest* UserTest::default_instance_ = NULL;

UserTest* UserTest::New() const {
  return new UserTest;
}

void UserTest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 5;
    param_ = 10u;
  }
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2 [default = 10];
      case 2: {
        if (tag == 16) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 3;
      case 3: {
        if (tag == 26) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserTest)
  return false;
#undef DO_
}

void UserTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserTest)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint32 param = 2 [default = 10];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // repeated .Cmd.UserAttr attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserTest)
}

::google::protobuf::uint8* UserTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserTest)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint32 param = 2 [default = 10];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // repeated .Cmd.UserAttr attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserTest)
  return target;
}

int UserTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 param = 2 [default = 10];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  // repeated .Cmd.UserAttr attrs = 3;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTest::MergeFrom(const UserTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTest::CopyFrom(const UserTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void UserTest::Swap(UserTest* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTest_descriptor_;
  metadata.reflection = UserTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserFaceCmd::kCmdFieldNumber;
const int UserFaceCmd::kParamFieldNumber;
const int UserFaceCmd::kIdFieldNumber;
#endif  // !_MSC_VER

UserFaceCmd::UserFaceCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserFaceCmd)
}

void UserFaceCmd::InitAsDefaultInstance() {
}

UserFaceCmd::UserFaceCmd(const UserFaceCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserFaceCmd)
}

void UserFaceCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 200u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserFaceCmd::~UserFaceCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserFaceCmd)
  SharedDtor();
}

void UserFaceCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserFaceCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserFaceCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserFaceCmd_descriptor_;
}

const UserFaceCmd& UserFaceCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UserFaceCmd* UserFaceCmd::default_instance_ = NULL;

UserFaceCmd* UserFaceCmd::New() const {
  return new UserFaceCmd;
}

void UserFaceCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 200u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserFaceCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserFaceCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional uint32 param = 2 [default = 200];
      case 2: {
        if (tag == 16) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserFaceCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserFaceCmd)
  return false;
#undef DO_
}

void UserFaceCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserFaceCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint32 param = 2 [default = 200];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserFaceCmd)
}

::google::protobuf::uint8* UserFaceCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserFaceCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint32 param = 2 [default = 200];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserFaceCmd)
  return target;
}

int UserFaceCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 param = 2 [default = 200];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserFaceCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserFaceCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserFaceCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserFaceCmd::MergeFrom(const UserFaceCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserFaceCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFaceCmd::CopyFrom(const UserFaceCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFaceCmd::IsInitialized() const {

  return true;
}

void UserFaceCmd::Swap(UserFaceCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserFaceCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserFaceCmd_descriptor_;
  metadata.reflection = UserFaceCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MainUserData::kIdFieldNumber;
const int MainUserData::kNameFieldNumber;
const int MainUserData::kMaleFieldNumber;
const int MainUserData::kBodyFieldNumber;
const int MainUserData::kHairFieldNumber;
const int MainUserData::kRightHandFieldNumber;
const int MainUserData::kProfessionFieldNumber;
const int MainUserData::kAccessoryFieldNumber;
const int MainUserData::kWingFieldNumber;
#endif  // !_MSC_VER

MainUserData::MainUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MainUserData)
}

void MainUserData::InitAsDefaultInstance() {
}

MainUserData::MainUserData(const MainUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MainUserData)
}

void MainUserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  male_ = 0u;
  body_ = 0u;
  hair_ = 0u;
  righthand_ = 0u;
  profession_ = 0u;
  accessory_ = 0u;
  wing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainUserData::~MainUserData() {
  // @@protoc_insertion_point(destructor:Cmd.MainUserData)
  SharedDtor();
}

void MainUserData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MainUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainUserData_descriptor_;
}

const MainUserData& MainUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

MainUserData* MainUserData::default_instance_ = NULL;

MainUserData* MainUserData::New() const {
  return new MainUserData;
}

void MainUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MainUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(male_, accessory_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  wing_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MainUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_male;
        break;
      }

      // optional uint32 male = 3;
      case 3: {
        if (tag == 24) {
         parse_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &male_)));
          set_has_male();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_body;
        break;
      }

      // optional uint32 body = 4;
      case 4: {
        if (tag == 32) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 5;
      case 5: {
        if (tag == 40) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rightHand;
        break;
      }

      // optional uint32 rightHand = 6;
      case 6: {
        if (tag == 48) {
         parse_rightHand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &righthand_)));
          set_has_righthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 7;
      case 7: {
        if (tag == 56) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_accessory;
        break;
      }

      // optional uint32 accessory = 8;
      case 8: {
        if (tag == 64) {
         parse_accessory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accessory_)));
          set_has_accessory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wing;
        break;
      }

      // optional uint32 wing = 9;
      case 9: {
        if (tag == 72) {
         parse_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MainUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MainUserData)
  return false;
#undef DO_
}

void MainUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MainUserData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 male = 3;
  if (has_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->male(), output);
  }

  // optional uint32 body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->body(), output);
  }

  // optional uint32 hair = 5;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hair(), output);
  }

  // optional uint32 rightHand = 6;
  if (has_righthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->righthand(), output);
  }

  // optional uint32 profession = 7;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->profession(), output);
  }

  // optional uint32 accessory = 8;
  if (has_accessory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->accessory(), output);
  }

  // optional uint32 wing = 9;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MainUserData)
}

::google::protobuf::uint8* MainUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MainUserData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 male = 3;
  if (has_male()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->male(), target);
  }

  // optional uint32 body = 4;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->body(), target);
  }

  // optional uint32 hair = 5;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hair(), target);
  }

  // optional uint32 rightHand = 6;
  if (has_righthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->righthand(), target);
  }

  // optional uint32 profession = 7;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->profession(), target);
  }

  // optional uint32 accessory = 8;
  if (has_accessory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->accessory(), target);
  }

  // optional uint32 wing = 9;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MainUserData)
  return target;
}

int MainUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 male = 3;
    if (has_male()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->male());
    }

    // optional uint32 body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 hair = 5;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 rightHand = 6;
    if (has_righthand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->righthand());
    }

    // optional uint32 profession = 7;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 accessory = 8;
    if (has_accessory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accessory());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 wing = 9;
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainUserData::MergeFrom(const MainUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_male()) {
      set_male(from.male());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_righthand()) {
      set_righthand(from.righthand());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_accessory()) {
      set_accessory(from.accessory());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wing()) {
      set_wing(from.wing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainUserData::CopyFrom(const MainUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainUserData::IsInitialized() const {

  return true;
}

void MainUserData::Swap(MainUserData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(male_, other->male_);
    std::swap(body_, other->body_);
    std::swap(hair_, other->hair_);
    std::swap(righthand_, other->righthand_);
    std::swap(profession_, other->profession_);
    std::swap(accessory_, other->accessory_);
    std::swap(wing_, other->wing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainUserData_descriptor_;
  metadata.reflection = MainUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MainUserDataUserCmd::kCmdFieldNumber;
const int MainUserDataUserCmd::kParamFieldNumber;
const int MainUserDataUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

MainUserDataUserCmd::MainUserDataUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MainUserDataUserCmd)
}

void MainUserDataUserCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MainUserData*>(&::Cmd::MainUserData::default_instance());
}

MainUserDataUserCmd::MainUserDataUserCmd(const MainUserDataUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MainUserDataUserCmd)
}

void MainUserDataUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 11;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainUserDataUserCmd::~MainUserDataUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MainUserDataUserCmd)
  SharedDtor();
}

void MainUserDataUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MainUserDataUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainUserDataUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainUserDataUserCmd_descriptor_;
}

const MainUserDataUserCmd& MainUserDataUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

MainUserDataUserCmd* MainUserDataUserCmd::default_instance_ = NULL;

MainUserDataUserCmd* MainUserDataUserCmd::New() const {
  return new MainUserDataUserCmd;
}

void MainUserDataUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 11;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MainUserData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainUserDataUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MainUserDataUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = MAIN_USER_DATA_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MainUserData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MainUserDataUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MainUserDataUserCmd)
  return false;
#undef DO_
}

void MainUserDataUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MainUserDataUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = MAIN_USER_DATA_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MainUserData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MainUserDataUserCmd)
}

::google::protobuf::uint8* MainUserDataUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MainUserDataUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = MAIN_USER_DATA_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MainUserData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MainUserDataUserCmd)
  return target;
}

int MainUserDataUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = MAIN_USER_DATA_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MainUserData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainUserDataUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainUserDataUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainUserDataUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainUserDataUserCmd::MergeFrom(const MainUserDataUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MainUserData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainUserDataUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainUserDataUserCmd::CopyFrom(const MainUserDataUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainUserDataUserCmd::IsInitialized() const {

  return true;
}

void MainUserDataUserCmd::Swap(MainUserDataUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainUserDataUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainUserDataUserCmd_descriptor_;
  metadata.reflection = MainUserDataUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMoveUserCmd::kCmdFieldNumber;
const int ReqMoveUserCmd::kParamFieldNumber;
const int ReqMoveUserCmd::kTargetFieldNumber;
#endif  // !_MSC_VER

ReqMoveUserCmd::ReqMoveUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqMoveUserCmd)
}

void ReqMoveUserCmd::InitAsDefaultInstance() {
  target_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ReqMoveUserCmd::ReqMoveUserCmd(const ReqMoveUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqMoveUserCmd)
}

void ReqMoveUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 15;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMoveUserCmd::~ReqMoveUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqMoveUserCmd)
  SharedDtor();
}

void ReqMoveUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void ReqMoveUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMoveUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMoveUserCmd_descriptor_;
}

const ReqMoveUserCmd& ReqMoveUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

ReqMoveUserCmd* ReqMoveUserCmd::default_instance_ = NULL;

ReqMoveUserCmd* ReqMoveUserCmd::New() const {
  return new ReqMoveUserCmd;
}

void ReqMoveUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 15;
    if (has_target()) {
      if (target_ != NULL) target_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMoveUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqMoveUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = REQ_MOVE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional .Cmd.ScenePos target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqMoveUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqMoveUserCmd)
  return false;
#undef DO_
}

void ReqMoveUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqMoveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = REQ_MOVE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqMoveUserCmd)
}

::google::protobuf::uint8* ReqMoveUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqMoveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = REQ_MOVE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqMoveUserCmd)
  return target;
}

int ReqMoveUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = REQ_MOVE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMoveUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMoveUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMoveUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMoveUserCmd::MergeFrom(const ReqMoveUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_target()) {
      mutable_target()->::Cmd::ScenePos::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMoveUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMoveUserCmd::CopyFrom(const ReqMoveUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMoveUserCmd::IsInitialized() const {

  return true;
}

void ReqMoveUserCmd::Swap(ReqMoveUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMoveUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMoveUserCmd_descriptor_;
  metadata.reflection = ReqMoveUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetMoveUserCmd::kCmdFieldNumber;
const int RetMoveUserCmd::kParamFieldNumber;
const int RetMoveUserCmd::kCharidFieldNumber;
const int RetMoveUserCmd::kPosFieldNumber;
#endif  // !_MSC_VER

RetMoveUserCmd::RetMoveUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RetMoveUserCmd)
}

void RetMoveUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

RetMoveUserCmd::RetMoveUserCmd(const RetMoveUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RetMoveUserCmd)
}

void RetMoveUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 16;
  charid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetMoveUserCmd::~RetMoveUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RetMoveUserCmd)
  SharedDtor();
}

void RetMoveUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void RetMoveUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetMoveUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetMoveUserCmd_descriptor_;
}

const RetMoveUserCmd& RetMoveUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

RetMoveUserCmd* RetMoveUserCmd::default_instance_ = NULL;

RetMoveUserCmd* RetMoveUserCmd::New() const {
  return new RetMoveUserCmd;
}

void RetMoveUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 5;
    param_ = 16;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetMoveUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RetMoveUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = RET_MOVE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RetMoveUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RetMoveUserCmd)
  return false;
#undef DO_
}

void RetMoveUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RetMoveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = RET_MOVE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RetMoveUserCmd)
}

::google::protobuf::uint8* RetMoveUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RetMoveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = RET_MOVE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RetMoveUserCmd)
  return target;
}

int RetMoveUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = RET_MOVE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetMoveUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetMoveUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetMoveUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetMoveUserCmd::MergeFrom(const RetMoveUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetMoveUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetMoveUserCmd::CopyFrom(const RetMoveUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetMoveUserCmd::IsInitialized() const {

  return true;
}

void RetMoveUserCmd::Swap(RetMoveUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetMoveUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetMoveUserCmd_descriptor_;
  metadata.reflection = RetMoveUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynTimeUserCmd::kCmdFieldNumber;
const int SynTimeUserCmd::kParamFieldNumber;
const int SynTimeUserCmd::kServerTimeFieldNumber;
#endif  // !_MSC_VER

SynTimeUserCmd::SynTimeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SynTimeUserCmd)
}

void SynTimeUserCmd::InitAsDefaultInstance() {
}

SynTimeUserCmd::SynTimeUserCmd(const SynTimeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SynTimeUserCmd)
}

void SynTimeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 17;
  servertime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynTimeUserCmd::~SynTimeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SynTimeUserCmd)
  SharedDtor();
}

void SynTimeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynTimeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynTimeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynTimeUserCmd_descriptor_;
}

const SynTimeUserCmd& SynTimeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

SynTimeUserCmd* SynTimeUserCmd::default_instance_ = NULL;

SynTimeUserCmd* SynTimeUserCmd::New() const {
  return new SynTimeUserCmd;
}

void SynTimeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 17;
    servertime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynTimeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SynTimeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = SYS_TIME_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverTime;
        break;
      }

      // optional uint64 serverTime = 3;
      case 3: {
        if (tag == 24) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SynTimeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SynTimeUserCmd)
  return false;
#undef DO_
}

void SynTimeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SynTimeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = SYS_TIME_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 serverTime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SynTimeUserCmd)
}

::google::protobuf::uint8* SynTimeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SynTimeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = SYS_TIME_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 serverTime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SynTimeUserCmd)
  return target;
}

int SynTimeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = SYS_TIME_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 serverTime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->servertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynTimeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynTimeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynTimeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynTimeUserCmd::MergeFrom(const SynTimeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynTimeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynTimeUserCmd::CopyFrom(const SynTimeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynTimeUserCmd::IsInitialized() const {

  return true;
}

void SynTimeUserCmd::Swap(SynTimeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynTimeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynTimeUserCmd_descriptor_;
  metadata.reflection = SynTimeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteEntryUserCmd::kCmdFieldNumber;
const int DeleteEntryUserCmd::kParamFieldNumber;
const int DeleteEntryUserCmd::kListFieldNumber;
const int DeleteEntryUserCmd::kFadeoutFieldNumber;
const int DeleteEntryUserCmd::kDelayDelFieldNumber;
#endif  // !_MSC_VER

DeleteEntryUserCmd::DeleteEntryUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeleteEntryUserCmd)
}

void DeleteEntryUserCmd::InitAsDefaultInstance() {
}

DeleteEntryUserCmd::DeleteEntryUserCmd(const DeleteEntryUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeleteEntryUserCmd)
}

void DeleteEntryUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 18;
  fadeout_ = 0u;
  delay_del_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteEntryUserCmd::~DeleteEntryUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeleteEntryUserCmd)
  SharedDtor();
}

void DeleteEntryUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteEntryUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteEntryUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteEntryUserCmd_descriptor_;
}

const DeleteEntryUserCmd& DeleteEntryUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

DeleteEntryUserCmd* DeleteEntryUserCmd::default_instance_ = NULL;

DeleteEntryUserCmd* DeleteEntryUserCmd::New() const {
  return new DeleteEntryUserCmd;
}

void DeleteEntryUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteEntryUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(fadeout_, delay_del_);
    cmd_ = 5;
    param_ = 18;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteEntryUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeleteEntryUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = DELETE_ENTRY_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list;
        break;
      }

      // repeated uint64 list = 3;
      case 3: {
        if (tag == 24) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list;
        if (input->ExpectTag(32)) goto parse_fadeout;
        break;
      }

      // optional uint32 fadeout = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_fadeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fadeout_)));
          set_has_fadeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delay_del;
        break;
      }

      // optional uint32 delay_del = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_delay_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_del_)));
          set_has_delay_del();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeleteEntryUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeleteEntryUserCmd)
  return false;
#undef DO_
}

void DeleteEntryUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeleteEntryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = DELETE_ENTRY_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->list(i), output);
  }

  // optional uint32 fadeout = 4 [default = 0];
  if (has_fadeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fadeout(), output);
  }

  // optional uint32 delay_del = 5 [default = 0];
  if (has_delay_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delay_del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeleteEntryUserCmd)
}

::google::protobuf::uint8* DeleteEntryUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeleteEntryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = DELETE_ENTRY_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->list(i), target);
  }

  // optional uint32 fadeout = 4 [default = 0];
  if (has_fadeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fadeout(), target);
  }

  // optional uint32 delay_del = 5 [default = 0];
  if (has_delay_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delay_del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeleteEntryUserCmd)
  return target;
}

int DeleteEntryUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = DELETE_ENTRY_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 fadeout = 4 [default = 0];
    if (has_fadeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fadeout());
    }

    // optional uint32 delay_del = 5 [default = 0];
    if (has_delay_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_del());
    }

  }
  // repeated uint64 list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteEntryUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteEntryUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteEntryUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteEntryUserCmd::MergeFrom(const DeleteEntryUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_fadeout()) {
      set_fadeout(from.fadeout());
    }
    if (from.has_delay_del()) {
      set_delay_del(from.delay_del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteEntryUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEntryUserCmd::CopyFrom(const DeleteEntryUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEntryUserCmd::IsInitialized() const {

  return true;
}

void DeleteEntryUserCmd::Swap(DeleteEntryUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    std::swap(fadeout_, other->fadeout_);
    std::swap(delay_del_, other->delay_del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteEntryUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteEntryUserCmd_descriptor_;
  metadata.reflection = DeleteEntryUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeBodyUserCmd::kCmdFieldNumber;
const int ChangeBodyUserCmd::kParamFieldNumber;
const int ChangeBodyUserCmd::kCharidFieldNumber;
const int ChangeBodyUserCmd::kMaleFieldNumber;
const int ChangeBodyUserCmd::kBodyFieldNumber;
const int ChangeBodyUserCmd::kHairFieldNumber;
const int ChangeBodyUserCmd::kRightHandFieldNumber;
const int ChangeBodyUserCmd::kProfessionFieldNumber;
const int ChangeBodyUserCmd::kAccessoryFieldNumber;
const int ChangeBodyUserCmd::kWingFieldNumber;
#endif  // !_MSC_VER

ChangeBodyUserCmd::ChangeBodyUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeBodyUserCmd)
}

void ChangeBodyUserCmd::InitAsDefaultInstance() {
}

ChangeBodyUserCmd::ChangeBodyUserCmd(const ChangeBodyUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeBodyUserCmd)
}

void ChangeBodyUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 22;
  charid_ = GOOGLE_ULONGLONG(0);
  male_ = 0u;
  body_ = 0u;
  hair_ = 0u;
  righthand_ = 0u;
  profession_ = 0u;
  accessory_ = 0u;
  wing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeBodyUserCmd::~ChangeBodyUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeBodyUserCmd)
  SharedDtor();
}

void ChangeBodyUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeBodyUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeBodyUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeBodyUserCmd_descriptor_;
}

const ChangeBodyUserCmd& ChangeBodyUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

ChangeBodyUserCmd* ChangeBodyUserCmd::default_instance_ = NULL;

ChangeBodyUserCmd* ChangeBodyUserCmd::New() const {
  return new ChangeBodyUserCmd;
}

void ChangeBodyUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeBodyUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, profession_);
    cmd_ = 5;
    param_ = 22;
  }
  ZR_(accessory_, wing_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeBodyUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeBodyUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = CHANGE_BODY_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_male;
        break;
      }

      // optional uint32 male = 4;
      case 4: {
        if (tag == 32) {
         parse_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &male_)));
          set_has_male();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_body;
        break;
      }

      // optional uint32 body = 5;
      case 5: {
        if (tag == 40) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 6;
      case 6: {
        if (tag == 48) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rightHand;
        break;
      }

      // optional uint32 rightHand = 7;
      case 7: {
        if (tag == 56) {
         parse_rightHand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &righthand_)));
          set_has_righthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 8;
      case 8: {
        if (tag == 64) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_accessory;
        break;
      }

      // optional uint32 accessory = 9;
      case 9: {
        if (tag == 72) {
         parse_accessory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accessory_)));
          set_has_accessory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_wing;
        break;
      }

      // optional uint32 wing = 10;
      case 10: {
        if (tag == 80) {
         parse_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeBodyUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeBodyUserCmd)
  return false;
#undef DO_
}

void ChangeBodyUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeBodyUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = CHANGE_BODY_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 male = 4;
  if (has_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->male(), output);
  }

  // optional uint32 body = 5;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->body(), output);
  }

  // optional uint32 hair = 6;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hair(), output);
  }

  // optional uint32 rightHand = 7;
  if (has_righthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->righthand(), output);
  }

  // optional uint32 profession = 8;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->profession(), output);
  }

  // optional uint32 accessory = 9;
  if (has_accessory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->accessory(), output);
  }

  // optional uint32 wing = 10;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeBodyUserCmd)
}

::google::protobuf::uint8* ChangeBodyUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeBodyUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = CHANGE_BODY_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 male = 4;
  if (has_male()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->male(), target);
  }

  // optional uint32 body = 5;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->body(), target);
  }

  // optional uint32 hair = 6;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hair(), target);
  }

  // optional uint32 rightHand = 7;
  if (has_righthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->righthand(), target);
  }

  // optional uint32 profession = 8;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->profession(), target);
  }

  // optional uint32 accessory = 9;
  if (has_accessory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->accessory(), target);
  }

  // optional uint32 wing = 10;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeBodyUserCmd)
  return target;
}

int ChangeBodyUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = CHANGE_BODY_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 male = 4;
    if (has_male()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->male());
    }

    // optional uint32 body = 5;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 hair = 6;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 rightHand = 7;
    if (has_righthand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->righthand());
    }

    // optional uint32 profession = 8;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 accessory = 9;
    if (has_accessory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accessory());
    }

    // optional uint32 wing = 10;
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeBodyUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeBodyUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeBodyUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeBodyUserCmd::MergeFrom(const ChangeBodyUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_male()) {
      set_male(from.male());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_righthand()) {
      set_righthand(from.righthand());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accessory()) {
      set_accessory(from.accessory());
    }
    if (from.has_wing()) {
      set_wing(from.wing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeBodyUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeBodyUserCmd::CopyFrom(const ChangeBodyUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeBodyUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ChangeBodyUserCmd::Swap(ChangeBodyUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(male_, other->male_);
    std::swap(body_, other->body_);
    std::swap(hair_, other->hair_);
    std::swap(righthand_, other->righthand_);
    std::swap(profession_, other->profession_);
    std::swap(accessory_, other->accessory_);
    std::swap(wing_, other->wing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeBodyUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeBodyUserCmd_descriptor_;
  metadata.reflection = ChangeBodyUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSceneUserCmd::kCmdFieldNumber;
const int ChangeSceneUserCmd::kParamFieldNumber;
const int ChangeSceneUserCmd::kMapIDFieldNumber;
const int ChangeSceneUserCmd::kMapNameFieldNumber;
const int ChangeSceneUserCmd::kPosFieldNumber;
const int ChangeSceneUserCmd::kDmapIDFieldNumber;
const int ChangeSceneUserCmd::kPreviewFieldNumber;
const int ChangeSceneUserCmd::kInvisiblexitFieldNumber;
const int ChangeSceneUserCmd::kImageidFieldNumber;
#endif  // !_MSC_VER

ChangeSceneUserCmd::ChangeSceneUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeSceneUserCmd)
}

void ChangeSceneUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ChangeSceneUserCmd::ChangeSceneUserCmd(const ChangeSceneUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeSceneUserCmd)
}

void ChangeSceneUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 23;
  mapid_ = 0u;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = NULL;
  dmapid_ = 0u;
  preview_ = 0u;
  imageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSceneUserCmd::~ChangeSceneUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeSceneUserCmd)
  SharedDtor();
}

void ChangeSceneUserCmd::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void ChangeSceneUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSceneUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSceneUserCmd_descriptor_;
}

const ChangeSceneUserCmd& ChangeSceneUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

ChangeSceneUserCmd* ChangeSceneUserCmd::default_instance_ = NULL;

ChangeSceneUserCmd* ChangeSceneUserCmd::New() const {
  return new ChangeSceneUserCmd;
}

void ChangeSceneUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeSceneUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(mapid_, dmapid_);
    cmd_ = 5;
    param_ = 23;
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapname_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    preview_ = 0u;
  }
  imageid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  invisiblexit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSceneUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeSceneUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = CHANGE_SCENE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapID;
        break;
      }

      // optional uint32 mapID = 3;
      case 3: {
        if (tag == 24) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mapName;
        break;
      }

      // optional string mapName = 4;
      case 4: {
        if (tag == 34) {
         parse_mapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dmapID;
        break;
      }

      // optional uint32 dmapID = 6;
      case 6: {
        if (tag == 48) {
         parse_dmapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmapid_)));
          set_has_dmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_preview;
        break;
      }

      // optional uint32 preview = 7;
      case 7: {
        if (tag == 56) {
         parse_preview:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_)));
          set_has_preview();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_invisiblexit;
        break;
      }

      // repeated uint32 invisiblexit = 8;
      case 8: {
        if (tag == 64) {
         parse_invisiblexit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_invisiblexit())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_invisiblexit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_invisiblexit;
        if (input->ExpectTag(72)) goto parse_imageid;
        break;
      }

      // optional uint32 imageid = 9;
      case 9: {
        if (tag == 72) {
         parse_imageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imageid_)));
          set_has_imageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeSceneUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeSceneUserCmd)
  return false;
#undef DO_
}

void ChangeSceneUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeSceneUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = CHANGE_SCENE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapID = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional string mapName = 4;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mapname(), output);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional uint32 dmapID = 6;
  if (has_dmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dmapid(), output);
  }

  // optional uint32 preview = 7;
  if (has_preview()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->preview(), output);
  }

  // repeated uint32 invisiblexit = 8;
  for (int i = 0; i < this->invisiblexit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->invisiblexit(i), output);
  }

  // optional uint32 imageid = 9;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->imageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeSceneUserCmd)
}

::google::protobuf::uint8* ChangeSceneUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeSceneUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = CHANGE_SCENE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapID = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional string mapName = 4;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mapname(), target);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional uint32 dmapID = 6;
  if (has_dmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dmapid(), target);
  }

  // optional uint32 preview = 7;
  if (has_preview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->preview(), target);
  }

  // repeated uint32 invisiblexit = 8;
  for (int i = 0; i < this->invisiblexit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->invisiblexit(i), target);
  }

  // optional uint32 imageid = 9;
  if (has_imageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->imageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeSceneUserCmd)
  return target;
}

int ChangeSceneUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = CHANGE_SCENE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional string mapName = 4;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

    // optional .Cmd.ScenePos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 dmapID = 6;
    if (has_dmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmapid());
    }

    // optional uint32 preview = 7;
    if (has_preview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preview());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 imageid = 9;
    if (has_imageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imageid());
    }

  }
  // repeated uint32 invisiblexit = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->invisiblexit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->invisiblexit(i));
    }
    total_size += 1 * this->invisiblexit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSceneUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSceneUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSceneUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSceneUserCmd::MergeFrom(const ChangeSceneUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  invisiblexit_.MergeFrom(from.invisiblexit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_dmapid()) {
      set_dmapid(from.dmapid());
    }
    if (from.has_preview()) {
      set_preview(from.preview());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imageid()) {
      set_imageid(from.imageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSceneUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSceneUserCmd::CopyFrom(const ChangeSceneUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSceneUserCmd::IsInitialized() const {

  return true;
}

void ChangeSceneUserCmd::Swap(ChangeSceneUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(mapname_, other->mapname_);
    std::swap(pos_, other->pos_);
    std::swap(dmapid_, other->dmapid_);
    std::swap(preview_, other->preview_);
    invisiblexit_.Swap(&other->invisiblexit_);
    std::swap(imageid_, other->imageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSceneUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSceneUserCmd_descriptor_;
  metadata.reflection = ChangeSceneUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunNpcData::kNpcidFieldNumber;
const int FunNpcData::kTempidFieldNumber;
const int FunNpcData::kPosFieldNumber;
#endif  // !_MSC_VER

FunNpcData::FunNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FunNpcData)
}

void FunNpcData::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

FunNpcData::FunNpcData(const FunNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FunNpcData)
}

void FunNpcData::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  tempid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunNpcData::~FunNpcData() {
  // @@protoc_insertion_point(destructor:Cmd.FunNpcData)
  SharedDtor();
}

void FunNpcData::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void FunNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunNpcData_descriptor_;
}

const FunNpcData& FunNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

FunNpcData* FunNpcData::default_instance_ = NULL;

FunNpcData* FunNpcData::New() const {
  return new FunNpcData;
}

void FunNpcData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    npcid_ = 0u;
    tempid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FunNpcData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tempid;
        break;
      }

      // required uint64 tempid = 2;
      case 2: {
        if (tag == 16) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FunNpcData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FunNpcData)
  return false;
#undef DO_
}

void FunNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FunNpcData)
  // required uint32 npcid = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  // required uint64 tempid = 2;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tempid(), output);
  }

  // required .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FunNpcData)
}

::google::protobuf::uint8* FunNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FunNpcData)
  // required uint32 npcid = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  // required uint64 tempid = 2;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tempid(), target);
  }

  // required .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FunNpcData)
  return target;
}

int FunNpcData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 npcid = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // required uint64 tempid = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tempid());
    }

    // required .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunNpcData::MergeFrom(const FunNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunNpcData::CopyFrom(const FunNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunNpcData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FunNpcData::Swap(FunNpcData* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(tempid_, other->tempid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunNpcData_descriptor_;
  metadata.reflection = FunNpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuntionNpcListUserCmd::kCmdFieldNumber;
const int FuntionNpcListUserCmd::kParamFieldNumber;
const int FuntionNpcListUserCmd::kListFieldNumber;
#endif  // !_MSC_VER

FuntionNpcListUserCmd::FuntionNpcListUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FuntionNpcListUserCmd)
}

void FuntionNpcListUserCmd::InitAsDefaultInstance() {
}

FuntionNpcListUserCmd::FuntionNpcListUserCmd(const FuntionNpcListUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FuntionNpcListUserCmd)
}

void FuntionNpcListUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 25;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuntionNpcListUserCmd::~FuntionNpcListUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FuntionNpcListUserCmd)
  SharedDtor();
}

void FuntionNpcListUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuntionNpcListUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuntionNpcListUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuntionNpcListUserCmd_descriptor_;
}

const FuntionNpcListUserCmd& FuntionNpcListUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

FuntionNpcListUserCmd* FuntionNpcListUserCmd::default_instance_ = NULL;

FuntionNpcListUserCmd* FuntionNpcListUserCmd::New() const {
  return new FuntionNpcListUserCmd;
}

void FuntionNpcListUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 5;
    param_ = 25;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuntionNpcListUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FuntionNpcListUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = FUNCTION_NPC_LIST_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .Cmd.FunNpcData list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FuntionNpcListUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FuntionNpcListUserCmd)
  return false;
#undef DO_
}

void FuntionNpcListUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FuntionNpcListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = FUNCTION_NPC_LIST_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.FunNpcData list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FuntionNpcListUserCmd)
}

::google::protobuf::uint8* FuntionNpcListUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FuntionNpcListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = FUNCTION_NPC_LIST_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.FunNpcData list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FuntionNpcListUserCmd)
  return target;
}

int FuntionNpcListUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = FUNCTION_NPC_LIST_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.FunNpcData list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuntionNpcListUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuntionNpcListUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuntionNpcListUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuntionNpcListUserCmd::MergeFrom(const FuntionNpcListUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuntionNpcListUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuntionNpcListUserCmd::CopyFrom(const FuntionNpcListUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuntionNpcListUserCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void FuntionNpcListUserCmd::Swap(FuntionNpcListUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuntionNpcListUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuntionNpcListUserCmd_descriptor_;
  metadata.reflection = FuntionNpcListUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GUID::kZoneIDFieldNumber;
const int GUID::kTimeFieldNumber;
const int GUID::kMapIDFieldNumber;
const int GUID::kIndexFieldNumber;
#endif  // !_MSC_VER

GUID::GUID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GUID)
}

void GUID::InitAsDefaultInstance() {
}

GUID::GUID(const GUID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GUID)
}

void GUID::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  time_ = 0u;
  mapid_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUID::~GUID() {
  // @@protoc_insertion_point(destructor:Cmd.GUID)
  SharedDtor();
}

void GUID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUID_descriptor_;
}

const GUID& GUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

GUID* GUID::default_instance_ = NULL;

GUID* GUID::New() const {
  return new GUID;
}

void GUID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GUID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GUID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapID;
        break;
      }

      // required uint32 mapID = 3;
      case 3: {
        if (tag == 24) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GUID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GUID)
  return false;
#undef DO_
}

void GUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GUID)
  // required uint32 zoneID = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 mapID = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GUID)
}

::google::protobuf::uint8* GUID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GUID)
  // required uint32 zoneID = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required uint32 mapID = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GUID)
  return target;
}

int GUID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneID = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 mapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GUID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GUID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GUID::MergeFrom(const GUID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GUID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUID::CopyFrom(const GUID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GUID::Swap(GUID* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(time_, other->time_);
    std::swap(mapid_, other->mapid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUID_descriptor_;
  metadata.reflection = GUID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteStaticEntryUserCmd::kCmdFieldNumber;
const int DeleteStaticEntryUserCmd::kParamFieldNumber;
const int DeleteStaticEntryUserCmd::kListFieldNumber;
#endif  // !_MSC_VER

DeleteStaticEntryUserCmd::DeleteStaticEntryUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeleteStaticEntryUserCmd)
}

void DeleteStaticEntryUserCmd::InitAsDefaultInstance() {
}

DeleteStaticEntryUserCmd::DeleteStaticEntryUserCmd(const DeleteStaticEntryUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeleteStaticEntryUserCmd)
}

void DeleteStaticEntryUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 26;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteStaticEntryUserCmd::~DeleteStaticEntryUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeleteStaticEntryUserCmd)
  SharedDtor();
}

void DeleteStaticEntryUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteStaticEntryUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteStaticEntryUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteStaticEntryUserCmd_descriptor_;
}

const DeleteStaticEntryUserCmd& DeleteStaticEntryUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

DeleteStaticEntryUserCmd* DeleteStaticEntryUserCmd::default_instance_ = NULL;

DeleteStaticEntryUserCmd* DeleteStaticEntryUserCmd::New() const {
  return new DeleteStaticEntryUserCmd;
}

void DeleteStaticEntryUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 5;
    param_ = 26;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteStaticEntryUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeleteStaticEntryUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = DELETE_STATIC_ENTRY_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .Cmd.GUID list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeleteStaticEntryUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeleteStaticEntryUserCmd)
  return false;
#undef DO_
}

void DeleteStaticEntryUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeleteStaticEntryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = DELETE_STATIC_ENTRY_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GUID list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeleteStaticEntryUserCmd)
}

::google::protobuf::uint8* DeleteStaticEntryUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeleteStaticEntryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = DELETE_STATIC_ENTRY_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GUID list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeleteStaticEntryUserCmd)
  return target;
}

int DeleteStaticEntryUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = DELETE_STATIC_ENTRY_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GUID list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteStaticEntryUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteStaticEntryUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteStaticEntryUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteStaticEntryUserCmd::MergeFrom(const DeleteStaticEntryUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteStaticEntryUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStaticEntryUserCmd::CopyFrom(const DeleteStaticEntryUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStaticEntryUserCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void DeleteStaticEntryUserCmd::Swap(DeleteStaticEntryUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteStaticEntryUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteStaticEntryUserCmd_descriptor_;
  metadata.reflection = DeleteStaticEntryUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareDamTarget::kCharidFieldNumber;
const int ShareDamTarget::kDamageFieldNumber;
const int ShareDamTarget::kTypeFieldNumber;
#endif  // !_MSC_VER

ShareDamTarget::ShareDamTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareDamTarget)
}

void ShareDamTarget::InitAsDefaultInstance() {
}

ShareDamTarget::ShareDamTarget(const ShareDamTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareDamTarget)
}

void ShareDamTarget::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  damage_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareDamTarget::~ShareDamTarget() {
  // @@protoc_insertion_point(destructor:Cmd.ShareDamTarget)
  SharedDtor();
}

void ShareDamTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareDamTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareDamTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareDamTarget_descriptor_;
}

const ShareDamTarget& ShareDamTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

ShareDamTarget* ShareDamTarget::default_instance_ = NULL;

ShareDamTarget* ShareDamTarget::New() const {
  return new ShareDamTarget;
}

void ShareDamTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShareDamTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(charid_, damage_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareDamTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareDamTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional int32 damage = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareDamTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareDamTarget)
  return false;
#undef DO_
}

void ShareDamTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareDamTarget)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional int32 damage = 2 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  // optional int32 type = 3 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareDamTarget)
}

::google::protobuf::uint8* ShareDamTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareDamTarget)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional int32 damage = 2 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  // optional int32 type = 3 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareDamTarget)
  return target;
}

int ShareDamTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 damage = 2 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 type = 3 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareDamTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareDamTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareDamTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareDamTarget::MergeFrom(const ShareDamTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareDamTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareDamTarget::CopyFrom(const ShareDamTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareDamTarget::IsInitialized() const {

  return true;
}

void ShareDamTarget::Swap(ShareDamTarget* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(damage_, other->damage_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareDamTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareDamTarget_descriptor_;
  metadata.reflection = ShareDamTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HitedTarget::kCharidFieldNumber;
const int HitedTarget::kDamageFieldNumber;
const int HitedTarget::kTypeFieldNumber;
const int HitedTarget::kShareTargetsFieldNumber;
#endif  // !_MSC_VER

HitedTarget::HitedTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HitedTarget)
}

void HitedTarget::InitAsDefaultInstance() {
}

HitedTarget::HitedTarget(const HitedTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HitedTarget)
}

void HitedTarget::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  damage_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitedTarget::~HitedTarget() {
  // @@protoc_insertion_point(destructor:Cmd.HitedTarget)
  SharedDtor();
}

void HitedTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HitedTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitedTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitedTarget_descriptor_;
}

const HitedTarget& HitedTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

HitedTarget* HitedTarget::default_instance_ = NULL;

HitedTarget* HitedTarget::New() const {
  return new HitedTarget;
}

void HitedTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HitedTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(charid_, damage_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sharetargets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HitedTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HitedTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional int32 damage = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shareTargets;
        break;
      }

      // repeated .Cmd.ShareDamTarget shareTargets = 4;
      case 4: {
        if (tag == 34) {
         parse_shareTargets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sharetargets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shareTargets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HitedTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HitedTarget)
  return false;
#undef DO_
}

void HitedTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HitedTarget)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional int32 damage = 2 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  // optional int32 type = 3 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated .Cmd.ShareDamTarget shareTargets = 4;
  for (int i = 0; i < this->sharetargets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sharetargets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HitedTarget)
}

::google::protobuf::uint8* HitedTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HitedTarget)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional int32 damage = 2 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  // optional int32 type = 3 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated .Cmd.ShareDamTarget shareTargets = 4;
  for (int i = 0; i < this->sharetargets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sharetargets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HitedTarget)
  return target;
}

int HitedTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 damage = 2 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 type = 3 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .Cmd.ShareDamTarget shareTargets = 4;
  total_size += 1 * this->sharetargets_size();
  for (int i = 0; i < this->sharetargets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sharetargets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitedTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HitedTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HitedTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HitedTarget::MergeFrom(const HitedTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  sharetargets_.MergeFrom(from.sharetargets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HitedTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitedTarget::CopyFrom(const HitedTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitedTarget::IsInitialized() const {

  return true;
}

void HitedTarget::Swap(HitedTarget* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(damage_, other->damage_);
    std::swap(type_, other->type_);
    sharetargets_.Swap(&other->sharetargets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HitedTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitedTarget_descriptor_;
  metadata.reflection = HitedTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhaseData::kNumberFieldNumber;
const int PhaseData::kPosFieldNumber;
const int PhaseData::kHitedTargetsFieldNumber;
const int PhaseData::kDirFieldNumber;
#endif  // !_MSC_VER

PhaseData::PhaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhaseData)
}

void PhaseData::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

PhaseData::PhaseData(const PhaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhaseData)
}

void PhaseData::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  pos_ = NULL;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhaseData::~PhaseData() {
  // @@protoc_insertion_point(destructor:Cmd.PhaseData)
  SharedDtor();
}

void PhaseData::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void PhaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhaseData_descriptor_;
}

const PhaseData& PhaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

PhaseData* PhaseData::default_instance_ = NULL;

PhaseData* PhaseData::New() const {
  return new PhaseData;
}

void PhaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(number_, dir_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hitedtargets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hitedTargets;
        break;
      }

      // repeated .Cmd.HitedTarget hitedTargets = 3;
      case 3: {
        if (tag == 26) {
         parse_hitedTargets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitedtargets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hitedTargets;
        if (input->ExpectTag(40)) goto parse_dir;
        break;
      }

      // optional int32 dir = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhaseData)
  return false;
#undef DO_
}

void PhaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhaseData)
  // optional int32 number = 1 [default = 0];
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // optional .Cmd.ScenePos pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // repeated .Cmd.HitedTarget hitedTargets = 3;
  for (int i = 0; i < this->hitedtargets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hitedtargets(i), output);
  }

  // optional int32 dir = 5 [default = 0];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhaseData)
}

::google::protobuf::uint8* PhaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhaseData)
  // optional int32 number = 1 [default = 0];
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // optional .Cmd.ScenePos pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // repeated .Cmd.HitedTarget hitedTargets = 3;
  for (int i = 0; i < this->hitedtargets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hitedtargets(i), target);
  }

  // optional int32 dir = 5 [default = 0];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhaseData)
  return target;
}

int PhaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1 [default = 0];
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional .Cmd.ScenePos pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 dir = 5 [default = 0];
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dir());
    }

  }
  // repeated .Cmd.HitedTarget hitedTargets = 3;
  total_size += 1 * this->hitedtargets_size();
  for (int i = 0; i < this->hitedtargets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitedtargets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhaseData::MergeFrom(const PhaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  hitedtargets_.MergeFrom(from.hitedtargets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseData::CopyFrom(const PhaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseData::IsInitialized() const {

  return true;
}

void PhaseData::Swap(PhaseData* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(pos_, other->pos_);
    hitedtargets_.Swap(&other->hitedtargets_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhaseData_descriptor_;
  metadata.reflection = PhaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBroadcastUserCmd::kCmdFieldNumber;
const int SkillBroadcastUserCmd::kParamFieldNumber;
const int SkillBroadcastUserCmd::kCharidFieldNumber;
const int SkillBroadcastUserCmd::kSkillIDFieldNumber;
const int SkillBroadcastUserCmd::kPetidFieldNumber;
const int SkillBroadcastUserCmd::kDataFieldNumber;
const int SkillBroadcastUserCmd::kRandomFieldNumber;
const int SkillBroadcastUserCmd::kChanttimeFieldNumber;
#endif  // !_MSC_VER

SkillBroadcastUserCmd::SkillBroadcastUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillBroadcastUserCmd)
}

void SkillBroadcastUserCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::PhaseData*>(&::Cmd::PhaseData::default_instance());
}

SkillBroadcastUserCmd::SkillBroadcastUserCmd(const SkillBroadcastUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillBroadcastUserCmd)
}

void SkillBroadcastUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 27;
  charid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  petid_ = 0;
  data_ = NULL;
  random_ = 0u;
  chanttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBroadcastUserCmd::~SkillBroadcastUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SkillBroadcastUserCmd)
  SharedDtor();
}

void SkillBroadcastUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void SkillBroadcastUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBroadcastUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBroadcastUserCmd_descriptor_;
}

const SkillBroadcastUserCmd& SkillBroadcastUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

SkillBroadcastUserCmd* SkillBroadcastUserCmd::default_instance_ = NULL;

SkillBroadcastUserCmd* SkillBroadcastUserCmd::New() const {
  return new SkillBroadcastUserCmd;
}

void SkillBroadcastUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillBroadcastUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, petid_);
    ZR_(random_, chanttime_);
    cmd_ = 5;
    param_ = 27;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::PhaseData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillBroadcastUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillBroadcastUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = SKILL_BROADCAST_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_petid;
        break;
      }

      // optional int32 petid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .Cmd.PhaseData data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_random;
        break;
      }

      // optional uint32 random = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_)));
          set_has_random();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_chanttime;
        break;
      }

      // optional uint32 chanttime = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_chanttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chanttime_)));
          set_has_chanttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillBroadcastUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillBroadcastUserCmd)
  return false;
#undef DO_
}

void SkillBroadcastUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillBroadcastUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = SKILL_BROADCAST_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 skillID = 4 [default = 0];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  // optional int32 petid = 5 [default = 0];
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->petid(), output);
  }

  // optional .Cmd.PhaseData data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  // optional uint32 random = 7 [default = 0];
  if (has_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->random(), output);
  }

  // optional uint32 chanttime = 8 [default = 0];
  if (has_chanttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->chanttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillBroadcastUserCmd)
}

::google::protobuf::uint8* SkillBroadcastUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillBroadcastUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = SKILL_BROADCAST_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 skillID = 4 [default = 0];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  // optional int32 petid = 5 [default = 0];
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->petid(), target);
  }

  // optional .Cmd.PhaseData data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  // optional uint32 random = 7 [default = 0];
  if (has_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->random(), target);
  }

  // optional uint32 chanttime = 8 [default = 0];
  if (has_chanttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->chanttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillBroadcastUserCmd)
  return target;
}

int SkillBroadcastUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = SKILL_BROADCAST_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 skillID = 4 [default = 0];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional int32 petid = 5 [default = 0];
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petid());
    }

    // optional .Cmd.PhaseData data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 random = 7 [default = 0];
    if (has_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random());
    }

    // optional uint32 chanttime = 8 [default = 0];
    if (has_chanttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chanttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBroadcastUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBroadcastUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBroadcastUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillBroadcastUserCmd::MergeFrom(const SkillBroadcastUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::PhaseData::MergeFrom(from.data());
    }
    if (from.has_random()) {
      set_random(from.random());
    }
    if (from.has_chanttime()) {
      set_chanttime(from.chanttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillBroadcastUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillBroadcastUserCmd::CopyFrom(const SkillBroadcastUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBroadcastUserCmd::IsInitialized() const {

  return true;
}

void SkillBroadcastUserCmd::Swap(SkillBroadcastUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(skillid_, other->skillid_);
    std::swap(petid_, other->petid_);
    std::swap(data_, other->data_);
    std::swap(random_, other->random_);
    std::swap(chanttime_, other->chanttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillBroadcastUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBroadcastUserCmd_descriptor_;
  metadata.reflection = SkillBroadcastUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestUint64::kIFieldNumber;
const int TestUint64::kJFieldNumber;
const int TestUint64::kKFieldNumber;
#endif  // !_MSC_VER

TestUint64::TestUint64()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TestUint64)
}

void TestUint64::InitAsDefaultInstance() {
}

TestUint64::TestUint64(const TestUint64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TestUint64)
}

void TestUint64::SharedCtor() {
  _cached_size_ = 0;
  i_ = 0;
  j_ = GOOGLE_ULONGLONG(0);
  k_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestUint64::~TestUint64() {
  // @@protoc_insertion_point(destructor:Cmd.TestUint64)
  SharedDtor();
}

void TestUint64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestUint64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestUint64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestUint64_descriptor_;
}

const TestUint64& TestUint64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

TestUint64* TestUint64::default_instance_ = NULL;

TestUint64* TestUint64::New() const {
  return new TestUint64;
}

void TestUint64::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TestUint64*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(j_, k_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestUint64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TestUint64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 i = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_j;
        break;
      }

      // optional uint64 j = 2;
      case 2: {
        if (tag == 16) {
         parse_j:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &j_)));
          set_has_j();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_k;
        break;
      }

      // optional int32 k = 3;
      case 3: {
        if (tag == 24) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TestUint64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TestUint64)
  return false;
#undef DO_
}

void TestUint64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TestUint64)
  // required int32 i = 1;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->i(), output);
  }

  // optional uint64 j = 2;
  if (has_j()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->j(), output);
  }

  // optional int32 k = 3;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TestUint64)
}

::google::protobuf::uint8* TestUint64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TestUint64)
  // required int32 i = 1;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->i(), target);
  }

  // optional uint64 j = 2;
  if (has_j()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->j(), target);
  }

  // optional int32 k = 3;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TestUint64)
  return target;
}

int TestUint64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 i = 1;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }

    // optional uint64 j = 2;
    if (has_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->j());
    }

    // optional int32 k = 3;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestUint64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestUint64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestUint64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestUint64::MergeFrom(const TestUint64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_j()) {
      set_j(from.j());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestUint64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestUint64::CopyFrom(const TestUint64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestUint64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestUint64::Swap(TestUint64* other) {
  if (other != this) {
    std::swap(i_, other->i_);
    std::swap(j_, other->j_);
    std::swap(k_, other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestUint64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestUint64_descriptor_;
  metadata.reflection = TestUint64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestSkillBroadcastUserCmd::kCmdFieldNumber;
const int TestSkillBroadcastUserCmd::kParamFieldNumber;
const int TestSkillBroadcastUserCmd::kIFieldNumber;
const int TestSkillBroadcastUserCmd::kListFieldNumber;
#endif  // !_MSC_VER

TestSkillBroadcastUserCmd::TestSkillBroadcastUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TestSkillBroadcastUserCmd)
}

void TestSkillBroadcastUserCmd::InitAsDefaultInstance() {
}

TestSkillBroadcastUserCmd::TestSkillBroadcastUserCmd(const TestSkillBroadcastUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TestSkillBroadcastUserCmd)
}

void TestSkillBroadcastUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 47;
  i_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestSkillBroadcastUserCmd::~TestSkillBroadcastUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TestSkillBroadcastUserCmd)
  SharedDtor();
}

void TestSkillBroadcastUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestSkillBroadcastUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestSkillBroadcastUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestSkillBroadcastUserCmd_descriptor_;
}

const TestSkillBroadcastUserCmd& TestSkillBroadcastUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

TestSkillBroadcastUserCmd* TestSkillBroadcastUserCmd::default_instance_ = NULL;

TestSkillBroadcastUserCmd* TestSkillBroadcastUserCmd::New() const {
  return new TestSkillBroadcastUserCmd;
}

void TestSkillBroadcastUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 47;
    i_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestSkillBroadcastUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TestSkillBroadcastUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = TEST_SKILL_BROADCAST_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_i;
        break;
      }

      // required int32 i = 3;
      case 3: {
        if (tag == 24) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list;
        break;
      }

      // repeated .Cmd.TestUint64 list = 4;
      case 4: {
        if (tag == 34) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TestSkillBroadcastUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TestSkillBroadcastUserCmd)
  return false;
#undef DO_
}

void TestSkillBroadcastUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TestSkillBroadcastUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = TEST_SKILL_BROADCAST_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required int32 i = 3;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->i(), output);
  }

  // repeated .Cmd.TestUint64 list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TestSkillBroadcastUserCmd)
}

::google::protobuf::uint8* TestSkillBroadcastUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TestSkillBroadcastUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = TEST_SKILL_BROADCAST_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required int32 i = 3;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->i(), target);
  }

  // repeated .Cmd.TestUint64 list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TestSkillBroadcastUserCmd)
  return target;
}

int TestSkillBroadcastUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = TEST_SKILL_BROADCAST_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required int32 i = 3;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }

  }
  // repeated .Cmd.TestUint64 list = 4;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestSkillBroadcastUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestSkillBroadcastUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestSkillBroadcastUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestSkillBroadcastUserCmd::MergeFrom(const TestSkillBroadcastUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestSkillBroadcastUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSkillBroadcastUserCmd::CopyFrom(const TestSkillBroadcastUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSkillBroadcastUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void TestSkillBroadcastUserCmd::Swap(TestSkillBroadcastUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(i_, other->i_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestSkillBroadcastUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestSkillBroadcastUserCmd_descriptor_;
  metadata.reflection = TestSkillBroadcastUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillUserCmd::kCmdFieldNumber;
const int UseSkillUserCmd::kParamFieldNumber;
const int UseSkillUserCmd::kTidFieldNumber;
const int UseSkillUserCmd::kSkillIDFieldNumber;
const int UseSkillUserCmd::kPosFieldNumber;
#endif  // !_MSC_VER

UseSkillUserCmd::UseSkillUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseSkillUserCmd)
}

void UseSkillUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

UseSkillUserCmd::UseSkillUserCmd(const UseSkillUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseSkillUserCmd)
}

void UseSkillUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 28;
  tid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillUserCmd::~UseSkillUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UseSkillUserCmd)
  SharedDtor();
}

void UseSkillUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void UseSkillUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillUserCmd_descriptor_;
}

const UseSkillUserCmd& UseSkillUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

UseSkillUserCmd* UseSkillUserCmd::default_instance_ = NULL;

UseSkillUserCmd* UseSkillUserCmd::New() const {
  return new UseSkillUserCmd;
}

void UseSkillUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 5;
    param_ = 28;
    tid_ = GOOGLE_ULONGLONG(0);
    skillid_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseSkillUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = USE_SKILL_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tid;
        break;
      }

      // optional uint64 tid = 3;
      case 3: {
        if (tag == 24) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4;
      case 4: {
        if (tag == 32) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseSkillUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseSkillUserCmd)
  return false;
#undef DO_
}

void UseSkillUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = USE_SKILL_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tid(), output);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseSkillUserCmd)
}

::google::protobuf::uint8* UseSkillUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = USE_SKILL_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 tid = 3;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tid(), target);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseSkillUserCmd)
  return target;
}

int UseSkillUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = USE_SKILL_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tid());
    }

    // optional uint32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Cmd.ScenePos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillUserCmd::MergeFrom(const UseSkillUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillUserCmd::CopyFrom(const UseSkillUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillUserCmd::IsInitialized() const {

  return true;
}

void UseSkillUserCmd::Swap(UseSkillUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(tid_, other->tid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillUserCmd_descriptor_;
  metadata.reflection = UseSkillUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChantSkillUserCmd::kCmdFieldNumber;
const int ChantSkillUserCmd::kParamFieldNumber;
const int ChantSkillUserCmd::kTidFieldNumber;
const int ChantSkillUserCmd::kSkillIDFieldNumber;
const int ChantSkillUserCmd::kPosFieldNumber;
const int ChantSkillUserCmd::kAttidFieldNumber;
#endif  // !_MSC_VER

ChantSkillUserCmd::ChantSkillUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChantSkillUserCmd)
}

void ChantSkillUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ChantSkillUserCmd::ChantSkillUserCmd(const ChantSkillUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChantSkillUserCmd)
}

void ChantSkillUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 29;
  tid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  pos_ = NULL;
  attid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChantSkillUserCmd::~ChantSkillUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChantSkillUserCmd)
  SharedDtor();
}

void ChantSkillUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ChantSkillUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChantSkillUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChantSkillUserCmd_descriptor_;
}

const ChantSkillUserCmd& ChantSkillUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

ChantSkillUserCmd* ChantSkillUserCmd::default_instance_ = NULL;

ChantSkillUserCmd* ChantSkillUserCmd::New() const {
  return new ChantSkillUserCmd;
}

void ChantSkillUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChantSkillUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(attid_, skillid_);
    cmd_ = 5;
    param_ = 29;
    tid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChantSkillUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChantSkillUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = CHANT_SKILL_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tid;
        break;
      }

      // optional uint64 tid = 3;
      case 3: {
        if (tag == 24) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4;
      case 4: {
        if (tag == 32) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attid;
        break;
      }

      // optional uint64 attid = 6;
      case 6: {
        if (tag == 48) {
         parse_attid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attid_)));
          set_has_attid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChantSkillUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChantSkillUserCmd)
  return false;
#undef DO_
}

void ChantSkillUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChantSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = CHANT_SKILL_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tid(), output);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional uint64 attid = 6;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->attid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChantSkillUserCmd)
}

::google::protobuf::uint8* ChantSkillUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChantSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = CHANT_SKILL_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 tid = 3;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tid(), target);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional uint64 attid = 6;
  if (has_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->attid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChantSkillUserCmd)
  return target;
}

int ChantSkillUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = CHANT_SKILL_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tid());
    }

    // optional uint32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Cmd.ScenePos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 attid = 6;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChantSkillUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChantSkillUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChantSkillUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChantSkillUserCmd::MergeFrom(const ChantSkillUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_attid()) {
      set_attid(from.attid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChantSkillUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChantSkillUserCmd::CopyFrom(const ChantSkillUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChantSkillUserCmd::IsInitialized() const {

  return true;
}

void ChantSkillUserCmd::Swap(ChantSkillUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(tid_, other->tid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(attid_, other->attid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChantSkillUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChantSkillUserCmd_descriptor_;
  metadata.reflection = ChantSkillUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BreakChantSkillUserCmd::kCmdFieldNumber;
const int BreakChantSkillUserCmd::kParamFieldNumber;
const int BreakChantSkillUserCmd::kAttidFieldNumber;
const int BreakChantSkillUserCmd::kSkillIDFieldNumber;
#endif  // !_MSC_VER

BreakChantSkillUserCmd::BreakChantSkillUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BreakChantSkillUserCmd)
}

void BreakChantSkillUserCmd::InitAsDefaultInstance() {
}

BreakChantSkillUserCmd::BreakChantSkillUserCmd(const BreakChantSkillUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BreakChantSkillUserCmd)
}

void BreakChantSkillUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 30;
  attid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BreakChantSkillUserCmd::~BreakChantSkillUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BreakChantSkillUserCmd)
  SharedDtor();
}

void BreakChantSkillUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BreakChantSkillUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakChantSkillUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BreakChantSkillUserCmd_descriptor_;
}

const BreakChantSkillUserCmd& BreakChantSkillUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

BreakChantSkillUserCmd* BreakChantSkillUserCmd::default_instance_ = NULL;

BreakChantSkillUserCmd* BreakChantSkillUserCmd::New() const {
  return new BreakChantSkillUserCmd;
}

void BreakChantSkillUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BreakChantSkillUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(attid_, skillid_);
    cmd_ = 5;
    param_ = 30;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BreakChantSkillUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BreakChantSkillUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = BREAK_CHANT_SKILL_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attid;
        break;
      }

      // optional uint64 attid = 3;
      case 3: {
        if (tag == 24) {
         parse_attid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attid_)));
          set_has_attid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4;
      case 4: {
        if (tag == 32) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BreakChantSkillUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BreakChantSkillUserCmd)
  return false;
#undef DO_
}

void BreakChantSkillUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BreakChantSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = BREAK_CHANT_SKILL_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 attid = 3;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->attid(), output);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BreakChantSkillUserCmd)
}

::google::protobuf::uint8* BreakChantSkillUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BreakChantSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = BREAK_CHANT_SKILL_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 attid = 3;
  if (has_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->attid(), target);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BreakChantSkillUserCmd)
  return target;
}

int BreakChantSkillUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = BREAK_CHANT_SKILL_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 attid = 3;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attid());
    }

    // optional uint32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakChantSkillUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BreakChantSkillUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BreakChantSkillUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BreakChantSkillUserCmd::MergeFrom(const BreakChantSkillUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_attid()) {
      set_attid(from.attid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BreakChantSkillUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakChantSkillUserCmd::CopyFrom(const BreakChantSkillUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakChantSkillUserCmd::IsInitialized() const {

  return true;
}

void BreakChantSkillUserCmd::Swap(BreakChantSkillUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(attid_, other->attid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BreakChantSkillUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BreakChantSkillUserCmd_descriptor_;
  metadata.reflection = BreakChantSkillUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastSkillUserCmd::kCmdFieldNumber;
const int BroadcastSkillUserCmd::kParamFieldNumber;
const int BroadcastSkillUserCmd::kAttidFieldNumber;
const int BroadcastSkillUserCmd::kSkillIDFieldNumber;
const int BroadcastSkillUserCmd::kPosFieldNumber;
const int BroadcastSkillUserCmd::kTidFieldNumber;
#endif  // !_MSC_VER

BroadcastSkillUserCmd::BroadcastSkillUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BroadcastSkillUserCmd)
}

void BroadcastSkillUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

BroadcastSkillUserCmd::BroadcastSkillUserCmd(const BroadcastSkillUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BroadcastSkillUserCmd)
}

void BroadcastSkillUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 31;
  attid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  pos_ = NULL;
  tid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastSkillUserCmd::~BroadcastSkillUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BroadcastSkillUserCmd)
  SharedDtor();
}

void BroadcastSkillUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void BroadcastSkillUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastSkillUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastSkillUserCmd_descriptor_;
}

const BroadcastSkillUserCmd& BroadcastSkillUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

BroadcastSkillUserCmd* BroadcastSkillUserCmd::default_instance_ = NULL;

BroadcastSkillUserCmd* BroadcastSkillUserCmd::New() const {
  return new BroadcastSkillUserCmd;
}

void BroadcastSkillUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastSkillUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(tid_, skillid_);
    cmd_ = 5;
    param_ = 31;
    attid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastSkillUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BroadcastSkillUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = BROADCAST_SKILL_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attid;
        break;
      }

      // optional uint64 attid = 3;
      case 3: {
        if (tag == 24) {
         parse_attid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attid_)));
          set_has_attid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional uint32 skillID = 4;
      case 4: {
        if (tag == 32) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tid;
        break;
      }

      // optional uint64 tid = 6;
      case 6: {
        if (tag == 48) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BroadcastSkillUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BroadcastSkillUserCmd)
  return false;
#undef DO_
}

void BroadcastSkillUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BroadcastSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = BROADCAST_SKILL_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 attid = 3;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->attid(), output);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional uint64 tid = 6;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BroadcastSkillUserCmd)
}

::google::protobuf::uint8* BroadcastSkillUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BroadcastSkillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = BROADCAST_SKILL_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 attid = 3;
  if (has_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->attid(), target);
  }

  // optional uint32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillid(), target);
  }

  // optional .Cmd.ScenePos pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional uint64 tid = 6;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BroadcastSkillUserCmd)
  return target;
}

int BroadcastSkillUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = BROADCAST_SKILL_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 attid = 3;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attid());
    }

    // optional uint32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional .Cmd.ScenePos pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 tid = 6;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastSkillUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastSkillUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastSkillUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastSkillUserCmd::MergeFrom(const BroadcastSkillUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_attid()) {
      set_attid(from.attid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastSkillUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastSkillUserCmd::CopyFrom(const BroadcastSkillUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastSkillUserCmd::IsInitialized() const {

  return true;
}

void BroadcastSkillUserCmd::Swap(BroadcastSkillUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(attid_, other->attid_);
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastSkillUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastSkillUserCmd_descriptor_;
  metadata.reflection = BroadcastSkillUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapObjectData::kCmdFieldNumber;
const int MapObjectData::kParamFieldNumber;
const int MapObjectData::kGuidFieldNumber;
const int MapObjectData::kAttrsFieldNumber;
#endif  // !_MSC_VER

MapObjectData::MapObjectData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapObjectData)
}

void MapObjectData::InitAsDefaultInstance() {
}

MapObjectData::MapObjectData(const MapObjectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapObjectData)
}

void MapObjectData::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 38;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapObjectData::~MapObjectData() {
  // @@protoc_insertion_point(destructor:Cmd.MapObjectData)
  SharedDtor();
}

void MapObjectData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapObjectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapObjectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapObjectData_descriptor_;
}

const MapObjectData& MapObjectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

MapObjectData* MapObjectData::default_instance_ = NULL;

MapObjectData* MapObjectData::New() const {
  return new MapObjectData;
}

void MapObjectData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 38;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapObjectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapObjectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = MAP_OBJECT_DATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 4;
      case 4: {
        if (tag == 34) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapObjectData)
  return false;
#undef DO_
}

void MapObjectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapObjectData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = MAP_OBJECT_DATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapObjectData)
}

::google::protobuf::uint8* MapObjectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapObjectData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = MAP_OBJECT_DATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapObjectData)
  return target;
}

int MapObjectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = MAP_OBJECT_DATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated .Cmd.UserAttr attrs = 4;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapObjectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapObjectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapObjectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapObjectData::MergeFrom(const MapObjectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapObjectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapObjectData::CopyFrom(const MapObjectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapObjectData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void MapObjectData::Swap(MapObjectData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapObjectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapObjectData_descriptor_;
  metadata.reflection = MapObjectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReliveUserCmd::kCmdFieldNumber;
const int ReliveUserCmd::kParamFieldNumber;
const int ReliveUserCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

ReliveUserCmd::ReliveUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReliveUserCmd)
}

void ReliveUserCmd::InitAsDefaultInstance() {
}

ReliveUserCmd::ReliveUserCmd(const ReliveUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReliveUserCmd)
}

void ReliveUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 41;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReliveUserCmd::~ReliveUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReliveUserCmd)
  SharedDtor();
}

void ReliveUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReliveUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReliveUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReliveUserCmd_descriptor_;
}

const ReliveUserCmd& ReliveUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

ReliveUserCmd* ReliveUserCmd::default_instance_ = NULL;

ReliveUserCmd* ReliveUserCmd::New() const {
  return new ReliveUserCmd;
}

void ReliveUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 41;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReliveUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReliveUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = RELIVE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReliveUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReliveUserCmd)
  return false;
#undef DO_
}

void ReliveUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReliveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = RELIVE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReliveUserCmd)
}

::google::protobuf::uint8* ReliveUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReliveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = RELIVE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReliveUserCmd)
  return target;
}

int ReliveUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = RELIVE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReliveUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReliveUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReliveUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReliveUserCmd::MergeFrom(const ReliveUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReliveUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReliveUserCmd::CopyFrom(const ReliveUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReliveUserCmd::IsInitialized() const {

  return true;
}

void ReliveUserCmd::Swap(ReliveUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReliveUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReliveUserCmd_descriptor_;
  metadata.reflection = ReliveUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToUserCmd::kCmdFieldNumber;
const int GoToUserCmd::kParamFieldNumber;
const int GoToUserCmd::kPosFieldNumber;
const int GoToUserCmd::kCharidFieldNumber;
const int GoToUserCmd::kIsgomapFieldNumber;
#endif  // !_MSC_VER

GoToUserCmd::GoToUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToUserCmd)
}

void GoToUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

GoToUserCmd::GoToUserCmd(const GoToUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToUserCmd)
}

void GoToUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 42;
  pos_ = NULL;
  charid_ = GOOGLE_ULONGLONG(0);
  isgomap_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToUserCmd::~GoToUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToUserCmd)
  SharedDtor();
}

void GoToUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void GoToUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToUserCmd_descriptor_;
}

const GoToUserCmd& GoToUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

GoToUserCmd* GoToUserCmd::default_instance_ = NULL;

GoToUserCmd* GoToUserCmd::New() const {
  return new GoToUserCmd;
}

void GoToUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoToUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, isgomap_);
    cmd_ = 5;
    param_ = 42;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = GOTO_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isgomap;
        break;
      }

      // optional bool isgomap = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_isgomap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgomap_)));
          set_has_isgomap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToUserCmd)
  return false;
#undef DO_
}

void GoToUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = GOTO_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional bool isgomap = 5 [default = false];
  if (has_isgomap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isgomap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToUserCmd)
}

::google::protobuf::uint8* GoToUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = GOTO_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional bool isgomap = 5 [default = false];
  if (has_isgomap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isgomap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToUserCmd)
  return target;
}

int GoToUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = GOTO_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool isgomap = 5 [default = false];
    if (has_isgomap()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToUserCmd::MergeFrom(const GoToUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_isgomap()) {
      set_isgomap(from.isgomap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToUserCmd::CopyFrom(const GoToUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToUserCmd::IsInitialized() const {

  return true;
}

void GoToUserCmd::Swap(GoToUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pos_, other->pos_);
    std::swap(charid_, other->charid_);
    std::swap(isgomap_, other->isgomap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToUserCmd_descriptor_;
  metadata.reflection = GoToUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectionPosUserCmd::kCmdFieldNumber;
const int ReconnectionPosUserCmd::kParamFieldNumber;
const int ReconnectionPosUserCmd::kPosFieldNumber;
#endif  // !_MSC_VER

ReconnectionPosUserCmd::ReconnectionPosUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReconnectionPosUserCmd)
}

void ReconnectionPosUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ReconnectionPosUserCmd::ReconnectionPosUserCmd(const ReconnectionPosUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReconnectionPosUserCmd)
}

void ReconnectionPosUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 43;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectionPosUserCmd::~ReconnectionPosUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReconnectionPosUserCmd)
  SharedDtor();
}

void ReconnectionPosUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ReconnectionPosUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectionPosUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectionPosUserCmd_descriptor_;
}

const ReconnectionPosUserCmd& ReconnectionPosUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

ReconnectionPosUserCmd* ReconnectionPosUserCmd::default_instance_ = NULL;

ReconnectionPosUserCmd* ReconnectionPosUserCmd::New() const {
  return new ReconnectionPosUserCmd;
}

void ReconnectionPosUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 43;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectionPosUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReconnectionPosUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = RECONNECTION_POS_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReconnectionPosUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReconnectionPosUserCmd)
  return false;
#undef DO_
}

void ReconnectionPosUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReconnectionPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = RECONNECTION_POS_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReconnectionPosUserCmd)
}

::google::protobuf::uint8* ReconnectionPosUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReconnectionPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = RECONNECTION_POS_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReconnectionPosUserCmd)
  return target;
}

int ReconnectionPosUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = RECONNECTION_POS_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectionPosUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectionPosUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectionPosUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectionPosUserCmd::MergeFrom(const ReconnectionPosUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectionPosUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectionPosUserCmd::CopyFrom(const ReconnectionPosUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectionPosUserCmd::IsInitialized() const {

  return true;
}

void ReconnectionPosUserCmd::Swap(ReconnectionPosUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectionPosUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectionPosUserCmd_descriptor_;
  metadata.reflection = ReconnectionPosUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToExitPosUserCmd::kCmdFieldNumber;
const int GoToExitPosUserCmd::kParamFieldNumber;
const int GoToExitPosUserCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

GoToExitPosUserCmd::GoToExitPosUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToExitPosUserCmd)
}

void GoToExitPosUserCmd::InitAsDefaultInstance() {
}

GoToExitPosUserCmd::GoToExitPosUserCmd(const GoToExitPosUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToExitPosUserCmd)
}

void GoToExitPosUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 48;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToExitPosUserCmd::~GoToExitPosUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToExitPosUserCmd)
  SharedDtor();
}

void GoToExitPosUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoToExitPosUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToExitPosUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToExitPosUserCmd_descriptor_;
}

const GoToExitPosUserCmd& GoToExitPosUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

GoToExitPosUserCmd* GoToExitPosUserCmd::default_instance_ = NULL;

GoToExitPosUserCmd* GoToExitPosUserCmd::New() const {
  return new GoToExitPosUserCmd;
}

void GoToExitPosUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 5;
    param_ = 48;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToExitPosUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToExitPosUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = GOTO_EXIT_POS_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToExitPosUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToExitPosUserCmd)
  return false;
#undef DO_
}

void GoToExitPosUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToExitPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = GOTO_EXIT_POS_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToExitPosUserCmd)
}

::google::protobuf::uint8* GoToExitPosUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToExitPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = GOTO_EXIT_POS_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToExitPosUserCmd)
  return target;
}

int GoToExitPosUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = GOTO_EXIT_POS_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToExitPosUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToExitPosUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToExitPosUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToExitPosUserCmd::MergeFrom(const GoToExitPosUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToExitPosUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToExitPosUserCmd::CopyFrom(const GoToExitPosUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToExitPosUserCmd::IsInitialized() const {

  return true;
}

void GoToExitPosUserCmd::Swap(GoToExitPosUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToExitPosUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToExitPosUserCmd_descriptor_;
  metadata.reflection = GoToExitPosUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToRandomPosUserCmd::kCmdFieldNumber;
const int GoToRandomPosUserCmd::kParamFieldNumber;
const int GoToRandomPosUserCmd::kMapidFieldNumber;
const int GoToRandomPosUserCmd::kPosFieldNumber;
#endif  // !_MSC_VER

GoToRandomPosUserCmd::GoToRandomPosUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToRandomPosUserCmd)
}

void GoToRandomPosUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

GoToRandomPosUserCmd::GoToRandomPosUserCmd(const GoToRandomPosUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToRandomPosUserCmd)
}

void GoToRandomPosUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 5;
  param_ = 49;
  mapid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToRandomPosUserCmd::~GoToRandomPosUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToRandomPosUserCmd)
  SharedDtor();
}

void GoToRandomPosUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void GoToRandomPosUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToRandomPosUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToRandomPosUserCmd_descriptor_;
}

const GoToRandomPosUserCmd& GoToRandomPosUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser_2eproto();
  return *default_instance_;
}

GoToRandomPosUserCmd* GoToRandomPosUserCmd::default_instance_ = NULL;

GoToRandomPosUserCmd* GoToRandomPosUserCmd::New() const {
  return new GoToRandomPosUserCmd;
}

void GoToRandomPosUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 5;
    param_ = 49;
    mapid_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToRandomPosUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToRandomPosUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CmdParam param = 2 [default = GOTO_RANDOM_POS_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToRandomPosUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToRandomPosUserCmd)
  return false;
#undef DO_
}

void GoToRandomPosUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToRandomPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CmdParam param = 2 [default = GOTO_RANDOM_POS_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToRandomPosUserCmd)
}

::google::protobuf::uint8* GoToRandomPosUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToRandomPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CmdParam param = 2 [default = GOTO_RANDOM_POS_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToRandomPosUserCmd)
  return target;
}

int GoToRandomPosUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CmdParam param = 2 [default = GOTO_RANDOM_POS_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToRandomPosUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToRandomPosUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToRandomPosUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToRandomPosUserCmd::MergeFrom(const GoToRandomPosUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToRandomPosUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToRandomPosUserCmd::CopyFrom(const GoToRandomPosUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToRandomPosUserCmd::IsInitialized() const {

  return true;
}

void GoToRandomPosUserCmd::Swap(GoToRandomPosUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToRandomPosUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToRandomPosUserCmd_descriptor_;
  metadata.reflection = GoToRandomPosUserCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
